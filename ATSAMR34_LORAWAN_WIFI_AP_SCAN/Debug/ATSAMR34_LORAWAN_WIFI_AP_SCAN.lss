
ATSAMR34_LORAWAN_WIFI_AP_SCAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001fcb4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001fcb4  0001fcb4  0002fcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a88  20000000  0001fcbc  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030a88  2**0
                  CONTENTS
  4 .bss          000015a0  20000a88  00020748  00030a88  2**3
                  ALLOC
  5 .stack        00002000  20002028  00021ce8  00030a88  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030a88  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  00030ab0  2**0
                  CONTENTS, READONLY
  8 .debug_info   000a4819  00000000  00000000  00030b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f90c  00000000  00000000  000d5355  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000224c0  00000000  00000000  000e4c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001c70  00000000  00000000  00107121  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000026c8  00000000  00000000  00108d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035ba4  00000000  00000000  0010b459  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003c7b0  00000000  00000000  00140ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b82e9  00000000  00000000  0017d7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000061f0  00000000  00000000  00235a98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	28 40 00 20 a9 5f 00 00 a5 5f 00 00 a5 5f 00 00     (@. ._..._..._..
	...
      2c:	a5 5f 00 00 00 00 00 00 00 00 00 00 a5 5f 00 00     ._..........._..
      3c:	a5 5f 00 00 a5 5f 00 00 a5 5f 00 00 09 3a 00 00     ._..._..._...:..
      4c:	ed 31 00 00 a5 5f 00 00 a5 5f 00 00 a5 5f 00 00     .1..._..._..._..
      5c:	a5 5f 00 00 c1 47 00 00 d1 47 00 00 e1 47 00 00     ._...G...G...G..
      6c:	f1 47 00 00 01 48 00 00 11 48 00 00 a5 5f 00 00     .G...H...H..._..
      7c:	a5 5f 00 00 a5 5f 00 00 61 5b 00 00 71 5b 00 00     ._..._..a[..q[..
      8c:	81 5b 00 00 91 5b 00 00 a1 5b 00 00 19 2f 00 00     .[...[...[.../..
      9c:	a5 5f 00 00 a5 5f 00 00 a5 5f 00 00 a5 5f 00 00     ._..._..._..._..
      ac:	a5 5f 00 00 00 00 00 00                             ._......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a88 	.word	0x20000a88
      d4:	00000000 	.word	0x00000000
      d8:	0001fcbc 	.word	0x0001fcbc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a8c 	.word	0x20000a8c
     108:	0001fcbc 	.word	0x0001fcbc
     10c:	0001fcbc 	.word	0x0001fcbc
     110:	00000000 	.word	0x00000000

00000114 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
     114:	b510      	push	{r4, lr}
	if (gpfIsr) {
     116:	4b03      	ldr	r3, [pc, #12]	; (124 <chip_isr+0x10>)
     118:	681b      	ldr	r3, [r3, #0]
     11a:	2b00      	cmp	r3, #0
     11c:	d000      	beq.n	120 <chip_isr+0xc>
		gpfIsr();
     11e:	4798      	blx	r3
	}
}
     120:	bd10      	pop	{r4, pc}
     122:	46c0      	nop			; (mov r8, r8)
     124:	20000aa4 	.word	0x20000aa4

00000128 <nm_bsp_deinit>:

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     128:	4b04      	ldr	r3, [pc, #16]	; (13c <nm_bsp_deinit+0x14>)
     12a:	2280      	movs	r2, #128	; 0x80
     12c:	0212      	lsls	r2, r2, #8
     12e:	615a      	str	r2, [r3, #20]
     130:	2280      	movs	r2, #128	; 0x80
     132:	0052      	lsls	r2, r2, #1
     134:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);

//	port_pin_set_config(CONF_WINC_SPI_INT_PIN, &pin_conf); // commented by m16946
	return M2M_SUCCESS;
}
     136:	2000      	movs	r0, #0
     138:	4770      	bx	lr
     13a:	46c0      	nop			; (mov r8, r8)
     13c:	40002800 	.word	0x40002800

00000140 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     140:	b570      	push	{r4, r5, r6, lr}
	while (u32TimeMsec--) {
     142:	1e44      	subs	r4, r0, #1
     144:	2800      	cmp	r0, #0
     146:	d004      	beq.n	152 <nm_bsp_sleep+0x12>
		delay_ms(1);
     148:	4d02      	ldr	r5, [pc, #8]	; (154 <nm_bsp_sleep+0x14>)
     14a:	2001      	movs	r0, #1
     14c:	47a8      	blx	r5
	while (u32TimeMsec--) {
     14e:	3c01      	subs	r4, #1
     150:	d2fb      	bcs.n	14a <nm_bsp_sleep+0xa>
	}
}
     152:	bd70      	pop	{r4, r5, r6, pc}
     154:	000029e1 	.word	0x000029e1

00000158 <nm_bsp_reset>:
{
     158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     15a:	4c07      	ldr	r4, [pc, #28]	; (178 <nm_bsp_reset+0x20>)
     15c:	2780      	movs	r7, #128	; 0x80
     15e:	023f      	lsls	r7, r7, #8
     160:	6167      	str	r7, [r4, #20]
     162:	2580      	movs	r5, #128	; 0x80
     164:	006d      	lsls	r5, r5, #1
     166:	6165      	str	r5, [r4, #20]
	nm_bsp_sleep(1);
     168:	2001      	movs	r0, #1
     16a:	4e04      	ldr	r6, [pc, #16]	; (17c <nm_bsp_reset+0x24>)
     16c:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     16e:	61a7      	str	r7, [r4, #24]
	nm_bsp_sleep(10);
     170:	200a      	movs	r0, #10
     172:	47b0      	blx	r6
     174:	61a5      	str	r5, [r4, #24]
}
     176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     178:	40002800 	.word	0x40002800
     17c:	00000141 	.word	0x00000141

00000180 <nm_bsp_init>:
{
     180:	b570      	push	{r4, r5, r6, lr}
     182:	b082      	sub	sp, #8
	gpfIsr = NULL;
     184:	2300      	movs	r3, #0
     186:	4a16      	ldr	r2, [pc, #88]	; (1e0 <nm_bsp_init+0x60>)
     188:	6013      	str	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     18a:	ac01      	add	r4, sp, #4
     18c:	2501      	movs	r5, #1
     18e:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     190:	70a3      	strb	r3, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     192:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
     194:	0021      	movs	r1, r4
     196:	2008      	movs	r0, #8
     198:	4e12      	ldr	r6, [pc, #72]	; (1e4 <nm_bsp_init+0x64>)
     19a:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
     19c:	0021      	movs	r1, r4
     19e:	200f      	movs	r0, #15
     1a0:	47b0      	blx	r6
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
     1a2:	0021      	movs	r1, r4
     1a4:	201c      	movs	r0, #28
     1a6:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
     1a8:	4b0f      	ldr	r3, [pc, #60]	; (1e8 <nm_bsp_init+0x68>)
     1aa:	2280      	movs	r2, #128	; 0x80
     1ac:	0212      	lsls	r2, r2, #8
     1ae:	615a      	str	r2, [r3, #20]
     1b0:	2280      	movs	r2, #128	; 0x80
     1b2:	0052      	lsls	r2, r2, #1
     1b4:	615a      	str	r2, [r3, #20]
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
     1b6:	4b0d      	ldr	r3, [pc, #52]	; (1ec <nm_bsp_init+0x6c>)
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	421d      	tst	r5, r3
     1bc:	d003      	beq.n	1c6 <nm_bsp_init+0x46>
     1be:	4b0b      	ldr	r3, [pc, #44]	; (1ec <nm_bsp_init+0x6c>)
     1c0:	681b      	ldr	r3, [r3, #0]
     1c2:	079b      	lsls	r3, r3, #30
     1c4:	d401      	bmi.n	1ca <nm_bsp_init+0x4a>
	    delay_init();
     1c6:	4b0a      	ldr	r3, [pc, #40]	; (1f0 <nm_bsp_init+0x70>)
     1c8:	4798      	blx	r3
	nm_bsp_reset();
     1ca:	4b0a      	ldr	r3, [pc, #40]	; (1f4 <nm_bsp_init+0x74>)
     1cc:	4798      	blx	r3
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
	cpu_irq_enable();
     1ce:	2201      	movs	r2, #1
     1d0:	4b09      	ldr	r3, [pc, #36]	; (1f8 <nm_bsp_init+0x78>)
     1d2:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1d4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     1d8:	b662      	cpsie	i
}
     1da:	2000      	movs	r0, #0
     1dc:	b002      	add	sp, #8
     1de:	bd70      	pop	{r4, r5, r6, pc}
     1e0:	20000aa4 	.word	0x20000aa4
     1e4:	000036fd 	.word	0x000036fd
     1e8:	40002800 	.word	0x40002800
     1ec:	e000e010 	.word	0xe000e010
     1f0:	00002975 	.word	0x00002975
     1f4:	00000159 	.word	0x00000159
     1f8:	2000000c 	.word	0x2000000c

000001fc <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
     1fc:	b510      	push	{r4, lr}
     1fe:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
     200:	4b0e      	ldr	r3, [pc, #56]	; (23c <nm_bsp_register_isr+0x40>)
     202:	6018      	str	r0, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
     204:	ac01      	add	r4, sp, #4
     206:	0020      	movs	r0, r4
     208:	4b0d      	ldr	r3, [pc, #52]	; (240 <nm_bsp_register_isr+0x44>)
     20a:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
     20c:	2316      	movs	r3, #22
     20e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
     210:	2300      	movs	r3, #0
     212:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     214:	3301      	adds	r3, #1
     216:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     218:	3301      	adds	r3, #1
     21a:	72e3      	strb	r3, [r4, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
     21c:	0021      	movs	r1, r4
     21e:	2006      	movs	r0, #6
     220:	4b08      	ldr	r3, [pc, #32]	; (244 <nm_bsp_register_isr+0x48>)
     222:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
     224:	2200      	movs	r2, #0
     226:	2106      	movs	r1, #6
     228:	4807      	ldr	r0, [pc, #28]	; (248 <nm_bsp_register_isr+0x4c>)
     22a:	4b08      	ldr	r3, [pc, #32]	; (24c <nm_bsp_register_isr+0x50>)
     22c:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     22e:	2100      	movs	r1, #0
     230:	2006      	movs	r0, #6
     232:	4b07      	ldr	r3, [pc, #28]	; (250 <nm_bsp_register_isr+0x54>)
     234:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
     236:	b004      	add	sp, #16
     238:	bd10      	pop	{r4, pc}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	20000aa4 	.word	0x20000aa4
     240:	000032e1 	.word	0x000032e1
     244:	000032f5 	.word	0x000032f5
     248:	00000115 	.word	0x00000115
     24c:	00003181 	.word	0x00003181
     250:	000031ad 	.word	0x000031ad

00000254 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     254:	b510      	push	{r4, lr}
	if (u8Enable) {
     256:	2800      	cmp	r0, #0
     258:	d104      	bne.n	264 <nm_bsp_interrupt_ctrl+0x10>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     25a:	2100      	movs	r1, #0
     25c:	2006      	movs	r0, #6
     25e:	4b04      	ldr	r3, [pc, #16]	; (270 <nm_bsp_interrupt_ctrl+0x1c>)
     260:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     262:	bd10      	pop	{r4, pc}
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     264:	2100      	movs	r1, #0
     266:	2006      	movs	r0, #6
     268:	4b02      	ldr	r3, [pc, #8]	; (274 <nm_bsp_interrupt_ctrl+0x20>)
     26a:	4798      	blx	r3
     26c:	e7f9      	b.n	262 <nm_bsp_interrupt_ctrl+0xe>
     26e:	46c0      	nop			; (mov r8, r8)
     270:	000031cd 	.word	0x000031cd
     274:	000031ad 	.word	0x000031ad

00000278 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
     278:	b510      	push	{r4, lr}
     27a:	b090      	sub	sp, #64	; 0x40
		const struct spi_slave_inst_config *const config)
{
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
     27c:	4c2b      	ldr	r4, [pc, #172]	; (32c <nm_bus_init+0xb4>)
     27e:	2317      	movs	r3, #23
     280:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     282:	2300      	movs	r3, #0
     284:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     286:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     288:	a901      	add	r1, sp, #4
     28a:	2201      	movs	r2, #1
     28c:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     28e:	708b      	strb	r3, [r1, #2]
	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     290:	700a      	strb	r2, [r1, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
     292:	2017      	movs	r0, #23
     294:	4b26      	ldr	r3, [pc, #152]	; (330 <nm_bus_init+0xb8>)
     296:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     298:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     29a:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     29c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     29e:	2900      	cmp	r1, #0
     2a0:	d104      	bne.n	2ac <nm_bus_init+0x34>
		return &(ports[port_index]->Group[group_index]);
     2a2:	0953      	lsrs	r3, r2, #5
     2a4:	01db      	lsls	r3, r3, #7
     2a6:	4923      	ldr	r1, [pc, #140]	; (334 <nm_bus_init+0xbc>)
     2a8:	468c      	mov	ip, r1
     2aa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2ac:	211f      	movs	r1, #31
     2ae:	4011      	ands	r1, r2
     2b0:	2201      	movs	r2, #1
     2b2:	0010      	movs	r0, r2
     2b4:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     2b6:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
     2b8:	ac02      	add	r4, sp, #8
     2ba:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     2bc:	2300      	movs	r3, #0
     2be:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     2c0:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     2c2:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
     2c4:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
     2c6:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
     2c8:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
     2ca:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     2cc:	3223      	adds	r2, #35	; 0x23
     2ce:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     2d0:	3a18      	subs	r2, #24
     2d2:	2100      	movs	r1, #0
     2d4:	a808      	add	r0, sp, #32
     2d6:	4b18      	ldr	r3, [pc, #96]	; (338 <nm_bus_init+0xc0>)
     2d8:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
     2da:	4b18      	ldr	r3, [pc, #96]	; (33c <nm_bus_init+0xc4>)
     2dc:	61a3      	str	r3, [r4, #24]
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
	spi_attach_slave(&slave_inst, &slave_config);

	/* Configure the SPI master. */
	spi_get_config_defaults(&config1);
	config1.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
     2de:	2380      	movs	r3, #128	; 0x80
     2e0:	025b      	lsls	r3, r3, #9
     2e2:	60e3      	str	r3, [r4, #12]
	config1.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
     2e4:	4b16      	ldr	r3, [pc, #88]	; (340 <nm_bus_init+0xc8>)
     2e6:	62a3      	str	r3, [r4, #40]	; 0x28
	config1.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
     2e8:	2301      	movs	r3, #1
     2ea:	425b      	negs	r3, r3
     2ec:	62e3      	str	r3, [r4, #44]	; 0x2c
	config1.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
     2ee:	4b15      	ldr	r3, [pc, #84]	; (344 <nm_bus_init+0xcc>)
     2f0:	6323      	str	r3, [r4, #48]	; 0x30
	config1.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
     2f2:	4b15      	ldr	r3, [pc, #84]	; (348 <nm_bus_init+0xd0>)
     2f4:	6363      	str	r3, [r4, #52]	; 0x34
	config1.master_slave_select_enable = false;
	config1.generator_source = GCLK_GENERATOR_0;

	//config1.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
	if (spi_init(&master1, CONF_WINC_SPI_MODULE, &config1) != STATUS_OK) {
     2f6:	0022      	movs	r2, r4
     2f8:	4914      	ldr	r1, [pc, #80]	; (34c <nm_bus_init+0xd4>)
     2fa:	4815      	ldr	r0, [pc, #84]	; (350 <nm_bus_init+0xd8>)
     2fc:	4b15      	ldr	r3, [pc, #84]	; (354 <nm_bus_init+0xdc>)
     2fe:	4798      	blx	r3
     300:	2800      	cmp	r0, #0
     302:	d110      	bne.n	326 <nm_bus_init+0xae>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     304:	4b12      	ldr	r3, [pc, #72]	; (350 <nm_bus_init+0xd8>)
     306:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
     308:	69d3      	ldr	r3, [r2, #28]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
#  endif

	while (spi_is_syncing(module)) {
     30a:	2b00      	cmp	r3, #0
     30c:	d1fc      	bne.n	308 <nm_bus_init+0x90>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     30e:	6813      	ldr	r3, [r2, #0]
     310:	2102      	movs	r1, #2
     312:	430b      	orrs	r3, r1
     314:	6013      	str	r3, [r2, #0]
	}

	/* Enable the SPI master. */
	spi_enable(&master1);

	nm_bsp_reset();
     316:	4b10      	ldr	r3, [pc, #64]	; (358 <nm_bus_init+0xe0>)
     318:	4798      	blx	r3
	nm_bsp_sleep(1);
     31a:	2001      	movs	r0, #1
     31c:	4b0f      	ldr	r3, [pc, #60]	; (35c <nm_bus_init+0xe4>)
     31e:	4798      	blx	r3
#endif
	return result;
     320:	2000      	movs	r0, #0
}
     322:	b010      	add	sp, #64	; 0x40
     324:	bd10      	pop	{r4, pc}
		return M2M_ERR_BUS_FAIL;
     326:	2006      	movs	r0, #6
     328:	4240      	negs	r0, r0
     32a:	e7fa      	b.n	322 <nm_bus_init+0xaa>
     32c:	200010e4 	.word	0x200010e4
     330:	000036fd 	.word	0x000036fd
     334:	40002800 	.word	0x40002800
     338:	00018219 	.word	0x00018219
     33c:	000186a0 	.word	0x000186a0
     340:	00220003 	.word	0x00220003
     344:	00360003 	.word	0x00360003
     348:	00370003 	.word	0x00370003
     34c:	43000400 	.word	0x43000400
     350:	200010e8 	.word	0x200010e8
     354:	00004821 	.word	0x00004821
     358:	00000159 	.word	0x00000159
     35c:	00000141 	.word	0x00000141

00000360 <nm_bus_ioctl>:
*					Arbitrary parameter depending on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     360:	b5f0      	push	{r4, r5, r6, r7, lr}
     362:	46de      	mov	lr, fp
     364:	4657      	mov	r7, sl
     366:	464e      	mov	r6, r9
     368:	4645      	mov	r5, r8
     36a:	b5e0      	push	{r5, r6, r7, lr}
     36c:	b083      	sub	sp, #12
	sint8 s8Ret = 0;
	switch(u8Cmd)
     36e:	2803      	cmp	r0, #3
     370:	d000      	beq.n	374 <nm_bus_ioctl+0x14>
     372:	e075      	b.n	460 <nm_bus_ioctl+0x100>
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     374:	680e      	ldr	r6, [r1, #0]
     376:	684d      	ldr	r5, [r1, #4]
     378:	890c      	ldrh	r4, [r1, #8]
	uint8 u8Dummy = 0;
     37a:	2200      	movs	r2, #0
     37c:	466b      	mov	r3, sp
     37e:	71da      	strb	r2, [r3, #7]
	if((pu8Miso == NULL)&&(pu8Mosi == NULL)||(u16Sz == 0)) {
     380:	2d00      	cmp	r5, #0
     382:	d027      	beq.n	3d4 <nm_bus_ioctl+0x74>
     384:	2c00      	cmp	r4, #0
     386:	d065      	beq.n	454 <nm_bus_ioctl+0xf4>
	if (pu8Mosi == NULL) {
     388:	2e00      	cmp	r6, #0
     38a:	d100      	bne.n	38e <nm_bus_ioctl+0x2e>
     38c:	e077      	b.n	47e <nm_bus_ioctl+0x11e>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     38e:	2300      	movs	r3, #0
     390:	4698      	mov	r8, r3
     392:	2300      	movs	r3, #0
     394:	469b      	mov	fp, r3
	spi_select_slave(&master1, &slave_inst, true);
     396:	2201      	movs	r2, #1
     398:	493b      	ldr	r1, [pc, #236]	; (488 <nm_bus_ioctl+0x128>)
     39a:	483c      	ldr	r0, [pc, #240]	; (48c <nm_bus_ioctl+0x12c>)
     39c:	4b3c      	ldr	r3, [pc, #240]	; (490 <nm_bus_ioctl+0x130>)
     39e:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     3a0:	4b3a      	ldr	r3, [pc, #232]	; (48c <nm_bus_ioctl+0x12c>)
     3a2:	469a      	mov	sl, r3
		while (!spi_is_ready_to_write(&master1))
     3a4:	2701      	movs	r7, #1
		while (!spi_is_ready_to_read(&master1))
     3a6:	2204      	movs	r2, #4
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     3a8:	4699      	mov	r9, r3
			pu8Miso++;
     3aa:	4659      	mov	r1, fp
     3ac:	424b      	negs	r3, r1
     3ae:	4159      	adcs	r1, r3
     3b0:	468b      	mov	fp, r1
		txd_data = *pu8Mosi;
     3b2:	7830      	ldrb	r0, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     3b4:	4653      	mov	r3, sl
     3b6:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     3b8:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_write(&master1))
     3ba:	4239      	tst	r1, r7
     3bc:	d0fc      	beq.n	3b8 <nm_bus_ioctl+0x58>
     3be:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     3c0:	4239      	tst	r1, r7
     3c2:	d0fc      	beq.n	3be <nm_bus_ioctl+0x5e>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     3c4:	6298      	str	r0, [r3, #40]	; 0x28
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     3c6:	7e19      	ldrb	r1, [r3, #24]
		while (!spi_is_ready_to_read(&master1))
     3c8:	4211      	tst	r1, r2
     3ca:	d0fc      	beq.n	3c6 <nm_bus_ioctl+0x66>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     3cc:	4649      	mov	r1, r9
     3ce:	7989      	ldrb	r1, [r1, #6]
     3d0:	468c      	mov	ip, r1
     3d2:	e011      	b.n	3f8 <nm_bus_ioctl+0x98>
	if((pu8Miso == NULL)&&(pu8Mosi == NULL)||(u16Sz == 0)) {
     3d4:	2e00      	cmp	r6, #0
     3d6:	d03a      	beq.n	44e <nm_bus_ioctl+0xee>
     3d8:	2c00      	cmp	r4, #0
     3da:	d03e      	beq.n	45a <nm_bus_ioctl+0xfa>
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     3dc:	2300      	movs	r3, #0
     3de:	4698      	mov	r8, r3
		u8SkipMiso = 1;
     3e0:	3301      	adds	r3, #1
     3e2:	469b      	mov	fp, r3
		pu8Miso = &u8Dummy;
     3e4:	466b      	mov	r3, sp
     3e6:	1ddd      	adds	r5, r3, #7
     3e8:	e7d5      	b.n	396 <nm_bus_ioctl+0x36>
     3ea:	4660      	mov	r0, ip
     3ec:	2801      	cmp	r0, #1
     3ee:	d00d      	beq.n	40c <nm_bus_ioctl+0xac>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     3f0:	6a98      	ldr	r0, [r3, #40]	; 0x28
     3f2:	b2c0      	uxtb	r0, r0
		while (spi_read(&master1, &rxd_data) != STATUS_OK)
     3f4:	2900      	cmp	r1, #0
     3f6:	d00d      	beq.n	414 <nm_bus_ioctl+0xb4>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     3f8:	7e19      	ldrb	r1, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
     3fa:	4211      	tst	r1, r2
     3fc:	d0fc      	beq.n	3f8 <nm_bus_ioctl+0x98>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     3fe:	8b58      	ldrh	r0, [r3, #26]
	enum status_code retval = STATUS_OK;
     400:	2100      	movs	r1, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     402:	4210      	tst	r0, r2
     404:	d0f1      	beq.n	3ea <nm_bus_ioctl+0x8a>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     406:	835a      	strh	r2, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
     408:	311e      	adds	r1, #30
     40a:	e7ee      	b.n	3ea <nm_bus_ioctl+0x8a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     40c:	6a98      	ldr	r0, [r3, #40]	; 0x28
     40e:	05c0      	lsls	r0, r0, #23
     410:	0dc0      	lsrs	r0, r0, #23
     412:	e7ef      	b.n	3f4 <nm_bus_ioctl+0x94>
		*pu8Miso = rxd_data;
     414:	7028      	strb	r0, [r5, #0]
		u16Sz--;
     416:	3c01      	subs	r4, #1
     418:	b2a4      	uxth	r4, r4
			pu8Miso++;
     41a:	445d      	add	r5, fp
			pu8Mosi++;
     41c:	4643      	mov	r3, r8
     41e:	4259      	negs	r1, r3
     420:	414b      	adcs	r3, r1
     422:	18f6      	adds	r6, r6, r3
	while (u16Sz) {
     424:	2c00      	cmp	r4, #0
     426:	d1c4      	bne.n	3b2 <nm_bus_ioctl+0x52>
	SercomSpi *const spi_module = &(module->hw->SPI);
     428:	4b18      	ldr	r3, [pc, #96]	; (48c <nm_bus_ioctl+0x12c>)
     42a:	6819      	ldr	r1, [r3, #0]
	while (!spi_is_write_complete(&master1))
     42c:	2202      	movs	r2, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     42e:	7e0b      	ldrb	r3, [r1, #24]
     430:	4213      	tst	r3, r2
     432:	d0fc      	beq.n	42e <nm_bus_ioctl+0xce>
	spi_select_slave(&master1, &slave_inst, false);
     434:	2200      	movs	r2, #0
     436:	4914      	ldr	r1, [pc, #80]	; (488 <nm_bus_ioctl+0x128>)
     438:	4814      	ldr	r0, [pc, #80]	; (48c <nm_bus_ioctl+0x12c>)
     43a:	4b15      	ldr	r3, [pc, #84]	; (490 <nm_bus_ioctl+0x130>)
     43c:	4798      	blx	r3
	return M2M_SUCCESS;
     43e:	2000      	movs	r0, #0
			M2M_ERR("invalid ioclt cmd\n");
			break;
	}

	return s8Ret;
}
     440:	b003      	add	sp, #12
     442:	bc3c      	pop	{r2, r3, r4, r5}
     444:	4690      	mov	r8, r2
     446:	4699      	mov	r9, r3
     448:	46a2      	mov	sl, r4
     44a:	46ab      	mov	fp, r5
     44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return M2M_ERR_INVALID_ARG;
     44e:	200f      	movs	r0, #15
     450:	4240      	negs	r0, r0
     452:	e7f5      	b.n	440 <nm_bus_ioctl+0xe0>
     454:	200f      	movs	r0, #15
     456:	4240      	negs	r0, r0
     458:	e7f2      	b.n	440 <nm_bus_ioctl+0xe0>
     45a:	200f      	movs	r0, #15
     45c:	4240      	negs	r0, r0
		break;
     45e:	e7ef      	b.n	440 <nm_bus_ioctl+0xe0>
			M2M_ERR("invalid ioclt cmd\n");
     460:	220a      	movs	r2, #10
     462:	32ff      	adds	r2, #255	; 0xff
     464:	490b      	ldr	r1, [pc, #44]	; (494 <nm_bus_ioctl+0x134>)
     466:	480c      	ldr	r0, [pc, #48]	; (498 <nm_bus_ioctl+0x138>)
     468:	4b0c      	ldr	r3, [pc, #48]	; (49c <nm_bus_ioctl+0x13c>)
     46a:	4798      	blx	r3
     46c:	480c      	ldr	r0, [pc, #48]	; (4a0 <nm_bus_ioctl+0x140>)
     46e:	4b0d      	ldr	r3, [pc, #52]	; (4a4 <nm_bus_ioctl+0x144>)
     470:	4798      	blx	r3
     472:	200d      	movs	r0, #13
     474:	4b0c      	ldr	r3, [pc, #48]	; (4a8 <nm_bus_ioctl+0x148>)
     476:	4798      	blx	r3
			s8Ret = -1;
     478:	2001      	movs	r0, #1
     47a:	4240      	negs	r0, r0
	return s8Ret;
     47c:	e7e0      	b.n	440 <nm_bus_ioctl+0xe0>
		u8SkipMosi = 1;
     47e:	2301      	movs	r3, #1
     480:	4698      	mov	r8, r3
		pu8Mosi = &u8Dummy;
     482:	466b      	mov	r3, sp
     484:	1dde      	adds	r6, r3, #7
     486:	e784      	b.n	392 <nm_bus_ioctl+0x32>
     488:	200010e4 	.word	0x200010e4
     48c:	200010e8 	.word	0x200010e8
     490:	00004afd 	.word	0x00004afd
     494:	0001cd5c 	.word	0x0001cd5c
     498:	0001cd6c 	.word	0x0001cd6c
     49c:	000182cd 	.word	0x000182cd
     4a0:	0001cd80 	.word	0x0001cd80
     4a4:	000183a5 	.word	0x000183a5
     4a8:	000182f1 	.word	0x000182f1

000004ac <nm_bus_deinit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
     4ac:	4b06      	ldr	r3, [pc, #24]	; (4c8 <nm_bus_deinit+0x1c>)
     4ae:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
     4b0:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     4b2:	2b00      	cmp	r3, #0
     4b4:	d1fc      	bne.n	4b0 <nm_bus_deinit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
     4b6:	338f      	adds	r3, #143	; 0x8f
     4b8:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
     4ba:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
     4bc:	6813      	ldr	r3, [r2, #0]
     4be:	2102      	movs	r1, #2
     4c0:	438b      	bics	r3, r1
     4c2:	6013      	str	r3, [r2, #0]
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master1);
#endif /* CONF_WINC_USE_SPI */
	return result;
}
     4c4:	2000      	movs	r0, #0
     4c6:	4770      	bx	lr
     4c8:	200010e8 	.word	0x200010e8

000004cc <m2m_memset>:
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     4cc:	2a00      	cmp	r2, #0
     4ce:	d004      	beq.n	4da <m2m_memset+0xe>
     4d0:	1882      	adds	r2, r0, r2
	do
	{
		*pBuf = val;
     4d2:	7001      	strb	r1, [r0, #0]
		pBuf++;
     4d4:	3001      	adds	r0, #1
	}while(--sz);
     4d6:	4290      	cmp	r0, r2
     4d8:	d1fb      	bne.n	4d2 <m2m_memset+0x6>
}
     4da:	4770      	bx	lr

000004dc <isr>:
extern void os_hook_isr(void);
#endif

static void isr(void)
{
	gstrHifCxt.u8Interrupt++;
     4dc:	4a02      	ldr	r2, [pc, #8]	; (4e8 <isr+0xc>)
     4de:	78d3      	ldrb	r3, [r2, #3]
     4e0:	3301      	adds	r3, #1
     4e2:	b2db      	uxtb	r3, r3
     4e4:	70d3      	strb	r3, [r2, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
     4e6:	4770      	bx	lr
     4e8:	200010f4 	.word	0x200010f4

000004ec <m2m_hif_cb>:
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{


}
     4ec:	4770      	bx	lr
	...

000004f0 <hif_set_rx_done>:
{
     4f0:	b500      	push	{lr}
     4f2:	b083      	sub	sp, #12
	gstrHifCxt.u8HifRXDone = 0;
     4f4:	2200      	movs	r2, #0
     4f6:	4b0a      	ldr	r3, [pc, #40]	; (520 <hif_set_rx_done+0x30>)
     4f8:	709a      	strb	r2, [r3, #2]
	nm_bsp_interrupt_ctrl(1);
     4fa:	2001      	movs	r0, #1
     4fc:	4b09      	ldr	r3, [pc, #36]	; (524 <hif_set_rx_done+0x34>)
     4fe:	4798      	blx	r3
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     500:	a901      	add	r1, sp, #4
     502:	4809      	ldr	r0, [pc, #36]	; (528 <hif_set_rx_done+0x38>)
     504:	4b09      	ldr	r3, [pc, #36]	; (52c <hif_set_rx_done+0x3c>)
     506:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     508:	2800      	cmp	r0, #0
     50a:	d001      	beq.n	510 <hif_set_rx_done+0x20>
}
     50c:	b003      	add	sp, #12
     50e:	bd00      	pop	{pc}
	reg |= NBIT1;
     510:	2102      	movs	r1, #2
     512:	9b01      	ldr	r3, [sp, #4]
     514:	4319      	orrs	r1, r3
     516:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     518:	4803      	ldr	r0, [pc, #12]	; (528 <hif_set_rx_done+0x38>)
     51a:	4b05      	ldr	r3, [pc, #20]	; (530 <hif_set_rx_done+0x40>)
     51c:	4798      	blx	r3
     51e:	e7f5      	b.n	50c <hif_set_rx_done+0x1c>
     520:	200010f4 	.word	0x200010f4
     524:	00000255 	.word	0x00000255
     528:	00001070 	.word	0x00001070
     52c:	00001939 	.word	0x00001939
     530:	00001945 	.word	0x00001945

00000534 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     534:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	if(gstrHifCxt.u8HifRXDone)
     536:	4b0c      	ldr	r3, [pc, #48]	; (568 <hif_chip_wake+0x34>)
     538:	789b      	ldrb	r3, [r3, #2]
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
     53a:	2000      	movs	r0, #0
	if(gstrHifCxt.u8HifRXDone)
     53c:	2b00      	cmp	r3, #0
     53e:	d10d      	bne.n	55c <hif_chip_wake+0x28>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
     540:	4b09      	ldr	r3, [pc, #36]	; (568 <hif_chip_wake+0x34>)
     542:	785b      	ldrb	r3, [r3, #1]
     544:	2b00      	cmp	r3, #0
     546:	d103      	bne.n	550 <hif_chip_wake+0x1c>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     548:	4b07      	ldr	r3, [pc, #28]	; (568 <hif_chip_wake+0x34>)
     54a:	781b      	ldrb	r3, [r3, #0]
     54c:	2b00      	cmp	r3, #0
     54e:	d106      	bne.n	55e <hif_chip_wake+0x2a>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
     550:	4a05      	ldr	r2, [pc, #20]	; (568 <hif_chip_wake+0x34>)
     552:	7853      	ldrb	r3, [r2, #1]
     554:	3301      	adds	r3, #1
     556:	b2db      	uxtb	r3, r3
     558:	7053      	strb	r3, [r2, #1]
     55a:	2000      	movs	r0, #0
ERR1:
	return ret;
}
     55c:	bd10      	pop	{r4, pc}
			ret = chip_wake();
     55e:	4b03      	ldr	r3, [pc, #12]	; (56c <hif_chip_wake+0x38>)
     560:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     562:	2800      	cmp	r0, #0
     564:	d0f4      	beq.n	550 <hif_chip_wake+0x1c>
     566:	e7f9      	b.n	55c <hif_chip_wake+0x28>
     568:	200010f4 	.word	0x200010f4
     56c:	000015f9 	.word	0x000015f9

00000570 <hif_chip_sleep_sc>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
	if(gstrHifCxt.u8ChipSleep >= 1)
     570:	4b05      	ldr	r3, [pc, #20]	; (588 <hif_chip_sleep_sc+0x18>)
     572:	785b      	ldrb	r3, [r3, #1]
     574:	2b00      	cmp	r3, #0
     576:	d004      	beq.n	582 <hif_chip_sleep_sc+0x12>
	{
		gstrHifCxt.u8ChipSleep--;
     578:	4a03      	ldr	r2, [pc, #12]	; (588 <hif_chip_sleep_sc+0x18>)
     57a:	7853      	ldrb	r3, [r2, #1]
     57c:	3b01      	subs	r3, #1
     57e:	b2db      	uxtb	r3, r3
     580:	7053      	strb	r3, [r2, #1]
	}
	return M2M_SUCCESS;
}
     582:	2000      	movs	r0, #0
     584:	4770      	bx	lr
     586:	46c0      	nop			; (mov r8, r8)
     588:	200010f4 	.word	0x200010f4

0000058c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     58c:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;

	if(gstrHifCxt.u8ChipSleep >= 1)
     58e:	4b0b      	ldr	r3, [pc, #44]	; (5bc <hif_chip_sleep+0x30>)
     590:	785b      	ldrb	r3, [r3, #1]
     592:	2b00      	cmp	r3, #0
     594:	d004      	beq.n	5a0 <hif_chip_sleep+0x14>
	{
		gstrHifCxt.u8ChipSleep--;
     596:	4a09      	ldr	r2, [pc, #36]	; (5bc <hif_chip_sleep+0x30>)
     598:	7853      	ldrb	r3, [r2, #1]
     59a:	3b01      	subs	r3, #1
     59c:	b2db      	uxtb	r3, r3
     59e:	7053      	strb	r3, [r2, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
     5a0:	4b06      	ldr	r3, [pc, #24]	; (5bc <hif_chip_sleep+0x30>)
     5a2:	785b      	ldrb	r3, [r3, #1]
	sint8 ret = M2M_SUCCESS;
     5a4:	2000      	movs	r0, #0
	if(gstrHifCxt.u8ChipSleep == 0)
     5a6:	2b00      	cmp	r3, #0
     5a8:	d103      	bne.n	5b2 <hif_chip_sleep+0x26>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
     5aa:	4b04      	ldr	r3, [pc, #16]	; (5bc <hif_chip_sleep+0x30>)
     5ac:	781b      	ldrb	r3, [r3, #0]
     5ae:	2b00      	cmp	r3, #0
     5b0:	d100      	bne.n	5b4 <hif_chip_sleep+0x28>
		{
		}
	}
ERR1:
	return ret;
}
     5b2:	bd10      	pop	{r4, pc}
			ret = chip_sleep();
     5b4:	4b02      	ldr	r3, [pc, #8]	; (5c0 <hif_chip_sleep+0x34>)
     5b6:	4798      	blx	r3
     5b8:	e7fb      	b.n	5b2 <hif_chip_sleep+0x26>
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	200010f4 	.word	0x200010f4
     5c0:	00001591 	.word	0x00001591

000005c4 <hif_deinit>:
*    @param [in]	arg
*				Pointer to the arguments.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_deinit(void * arg)
{
     5c4:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = hif_chip_wake();
     5c6:	4b05      	ldr	r3, [pc, #20]	; (5dc <hif_deinit+0x18>)
     5c8:	4798      	blx	r3
     5ca:	0004      	movs	r4, r0
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     5cc:	222c      	movs	r2, #44	; 0x2c
     5ce:	2100      	movs	r1, #0
     5d0:	4803      	ldr	r0, [pc, #12]	; (5e0 <hif_deinit+0x1c>)
     5d2:	4b04      	ldr	r3, [pc, #16]	; (5e4 <hif_deinit+0x20>)
     5d4:	4798      	blx	r3
	return ret;
}
     5d6:	0020      	movs	r0, r4
     5d8:	bd10      	pop	{r4, pc}
     5da:	46c0      	nop			; (mov r8, r8)
     5dc:	00000535 	.word	0x00000535
     5e0:	200010f4 	.word	0x200010f4
     5e4:	000004cd 	.word	0x000004cd

000005e8 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ea:	46de      	mov	lr, fp
     5ec:	4657      	mov	r7, sl
     5ee:	b580      	push	{r7, lr}
     5f0:	b089      	sub	sp, #36	; 0x24
     5f2:	4683      	mov	fp, r0
     5f4:	468a      	mov	sl, r1
     5f6:	9201      	str	r2, [sp, #4]
     5f8:	9300      	str	r3, [sp, #0]
     5fa:	ab10      	add	r3, sp, #64	; 0x40
     5fc:	cb80      	ldmia	r3!, {r7}
     5fe:	881e      	ldrh	r6, [r3, #0]
     600:	ab12      	add	r3, sp, #72	; 0x48
     602:	881d      	ldrh	r5, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
	tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     604:	aa07      	add	r2, sp, #28
     606:	237f      	movs	r3, #127	; 0x7f
     608:	400b      	ands	r3, r1
     60a:	7053      	strb	r3, [r2, #1]
	strHif.u8Gid		= u8Gid;
     60c:	7010      	strb	r0, [r2, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
	if(pu8DataBuf != NULL)
     60e:	2f00      	cmp	r7, #0
     610:	d042      	beq.n	698 <hif_send+0xb0>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     612:	0033      	movs	r3, r6
     614:	3308      	adds	r3, #8
     616:	18eb      	adds	r3, r5, r3
     618:	8053      	strh	r3, [r2, #2]
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
	}
    if (strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
     61a:	4b72      	ldr	r3, [pc, #456]	; (7e4 <hif_send+0x1fc>)
     61c:	aa07      	add	r2, sp, #28
     61e:	8852      	ldrh	r2, [r2, #2]
     620:	429a      	cmp	r2, r3
     622:	d900      	bls.n	626 <hif_send+0x3e>
     624:	e0cd      	b.n	7c2 <hif_send+0x1da>
    {
	ret = hif_chip_wake();
     626:	4b70      	ldr	r3, [pc, #448]	; (7e8 <hif_send+0x200>)
     628:	4798      	blx	r3
     62a:	1e04      	subs	r4, r0, #0
	if(ret == M2M_SUCCESS)
     62c:	d000      	beq.n	630 <hif_send+0x48>
     62e:	e0bb      	b.n	7a8 <hif_send+0x1c0>
	{
		volatile uint32 reg, dma_addr = 0;
     630:	2300      	movs	r3, #0
     632:	9305      	str	r3, [sp, #20]
		volatile uint16 cnt = 0;
     634:	aa02      	add	r2, sp, #8
     636:	80d3      	strh	r3, [r2, #6]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
     638:	9304      	str	r3, [sp, #16]
		reg |= (uint32)u8Gid;
     63a:	9b04      	ldr	r3, [sp, #16]
     63c:	465a      	mov	r2, fp
     63e:	431a      	orrs	r2, r3
     640:	9204      	str	r2, [sp, #16]
		reg |= ((uint32)u8Opcode<<8);
     642:	9a04      	ldr	r2, [sp, #16]
     644:	4653      	mov	r3, sl
     646:	021b      	lsls	r3, r3, #8
     648:	4313      	orrs	r3, r2
     64a:	9304      	str	r3, [sp, #16]
		reg |= ((uint32)strHif.u16Length<<16);
     64c:	9a04      	ldr	r2, [sp, #16]
     64e:	ab07      	add	r3, sp, #28
     650:	885b      	ldrh	r3, [r3, #2]
     652:	041b      	lsls	r3, r3, #16
     654:	4313      	orrs	r3, r2
     656:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     658:	9904      	ldr	r1, [sp, #16]
     65a:	4864      	ldr	r0, [pc, #400]	; (7ec <hif_send+0x204>)
     65c:	4b64      	ldr	r3, [pc, #400]	; (7f0 <hif_send+0x208>)
     65e:	4798      	blx	r3
     660:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     662:	d154      	bne.n	70e <hif_send+0x126>

		reg = 0UL;
     664:	2300      	movs	r3, #0
     666:	9304      	str	r3, [sp, #16]
		reg |= NBIT1;
     668:	9b04      	ldr	r3, [sp, #16]
     66a:	2202      	movs	r2, #2
     66c:	4313      	orrs	r3, r2
     66e:	9304      	str	r3, [sp, #16]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     670:	9904      	ldr	r1, [sp, #16]
     672:	4860      	ldr	r0, [pc, #384]	; (7f4 <hif_send+0x20c>)
     674:	4b5e      	ldr	r3, [pc, #376]	; (7f0 <hif_send+0x208>)
     676:	4798      	blx	r3
     678:	1e04      	subs	r4, r0, #0
		if(M2M_SUCCESS != ret) goto ERR1;
     67a:	d148      	bne.n	70e <hif_send+0x126>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
     67c:	2200      	movs	r2, #0
     67e:	9205      	str	r2, [sp, #20]
		
		for(cnt = 0; cnt < 1000; cnt ++)
     680:	ab02      	add	r3, sp, #8
     682:	80da      	strh	r2, [r3, #6]
     684:	3306      	adds	r3, #6
     686:	881b      	ldrh	r3, [r3, #0]
     688:	b29b      	uxth	r3, r3
     68a:	4a5b      	ldr	r2, [pc, #364]	; (7f8 <hif_send+0x210>)
     68c:	4293      	cmp	r3, r2
     68e:	d846      	bhi.n	71e <hif_send+0x136>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     690:	4c5a      	ldr	r4, [pc, #360]	; (7fc <hif_send+0x214>)
			 */
			if(cnt >= 500) {
				if(cnt < 501) {
					M2M_INFO("Slowing down...\n");
				}
				nm_bsp_sleep(1);
     692:	4b5b      	ldr	r3, [pc, #364]	; (800 <hif_send+0x218>)
     694:	469a      	mov	sl, r3
     696:	e014      	b.n	6c2 <hif_send+0xda>
		strHif.u16Length += u16CtrlBufSize;
     698:	9b00      	ldr	r3, [sp, #0]
     69a:	3308      	adds	r3, #8
     69c:	aa07      	add	r2, sp, #28
     69e:	8053      	strh	r3, [r2, #2]
     6a0:	e7bb      	b.n	61a <hif_send+0x32>
				nm_bsp_sleep(1);
     6a2:	2001      	movs	r0, #1
     6a4:	47d0      	blx	sl
			}
			if (!(reg & NBIT1))
     6a6:	9b04      	ldr	r3, [sp, #16]
     6a8:	079b      	lsls	r3, r3, #30
     6aa:	d528      	bpl.n	6fe <hif_send+0x116>
		for(cnt = 0; cnt < 1000; cnt ++)
     6ac:	ab02      	add	r3, sp, #8
     6ae:	1d9a      	adds	r2, r3, #6
     6b0:	88db      	ldrh	r3, [r3, #6]
     6b2:	3301      	adds	r3, #1
     6b4:	b29b      	uxth	r3, r3
     6b6:	8013      	strh	r3, [r2, #0]
     6b8:	8813      	ldrh	r3, [r2, #0]
     6ba:	b29b      	uxth	r3, r3
     6bc:	4a4e      	ldr	r2, [pc, #312]	; (7f8 <hif_send+0x210>)
     6be:	4293      	cmp	r3, r2
     6c0:	d82d      	bhi.n	71e <hif_send+0x136>
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     6c2:	a904      	add	r1, sp, #16
     6c4:	484b      	ldr	r0, [pc, #300]	; (7f4 <hif_send+0x20c>)
     6c6:	47a0      	blx	r4
			if(ret != M2M_SUCCESS) break;
     6c8:	2800      	cmp	r0, #0
     6ca:	d128      	bne.n	71e <hif_send+0x136>
			if(cnt >= 500) {
     6cc:	ab02      	add	r3, sp, #8
     6ce:	3306      	adds	r3, #6
     6d0:	881b      	ldrh	r3, [r3, #0]
     6d2:	b29b      	uxth	r3, r3
     6d4:	22f4      	movs	r2, #244	; 0xf4
     6d6:	32ff      	adds	r2, #255	; 0xff
     6d8:	4293      	cmp	r3, r2
     6da:	d9e4      	bls.n	6a6 <hif_send+0xbe>
				if(cnt < 501) {
     6dc:	ab02      	add	r3, sp, #8
     6de:	3306      	adds	r3, #6
     6e0:	881b      	ldrh	r3, [r3, #0]
     6e2:	b29b      	uxth	r3, r3
     6e4:	3201      	adds	r2, #1
     6e6:	4293      	cmp	r3, r2
     6e8:	d8db      	bhi.n	6a2 <hif_send+0xba>
					M2M_INFO("Slowing down...\n");
     6ea:	4846      	ldr	r0, [pc, #280]	; (804 <hif_send+0x21c>)
     6ec:	4b46      	ldr	r3, [pc, #280]	; (808 <hif_send+0x220>)
     6ee:	4798      	blx	r3
     6f0:	4846      	ldr	r0, [pc, #280]	; (80c <hif_send+0x224>)
     6f2:	4b47      	ldr	r3, [pc, #284]	; (810 <hif_send+0x228>)
     6f4:	4798      	blx	r3
     6f6:	200d      	movs	r0, #13
     6f8:	4b46      	ldr	r3, [pc, #280]	; (814 <hif_send+0x22c>)
     6fa:	4798      	blx	r3
     6fc:	e7d1      	b.n	6a2 <hif_send+0xba>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
     6fe:	a905      	add	r1, sp, #20
     700:	4845      	ldr	r0, [pc, #276]	; (818 <hif_send+0x230>)
     702:	4b3e      	ldr	r3, [pc, #248]	; (7fc <hif_send+0x214>)
     704:	4798      	blx	r3
     706:	1e04      	subs	r4, r0, #0
				if(ret != M2M_SUCCESS) {
     708:	d009      	beq.n	71e <hif_send+0x136>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
     70a:	2300      	movs	r3, #0
     70c:	9305      	str	r3, [sp, #20]
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
	return ret;
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
     70e:	4b43      	ldr	r3, [pc, #268]	; (81c <hif_send+0x234>)
     710:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
}
     712:	0020      	movs	r0, r4
     714:	b009      	add	sp, #36	; 0x24
     716:	bc0c      	pop	{r2, r3}
     718:	4692      	mov	sl, r2
     71a:	469b      	mov	fp, r3
     71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (dma_addr != 0)
     71e:	9b05      	ldr	r3, [sp, #20]
     720:	2b00      	cmp	r3, #0
     722:	d03c      	beq.n	79e <hif_send+0x1b6>
			u32CurrAddr = dma_addr;
     724:	9b05      	ldr	r3, [sp, #20]
     726:	9306      	str	r3, [sp, #24]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     728:	9806      	ldr	r0, [sp, #24]
     72a:	2208      	movs	r2, #8
     72c:	a907      	add	r1, sp, #28
     72e:	4b3c      	ldr	r3, [pc, #240]	; (820 <hif_send+0x238>)
     730:	4798      	blx	r3
     732:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     734:	d1eb      	bne.n	70e <hif_send+0x126>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     736:	9b06      	ldr	r3, [sp, #24]
     738:	3308      	adds	r3, #8
     73a:	9306      	str	r3, [sp, #24]
			if(pu8CtrlBuf != NULL)
     73c:	9b01      	ldr	r3, [sp, #4]
     73e:	2b00      	cmp	r3, #0
     740:	d00b      	beq.n	75a <hif_send+0x172>
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     742:	9806      	ldr	r0, [sp, #24]
     744:	9a00      	ldr	r2, [sp, #0]
     746:	0019      	movs	r1, r3
     748:	4b35      	ldr	r3, [pc, #212]	; (820 <hif_send+0x238>)
     74a:	4798      	blx	r3
     74c:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     74e:	d1de      	bne.n	70e <hif_send+0x126>
				u32CurrAddr += u16CtrlBufSize;
     750:	9b06      	ldr	r3, [sp, #24]
     752:	9a00      	ldr	r2, [sp, #0]
     754:	4694      	mov	ip, r2
     756:	4463      	add	r3, ip
     758:	9306      	str	r3, [sp, #24]
			if(pu8DataBuf != NULL)
     75a:	2f00      	cmp	r7, #0
     75c:	d00e      	beq.n	77c <hif_send+0x194>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     75e:	9b06      	ldr	r3, [sp, #24]
     760:	9a00      	ldr	r2, [sp, #0]
     762:	1aad      	subs	r5, r5, r2
     764:	18ed      	adds	r5, r5, r3
     766:	9506      	str	r5, [sp, #24]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     768:	9806      	ldr	r0, [sp, #24]
     76a:	0032      	movs	r2, r6
     76c:	0039      	movs	r1, r7
     76e:	4b2c      	ldr	r3, [pc, #176]	; (820 <hif_send+0x238>)
     770:	4798      	blx	r3
     772:	1e04      	subs	r4, r0, #0
				if(M2M_SUCCESS != ret) goto ERR1;
     774:	d1cb      	bne.n	70e <hif_send+0x126>
				u32CurrAddr += u16DataSize;
     776:	9b06      	ldr	r3, [sp, #24]
     778:	18f3      	adds	r3, r6, r3
     77a:	9306      	str	r3, [sp, #24]
			reg = dma_addr << 2;
     77c:	9b05      	ldr	r3, [sp, #20]
     77e:	009b      	lsls	r3, r3, #2
     780:	9304      	str	r3, [sp, #16]
			reg |= NBIT1;
     782:	9b04      	ldr	r3, [sp, #16]
     784:	2202      	movs	r2, #2
     786:	4313      	orrs	r3, r2
     788:	9304      	str	r3, [sp, #16]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     78a:	9904      	ldr	r1, [sp, #16]
     78c:	4825      	ldr	r0, [pc, #148]	; (824 <hif_send+0x23c>)
     78e:	4b18      	ldr	r3, [pc, #96]	; (7f0 <hif_send+0x208>)
     790:	4798      	blx	r3
     792:	1e04      	subs	r4, r0, #0
			if(M2M_SUCCESS != ret) goto ERR1;
     794:	d1bb      	bne.n	70e <hif_send+0x126>
 	ret = hif_chip_sleep();
     796:	4b24      	ldr	r3, [pc, #144]	; (828 <hif_send+0x240>)
     798:	4798      	blx	r3
     79a:	0004      	movs	r4, r0
	return ret;
     79c:	e7b9      	b.n	712 <hif_send+0x12a>
			ret = hif_chip_sleep();
     79e:	4b22      	ldr	r3, [pc, #136]	; (828 <hif_send+0x240>)
     7a0:	4798      	blx	r3
			ret = M2M_ERR_MEM_ALLOC;
     7a2:	2403      	movs	r4, #3
     7a4:	4264      	negs	r4, r4
			goto ERR2;
     7a6:	e7b4      	b.n	712 <hif_send+0x12a>
            M2M_ERR("(HIF)Failed to wakeup the chip\n");
     7a8:	22cb      	movs	r2, #203	; 0xcb
     7aa:	0052      	lsls	r2, r2, #1
     7ac:	491f      	ldr	r1, [pc, #124]	; (82c <hif_send+0x244>)
     7ae:	4820      	ldr	r0, [pc, #128]	; (830 <hif_send+0x248>)
     7b0:	4b15      	ldr	r3, [pc, #84]	; (808 <hif_send+0x220>)
     7b2:	4798      	blx	r3
     7b4:	481f      	ldr	r0, [pc, #124]	; (834 <hif_send+0x24c>)
     7b6:	4b16      	ldr	r3, [pc, #88]	; (810 <hif_send+0x228>)
     7b8:	4798      	blx	r3
     7ba:	200d      	movs	r0, #13
     7bc:	4b15      	ldr	r3, [pc, #84]	; (814 <hif_send+0x22c>)
     7be:	4798      	blx	r3
            goto ERR2;
     7c0:	e7a7      	b.n	712 <hif_send+0x12a>
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n",strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
     7c2:	22ce      	movs	r2, #206	; 0xce
     7c4:	0052      	lsls	r2, r2, #1
     7c6:	4919      	ldr	r1, [pc, #100]	; (82c <hif_send+0x244>)
     7c8:	4819      	ldr	r0, [pc, #100]	; (830 <hif_send+0x248>)
     7ca:	4c0f      	ldr	r4, [pc, #60]	; (808 <hif_send+0x220>)
     7cc:	47a0      	blx	r4
     7ce:	ab07      	add	r3, sp, #28
     7d0:	8859      	ldrh	r1, [r3, #2]
     7d2:	4a04      	ldr	r2, [pc, #16]	; (7e4 <hif_send+0x1fc>)
     7d4:	4818      	ldr	r0, [pc, #96]	; (838 <hif_send+0x250>)
     7d6:	47a0      	blx	r4
     7d8:	200d      	movs	r0, #13
     7da:	4b0e      	ldr	r3, [pc, #56]	; (814 <hif_send+0x22c>)
     7dc:	4798      	blx	r3
        ret = M2M_ERR_SEND;
     7de:	2401      	movs	r4, #1
     7e0:	4264      	negs	r4, r4
		goto ERR2;
     7e2:	e796      	b.n	712 <hif_send+0x12a>
     7e4:	0000063c 	.word	0x0000063c
     7e8:	00000535 	.word	0x00000535
     7ec:	0000108c 	.word	0x0000108c
     7f0:	00001945 	.word	0x00001945
     7f4:	00001078 	.word	0x00001078
     7f8:	000003e7 	.word	0x000003e7
     7fc:	00001939 	.word	0x00001939
     800:	00000141 	.word	0x00000141
     804:	0001d0f0 	.word	0x0001d0f0
     808:	000182cd 	.word	0x000182cd
     80c:	0001d0fc 	.word	0x0001d0fc
     810:	000183a5 	.word	0x000183a5
     814:	000182f1 	.word	0x000182f1
     818:	00150400 	.word	0x00150400
     81c:	00000571 	.word	0x00000571
     820:	000019b9 	.word	0x000019b9
     824:	0000106c 	.word	0x0000106c
     828:	0000058d 	.word	0x0000058d
     82c:	0001cdb4 	.word	0x0001cdb4
     830:	0001cd6c 	.word	0x0001cd6c
     834:	0001d10c 	.word	0x0001d10c
     838:	0001d12c 	.word	0x0001d12c

0000083c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
     83c:	b5f0      	push	{r4, r5, r6, r7, lr}
     83e:	46de      	mov	lr, fp
     840:	4657      	mov	r7, sl
     842:	464e      	mov	r6, r9
     844:	4645      	mov	r5, r8
     846:	b5e0      	push	{r5, r6, r7, lr}
     848:	b087      	sub	sp, #28
	sint8 ret = M2M_SUCCESS;	
	
	gstrHifCxt.u8Yield = 0;
     84a:	2200      	movs	r2, #0
     84c:	4bd3      	ldr	r3, [pc, #844]	; (b9c <hif_handle_isr+0x360>)
     84e:	711a      	strb	r2, [r3, #4]
	sint8 ret = M2M_SUCCESS;	
     850:	2400      	movs	r4, #0
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
     852:	4698      	mov	r8, r3
     854:	4699      	mov	r9, r3
     856:	e18b      	b.n	b70 <hif_handle_isr+0x334>
			reg &= ~NBIT0;
     858:	2301      	movs	r3, #1
     85a:	4399      	bics	r1, r3
     85c:	9103      	str	r1, [sp, #12]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     85e:	48d0      	ldr	r0, [pc, #832]	; (ba0 <hif_handle_isr+0x364>)
     860:	4bd0      	ldr	r3, [pc, #832]	; (ba4 <hif_handle_isr+0x368>)
     862:	4798      	blx	r3
			if(ret != M2M_SUCCESS)goto ERR1;
     864:	2800      	cmp	r0, #0
     866:	d000      	beq.n	86a <hif_handle_isr+0x2e>
     868:	e1e5      	b.n	c36 <hif_handle_isr+0x3fa>
			gstrHifCxt.u8HifRXDone = 1;
     86a:	2201      	movs	r2, #1
     86c:	4bcb      	ldr	r3, [pc, #812]	; (b9c <hif_handle_isr+0x360>)
     86e:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
     870:	9b03      	ldr	r3, [sp, #12]
     872:	049b      	lsls	r3, r3, #18
     874:	0d1b      	lsrs	r3, r3, #20
     876:	469a      	mov	sl, r3
			if (size > 0) {
     878:	d100      	bne.n	87c <hif_handle_isr+0x40>
     87a:	e147      	b.n	b0c <hif_handle_isr+0x2d0>
				uint32 address = 0;
     87c:	2300      	movs	r3, #0
     87e:	9305      	str	r3, [sp, #20]
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     880:	a905      	add	r1, sp, #20
     882:	48c9      	ldr	r0, [pc, #804]	; (ba8 <hif_handle_isr+0x36c>)
     884:	4bc9      	ldr	r3, [pc, #804]	; (bac <hif_handle_isr+0x370>)
     886:	4798      	blx	r3
     888:	1e07      	subs	r7, r0, #0
				if(M2M_SUCCESS != ret)
     88a:	d00d      	beq.n	8a8 <hif_handle_isr+0x6c>
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
     88c:	22ce      	movs	r2, #206	; 0xce
     88e:	32ff      	adds	r2, #255	; 0xff
     890:	49c7      	ldr	r1, [pc, #796]	; (bb0 <hif_handle_isr+0x374>)
     892:	48c8      	ldr	r0, [pc, #800]	; (bb4 <hif_handle_isr+0x378>)
     894:	4bc8      	ldr	r3, [pc, #800]	; (bb8 <hif_handle_isr+0x37c>)
     896:	4798      	blx	r3
     898:	48c8      	ldr	r0, [pc, #800]	; (bbc <hif_handle_isr+0x380>)
     89a:	4bc9      	ldr	r3, [pc, #804]	; (bc0 <hif_handle_isr+0x384>)
     89c:	4798      	blx	r3
     89e:	200d      	movs	r0, #13
     8a0:	4bc8      	ldr	r3, [pc, #800]	; (bc4 <hif_handle_isr+0x388>)
     8a2:	4798      	blx	r3
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
     8a4:	003c      	movs	r4, r7
     8a6:	e14a      	b.n	b3e <hif_handle_isr+0x302>
				gstrHifCxt.u32RxAddr = address;
     8a8:	4bbc      	ldr	r3, [pc, #752]	; (b9c <hif_handle_isr+0x360>)
     8aa:	9a05      	ldr	r2, [sp, #20]
     8ac:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
     8ae:	4652      	mov	r2, sl
     8b0:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     8b2:	af04      	add	r7, sp, #16
     8b4:	2204      	movs	r2, #4
     8b6:	0039      	movs	r1, r7
     8b8:	9805      	ldr	r0, [sp, #20]
     8ba:	4bc3      	ldr	r3, [pc, #780]	; (bc8 <hif_handle_isr+0x38c>)
     8bc:	4798      	blx	r3
     8be:	4683      	mov	fp, r0
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
     8c0:	887b      	ldrh	r3, [r7, #2]
     8c2:	b29b      	uxth	r3, r3
     8c4:	807b      	strh	r3, [r7, #2]
				if(M2M_SUCCESS != ret)
     8c6:	2800      	cmp	r0, #0
     8c8:	d135      	bne.n	936 <hif_handle_isr+0xfa>
				if(strHif.u16Length != size)
     8ca:	ab04      	add	r3, sp, #16
     8cc:	885b      	ldrh	r3, [r3, #2]
     8ce:	b29b      	uxth	r3, r3
     8d0:	459a      	cmp	sl, r3
     8d2:	d005      	beq.n	8e0 <hif_handle_isr+0xa4>
					if((size - strHif.u16Length) > 4)
     8d4:	ab04      	add	r3, sp, #16
     8d6:	885b      	ldrh	r3, [r3, #2]
     8d8:	4652      	mov	r2, sl
     8da:	1ad3      	subs	r3, r2, r3
     8dc:	2b04      	cmp	r3, #4
     8de:	dc38      	bgt.n	952 <hif_handle_isr+0x116>
				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
     8e0:	ab04      	add	r3, sp, #16
     8e2:	781b      	ldrb	r3, [r3, #0]
     8e4:	2b01      	cmp	r3, #1
     8e6:	d04a      	beq.n	97e <hif_handle_isr+0x142>
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
     8e8:	ab04      	add	r3, sp, #16
     8ea:	781b      	ldrb	r3, [r3, #0]
     8ec:	2b02      	cmp	r3, #2
     8ee:	d07d      	beq.n	9ec <hif_handle_isr+0x1b0>
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
     8f0:	ab04      	add	r3, sp, #16
     8f2:	781b      	ldrb	r3, [r3, #0]
     8f4:	2b04      	cmp	r3, #4
     8f6:	d100      	bne.n	8fa <hif_handle_isr+0xbe>
     8f8:	e095      	b.n	a26 <hif_handle_isr+0x1ea>
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
     8fa:	ab04      	add	r3, sp, #16
     8fc:	781b      	ldrb	r3, [r3, #0]
     8fe:	2b06      	cmp	r3, #6
     900:	d100      	bne.n	904 <hif_handle_isr+0xc8>
     902:	e0ad      	b.n	a60 <hif_handle_isr+0x224>
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
     904:	ab04      	add	r3, sp, #16
     906:	781b      	ldrb	r3, [r3, #0]
     908:	2b07      	cmp	r3, #7
     90a:	d100      	bne.n	90e <hif_handle_isr+0xd2>
     90c:	e0c5      	b.n	a9a <hif_handle_isr+0x25e>
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
     90e:	ab04      	add	r3, sp, #16
     910:	781b      	ldrb	r3, [r3, #0]
     912:	2b05      	cmp	r3, #5
     914:	d100      	bne.n	918 <hif_handle_isr+0xdc>
     916:	e0dc      	b.n	ad2 <hif_handle_isr+0x296>
					M2M_ERR("(hif) invalid group ID\n");
     918:	2284      	movs	r2, #132	; 0x84
     91a:	0092      	lsls	r2, r2, #2
     91c:	49a4      	ldr	r1, [pc, #656]	; (bb0 <hif_handle_isr+0x374>)
     91e:	48a5      	ldr	r0, [pc, #660]	; (bb4 <hif_handle_isr+0x378>)
     920:	4ba5      	ldr	r3, [pc, #660]	; (bb8 <hif_handle_isr+0x37c>)
     922:	4798      	blx	r3
     924:	48a9      	ldr	r0, [pc, #676]	; (bcc <hif_handle_isr+0x390>)
     926:	4ba6      	ldr	r3, [pc, #664]	; (bc0 <hif_handle_isr+0x384>)
     928:	4798      	blx	r3
     92a:	200d      	movs	r0, #13
     92c:	4ba5      	ldr	r3, [pc, #660]	; (bc4 <hif_handle_isr+0x388>)
     92e:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
     930:	2406      	movs	r4, #6
     932:	4264      	negs	r4, r4
     934:	e103      	b.n	b3e <hif_handle_isr+0x302>
					M2M_ERR("(hif) address bus fail\n");
     936:	22eb      	movs	r2, #235	; 0xeb
     938:	0052      	lsls	r2, r2, #1
     93a:	499d      	ldr	r1, [pc, #628]	; (bb0 <hif_handle_isr+0x374>)
     93c:	489d      	ldr	r0, [pc, #628]	; (bb4 <hif_handle_isr+0x378>)
     93e:	4b9e      	ldr	r3, [pc, #632]	; (bb8 <hif_handle_isr+0x37c>)
     940:	4798      	blx	r3
     942:	48a3      	ldr	r0, [pc, #652]	; (bd0 <hif_handle_isr+0x394>)
     944:	4b9e      	ldr	r3, [pc, #632]	; (bc0 <hif_handle_isr+0x384>)
     946:	4798      	blx	r3
     948:	200d      	movs	r0, #13
     94a:	4b9e      	ldr	r3, [pc, #632]	; (bc4 <hif_handle_isr+0x388>)
     94c:	4798      	blx	r3
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
     94e:	465c      	mov	r4, fp
     950:	e0f5      	b.n	b3e <hif_handle_isr+0x302>
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
     952:	22ef      	movs	r2, #239	; 0xef
     954:	0052      	lsls	r2, r2, #1
     956:	4996      	ldr	r1, [pc, #600]	; (bb0 <hif_handle_isr+0x374>)
     958:	4896      	ldr	r0, [pc, #600]	; (bb4 <hif_handle_isr+0x378>)
     95a:	4c97      	ldr	r4, [pc, #604]	; (bb8 <hif_handle_isr+0x37c>)
     95c:	47a0      	blx	r4
     95e:	a904      	add	r1, sp, #16
     960:	884a      	ldrh	r2, [r1, #2]
     962:	b292      	uxth	r2, r2
     964:	780b      	ldrb	r3, [r1, #0]
     966:	b2db      	uxtb	r3, r3
     968:	7849      	ldrb	r1, [r1, #1]
     96a:	9100      	str	r1, [sp, #0]
     96c:	4651      	mov	r1, sl
     96e:	4899      	ldr	r0, [pc, #612]	; (bd4 <hif_handle_isr+0x398>)
     970:	47a0      	blx	r4
     972:	200d      	movs	r0, #13
     974:	4b93      	ldr	r3, [pc, #588]	; (bc4 <hif_handle_isr+0x388>)
     976:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
     978:	2406      	movs	r4, #6
     97a:	4264      	negs	r4, r4
     97c:	e0df      	b.n	b3e <hif_handle_isr+0x302>
					if(gstrHifCxt.pfWifiCb)
     97e:	4b87      	ldr	r3, [pc, #540]	; (b9c <hif_handle_isr+0x360>)
     980:	691b      	ldr	r3, [r3, #16]
     982:	2b00      	cmp	r3, #0
     984:	d025      	beq.n	9d2 <hif_handle_isr+0x196>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     986:	4b85      	ldr	r3, [pc, #532]	; (b9c <hif_handle_isr+0x360>)
     988:	691b      	ldr	r3, [r3, #16]
     98a:	aa04      	add	r2, sp, #16
     98c:	7850      	ldrb	r0, [r2, #1]
     98e:	b2c0      	uxtb	r0, r0
     990:	8851      	ldrh	r1, [r2, #2]
     992:	9a05      	ldr	r2, [sp, #20]
     994:	3208      	adds	r2, #8
     996:	3908      	subs	r1, #8
     998:	b289      	uxth	r1, r1
     99a:	4798      	blx	r3
				if(gstrHifCxt.u8HifRXDone)
     99c:	4b7f      	ldr	r3, [pc, #508]	; (b9c <hif_handle_isr+0x360>)
     99e:	789b      	ldrb	r3, [r3, #2]
     9a0:	2b00      	cmp	r3, #0
     9a2:	d100      	bne.n	9a6 <hif_handle_isr+0x16a>
     9a4:	e0e4      	b.n	b70 <hif_handle_isr+0x334>
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
     9a6:	4a8c      	ldr	r2, [pc, #560]	; (bd8 <hif_handle_isr+0x39c>)
     9a8:	4981      	ldr	r1, [pc, #516]	; (bb0 <hif_handle_isr+0x374>)
     9aa:	4882      	ldr	r0, [pc, #520]	; (bb4 <hif_handle_isr+0x378>)
     9ac:	4f82      	ldr	r7, [pc, #520]	; (bb8 <hif_handle_isr+0x37c>)
     9ae:	47b8      	blx	r7
     9b0:	ab04      	add	r3, sp, #16
     9b2:	7819      	ldrb	r1, [r3, #0]
     9b4:	b2c9      	uxtb	r1, r1
     9b6:	785a      	ldrb	r2, [r3, #1]
     9b8:	b2d2      	uxtb	r2, r2
     9ba:	4888      	ldr	r0, [pc, #544]	; (bdc <hif_handle_isr+0x3a0>)
     9bc:	47b8      	blx	r7
     9be:	200d      	movs	r0, #13
     9c0:	4b80      	ldr	r3, [pc, #512]	; (bc4 <hif_handle_isr+0x388>)
     9c2:	4798      	blx	r3
					ret = hif_set_rx_done();
     9c4:	4b86      	ldr	r3, [pc, #536]	; (be0 <hif_handle_isr+0x3a4>)
     9c6:	4798      	blx	r3
					if(ret != M2M_SUCCESS) goto ERR1;
     9c8:	2800      	cmp	r0, #0
     9ca:	d100      	bne.n	9ce <hif_handle_isr+0x192>
     9cc:	e0d0      	b.n	b70 <hif_handle_isr+0x334>
					ret = hif_set_rx_done();
     9ce:	0004      	movs	r4, r0
     9d0:	e0b5      	b.n	b3e <hif_handle_isr+0x302>
						M2M_ERR("WIFI callback is not registered\n");
     9d2:	22ea      	movs	r2, #234	; 0xea
     9d4:	32ff      	adds	r2, #255	; 0xff
     9d6:	4976      	ldr	r1, [pc, #472]	; (bb0 <hif_handle_isr+0x374>)
     9d8:	4876      	ldr	r0, [pc, #472]	; (bb4 <hif_handle_isr+0x378>)
     9da:	4b77      	ldr	r3, [pc, #476]	; (bb8 <hif_handle_isr+0x37c>)
     9dc:	4798      	blx	r3
     9de:	4881      	ldr	r0, [pc, #516]	; (be4 <hif_handle_isr+0x3a8>)
     9e0:	4b77      	ldr	r3, [pc, #476]	; (bc0 <hif_handle_isr+0x384>)
     9e2:	4798      	blx	r3
     9e4:	200d      	movs	r0, #13
     9e6:	4b77      	ldr	r3, [pc, #476]	; (bc4 <hif_handle_isr+0x388>)
     9e8:	4798      	blx	r3
     9ea:	e7d7      	b.n	99c <hif_handle_isr+0x160>
					if(gstrHifCxt.pfIpCb)
     9ec:	4b6b      	ldr	r3, [pc, #428]	; (b9c <hif_handle_isr+0x360>)
     9ee:	695b      	ldr	r3, [r3, #20]
     9f0:	2b00      	cmp	r3, #0
     9f2:	d00b      	beq.n	a0c <hif_handle_isr+0x1d0>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     9f4:	4b69      	ldr	r3, [pc, #420]	; (b9c <hif_handle_isr+0x360>)
     9f6:	695b      	ldr	r3, [r3, #20]
     9f8:	aa04      	add	r2, sp, #16
     9fa:	7850      	ldrb	r0, [r2, #1]
     9fc:	b2c0      	uxtb	r0, r0
     9fe:	8851      	ldrh	r1, [r2, #2]
     a00:	9a05      	ldr	r2, [sp, #20]
     a02:	3208      	adds	r2, #8
     a04:	3908      	subs	r1, #8
     a06:	b289      	uxth	r1, r1
     a08:	4798      	blx	r3
     a0a:	e7c7      	b.n	99c <hif_handle_isr+0x160>
						M2M_ERR("Socket callback is not registered\n");
     a0c:	22f8      	movs	r2, #248	; 0xf8
     a0e:	0052      	lsls	r2, r2, #1
     a10:	4967      	ldr	r1, [pc, #412]	; (bb0 <hif_handle_isr+0x374>)
     a12:	4868      	ldr	r0, [pc, #416]	; (bb4 <hif_handle_isr+0x378>)
     a14:	4b68      	ldr	r3, [pc, #416]	; (bb8 <hif_handle_isr+0x37c>)
     a16:	4798      	blx	r3
     a18:	4873      	ldr	r0, [pc, #460]	; (be8 <hif_handle_isr+0x3ac>)
     a1a:	4b69      	ldr	r3, [pc, #420]	; (bc0 <hif_handle_isr+0x384>)
     a1c:	4798      	blx	r3
     a1e:	200d      	movs	r0, #13
     a20:	4b68      	ldr	r3, [pc, #416]	; (bc4 <hif_handle_isr+0x388>)
     a22:	4798      	blx	r3
     a24:	e7ba      	b.n	99c <hif_handle_isr+0x160>
					if(gstrHifCxt.pfOtaCb)
     a26:	4b5d      	ldr	r3, [pc, #372]	; (b9c <hif_handle_isr+0x360>)
     a28:	699b      	ldr	r3, [r3, #24]
     a2a:	2b00      	cmp	r3, #0
     a2c:	d00b      	beq.n	a46 <hif_handle_isr+0x20a>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a2e:	4b5b      	ldr	r3, [pc, #364]	; (b9c <hif_handle_isr+0x360>)
     a30:	699b      	ldr	r3, [r3, #24]
     a32:	aa04      	add	r2, sp, #16
     a34:	7850      	ldrb	r0, [r2, #1]
     a36:	b2c0      	uxtb	r0, r0
     a38:	8851      	ldrh	r1, [r2, #2]
     a3a:	9a05      	ldr	r2, [sp, #20]
     a3c:	3208      	adds	r2, #8
     a3e:	3908      	subs	r1, #8
     a40:	b289      	uxth	r1, r1
     a42:	4798      	blx	r3
     a44:	e7aa      	b.n	99c <hif_handle_isr+0x160>
						M2M_ERR("Ota callback is not registered\n");
     a46:	22f8      	movs	r2, #248	; 0xf8
     a48:	32ff      	adds	r2, #255	; 0xff
     a4a:	4959      	ldr	r1, [pc, #356]	; (bb0 <hif_handle_isr+0x374>)
     a4c:	4859      	ldr	r0, [pc, #356]	; (bb4 <hif_handle_isr+0x378>)
     a4e:	4b5a      	ldr	r3, [pc, #360]	; (bb8 <hif_handle_isr+0x37c>)
     a50:	4798      	blx	r3
     a52:	4866      	ldr	r0, [pc, #408]	; (bec <hif_handle_isr+0x3b0>)
     a54:	4b5a      	ldr	r3, [pc, #360]	; (bc0 <hif_handle_isr+0x384>)
     a56:	4798      	blx	r3
     a58:	200d      	movs	r0, #13
     a5a:	4b5a      	ldr	r3, [pc, #360]	; (bc4 <hif_handle_isr+0x388>)
     a5c:	4798      	blx	r3
     a5e:	e79d      	b.n	99c <hif_handle_isr+0x160>
					if(gstrHifCxt.pfCryptoCb)
     a60:	4b4e      	ldr	r3, [pc, #312]	; (b9c <hif_handle_isr+0x360>)
     a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     a64:	2b00      	cmp	r3, #0
     a66:	d00b      	beq.n	a80 <hif_handle_isr+0x244>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     a68:	4b4c      	ldr	r3, [pc, #304]	; (b9c <hif_handle_isr+0x360>)
     a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     a6c:	aa04      	add	r2, sp, #16
     a6e:	7850      	ldrb	r0, [r2, #1]
     a70:	b2c0      	uxtb	r0, r0
     a72:	8851      	ldrh	r1, [r2, #2]
     a74:	9a05      	ldr	r2, [sp, #20]
     a76:	3208      	adds	r2, #8
     a78:	3908      	subs	r1, #8
     a7a:	b289      	uxth	r1, r1
     a7c:	4798      	blx	r3
     a7e:	e78d      	b.n	99c <hif_handle_isr+0x160>
						M2M_ERR("Crypto callback is not registered\n");
     a80:	22ff      	movs	r2, #255	; 0xff
     a82:	0052      	lsls	r2, r2, #1
     a84:	494a      	ldr	r1, [pc, #296]	; (bb0 <hif_handle_isr+0x374>)
     a86:	484b      	ldr	r0, [pc, #300]	; (bb4 <hif_handle_isr+0x378>)
     a88:	4b4b      	ldr	r3, [pc, #300]	; (bb8 <hif_handle_isr+0x37c>)
     a8a:	4798      	blx	r3
     a8c:	4858      	ldr	r0, [pc, #352]	; (bf0 <hif_handle_isr+0x3b4>)
     a8e:	4b4c      	ldr	r3, [pc, #304]	; (bc0 <hif_handle_isr+0x384>)
     a90:	4798      	blx	r3
     a92:	200d      	movs	r0, #13
     a94:	4b4b      	ldr	r3, [pc, #300]	; (bc4 <hif_handle_isr+0x388>)
     a96:	4798      	blx	r3
     a98:	e780      	b.n	99c <hif_handle_isr+0x160>
					if(gstrHifCxt.pfSigmaCb)
     a9a:	4b40      	ldr	r3, [pc, #256]	; (b9c <hif_handle_isr+0x360>)
     a9c:	69db      	ldr	r3, [r3, #28]
     a9e:	2b00      	cmp	r3, #0
     aa0:	d00b      	beq.n	aba <hif_handle_isr+0x27e>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     aa2:	4b3e      	ldr	r3, [pc, #248]	; (b9c <hif_handle_isr+0x360>)
     aa4:	69db      	ldr	r3, [r3, #28]
     aa6:	aa04      	add	r2, sp, #16
     aa8:	7850      	ldrb	r0, [r2, #1]
     aaa:	b2c0      	uxtb	r0, r0
     aac:	8851      	ldrh	r1, [r2, #2]
     aae:	9a05      	ldr	r2, [sp, #20]
     ab0:	3208      	adds	r2, #8
     ab2:	3908      	subs	r1, #8
     ab4:	b289      	uxth	r1, r1
     ab6:	4798      	blx	r3
     ab8:	e770      	b.n	99c <hif_handle_isr+0x160>
						M2M_ERR("Sigma callback is not registered\n");
     aba:	4a4e      	ldr	r2, [pc, #312]	; (bf4 <hif_handle_isr+0x3b8>)
     abc:	493c      	ldr	r1, [pc, #240]	; (bb0 <hif_handle_isr+0x374>)
     abe:	483d      	ldr	r0, [pc, #244]	; (bb4 <hif_handle_isr+0x378>)
     ac0:	4b3d      	ldr	r3, [pc, #244]	; (bb8 <hif_handle_isr+0x37c>)
     ac2:	4798      	blx	r3
     ac4:	484c      	ldr	r0, [pc, #304]	; (bf8 <hif_handle_isr+0x3bc>)
     ac6:	4b3e      	ldr	r3, [pc, #248]	; (bc0 <hif_handle_isr+0x384>)
     ac8:	4798      	blx	r3
     aca:	200d      	movs	r0, #13
     acc:	4b3d      	ldr	r3, [pc, #244]	; (bc4 <hif_handle_isr+0x388>)
     ace:	4798      	blx	r3
     ad0:	e764      	b.n	99c <hif_handle_isr+0x160>
				    if(gstrHifCxt.pfSslCb)
     ad2:	4b32      	ldr	r3, [pc, #200]	; (b9c <hif_handle_isr+0x360>)
     ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ad6:	2b00      	cmp	r3, #0
     ad8:	d00b      	beq.n	af2 <hif_handle_isr+0x2b6>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
     ada:	4b30      	ldr	r3, [pc, #192]	; (b9c <hif_handle_isr+0x360>)
     adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     ade:	aa04      	add	r2, sp, #16
     ae0:	7850      	ldrb	r0, [r2, #1]
     ae2:	b2c0      	uxtb	r0, r0
     ae4:	8851      	ldrh	r1, [r2, #2]
     ae6:	9a05      	ldr	r2, [sp, #20]
     ae8:	3208      	adds	r2, #8
     aea:	3908      	subs	r1, #8
     aec:	b289      	uxth	r1, r1
     aee:	4798      	blx	r3
     af0:	e754      	b.n	99c <hif_handle_isr+0x160>
                        M2M_ERR("SSL callback is not registered\n");
     af2:	2283      	movs	r2, #131	; 0x83
     af4:	0092      	lsls	r2, r2, #2
     af6:	492e      	ldr	r1, [pc, #184]	; (bb0 <hif_handle_isr+0x374>)
     af8:	482e      	ldr	r0, [pc, #184]	; (bb4 <hif_handle_isr+0x378>)
     afa:	4b2f      	ldr	r3, [pc, #188]	; (bb8 <hif_handle_isr+0x37c>)
     afc:	4798      	blx	r3
     afe:	483f      	ldr	r0, [pc, #252]	; (bfc <hif_handle_isr+0x3c0>)
     b00:	4b2f      	ldr	r3, [pc, #188]	; (bc0 <hif_handle_isr+0x384>)
     b02:	4798      	blx	r3
     b04:	200d      	movs	r0, #13
     b06:	4b2f      	ldr	r3, [pc, #188]	; (bc4 <hif_handle_isr+0x388>)
     b08:	4798      	blx	r3
     b0a:	e747      	b.n	99c <hif_handle_isr+0x160>
				M2M_ERR("(hif) Wrong Size\n");
     b0c:	4a3c      	ldr	r2, [pc, #240]	; (c00 <hif_handle_isr+0x3c4>)
     b0e:	4928      	ldr	r1, [pc, #160]	; (bb0 <hif_handle_isr+0x374>)
     b10:	4828      	ldr	r0, [pc, #160]	; (bb4 <hif_handle_isr+0x378>)
     b12:	4b29      	ldr	r3, [pc, #164]	; (bb8 <hif_handle_isr+0x37c>)
     b14:	4798      	blx	r3
     b16:	483b      	ldr	r0, [pc, #236]	; (c04 <hif_handle_isr+0x3c8>)
     b18:	4b29      	ldr	r3, [pc, #164]	; (bc0 <hif_handle_isr+0x384>)
     b1a:	4798      	blx	r3
     b1c:	200d      	movs	r0, #13
     b1e:	4b29      	ldr	r3, [pc, #164]	; (bc4 <hif_handle_isr+0x388>)
     b20:	4798      	blx	r3
				ret = M2M_ERR_RCV;
     b22:	2402      	movs	r4, #2
     b24:	4264      	negs	r4, r4
     b26:	e00a      	b.n	b3e <hif_handle_isr+0x302>
		M2M_ERR("(hif) Failed to Read interrupt reg\n");
     b28:	4a37      	ldr	r2, [pc, #220]	; (c08 <hif_handle_isr+0x3cc>)
     b2a:	4921      	ldr	r1, [pc, #132]	; (bb0 <hif_handle_isr+0x374>)
     b2c:	4821      	ldr	r0, [pc, #132]	; (bb4 <hif_handle_isr+0x378>)
     b2e:	4b22      	ldr	r3, [pc, #136]	; (bb8 <hif_handle_isr+0x37c>)
     b30:	4798      	blx	r3
     b32:	4836      	ldr	r0, [pc, #216]	; (c0c <hif_handle_isr+0x3d0>)
     b34:	4b22      	ldr	r3, [pc, #136]	; (bc0 <hif_handle_isr+0x384>)
     b36:	4798      	blx	r3
     b38:	200d      	movs	r0, #13
     b3a:	4b22      	ldr	r3, [pc, #136]	; (bc4 <hif_handle_isr+0x388>)
     b3c:	4798      	blx	r3
				/*we will try forever until we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
			} else {
				retries--;
				if(!retries)
     b3e:	2d00      	cmp	r5, #0
     b40:	d06c      	beq.n	c1c <hif_handle_isr+0x3e0>
				{
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
					break;
				}
				else
					M2M_ERR("(HIF) Failed to handle interrupt %d try again... (%u)\n", ret, retries);
     b42:	229b      	movs	r2, #155	; 0x9b
     b44:	0092      	lsls	r2, r2, #2
     b46:	4932      	ldr	r1, [pc, #200]	; (c10 <hif_handle_isr+0x3d4>)
     b48:	481a      	ldr	r0, [pc, #104]	; (bb4 <hif_handle_isr+0x378>)
     b4a:	4f1b      	ldr	r7, [pc, #108]	; (bb8 <hif_handle_isr+0x37c>)
     b4c:	47b8      	blx	r7
     b4e:	002a      	movs	r2, r5
     b50:	0021      	movs	r1, r4
     b52:	4830      	ldr	r0, [pc, #192]	; (c14 <hif_handle_isr+0x3d8>)
     b54:	47b8      	blx	r7
     b56:	200d      	movs	r0, #13
     b58:	4b1a      	ldr	r3, [pc, #104]	; (bc4 <hif_handle_isr+0x388>)
     b5a:	4798      	blx	r3
     b5c:	3d01      	subs	r5, #1
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     b5e:	a903      	add	r1, sp, #12
     b60:	480f      	ldr	r0, [pc, #60]	; (ba0 <hif_handle_isr+0x364>)
     b62:	47b0      	blx	r6
     b64:	1e04      	subs	r4, r0, #0
	if(M2M_SUCCESS == ret)
     b66:	d1df      	bne.n	b28 <hif_handle_isr+0x2ec>
		if(reg & 0x1)	/* New interrupt has been received */
     b68:	9903      	ldr	r1, [sp, #12]
     b6a:	07cb      	lsls	r3, r1, #31
     b6c:	d500      	bpl.n	b70 <hif_handle_isr+0x334>
     b6e:	e673      	b.n	858 <hif_handle_isr+0x1c>
	while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
     b70:	4643      	mov	r3, r8
     b72:	78db      	ldrb	r3, [r3, #3]
     b74:	2b00      	cmp	r3, #0
     b76:	d060      	beq.n	c3a <hif_handle_isr+0x3fe>
     b78:	464b      	mov	r3, r9
     b7a:	791b      	ldrb	r3, [r3, #4]
     b7c:	2b00      	cmp	r3, #0
     b7e:	d15c      	bne.n	c3a <hif_handle_isr+0x3fe>
		nm_bsp_interrupt_ctrl(0);
     b80:	2000      	movs	r0, #0
     b82:	4c25      	ldr	r4, [pc, #148]	; (c18 <hif_handle_isr+0x3dc>)
     b84:	47a0      	blx	r4
		gstrHifCxt.u8Interrupt--;
     b86:	4a05      	ldr	r2, [pc, #20]	; (b9c <hif_handle_isr+0x360>)
     b88:	78d3      	ldrb	r3, [r2, #3]
     b8a:	3b01      	subs	r3, #1
     b8c:	b2db      	uxtb	r3, r3
     b8e:	70d3      	strb	r3, [r2, #3]
		nm_bsp_interrupt_ctrl(1);
     b90:	2001      	movs	r0, #1
     b92:	47a0      	blx	r4
     b94:	2504      	movs	r5, #4
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
     b96:	4e05      	ldr	r6, [pc, #20]	; (bac <hif_handle_isr+0x370>)
     b98:	e7e1      	b.n	b5e <hif_handle_isr+0x322>
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	200010f4 	.word	0x200010f4
     ba0:	00001070 	.word	0x00001070
     ba4:	00001945 	.word	0x00001945
     ba8:	00001084 	.word	0x00001084
     bac:	00001939 	.word	0x00001939
     bb0:	0001cdc0 	.word	0x0001cdc0
     bb4:	0001cd6c 	.word	0x0001cd6c
     bb8:	000182cd 	.word	0x000182cd
     bbc:	0001cdf4 	.word	0x0001cdf4
     bc0:	000183a5 	.word	0x000183a5
     bc4:	000182f1 	.word	0x000182f1
     bc8:	00001951 	.word	0x00001951
     bcc:	0001cf3c 	.word	0x0001cf3c
     bd0:	0001ce18 	.word	0x0001ce18
     bd4:	0001ce30 	.word	0x0001ce30
     bd8:	00000216 	.word	0x00000216
     bdc:	0001cf54 	.word	0x0001cf54
     be0:	000004f1 	.word	0x000004f1
     be4:	0001ce70 	.word	0x0001ce70
     be8:	0001ce90 	.word	0x0001ce90
     bec:	0001ceb4 	.word	0x0001ceb4
     bf0:	0001ced4 	.word	0x0001ced4
     bf4:	00000205 	.word	0x00000205
     bf8:	0001cef8 	.word	0x0001cef8
     bfc:	0001cf1c 	.word	0x0001cf1c
     c00:	0000021d 	.word	0x0000021d
     c04:	0001cf80 	.word	0x0001cf80
     c08:	0000022e 	.word	0x0000022e
     c0c:	0001cf94 	.word	0x0001cf94
     c10:	0001cdc8 	.word	0x0001cdc8
     c14:	0001d000 	.word	0x0001d000
     c18:	00000255 	.word	0x00000255
					M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
     c1c:	229a      	movs	r2, #154	; 0x9a
     c1e:	0092      	lsls	r2, r2, #2
     c20:	490a      	ldr	r1, [pc, #40]	; (c4c <hif_handle_isr+0x410>)
     c22:	480b      	ldr	r0, [pc, #44]	; (c50 <hif_handle_isr+0x414>)
     c24:	4d0b      	ldr	r5, [pc, #44]	; (c54 <hif_handle_isr+0x418>)
     c26:	47a8      	blx	r5
     c28:	0021      	movs	r1, r4
     c2a:	480b      	ldr	r0, [pc, #44]	; (c58 <hif_handle_isr+0x41c>)
     c2c:	47a8      	blx	r5
     c2e:	200d      	movs	r0, #13
     c30:	4b0a      	ldr	r3, [pc, #40]	; (c5c <hif_handle_isr+0x420>)
     c32:	4798      	blx	r3
					break;
     c34:	e79c      	b.n	b70 <hif_handle_isr+0x334>
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     c36:	0004      	movs	r4, r0
     c38:	e781      	b.n	b3e <hif_handle_isr+0x302>
			}
		}
	}

	return ret;
}
     c3a:	0020      	movs	r0, r4
     c3c:	b007      	add	sp, #28
     c3e:	bc3c      	pop	{r2, r3, r4, r5}
     c40:	4690      	mov	r8, r2
     c42:	4699      	mov	r9, r3
     c44:	46a2      	mov	sl, r4
     c46:	46ab      	mov	fp, r5
     c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	0001cdc8 	.word	0x0001cdc8
     c50:	0001cd6c 	.word	0x0001cd6c
     c54:	000182cd 	.word	0x000182cd
     c58:	0001cfb8 	.word	0x0001cfb8
     c5c:	000182f1 	.word	0x000182f1

00000c60 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
     c60:	b570      	push	{r4, r5, r6, lr}
     c62:	0014      	movs	r4, r2
     c64:	001d      	movs	r5, r3
	sint8 ret = M2M_SUCCESS;
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
     c66:	2800      	cmp	r0, #0
     c68:	d003      	beq.n	c72 <hif_receive+0x12>
     c6a:	2900      	cmp	r1, #0
     c6c:	d001      	beq.n	c72 <hif_receive+0x12>
     c6e:	2a00      	cmp	r2, #0
     c70:	d112      	bne.n	c98 <hif_receive+0x38>
	{
		if(isDone)
     c72:	2d00      	cmp	r5, #0
     c74:	d002      	beq.n	c7c <hif_receive+0x1c>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
     c76:	4b27      	ldr	r3, [pc, #156]	; (d14 <hif_receive+0xb4>)
     c78:	4798      	blx	r3
		ret = hif_set_rx_done();
	}

ERR1:
	return ret;
}
     c7a:	bd70      	pop	{r4, r5, r6, pc}
			M2M_ERR(" hif_receive: Invalid argument\n");
     c7c:	4a26      	ldr	r2, [pc, #152]	; (d18 <hif_receive+0xb8>)
     c7e:	4927      	ldr	r1, [pc, #156]	; (d1c <hif_receive+0xbc>)
     c80:	4827      	ldr	r0, [pc, #156]	; (d20 <hif_receive+0xc0>)
     c82:	4b28      	ldr	r3, [pc, #160]	; (d24 <hif_receive+0xc4>)
     c84:	4798      	blx	r3
     c86:	4828      	ldr	r0, [pc, #160]	; (d28 <hif_receive+0xc8>)
     c88:	4b28      	ldr	r3, [pc, #160]	; (d2c <hif_receive+0xcc>)
     c8a:	4798      	blx	r3
     c8c:	200d      	movs	r0, #13
     c8e:	4b28      	ldr	r3, [pc, #160]	; (d30 <hif_receive+0xd0>)
     c90:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     c92:	200c      	movs	r0, #12
     c94:	4240      	negs	r0, r0
     c96:	e7f0      	b.n	c7a <hif_receive+0x1a>
	if(u16Sz > gstrHifCxt.u32RxSize)
     c98:	4b26      	ldr	r3, [pc, #152]	; (d34 <hif_receive+0xd4>)
     c9a:	68db      	ldr	r3, [r3, #12]
     c9c:	429a      	cmp	r2, r3
     c9e:	d81a      	bhi.n	cd6 <hif_receive+0x76>
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
     ca0:	4b24      	ldr	r3, [pc, #144]	; (d34 <hif_receive+0xd4>)
     ca2:	689b      	ldr	r3, [r3, #8]
     ca4:	4298      	cmp	r0, r3
     ca6:	d326      	bcc.n	cf6 <hif_receive+0x96>
     ca8:	1886      	adds	r6, r0, r2
     caa:	4a22      	ldr	r2, [pc, #136]	; (d34 <hif_receive+0xd4>)
     cac:	6893      	ldr	r3, [r2, #8]
     cae:	68d2      	ldr	r2, [r2, #12]
     cb0:	189b      	adds	r3, r3, r2
     cb2:	429e      	cmp	r6, r3
     cb4:	d81f      	bhi.n	cf6 <hif_receive+0x96>
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
     cb6:	0022      	movs	r2, r4
     cb8:	4b1f      	ldr	r3, [pc, #124]	; (d38 <hif_receive+0xd8>)
     cba:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
     cbc:	2800      	cmp	r0, #0
     cbe:	d1dc      	bne.n	c7a <hif_receive+0x1a>
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
     cc0:	4a1c      	ldr	r2, [pc, #112]	; (d34 <hif_receive+0xd4>)
     cc2:	6893      	ldr	r3, [r2, #8]
     cc4:	68d2      	ldr	r2, [r2, #12]
     cc6:	189b      	adds	r3, r3, r2
     cc8:	429e      	cmp	r6, r3
     cca:	d001      	beq.n	cd0 <hif_receive+0x70>
     ccc:	2d00      	cmp	r5, #0
     cce:	d0d4      	beq.n	c7a <hif_receive+0x1a>
		ret = hif_set_rx_done();
     cd0:	4b10      	ldr	r3, [pc, #64]	; (d14 <hif_receive+0xb4>)
     cd2:	4798      	blx	r3
     cd4:	e7d1      	b.n	c7a <hif_receive+0x1a>
		M2M_ERR("APP Requested Size is larger than the received buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
     cd6:	4a19      	ldr	r2, [pc, #100]	; (d3c <hif_receive+0xdc>)
     cd8:	4910      	ldr	r1, [pc, #64]	; (d1c <hif_receive+0xbc>)
     cda:	4811      	ldr	r0, [pc, #68]	; (d20 <hif_receive+0xc0>)
     cdc:	4d11      	ldr	r5, [pc, #68]	; (d24 <hif_receive+0xc4>)
     cde:	47a8      	blx	r5
     ce0:	4b14      	ldr	r3, [pc, #80]	; (d34 <hif_receive+0xd4>)
     ce2:	68da      	ldr	r2, [r3, #12]
     ce4:	0021      	movs	r1, r4
     ce6:	4816      	ldr	r0, [pc, #88]	; (d40 <hif_receive+0xe0>)
     ce8:	47a8      	blx	r5
     cea:	200d      	movs	r0, #13
     cec:	4b10      	ldr	r3, [pc, #64]	; (d30 <hif_receive+0xd0>)
     cee:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     cf0:	200c      	movs	r0, #12
     cf2:	4240      	negs	r0, r0
		goto ERR1;
     cf4:	e7c1      	b.n	c7a <hif_receive+0x1a>
		M2M_ERR("APP Requested Address beyond the received buffer address and length\n");
     cf6:	4a13      	ldr	r2, [pc, #76]	; (d44 <hif_receive+0xe4>)
     cf8:	4908      	ldr	r1, [pc, #32]	; (d1c <hif_receive+0xbc>)
     cfa:	4809      	ldr	r0, [pc, #36]	; (d20 <hif_receive+0xc0>)
     cfc:	4b09      	ldr	r3, [pc, #36]	; (d24 <hif_receive+0xc4>)
     cfe:	4798      	blx	r3
     d00:	4811      	ldr	r0, [pc, #68]	; (d48 <hif_receive+0xe8>)
     d02:	4b0a      	ldr	r3, [pc, #40]	; (d2c <hif_receive+0xcc>)
     d04:	4798      	blx	r3
     d06:	200d      	movs	r0, #13
     d08:	4b09      	ldr	r3, [pc, #36]	; (d30 <hif_receive+0xd0>)
     d0a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
     d0c:	200c      	movs	r0, #12
     d0e:	4240      	negs	r0, r0
		goto ERR1;
     d10:	e7b3      	b.n	c7a <hif_receive+0x1a>
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	000004f1 	.word	0x000004f1
     d18:	0000028d 	.word	0x0000028d
     d1c:	0001cdd8 	.word	0x0001cdd8
     d20:	0001cd6c 	.word	0x0001cd6c
     d24:	000182cd 	.word	0x000182cd
     d28:	0001d038 	.word	0x0001d038
     d2c:	000183a5 	.word	0x000183a5
     d30:	000182f1 	.word	0x000182f1
     d34:	200010f4 	.word	0x200010f4
     d38:	00001951 	.word	0x00001951
     d3c:	00000295 	.word	0x00000295
     d40:	0001d058 	.word	0x0001d058
     d44:	0000029b 	.word	0x0000029b
     d48:	0001d0a0 	.word	0x0001d0a0

00000d4c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
     d4c:	b570      	push	{r4, r5, r6, lr}
     d4e:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;
	switch(u8Grp)
     d50:	2807      	cmp	r0, #7
     d52:	d81f      	bhi.n	d94 <hif_register_cb+0x48>
     d54:	0083      	lsls	r3, r0, #2
     d56:	4a16      	ldr	r2, [pc, #88]	; (db0 <hif_register_cb+0x64>)
     d58:	58d3      	ldr	r3, [r2, r3]
     d5a:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
     d5c:	4b15      	ldr	r3, [pc, #84]	; (db4 <hif_register_cb+0x68>)
     d5e:	6159      	str	r1, [r3, #20]
	sint8 ret = M2M_SUCCESS;
     d60:	2000      	movs	r0, #0
			M2M_ERR("GRp ? %d\n",u8Grp);
			ret = M2M_ERR_FAIL;
			break;
	}
	return ret;
}
     d62:	bd70      	pop	{r4, r5, r6, pc}
			gstrHifCxt.pfWifiCb = fn;
     d64:	4b13      	ldr	r3, [pc, #76]	; (db4 <hif_register_cb+0x68>)
     d66:	6119      	str	r1, [r3, #16]
	sint8 ret = M2M_SUCCESS;
     d68:	2000      	movs	r0, #0
			break;
     d6a:	e7fa      	b.n	d62 <hif_register_cb+0x16>
			gstrHifCxt.pfOtaCb = fn;
     d6c:	4b11      	ldr	r3, [pc, #68]	; (db4 <hif_register_cb+0x68>)
     d6e:	6199      	str	r1, [r3, #24]
	sint8 ret = M2M_SUCCESS;
     d70:	2000      	movs	r0, #0
			break;
     d72:	e7f6      	b.n	d62 <hif_register_cb+0x16>
			gstrHifCxt.pfHifCb = fn;
     d74:	4b0f      	ldr	r3, [pc, #60]	; (db4 <hif_register_cb+0x68>)
     d76:	6219      	str	r1, [r3, #32]
	sint8 ret = M2M_SUCCESS;
     d78:	2000      	movs	r0, #0
			break;
     d7a:	e7f2      	b.n	d62 <hif_register_cb+0x16>
			gstrHifCxt.pfCryptoCb = fn;
     d7c:	4b0d      	ldr	r3, [pc, #52]	; (db4 <hif_register_cb+0x68>)
     d7e:	6259      	str	r1, [r3, #36]	; 0x24
	sint8 ret = M2M_SUCCESS;
     d80:	2000      	movs	r0, #0
			break;
     d82:	e7ee      	b.n	d62 <hif_register_cb+0x16>
			gstrHifCxt.pfSigmaCb = fn;
     d84:	4b0b      	ldr	r3, [pc, #44]	; (db4 <hif_register_cb+0x68>)
     d86:	61d9      	str	r1, [r3, #28]
	sint8 ret = M2M_SUCCESS;
     d88:	2000      	movs	r0, #0
			break;
     d8a:	e7ea      	b.n	d62 <hif_register_cb+0x16>
			gstrHifCxt.pfSslCb = fn;
     d8c:	4b09      	ldr	r3, [pc, #36]	; (db4 <hif_register_cb+0x68>)
     d8e:	6299      	str	r1, [r3, #40]	; 0x28
	sint8 ret = M2M_SUCCESS;
     d90:	2000      	movs	r0, #0
			break;
     d92:	e7e6      	b.n	d62 <hif_register_cb+0x16>
			M2M_ERR("GRp ? %d\n",u8Grp);
     d94:	4a08      	ldr	r2, [pc, #32]	; (db8 <hif_register_cb+0x6c>)
     d96:	4909      	ldr	r1, [pc, #36]	; (dbc <hif_register_cb+0x70>)
     d98:	4809      	ldr	r0, [pc, #36]	; (dc0 <hif_register_cb+0x74>)
     d9a:	4d0a      	ldr	r5, [pc, #40]	; (dc4 <hif_register_cb+0x78>)
     d9c:	47a8      	blx	r5
     d9e:	0021      	movs	r1, r4
     da0:	4809      	ldr	r0, [pc, #36]	; (dc8 <hif_register_cb+0x7c>)
     da2:	47a8      	blx	r5
     da4:	200d      	movs	r0, #13
     da6:	4b09      	ldr	r3, [pc, #36]	; (dcc <hif_register_cb+0x80>)
     da8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
     daa:	200c      	movs	r0, #12
     dac:	4240      	negs	r0, r0
			break;
     dae:	e7d8      	b.n	d62 <hif_register_cb+0x16>
     db0:	0001cd94 	.word	0x0001cd94
     db4:	200010f4 	.word	0x200010f4
     db8:	000002d3 	.word	0x000002d3
     dbc:	0001cde4 	.word	0x0001cde4
     dc0:	0001cd6c 	.word	0x0001cd6c
     dc4:	000182cd 	.word	0x000182cd
     dc8:	0001d0e4 	.word	0x0001d0e4
     dcc:	000182f1 	.word	0x000182f1

00000dd0 <hif_init>:
{
     dd0:	b510      	push	{r4, lr}
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
     dd2:	222c      	movs	r2, #44	; 0x2c
     dd4:	2100      	movs	r1, #0
     dd6:	4806      	ldr	r0, [pc, #24]	; (df0 <hif_init+0x20>)
     dd8:	4b06      	ldr	r3, [pc, #24]	; (df4 <hif_init+0x24>)
     dda:	4798      	blx	r3
	nm_bsp_register_isr(isr);
     ddc:	4806      	ldr	r0, [pc, #24]	; (df8 <hif_init+0x28>)
     dde:	4b07      	ldr	r3, [pc, #28]	; (dfc <hif_init+0x2c>)
     de0:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
     de2:	4907      	ldr	r1, [pc, #28]	; (e00 <hif_init+0x30>)
     de4:	2003      	movs	r0, #3
     de6:	4b07      	ldr	r3, [pc, #28]	; (e04 <hif_init+0x34>)
     de8:	4798      	blx	r3
}
     dea:	2000      	movs	r0, #0
     dec:	bd10      	pop	{r4, pc}
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	200010f4 	.word	0x200010f4
     df4:	000004cd 	.word	0x000004cd
     df8:	000004dd 	.word	0x000004dd
     dfc:	000001fd 	.word	0x000001fd
     e00:	000004ed 	.word	0x000004ed
     e04:	00000d4d 	.word	0x00000d4d

00000e08 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
     e08:	b530      	push	{r4, r5, lr}
     e0a:	b09f      	sub	sp, #124	; 0x7c
     e0c:	0004      	movs	r4, r0
     e0e:	0015      	movs	r5, r2
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
     e10:	282c      	cmp	r0, #44	; 0x2c
     e12:	d036      	beq.n	e82 <m2m_wifi_cb+0x7a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
     e14:	281b      	cmp	r0, #27
     e16:	d044      	beq.n	ea2 <m2m_wifi_cb+0x9a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
     e18:	2806      	cmp	r0, #6
     e1a:	d052      	beq.n	ec2 <m2m_wifi_cb+0xba>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
     e1c:	280e      	cmp	r0, #14
     e1e:	d02e      	beq.n	e7e <m2m_wifi_cb+0x76>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
     e20:	2832      	cmp	r0, #50	; 0x32
     e22:	d05e      	beq.n	ee2 <m2m_wifi_cb+0xda>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_FAILURE)
     e24:	283d      	cmp	r0, #61	; 0x3d
     e26:	d100      	bne.n	e2a <m2m_wifi_cb+0x22>
     e28:	e06b      	b.n	f02 <m2m_wifi_cb+0xfa>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_FAILURE, NULL);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
     e2a:	282f      	cmp	r0, #47	; 0x2f
     e2c:	d100      	bne.n	e30 <m2m_wifi_cb+0x28>
     e2e:	e078      	b.n	f22 <m2m_wifi_cb+0x11a>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
     e30:	2834      	cmp	r0, #52	; 0x34
     e32:	d100      	bne.n	e36 <m2m_wifi_cb+0x2e>
     e34:	e08a      	b.n	f4c <m2m_wifi_cb+0x144>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
     e36:	2811      	cmp	r0, #17
     e38:	d100      	bne.n	e3c <m2m_wifi_cb+0x34>
     e3a:	e0aa      	b.n	f92 <m2m_wifi_cb+0x18a>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
     e3c:	2813      	cmp	r0, #19
     e3e:	d100      	bne.n	e42 <m2m_wifi_cb+0x3a>
     e40:	e0c0      	b.n	fc4 <m2m_wifi_cb+0x1bc>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
     e42:	2804      	cmp	r0, #4
     e44:	d100      	bne.n	e48 <m2m_wifi_cb+0x40>
     e46:	e0cf      	b.n	fe8 <m2m_wifi_cb+0x1e0>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
     e48:	2865      	cmp	r0, #101	; 0x65
     e4a:	d100      	bne.n	e4e <m2m_wifi_cb+0x46>
     e4c:	e0de      	b.n	100c <m2m_wifi_cb+0x204>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
     e4e:	2809      	cmp	r0, #9
     e50:	d100      	bne.n	e54 <m2m_wifi_cb+0x4c>
     e52:	e0ed      	b.n	1030 <m2m_wifi_cb+0x228>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
     e54:	282a      	cmp	r0, #42	; 0x2a
     e56:	d100      	bne.n	e5a <m2m_wifi_cb+0x52>
     e58:	e0fc      	b.n	1054 <m2m_wifi_cb+0x24c>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQRSP_DELETE_APID)
     e5a:	2827      	cmp	r0, #39	; 0x27
     e5c:	d100      	bne.n	e60 <m2m_wifi_cb+0x58>
     e5e:	e10b      	b.n	1078 <m2m_wifi_cb+0x270>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
     e60:	2820      	cmp	r0, #32
     e62:	d100      	bne.n	e66 <m2m_wifi_cb+0x5e>
     e64:	e11a      	b.n	109c <m2m_wifi_cb+0x294>
			}
		}
#endif	/* ETH_MODE */
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
     e66:	2210      	movs	r2, #16
     e68:	32ff      	adds	r2, #255	; 0xff
     e6a:	499b      	ldr	r1, [pc, #620]	; (10d8 <m2m_wifi_cb+0x2d0>)
     e6c:	489b      	ldr	r0, [pc, #620]	; (10dc <m2m_wifi_cb+0x2d4>)
     e6e:	4d9c      	ldr	r5, [pc, #624]	; (10e0 <m2m_wifi_cb+0x2d8>)
     e70:	47a8      	blx	r5
     e72:	0021      	movs	r1, r4
     e74:	489b      	ldr	r0, [pc, #620]	; (10e4 <m2m_wifi_cb+0x2dc>)
     e76:	47a8      	blx	r5
     e78:	200d      	movs	r0, #13
     e7a:	4b9b      	ldr	r3, [pc, #620]	; (10e8 <m2m_wifi_cb+0x2e0>)
     e7c:	4798      	blx	r3
	}
}
     e7e:	b01f      	add	sp, #124	; 0x7c
     e80:	bd30      	pop	{r4, r5, pc}
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
     e82:	2300      	movs	r3, #0
     e84:	2204      	movs	r2, #4
     e86:	a903      	add	r1, sp, #12
     e88:	0028      	movs	r0, r5
     e8a:	4c98      	ldr	r4, [pc, #608]	; (10ec <m2m_wifi_cb+0x2e4>)
     e8c:	47a0      	blx	r4
     e8e:	2800      	cmp	r0, #0
     e90:	d1f5      	bne.n	e7e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
     e92:	4b97      	ldr	r3, [pc, #604]	; (10f0 <m2m_wifi_cb+0x2e8>)
     e94:	681b      	ldr	r3, [r3, #0]
     e96:	2b00      	cmp	r3, #0
     e98:	d0f1      	beq.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
     e9a:	a903      	add	r1, sp, #12
     e9c:	302c      	adds	r0, #44	; 0x2c
     e9e:	4798      	blx	r3
     ea0:	e7ed      	b.n	e7e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
     ea2:	2300      	movs	r3, #0
     ea4:	2208      	movs	r2, #8
     ea6:	a903      	add	r1, sp, #12
     ea8:	0028      	movs	r0, r5
     eaa:	4c90      	ldr	r4, [pc, #576]	; (10ec <m2m_wifi_cb+0x2e4>)
     eac:	47a0      	blx	r4
     eae:	2800      	cmp	r0, #0
     eb0:	d1e5      	bne.n	e7e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
     eb2:	4b8f      	ldr	r3, [pc, #572]	; (10f0 <m2m_wifi_cb+0x2e8>)
     eb4:	681b      	ldr	r3, [r3, #0]
     eb6:	2b00      	cmp	r3, #0
     eb8:	d0e1      	beq.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
     eba:	a903      	add	r1, sp, #12
     ebc:	301b      	adds	r0, #27
     ebe:	4798      	blx	r3
     ec0:	e7dd      	b.n	e7e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
     ec2:	2301      	movs	r3, #1
     ec4:	2230      	movs	r2, #48	; 0x30
     ec6:	a903      	add	r1, sp, #12
     ec8:	0028      	movs	r0, r5
     eca:	4c88      	ldr	r4, [pc, #544]	; (10ec <m2m_wifi_cb+0x2e4>)
     ecc:	47a0      	blx	r4
     ece:	2800      	cmp	r0, #0
     ed0:	d1d5      	bne.n	e7e <m2m_wifi_cb+0x76>
			if(gpfAppWifiCb)
     ed2:	4b87      	ldr	r3, [pc, #540]	; (10f0 <m2m_wifi_cb+0x2e8>)
     ed4:	681b      	ldr	r3, [r3, #0]
     ed6:	2b00      	cmp	r3, #0
     ed8:	d0d1      	beq.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
     eda:	a903      	add	r1, sp, #12
     edc:	3006      	adds	r0, #6
     ede:	4798      	blx	r3
     ee0:	e7cd      	b.n	e7e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
     ee2:	2300      	movs	r3, #0
     ee4:	2218      	movs	r2, #24
     ee6:	a903      	add	r1, sp, #12
     ee8:	0028      	movs	r0, r5
     eea:	4c80      	ldr	r4, [pc, #512]	; (10ec <m2m_wifi_cb+0x2e4>)
     eec:	47a0      	blx	r4
     eee:	2800      	cmp	r0, #0
     ef0:	d1c5      	bne.n	e7e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
     ef2:	4b7f      	ldr	r3, [pc, #508]	; (10f0 <m2m_wifi_cb+0x2e8>)
     ef4:	681b      	ldr	r3, [r3, #0]
     ef6:	2b00      	cmp	r3, #0
     ef8:	d0c1      	beq.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
     efa:	a903      	add	r1, sp, #12
     efc:	3032      	adds	r0, #50	; 0x32
     efe:	4798      	blx	r3
     f00:	e7bd      	b.n	e7e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, NULL, 0, 1) == M2M_SUCCESS)
     f02:	2301      	movs	r3, #1
     f04:	2200      	movs	r2, #0
     f06:	2100      	movs	r1, #0
     f08:	0028      	movs	r0, r5
     f0a:	4c78      	ldr	r4, [pc, #480]	; (10ec <m2m_wifi_cb+0x2e4>)
     f0c:	47a0      	blx	r4
     f0e:	2800      	cmp	r0, #0
     f10:	d1b5      	bne.n	e7e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
     f12:	4b77      	ldr	r3, [pc, #476]	; (10f0 <m2m_wifi_cb+0x2e8>)
     f14:	681b      	ldr	r3, [r3, #0]
     f16:	2b00      	cmp	r3, #0
     f18:	d0b1      	beq.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_FAILURE, NULL);
     f1a:	2100      	movs	r1, #0
     f1c:	303d      	adds	r0, #61	; 0x3d
     f1e:	4798      	blx	r3
     f20:	e7ad      	b.n	e7e <m2m_wifi_cb+0x76>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
     f22:	2264      	movs	r2, #100	; 0x64
     f24:	2100      	movs	r1, #0
     f26:	a803      	add	r0, sp, #12
     f28:	4b72      	ldr	r3, [pc, #456]	; (10f4 <m2m_wifi_cb+0x2ec>)
     f2a:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
     f2c:	2300      	movs	r3, #0
     f2e:	2264      	movs	r2, #100	; 0x64
     f30:	a903      	add	r1, sp, #12
     f32:	0028      	movs	r0, r5
     f34:	4c6d      	ldr	r4, [pc, #436]	; (10ec <m2m_wifi_cb+0x2e4>)
     f36:	47a0      	blx	r4
     f38:	2800      	cmp	r0, #0
     f3a:	d1a0      	bne.n	e7e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
     f3c:	4b6c      	ldr	r3, [pc, #432]	; (10f0 <m2m_wifi_cb+0x2e8>)
     f3e:	681b      	ldr	r3, [r3, #0]
     f40:	2b00      	cmp	r3, #0
     f42:	d09c      	beq.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
     f44:	a903      	add	r1, sp, #12
     f46:	302f      	adds	r0, #47	; 0x2f
     f48:	4798      	blx	r3
     f4a:	e798      	b.n	e7e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
     f4c:	2300      	movs	r3, #0
     f4e:	2204      	movs	r2, #4
     f50:	a903      	add	r1, sp, #12
     f52:	0028      	movs	r0, r5
     f54:	4c65      	ldr	r4, [pc, #404]	; (10ec <m2m_wifi_cb+0x2e4>)
     f56:	47a0      	blx	r4
     f58:	2800      	cmp	r0, #0
     f5a:	d000      	beq.n	f5e <m2m_wifi_cb+0x156>
     f5c:	e78f      	b.n	e7e <m2m_wifi_cb+0x76>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
     f5e:	4866      	ldr	r0, [pc, #408]	; (10f8 <m2m_wifi_cb+0x2f0>)
     f60:	4c5f      	ldr	r4, [pc, #380]	; (10e0 <m2m_wifi_cb+0x2d8>)
     f62:	47a0      	blx	r4
     f64:	9803      	ldr	r0, [sp, #12]
     f66:	0c03      	lsrs	r3, r0, #16
     f68:	21ff      	movs	r1, #255	; 0xff
     f6a:	400b      	ands	r3, r1
     f6c:	0a02      	lsrs	r2, r0, #8
     f6e:	400a      	ands	r2, r1
     f70:	4001      	ands	r1, r0
     f72:	0e00      	lsrs	r0, r0, #24
     f74:	9000      	str	r0, [sp, #0]
     f76:	4861      	ldr	r0, [pc, #388]	; (10fc <m2m_wifi_cb+0x2f4>)
     f78:	47a0      	blx	r4
     f7a:	200d      	movs	r0, #13
     f7c:	4b5a      	ldr	r3, [pc, #360]	; (10e8 <m2m_wifi_cb+0x2e0>)
     f7e:	4798      	blx	r3
			if (gpfAppWifiCb)
     f80:	4b5b      	ldr	r3, [pc, #364]	; (10f0 <m2m_wifi_cb+0x2e8>)
     f82:	681b      	ldr	r3, [r3, #0]
     f84:	2b00      	cmp	r3, #0
     f86:	d100      	bne.n	f8a <m2m_wifi_cb+0x182>
     f88:	e779      	b.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
     f8a:	2100      	movs	r1, #0
     f8c:	2034      	movs	r0, #52	; 0x34
     f8e:	4798      	blx	r3
     f90:	e775      	b.n	e7e <m2m_wifi_cb+0x76>
		gu8scanInProgress = 0;
     f92:	2200      	movs	r2, #0
     f94:	4b5a      	ldr	r3, [pc, #360]	; (1100 <m2m_wifi_cb+0x2f8>)
     f96:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
     f98:	2300      	movs	r3, #0
     f9a:	3204      	adds	r2, #4
     f9c:	a903      	add	r1, sp, #12
     f9e:	0028      	movs	r0, r5
     fa0:	4c52      	ldr	r4, [pc, #328]	; (10ec <m2m_wifi_cb+0x2e4>)
     fa2:	47a0      	blx	r4
     fa4:	2800      	cmp	r0, #0
     fa6:	d000      	beq.n	faa <m2m_wifi_cb+0x1a2>
     fa8:	e769      	b.n	e7e <m2m_wifi_cb+0x76>
			gu8ChNum = strState.u8NumofCh;
     faa:	ab03      	add	r3, sp, #12
     fac:	781a      	ldrb	r2, [r3, #0]
     fae:	4b55      	ldr	r3, [pc, #340]	; (1104 <m2m_wifi_cb+0x2fc>)
     fb0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
     fb2:	4b4f      	ldr	r3, [pc, #316]	; (10f0 <m2m_wifi_cb+0x2e8>)
     fb4:	681b      	ldr	r3, [r3, #0]
     fb6:	2b00      	cmp	r3, #0
     fb8:	d100      	bne.n	fbc <m2m_wifi_cb+0x1b4>
     fba:	e760      	b.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
     fbc:	a903      	add	r1, sp, #12
     fbe:	3011      	adds	r0, #17
     fc0:	4798      	blx	r3
     fc2:	e75c      	b.n	e7e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
     fc4:	2300      	movs	r3, #0
     fc6:	222c      	movs	r2, #44	; 0x2c
     fc8:	a903      	add	r1, sp, #12
     fca:	0028      	movs	r0, r5
     fcc:	4c47      	ldr	r4, [pc, #284]	; (10ec <m2m_wifi_cb+0x2e4>)
     fce:	47a0      	blx	r4
     fd0:	2800      	cmp	r0, #0
     fd2:	d000      	beq.n	fd6 <m2m_wifi_cb+0x1ce>
     fd4:	e753      	b.n	e7e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
     fd6:	4b46      	ldr	r3, [pc, #280]	; (10f0 <m2m_wifi_cb+0x2e8>)
     fd8:	681b      	ldr	r3, [r3, #0]
     fda:	2b00      	cmp	r3, #0
     fdc:	d100      	bne.n	fe0 <m2m_wifi_cb+0x1d8>
     fde:	e74e      	b.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
     fe0:	a903      	add	r1, sp, #12
     fe2:	3013      	adds	r0, #19
     fe4:	4798      	blx	r3
     fe6:	e74a      	b.n	e7e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
     fe8:	2300      	movs	r3, #0
     fea:	2204      	movs	r2, #4
     fec:	a91c      	add	r1, sp, #112	; 0x70
     fee:	0028      	movs	r0, r5
     ff0:	4c3e      	ldr	r4, [pc, #248]	; (10ec <m2m_wifi_cb+0x2e4>)
     ff2:	47a0      	blx	r4
     ff4:	2800      	cmp	r0, #0
     ff6:	d000      	beq.n	ffa <m2m_wifi_cb+0x1f2>
     ff8:	e741      	b.n	e7e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
     ffa:	4b3d      	ldr	r3, [pc, #244]	; (10f0 <m2m_wifi_cb+0x2e8>)
     ffc:	681b      	ldr	r3, [r3, #0]
     ffe:	2b00      	cmp	r3, #0
    1000:	d100      	bne.n	1004 <m2m_wifi_cb+0x1fc>
    1002:	e73c      	b.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    1004:	a91c      	add	r1, sp, #112	; 0x70
    1006:	3004      	adds	r0, #4
    1008:	4798      	blx	r3
    100a:	e738      	b.n	e7e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    100c:	2300      	movs	r3, #0
    100e:	2204      	movs	r2, #4
    1010:	a91c      	add	r1, sp, #112	; 0x70
    1012:	0028      	movs	r0, r5
    1014:	4c35      	ldr	r4, [pc, #212]	; (10ec <m2m_wifi_cb+0x2e4>)
    1016:	47a0      	blx	r4
    1018:	2800      	cmp	r0, #0
    101a:	d000      	beq.n	101e <m2m_wifi_cb+0x216>
    101c:	e72f      	b.n	e7e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    101e:	4b34      	ldr	r3, [pc, #208]	; (10f0 <m2m_wifi_cb+0x2e8>)
    1020:	681b      	ldr	r3, [r3, #0]
    1022:	2b00      	cmp	r3, #0
    1024:	d100      	bne.n	1028 <m2m_wifi_cb+0x220>
    1026:	e72a      	b.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    1028:	a91c      	add	r1, sp, #112	; 0x70
    102a:	3065      	adds	r0, #101	; 0x65
    102c:	4798      	blx	r3
    102e:	e726      	b.n	e7e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    1030:	2301      	movs	r3, #1
    1032:	2264      	movs	r2, #100	; 0x64
    1034:	a903      	add	r1, sp, #12
    1036:	0028      	movs	r0, r5
    1038:	4c2c      	ldr	r4, [pc, #176]	; (10ec <m2m_wifi_cb+0x2e4>)
    103a:	47a0      	blx	r4
    103c:	2800      	cmp	r0, #0
    103e:	d000      	beq.n	1042 <m2m_wifi_cb+0x23a>
    1040:	e71d      	b.n	e7e <m2m_wifi_cb+0x76>
			if(gpfAppWifiCb)
    1042:	4b2b      	ldr	r3, [pc, #172]	; (10f0 <m2m_wifi_cb+0x2e8>)
    1044:	681b      	ldr	r3, [r3, #0]
    1046:	2b00      	cmp	r3, #0
    1048:	d100      	bne.n	104c <m2m_wifi_cb+0x244>
    104a:	e718      	b.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    104c:	a903      	add	r1, sp, #12
    104e:	3009      	adds	r0, #9
    1050:	4798      	blx	r3
    1052:	e714      	b.n	e7e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    1054:	2301      	movs	r3, #1
    1056:	2204      	movs	r2, #4
    1058:	a903      	add	r1, sp, #12
    105a:	0028      	movs	r0, r5
    105c:	4c23      	ldr	r4, [pc, #140]	; (10ec <m2m_wifi_cb+0x2e4>)
    105e:	47a0      	blx	r4
    1060:	2800      	cmp	r0, #0
    1062:	d000      	beq.n	1066 <m2m_wifi_cb+0x25e>
    1064:	e70b      	b.n	e7e <m2m_wifi_cb+0x76>
			if(gpfAppWifiCb)
    1066:	4b22      	ldr	r3, [pc, #136]	; (10f0 <m2m_wifi_cb+0x2e8>)
    1068:	681b      	ldr	r3, [r3, #0]
    106a:	2b00      	cmp	r3, #0
    106c:	d100      	bne.n	1070 <m2m_wifi_cb+0x268>
    106e:	e706      	b.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    1070:	a903      	add	r1, sp, #12
    1072:	302a      	adds	r0, #42	; 0x2a
    1074:	4798      	blx	r3
    1076:	e702      	b.n	e7e <m2m_wifi_cb+0x76>
		if (hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MGenericResp), 0) == M2M_SUCCESS)
    1078:	2300      	movs	r3, #0
    107a:	2204      	movs	r2, #4
    107c:	a903      	add	r1, sp, #12
    107e:	0028      	movs	r0, r5
    1080:	4c1a      	ldr	r4, [pc, #104]	; (10ec <m2m_wifi_cb+0x2e4>)
    1082:	47a0      	blx	r4
    1084:	2800      	cmp	r0, #0
    1086:	d000      	beq.n	108a <m2m_wifi_cb+0x282>
    1088:	e6f9      	b.n	e7e <m2m_wifi_cb+0x76>
			if (gpfAppWifiCb)
    108a:	4b19      	ldr	r3, [pc, #100]	; (10f0 <m2m_wifi_cb+0x2e8>)
    108c:	681b      	ldr	r3, [r3, #0]
    108e:	2b00      	cmp	r3, #0
    1090:	d100      	bne.n	1094 <m2m_wifi_cb+0x28c>
    1092:	e6f4      	b.n	e7e <m2m_wifi_cb+0x76>
				gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
    1094:	a903      	add	r1, sp, #12
    1096:	3027      	adds	r0, #39	; 0x27
    1098:	4798      	blx	r3
    109a:	e6f0      	b.n	e7e <m2m_wifi_cb+0x76>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    109c:	2300      	movs	r3, #0
    109e:	2208      	movs	r2, #8
    10a0:	a903      	add	r1, sp, #12
    10a2:	0028      	movs	r0, r5
    10a4:	4c11      	ldr	r4, [pc, #68]	; (10ec <m2m_wifi_cb+0x2e4>)
    10a6:	47a0      	blx	r4
    10a8:	2800      	cmp	r0, #0
    10aa:	d000      	beq.n	10ae <m2m_wifi_cb+0x2a6>
    10ac:	e6e7      	b.n	e7e <m2m_wifi_cb+0x76>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    10ae:	ab03      	add	r3, sp, #12
    10b0:	889a      	ldrh	r2, [r3, #4]
    10b2:	0028      	movs	r0, r5
    10b4:	3008      	adds	r0, #8
    10b6:	2301      	movs	r3, #1
    10b8:	9903      	ldr	r1, [sp, #12]
    10ba:	4c0c      	ldr	r4, [pc, #48]	; (10ec <m2m_wifi_cb+0x2e4>)
    10bc:	47a0      	blx	r4
    10be:	2800      	cmp	r0, #0
    10c0:	d000      	beq.n	10c4 <m2m_wifi_cb+0x2bc>
    10c2:	e6dc      	b.n	e7e <m2m_wifi_cb+0x76>
				if(gpfAppWifiCb)
    10c4:	4b0a      	ldr	r3, [pc, #40]	; (10f0 <m2m_wifi_cb+0x2e8>)
    10c6:	681b      	ldr	r3, [r3, #0]
    10c8:	2b00      	cmp	r3, #0
    10ca:	d100      	bne.n	10ce <m2m_wifi_cb+0x2c6>
    10cc:	e6d7      	b.n	e7e <m2m_wifi_cb+0x76>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    10ce:	a903      	add	r1, sp, #12
    10d0:	3020      	adds	r0, #32
    10d2:	4798      	blx	r3
    10d4:	e6d3      	b.n	e7e <m2m_wifi_cb+0x76>
    10d6:	46c0      	nop			; (mov r8, r8)
    10d8:	0001d160 	.word	0x0001d160
    10dc:	0001cd6c 	.word	0x0001cd6c
    10e0:	000182cd 	.word	0x000182cd
    10e4:	0001d274 	.word	0x0001d274
    10e8:	000182f1 	.word	0x000182f1
    10ec:	00000c61 	.word	0x00000c61
    10f0:	20000aa8 	.word	0x20000aa8
    10f4:	000004cd 	.word	0x000004cd
    10f8:	0001d0f0 	.word	0x0001d0f0
    10fc:	0001d254 	.word	0x0001d254
    1100:	20000aae 	.word	0x20000aae
    1104:	20000aac 	.word	0x20000aac

00001108 <m2m_wifi_init_hold>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init_hold()
{
    1108:	b510      	push	{r4, lr}
	sint8 ret = M2M_ERR_FAIL;

	/* Apply device specific initialization. */
	ret = nm_drv_init_hold();
    110a:	4b04      	ldr	r3, [pc, #16]	; (111c <m2m_wifi_init_hold+0x14>)
    110c:	4798      	blx	r3

    if(M2M_SUCCESS == ret) {
    110e:	2800      	cmp	r0, #0
    1110:	d102      	bne.n	1118 <m2m_wifi_init_hold+0x10>
        gu8WifiState = WIFI_STATE_INIT;
    1112:	2201      	movs	r2, #1
    1114:	4b02      	ldr	r3, [pc, #8]	; (1120 <m2m_wifi_init_hold+0x18>)
    1116:	701a      	strb	r2, [r3, #0]
	}

	return ret;
}
    1118:	bd10      	pop	{r4, pc}
    111a:	46c0      	nop			; (mov r8, r8)
    111c:	00001b01 	.word	0x00001b01
    1120:	20000aad 	.word	0x20000aad

00001124 <m2m_wifi_init_start>:

sint8 m2m_wifi_init_start(tstrWifiInitParam * pWifiInitParam)
{
    1124:	b5f0      	push	{r4, r5, r6, r7, lr}
    1126:	b08f      	sub	sp, #60	; 0x3c
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    1128:	2201      	movs	r2, #1
    112a:	230f      	movs	r3, #15
    112c:	446b      	add	r3, sp
    112e:	701a      	strb	r2, [r3, #0]
	
	if(pWifiInitParam == NULL) {
    1130:	2800      	cmp	r0, #0
    1132:	d067      	beq.n	1204 <m2m_wifi_init_start+0xe0>
		ret = M2M_ERR_FAIL;
		goto _EXIT0;
	}
	
	gpfAppWifiCb = pWifiInitParam->pfAppWifiCb;
    1134:	6802      	ldr	r2, [r0, #0]
    1136:	4b35      	ldr	r3, [pc, #212]	; (120c <m2m_wifi_init_start+0xe8>)
    1138:	601a      	str	r2, [r3, #0]
    gu16ethRcvBufSize = pWifiInitParam->strEthInitParam.u16ethRcvBufSize;
	if (pWifiInitParam->strEthInitParam.u8EthernetEnable)		
		u8WifiMode = M2M_WIFI_MODE_ETHERNET;
#endif /* ETH_MODE */

	gu8scanInProgress = 0;
    113a:	2200      	movs	r2, #0
    113c:	4b34      	ldr	r3, [pc, #208]	; (1210 <m2m_wifi_init_start+0xec>)
    113e:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init_start(&u8WifiMode);
    1140:	200f      	movs	r0, #15
    1142:	4468      	add	r0, sp
    1144:	4b33      	ldr	r3, [pc, #204]	; (1214 <m2m_wifi_init_start+0xf0>)
    1146:	4798      	blx	r3
    1148:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    114a:	d002      	beq.n	1152 <m2m_wifi_init_start+0x2e>
    gu8WifiState = WIFI_STATE_DEINIT;
	nm_drv_deinit(NULL);
_EXIT0:

	return ret;
}
    114c:	0020      	movs	r0, r4
    114e:	b00f      	add	sp, #60	; 0x3c
    1150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gu8WifiState = WIFI_STATE_START;
    1152:	2202      	movs	r2, #2
    1154:	4b30      	ldr	r3, [pc, #192]	; (1218 <m2m_wifi_init_start+0xf4>)
    1156:	701a      	strb	r2, [r3, #0]
	ret = hif_init(NULL);
    1158:	2000      	movs	r0, #0
    115a:	4b30      	ldr	r3, [pc, #192]	; (121c <m2m_wifi_init_start+0xf8>)
    115c:	4798      	blx	r3
    115e:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    1160:	d149      	bne.n	11f6 <m2m_wifi_init_start+0xd2>
	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    1162:	492f      	ldr	r1, [pc, #188]	; (1220 <m2m_wifi_init_start+0xfc>)
    1164:	2001      	movs	r0, #1
    1166:	4b2f      	ldr	r3, [pc, #188]	; (1224 <m2m_wifi_init_start+0x100>)
    1168:	4798      	blx	r3
	ret = nm_get_firmware_full_info(&strtmp);
    116a:	ae04      	add	r6, sp, #16
    116c:	0030      	movs	r0, r6
    116e:	4b2e      	ldr	r3, [pc, #184]	; (1228 <m2m_wifi_init_start+0x104>)
    1170:	4798      	blx	r3
    1172:	0004      	movs	r4, r0
	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
    1174:	482d      	ldr	r0, [pc, #180]	; (122c <m2m_wifi_init_start+0x108>)
    1176:	4d2e      	ldr	r5, [pc, #184]	; (1230 <m2m_wifi_init_start+0x10c>)
    1178:	47a8      	blx	r5
    117a:	79b3      	ldrb	r3, [r6, #6]
    117c:	7972      	ldrb	r2, [r6, #5]
    117e:	7931      	ldrb	r1, [r6, #4]
    1180:	8c30      	ldrh	r0, [r6, #32]
    1182:	9000      	str	r0, [sp, #0]
    1184:	482b      	ldr	r0, [pc, #172]	; (1234 <m2m_wifi_init_start+0x110>)
    1186:	47a8      	blx	r5
    1188:	200d      	movs	r0, #13
    118a:	4f2b      	ldr	r7, [pc, #172]	; (1238 <m2m_wifi_init_start+0x114>)
    118c:	47b8      	blx	r7
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
    118e:	4827      	ldr	r0, [pc, #156]	; (122c <m2m_wifi_init_start+0x108>)
    1190:	47a8      	blx	r5
    1192:	2226      	movs	r2, #38	; 0x26
    1194:	446a      	add	r2, sp
    1196:	211a      	movs	r1, #26
    1198:	4469      	add	r1, sp
    119a:	4828      	ldr	r0, [pc, #160]	; (123c <m2m_wifi_init_start+0x118>)
    119c:	47a8      	blx	r5
    119e:	200d      	movs	r0, #13
    11a0:	47b8      	blx	r7
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    11a2:	4822      	ldr	r0, [pc, #136]	; (122c <m2m_wifi_init_start+0x108>)
    11a4:	47a8      	blx	r5
    11a6:	7a73      	ldrb	r3, [r6, #9]
    11a8:	7a32      	ldrb	r2, [r6, #8]
    11aa:	79f1      	ldrb	r1, [r6, #7]
    11ac:	4824      	ldr	r0, [pc, #144]	; (1240 <m2m_wifi_init_start+0x11c>)
    11ae:	47a8      	blx	r5
    11b0:	200d      	movs	r0, #13
    11b2:	47b8      	blx	r7
	M2M_INFO("Driver ver: %u.%u.%u \n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
    11b4:	481d      	ldr	r0, [pc, #116]	; (122c <m2m_wifi_init_start+0x108>)
    11b6:	47a8      	blx	r5
    11b8:	2301      	movs	r3, #1
    11ba:	2206      	movs	r2, #6
    11bc:	2113      	movs	r1, #19
    11be:	4821      	ldr	r0, [pc, #132]	; (1244 <m2m_wifi_init_start+0x120>)
    11c0:	47a8      	blx	r5
    11c2:	200d      	movs	r0, #13
    11c4:	47b8      	blx	r7
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
    11c6:	4819      	ldr	r0, [pc, #100]	; (122c <m2m_wifi_init_start+0x108>)
    11c8:	47a8      	blx	r5
    11ca:	4a1f      	ldr	r2, [pc, #124]	; (1248 <m2m_wifi_init_start+0x124>)
    11cc:	491f      	ldr	r1, [pc, #124]	; (124c <m2m_wifi_init_start+0x128>)
    11ce:	4820      	ldr	r0, [pc, #128]	; (1250 <m2m_wifi_init_start+0x12c>)
    11d0:	47a8      	blx	r5
    11d2:	200d      	movs	r0, #13
    11d4:	47b8      	blx	r7
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    11d6:	0023      	movs	r3, r4
    11d8:	330d      	adds	r3, #13
    11da:	d1b7      	bne.n	114c <m2m_wifi_init_start+0x28>
		M2M_ERR("Mismatch Firmware Version\n");
    11dc:	22f0      	movs	r2, #240	; 0xf0
    11de:	0052      	lsls	r2, r2, #1
    11e0:	491c      	ldr	r1, [pc, #112]	; (1254 <m2m_wifi_init_start+0x130>)
    11e2:	481d      	ldr	r0, [pc, #116]	; (1258 <m2m_wifi_init_start+0x134>)
    11e4:	4b12      	ldr	r3, [pc, #72]	; (1230 <m2m_wifi_init_start+0x10c>)
    11e6:	4798      	blx	r3
    11e8:	481c      	ldr	r0, [pc, #112]	; (125c <m2m_wifi_init_start+0x138>)
    11ea:	4b1d      	ldr	r3, [pc, #116]	; (1260 <m2m_wifi_init_start+0x13c>)
    11ec:	4798      	blx	r3
    11ee:	200d      	movs	r0, #13
    11f0:	4b11      	ldr	r3, [pc, #68]	; (1238 <m2m_wifi_init_start+0x114>)
    11f2:	4798      	blx	r3
    11f4:	e7aa      	b.n	114c <m2m_wifi_init_start+0x28>
    gu8WifiState = WIFI_STATE_DEINIT;
    11f6:	2200      	movs	r2, #0
    11f8:	4b07      	ldr	r3, [pc, #28]	; (1218 <m2m_wifi_init_start+0xf4>)
    11fa:	701a      	strb	r2, [r3, #0]
	nm_drv_deinit(NULL);
    11fc:	2000      	movs	r0, #0
    11fe:	4b19      	ldr	r3, [pc, #100]	; (1264 <m2m_wifi_init_start+0x140>)
    1200:	4798      	blx	r3
    1202:	e7a3      	b.n	114c <m2m_wifi_init_start+0x28>
		ret = M2M_ERR_FAIL;
    1204:	240c      	movs	r4, #12
    1206:	4264      	negs	r4, r4
    1208:	e7a0      	b.n	114c <m2m_wifi_init_start+0x28>
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	20000aa8 	.word	0x20000aa8
    1210:	20000aae 	.word	0x20000aae
    1214:	00001b71 	.word	0x00001b71
    1218:	20000aad 	.word	0x20000aad
    121c:	00000dd1 	.word	0x00000dd1
    1220:	00000e09 	.word	0x00000e09
    1224:	00000d4d 	.word	0x00000d4d
    1228:	00001a21 	.word	0x00001a21
    122c:	0001d0f0 	.word	0x0001d0f0
    1230:	000182cd 	.word	0x000182cd
    1234:	0001d288 	.word	0x0001d288
    1238:	000182f1 	.word	0x000182f1
    123c:	0001d2b0 	.word	0x0001d2b0
    1240:	0001d2cc 	.word	0x0001d2cc
    1244:	0001d2f0 	.word	0x0001d2f0
    1248:	0001d308 	.word	0x0001d308
    124c:	0001d314 	.word	0x0001d314
    1250:	0001d320 	.word	0x0001d320
    1254:	0001d188 	.word	0x0001d188
    1258:	0001cd6c 	.word	0x0001cd6c
    125c:	0001d338 	.word	0x0001d338
    1260:	000183a5 	.word	0x000183a5
    1264:	00001bf9 	.word	0x00001bf9

00001268 <m2m_wifi_init>:

sint8 m2m_wifi_init(tstrWifiInitParam * pWifiInitParam)
{
    1268:	b510      	push	{r4, lr}
    126a:	0004      	movs	r4, r0
	sint8 ret = M2M_SUCCESS;

	ret = m2m_wifi_init_hold();
    126c:	4b04      	ldr	r3, [pc, #16]	; (1280 <m2m_wifi_init+0x18>)
    126e:	4798      	blx	r3
	if (ret == M2M_SUCCESS)
    1270:	2800      	cmp	r0, #0
    1272:	d000      	beq.n	1276 <m2m_wifi_init+0xe>
{
		ret = m2m_wifi_init_start(pWifiInitParam);
	}
	return ret;
}
    1274:	bd10      	pop	{r4, pc}
		ret = m2m_wifi_init_start(pWifiInitParam);
    1276:	0020      	movs	r0, r4
    1278:	4b02      	ldr	r3, [pc, #8]	; (1284 <m2m_wifi_init+0x1c>)
    127a:	4798      	blx	r3
    127c:	e7fa      	b.n	1274 <m2m_wifi_init+0xc>
    127e:	46c0      	nop			; (mov r8, r8)
    1280:	00001109 	.word	0x00001109
    1284:	00001125 	.word	0x00001125

00001288 <m2m_wifi_deinit>:

sint8  m2m_wifi_deinit(void * arg)
{
    1288:	b510      	push	{r4, lr}
    gu8WifiState = WIFI_STATE_DEINIT;
    128a:	2200      	movs	r2, #0
    128c:	4b04      	ldr	r3, [pc, #16]	; (12a0 <m2m_wifi_deinit+0x18>)
    128e:	701a      	strb	r2, [r3, #0]
	hif_deinit(NULL);
    1290:	2000      	movs	r0, #0
    1292:	4b04      	ldr	r3, [pc, #16]	; (12a4 <m2m_wifi_deinit+0x1c>)
    1294:	4798      	blx	r3

	nm_drv_deinit(NULL);
    1296:	2000      	movs	r0, #0
    1298:	4b03      	ldr	r3, [pc, #12]	; (12a8 <m2m_wifi_deinit+0x20>)
    129a:	4798      	blx	r3

	return M2M_SUCCESS;
}
    129c:	2000      	movs	r0, #0
    129e:	bd10      	pop	{r4, pc}
    12a0:	20000aad 	.word	0x20000aad
    12a4:	000005c5 	.word	0x000005c5
    12a8:	00001bf9 	.word	0x00001bf9

000012ac <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
    12ac:	b510      	push	{r4, lr}
	return hif_handle_isr();
    12ae:	4b01      	ldr	r3, [pc, #4]	; (12b4 <m2m_wifi_handle_events+0x8>)
    12b0:	4798      	blx	r3
}
    12b2:	bd10      	pop	{r4, pc}
    12b4:	0000083d 	.word	0x0000083d

000012b8 <m2m_wifi_set_scan_options>:
	}
	return ret;
}

sint8 m2m_wifi_set_scan_options(tstrM2MScanOption* ptstrM2MScanOption)
{
    12b8:	b530      	push	{r4, r5, lr}
    12ba:	b085      	sub	sp, #20
    12bc:	1e04      	subs	r4, r0, #0
	if(ptstrM2MScanOption == NULL)
    12be:	d01a      	beq.n	12f6 <m2m_wifi_set_scan_options+0x3e>
	if(ptstrM2MScanOption->u8NumOfSlot == 0)
    12c0:	7803      	ldrb	r3, [r0, #0]
    12c2:	2b00      	cmp	r3, #0
    12c4:	d024      	beq.n	1310 <m2m_wifi_set_scan_options+0x58>
	if(ptstrM2MScanOption->u8SlotTime < 10 || ptstrM2MScanOption->u8SlotTime > 250)
    12c6:	7843      	ldrb	r3, [r0, #1]
    12c8:	3b0a      	subs	r3, #10
    12ca:	b2db      	uxtb	r3, r3
    12cc:	2bf0      	cmp	r3, #240	; 0xf0
    12ce:	d82c      	bhi.n	132a <m2m_wifi_set_scan_options+0x72>
	if((ptstrM2MScanOption->u8ProbesPerSlot == 0)||(ptstrM2MScanOption->u8ProbesPerSlot > M2M_SCAN_DEFAULT_NUM_PROBE))
    12d0:	7883      	ldrb	r3, [r0, #2]
    12d2:	3b01      	subs	r3, #1
    12d4:	2b01      	cmp	r3, #1
    12d6:	d835      	bhi.n	1344 <m2m_wifi_set_scan_options+0x8c>
	if(ptstrM2MScanOption->s8RssiThresh >= 0)
    12d8:	78c3      	ldrb	r3, [r0, #3]
    12da:	2b7f      	cmp	r3, #127	; 0x7f
    12dc:	d941      	bls.n	1362 <m2m_wifi_set_scan_options+0xaa>
	sint8	s8Ret = M2M_ERR_FAIL;
	if(m2m_validate_scan_options (ptstrM2MScanOption) == M2M_SUCCESS)
	{
		s8Ret =  hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_SCAN_OPTION, (uint8*)ptstrM2MScanOption, sizeof(tstrM2MScanOption),NULL, 0,0);
    12de:	2300      	movs	r3, #0
    12e0:	9302      	str	r3, [sp, #8]
    12e2:	9301      	str	r3, [sp, #4]
    12e4:	9300      	str	r3, [sp, #0]
    12e6:	3304      	adds	r3, #4
    12e8:	0002      	movs	r2, r0
    12ea:	2114      	movs	r1, #20
    12ec:	2001      	movs	r0, #1
    12ee:	4c24      	ldr	r4, [pc, #144]	; (1380 <m2m_wifi_set_scan_options+0xc8>)
    12f0:	47a0      	blx	r4
	}
	return s8Ret;
}
    12f2:	b005      	add	sp, #20
    12f4:	bd30      	pop	{r4, r5, pc}
		M2M_ERR("INVALID POINTER\n");
    12f6:	22be      	movs	r2, #190	; 0xbe
    12f8:	0052      	lsls	r2, r2, #1
    12fa:	4922      	ldr	r1, [pc, #136]	; (1384 <m2m_wifi_set_scan_options+0xcc>)
    12fc:	4822      	ldr	r0, [pc, #136]	; (1388 <m2m_wifi_set_scan_options+0xd0>)
    12fe:	4b23      	ldr	r3, [pc, #140]	; (138c <m2m_wifi_set_scan_options+0xd4>)
    1300:	4798      	blx	r3
    1302:	4823      	ldr	r0, [pc, #140]	; (1390 <m2m_wifi_set_scan_options+0xd8>)
    1304:	4b23      	ldr	r3, [pc, #140]	; (1394 <m2m_wifi_set_scan_options+0xdc>)
    1306:	4798      	blx	r3
    1308:	200d      	movs	r0, #13
    130a:	4b23      	ldr	r3, [pc, #140]	; (1398 <m2m_wifi_set_scan_options+0xe0>)
    130c:	4798      	blx	r3
    130e:	e025      	b.n	135c <m2m_wifi_set_scan_options+0xa4>
		M2M_ERR("INVALID No of scan slots! %d\n",ptstrM2MScanOption->u8NumOfSlot);
    1310:	2284      	movs	r2, #132	; 0x84
    1312:	32ff      	adds	r2, #255	; 0xff
    1314:	491b      	ldr	r1, [pc, #108]	; (1384 <m2m_wifi_set_scan_options+0xcc>)
    1316:	481c      	ldr	r0, [pc, #112]	; (1388 <m2m_wifi_set_scan_options+0xd0>)
    1318:	4d1c      	ldr	r5, [pc, #112]	; (138c <m2m_wifi_set_scan_options+0xd4>)
    131a:	47a8      	blx	r5
    131c:	7821      	ldrb	r1, [r4, #0]
    131e:	481f      	ldr	r0, [pc, #124]	; (139c <m2m_wifi_set_scan_options+0xe4>)
    1320:	47a8      	blx	r5
    1322:	200d      	movs	r0, #13
    1324:	4b1c      	ldr	r3, [pc, #112]	; (1398 <m2m_wifi_set_scan_options+0xe0>)
    1326:	4798      	blx	r3
    1328:	e018      	b.n	135c <m2m_wifi_set_scan_options+0xa4>
		M2M_ERR("INVALID scan slot time! %d\n",ptstrM2MScanOption->u8SlotTime);
    132a:	22c5      	movs	r2, #197	; 0xc5
    132c:	0052      	lsls	r2, r2, #1
    132e:	4915      	ldr	r1, [pc, #84]	; (1384 <m2m_wifi_set_scan_options+0xcc>)
    1330:	4815      	ldr	r0, [pc, #84]	; (1388 <m2m_wifi_set_scan_options+0xd0>)
    1332:	4d16      	ldr	r5, [pc, #88]	; (138c <m2m_wifi_set_scan_options+0xd4>)
    1334:	47a8      	blx	r5
    1336:	7861      	ldrb	r1, [r4, #1]
    1338:	4819      	ldr	r0, [pc, #100]	; (13a0 <m2m_wifi_set_scan_options+0xe8>)
    133a:	47a8      	blx	r5
    133c:	200d      	movs	r0, #13
    133e:	4b16      	ldr	r3, [pc, #88]	; (1398 <m2m_wifi_set_scan_options+0xe0>)
    1340:	4798      	blx	r3
    1342:	e00b      	b.n	135c <m2m_wifi_set_scan_options+0xa4>
		M2M_ERR("INVALID No of probe requests per scan slot %d\n",ptstrM2MScanOption->u8ProbesPerSlot);
    1344:	2292      	movs	r2, #146	; 0x92
    1346:	32ff      	adds	r2, #255	; 0xff
    1348:	490e      	ldr	r1, [pc, #56]	; (1384 <m2m_wifi_set_scan_options+0xcc>)
    134a:	480f      	ldr	r0, [pc, #60]	; (1388 <m2m_wifi_set_scan_options+0xd0>)
    134c:	4d0f      	ldr	r5, [pc, #60]	; (138c <m2m_wifi_set_scan_options+0xd4>)
    134e:	47a8      	blx	r5
    1350:	78a1      	ldrb	r1, [r4, #2]
    1352:	4814      	ldr	r0, [pc, #80]	; (13a4 <m2m_wifi_set_scan_options+0xec>)
    1354:	47a8      	blx	r5
    1356:	200d      	movs	r0, #13
    1358:	4b0f      	ldr	r3, [pc, #60]	; (1398 <m2m_wifi_set_scan_options+0xe0>)
    135a:	4798      	blx	r3
	sint8	s8Ret = M2M_ERR_FAIL;
    135c:	200c      	movs	r0, #12
    135e:	4240      	negs	r0, r0
    1360:	e7c7      	b.n	12f2 <m2m_wifi_set_scan_options+0x3a>
		M2M_ERR("INVALID RSSI threshold %d \n",ptstrM2MScanOption->s8RssiThresh);
    1362:	22cc      	movs	r2, #204	; 0xcc
    1364:	0052      	lsls	r2, r2, #1
    1366:	4907      	ldr	r1, [pc, #28]	; (1384 <m2m_wifi_set_scan_options+0xcc>)
    1368:	4807      	ldr	r0, [pc, #28]	; (1388 <m2m_wifi_set_scan_options+0xd0>)
    136a:	4d08      	ldr	r5, [pc, #32]	; (138c <m2m_wifi_set_scan_options+0xd4>)
    136c:	47a8      	blx	r5
    136e:	2103      	movs	r1, #3
    1370:	5661      	ldrsb	r1, [r4, r1]
    1372:	480d      	ldr	r0, [pc, #52]	; (13a8 <m2m_wifi_set_scan_options+0xf0>)
    1374:	47a8      	blx	r5
    1376:	200d      	movs	r0, #13
    1378:	4b07      	ldr	r3, [pc, #28]	; (1398 <m2m_wifi_set_scan_options+0xe0>)
    137a:	4798      	blx	r3
    137c:	e7ee      	b.n	135c <m2m_wifi_set_scan_options+0xa4>
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	000005e9 	.word	0x000005e9
    1384:	0001d16c 	.word	0x0001d16c
    1388:	0001cd6c 	.word	0x0001cd6c
    138c:	000182cd 	.word	0x000182cd
    1390:	0001d19c 	.word	0x0001d19c
    1394:	000183a5 	.word	0x000183a5
    1398:	000182f1 	.word	0x000182f1
    139c:	0001d354 	.word	0x0001d354
    13a0:	0001d374 	.word	0x0001d374
    13a4:	0001d390 	.word	0x0001d390
    13a8:	0001d3c0 	.word	0x0001d3c0

000013ac <m2m_wifi_request_scan>:
	strScanRegion.u16ScanRegion = ScanRegion;
	s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_SCAN_REGION, (uint8*)&strScanRegion, sizeof(tstrM2MScanRegion),NULL, 0,0);
	return s8Ret;
}
sint8 m2m_wifi_request_scan(uint8 ch)
{
    13ac:	b510      	push	{r4, lr}
    13ae:	b086      	sub	sp, #24
	sint8	s8Ret = M2M_SUCCESS;

	if(!gu8scanInProgress)
    13b0:	4b10      	ldr	r3, [pc, #64]	; (13f4 <m2m_wifi_request_scan+0x48>)
    13b2:	781b      	ldrb	r3, [r3, #0]
    13b4:	2b00      	cmp	r3, #0
    13b6:	d116      	bne.n	13e6 <m2m_wifi_request_scan+0x3a>
	{
		if(((ch >= M2M_WIFI_CH_1) && (ch <= M2M_WIFI_CH_14)) || (ch == M2M_WIFI_CH_ALL))
    13b8:	1e43      	subs	r3, r0, #1
    13ba:	2b0d      	cmp	r3, #13
    13bc:	d901      	bls.n	13c2 <m2m_wifi_request_scan+0x16>
    13be:	28ff      	cmp	r0, #255	; 0xff
    13c0:	d114      	bne.n	13ec <m2m_wifi_request_scan+0x40>
		{
			tstrM2MScan strtmp;
			strtmp.u8ChNum = ch;
    13c2:	aa05      	add	r2, sp, #20
    13c4:	7010      	strb	r0, [r2, #0]
			s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN, (uint8*)&strtmp, sizeof(tstrM2MScan),NULL, 0,0);
    13c6:	2300      	movs	r3, #0
    13c8:	9302      	str	r3, [sp, #8]
    13ca:	9301      	str	r3, [sp, #4]
    13cc:	9300      	str	r3, [sp, #0]
    13ce:	3304      	adds	r3, #4
    13d0:	2110      	movs	r1, #16
    13d2:	2001      	movs	r0, #1
    13d4:	4c08      	ldr	r4, [pc, #32]	; (13f8 <m2m_wifi_request_scan+0x4c>)
    13d6:	47a0      	blx	r4
			if(s8Ret == M2M_SUCCESS)
    13d8:	2800      	cmp	r0, #0
    13da:	d102      	bne.n	13e2 <m2m_wifi_request_scan+0x36>
			{
				gu8scanInProgress = 1;
    13dc:	2201      	movs	r2, #1
    13de:	4b05      	ldr	r3, [pc, #20]	; (13f4 <m2m_wifi_request_scan+0x48>)
    13e0:	701a      	strb	r2, [r3, #0]
	else
	{
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
	}
	return s8Ret;
}
    13e2:	b006      	add	sp, #24
    13e4:	bd10      	pop	{r4, pc}
		s8Ret = M2M_ERR_SCAN_IN_PROGRESS;
    13e6:	200e      	movs	r0, #14
    13e8:	4240      	negs	r0, r0
    13ea:	e7fa      	b.n	13e2 <m2m_wifi_request_scan+0x36>
			s8Ret = M2M_ERR_INVALID_ARG;
    13ec:	200f      	movs	r0, #15
    13ee:	4240      	negs	r0, r0
    13f0:	e7f7      	b.n	13e2 <m2m_wifi_request_scan+0x36>
    13f2:	46c0      	nop			; (mov r8, r8)
    13f4:	20000aae 	.word	0x20000aae
    13f8:	000005e9 	.word	0x000005e9

000013fc <m2m_wifi_req_scan_result>:
			 which mean if large delay occur between the scan request and the scan result request, 
			 the result will not be up-to-date
*/

sint8 m2m_wifi_req_scan_result(uint8 index)
{
    13fc:	b510      	push	{r4, lr}
    13fe:	b086      	sub	sp, #24
	sint8 ret = M2M_SUCCESS;
	tstrM2mReqScanResult strReqScanRlt;
	strReqScanRlt.u8Index = index;
    1400:	aa05      	add	r2, sp, #20
    1402:	7010      	strb	r0, [r2, #0]
	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8*) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
    1404:	2300      	movs	r3, #0
    1406:	9302      	str	r3, [sp, #8]
    1408:	9301      	str	r3, [sp, #4]
    140a:	9300      	str	r3, [sp, #0]
    140c:	3304      	adds	r3, #4
    140e:	2112      	movs	r1, #18
    1410:	2001      	movs	r0, #1
    1412:	4c02      	ldr	r4, [pc, #8]	; (141c <m2m_wifi_req_scan_result+0x20>)
    1414:	47a0      	blx	r4
	return ret;
}
    1416:	b006      	add	sp, #24
    1418:	bd10      	pop	{r4, pc}
    141a:	46c0      	nop			; (mov r8, r8)
    141c:	000005e9 	.word	0x000005e9

00001420 <m2m_wifi_get_num_ap_found>:
			 calling that function in any other place will return undefined/undated numbers.
			 Function used only in STA mode only.
*/
uint8 m2m_wifi_get_num_ap_found(void)
{
	return gu8ChNum;
    1420:	4b01      	ldr	r3, [pc, #4]	; (1428 <m2m_wifi_get_num_ap_found+0x8>)
    1422:	7818      	ldrb	r0, [r3, #0]
    1424:	b2c0      	uxtb	r0, r0
}
    1426:	4770      	bx	lr
    1428:	20000aac 	.word	0x20000aac

0000142c <chip_apply_conf>:

#define TIMEOUT						(0x2000ul)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
    142c:	b5f0      	push	{r4, r5, r6, r7, lr}
    142e:	b083      	sub	sp, #12
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
    1430:	2580      	movs	r5, #128	; 0x80
    1432:	006d      	lsls	r5, r5, #1
    1434:	4305      	orrs	r5, r0
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    1436:	24a5      	movs	r4, #165	; 0xa5
    1438:	0164      	lsls	r4, r4, #5
    143a:	4f08      	ldr	r7, [pc, #32]	; (145c <chip_apply_conf+0x30>)
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    143c:	4e08      	ldr	r6, [pc, #32]	; (1460 <chip_apply_conf+0x34>)
		nm_write_reg(rNMI_GP_REG_1, val32);
    143e:	0029      	movs	r1, r5
    1440:	0020      	movs	r0, r4
    1442:	47b8      	blx	r7
			uint32 reg = 0;
    1444:	2300      	movs	r3, #0
    1446:	9301      	str	r3, [sp, #4]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    1448:	a901      	add	r1, sp, #4
    144a:	0020      	movs	r0, r4
    144c:	47b0      	blx	r6
			if(ret == M2M_SUCCESS) {
    144e:	2800      	cmp	r0, #0
    1450:	d1f5      	bne.n	143e <chip_apply_conf+0x12>
				if(reg == val32)
    1452:	9b01      	ldr	r3, [sp, #4]
    1454:	429d      	cmp	r5, r3
    1456:	d1f2      	bne.n	143e <chip_apply_conf+0x12>
			break;
		}
	} while(1);

	return M2M_SUCCESS;
}
    1458:	b003      	add	sp, #12
    145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    145c:	00001945 	.word	0x00001945
    1460:	00001939 	.word	0x00001939

00001464 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
    1464:	b500      	push	{lr}
    1466:	b083      	sub	sp, #12
	uint32 reg = 0;
    1468:	2300      	movs	r3, #0
    146a:	9301      	str	r3, [sp, #4]
	sint8 ret = M2M_SUCCESS;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    146c:	a901      	add	r1, sp, #4
    146e:	4811      	ldr	r0, [pc, #68]	; (14b4 <enable_interrupts+0x50>)
    1470:	4b11      	ldr	r3, [pc, #68]	; (14b8 <enable_interrupts+0x54>)
    1472:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    1474:	2800      	cmp	r0, #0
    1476:	d001      	beq.n	147c <enable_interrupts+0x18>
	reg |= ((uint32) 1 << 16);
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
}
    1478:	b003      	add	sp, #12
    147a:	bd00      	pop	{pc}
	reg |= ((uint32) 1 << 8);
    147c:	2180      	movs	r1, #128	; 0x80
    147e:	0049      	lsls	r1, r1, #1
    1480:	9b01      	ldr	r3, [sp, #4]
    1482:	4319      	orrs	r1, r3
    1484:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    1486:	480b      	ldr	r0, [pc, #44]	; (14b4 <enable_interrupts+0x50>)
    1488:	4b0c      	ldr	r3, [pc, #48]	; (14bc <enable_interrupts+0x58>)
    148a:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    148c:	2800      	cmp	r0, #0
    148e:	d1f3      	bne.n	1478 <enable_interrupts+0x14>
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    1490:	a901      	add	r1, sp, #4
    1492:	20d0      	movs	r0, #208	; 0xd0
    1494:	0140      	lsls	r0, r0, #5
    1496:	4b08      	ldr	r3, [pc, #32]	; (14b8 <enable_interrupts+0x54>)
    1498:	4798      	blx	r3
	if (M2M_SUCCESS != ret) goto ERR1;
    149a:	2800      	cmp	r0, #0
    149c:	d1ec      	bne.n	1478 <enable_interrupts+0x14>
	reg |= ((uint32) 1 << 16);
    149e:	2180      	movs	r1, #128	; 0x80
    14a0:	0249      	lsls	r1, r1, #9
    14a2:	9b01      	ldr	r3, [sp, #4]
    14a4:	4319      	orrs	r1, r3
    14a6:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    14a8:	20d0      	movs	r0, #208	; 0xd0
    14aa:	0140      	lsls	r0, r0, #5
    14ac:	4b03      	ldr	r3, [pc, #12]	; (14bc <enable_interrupts+0x58>)
    14ae:	4798      	blx	r3
    14b0:	e7e2      	b.n	1478 <enable_interrupts+0x14>
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	00001408 	.word	0x00001408
    14b8:	00001939 	.word	0x00001939
    14bc:	00001945 	.word	0x00001945

000014c0 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
    14c0:	b510      	push	{r4, lr}
    14c2:	b082      	sub	sp, #8
	static uint32 chipid = 0;

	if (chipid == 0) {
    14c4:	4b28      	ldr	r3, [pc, #160]	; (1568 <nmi_get_chipid+0xa8>)
    14c6:	681c      	ldr	r4, [r3, #0]
    14c8:	2c00      	cmp	r4, #0
    14ca:	d004      	beq.n	14d6 <nmi_get_chipid+0x16>
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
		chipid |= 0x050000;
#endif /* PROBE_FLASH */
	}
	return chipid;
    14cc:	4b26      	ldr	r3, [pc, #152]	; (1568 <nmi_get_chipid+0xa8>)
    14ce:	681c      	ldr	r4, [r3, #0]
}
    14d0:	0020      	movs	r0, r4
    14d2:	b002      	add	sp, #8
    14d4:	bd10      	pop	{r4, pc}
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    14d6:	0019      	movs	r1, r3
    14d8:	2080      	movs	r0, #128	; 0x80
    14da:	0140      	lsls	r0, r0, #5
    14dc:	4b23      	ldr	r3, [pc, #140]	; (156c <nmi_get_chipid+0xac>)
    14de:	4798      	blx	r3
    14e0:	2800      	cmp	r0, #0
    14e2:	d003      	beq.n	14ec <nmi_get_chipid+0x2c>
			chipid = 0;
    14e4:	2200      	movs	r2, #0
    14e6:	4b20      	ldr	r3, [pc, #128]	; (1568 <nmi_get_chipid+0xa8>)
    14e8:	601a      	str	r2, [r3, #0]
			return 0;
    14ea:	e7f1      	b.n	14d0 <nmi_get_chipid+0x10>
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    14ec:	a901      	add	r1, sp, #4
    14ee:	4820      	ldr	r0, [pc, #128]	; (1570 <nmi_get_chipid+0xb0>)
    14f0:	4b1e      	ldr	r3, [pc, #120]	; (156c <nmi_get_chipid+0xac>)
    14f2:	4798      	blx	r3
    14f4:	2800      	cmp	r0, #0
    14f6:	d003      	beq.n	1500 <nmi_get_chipid+0x40>
			chipid = 0;
    14f8:	2200      	movs	r2, #0
    14fa:	4b1b      	ldr	r3, [pc, #108]	; (1568 <nmi_get_chipid+0xa8>)
    14fc:	601a      	str	r2, [r3, #0]
			return 0;
    14fe:	e7e7      	b.n	14d0 <nmi_get_chipid+0x10>
		if (chipid == 0x1002a0)  {
    1500:	4b19      	ldr	r3, [pc, #100]	; (1568 <nmi_get_chipid+0xa8>)
    1502:	681b      	ldr	r3, [r3, #0]
    1504:	4a1b      	ldr	r2, [pc, #108]	; (1574 <nmi_get_chipid+0xb4>)
    1506:	4293      	cmp	r3, r2
    1508:	d00e      	beq.n	1528 <nmi_get_chipid+0x68>
		} else if(chipid == 0x1002b0) {
    150a:	4a1b      	ldr	r2, [pc, #108]	; (1578 <nmi_get_chipid+0xb8>)
    150c:	4293      	cmp	r3, r2
    150e:	d012      	beq.n	1536 <nmi_get_chipid+0x76>
		}else if(chipid == 0x1000F0) { 
    1510:	4a1a      	ldr	r2, [pc, #104]	; (157c <nmi_get_chipid+0xbc>)
    1512:	4293      	cmp	r3, r2
    1514:	d01c      	beq.n	1550 <nmi_get_chipid+0x90>
		chipid |= 0x050000;
    1516:	4914      	ldr	r1, [pc, #80]	; (1568 <nmi_get_chipid+0xa8>)
		chipid &= ~(0x0f0000);
    1518:	4a19      	ldr	r2, [pc, #100]	; (1580 <nmi_get_chipid+0xc0>)
    151a:	680b      	ldr	r3, [r1, #0]
    151c:	401a      	ands	r2, r3
		chipid |= 0x050000;
    151e:	23a0      	movs	r3, #160	; 0xa0
    1520:	02db      	lsls	r3, r3, #11
    1522:	4313      	orrs	r3, r2
    1524:	600b      	str	r3, [r1, #0]
    1526:	e7d1      	b.n	14cc <nmi_get_chipid+0xc>
			if (rfrevid == 0x1) { /* 1002A0 */
    1528:	9b01      	ldr	r3, [sp, #4]
    152a:	2b01      	cmp	r3, #1
    152c:	d0f3      	beq.n	1516 <nmi_get_chipid+0x56>
				chipid = 0x1002a1;
    152e:	4a15      	ldr	r2, [pc, #84]	; (1584 <nmi_get_chipid+0xc4>)
    1530:	4b0d      	ldr	r3, [pc, #52]	; (1568 <nmi_get_chipid+0xa8>)
    1532:	601a      	str	r2, [r3, #0]
    1534:	e7ef      	b.n	1516 <nmi_get_chipid+0x56>
			if(rfrevid == 3) { /* 1002B0 */
    1536:	9b01      	ldr	r3, [sp, #4]
    1538:	2b03      	cmp	r3, #3
    153a:	d0ec      	beq.n	1516 <nmi_get_chipid+0x56>
			} else if(rfrevid == 4) { /* 1002B1 */
    153c:	2b04      	cmp	r3, #4
    153e:	d003      	beq.n	1548 <nmi_get_chipid+0x88>
				chipid = 0x1002b2;
    1540:	4a11      	ldr	r2, [pc, #68]	; (1588 <nmi_get_chipid+0xc8>)
    1542:	4b09      	ldr	r3, [pc, #36]	; (1568 <nmi_get_chipid+0xa8>)
    1544:	601a      	str	r2, [r3, #0]
    1546:	e7e6      	b.n	1516 <nmi_get_chipid+0x56>
				chipid = 0x1002b1;
    1548:	4a10      	ldr	r2, [pc, #64]	; (158c <nmi_get_chipid+0xcc>)
    154a:	4b07      	ldr	r3, [pc, #28]	; (1568 <nmi_get_chipid+0xa8>)
    154c:	601a      	str	r2, [r3, #0]
    154e:	e7e2      	b.n	1516 <nmi_get_chipid+0x56>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    1550:	4905      	ldr	r1, [pc, #20]	; (1568 <nmi_get_chipid+0xa8>)
    1552:	20ec      	movs	r0, #236	; 0xec
    1554:	0380      	lsls	r0, r0, #14
    1556:	4b05      	ldr	r3, [pc, #20]	; (156c <nmi_get_chipid+0xac>)
    1558:	4798      	blx	r3
    155a:	2800      	cmp	r0, #0
    155c:	d0db      	beq.n	1516 <nmi_get_chipid+0x56>
			chipid = 0;
    155e:	2200      	movs	r2, #0
    1560:	4b01      	ldr	r3, [pc, #4]	; (1568 <nmi_get_chipid+0xa8>)
    1562:	601a      	str	r2, [r3, #0]
			return 0;
    1564:	e7b4      	b.n	14d0 <nmi_get_chipid+0x10>
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	20000ab0 	.word	0x20000ab0
    156c:	00001939 	.word	0x00001939
    1570:	000013f4 	.word	0x000013f4
    1574:	001002a0 	.word	0x001002a0
    1578:	001002b0 	.word	0x001002b0
    157c:	001000f0 	.word	0x001000f0
    1580:	fff0ffff 	.word	0xfff0ffff
    1584:	001002a1 	.word	0x001002a1
    1588:	001002b2 	.word	0x001002b2
    158c:	001002b1 	.word	0x001002b1

00001590 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
    1590:	b530      	push	{r4, r5, lr}
    1592:	b083      	sub	sp, #12
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    1594:	4c16      	ldr	r4, [pc, #88]	; (15f0 <chip_sleep+0x60>)
		if(ret != M2M_SUCCESS) goto ERR1;
		if((reg & NBIT0) == 0) break;
    1596:	2501      	movs	r5, #1
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
    1598:	a901      	add	r1, sp, #4
    159a:	2010      	movs	r0, #16
    159c:	47a0      	blx	r4
		if(ret != M2M_SUCCESS) goto ERR1;
    159e:	2800      	cmp	r0, #0
    15a0:	d11c      	bne.n	15dc <chip_sleep+0x4c>
		if((reg & NBIT0) == 0) break;
    15a2:	9b01      	ldr	r3, [sp, #4]
    15a4:	422b      	tst	r3, r5
    15a6:	d1f7      	bne.n	1598 <chip_sleep+0x8>
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    15a8:	a901      	add	r1, sp, #4
    15aa:	3001      	adds	r0, #1
    15ac:	4b10      	ldr	r3, [pc, #64]	; (15f0 <chip_sleep+0x60>)
    15ae:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    15b0:	2800      	cmp	r0, #0
    15b2:	d113      	bne.n	15dc <chip_sleep+0x4c>
	if(reg & NBIT1)
    15b4:	9901      	ldr	r1, [sp, #4]
    15b6:	078b      	lsls	r3, r1, #30
    15b8:	d507      	bpl.n	15ca <chip_sleep+0x3a>
	{
		reg &=~NBIT1;
    15ba:	2302      	movs	r3, #2
    15bc:	4399      	bics	r1, r3
    15be:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
    15c0:	3001      	adds	r0, #1
    15c2:	4b0c      	ldr	r3, [pc, #48]	; (15f4 <chip_sleep+0x64>)
    15c4:	4798      	blx	r3
		if(ret != M2M_SUCCESS)goto ERR1;
    15c6:	2800      	cmp	r0, #0
    15c8:	d108      	bne.n	15dc <chip_sleep+0x4c>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    15ca:	a901      	add	r1, sp, #4
    15cc:	200b      	movs	r0, #11
    15ce:	4b08      	ldr	r3, [pc, #32]	; (15f0 <chip_sleep+0x60>)
    15d0:	4798      	blx	r3
	if(ret != M2M_SUCCESS)goto ERR1;
    15d2:	2800      	cmp	r0, #0
    15d4:	d102      	bne.n	15dc <chip_sleep+0x4c>
	if(reg & NBIT0)
    15d6:	9901      	ldr	r1, [sp, #4]
    15d8:	07cb      	lsls	r3, r1, #31
    15da:	d401      	bmi.n	15e0 <chip_sleep+0x50>
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
}
    15dc:	b003      	add	sp, #12
    15de:	bd30      	pop	{r4, r5, pc}
		reg &= ~NBIT0;
    15e0:	2301      	movs	r3, #1
    15e2:	4399      	bics	r1, r3
    15e4:	9101      	str	r1, [sp, #4]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
    15e6:	300b      	adds	r0, #11
    15e8:	4b02      	ldr	r3, [pc, #8]	; (15f4 <chip_sleep+0x64>)
    15ea:	4798      	blx	r3
    15ec:	e7f6      	b.n	15dc <chip_sleep+0x4c>
    15ee:	46c0      	nop			; (mov r8, r8)
    15f0:	00001939 	.word	0x00001939
    15f4:	00001945 	.word	0x00001945

000015f8 <chip_wake>:
sint8 chip_wake(void)
{
    15f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15fa:	b083      	sub	sp, #12
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
    15fc:	2300      	movs	r3, #0
    15fe:	9301      	str	r3, [sp, #4]
    1600:	9300      	str	r3, [sp, #0]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
    1602:	a901      	add	r1, sp, #4
    1604:	200b      	movs	r0, #11
    1606:	4b28      	ldr	r3, [pc, #160]	; (16a8 <chip_wake+0xb0>)
    1608:	4798      	blx	r3
    160a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    160c:	d130      	bne.n	1670 <chip_wake+0x78>
	
	if(!(reg & NBIT0))
    160e:	9901      	ldr	r1, [sp, #4]
    1610:	07cb      	lsls	r3, r1, #31
    1612:	d406      	bmi.n	1622 <chip_wake+0x2a>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
    1614:	2301      	movs	r3, #1
    1616:	4319      	orrs	r1, r3
    1618:	200b      	movs	r0, #11
    161a:	4b24      	ldr	r3, [pc, #144]	; (16ac <chip_wake+0xb4>)
    161c:	4798      	blx	r3
    161e:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    1620:	d126      	bne.n	1670 <chip_wake+0x78>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
    1622:	a901      	add	r1, sp, #4
    1624:	2001      	movs	r0, #1
    1626:	4b20      	ldr	r3, [pc, #128]	; (16a8 <chip_wake+0xb0>)
    1628:	4798      	blx	r3
    162a:	1e04      	subs	r4, r0, #0
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
    162c:	d120      	bne.n	1670 <chip_wake+0x78>
	/* Set bit 1 */
	if(!(reg & NBIT1))
    162e:	9901      	ldr	r1, [sp, #4]
    1630:	078b      	lsls	r3, r1, #30
    1632:	d520      	bpl.n	1676 <chip_wake+0x7e>
{
    1634:	2505      	movs	r5, #5
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    1636:	4f1c      	ldr	r7, [pc, #112]	; (16a8 <chip_wake+0xb0>)
			goto _WAKE_EXIT;
		}
		if(clk_status_reg & NBIT2) {
			break;
		}
		nm_bsp_sleep(2);
    1638:	4e1d      	ldr	r6, [pc, #116]	; (16b0 <chip_wake+0xb8>)
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
    163a:	4669      	mov	r1, sp
    163c:	200f      	movs	r0, #15
    163e:	47b8      	blx	r7
    1640:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) {
    1642:	d120      	bne.n	1686 <chip_wake+0x8e>
		if(clk_status_reg & NBIT2) {
    1644:	9b00      	ldr	r3, [sp, #0]
    1646:	075b      	lsls	r3, r3, #29
    1648:	d42b      	bmi.n	16a2 <chip_wake+0xaa>
		nm_bsp_sleep(2);
    164a:	2002      	movs	r0, #2
    164c:	47b0      	blx	r6
    164e:	3d01      	subs	r5, #1
		trials++;
		if(trials > WAKUP_TRAILS_TIMEOUT)
    1650:	2d00      	cmp	r5, #0
    1652:	d1f2      	bne.n	163a <chip_wake+0x42>
		{
			M2M_ERR("Failed to wake up the chip\n");
    1654:	22ad      	movs	r2, #173	; 0xad
    1656:	0052      	lsls	r2, r2, #1
    1658:	4916      	ldr	r1, [pc, #88]	; (16b4 <chip_wake+0xbc>)
    165a:	4817      	ldr	r0, [pc, #92]	; (16b8 <chip_wake+0xc0>)
    165c:	4b17      	ldr	r3, [pc, #92]	; (16bc <chip_wake+0xc4>)
    165e:	4798      	blx	r3
    1660:	4817      	ldr	r0, [pc, #92]	; (16c0 <chip_wake+0xc8>)
    1662:	4b18      	ldr	r3, [pc, #96]	; (16c4 <chip_wake+0xcc>)
    1664:	4798      	blx	r3
    1666:	200d      	movs	r0, #13
    1668:	4b17      	ldr	r3, [pc, #92]	; (16c8 <chip_wake+0xd0>)
    166a:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
    166c:	2404      	movs	r4, #4
    166e:	4264      	negs	r4, r4
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
	
_WAKE_EXIT:
	return ret;
}
    1670:	0020      	movs	r0, r4
    1672:	b003      	add	sp, #12
    1674:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
    1676:	2302      	movs	r3, #2
    1678:	4319      	orrs	r1, r3
    167a:	2001      	movs	r0, #1
    167c:	4b0b      	ldr	r3, [pc, #44]	; (16ac <chip_wake+0xb4>)
    167e:	4798      	blx	r3
    1680:	1e04      	subs	r4, r0, #0
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
    1682:	d0d7      	beq.n	1634 <chip_wake+0x3c>
    1684:	e7f4      	b.n	1670 <chip_wake+0x78>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
    1686:	22a8      	movs	r2, #168	; 0xa8
    1688:	0052      	lsls	r2, r2, #1
    168a:	490a      	ldr	r1, [pc, #40]	; (16b4 <chip_wake+0xbc>)
    168c:	480a      	ldr	r0, [pc, #40]	; (16b8 <chip_wake+0xc0>)
    168e:	4d0b      	ldr	r5, [pc, #44]	; (16bc <chip_wake+0xc4>)
    1690:	47a8      	blx	r5
    1692:	9a00      	ldr	r2, [sp, #0]
    1694:	0021      	movs	r1, r4
    1696:	480d      	ldr	r0, [pc, #52]	; (16cc <chip_wake+0xd4>)
    1698:	47a8      	blx	r5
    169a:	200d      	movs	r0, #13
    169c:	4b0a      	ldr	r3, [pc, #40]	; (16c8 <chip_wake+0xd0>)
    169e:	4798      	blx	r3
			goto _WAKE_EXIT;
    16a0:	e7e6      	b.n	1670 <chip_wake+0x78>
	nm_bus_reset();
    16a2:	4b0b      	ldr	r3, [pc, #44]	; (16d0 <chip_wake+0xd8>)
    16a4:	4798      	blx	r3
    16a6:	e7e3      	b.n	1670 <chip_wake+0x78>
    16a8:	00001939 	.word	0x00001939
    16ac:	00001945 	.word	0x00001945
    16b0:	00000141 	.word	0x00000141
    16b4:	0001d3dc 	.word	0x0001d3dc
    16b8:	0001cd6c 	.word	0x0001cd6c
    16bc:	000182cd 	.word	0x000182cd
    16c0:	0001d424 	.word	0x0001d424
    16c4:	000183a5 	.word	0x000183a5
    16c8:	000182f1 	.word	0x000182f1
    16cc:	0001d40c 	.word	0x0001d40c
    16d0:	00001921 	.word	0x00001921

000016d4 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    16d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16d6:	46c6      	mov	lr, r8
    16d8:	b500      	push	{lr}
    16da:	4680      	mov	r8, r0
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    16dc:	4d36      	ldr	r5, [pc, #216]	; (17b8 <wait_for_bootrom+0xe4>)
    16de:	4c37      	ldr	r4, [pc, #220]	; (17bc <wait_for_bootrom+0xe8>)
		if (reg & 0x80000000) {
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    16e0:	4e37      	ldr	r6, [pc, #220]	; (17c0 <wait_for_bootrom+0xec>)
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    16e2:	0028      	movs	r0, r5
    16e4:	47a0      	blx	r4
		if (reg & 0x80000000) {
    16e6:	2800      	cmp	r0, #0
    16e8:	db02      	blt.n	16f0 <wait_for_bootrom+0x1c>
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    16ea:	2001      	movs	r0, #1
    16ec:	47b0      	blx	r6
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    16ee:	e7f8      	b.n	16e2 <wait_for_bootrom+0xe>
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    16f0:	4834      	ldr	r0, [pc, #208]	; (17c4 <wait_for_bootrom+0xf0>)
    16f2:	4b32      	ldr	r3, [pc, #200]	; (17bc <wait_for_bootrom+0xe8>)
    16f4:	4798      	blx	r3
	reg &= 0x1;

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    16f6:	07c3      	lsls	r3, r0, #31
    16f8:	d546      	bpl.n	1788 <wait_for_bootrom+0xb4>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    16fa:	4643      	mov	r3, r8
    16fc:	2b02      	cmp	r3, #2
    16fe:	d026      	beq.n	174e <wait_for_bootrom+0x7a>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, NBIT20);
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    1700:	4643      	mov	r3, r8
    1702:	2b03      	cmp	r3, #3
    1704:	d02d      	beq.n	1762 <wait_for_bootrom+0x8e>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
		nm_write_reg(NMI_STATE_REG, 0);
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    1706:	4643      	mov	r3, r8
    1708:	2b04      	cmp	r3, #4
    170a:	d033      	beq.n	1774 <wait_for_bootrom+0xa0>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    170c:	492e      	ldr	r1, [pc, #184]	; (17c8 <wait_for_bootrom+0xf4>)
    170e:	482f      	ldr	r0, [pc, #188]	; (17cc <wait_for_bootrom+0xf8>)
    1710:	4b2f      	ldr	r3, [pc, #188]	; (17d0 <wait_for_bootrom+0xfc>)
    1712:	4798      	blx	r3
	uint32 u32GpReg1 = 0;
    1714:	2400      	movs	r4, #0
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
    1716:	4b2f      	ldr	r3, [pc, #188]	; (17d4 <wait_for_bootrom+0x100>)
    1718:	4798      	blx	r3
    171a:	0500      	lsls	r0, r0, #20
    171c:	0d00      	lsrs	r0, r0, #20
    171e:	4b2e      	ldr	r3, [pc, #184]	; (17d8 <wait_for_bootrom+0x104>)
    1720:	4298      	cmp	r0, r3
    1722:	d92d      	bls.n	1780 <wait_for_bootrom+0xac>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    1724:	2002      	movs	r0, #2
    1726:	4320      	orrs	r0, r4
    1728:	4b2c      	ldr	r3, [pc, #176]	; (17dc <wait_for_bootrom+0x108>)
    172a:	4798      	blx	r3
	} else {
		chip_apply_conf(u32GpReg1);
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
    172c:	482c      	ldr	r0, [pc, #176]	; (17e0 <wait_for_bootrom+0x10c>)
    172e:	4c2d      	ldr	r4, [pc, #180]	; (17e4 <wait_for_bootrom+0x110>)
    1730:	47a0      	blx	r4
    1732:	4925      	ldr	r1, [pc, #148]	; (17c8 <wait_for_bootrom+0xf4>)
    1734:	482c      	ldr	r0, [pc, #176]	; (17e8 <wait_for_bootrom+0x114>)
    1736:	47a0      	blx	r4
    1738:	200d      	movs	r0, #13
    173a:	4b2c      	ldr	r3, [pc, #176]	; (17ec <wait_for_bootrom+0x118>)
    173c:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    173e:	492c      	ldr	r1, [pc, #176]	; (17f0 <wait_for_bootrom+0x11c>)
    1740:	482c      	ldr	r0, [pc, #176]	; (17f4 <wait_for_bootrom+0x120>)
    1742:	4b23      	ldr	r3, [pc, #140]	; (17d0 <wait_for_bootrom+0xfc>)
    1744:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    1746:	2000      	movs	r0, #0
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
}
    1748:	bc04      	pop	{r2}
    174a:	4690      	mov	r8, r2
    174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    174e:	492a      	ldr	r1, [pc, #168]	; (17f8 <wait_for_bootrom+0x124>)
    1750:	482a      	ldr	r0, [pc, #168]	; (17fc <wait_for_bootrom+0x128>)
    1752:	4c1f      	ldr	r4, [pc, #124]	; (17d0 <wait_for_bootrom+0xfc>)
    1754:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, NBIT20);
    1756:	2180      	movs	r1, #128	; 0x80
    1758:	0349      	lsls	r1, r1, #13
    175a:	481c      	ldr	r0, [pc, #112]	; (17cc <wait_for_bootrom+0xf8>)
    175c:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    175e:	2400      	movs	r4, #0
    1760:	e7d9      	b.n	1716 <wait_for_bootrom+0x42>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    1762:	4925      	ldr	r1, [pc, #148]	; (17f8 <wait_for_bootrom+0x124>)
    1764:	4825      	ldr	r0, [pc, #148]	; (17fc <wait_for_bootrom+0x128>)
    1766:	4c1a      	ldr	r4, [pc, #104]	; (17d0 <wait_for_bootrom+0xfc>)
    1768:	47a0      	blx	r4
		nm_write_reg(NMI_STATE_REG, 0);
    176a:	2100      	movs	r1, #0
    176c:	4817      	ldr	r0, [pc, #92]	; (17cc <wait_for_bootrom+0xf8>)
    176e:	47a0      	blx	r4
	uint32 u32GpReg1 = 0;
    1770:	2400      	movs	r4, #0
    1772:	e7d0      	b.n	1716 <wait_for_bootrom+0x42>
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
    1774:	4914      	ldr	r1, [pc, #80]	; (17c8 <wait_for_bootrom+0xf4>)
    1776:	4815      	ldr	r0, [pc, #84]	; (17cc <wait_for_bootrom+0xf8>)
    1778:	4b15      	ldr	r3, [pc, #84]	; (17d0 <wait_for_bootrom+0xfc>)
    177a:	4798      	blx	r3
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    177c:	2480      	movs	r4, #128	; 0x80
    177e:	e7ca      	b.n	1716 <wait_for_bootrom+0x42>
		chip_apply_conf(u32GpReg1);
    1780:	0020      	movs	r0, r4
    1782:	4b16      	ldr	r3, [pc, #88]	; (17dc <wait_for_bootrom+0x108>)
    1784:	4798      	blx	r3
    1786:	e7d1      	b.n	172c <wait_for_bootrom+0x58>
			nm_bsp_sleep(1);
    1788:	2001      	movs	r0, #1
    178a:	4b0d      	ldr	r3, [pc, #52]	; (17c0 <wait_for_bootrom+0xec>)
    178c:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    178e:	4819      	ldr	r0, [pc, #100]	; (17f4 <wait_for_bootrom+0x120>)
    1790:	4b0a      	ldr	r3, [pc, #40]	; (17bc <wait_for_bootrom+0xe8>)
    1792:	4798      	blx	r3
    1794:	2480      	movs	r4, #128	; 0x80
    1796:	01a4      	lsls	r4, r4, #6
		while(reg != M2M_FINISH_BOOT_ROM)
    1798:	4d19      	ldr	r5, [pc, #100]	; (1800 <wait_for_bootrom+0x12c>)
			nm_bsp_sleep(1);
    179a:	4f09      	ldr	r7, [pc, #36]	; (17c0 <wait_for_bootrom+0xec>)
			reg = nm_read_reg(BOOTROM_REG);
    179c:	4e07      	ldr	r6, [pc, #28]	; (17bc <wait_for_bootrom+0xe8>)
		while(reg != M2M_FINISH_BOOT_ROM)
    179e:	42a8      	cmp	r0, r5
    17a0:	d0ab      	beq.n	16fa <wait_for_bootrom+0x26>
			nm_bsp_sleep(1);
    17a2:	2001      	movs	r0, #1
    17a4:	47b8      	blx	r7
			reg = nm_read_reg(BOOTROM_REG);
    17a6:	4813      	ldr	r0, [pc, #76]	; (17f4 <wait_for_bootrom+0x120>)
    17a8:	47b0      	blx	r6
    17aa:	3c01      	subs	r4, #1
			if(++cnt > TIMEOUT)
    17ac:	2c00      	cmp	r4, #0
    17ae:	d1f6      	bne.n	179e <wait_for_bootrom+0xca>
				ret = M2M_ERR_INIT;
    17b0:	2005      	movs	r0, #5
    17b2:	4240      	negs	r0, r0
	return ret;
    17b4:	e7c8      	b.n	1748 <wait_for_bootrom+0x74>
    17b6:	46c0      	nop			; (mov r8, r8)
    17b8:	00001014 	.word	0x00001014
    17bc:	0000192d 	.word	0x0000192d
    17c0:	00000141 	.word	0x00000141
    17c4:	000207bc 	.word	0x000207bc
    17c8:	13301361 	.word	0x13301361
    17cc:	0000108c 	.word	0x0000108c
    17d0:	00001945 	.word	0x00001945
    17d4:	000014c1 	.word	0x000014c1
    17d8:	0000039f 	.word	0x0000039f
    17dc:	0000142d 	.word	0x0000142d
    17e0:	0001d0f0 	.word	0x0001d0f0
    17e4:	000182cd 	.word	0x000182cd
    17e8:	0001d440 	.word	0x0001d440
    17ec:	000182f1 	.word	0x000182f1
    17f0:	ef522f61 	.word	0xef522f61
    17f4:	000c000c 	.word	0x000c000c
    17f8:	3c1cd57d 	.word	0x3c1cd57d
    17fc:	000207ac 	.word	0x000207ac
    1800:	10add09e 	.word	0x10add09e

00001804 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    1804:	b570      	push	{r4, r5, r6, lr}
    1806:	b082      	sub	sp, #8
	sint8 ret = M2M_SUCCESS;
	uint32 reg = 0, cnt = 0;
	uint32 u32Timeout = TIMEOUT;
	volatile uint32 regAddress = NMI_STATE_REG;
    1808:	4b15      	ldr	r3, [pc, #84]	; (1860 <wait_for_firmware_start+0x5c>)
    180a:	9301      	str	r3, [sp, #4]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    180c:	4b15      	ldr	r3, [pc, #84]	; (1864 <wait_for_firmware_start+0x60>)
    180e:	9300      	str	r3, [sp, #0]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    1810:	3802      	subs	r0, #2
    1812:	2801      	cmp	r0, #1
    1814:	d911      	bls.n	183a <wait_for_firmware_start+0x36>
{
    1816:	2480      	movs	r4, #128	; 0x80
    1818:	01a4      	lsls	r4, r4, #6
    181a:	2000      	movs	r0, #0
	}
	
	
	while (checkValue != reg)
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    181c:	4e12      	ldr	r6, [pc, #72]	; (1868 <wait_for_firmware_start+0x64>)
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    181e:	4d13      	ldr	r5, [pc, #76]	; (186c <wait_for_firmware_start+0x68>)
	while (checkValue != reg)
    1820:	9b00      	ldr	r3, [sp, #0]
    1822:	4298      	cmp	r0, r3
    1824:	d00e      	beq.n	1844 <wait_for_firmware_start+0x40>
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    1826:	2002      	movs	r0, #2
    1828:	47b0      	blx	r6
		reg = nm_read_reg(regAddress);
    182a:	9801      	ldr	r0, [sp, #4]
    182c:	47a8      	blx	r5
    182e:	3c01      	subs	r4, #1
		if(++cnt >= u32Timeout)
    1830:	2c00      	cmp	r4, #0
    1832:	d1f5      	bne.n	1820 <wait_for_firmware_start+0x1c>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    1834:	2005      	movs	r0, #5
    1836:	4240      	negs	r0, r0
    1838:	e009      	b.n	184e <wait_for_firmware_start+0x4a>
		regAddress = NMI_REV_REG;
    183a:	4b0d      	ldr	r3, [pc, #52]	; (1870 <wait_for_firmware_start+0x6c>)
    183c:	9301      	str	r3, [sp, #4]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    183e:	4b0d      	ldr	r3, [pc, #52]	; (1874 <wait_for_firmware_start+0x70>)
    1840:	9300      	str	r3, [sp, #0]
    1842:	e7e8      	b.n	1816 <wait_for_firmware_start+0x12>
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    1844:	9a00      	ldr	r2, [sp, #0]
    1846:	4b07      	ldr	r3, [pc, #28]	; (1864 <wait_for_firmware_start+0x60>)
	sint8 ret = M2M_SUCCESS;
    1848:	2000      	movs	r0, #0
	if(M2M_FINISH_INIT_STATE == checkValue)
    184a:	429a      	cmp	r2, r3
    184c:	d001      	beq.n	1852 <wait_for_firmware_start+0x4e>
	{
		nm_write_reg(NMI_STATE_REG, 0);
	}
ERR:
	return ret;
}
    184e:	b002      	add	sp, #8
    1850:	bd70      	pop	{r4, r5, r6, pc}
		nm_write_reg(NMI_STATE_REG, 0);
    1852:	2100      	movs	r1, #0
    1854:	4802      	ldr	r0, [pc, #8]	; (1860 <wait_for_firmware_start+0x5c>)
    1856:	4b08      	ldr	r3, [pc, #32]	; (1878 <wait_for_firmware_start+0x74>)
    1858:	4798      	blx	r3
	sint8 ret = M2M_SUCCESS;
    185a:	2000      	movs	r0, #0
    185c:	e7f7      	b.n	184e <wait_for_firmware_start+0x4a>
    185e:	46c0      	nop			; (mov r8, r8)
    1860:	0000108c 	.word	0x0000108c
    1864:	02532636 	.word	0x02532636
    1868:	00000141 	.word	0x00000141
    186c:	0000192d 	.word	0x0000192d
    1870:	000207ac 	.word	0x000207ac
    1874:	d75dc1c3 	.word	0xd75dc1c3
    1878:	00001945 	.word	0x00001945

0000187c <chip_deinit>:

sint8 chip_deinit(void)
{
    187c:	b510      	push	{r4, lr}
    187e:	b082      	sub	sp, #8
	uint32 reg = 0;
    1880:	2300      	movs	r3, #0
    1882:	9301      	str	r3, [sp, #4]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    1884:	a901      	add	r1, sp, #4
    1886:	20a0      	movs	r0, #160	; 0xa0
    1888:	0140      	lsls	r0, r0, #5
    188a:	4b14      	ldr	r3, [pc, #80]	; (18dc <chip_deinit+0x60>)
    188c:	4798      	blx	r3
    188e:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    1890:	d115      	bne.n	18be <chip_deinit+0x42>
		M2M_ERR("failed to de-initialize\n");
		goto ERR1;
	}
	reg &= ~(1 << 10);
    1892:	4913      	ldr	r1, [pc, #76]	; (18e0 <chip_deinit+0x64>)
    1894:	9b01      	ldr	r3, [sp, #4]
    1896:	4019      	ands	r1, r3
    1898:	9101      	str	r1, [sp, #4]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    189a:	20a0      	movs	r0, #160	; 0xa0
    189c:	0140      	lsls	r0, r0, #5
    189e:	4b11      	ldr	r3, [pc, #68]	; (18e4 <chip_deinit+0x68>)
    18a0:	4798      	blx	r3
    18a2:	1e04      	subs	r4, r0, #0
	if (ret != M2M_SUCCESS) {
    18a4:	d016      	beq.n	18d4 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    18a6:	4a10      	ldr	r2, [pc, #64]	; (18e8 <chip_deinit+0x6c>)
    18a8:	4910      	ldr	r1, [pc, #64]	; (18ec <chip_deinit+0x70>)
    18aa:	4811      	ldr	r0, [pc, #68]	; (18f0 <chip_deinit+0x74>)
    18ac:	4b11      	ldr	r3, [pc, #68]	; (18f4 <chip_deinit+0x78>)
    18ae:	4798      	blx	r3
    18b0:	4811      	ldr	r0, [pc, #68]	; (18f8 <chip_deinit+0x7c>)
    18b2:	4b12      	ldr	r3, [pc, #72]	; (18fc <chip_deinit+0x80>)
    18b4:	4798      	blx	r3
    18b6:	200d      	movs	r0, #13
    18b8:	4b11      	ldr	r3, [pc, #68]	; (1900 <chip_deinit+0x84>)
    18ba:	4798      	blx	r3
		goto ERR1;
    18bc:	e00a      	b.n	18d4 <chip_deinit+0x58>
		M2M_ERR("failed to de-initialize\n");
    18be:	4a11      	ldr	r2, [pc, #68]	; (1904 <chip_deinit+0x88>)
    18c0:	490a      	ldr	r1, [pc, #40]	; (18ec <chip_deinit+0x70>)
    18c2:	480b      	ldr	r0, [pc, #44]	; (18f0 <chip_deinit+0x74>)
    18c4:	4b0b      	ldr	r3, [pc, #44]	; (18f4 <chip_deinit+0x78>)
    18c6:	4798      	blx	r3
    18c8:	480b      	ldr	r0, [pc, #44]	; (18f8 <chip_deinit+0x7c>)
    18ca:	4b0c      	ldr	r3, [pc, #48]	; (18fc <chip_deinit+0x80>)
    18cc:	4798      	blx	r3
    18ce:	200d      	movs	r0, #13
    18d0:	4b0b      	ldr	r3, [pc, #44]	; (1900 <chip_deinit+0x84>)
    18d2:	4798      	blx	r3
	}

ERR1:
	return ret;
}
    18d4:	0020      	movs	r0, r4
    18d6:	b002      	add	sp, #8
    18d8:	bd10      	pop	{r4, pc}
    18da:	46c0      	nop			; (mov r8, r8)
    18dc:	00001939 	.word	0x00001939
    18e0:	fffffbff 	.word	0xfffffbff
    18e4:	00001945 	.word	0x00001945
    18e8:	00000207 	.word	0x00000207
    18ec:	0001d3e8 	.word	0x0001d3e8
    18f0:	0001cd6c 	.word	0x0001cd6c
    18f4:	000182cd 	.word	0x000182cd
    18f8:	0001d3f4 	.word	0x0001d3f4
    18fc:	000183a5 	.word	0x000183a5
    1900:	000182f1 	.word	0x000182f1
    1904:	00000201 	.word	0x00000201

00001908 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    1908:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_init(pvInitVal);
    190a:	4b01      	ldr	r3, [pc, #4]	; (1910 <nm_bus_iface_init+0x8>)
    190c:	4798      	blx	r3
	return ret;
}
    190e:	bd10      	pop	{r4, pc}
    1910:	00000279 	.word	0x00000279

00001914 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    1914:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
	ret = nm_bus_deinit();
    1916:	4b01      	ldr	r3, [pc, #4]	; (191c <nm_bus_iface_deinit+0x8>)
    1918:	4798      	blx	r3

	return ret;
}
    191a:	bd10      	pop	{r4, pc}
    191c:	000004ad 	.word	0x000004ad

00001920 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
    1920:	b510      	push	{r4, lr}
	sint8 ret = M2M_SUCCESS;
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
    1922:	4b01      	ldr	r3, [pc, #4]	; (1928 <nm_bus_reset+0x8>)
    1924:	4798      	blx	r3
#else
#error "Please define bus usage"
#endif

	return ret;
}
    1926:	bd10      	pop	{r4, pc}
    1928:	000022e9 	.word	0x000022e9

0000192c <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    192c:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    192e:	4b01      	ldr	r3, [pc, #4]	; (1934 <nm_read_reg+0x8>)
    1930:	4798      	blx	r3
	return nm_i2c_read_reg(u32Addr);
#else
#error "Please define bus usage"
#endif

}
    1932:	bd10      	pop	{r4, pc}
    1934:	00002321 	.word	0x00002321

00001938 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    1938:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    193a:	4b01      	ldr	r3, [pc, #4]	; (1940 <nm_read_reg_with_ret+0x8>)
    193c:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
    193e:	bd10      	pop	{r4, pc}
    1940:	00002335 	.word	0x00002335

00001944 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1944:	b510      	push	{r4, lr}
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    1946:	4b01      	ldr	r3, [pc, #4]	; (194c <nm_write_reg+0x8>)
    1948:	4798      	blx	r3
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Please define bus usage"
#endif
}
    194a:	bd10      	pop	{r4, pc}
    194c:	0000234d 	.word	0x0000234d

00001950 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1950:	b5f0      	push	{r4, r5, r6, r7, lr}
    1952:	46d6      	mov	lr, sl
    1954:	464f      	mov	r7, r9
    1956:	4646      	mov	r6, r8
    1958:	b5c0      	push	{r6, r7, lr}
    195a:	b082      	sub	sp, #8
    195c:	4680      	mov	r8, r0
    195e:	4689      	mov	r9, r1
    1960:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1962:	4b13      	ldr	r3, [pc, #76]	; (19b0 <nm_read_block+0x60>)
    1964:	881f      	ldrh	r7, [r3, #0]
    1966:	3f08      	subs	r7, #8
    1968:	b2bb      	uxth	r3, r7
    196a:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    196c:	001e      	movs	r6, r3
    196e:	0004      	movs	r4, r0
    1970:	429a      	cmp	r2, r3
    1972:	d91a      	bls.n	19aa <nm_read_block+0x5a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1974:	4b0f      	ldr	r3, [pc, #60]	; (19b4 <nm_read_block+0x64>)
    1976:	469a      	mov	sl, r3
    1978:	1a37      	subs	r7, r6, r0
    197a:	4643      	mov	r3, r8
    197c:	1ae1      	subs	r1, r4, r3
    197e:	4449      	add	r1, r9
    1980:	9a01      	ldr	r2, [sp, #4]
    1982:	0020      	movs	r0, r4
    1984:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1986:	2800      	cmp	r0, #0
    1988:	d109      	bne.n	199e <nm_read_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    198a:	1bad      	subs	r5, r5, r6
    198c:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    198e:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    1990:	42b5      	cmp	r5, r6
    1992:	d8f2      	bhi.n	197a <nm_read_block+0x2a>
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1994:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    1996:	4449      	add	r1, r9
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1998:	0020      	movs	r0, r4
    199a:	4b06      	ldr	r3, [pc, #24]	; (19b4 <nm_read_block+0x64>)
    199c:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    199e:	b002      	add	sp, #8
    19a0:	bc1c      	pop	{r2, r3, r4}
    19a2:	4690      	mov	r8, r2
    19a4:	4699      	mov	r9, r3
    19a6:	46a2      	mov	sl, r4
    19a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    19aa:	2100      	movs	r1, #0
    19ac:	e7f2      	b.n	1994 <nm_read_block+0x44>
    19ae:	46c0      	nop			; (mov r8, r8)
    19b0:	20000000 	.word	0x20000000
    19b4:	0000248d 	.word	0x0000248d

000019b8 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    19b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ba:	46d6      	mov	lr, sl
    19bc:	464f      	mov	r7, r9
    19be:	4646      	mov	r6, r8
    19c0:	b5c0      	push	{r6, r7, lr}
    19c2:	b082      	sub	sp, #8
    19c4:	4680      	mov	r8, r0
    19c6:	4689      	mov	r9, r1
    19c8:	0015      	movs	r5, r2
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    19ca:	4b13      	ldr	r3, [pc, #76]	; (1a18 <nm_write_block+0x60>)
    19cc:	881f      	ldrh	r7, [r3, #0]
    19ce:	3f08      	subs	r7, #8
    19d0:	b2bb      	uxth	r3, r7
    19d2:	9301      	str	r3, [sp, #4]
	uint32 off = 0;
	sint8 s8Ret = M2M_SUCCESS;

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    19d4:	001e      	movs	r6, r3
    19d6:	0004      	movs	r4, r0
    19d8:	429a      	cmp	r2, r3
    19da:	d91a      	bls.n	1a12 <nm_write_block+0x5a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    19dc:	4b0f      	ldr	r3, [pc, #60]	; (1a1c <nm_write_block+0x64>)
    19de:	469a      	mov	sl, r3
    19e0:	1a37      	subs	r7, r6, r0
    19e2:	4643      	mov	r3, r8
    19e4:	1ae1      	subs	r1, r4, r3
    19e6:	4449      	add	r1, r9
    19e8:	9a01      	ldr	r2, [sp, #4]
    19ea:	0020      	movs	r0, r4
    19ec:	47d0      	blx	sl
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    19ee:	2800      	cmp	r0, #0
    19f0:	d109      	bne.n	1a06 <nm_write_block+0x4e>
			u32Sz -= u16MaxTrxSz;
    19f2:	1bad      	subs	r5, r5, r6
    19f4:	1939      	adds	r1, r7, r4
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
    19f6:	19a4      	adds	r4, r4, r6
		if(u32Sz <= u16MaxTrxSz)
    19f8:	42b5      	cmp	r5, r6
    19fa:	d8f2      	bhi.n	19e2 <nm_write_block+0x2a>
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    19fc:	b2aa      	uxth	r2, r5
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
    19fe:	4449      	add	r1, r9
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1a00:	0020      	movs	r0, r4
    1a02:	4b06      	ldr	r3, [pc, #24]	; (1a1c <nm_write_block+0x64>)
    1a04:	4798      	blx	r3
		}
	}

	return s8Ret;
}
    1a06:	b002      	add	sp, #8
    1a08:	bc1c      	pop	{r2, r3, r4}
    1a0a:	4690      	mov	r8, r2
    1a0c:	4699      	mov	r9, r3
    1a0e:	46a2      	mov	sl, r4
    1a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32 off = 0;
    1a12:	2100      	movs	r1, #0
    1a14:	e7f2      	b.n	19fc <nm_write_block+0x44>
    1a16:	46c0      	nop			; (mov r8, r8)
    1a18:	20000000 	.word	0x20000000
    1a1c:	000025e9 	.word	0x000025e9

00001a20 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
    1a20:	b570      	push	{r4, r5, r6, lr}
    1a22:	b084      	sub	sp, #16
    1a24:	0004      	movs	r4, r0
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    1a26:	2300      	movs	r3, #0
    1a28:	9303      	str	r3, [sp, #12]
	sint8	ret = M2M_SUCCESS;
	tstrGpRegs strgp = {0};
    1a2a:	2208      	movs	r2, #8
    1a2c:	2100      	movs	r1, #0
    1a2e:	a801      	add	r0, sp, #4
    1a30:	4b2d      	ldr	r3, [pc, #180]	; (1ae8 <nm_get_firmware_full_info+0xc8>)
    1a32:	4798      	blx	r3
	if (pstrRev != NULL)
    1a34:	2c00      	cmp	r4, #0
    1a36:	d045      	beq.n	1ac4 <nm_get_firmware_full_info+0xa4>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
    1a38:	2228      	movs	r2, #40	; 0x28
    1a3a:	2100      	movs	r1, #0
    1a3c:	0020      	movs	r0, r4
    1a3e:	4b2b      	ldr	r3, [pc, #172]	; (1aec <nm_get_firmware_full_info+0xcc>)
    1a40:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
    1a42:	a903      	add	r1, sp, #12
    1a44:	482a      	ldr	r0, [pc, #168]	; (1af0 <nm_get_firmware_full_info+0xd0>)
    1a46:	4b2b      	ldr	r3, [pc, #172]	; (1af4 <nm_get_firmware_full_info+0xd4>)
    1a48:	4798      	blx	r3
		if(ret == M2M_SUCCESS)
    1a4a:	2800      	cmp	r0, #0
    1a4c:	d13b      	bne.n	1ac6 <nm_get_firmware_full_info+0xa6>
		{
			if(reg != 0)
    1a4e:	9b03      	ldr	r3, [sp, #12]
    1a50:	2b00      	cmp	r3, #0
    1a52:	d03a      	beq.n	1aca <nm_get_firmware_full_info+0xaa>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    1a54:	20c0      	movs	r0, #192	; 0xc0
    1a56:	0280      	lsls	r0, r0, #10
    1a58:	4318      	orrs	r0, r3
    1a5a:	2208      	movs	r2, #8
    1a5c:	a901      	add	r1, sp, #4
    1a5e:	4b26      	ldr	r3, [pc, #152]	; (1af8 <nm_get_firmware_full_info+0xd8>)
    1a60:	4798      	blx	r3
				if(ret == M2M_SUCCESS)
    1a62:	2800      	cmp	r0, #0
    1a64:	d12f      	bne.n	1ac6 <nm_get_firmware_full_info+0xa6>
				{
					reg = strgp.u32Firmware_Ota_rev;
					reg &= 0x0000ffff;
    1a66:	9b02      	ldr	r3, [sp, #8]
    1a68:	0418      	lsls	r0, r3, #16
    1a6a:	0c00      	lsrs	r0, r0, #16
    1a6c:	9003      	str	r0, [sp, #12]
					if(reg != 0)
    1a6e:	d02f      	beq.n	1ad0 <nm_get_firmware_full_info+0xb0>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
    1a70:	23c0      	movs	r3, #192	; 0xc0
    1a72:	029b      	lsls	r3, r3, #10
    1a74:	4318      	orrs	r0, r3
    1a76:	2228      	movs	r2, #40	; 0x28
    1a78:	0021      	movs	r1, r4
    1a7a:	4b1f      	ldr	r3, [pc, #124]	; (1af8 <nm_get_firmware_full_info+0xd8>)
    1a7c:	4798      	blx	r3
						if(ret == M2M_SUCCESS)
    1a7e:	2800      	cmp	r0, #0
    1a80:	d121      	bne.n	1ac6 <nm_get_firmware_full_info+0xa6>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
    1a82:	7921      	ldrb	r1, [r4, #4]
    1a84:	0209      	lsls	r1, r1, #8
    1a86:	79a2      	ldrb	r2, [r4, #6]
    1a88:	230f      	movs	r3, #15
    1a8a:	401a      	ands	r2, r3
    1a8c:	430a      	orrs	r2, r1
    1a8e:	7961      	ldrb	r1, [r4, #5]
    1a90:	0109      	lsls	r1, r1, #4
    1a92:	25ff      	movs	r5, #255	; 0xff
    1a94:	4029      	ands	r1, r5
    1a96:	430a      	orrs	r2, r1
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
    1a98:	79e1      	ldrb	r1, [r4, #7]
    1a9a:	0209      	lsls	r1, r1, #8
    1a9c:	7a66      	ldrb	r6, [r4, #9]
    1a9e:	4033      	ands	r3, r6
    1aa0:	430b      	orrs	r3, r1
    1aa2:	7a21      	ldrb	r1, [r4, #8]
    1aa4:	0109      	lsls	r1, r1, #4
    1aa6:	400d      	ands	r5, r1
    1aa8:	432b      	orrs	r3, r5
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
    1aaa:	2a00      	cmp	r2, #0
    1aac:	d013      	beq.n	1ad6 <nm_get_firmware_full_info+0xb6>
    1aae:	2b00      	cmp	r3, #0
    1ab0:	d014      	beq.n	1adc <nm_get_firmware_full_info+0xbc>
								ret = M2M_ERR_FAIL;
								goto EXIT;
							}
							if(curr_drv_ver <  min_req_drv_ver) {
    1ab2:	4912      	ldr	r1, [pc, #72]	; (1afc <nm_get_firmware_full_info+0xdc>)
    1ab4:	428b      	cmp	r3, r1
    1ab6:	d814      	bhi.n	1ae2 <nm_get_firmware_full_info+0xc2>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
								goto EXIT;
							}
							if(curr_drv_ver >  curr_firm_ver) {
    1ab8:	239b      	movs	r3, #155	; 0x9b
    1aba:	015b      	lsls	r3, r3, #5
    1abc:	429a      	cmp	r2, r3
    1abe:	d802      	bhi.n	1ac6 <nm_get_firmware_full_info+0xa6>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
    1ac0:	380d      	subs	r0, #13
    1ac2:	e000      	b.n	1ac6 <nm_get_firmware_full_info+0xa6>
	sint8	ret = M2M_SUCCESS;
    1ac4:	2000      	movs	r0, #0
			}
		}
	}
EXIT:
	return ret;
}
    1ac6:	b004      	add	sp, #16
    1ac8:	bd70      	pop	{r4, r5, r6, pc}
				ret = M2M_ERR_FAIL;
    1aca:	200c      	movs	r0, #12
    1acc:	4240      	negs	r0, r0
    1ace:	e7fa      	b.n	1ac6 <nm_get_firmware_full_info+0xa6>
						ret = M2M_ERR_FAIL;
    1ad0:	200c      	movs	r0, #12
    1ad2:	4240      	negs	r0, r0
    1ad4:	e7f7      	b.n	1ac6 <nm_get_firmware_full_info+0xa6>
								ret = M2M_ERR_FAIL;
    1ad6:	200c      	movs	r0, #12
    1ad8:	4240      	negs	r0, r0
    1ada:	e7f4      	b.n	1ac6 <nm_get_firmware_full_info+0xa6>
    1adc:	200c      	movs	r0, #12
    1ade:	4240      	negs	r0, r0
    1ae0:	e7f1      	b.n	1ac6 <nm_get_firmware_full_info+0xa6>
								ret = M2M_ERR_FW_VER_MISMATCH;
    1ae2:	200d      	movs	r0, #13
    1ae4:	4240      	negs	r0, r0
    1ae6:	e7ee      	b.n	1ac6 <nm_get_firmware_full_info+0xa6>
    1ae8:	00018219 	.word	0x00018219
    1aec:	000004cd 	.word	0x000004cd
    1af0:	000c0008 	.word	0x000c0008
    1af4:	00001939 	.word	0x00001939
    1af8:	00001951 	.word	0x00001951
    1afc:	00001361 	.word	0x00001361

00001b00 <nm_drv_init_hold>:
ERR1:
	return ret;
}

sint8 nm_drv_init_hold(void)
{
    1b00:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	
	ret = nm_bus_iface_init(NULL);
    1b02:	2000      	movs	r0, #0
    1b04:	4b0f      	ldr	r3, [pc, #60]	; (1b44 <nm_drv_init_hold+0x44>)
    1b06:	4798      	blx	r3
    1b08:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1b0a:	d10e      	bne.n	1b2a <nm_drv_init_hold+0x2a>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    1b0c:	480e      	ldr	r0, [pc, #56]	; (1b48 <nm_drv_init_hold+0x48>)
    1b0e:	4d0f      	ldr	r5, [pc, #60]	; (1b4c <nm_drv_init_hold+0x4c>)
    1b10:	47a8      	blx	r5
    1b12:	4b0f      	ldr	r3, [pc, #60]	; (1b50 <nm_drv_init_hold+0x50>)
    1b14:	4798      	blx	r3
    1b16:	0001      	movs	r1, r0
    1b18:	480e      	ldr	r0, [pc, #56]	; (1b54 <nm_drv_init_hold+0x54>)
    1b1a:	47a8      	blx	r5
    1b1c:	200d      	movs	r0, #13
    1b1e:	4b0e      	ldr	r3, [pc, #56]	; (1b58 <nm_drv_init_hold+0x58>)
    1b20:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    1b22:	4b0e      	ldr	r3, [pc, #56]	; (1b5c <nm_drv_init_hold+0x5c>)
    1b24:	4798      	blx	r3
ERR2:
	nm_bus_iface_deinit();
#endif
ERR1:
	return ret;
}
    1b26:	0020      	movs	r0, r4
    1b28:	bd70      	pop	{r4, r5, r6, pc}
		M2M_ERR("[nmi start]: fail init bus\n");
    1b2a:	2286      	movs	r2, #134	; 0x86
    1b2c:	0052      	lsls	r2, r2, #1
    1b2e:	490c      	ldr	r1, [pc, #48]	; (1b60 <nm_drv_init_hold+0x60>)
    1b30:	480c      	ldr	r0, [pc, #48]	; (1b64 <nm_drv_init_hold+0x64>)
    1b32:	4b06      	ldr	r3, [pc, #24]	; (1b4c <nm_drv_init_hold+0x4c>)
    1b34:	4798      	blx	r3
    1b36:	480c      	ldr	r0, [pc, #48]	; (1b68 <nm_drv_init_hold+0x68>)
    1b38:	4b0c      	ldr	r3, [pc, #48]	; (1b6c <nm_drv_init_hold+0x6c>)
    1b3a:	4798      	blx	r3
    1b3c:	200d      	movs	r0, #13
    1b3e:	4b06      	ldr	r3, [pc, #24]	; (1b58 <nm_drv_init_hold+0x58>)
    1b40:	4798      	blx	r3
	return ret;
    1b42:	e7f0      	b.n	1b26 <nm_drv_init_hold+0x26>
    1b44:	00001909 	.word	0x00001909
    1b48:	0001d0f0 	.word	0x0001d0f0
    1b4c:	000182cd 	.word	0x000182cd
    1b50:	000014c1 	.word	0x000014c1
    1b54:	0001d50c 	.word	0x0001d50c
    1b58:	000182f1 	.word	0x000182f1
    1b5c:	00002365 	.word	0x00002365
    1b60:	0001d458 	.word	0x0001d458
    1b64:	0001cd6c 	.word	0x0001cd6c
    1b68:	0001d4f0 	.word	0x0001d4f0
    1b6c:	000183a5 	.word	0x000183a5

00001b70 <nm_drv_init_start>:

sint8 nm_drv_init_start(void * arg)
{
    1b70:	b570      	push	{r4, r5, r6, lr}
	sint8 ret = M2M_SUCCESS;
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;

	if(NULL != arg) {
    1b72:	2800      	cmp	r0, #0
    1b74:	d027      	beq.n	1bc6 <nm_drv_init_start+0x56>
		u8Mode = *((uint8 *)arg);
    1b76:	7805      	ldrb	r5, [r0, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    1b78:	1e6b      	subs	r3, r5, #1
    1b7a:	2b03      	cmp	r3, #3
    1b7c:	d900      	bls.n	1b80 <nm_drv_init_start+0x10>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    1b7e:	2501      	movs	r5, #1
		}
	}

	ret = wait_for_bootrom(u8Mode);
    1b80:	0028      	movs	r0, r5
    1b82:	4b12      	ldr	r3, [pc, #72]	; (1bcc <nm_drv_init_start+0x5c>)
    1b84:	4798      	blx	r3
    1b86:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1b88:	d117      	bne.n	1bba <nm_drv_init_start+0x4a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    1b8a:	0028      	movs	r0, r5
    1b8c:	4b10      	ldr	r3, [pc, #64]	; (1bd0 <nm_drv_init_start+0x60>)
    1b8e:	4798      	blx	r3
    1b90:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1b92:	d112      	bne.n	1bba <nm_drv_init_start+0x4a>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    1b94:	3d02      	subs	r5, #2
    1b96:	2d01      	cmp	r5, #1
    1b98:	d913      	bls.n	1bc2 <nm_drv_init_start+0x52>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    1b9a:	4b0e      	ldr	r3, [pc, #56]	; (1bd4 <nm_drv_init_start+0x64>)
    1b9c:	4798      	blx	r3
    1b9e:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1ba0:	d00f      	beq.n	1bc2 <nm_drv_init_start+0x52>
		M2M_ERR("failed to enable interrupts..\n");
    1ba2:	22a8      	movs	r2, #168	; 0xa8
    1ba4:	0052      	lsls	r2, r2, #1
    1ba6:	490c      	ldr	r1, [pc, #48]	; (1bd8 <nm_drv_init_start+0x68>)
    1ba8:	480c      	ldr	r0, [pc, #48]	; (1bdc <nm_drv_init_start+0x6c>)
    1baa:	4b0d      	ldr	r3, [pc, #52]	; (1be0 <nm_drv_init_start+0x70>)
    1bac:	4798      	blx	r3
    1bae:	480d      	ldr	r0, [pc, #52]	; (1be4 <nm_drv_init_start+0x74>)
    1bb0:	4b0d      	ldr	r3, [pc, #52]	; (1be8 <nm_drv_init_start+0x78>)
    1bb2:	4798      	blx	r3
    1bb4:	200d      	movs	r0, #13
    1bb6:	4b0d      	ldr	r3, [pc, #52]	; (1bec <nm_drv_init_start+0x7c>)
    1bb8:	4798      	blx	r3
		goto ERR2;
	}

	return ret;
ERR2:
	nm_bus_iface_deinit();
    1bba:	4b0d      	ldr	r3, [pc, #52]	; (1bf0 <nm_drv_init_start+0x80>)
    1bbc:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	nm_spi_deinit();
    1bbe:	4b0d      	ldr	r3, [pc, #52]	; (1bf4 <nm_drv_init_start+0x84>)
    1bc0:	4798      	blx	r3
#endif
ERR1:
	return ret;
}
    1bc2:	0020      	movs	r0, r4
    1bc4:	bd70      	pop	{r4, r5, r6, pc}
	uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
    1bc6:	2501      	movs	r5, #1
    1bc8:	e7da      	b.n	1b80 <nm_drv_init_start+0x10>
    1bca:	46c0      	nop			; (mov r8, r8)
    1bcc:	000016d5 	.word	0x000016d5
    1bd0:	00001805 	.word	0x00001805
    1bd4:	00001465 	.word	0x00001465
    1bd8:	0001d46c 	.word	0x0001d46c
    1bdc:	0001cd6c 	.word	0x0001cd6c
    1be0:	000182cd 	.word	0x000182cd
    1be4:	0001d51c 	.word	0x0001d51c
    1be8:	000183a5 	.word	0x000183a5
    1bec:	000182f1 	.word	0x000182f1
    1bf0:	00001915 	.word	0x00001915
    1bf4:	00002311 	.word	0x00002311

00001bf8 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    1bf8:	b510      	push	{r4, lr}
	sint8 ret;

	ret = chip_deinit();
    1bfa:	4b1c      	ldr	r3, [pc, #112]	; (1c6c <nm_drv_deinit+0x74>)
    1bfc:	4798      	blx	r3
    1bfe:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c00:	d10b      	bne.n	1c1a <nm_drv_deinit+0x22>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
		goto ERR1;
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    1c02:	2000      	movs	r0, #0
    1c04:	4b1a      	ldr	r3, [pc, #104]	; (1c70 <nm_drv_deinit+0x78>)
    1c06:	4798      	blx	r3
    1c08:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c0a:	d114      	bne.n	1c36 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
		goto ERR1;
	}

	ret = nm_bus_iface_deinit();
    1c0c:	4b19      	ldr	r3, [pc, #100]	; (1c74 <nm_drv_deinit+0x7c>)
    1c0e:	4798      	blx	r3
    1c10:	1e04      	subs	r4, r0, #0
	if (M2M_SUCCESS != ret) {
    1c12:	d11d      	bne.n	1c50 <nm_drv_deinit+0x58>
		M2M_ERR("[nmi stop]: fail init bus\n");
		goto ERR1;
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    1c14:	4b18      	ldr	r3, [pc, #96]	; (1c78 <nm_drv_deinit+0x80>)
    1c16:	4798      	blx	r3
    1c18:	e00b      	b.n	1c32 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    1c1a:	2282      	movs	r2, #130	; 0x82
    1c1c:	32ff      	adds	r2, #255	; 0xff
    1c1e:	4917      	ldr	r1, [pc, #92]	; (1c7c <nm_drv_deinit+0x84>)
    1c20:	4817      	ldr	r0, [pc, #92]	; (1c80 <nm_drv_deinit+0x88>)
    1c22:	4b18      	ldr	r3, [pc, #96]	; (1c84 <nm_drv_deinit+0x8c>)
    1c24:	4798      	blx	r3
    1c26:	4818      	ldr	r0, [pc, #96]	; (1c88 <nm_drv_deinit+0x90>)
    1c28:	4b18      	ldr	r3, [pc, #96]	; (1c8c <nm_drv_deinit+0x94>)
    1c2a:	4798      	blx	r3
    1c2c:	200d      	movs	r0, #13
    1c2e:	4b18      	ldr	r3, [pc, #96]	; (1c90 <nm_drv_deinit+0x98>)
    1c30:	4798      	blx	r3
#endif

ERR1:
	return ret;
}
    1c32:	0020      	movs	r0, r4
    1c34:	bd10      	pop	{r4, pc}
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    1c36:	22c4      	movs	r2, #196	; 0xc4
    1c38:	0052      	lsls	r2, r2, #1
    1c3a:	4910      	ldr	r1, [pc, #64]	; (1c7c <nm_drv_deinit+0x84>)
    1c3c:	4810      	ldr	r0, [pc, #64]	; (1c80 <nm_drv_deinit+0x88>)
    1c3e:	4b11      	ldr	r3, [pc, #68]	; (1c84 <nm_drv_deinit+0x8c>)
    1c40:	4798      	blx	r3
    1c42:	4814      	ldr	r0, [pc, #80]	; (1c94 <nm_drv_deinit+0x9c>)
    1c44:	4b11      	ldr	r3, [pc, #68]	; (1c8c <nm_drv_deinit+0x94>)
    1c46:	4798      	blx	r3
    1c48:	200d      	movs	r0, #13
    1c4a:	4b11      	ldr	r3, [pc, #68]	; (1c90 <nm_drv_deinit+0x98>)
    1c4c:	4798      	blx	r3
		goto ERR1;
    1c4e:	e7f0      	b.n	1c32 <nm_drv_deinit+0x3a>
		M2M_ERR("[nmi stop]: fail init bus\n");
    1c50:	22c7      	movs	r2, #199	; 0xc7
    1c52:	0052      	lsls	r2, r2, #1
    1c54:	4909      	ldr	r1, [pc, #36]	; (1c7c <nm_drv_deinit+0x84>)
    1c56:	480a      	ldr	r0, [pc, #40]	; (1c80 <nm_drv_deinit+0x88>)
    1c58:	4b0a      	ldr	r3, [pc, #40]	; (1c84 <nm_drv_deinit+0x8c>)
    1c5a:	4798      	blx	r3
    1c5c:	480e      	ldr	r0, [pc, #56]	; (1c98 <nm_drv_deinit+0xa0>)
    1c5e:	4b0b      	ldr	r3, [pc, #44]	; (1c8c <nm_drv_deinit+0x94>)
    1c60:	4798      	blx	r3
    1c62:	200d      	movs	r0, #13
    1c64:	4b0a      	ldr	r3, [pc, #40]	; (1c90 <nm_drv_deinit+0x98>)
    1c66:	4798      	blx	r3
		goto ERR1;
    1c68:	e7e3      	b.n	1c32 <nm_drv_deinit+0x3a>
    1c6a:	46c0      	nop			; (mov r8, r8)
    1c6c:	0000187d 	.word	0x0000187d
    1c70:	0000288d 	.word	0x0000288d
    1c74:	00001915 	.word	0x00001915
    1c78:	00002311 	.word	0x00002311
    1c7c:	0001d480 	.word	0x0001d480
    1c80:	0001cd6c 	.word	0x0001cd6c
    1c84:	000182cd 	.word	0x000182cd
    1c88:	0001d490 	.word	0x0001d490
    1c8c:	000183a5 	.word	0x000183a5
    1c90:	000182f1 	.word	0x000182f1
    1c94:	0001d4b0 	.word	0x0001d4b0
    1c98:	0001d4d4 	.word	0x0001d4d4

00001c9c <nmi_spi_write>:
	spi.u16Sz = sz;
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
}

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1c9c:	b500      	push	{lr}
    1c9e:	b085      	sub	sp, #20
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1ca0:	ab01      	add	r3, sp, #4
    1ca2:	9001      	str	r0, [sp, #4]
	spi.pu8OutBuf = NULL;
    1ca4:	2200      	movs	r2, #0
    1ca6:	9202      	str	r2, [sp, #8]
	spi.u16Sz = sz;
    1ca8:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1caa:	0019      	movs	r1, r3
    1cac:	2003      	movs	r0, #3
    1cae:	4b02      	ldr	r3, [pc, #8]	; (1cb8 <nmi_spi_write+0x1c>)
    1cb0:	4798      	blx	r3
}
    1cb2:	b005      	add	sp, #20
    1cb4:	bd00      	pop	{pc}
    1cb6:	46c0      	nop			; (mov r8, r8)
    1cb8:	00000361 	.word	0x00000361

00001cbc <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1cbc:	b570      	push	{r4, r5, r6, lr}
    1cbe:	b084      	sub	sp, #16
    1cc0:	ac08      	add	r4, sp, #32
    1cc2:	7825      	ldrb	r5, [r4, #0]
	uint8 bc[9];
	uint8 len = 5;
	sint8 result = N_OK;

	bc[0] = cmd;
    1cc4:	ac01      	add	r4, sp, #4
    1cc6:	7020      	strb	r0, [r4, #0]
	switch (cmd) {
    1cc8:	303f      	adds	r0, #63	; 0x3f
    1cca:	b2c4      	uxtb	r4, r0
    1ccc:	2c0e      	cmp	r4, #14
    1cce:	d900      	bls.n	1cd2 <spi_cmd+0x16>
    1cd0:	e084      	b.n	1ddc <spi_cmd+0x120>
    1cd2:	00a0      	lsls	r0, r4, #2
    1cd4:	4c4f      	ldr	r4, [pc, #316]	; (1e14 <spi_cmd+0x158>)
    1cd6:	5820      	ldr	r0, [r4, r0]
    1cd8:	4687      	mov	pc, r0
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    1cda:	ab01      	add	r3, sp, #4
    1cdc:	0c0a      	lsrs	r2, r1, #16
    1cde:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1ce0:	0a0a      	lsrs	r2, r1, #8
    1ce2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1ce4:	70d9      	strb	r1, [r3, #3]
		len = 5;
    1ce6:	2105      	movs	r1, #5
		result = N_FAIL;
		break;
	}

	if (result) {
		if (!gu8Crc_off)
    1ce8:	4b4b      	ldr	r3, [pc, #300]	; (1e18 <spi_cmd+0x15c>)
    1cea:	781b      	ldrb	r3, [r3, #0]
    1cec:	2b00      	cmp	r3, #0
    1cee:	d077      	beq.n	1de0 <spi_cmd+0x124>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
		else
			len-=1;
    1cf0:	3901      	subs	r1, #1
    1cf2:	b2c9      	uxtb	r1, r1
    1cf4:	e083      	b.n	1dfe <spi_cmd+0x142>
		bc[1] = (uint8)(adr >> 8);
    1cf6:	0a0b      	lsrs	r3, r1, #8
    1cf8:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1cfa:	2d00      	cmp	r5, #0
    1cfc:	d107      	bne.n	1d0e <spi_cmd+0x52>
		bc[1] = (uint8)(adr >> 8);
    1cfe:	aa01      	add	r2, sp, #4
    1d00:	7053      	strb	r3, [r2, #1]
		bc[2] = (uint8)adr;
    1d02:	ab01      	add	r3, sp, #4
    1d04:	7099      	strb	r1, [r3, #2]
		bc[3] = 0x00;
    1d06:	2200      	movs	r2, #0
    1d08:	70da      	strb	r2, [r3, #3]
		len = 5;
    1d0a:	2105      	movs	r1, #5
		break;
    1d0c:	e7ec      	b.n	1ce8 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    1d0e:	2280      	movs	r2, #128	; 0x80
    1d10:	4252      	negs	r2, r2
    1d12:	4313      	orrs	r3, r2
    1d14:	aa01      	add	r2, sp, #4
    1d16:	7053      	strb	r3, [r2, #1]
    1d18:	e7f3      	b.n	1d02 <spi_cmd+0x46>
		bc[1] = 0x00;
    1d1a:	ab01      	add	r3, sp, #4
    1d1c:	2200      	movs	r2, #0
    1d1e:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1d20:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1d22:	70da      	strb	r2, [r3, #3]
		len = 5;
    1d24:	2105      	movs	r1, #5
		break;
    1d26:	e7df      	b.n	1ce8 <spi_cmd+0x2c>
		bc[1] = 0x00;
    1d28:	ab01      	add	r3, sp, #4
    1d2a:	2200      	movs	r2, #0
    1d2c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    1d2e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1d30:	70da      	strb	r2, [r3, #3]
		len = 5;
    1d32:	2105      	movs	r1, #5
		break;
    1d34:	e7d8      	b.n	1ce8 <spi_cmd+0x2c>
		bc[1] = 0xff;
    1d36:	ab01      	add	r3, sp, #4
    1d38:	22ff      	movs	r2, #255	; 0xff
    1d3a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    1d3c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    1d3e:	70da      	strb	r2, [r3, #3]
		len = 5;
    1d40:	2105      	movs	r1, #5
		break;
    1d42:	e7d1      	b.n	1ce8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    1d44:	aa01      	add	r2, sp, #4
    1d46:	0c08      	lsrs	r0, r1, #16
    1d48:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1d4a:	0a08      	lsrs	r0, r1, #8
    1d4c:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1d4e:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 8);
    1d50:	0a19      	lsrs	r1, r3, #8
    1d52:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz);
    1d54:	7153      	strb	r3, [r2, #5]
		len = 7;
    1d56:	2107      	movs	r1, #7
		break;
    1d58:	e7c6      	b.n	1ce8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 16);
    1d5a:	aa01      	add	r2, sp, #4
    1d5c:	0c08      	lsrs	r0, r1, #16
    1d5e:	7050      	strb	r0, [r2, #1]
		bc[2] = (uint8)(adr >> 8);
    1d60:	0a08      	lsrs	r0, r1, #8
    1d62:	7090      	strb	r0, [r2, #2]
		bc[3] = (uint8)adr;
    1d64:	70d1      	strb	r1, [r2, #3]
		bc[4] = (uint8)(sz >> 16);
    1d66:	0c19      	lsrs	r1, r3, #16
    1d68:	7111      	strb	r1, [r2, #4]
		bc[5] = (uint8)(sz >> 8);
    1d6a:	0a19      	lsrs	r1, r3, #8
    1d6c:	7151      	strb	r1, [r2, #5]
		bc[6] = (uint8)(sz);
    1d6e:	7193      	strb	r3, [r2, #6]
		len = 8;
    1d70:	2108      	movs	r1, #8
		break;
    1d72:	e7b9      	b.n	1ce8 <spi_cmd+0x2c>
		bc[1] = (uint8)(adr >> 8);
    1d74:	0a0b      	lsrs	r3, r1, #8
    1d76:	b2db      	uxtb	r3, r3
		if(clockless)  bc[1] |= (1 << 7);
    1d78:	2d00      	cmp	r5, #0
    1d7a:	d10c      	bne.n	1d96 <spi_cmd+0xda>
		bc[1] = (uint8)(adr >> 8);
    1d7c:	a801      	add	r0, sp, #4
    1d7e:	7043      	strb	r3, [r0, #1]
		bc[2] = (uint8)(adr);
    1d80:	ab01      	add	r3, sp, #4
    1d82:	7099      	strb	r1, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    1d84:	0e11      	lsrs	r1, r2, #24
    1d86:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    1d88:	0c11      	lsrs	r1, r2, #16
    1d8a:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    1d8c:	0a11      	lsrs	r1, r2, #8
    1d8e:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data);
    1d90:	719a      	strb	r2, [r3, #6]
		len = 8;
    1d92:	2108      	movs	r1, #8
		break;
    1d94:	e7a8      	b.n	1ce8 <spi_cmd+0x2c>
		if(clockless)  bc[1] |= (1 << 7);
    1d96:	2080      	movs	r0, #128	; 0x80
    1d98:	4240      	negs	r0, r0
    1d9a:	4303      	orrs	r3, r0
    1d9c:	a801      	add	r0, sp, #4
    1d9e:	7043      	strb	r3, [r0, #1]
    1da0:	e7ee      	b.n	1d80 <spi_cmd+0xc4>
		bc[1] = (uint8)(adr >> 16);
    1da2:	ab01      	add	r3, sp, #4
    1da4:	0c08      	lsrs	r0, r1, #16
    1da6:	7058      	strb	r0, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1da8:	0a08      	lsrs	r0, r1, #8
    1daa:	7098      	strb	r0, [r3, #2]
		bc[3] = (uint8)(adr);
    1dac:	70d9      	strb	r1, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    1dae:	0e11      	lsrs	r1, r2, #24
    1db0:	7119      	strb	r1, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    1db2:	0c11      	lsrs	r1, r2, #16
    1db4:	7159      	strb	r1, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    1db6:	0a11      	lsrs	r1, r2, #8
    1db8:	7199      	strb	r1, [r3, #6]
		bc[7] = (uint8)(u32data);
    1dba:	71da      	strb	r2, [r3, #7]
		len = 9;
    1dbc:	2109      	movs	r1, #9
		break;
    1dbe:	e793      	b.n	1ce8 <spi_cmd+0x2c>

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    1dc0:	2290      	movs	r2, #144	; 0x90
    1dc2:	0052      	lsls	r2, r2, #1
    1dc4:	4915      	ldr	r1, [pc, #84]	; (1e1c <spi_cmd+0x160>)
    1dc6:	4816      	ldr	r0, [pc, #88]	; (1e20 <spi_cmd+0x164>)
    1dc8:	4b16      	ldr	r3, [pc, #88]	; (1e24 <spi_cmd+0x168>)
    1dca:	4798      	blx	r3
    1dcc:	4816      	ldr	r0, [pc, #88]	; (1e28 <spi_cmd+0x16c>)
    1dce:	4b17      	ldr	r3, [pc, #92]	; (1e2c <spi_cmd+0x170>)
    1dd0:	4798      	blx	r3
    1dd2:	200d      	movs	r0, #13
    1dd4:	4b16      	ldr	r3, [pc, #88]	; (1e30 <spi_cmd+0x174>)
    1dd6:	4798      	blx	r3
			result = N_FAIL;
    1dd8:	2300      	movs	r3, #0
    1dda:	e017      	b.n	1e0c <spi_cmd+0x150>
	switch (cmd) {
    1ddc:	2300      	movs	r3, #0
    1dde:	e015      	b.n	1e0c <spi_cmd+0x150>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1de0:	1e4e      	subs	r6, r1, #1
    1de2:	aa01      	add	r2, sp, #4
    1de4:	1995      	adds	r5, r2, r6
    1de6:	237f      	movs	r3, #127	; 0x7f
	return crc7_syndrome_table[(crc << 1) ^ data];
    1de8:	4c12      	ldr	r4, [pc, #72]	; (1e34 <spi_cmd+0x178>)
    1dea:	005b      	lsls	r3, r3, #1
    1dec:	7810      	ldrb	r0, [r2, #0]
    1dee:	4043      	eors	r3, r0
    1df0:	5ce3      	ldrb	r3, [r4, r3]
    1df2:	3201      	adds	r2, #1
	while (len--)
    1df4:	42aa      	cmp	r2, r5
    1df6:	d1f8      	bne.n	1dea <spi_cmd+0x12e>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    1df8:	005b      	lsls	r3, r3, #1
    1dfa:	aa01      	add	r2, sp, #4
    1dfc:	5593      	strb	r3, [r2, r6]
		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    1dfe:	b289      	uxth	r1, r1
    1e00:	a801      	add	r0, sp, #4
    1e02:	4b0d      	ldr	r3, [pc, #52]	; (1e38 <spi_cmd+0x17c>)
    1e04:	4798      	blx	r3
    1e06:	2301      	movs	r3, #1
    1e08:	2800      	cmp	r0, #0
    1e0a:	d1d9      	bne.n	1dc0 <spi_cmd+0x104>
		}
	}

	return result;
}
    1e0c:	0018      	movs	r0, r3
    1e0e:	b004      	add	sp, #16
    1e10:	bd70      	pop	{r4, r5, r6, pc}
    1e12:	46c0      	nop			; (mov r8, r8)
    1e14:	0001d53c 	.word	0x0001d53c
    1e18:	20000ab4 	.word	0x20000ab4
    1e1c:	0001d57c 	.word	0x0001d57c
    1e20:	0001cd6c 	.word	0x0001cd6c
    1e24:	000182cd 	.word	0x000182cd
    1e28:	0001da0c 	.word	0x0001da0c
    1e2c:	000183a5 	.word	0x000183a5
    1e30:	000182f1 	.word	0x000182f1
    1e34:	0001d608 	.word	0x0001d608
    1e38:	00001c9d 	.word	0x00001c9d

00001e3c <nmi_spi_read>:
{
    1e3c:	b500      	push	{lr}
    1e3e:	b085      	sub	sp, #20
	spi.pu8InBuf = NULL;
    1e40:	ab01      	add	r3, sp, #4
    1e42:	2200      	movs	r2, #0
    1e44:	9201      	str	r2, [sp, #4]
	spi.pu8OutBuf = b;
    1e46:	9002      	str	r0, [sp, #8]
	spi.u16Sz = sz;
    1e48:	8119      	strh	r1, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1e4a:	0019      	movs	r1, r3
    1e4c:	2003      	movs	r0, #3
    1e4e:	4b02      	ldr	r3, [pc, #8]	; (1e58 <nmi_spi_read+0x1c>)
    1e50:	4798      	blx	r3
}
    1e52:	b005      	add	sp, #20
    1e54:	bd00      	pop	{pc}
    1e56:	46c0      	nop			; (mov r8, r8)
    1e58:	00000361 	.word	0x00000361

00001e5c <spi_cmd_rsp>:

	return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
    1e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e5e:	46c6      	mov	lr, r8
    1e60:	b500      	push	{lr}
    1e62:	b082      	sub	sp, #8
    1e64:	0007      	movs	r7, r0
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    1e66:	28cf      	cmp	r0, #207	; 0xcf
    1e68:	d02b      	beq.n	1ec2 <spi_cmd_rsp+0x66>
    1e6a:	0003      	movs	r3, r0
    1e6c:	333b      	adds	r3, #59	; 0x3b
    1e6e:	b2db      	uxtb	r3, r3
    1e70:	2b01      	cmp	r3, #1
    1e72:	d926      	bls.n	1ec2 <spi_cmd_rsp+0x66>
{
    1e74:	240b      	movs	r4, #11

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1e76:	466b      	mov	r3, sp
    1e78:	1dde      	adds	r6, r3, #7
    1e7a:	4b26      	ldr	r3, [pc, #152]	; (1f14 <spi_cmd_rsp+0xb8>)
    1e7c:	4698      	mov	r8, r3
    1e7e:	2101      	movs	r1, #1
    1e80:	0030      	movs	r0, r6
    1e82:	47c0      	blx	r8
    1e84:	1e05      	subs	r5, r0, #0
    1e86:	d125      	bne.n	1ed4 <spi_cmd_rsp+0x78>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    1e88:	7833      	ldrb	r3, [r6, #0]
    1e8a:	42bb      	cmp	r3, r7
    1e8c:	d030      	beq.n	1ef0 <spi_cmd_rsp+0x94>
    1e8e:	3c01      	subs	r4, #1
    1e90:	b2e4      	uxtb	r4, r4
    1e92:	2c00      	cmp	r4, #0
    1e94:	d1f3      	bne.n	1e7e <spi_cmd_rsp+0x22>
    1e96:	340b      	adds	r4, #11
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1e98:	466b      	mov	r3, sp
    1e9a:	1dde      	adds	r6, r3, #7
    1e9c:	4f1d      	ldr	r7, [pc, #116]	; (1f14 <spi_cmd_rsp+0xb8>)
    1e9e:	2101      	movs	r1, #1
    1ea0:	0030      	movs	r0, r6
    1ea2:	47b8      	blx	r7
    1ea4:	2800      	cmp	r0, #0
    1ea6:	d125      	bne.n	1ef4 <spi_cmd_rsp+0x98>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
			result = N_FAIL;
			goto _fail_;
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    1ea8:	7833      	ldrb	r3, [r6, #0]
    1eaa:	2b00      	cmp	r3, #0
    1eac:	d02f      	beq.n	1f0e <spi_cmd_rsp+0xb2>
    1eae:	3c01      	subs	r4, #1
    1eb0:	b2e4      	uxtb	r4, r4
    1eb2:	2c00      	cmp	r4, #0
    1eb4:	d1f3      	bne.n	1e9e <spi_cmd_rsp+0x42>
	sint8 result = N_OK;
    1eb6:	2501      	movs	r5, #1

_fail_:

	return result;
}
    1eb8:	0028      	movs	r0, r5
    1eba:	b002      	add	sp, #8
    1ebc:	bc04      	pop	{r2}
    1ebe:	4690      	mov	r8, r2
    1ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1ec2:	2101      	movs	r1, #1
    1ec4:	466b      	mov	r3, sp
    1ec6:	1dd8      	adds	r0, r3, #7
    1ec8:	4b12      	ldr	r3, [pc, #72]	; (1f14 <spi_cmd_rsp+0xb8>)
    1eca:	4798      	blx	r3
			result = N_FAIL;
    1ecc:	2500      	movs	r5, #0
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1ece:	2800      	cmp	r0, #0
    1ed0:	d0d0      	beq.n	1e74 <spi_cmd_rsp+0x18>
    1ed2:	e7f1      	b.n	1eb8 <spi_cmd_rsp+0x5c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1ed4:	225c      	movs	r2, #92	; 0x5c
    1ed6:	32ff      	adds	r2, #255	; 0xff
    1ed8:	490f      	ldr	r1, [pc, #60]	; (1f18 <spi_cmd_rsp+0xbc>)
    1eda:	4810      	ldr	r0, [pc, #64]	; (1f1c <spi_cmd_rsp+0xc0>)
    1edc:	4b10      	ldr	r3, [pc, #64]	; (1f20 <spi_cmd_rsp+0xc4>)
    1ede:	4798      	blx	r3
    1ee0:	4810      	ldr	r0, [pc, #64]	; (1f24 <spi_cmd_rsp+0xc8>)
    1ee2:	4b11      	ldr	r3, [pc, #68]	; (1f28 <spi_cmd_rsp+0xcc>)
    1ee4:	4798      	blx	r3
    1ee6:	200d      	movs	r0, #13
    1ee8:	4b10      	ldr	r3, [pc, #64]	; (1f2c <spi_cmd_rsp+0xd0>)
    1eea:	4798      	blx	r3
			result = N_FAIL;
    1eec:	2500      	movs	r5, #0
			goto _fail_;
    1eee:	e7e3      	b.n	1eb8 <spi_cmd_rsp+0x5c>
    1ef0:	240b      	movs	r4, #11
    1ef2:	e7d1      	b.n	1e98 <spi_cmd_rsp+0x3c>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    1ef4:	226a      	movs	r2, #106	; 0x6a
    1ef6:	32ff      	adds	r2, #255	; 0xff
    1ef8:	4907      	ldr	r1, [pc, #28]	; (1f18 <spi_cmd_rsp+0xbc>)
    1efa:	4808      	ldr	r0, [pc, #32]	; (1f1c <spi_cmd_rsp+0xc0>)
    1efc:	4b08      	ldr	r3, [pc, #32]	; (1f20 <spi_cmd_rsp+0xc4>)
    1efe:	4798      	blx	r3
    1f00:	4808      	ldr	r0, [pc, #32]	; (1f24 <spi_cmd_rsp+0xc8>)
    1f02:	4b09      	ldr	r3, [pc, #36]	; (1f28 <spi_cmd_rsp+0xcc>)
    1f04:	4798      	blx	r3
    1f06:	200d      	movs	r0, #13
    1f08:	4b08      	ldr	r3, [pc, #32]	; (1f2c <spi_cmd_rsp+0xd0>)
    1f0a:	4798      	blx	r3
			goto _fail_;
    1f0c:	e7d4      	b.n	1eb8 <spi_cmd_rsp+0x5c>
	sint8 result = N_OK;
    1f0e:	2501      	movs	r5, #1
    1f10:	e7d2      	b.n	1eb8 <spi_cmd_rsp+0x5c>
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	00001e3d 	.word	0x00001e3d
    1f18:	0001d594 	.word	0x0001d594
    1f1c:	0001cd6c 	.word	0x0001cd6c
    1f20:	000182cd 	.word	0x000182cd
    1f24:	0001da38 	.word	0x0001da38
    1f28:	000183a5 	.word	0x000183a5
    1f2c:	000182f1 	.word	0x000182f1

00001f30 <spi_data_read>:
_error_:
	return result;
}
#endif
static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    1f30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f32:	46de      	mov	lr, fp
    1f34:	4657      	mov	r7, sl
    1f36:	464e      	mov	r6, r9
    1f38:	4645      	mov	r5, r8
    1f3a:	b5e0      	push	{r5, r6, r7, lr}
    1f3c:	b087      	sub	sp, #28
    1f3e:	9001      	str	r0, [sp, #4]
    1f40:	4689      	mov	r9, r1
    1f42:	9202      	str	r2, [sp, #8]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    1f44:	2300      	movs	r3, #0
    1f46:	469a      	mov	sl, r3
    1f48:	2380      	movs	r3, #128	; 0x80
    1f4a:	019b      	lsls	r3, r3, #6
    1f4c:	469b      	mov	fp, r3
    1f4e:	466a      	mov	r2, sp
    1f50:	81d3      	strh	r3, [r2, #14]
		/**
			Data Response header
		**/
		retry = SPI_RESP_RETRY_COUNT;
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1f52:	4b3c      	ldr	r3, [pc, #240]	; (2044 <STACK_SIZE+0x44>)
    1f54:	4698      	mov	r8, r3
    1f56:	e02f      	b.n	1fb8 <spi_data_read+0x88>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    1f58:	22be      	movs	r2, #190	; 0xbe
    1f5a:	0092      	lsls	r2, r2, #2
    1f5c:	493a      	ldr	r1, [pc, #232]	; (2048 <STACK_SIZE+0x48>)
    1f5e:	483b      	ldr	r0, [pc, #236]	; (204c <STACK_SIZE+0x4c>)
    1f60:	4b3b      	ldr	r3, [pc, #236]	; (2050 <STACK_SIZE+0x50>)
    1f62:	4798      	blx	r3
    1f64:	483b      	ldr	r0, [pc, #236]	; (2054 <STACK_SIZE+0x54>)
    1f66:	4b3c      	ldr	r3, [pc, #240]	; (2058 <STACK_SIZE+0x58>)
    1f68:	4798      	blx	r3
    1f6a:	200d      	movs	r0, #13
    1f6c:	4b3b      	ldr	r3, [pc, #236]	; (205c <STACK_SIZE+0x5c>)
    1f6e:	4798      	blx	r3
    1f70:	2500      	movs	r5, #0
		sz -= nbytes;

	} while (sz);

	return result;
}
    1f72:	0028      	movs	r0, r5
    1f74:	b007      	add	sp, #28
    1f76:	bc3c      	pop	{r2, r3, r4, r5}
    1f78:	4690      	mov	r8, r2
    1f7a:	4699      	mov	r9, r3
    1f7c:	46a2      	mov	sl, r4
    1f7e:	46ab      	mov	fp, r5
    1f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (retry <= 0) {
    1f82:	2c00      	cmp	r4, #0
    1f84:	dd2e      	ble.n	1fe4 <spi_data_read+0xb4>
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    1f86:	9b01      	ldr	r3, [sp, #4]
    1f88:	4453      	add	r3, sl
    1f8a:	0018      	movs	r0, r3
    1f8c:	0039      	movs	r1, r7
    1f8e:	4b2d      	ldr	r3, [pc, #180]	; (2044 <STACK_SIZE+0x44>)
    1f90:	4798      	blx	r3
    1f92:	1e04      	subs	r4, r0, #0
    1f94:	d134      	bne.n	2000 <STACK_SIZE>
		if(!clockless)
    1f96:	9b02      	ldr	r3, [sp, #8]
    1f98:	2b00      	cmp	r3, #0
    1f9a:	d103      	bne.n	1fa4 <spi_data_read+0x74>
			if (!gu8Crc_off) {
    1f9c:	4b30      	ldr	r3, [pc, #192]	; (2060 <STACK_SIZE+0x60>)
    1f9e:	781b      	ldrb	r3, [r3, #0]
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	d039      	beq.n	2018 <STACK_SIZE+0x18>
		ix += nbytes;
    1fa4:	4653      	mov	r3, sl
    1fa6:	18fb      	adds	r3, r7, r3
    1fa8:	b21b      	sxth	r3, r3
    1faa:	469a      	mov	sl, r3
		sz -= nbytes;
    1fac:	464b      	mov	r3, r9
    1fae:	1bdf      	subs	r7, r3, r7
    1fb0:	b2bb      	uxth	r3, r7
    1fb2:	4699      	mov	r9, r3
	} while (sz);
    1fb4:	2b00      	cmp	r3, #0
    1fb6:	d043      	beq.n	2040 <STACK_SIZE+0x40>
    1fb8:	464f      	mov	r7, r9
    1fba:	45d9      	cmp	r9, fp
    1fbc:	d901      	bls.n	1fc2 <spi_data_read+0x92>
    1fbe:	466b      	mov	r3, sp
    1fc0:	89df      	ldrh	r7, [r3, #14]
    1fc2:	b2bf      	uxth	r7, r7
		retry = SPI_RESP_RETRY_COUNT;
    1fc4:	240a      	movs	r4, #10
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    1fc6:	ab04      	add	r3, sp, #16
    1fc8:	1cde      	adds	r6, r3, #3
    1fca:	2101      	movs	r1, #1
    1fcc:	0030      	movs	r0, r6
    1fce:	47c0      	blx	r8
    1fd0:	1e05      	subs	r5, r0, #0
    1fd2:	d1c1      	bne.n	1f58 <spi_data_read+0x28>
			if (((rsp >> 4) & 0xf) == 0xf)
    1fd4:	7833      	ldrb	r3, [r6, #0]
    1fd6:	091b      	lsrs	r3, r3, #4
    1fd8:	2b0f      	cmp	r3, #15
    1fda:	d0d2      	beq.n	1f82 <spi_data_read+0x52>
    1fdc:	3c01      	subs	r4, #1
    1fde:	b224      	sxth	r4, r4
		} while (retry--);
    1fe0:	1c63      	adds	r3, r4, #1
    1fe2:	d1f2      	bne.n	1fca <spi_data_read+0x9a>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    1fe4:	22c1      	movs	r2, #193	; 0xc1
    1fe6:	0092      	lsls	r2, r2, #2
    1fe8:	4917      	ldr	r1, [pc, #92]	; (2048 <STACK_SIZE+0x48>)
    1fea:	4818      	ldr	r0, [pc, #96]	; (204c <STACK_SIZE+0x4c>)
    1fec:	4c18      	ldr	r4, [pc, #96]	; (2050 <STACK_SIZE+0x50>)
    1fee:	47a0      	blx	r4
    1ff0:	ab04      	add	r3, sp, #16
    1ff2:	78d9      	ldrb	r1, [r3, #3]
    1ff4:	481b      	ldr	r0, [pc, #108]	; (2064 <STACK_SIZE+0x64>)
    1ff6:	47a0      	blx	r4
    1ff8:	200d      	movs	r0, #13
    1ffa:	4b18      	ldr	r3, [pc, #96]	; (205c <STACK_SIZE+0x5c>)
    1ffc:	4798      	blx	r3
			break;
    1ffe:	e7b8      	b.n	1f72 <spi_data_read+0x42>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    2000:	4a19      	ldr	r2, [pc, #100]	; (2068 <STACK_SIZE+0x68>)
    2002:	4911      	ldr	r1, [pc, #68]	; (2048 <STACK_SIZE+0x48>)
    2004:	4811      	ldr	r0, [pc, #68]	; (204c <STACK_SIZE+0x4c>)
    2006:	4b12      	ldr	r3, [pc, #72]	; (2050 <STACK_SIZE+0x50>)
    2008:	4798      	blx	r3
    200a:	4818      	ldr	r0, [pc, #96]	; (206c <STACK_SIZE+0x6c>)
    200c:	4b12      	ldr	r3, [pc, #72]	; (2058 <STACK_SIZE+0x58>)
    200e:	4798      	blx	r3
    2010:	200d      	movs	r0, #13
    2012:	4b12      	ldr	r3, [pc, #72]	; (205c <STACK_SIZE+0x5c>)
    2014:	4798      	blx	r3
			break;
    2016:	e7ac      	b.n	1f72 <spi_data_read+0x42>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    2018:	2102      	movs	r1, #2
    201a:	a805      	add	r0, sp, #20
    201c:	4b09      	ldr	r3, [pc, #36]	; (2044 <STACK_SIZE+0x44>)
    201e:	4798      	blx	r3
    2020:	2800      	cmp	r0, #0
    2022:	d0bf      	beq.n	1fa4 <spi_data_read+0x74>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    2024:	22c6      	movs	r2, #198	; 0xc6
    2026:	0092      	lsls	r2, r2, #2
    2028:	4907      	ldr	r1, [pc, #28]	; (2048 <STACK_SIZE+0x48>)
    202a:	4808      	ldr	r0, [pc, #32]	; (204c <STACK_SIZE+0x4c>)
    202c:	4b08      	ldr	r3, [pc, #32]	; (2050 <STACK_SIZE+0x50>)
    202e:	4798      	blx	r3
    2030:	480f      	ldr	r0, [pc, #60]	; (2070 <STACK_SIZE+0x70>)
    2032:	4b09      	ldr	r3, [pc, #36]	; (2058 <STACK_SIZE+0x58>)
    2034:	4798      	blx	r3
    2036:	200d      	movs	r0, #13
    2038:	4b08      	ldr	r3, [pc, #32]	; (205c <STACK_SIZE+0x5c>)
    203a:	4798      	blx	r3
					result = N_FAIL;
    203c:	0025      	movs	r5, r4
					break;
    203e:	e798      	b.n	1f72 <spi_data_read+0x42>
    2040:	2501      	movs	r5, #1
    2042:	e796      	b.n	1f72 <spi_data_read+0x42>
    2044:	00001e3d 	.word	0x00001e3d
    2048:	0001d5a0 	.word	0x0001d5a0
    204c:	0001cd6c 	.word	0x0001cd6c
    2050:	000182cd 	.word	0x000182cd
    2054:	0001da6c 	.word	0x0001da6c
    2058:	000183a5 	.word	0x000183a5
    205c:	000182f1 	.word	0x000182f1
    2060:	20000ab4 	.word	0x20000ab4
    2064:	0001daa0 	.word	0x0001daa0
    2068:	0000030d 	.word	0x0000030d
    206c:	0001dad0 	.word	0x0001dad0
    2070:	0001db00 	.word	0x0001db00

00002074 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    2074:	b5f0      	push	{r4, r5, r6, r7, lr}
    2076:	46d6      	mov	lr, sl
    2078:	464f      	mov	r7, r9
    207a:	4646      	mov	r6, r8
    207c:	b5c0      	push	{r6, r7, lr}
    207e:	b086      	sub	sp, #24
    2080:	9003      	str	r0, [sp, #12]
    2082:	9104      	str	r1, [sp, #16]
    2084:	2830      	cmp	r0, #48	; 0x30
    2086:	d80f      	bhi.n	20a8 <spi_write_reg+0x34>
    2088:	4b30      	ldr	r3, [pc, #192]	; (214c <spi_write_reg+0xd8>)
    208a:	781f      	ldrb	r7, [r3, #0]
    208c:	b2fb      	uxtb	r3, r7
    208e:	9305      	str	r3, [sp, #20]
    2090:	2300      	movs	r3, #0
    2092:	2230      	movs	r2, #48	; 0x30
    2094:	9903      	ldr	r1, [sp, #12]
    2096:	428a      	cmp	r2, r1
    2098:	415b      	adcs	r3, r3
    209a:	b2db      	uxtb	r3, r3
    209c:	469a      	mov	sl, r3
    209e:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_WRITE;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    20a0:	4b2b      	ldr	r3, [pc, #172]	; (2150 <spi_write_reg+0xdc>)
    20a2:	4698      	mov	r8, r3
		goto _FAIL_;
	}

	result = spi_cmd_rsp(cmd);
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    20a4:	46d1      	mov	r9, sl
    20a6:	e033      	b.n	2110 <spi_write_reg+0x9c>
    20a8:	4b2a      	ldr	r3, [pc, #168]	; (2154 <spi_write_reg+0xe0>)
    20aa:	781f      	ldrb	r7, [r3, #0]
    20ac:	e7ee      	b.n	208c <spi_write_reg+0x18>
	result = spi_cmd_rsp(cmd);
    20ae:	9805      	ldr	r0, [sp, #20]
    20b0:	4b29      	ldr	r3, [pc, #164]	; (2158 <spi_write_reg+0xe4>)
    20b2:	4798      	blx	r3
    20b4:	0004      	movs	r4, r0
	if (result != N_OK) {
    20b6:	2801      	cmp	r0, #1
    20b8:	d041      	beq.n	213e <spi_write_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    20ba:	4a28      	ldr	r2, [pc, #160]	; (215c <spi_write_reg+0xe8>)
    20bc:	4928      	ldr	r1, [pc, #160]	; (2160 <spi_write_reg+0xec>)
    20be:	4829      	ldr	r0, [pc, #164]	; (2164 <spi_write_reg+0xf0>)
    20c0:	4e29      	ldr	r6, [pc, #164]	; (2168 <spi_write_reg+0xf4>)
    20c2:	47b0      	blx	r6
    20c4:	9903      	ldr	r1, [sp, #12]
    20c6:	4829      	ldr	r0, [pc, #164]	; (216c <spi_write_reg+0xf8>)
    20c8:	47b0      	blx	r6
    20ca:	200d      	movs	r0, #13
    20cc:	4b28      	ldr	r3, [pc, #160]	; (2170 <spi_write_reg+0xfc>)
    20ce:	4798      	blx	r3

#endif
_FAIL_:
	if(result != N_OK)
	{
		nm_bsp_sleep(1);
    20d0:	2001      	movs	r0, #1
    20d2:	4e28      	ldr	r6, [pc, #160]	; (2174 <spi_write_reg+0x100>)
    20d4:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    20d6:	2300      	movs	r3, #0
    20d8:	9300      	str	r3, [sp, #0]
    20da:	2200      	movs	r2, #0
    20dc:	2100      	movs	r1, #0
    20de:	20cf      	movs	r0, #207	; 0xcf
    20e0:	4f1b      	ldr	r7, [pc, #108]	; (2150 <spi_write_reg+0xdc>)
    20e2:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    20e4:	20cf      	movs	r0, #207	; 0xcf
    20e6:	4b1c      	ldr	r3, [pc, #112]	; (2158 <spi_write_reg+0xe4>)
    20e8:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
    20ea:	22ea      	movs	r2, #234	; 0xea
    20ec:	0092      	lsls	r2, r2, #2
    20ee:	491c      	ldr	r1, [pc, #112]	; (2160 <spi_write_reg+0xec>)
    20f0:	481c      	ldr	r0, [pc, #112]	; (2164 <spi_write_reg+0xf0>)
    20f2:	4f1d      	ldr	r7, [pc, #116]	; (2168 <spi_write_reg+0xf4>)
    20f4:	47b8      	blx	r7
    20f6:	9b04      	ldr	r3, [sp, #16]
    20f8:	9a03      	ldr	r2, [sp, #12]
    20fa:	0029      	movs	r1, r5
    20fc:	481e      	ldr	r0, [pc, #120]	; (2178 <spi_write_reg+0x104>)
    20fe:	47b8      	blx	r7
    2100:	200d      	movs	r0, #13
    2102:	4b1b      	ldr	r3, [pc, #108]	; (2170 <spi_write_reg+0xfc>)
    2104:	4798      	blx	r3
		nm_bsp_sleep(1);
    2106:	2001      	movs	r0, #1
    2108:	47b0      	blx	r6
    210a:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    210c:	2d00      	cmp	r5, #0
    210e:	d016      	beq.n	213e <spi_write_reg+0xca>
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    2110:	464b      	mov	r3, r9
    2112:	9300      	str	r3, [sp, #0]
    2114:	2304      	movs	r3, #4
    2116:	9a04      	ldr	r2, [sp, #16]
    2118:	9f03      	ldr	r7, [sp, #12]
    211a:	0039      	movs	r1, r7
    211c:	9805      	ldr	r0, [sp, #20]
    211e:	47c0      	blx	r8
    2120:	0004      	movs	r4, r0
	if (result != N_OK) {
    2122:	2801      	cmp	r0, #1
    2124:	d0c3      	beq.n	20ae <spi_write_reg+0x3a>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    2126:	4a15      	ldr	r2, [pc, #84]	; (217c <spi_write_reg+0x108>)
    2128:	490d      	ldr	r1, [pc, #52]	; (2160 <spi_write_reg+0xec>)
    212a:	480e      	ldr	r0, [pc, #56]	; (2164 <spi_write_reg+0xf0>)
    212c:	4e0e      	ldr	r6, [pc, #56]	; (2168 <spi_write_reg+0xf4>)
    212e:	47b0      	blx	r6
    2130:	0039      	movs	r1, r7
    2132:	4813      	ldr	r0, [pc, #76]	; (2180 <spi_write_reg+0x10c>)
    2134:	47b0      	blx	r6
    2136:	200d      	movs	r0, #13
    2138:	4b0d      	ldr	r3, [pc, #52]	; (2170 <spi_write_reg+0xfc>)
    213a:	4798      	blx	r3
		goto _FAIL_;
    213c:	e7c8      	b.n	20d0 <spi_write_reg+0x5c>
	}

	return result;
}
    213e:	0020      	movs	r0, r4
    2140:	b006      	add	sp, #24
    2142:	bc1c      	pop	{r2, r3, r4}
    2144:	4690      	mov	r8, r2
    2146:	4699      	mov	r9, r3
    2148:	46a2      	mov	sl, r4
    214a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    214c:	0001d578 	.word	0x0001d578
    2150:	00001cbd 	.word	0x00001cbd
    2154:	0001d579 	.word	0x0001d579
    2158:	00001e5d 	.word	0x00001e5d
    215c:	00000395 	.word	0x00000395
    2160:	0001d5c0 	.word	0x0001d5c0
    2164:	0001cd6c 	.word	0x0001cd6c
    2168:	000182cd 	.word	0x000182cd
    216c:	0001dbf8 	.word	0x0001dbf8
    2170:	000182f1 	.word	0x000182f1
    2174:	00000141 	.word	0x00000141
    2178:	0001dc30 	.word	0x0001dc30
    217c:	0000038f 	.word	0x0000038f
    2180:	0001dbcc 	.word	0x0001dbcc

00002184 <spi_read_reg>:

	return result;
}

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    2184:	b5f0      	push	{r4, r5, r6, r7, lr}
    2186:	46de      	mov	lr, fp
    2188:	4657      	mov	r7, sl
    218a:	464e      	mov	r6, r9
    218c:	4645      	mov	r5, r8
    218e:	b5e0      	push	{r5, r6, r7, lr}
    2190:	b087      	sub	sp, #28
    2192:	9002      	str	r0, [sp, #8]
    2194:	468b      	mov	fp, r1
    2196:	28ff      	cmp	r0, #255	; 0xff
    2198:	d80f      	bhi.n	21ba <spi_read_reg+0x36>
    219a:	4b41      	ldr	r3, [pc, #260]	; (22a0 <spi_read_reg+0x11c>)
    219c:	781f      	ldrb	r7, [r3, #0]
    219e:	b2fb      	uxtb	r3, r7
    21a0:	9303      	str	r3, [sp, #12]
    21a2:	2300      	movs	r3, #0
    21a4:	22ff      	movs	r2, #255	; 0xff
    21a6:	9902      	ldr	r1, [sp, #8]
    21a8:	428a      	cmp	r2, r1
    21aa:	415b      	adcs	r3, r3
    21ac:	b2db      	uxtb	r3, r3
    21ae:	469a      	mov	sl, r3
    21b0:	250a      	movs	r5, #10
		cmd = CMD_SINGLE_READ;
		clockless = 0;
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    21b2:	4b3c      	ldr	r3, [pc, #240]	; (22a4 <spi_read_reg+0x120>)
    21b4:	4698      	mov	r8, r3
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}

	/* to avoid endianness issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    21b6:	46d1      	mov	r9, sl
    21b8:	e031      	b.n	221e <spi_read_reg+0x9a>
    21ba:	4b3b      	ldr	r3, [pc, #236]	; (22a8 <spi_read_reg+0x124>)
    21bc:	781f      	ldrb	r7, [r3, #0]
    21be:	e7ee      	b.n	219e <spi_read_reg+0x1a>
	result = spi_cmd_rsp(cmd);
    21c0:	9803      	ldr	r0, [sp, #12]
    21c2:	4b3a      	ldr	r3, [pc, #232]	; (22ac <spi_read_reg+0x128>)
    21c4:	4798      	blx	r3
    21c6:	0004      	movs	r4, r0
	if (result != N_OK) {
    21c8:	2801      	cmp	r0, #1
    21ca:	d040      	beq.n	224e <spi_read_reg+0xca>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    21cc:	4a38      	ldr	r2, [pc, #224]	; (22b0 <spi_read_reg+0x12c>)
    21ce:	4939      	ldr	r1, [pc, #228]	; (22b4 <spi_read_reg+0x130>)
    21d0:	4839      	ldr	r0, [pc, #228]	; (22b8 <spi_read_reg+0x134>)
    21d2:	4e3a      	ldr	r6, [pc, #232]	; (22bc <spi_read_reg+0x138>)
    21d4:	47b0      	blx	r6
    21d6:	9902      	ldr	r1, [sp, #8]
    21d8:	4839      	ldr	r0, [pc, #228]	; (22c0 <spi_read_reg+0x13c>)
    21da:	47b0      	blx	r6
    21dc:	200d      	movs	r0, #13
    21de:	4b39      	ldr	r3, [pc, #228]	; (22c4 <spi_read_reg+0x140>)
    21e0:	4798      	blx	r3
		
_FAIL_:
	if(result != N_OK)
	{
		
		nm_bsp_sleep(1);
    21e2:	2001      	movs	r0, #1
    21e4:	4e38      	ldr	r6, [pc, #224]	; (22c8 <spi_read_reg+0x144>)
    21e6:	47b0      	blx	r6
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    21e8:	2300      	movs	r3, #0
    21ea:	9300      	str	r3, [sp, #0]
    21ec:	2200      	movs	r2, #0
    21ee:	2100      	movs	r1, #0
    21f0:	20cf      	movs	r0, #207	; 0xcf
    21f2:	4f2c      	ldr	r7, [pc, #176]	; (22a4 <spi_read_reg+0x120>)
    21f4:	47b8      	blx	r7
		spi_cmd_rsp(CMD_RESET);
    21f6:	20cf      	movs	r0, #207	; 0xcf
    21f8:	4b2c      	ldr	r3, [pc, #176]	; (22ac <spi_read_reg+0x128>)
    21fa:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
    21fc:	4a33      	ldr	r2, [pc, #204]	; (22cc <spi_read_reg+0x148>)
    21fe:	492d      	ldr	r1, [pc, #180]	; (22b4 <spi_read_reg+0x130>)
    2200:	482d      	ldr	r0, [pc, #180]	; (22b8 <spi_read_reg+0x134>)
    2202:	4f2e      	ldr	r7, [pc, #184]	; (22bc <spi_read_reg+0x138>)
    2204:	47b8      	blx	r7
    2206:	9a02      	ldr	r2, [sp, #8]
    2208:	0029      	movs	r1, r5
    220a:	4831      	ldr	r0, [pc, #196]	; (22d0 <spi_read_reg+0x14c>)
    220c:	47b8      	blx	r7
    220e:	200d      	movs	r0, #13
    2210:	4b2c      	ldr	r3, [pc, #176]	; (22c4 <spi_read_reg+0x140>)
    2212:	4798      	blx	r3
		nm_bsp_sleep(1);
    2214:	2001      	movs	r0, #1
    2216:	47b0      	blx	r6
    2218:	3d01      	subs	r5, #1
		retry--;
		if(retry) goto _RETRY_;
    221a:	2d00      	cmp	r5, #0
    221c:	d038      	beq.n	2290 <spi_read_reg+0x10c>
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    221e:	464b      	mov	r3, r9
    2220:	9300      	str	r3, [sp, #0]
    2222:	2304      	movs	r3, #4
    2224:	2200      	movs	r2, #0
    2226:	9f02      	ldr	r7, [sp, #8]
    2228:	0039      	movs	r1, r7
    222a:	9803      	ldr	r0, [sp, #12]
    222c:	47c0      	blx	r8
    222e:	0004      	movs	r4, r0
	if (result != N_OK) {
    2230:	2801      	cmp	r0, #1
    2232:	d0c5      	beq.n	21c0 <spi_read_reg+0x3c>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    2234:	2282      	movs	r2, #130	; 0x82
    2236:	00d2      	lsls	r2, r2, #3
    2238:	491e      	ldr	r1, [pc, #120]	; (22b4 <spi_read_reg+0x130>)
    223a:	481f      	ldr	r0, [pc, #124]	; (22b8 <spi_read_reg+0x134>)
    223c:	4e1f      	ldr	r6, [pc, #124]	; (22bc <spi_read_reg+0x138>)
    223e:	47b0      	blx	r6
    2240:	0039      	movs	r1, r7
    2242:	4824      	ldr	r0, [pc, #144]	; (22d4 <spi_read_reg+0x150>)
    2244:	47b0      	blx	r6
    2246:	200d      	movs	r0, #13
    2248:	4b1e      	ldr	r3, [pc, #120]	; (22c4 <spi_read_reg+0x140>)
    224a:	4798      	blx	r3
		goto _FAIL_;
    224c:	e7c9      	b.n	21e2 <spi_read_reg+0x5e>
	result = spi_data_read(&tmp[0], 4, clockless);
    224e:	464a      	mov	r2, r9
    2250:	2104      	movs	r1, #4
    2252:	a805      	add	r0, sp, #20
    2254:	4b20      	ldr	r3, [pc, #128]	; (22d8 <spi_read_reg+0x154>)
    2256:	4798      	blx	r3
    2258:	0004      	movs	r4, r0
	if (result != N_OK) {
    225a:	2801      	cmp	r0, #1
    225c:	d00b      	beq.n	2276 <spi_read_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    225e:	4a1f      	ldr	r2, [pc, #124]	; (22dc <spi_read_reg+0x158>)
    2260:	4914      	ldr	r1, [pc, #80]	; (22b4 <spi_read_reg+0x130>)
    2262:	4815      	ldr	r0, [pc, #84]	; (22b8 <spi_read_reg+0x134>)
    2264:	4b15      	ldr	r3, [pc, #84]	; (22bc <spi_read_reg+0x138>)
    2266:	4798      	blx	r3
    2268:	481d      	ldr	r0, [pc, #116]	; (22e0 <spi_read_reg+0x15c>)
    226a:	4b1e      	ldr	r3, [pc, #120]	; (22e4 <spi_read_reg+0x160>)
    226c:	4798      	blx	r3
    226e:	200d      	movs	r0, #13
    2270:	4b14      	ldr	r3, [pc, #80]	; (22c4 <spi_read_reg+0x140>)
    2272:	4798      	blx	r3
		goto _FAIL_;
    2274:	e7b5      	b.n	21e2 <spi_read_reg+0x5e>
		((uint32)tmp[1] << 8) |
    2276:	aa05      	add	r2, sp, #20
    2278:	7853      	ldrb	r3, [r2, #1]
    227a:	021b      	lsls	r3, r3, #8
		((uint32)tmp[2] << 16) |
    227c:	7891      	ldrb	r1, [r2, #2]
    227e:	0409      	lsls	r1, r1, #16
		((uint32)tmp[1] << 8) |
    2280:	430b      	orrs	r3, r1
	*u32data = tmp[0] |
    2282:	7811      	ldrb	r1, [r2, #0]
		((uint32)tmp[1] << 8) |
    2284:	430b      	orrs	r3, r1
		((uint32)tmp[3] << 24);
    2286:	78d2      	ldrb	r2, [r2, #3]
    2288:	0612      	lsls	r2, r2, #24
		((uint32)tmp[2] << 16) |
    228a:	4313      	orrs	r3, r2
	*u32data = tmp[0] |
    228c:	465a      	mov	r2, fp
    228e:	6013      	str	r3, [r2, #0]
	}
		
	return result;
}
    2290:	0020      	movs	r0, r4
    2292:	b007      	add	sp, #28
    2294:	bc3c      	pop	{r2, r3, r4, r5}
    2296:	4690      	mov	r8, r2
    2298:	4699      	mov	r9, r3
    229a:	46a2      	mov	sl, r4
    229c:	46ab      	mov	fp, r5
    229e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22a0:	0001d57a 	.word	0x0001d57a
    22a4:	00001cbd 	.word	0x00001cbd
    22a8:	0001d57b 	.word	0x0001d57b
    22ac:	00001e5d 	.word	0x00001e5d
    22b0:	00000416 	.word	0x00000416
    22b4:	0001d5e0 	.word	0x0001d5e0
    22b8:	0001cd6c 	.word	0x0001cd6c
    22bc:	000182cd 	.word	0x000182cd
    22c0:	0001db60 	.word	0x0001db60
    22c4:	000182f1 	.word	0x000182f1
    22c8:	00000141 	.word	0x00000141
    22cc:	00000435 	.word	0x00000435
    22d0:	0001dbb4 	.word	0x0001dbb4
    22d4:	0001db34 	.word	0x0001db34
    22d8:	00001f31 	.word	0x00001f31
    22dc:	0000041d 	.word	0x0000041d
    22e0:	0001db94 	.word	0x0001db94
    22e4:	000183a5 	.word	0x000183a5

000022e8 <nm_spi_reset>:
	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
}

sint8 nm_spi_reset(void)
{
    22e8:	b510      	push	{r4, lr}
    22ea:	b082      	sub	sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
    22ec:	2300      	movs	r3, #0
    22ee:	9300      	str	r3, [sp, #0]
    22f0:	2200      	movs	r2, #0
    22f2:	2100      	movs	r1, #0
    22f4:	20cf      	movs	r0, #207	; 0xcf
    22f6:	4c04      	ldr	r4, [pc, #16]	; (2308 <nm_spi_reset+0x20>)
    22f8:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
    22fa:	20cf      	movs	r0, #207	; 0xcf
    22fc:	4b03      	ldr	r3, [pc, #12]	; (230c <nm_spi_reset+0x24>)
    22fe:	4798      	blx	r3
	return M2M_SUCCESS;
}
    2300:	2000      	movs	r0, #0
    2302:	b002      	add	sp, #8
    2304:	bd10      	pop	{r4, pc}
    2306:	46c0      	nop			; (mov r8, r8)
    2308:	00001cbd 	.word	0x00001cbd
    230c:	00001e5d 	.word	0x00001e5d

00002310 <nm_spi_deinit>:
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
	gu8Crc_off = 0;
    2310:	2200      	movs	r2, #0
    2312:	4b02      	ldr	r3, [pc, #8]	; (231c <nm_spi_deinit+0xc>)
    2314:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
}
    2316:	2000      	movs	r0, #0
    2318:	4770      	bx	lr
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	20000ab4 	.word	0x20000ab4

00002320 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    2320:	b500      	push	{lr}
    2322:	b083      	sub	sp, #12
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    2324:	a901      	add	r1, sp, #4
    2326:	4b02      	ldr	r3, [pc, #8]	; (2330 <nm_spi_read_reg+0x10>)
    2328:	4798      	blx	r3

	return u32Val;
}
    232a:	9801      	ldr	r0, [sp, #4]
    232c:	b003      	add	sp, #12
    232e:	bd00      	pop	{pc}
    2330:	00002185 	.word	0x00002185

00002334 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2334:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    2336:	4b04      	ldr	r3, [pc, #16]	; (2348 <nm_spi_read_reg_with_ret+0x14>)
    2338:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    233a:	2300      	movs	r3, #0
    233c:	2801      	cmp	r0, #1
    233e:	d101      	bne.n	2344 <nm_spi_read_reg_with_ret+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2340:	0018      	movs	r0, r3
    2342:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    2344:	3b06      	subs	r3, #6
    2346:	e7fb      	b.n	2340 <nm_spi_read_reg_with_ret+0xc>
    2348:	00002185 	.word	0x00002185

0000234c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    234c:	b510      	push	{r4, lr}
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    234e:	4b04      	ldr	r3, [pc, #16]	; (2360 <nm_spi_write_reg+0x14>)
    2350:	4798      	blx	r3

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2352:	2300      	movs	r3, #0
    2354:	2801      	cmp	r0, #1
    2356:	d101      	bne.n	235c <nm_spi_write_reg+0x10>
	else s8Ret = M2M_ERR_BUS_FAIL;

	return s8Ret;
}
    2358:	0018      	movs	r0, r3
    235a:	bd10      	pop	{r4, pc}
	else s8Ret = M2M_ERR_BUS_FAIL;
    235c:	3b06      	subs	r3, #6
    235e:	e7fb      	b.n	2358 <nm_spi_write_reg+0xc>
    2360:	00002075 	.word	0x00002075

00002364 <nm_spi_init>:
{
    2364:	b510      	push	{r4, lr}
    2366:	b082      	sub	sp, #8
	uint32 reg = 0;
    2368:	2300      	movs	r3, #0
    236a:	9300      	str	r3, [sp, #0]
	gu8Crc_off = 0;
    236c:	4a35      	ldr	r2, [pc, #212]	; (2444 <nm_spi_init+0xe0>)
    236e:	7013      	strb	r3, [r2, #0]
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    2370:	4669      	mov	r1, sp
    2372:	4835      	ldr	r0, [pc, #212]	; (2448 <nm_spi_init+0xe4>)
    2374:	4b35      	ldr	r3, [pc, #212]	; (244c <nm_spi_init+0xe8>)
    2376:	4798      	blx	r3
    2378:	2800      	cmp	r0, #0
    237a:	d028      	beq.n	23ce <nm_spi_init+0x6a>
	if(gu8Crc_off == 0)
    237c:	4b31      	ldr	r3, [pc, #196]	; (2444 <nm_spi_init+0xe0>)
    237e:	781b      	ldrb	r3, [r3, #0]
    2380:	2b00      	cmp	r3, #0
    2382:	d10d      	bne.n	23a0 <nm_spi_init+0x3c>
		reg &= ~0x70;
    2384:	337c      	adds	r3, #124	; 0x7c
    2386:	9900      	ldr	r1, [sp, #0]
    2388:	4399      	bics	r1, r3
		reg |= (0x5 << 4);
    238a:	3b2c      	subs	r3, #44	; 0x2c
    238c:	4319      	orrs	r1, r3
    238e:	9100      	str	r1, [sp, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    2390:	482d      	ldr	r0, [pc, #180]	; (2448 <nm_spi_init+0xe4>)
    2392:	4b2f      	ldr	r3, [pc, #188]	; (2450 <nm_spi_init+0xec>)
    2394:	4798      	blx	r3
    2396:	1e04      	subs	r4, r0, #0
    2398:	d03a      	beq.n	2410 <nm_spi_init+0xac>
		gu8Crc_off = 1;
    239a:	2201      	movs	r2, #1
    239c:	4b29      	ldr	r3, [pc, #164]	; (2444 <nm_spi_init+0xe0>)
    239e:	701a      	strb	r2, [r3, #0]
	if (!spi_read_reg(0x1000, &chipid)) {
    23a0:	a901      	add	r1, sp, #4
    23a2:	2080      	movs	r0, #128	; 0x80
    23a4:	0140      	lsls	r0, r0, #5
    23a6:	4b29      	ldr	r3, [pc, #164]	; (244c <nm_spi_init+0xe8>)
    23a8:	4798      	blx	r3
    23aa:	2800      	cmp	r0, #0
    23ac:	d03c      	beq.n	2428 <nm_spi_init+0xc4>
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    23ae:	4c26      	ldr	r4, [pc, #152]	; (2448 <nm_spi_init+0xe4>)
    23b0:	0020      	movs	r0, r4
    23b2:	4b28      	ldr	r3, [pc, #160]	; (2454 <nm_spi_init+0xf0>)
    23b4:	4798      	blx	r3
	val32 &= ~(0x7 << 4);
    23b6:	2370      	movs	r3, #112	; 0x70
    23b8:	0001      	movs	r1, r0
    23ba:	4399      	bics	r1, r3
	case 8192: val32 |= (5 << 4); break;
    23bc:	2050      	movs	r0, #80	; 0x50
    23be:	4301      	orrs	r1, r0
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    23c0:	0020      	movs	r0, r4
    23c2:	4b25      	ldr	r3, [pc, #148]	; (2458 <nm_spi_init+0xf4>)
    23c4:	4798      	blx	r3
	return M2M_SUCCESS;
    23c6:	2400      	movs	r4, #0
}
    23c8:	0020      	movs	r0, r4
    23ca:	b002      	add	sp, #8
    23cc:	bd10      	pop	{r4, pc}
		gu8Crc_off = 1;
    23ce:	2201      	movs	r2, #1
    23d0:	4b1c      	ldr	r3, [pc, #112]	; (2444 <nm_spi_init+0xe0>)
    23d2:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retrying with CRC off...\n");
    23d4:	2298      	movs	r2, #152	; 0x98
    23d6:	00d2      	lsls	r2, r2, #3
    23d8:	4920      	ldr	r1, [pc, #128]	; (245c <nm_spi_init+0xf8>)
    23da:	4821      	ldr	r0, [pc, #132]	; (2460 <nm_spi_init+0xfc>)
    23dc:	4b21      	ldr	r3, [pc, #132]	; (2464 <nm_spi_init+0x100>)
    23de:	4798      	blx	r3
    23e0:	4821      	ldr	r0, [pc, #132]	; (2468 <nm_spi_init+0x104>)
    23e2:	4b22      	ldr	r3, [pc, #136]	; (246c <nm_spi_init+0x108>)
    23e4:	4798      	blx	r3
    23e6:	200d      	movs	r0, #13
    23e8:	4b21      	ldr	r3, [pc, #132]	; (2470 <nm_spi_init+0x10c>)
    23ea:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    23ec:	4669      	mov	r1, sp
    23ee:	4816      	ldr	r0, [pc, #88]	; (2448 <nm_spi_init+0xe4>)
    23f0:	4b16      	ldr	r3, [pc, #88]	; (244c <nm_spi_init+0xe8>)
    23f2:	4798      	blx	r3
    23f4:	1e04      	subs	r4, r0, #0
    23f6:	d1c1      	bne.n	237c <nm_spi_init+0x18>
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    23f8:	4a1e      	ldr	r2, [pc, #120]	; (2474 <nm_spi_init+0x110>)
    23fa:	4918      	ldr	r1, [pc, #96]	; (245c <nm_spi_init+0xf8>)
    23fc:	4818      	ldr	r0, [pc, #96]	; (2460 <nm_spi_init+0xfc>)
    23fe:	4b19      	ldr	r3, [pc, #100]	; (2464 <nm_spi_init+0x100>)
    2400:	4798      	blx	r3
    2402:	481d      	ldr	r0, [pc, #116]	; (2478 <nm_spi_init+0x114>)
    2404:	4b19      	ldr	r3, [pc, #100]	; (246c <nm_spi_init+0x108>)
    2406:	4798      	blx	r3
    2408:	200d      	movs	r0, #13
    240a:	4b19      	ldr	r3, [pc, #100]	; (2470 <nm_spi_init+0x10c>)
    240c:	4798      	blx	r3
			return 0;
    240e:	e7db      	b.n	23c8 <nm_spi_init+0x64>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    2410:	4a1a      	ldr	r2, [pc, #104]	; (247c <nm_spi_init+0x118>)
    2412:	4912      	ldr	r1, [pc, #72]	; (245c <nm_spi_init+0xf8>)
    2414:	4812      	ldr	r0, [pc, #72]	; (2460 <nm_spi_init+0xfc>)
    2416:	4b13      	ldr	r3, [pc, #76]	; (2464 <nm_spi_init+0x100>)
    2418:	4798      	blx	r3
    241a:	4819      	ldr	r0, [pc, #100]	; (2480 <nm_spi_init+0x11c>)
    241c:	4b13      	ldr	r3, [pc, #76]	; (246c <nm_spi_init+0x108>)
    241e:	4798      	blx	r3
    2420:	200d      	movs	r0, #13
    2422:	4b13      	ldr	r3, [pc, #76]	; (2470 <nm_spi_init+0x10c>)
    2424:	4798      	blx	r3
			return 0;
    2426:	e7cf      	b.n	23c8 <nm_spi_init+0x64>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    2428:	4a16      	ldr	r2, [pc, #88]	; (2484 <nm_spi_init+0x120>)
    242a:	490c      	ldr	r1, [pc, #48]	; (245c <nm_spi_init+0xf8>)
    242c:	480c      	ldr	r0, [pc, #48]	; (2460 <nm_spi_init+0xfc>)
    242e:	4b0d      	ldr	r3, [pc, #52]	; (2464 <nm_spi_init+0x100>)
    2430:	4798      	blx	r3
    2432:	4815      	ldr	r0, [pc, #84]	; (2488 <nm_spi_init+0x124>)
    2434:	4b0d      	ldr	r3, [pc, #52]	; (246c <nm_spi_init+0x108>)
    2436:	4798      	blx	r3
    2438:	200d      	movs	r0, #13
    243a:	4b0d      	ldr	r3, [pc, #52]	; (2470 <nm_spi_init+0x10c>)
    243c:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    243e:	2406      	movs	r4, #6
    2440:	4264      	negs	r4, r4
    2442:	e7c1      	b.n	23c8 <nm_spi_init+0x64>
    2444:	20000ab4 	.word	0x20000ab4
    2448:	0000e824 	.word	0x0000e824
    244c:	00002185 	.word	0x00002185
    2450:	00002075 	.word	0x00002075
    2454:	00002321 	.word	0x00002321
    2458:	0000234d 	.word	0x0000234d
    245c:	0001d5fc 	.word	0x0001d5fc
    2460:	0001cd6c 	.word	0x0001cd6c
    2464:	000182cd 	.word	0x000182cd
    2468:	0001d708 	.word	0x0001d708
    246c:	000183a5 	.word	0x000183a5
    2470:	000182f1 	.word	0x000182f1
    2474:	000004c3 	.word	0x000004c3
    2478:	0001d758 	.word	0x0001d758
    247c:	000004cd 	.word	0x000004cd
    2480:	0001d784 	.word	0x0001d784
    2484:	000004d7 	.word	0x000004d7
    2488:	0001d7b8 	.word	0x0001d7b8

0000248c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    248c:	b5f0      	push	{r4, r5, r6, r7, lr}
    248e:	46de      	mov	lr, fp
    2490:	4657      	mov	r7, sl
    2492:	464e      	mov	r6, r9
    2494:	4645      	mov	r5, r8
    2496:	b5e0      	push	{r5, r6, r7, lr}
    2498:	b087      	sub	sp, #28
    249a:	9002      	str	r0, [sp, #8]
    249c:	9103      	str	r1, [sp, #12]
    249e:	0016      	movs	r6, r2
    24a0:	250a      	movs	r5, #10
	uint8 single_byte_workaround = 0;
    24a2:	2300      	movs	r3, #0
    24a4:	469b      	mov	fp, r3
	result = spi_cmd(cmd, addr, 0, size,0);
    24a6:	2400      	movs	r4, #0
    24a8:	4b3e      	ldr	r3, [pc, #248]	; (25a4 <nm_spi_read_block+0x118>)
    24aa:	4698      	mov	r8, r3
	result = spi_cmd_rsp(cmd);
    24ac:	46a9      	mov	r9, r5
    24ae:	e037      	b.n	2520 <nm_spi_read_block+0x94>
		single_byte_workaround = 1;
    24b0:	2301      	movs	r3, #1
    24b2:	469b      	mov	fp, r3
		size = 2;
    24b4:	3601      	adds	r6, #1
    24b6:	e035      	b.n	2524 <nm_spi_read_block+0x98>
	result = spi_cmd_rsp(cmd);
    24b8:	20c8      	movs	r0, #200	; 0xc8
    24ba:	4b3b      	ldr	r3, [pc, #236]	; (25a8 <nm_spi_read_block+0x11c>)
    24bc:	4798      	blx	r3
	if (result != N_OK) {
    24be:	2801      	cmp	r0, #1
    24c0:	d045      	beq.n	254e <nm_spi_read_block+0xc2>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    24c2:	4a3a      	ldr	r2, [pc, #232]	; (25ac <nm_spi_read_block+0x120>)
    24c4:	493a      	ldr	r1, [pc, #232]	; (25b0 <nm_spi_read_block+0x124>)
    24c6:	483b      	ldr	r0, [pc, #236]	; (25b4 <nm_spi_read_block+0x128>)
    24c8:	4f3b      	ldr	r7, [pc, #236]	; (25b8 <nm_spi_read_block+0x12c>)
    24ca:	47b8      	blx	r7
    24cc:	9902      	ldr	r1, [sp, #8]
    24ce:	483b      	ldr	r0, [pc, #236]	; (25bc <nm_spi_read_block+0x130>)
    24d0:	47b8      	blx	r7
    24d2:	200d      	movs	r0, #13
    24d4:	4b3a      	ldr	r3, [pc, #232]	; (25c0 <nm_spi_read_block+0x134>)
    24d6:	4798      	blx	r3
		nm_bsp_sleep(1);
    24d8:	2001      	movs	r0, #1
    24da:	4f3a      	ldr	r7, [pc, #232]	; (25c4 <nm_spi_read_block+0x138>)
    24dc:	47b8      	blx	r7
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    24de:	9400      	str	r4, [sp, #0]
    24e0:	0023      	movs	r3, r4
    24e2:	0022      	movs	r2, r4
    24e4:	0021      	movs	r1, r4
    24e6:	20cf      	movs	r0, #207	; 0xcf
    24e8:	4d2e      	ldr	r5, [pc, #184]	; (25a4 <nm_spi_read_block+0x118>)
    24ea:	47a8      	blx	r5
		spi_cmd_rsp(CMD_RESET);
    24ec:	20cf      	movs	r0, #207	; 0xcf
    24ee:	4b2e      	ldr	r3, [pc, #184]	; (25a8 <nm_spi_read_block+0x11c>)
    24f0:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    24f2:	4a35      	ldr	r2, [pc, #212]	; (25c8 <nm_spi_read_block+0x13c>)
    24f4:	492e      	ldr	r1, [pc, #184]	; (25b0 <nm_spi_read_block+0x124>)
    24f6:	482f      	ldr	r0, [pc, #188]	; (25b4 <nm_spi_read_block+0x128>)
    24f8:	4b2f      	ldr	r3, [pc, #188]	; (25b8 <nm_spi_read_block+0x12c>)
    24fa:	469a      	mov	sl, r3
    24fc:	4798      	blx	r3
    24fe:	0033      	movs	r3, r6
    2500:	9a02      	ldr	r2, [sp, #8]
    2502:	4649      	mov	r1, r9
    2504:	4831      	ldr	r0, [pc, #196]	; (25cc <nm_spi_read_block+0x140>)
    2506:	47d0      	blx	sl
    2508:	200d      	movs	r0, #13
    250a:	4b2d      	ldr	r3, [pc, #180]	; (25c0 <nm_spi_read_block+0x134>)
    250c:	4798      	blx	r3
		nm_bsp_sleep(1);
    250e:	2001      	movs	r0, #1
    2510:	47b8      	blx	r7
    2512:	2301      	movs	r3, #1
    2514:	425b      	negs	r3, r3
    2516:	469c      	mov	ip, r3
    2518:	44e1      	add	r9, ip
		if(retry) goto _RETRY_;
    251a:	464b      	mov	r3, r9
    251c:	2b00      	cmp	r3, #0
    251e:	d038      	beq.n	2592 <nm_spi_read_block+0x106>
	if (size == 1)
    2520:	2e01      	cmp	r6, #1
    2522:	d0c5      	beq.n	24b0 <nm_spi_read_block+0x24>
	result = spi_cmd(cmd, addr, 0, size,0);
    2524:	9400      	str	r4, [sp, #0]
    2526:	0033      	movs	r3, r6
    2528:	0022      	movs	r2, r4
    252a:	9d02      	ldr	r5, [sp, #8]
    252c:	0029      	movs	r1, r5
    252e:	20c8      	movs	r0, #200	; 0xc8
    2530:	47c0      	blx	r8
	if (result != N_OK) {
    2532:	2801      	cmp	r0, #1
    2534:	d0c0      	beq.n	24b8 <nm_spi_read_block+0x2c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    2536:	4a26      	ldr	r2, [pc, #152]	; (25d0 <nm_spi_read_block+0x144>)
    2538:	491d      	ldr	r1, [pc, #116]	; (25b0 <nm_spi_read_block+0x124>)
    253a:	481e      	ldr	r0, [pc, #120]	; (25b4 <nm_spi_read_block+0x128>)
    253c:	4f1e      	ldr	r7, [pc, #120]	; (25b8 <nm_spi_read_block+0x12c>)
    253e:	47b8      	blx	r7
    2540:	0029      	movs	r1, r5
    2542:	4824      	ldr	r0, [pc, #144]	; (25d4 <nm_spi_read_block+0x148>)
    2544:	47b8      	blx	r7
    2546:	200d      	movs	r0, #13
    2548:	4b1d      	ldr	r3, [pc, #116]	; (25c0 <nm_spi_read_block+0x134>)
    254a:	4798      	blx	r3
    254c:	e7c4      	b.n	24d8 <nm_spi_read_block+0x4c>
	if (single_byte_workaround)
    254e:	465b      	mov	r3, fp
    2550:	2b00      	cmp	r3, #0
    2552:	d016      	beq.n	2582 <nm_spi_read_block+0xf6>
		result = spi_data_read(tmp, size,0);
    2554:	af05      	add	r7, sp, #20
    2556:	0022      	movs	r2, r4
    2558:	0031      	movs	r1, r6
    255a:	0038      	movs	r0, r7
    255c:	4b1e      	ldr	r3, [pc, #120]	; (25d8 <nm_spi_read_block+0x14c>)
    255e:	4798      	blx	r3
		buf[0] = tmp[0];
    2560:	783b      	ldrb	r3, [r7, #0]
    2562:	9a03      	ldr	r2, [sp, #12]
    2564:	7013      	strb	r3, [r2, #0]
	if (result != N_OK) {
    2566:	2801      	cmp	r0, #1
    2568:	d011      	beq.n	258e <nm_spi_read_block+0x102>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    256a:	4a1c      	ldr	r2, [pc, #112]	; (25dc <nm_spi_read_block+0x150>)
    256c:	4910      	ldr	r1, [pc, #64]	; (25b0 <nm_spi_read_block+0x124>)
    256e:	4811      	ldr	r0, [pc, #68]	; (25b4 <nm_spi_read_block+0x128>)
    2570:	4b11      	ldr	r3, [pc, #68]	; (25b8 <nm_spi_read_block+0x12c>)
    2572:	4798      	blx	r3
    2574:	481a      	ldr	r0, [pc, #104]	; (25e0 <nm_spi_read_block+0x154>)
    2576:	4b1b      	ldr	r3, [pc, #108]	; (25e4 <nm_spi_read_block+0x158>)
    2578:	4798      	blx	r3
    257a:	200d      	movs	r0, #13
    257c:	4b10      	ldr	r3, [pc, #64]	; (25c0 <nm_spi_read_block+0x134>)
    257e:	4798      	blx	r3
    2580:	e7aa      	b.n	24d8 <nm_spi_read_block+0x4c>
		result = spi_data_read(buf, size,0);
    2582:	0022      	movs	r2, r4
    2584:	0031      	movs	r1, r6
    2586:	9803      	ldr	r0, [sp, #12]
    2588:	4b13      	ldr	r3, [pc, #76]	; (25d8 <nm_spi_read_block+0x14c>)
    258a:	4798      	blx	r3
    258c:	e7eb      	b.n	2566 <nm_spi_read_block+0xda>
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    258e:	2000      	movs	r0, #0
    2590:	e001      	b.n	2596 <nm_spi_read_block+0x10a>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2592:	2006      	movs	r0, #6
    2594:	4240      	negs	r0, r0

	return s8Ret;
}
    2596:	b007      	add	sp, #28
    2598:	bc3c      	pop	{r2, r3, r4, r5}
    259a:	4690      	mov	r8, r2
    259c:	4699      	mov	r9, r3
    259e:	46a2      	mov	sl, r4
    25a0:	46ab      	mov	fp, r5
    25a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25a4:	00001cbd 	.word	0x00001cbd
    25a8:	00001e5d 	.word	0x00001e5d
    25ac:	0000045c 	.word	0x0000045c
    25b0:	0001d5f0 	.word	0x0001d5f0
    25b4:	0001cd6c 	.word	0x0001cd6c
    25b8:	000182cd 	.word	0x000182cd
    25bc:	0001d80c 	.word	0x0001d80c
    25c0:	000182f1 	.word	0x000182f1
    25c4:	00000141 	.word	0x00000141
    25c8:	0000047d 	.word	0x0000047d
    25cc:	0001d86c 	.word	0x0001d86c
    25d0:	00000456 	.word	0x00000456
    25d4:	0001d7dc 	.word	0x0001d7dc
    25d8:	00001f31 	.word	0x00001f31
    25dc:	0000046c 	.word	0x0000046c
    25e0:	0001d844 	.word	0x0001d844
    25e4:	000183a5 	.word	0x000183a5

000025e8 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    25e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    25ea:	46de      	mov	lr, fp
    25ec:	4647      	mov	r7, r8
    25ee:	b580      	push	{r7, lr}
    25f0:	b089      	sub	sp, #36	; 0x24
    25f2:	9004      	str	r0, [sp, #16]
    25f4:	468b      	mov	fp, r1
    25f6:	9203      	str	r2, [sp, #12]
    25f8:	260a      	movs	r6, #10
    25fa:	2780      	movs	r7, #128	; 0x80
    25fc:	01bf      	lsls	r7, r7, #6
    25fe:	466b      	mov	r3, sp
    2600:	82df      	strh	r7, [r3, #22]
    2602:	0035      	movs	r5, r6
    2604:	e02d      	b.n	2662 <nm_spi_write_block+0x7a>
		size = 2;
    2606:	3301      	adds	r3, #1
    2608:	9303      	str	r3, [sp, #12]
    260a:	e02d      	b.n	2668 <nm_spi_write_block+0x80>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    260c:	4a82      	ldr	r2, [pc, #520]	; (2818 <nm_spi_write_block+0x230>)
    260e:	4983      	ldr	r1, [pc, #524]	; (281c <nm_spi_write_block+0x234>)
    2610:	4883      	ldr	r0, [pc, #524]	; (2820 <nm_spi_write_block+0x238>)
    2612:	4c84      	ldr	r4, [pc, #528]	; (2824 <nm_spi_write_block+0x23c>)
    2614:	47a0      	blx	r4
    2616:	0031      	movs	r1, r6
    2618:	4883      	ldr	r0, [pc, #524]	; (2828 <nm_spi_write_block+0x240>)
    261a:	47a0      	blx	r4
    261c:	200d      	movs	r0, #13
    261e:	4b83      	ldr	r3, [pc, #524]	; (282c <nm_spi_write_block+0x244>)
    2620:	4798      	blx	r3
		nm_bsp_sleep(1);
    2622:	2001      	movs	r0, #1
    2624:	4c82      	ldr	r4, [pc, #520]	; (2830 <nm_spi_write_block+0x248>)
    2626:	47a0      	blx	r4
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2628:	2300      	movs	r3, #0
    262a:	9300      	str	r3, [sp, #0]
    262c:	2200      	movs	r2, #0
    262e:	2100      	movs	r1, #0
    2630:	20cf      	movs	r0, #207	; 0xcf
    2632:	4e80      	ldr	r6, [pc, #512]	; (2834 <nm_spi_write_block+0x24c>)
    2634:	47b0      	blx	r6
		spi_cmd_rsp(CMD_RESET);
    2636:	20cf      	movs	r0, #207	; 0xcf
    2638:	4b7f      	ldr	r3, [pc, #508]	; (2838 <nm_spi_write_block+0x250>)
    263a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
    263c:	4a7f      	ldr	r2, [pc, #508]	; (283c <nm_spi_write_block+0x254>)
    263e:	4977      	ldr	r1, [pc, #476]	; (281c <nm_spi_write_block+0x234>)
    2640:	4877      	ldr	r0, [pc, #476]	; (2820 <nm_spi_write_block+0x238>)
    2642:	4e78      	ldr	r6, [pc, #480]	; (2824 <nm_spi_write_block+0x23c>)
    2644:	47b0      	blx	r6
    2646:	9b03      	ldr	r3, [sp, #12]
    2648:	9a04      	ldr	r2, [sp, #16]
    264a:	0029      	movs	r1, r5
    264c:	487c      	ldr	r0, [pc, #496]	; (2840 <nm_spi_write_block+0x258>)
    264e:	47b0      	blx	r6
    2650:	200d      	movs	r0, #13
    2652:	4b76      	ldr	r3, [pc, #472]	; (282c <nm_spi_write_block+0x244>)
    2654:	4798      	blx	r3
		nm_bsp_sleep(1);
    2656:	2001      	movs	r0, #1
    2658:	47a0      	blx	r4
    265a:	3d01      	subs	r5, #1
		if(retry) goto _RETRY_;
    265c:	2d00      	cmp	r5, #0
    265e:	d100      	bne.n	2662 <nm_spi_write_block+0x7a>
    2660:	e0d2      	b.n	2808 <nm_spi_write_block+0x220>
	if (size == 1)
    2662:	9b03      	ldr	r3, [sp, #12]
    2664:	2b01      	cmp	r3, #1
    2666:	d0ce      	beq.n	2606 <nm_spi_write_block+0x1e>
	result = spi_cmd(cmd, addr, 0, size,0);
    2668:	2300      	movs	r3, #0
    266a:	9300      	str	r3, [sp, #0]
    266c:	9b03      	ldr	r3, [sp, #12]
    266e:	2200      	movs	r2, #0
    2670:	9e04      	ldr	r6, [sp, #16]
    2672:	0031      	movs	r1, r6
    2674:	20c7      	movs	r0, #199	; 0xc7
    2676:	4c6f      	ldr	r4, [pc, #444]	; (2834 <nm_spi_write_block+0x24c>)
    2678:	47a0      	blx	r4
	if (result != N_OK) {
    267a:	2801      	cmp	r0, #1
    267c:	d1c6      	bne.n	260c <nm_spi_write_block+0x24>
	result = spi_cmd_rsp(cmd);
    267e:	20c7      	movs	r0, #199	; 0xc7
    2680:	4b6d      	ldr	r3, [pc, #436]	; (2838 <nm_spi_write_block+0x250>)
    2682:	4798      	blx	r3
	if (result != N_OK) {
    2684:	2801      	cmp	r0, #1
    2686:	d00b      	beq.n	26a0 <nm_spi_write_block+0xb8>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    2688:	4a6e      	ldr	r2, [pc, #440]	; (2844 <nm_spi_write_block+0x25c>)
    268a:	4964      	ldr	r1, [pc, #400]	; (281c <nm_spi_write_block+0x234>)
    268c:	4864      	ldr	r0, [pc, #400]	; (2820 <nm_spi_write_block+0x238>)
    268e:	4c65      	ldr	r4, [pc, #404]	; (2824 <nm_spi_write_block+0x23c>)
    2690:	47a0      	blx	r4
    2692:	9904      	ldr	r1, [sp, #16]
    2694:	486c      	ldr	r0, [pc, #432]	; (2848 <nm_spi_write_block+0x260>)
    2696:	47a0      	blx	r4
    2698:	200d      	movs	r0, #13
    269a:	4b64      	ldr	r3, [pc, #400]	; (282c <nm_spi_write_block+0x244>)
    269c:	4798      	blx	r3
    269e:	e7c0      	b.n	2622 <nm_spi_write_block+0x3a>
	uint8 cmd, order, crc[2] = {0};
    26a0:	2200      	movs	r2, #0
    26a2:	ab07      	add	r3, sp, #28
    26a4:	801a      	strh	r2, [r3, #0]
    26a6:	9c03      	ldr	r4, [sp, #12]
	ix = 0;
    26a8:	2600      	movs	r6, #0
				order = 0x1;
    26aa:	46a8      	mov	r8, r5
    26ac:	0035      	movs	r5, r6
    26ae:	0026      	movs	r6, r4
    26b0:	e021      	b.n	26f6 <nm_spi_write_block+0x10e>
				order = 0x2;
    26b2:	2300      	movs	r3, #0
    26b4:	42b7      	cmp	r7, r6
    26b6:	415b      	adcs	r3, r3
    26b8:	3302      	adds	r3, #2
		cmd |= order;
    26ba:	200b      	movs	r0, #11
    26bc:	aa04      	add	r2, sp, #16
    26be:	4694      	mov	ip, r2
    26c0:	4460      	add	r0, ip
    26c2:	2210      	movs	r2, #16
    26c4:	4252      	negs	r2, r2
    26c6:	4313      	orrs	r3, r2
    26c8:	7003      	strb	r3, [r0, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    26ca:	2101      	movs	r1, #1
    26cc:	4b5f      	ldr	r3, [pc, #380]	; (284c <nm_spi_write_block+0x264>)
    26ce:	4798      	blx	r3
    26d0:	2800      	cmp	r0, #0
    26d2:	d11d      	bne.n	2710 <nm_spi_write_block+0x128>
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    26d4:	465b      	mov	r3, fp
    26d6:	1958      	adds	r0, r3, r5
    26d8:	0021      	movs	r1, r4
    26da:	4b5c      	ldr	r3, [pc, #368]	; (284c <nm_spi_write_block+0x264>)
    26dc:	4798      	blx	r3
    26de:	2800      	cmp	r0, #0
    26e0:	d12e      	bne.n	2740 <nm_spi_write_block+0x158>
		if (!gu8Crc_off) {
    26e2:	4b5b      	ldr	r3, [pc, #364]	; (2850 <nm_spi_write_block+0x268>)
    26e4:	781b      	ldrb	r3, [r3, #0]
    26e6:	2b00      	cmp	r3, #0
    26e8:	d037      	beq.n	275a <nm_spi_write_block+0x172>
		ix += nbytes;
    26ea:	1965      	adds	r5, r4, r5
    26ec:	b22d      	sxth	r5, r5
		sz -= nbytes;
    26ee:	1b36      	subs	r6, r6, r4
    26f0:	b2b6      	uxth	r6, r6
	} while (sz);
    26f2:	2e00      	cmp	r6, #0
    26f4:	d052      	beq.n	279c <nm_spi_write_block+0x1b4>
    26f6:	1c34      	adds	r4, r6, #0
    26f8:	42be      	cmp	r6, r7
    26fa:	d901      	bls.n	2700 <nm_spi_write_block+0x118>
    26fc:	466b      	mov	r3, sp
    26fe:	8adc      	ldrh	r4, [r3, #22]
    2700:	b2a4      	uxth	r4, r4
		if (ix == 0)  {
    2702:	2d00      	cmp	r5, #0
    2704:	d1d5      	bne.n	26b2 <nm_spi_write_block+0xca>
				order = 0x3;
    2706:	2303      	movs	r3, #3
			if (sz <= DATA_PKT_SZ)
    2708:	42be      	cmp	r6, r7
    270a:	d9d6      	bls.n	26ba <nm_spi_write_block+0xd2>
				order = 0x1;
    270c:	3b02      	subs	r3, #2
    270e:	e7d4      	b.n	26ba <nm_spi_write_block+0xd2>
    2710:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    2712:	4a50      	ldr	r2, [pc, #320]	; (2854 <nm_spi_write_block+0x26c>)
    2714:	4950      	ldr	r1, [pc, #320]	; (2858 <nm_spi_write_block+0x270>)
    2716:	4842      	ldr	r0, [pc, #264]	; (2820 <nm_spi_write_block+0x238>)
    2718:	4b42      	ldr	r3, [pc, #264]	; (2824 <nm_spi_write_block+0x23c>)
    271a:	4798      	blx	r3
    271c:	484f      	ldr	r0, [pc, #316]	; (285c <nm_spi_write_block+0x274>)
    271e:	4b50      	ldr	r3, [pc, #320]	; (2860 <nm_spi_write_block+0x278>)
    2720:	4798      	blx	r3
    2722:	200d      	movs	r0, #13
    2724:	4b41      	ldr	r3, [pc, #260]	; (282c <nm_spi_write_block+0x244>)
    2726:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2728:	4a4e      	ldr	r2, [pc, #312]	; (2864 <nm_spi_write_block+0x27c>)
    272a:	493c      	ldr	r1, [pc, #240]	; (281c <nm_spi_write_block+0x234>)
    272c:	483c      	ldr	r0, [pc, #240]	; (2820 <nm_spi_write_block+0x238>)
    272e:	4b3d      	ldr	r3, [pc, #244]	; (2824 <nm_spi_write_block+0x23c>)
    2730:	4798      	blx	r3
    2732:	484d      	ldr	r0, [pc, #308]	; (2868 <nm_spi_write_block+0x280>)
    2734:	4b4a      	ldr	r3, [pc, #296]	; (2860 <nm_spi_write_block+0x278>)
    2736:	4798      	blx	r3
    2738:	200d      	movs	r0, #13
    273a:	4b3c      	ldr	r3, [pc, #240]	; (282c <nm_spi_write_block+0x244>)
    273c:	4798      	blx	r3
    273e:	e770      	b.n	2622 <nm_spi_write_block+0x3a>
    2740:	4645      	mov	r5, r8
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    2742:	4a4a      	ldr	r2, [pc, #296]	; (286c <nm_spi_write_block+0x284>)
    2744:	4944      	ldr	r1, [pc, #272]	; (2858 <nm_spi_write_block+0x270>)
    2746:	4836      	ldr	r0, [pc, #216]	; (2820 <nm_spi_write_block+0x238>)
    2748:	4b36      	ldr	r3, [pc, #216]	; (2824 <nm_spi_write_block+0x23c>)
    274a:	4798      	blx	r3
    274c:	4848      	ldr	r0, [pc, #288]	; (2870 <nm_spi_write_block+0x288>)
    274e:	4b44      	ldr	r3, [pc, #272]	; (2860 <nm_spi_write_block+0x278>)
    2750:	4798      	blx	r3
    2752:	200d      	movs	r0, #13
    2754:	4b35      	ldr	r3, [pc, #212]	; (282c <nm_spi_write_block+0x244>)
    2756:	4798      	blx	r3
    2758:	e7e6      	b.n	2728 <nm_spi_write_block+0x140>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    275a:	2102      	movs	r1, #2
    275c:	a807      	add	r0, sp, #28
    275e:	4b3b      	ldr	r3, [pc, #236]	; (284c <nm_spi_write_block+0x264>)
    2760:	4798      	blx	r3
    2762:	2800      	cmp	r0, #0
    2764:	d0c1      	beq.n	26ea <nm_spi_write_block+0x102>
    2766:	4645      	mov	r5, r8
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    2768:	22d7      	movs	r2, #215	; 0xd7
    276a:	0092      	lsls	r2, r2, #2
    276c:	493a      	ldr	r1, [pc, #232]	; (2858 <nm_spi_write_block+0x270>)
    276e:	482c      	ldr	r0, [pc, #176]	; (2820 <nm_spi_write_block+0x238>)
    2770:	4b2c      	ldr	r3, [pc, #176]	; (2824 <nm_spi_write_block+0x23c>)
    2772:	4798      	blx	r3
    2774:	483f      	ldr	r0, [pc, #252]	; (2874 <nm_spi_write_block+0x28c>)
    2776:	4b3a      	ldr	r3, [pc, #232]	; (2860 <nm_spi_write_block+0x278>)
    2778:	4798      	blx	r3
    277a:	200d      	movs	r0, #13
    277c:	4b2b      	ldr	r3, [pc, #172]	; (282c <nm_spi_write_block+0x244>)
    277e:	4798      	blx	r3
    2780:	e7d2      	b.n	2728 <nm_spi_write_block+0x140>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
    2782:	229a      	movs	r2, #154	; 0x9a
    2784:	0052      	lsls	r2, r2, #1
    2786:	493c      	ldr	r1, [pc, #240]	; (2878 <nm_spi_write_block+0x290>)
    2788:	4825      	ldr	r0, [pc, #148]	; (2820 <nm_spi_write_block+0x238>)
    278a:	4b26      	ldr	r3, [pc, #152]	; (2824 <nm_spi_write_block+0x23c>)
    278c:	4798      	blx	r3
    278e:	483b      	ldr	r0, [pc, #236]	; (287c <nm_spi_write_block+0x294>)
    2790:	4b33      	ldr	r3, [pc, #204]	; (2860 <nm_spi_write_block+0x278>)
    2792:	4798      	blx	r3
    2794:	200d      	movs	r0, #13
    2796:	4b25      	ldr	r3, [pc, #148]	; (282c <nm_spi_write_block+0x244>)
    2798:	4798      	blx	r3
    279a:	e027      	b.n	27ec <nm_spi_write_block+0x204>
    279c:	4645      	mov	r5, r8
    if (!gu8Crc_off)
    279e:	4b2c      	ldr	r3, [pc, #176]	; (2850 <nm_spi_write_block+0x268>)
    27a0:	781c      	ldrb	r4, [r3, #0]
		len = 3;
    27a2:	1e63      	subs	r3, r4, #1
    27a4:	419c      	sbcs	r4, r3
    27a6:	3402      	adds	r4, #2
	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
    27a8:	b2a1      	uxth	r1, r4
    27aa:	a807      	add	r0, sp, #28
    27ac:	4b34      	ldr	r3, [pc, #208]	; (2880 <nm_spi_write_block+0x298>)
    27ae:	4798      	blx	r3
    27b0:	2800      	cmp	r0, #0
    27b2:	d1e6      	bne.n	2782 <nm_spi_write_block+0x19a>
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
    27b4:	ab08      	add	r3, sp, #32
    27b6:	191b      	adds	r3, r3, r4
    27b8:	3b05      	subs	r3, #5
    27ba:	781b      	ldrb	r3, [r3, #0]
    27bc:	2b00      	cmp	r3, #0
    27be:	d106      	bne.n	27ce <nm_spi_write_block+0x1e6>
    27c0:	ab08      	add	r3, sp, #32
    27c2:	469c      	mov	ip, r3
    27c4:	4464      	add	r4, ip
    27c6:	3c06      	subs	r4, #6
    27c8:	7823      	ldrb	r3, [r4, #0]
    27ca:	2bc3      	cmp	r3, #195	; 0xc3
    27cc:	d01a      	beq.n	2804 <nm_spi_write_block+0x21c>
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
    27ce:	223c      	movs	r2, #60	; 0x3c
    27d0:	32ff      	adds	r2, #255	; 0xff
    27d2:	4929      	ldr	r1, [pc, #164]	; (2878 <nm_spi_write_block+0x290>)
    27d4:	4812      	ldr	r0, [pc, #72]	; (2820 <nm_spi_write_block+0x238>)
    27d6:	4c13      	ldr	r4, [pc, #76]	; (2824 <nm_spi_write_block+0x23c>)
    27d8:	47a0      	blx	r4
    27da:	a907      	add	r1, sp, #28
    27dc:	788b      	ldrb	r3, [r1, #2]
    27de:	784a      	ldrb	r2, [r1, #1]
    27e0:	7809      	ldrb	r1, [r1, #0]
    27e2:	4828      	ldr	r0, [pc, #160]	; (2884 <nm_spi_write_block+0x29c>)
    27e4:	47a0      	blx	r4
    27e6:	200d      	movs	r0, #13
    27e8:	4b10      	ldr	r3, [pc, #64]	; (282c <nm_spi_write_block+0x244>)
    27ea:	4798      	blx	r3
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    27ec:	4a26      	ldr	r2, [pc, #152]	; (2888 <nm_spi_write_block+0x2a0>)
    27ee:	490b      	ldr	r1, [pc, #44]	; (281c <nm_spi_write_block+0x234>)
    27f0:	480b      	ldr	r0, [pc, #44]	; (2820 <nm_spi_write_block+0x238>)
    27f2:	4b0c      	ldr	r3, [pc, #48]	; (2824 <nm_spi_write_block+0x23c>)
    27f4:	4798      	blx	r3
    27f6:	481c      	ldr	r0, [pc, #112]	; (2868 <nm_spi_write_block+0x280>)
    27f8:	4b19      	ldr	r3, [pc, #100]	; (2860 <nm_spi_write_block+0x278>)
    27fa:	4798      	blx	r3
    27fc:	200d      	movs	r0, #13
    27fe:	4b0b      	ldr	r3, [pc, #44]	; (282c <nm_spi_write_block+0x244>)
    2800:	4798      	blx	r3
    2802:	e70e      	b.n	2622 <nm_spi_write_block+0x3a>
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2804:	2000      	movs	r0, #0
    2806:	e001      	b.n	280c <nm_spi_write_block+0x224>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2808:	2006      	movs	r0, #6
    280a:	4240      	negs	r0, r0

	return s8Ret;
}
    280c:	b009      	add	sp, #36	; 0x24
    280e:	bc0c      	pop	{r2, r3}
    2810:	4690      	mov	r8, r2
    2812:	469b      	mov	fp, r3
    2814:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2816:	46c0      	nop			; (mov r8, r8)
    2818:	000003c3 	.word	0x000003c3
    281c:	0001d5d0 	.word	0x0001d5d0
    2820:	0001cd6c 	.word	0x0001cd6c
    2824:	000182cd 	.word	0x000182cd
    2828:	0001d888 	.word	0x0001d888
    282c:	000182f1 	.word	0x000182f1
    2830:	00000141 	.word	0x00000141
    2834:	00001cbd 	.word	0x00001cbd
    2838:	00001e5d 	.word	0x00001e5d
    283c:	000003eb 	.word	0x000003eb
    2840:	0001d86c 	.word	0x0001d86c
    2844:	000003c9 	.word	0x000003c9
    2848:	0001d8b8 	.word	0x0001d8b8
    284c:	00001c9d 	.word	0x00001c9d
    2850:	20000ab4 	.word	0x20000ab4
    2854:	00000349 	.word	0x00000349
    2858:	0001d5b0 	.word	0x0001d5b0
    285c:	0001d8f0 	.word	0x0001d8f0
    2860:	000183a5 	.word	0x000183a5
    2864:	000003d9 	.word	0x000003d9
    2868:	0001d9e4 	.word	0x0001d9e4
    286c:	00000352 	.word	0x00000352
    2870:	0001d928 	.word	0x0001d928
    2874:	0001d95c 	.word	0x0001d95c
    2878:	0001d584 	.word	0x0001d584
    287c:	0001d994 	.word	0x0001d994
    2880:	00001e3d 	.word	0x00001e3d
    2884:	0001d9b4 	.word	0x0001d9b4
    2888:	000003e1 	.word	0x000003e1

0000288c <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
    288c:	b570      	push	{r4, r5, r6, lr}
    288e:	b082      	sub	sp, #8
    2890:	0004      	movs	r4, r0
	sint8 s8Ret = M2M_SUCCESS;
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    2892:	4b2a      	ldr	r3, [pc, #168]	; (293c <spi_flash_enable+0xb0>)
    2894:	4798      	blx	r3
    2896:	0500      	lsls	r0, r0, #20
    2898:	0d00      	lsrs	r0, r0, #20
    289a:	4b29      	ldr	r3, [pc, #164]	; (2940 <spi_flash_enable+0xb4>)
	sint8 s8Ret = M2M_SUCCESS;
    289c:	2500      	movs	r5, #0
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    289e:	4298      	cmp	r0, r3
    28a0:	d802      	bhi.n	28a8 <spi_flash_enable+0x1c>
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
}
    28a2:	0028      	movs	r0, r5
    28a4:	b002      	add	sp, #8
    28a6:	bd70      	pop	{r4, r5, r6, pc}
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    28a8:	a901      	add	r1, sp, #4
    28aa:	4826      	ldr	r0, [pc, #152]	; (2944 <spi_flash_enable+0xb8>)
    28ac:	4b26      	ldr	r3, [pc, #152]	; (2948 <spi_flash_enable+0xbc>)
    28ae:	4798      	blx	r3
    28b0:	1e05      	subs	r5, r0, #0
		if(s8Ret != M2M_SUCCESS) {
    28b2:	d1f6      	bne.n	28a2 <spi_flash_enable+0x16>
		u32Val &= ~((0x7777ul) << 12);
    28b4:	4b25      	ldr	r3, [pc, #148]	; (294c <spi_flash_enable+0xc0>)
    28b6:	9a01      	ldr	r2, [sp, #4]
    28b8:	4013      	ands	r3, r2
		u32Val |= ((0x1111ul) << 12);
    28ba:	4925      	ldr	r1, [pc, #148]	; (2950 <spi_flash_enable+0xc4>)
    28bc:	4319      	orrs	r1, r3
    28be:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    28c0:	4820      	ldr	r0, [pc, #128]	; (2944 <spi_flash_enable+0xb8>)
    28c2:	4b24      	ldr	r3, [pc, #144]	; (2954 <spi_flash_enable+0xc8>)
    28c4:	4798      	blx	r3
		if(enable) {
    28c6:	2c00      	cmp	r4, #0
    28c8:	d020      	beq.n	290c <spi_flash_enable+0x80>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    28ca:	2100      	movs	r1, #0
    28cc:	4822      	ldr	r0, [pc, #136]	; (2958 <spi_flash_enable+0xcc>)
    28ce:	4c21      	ldr	r4, [pc, #132]	; (2954 <spi_flash_enable+0xc8>)
    28d0:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    28d2:	21ab      	movs	r1, #171	; 0xab
    28d4:	4821      	ldr	r0, [pc, #132]	; (295c <spi_flash_enable+0xd0>)
    28d6:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    28d8:	2101      	movs	r1, #1
    28da:	4821      	ldr	r0, [pc, #132]	; (2960 <spi_flash_enable+0xd4>)
    28dc:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    28de:	2100      	movs	r1, #0
    28e0:	4820      	ldr	r0, [pc, #128]	; (2964 <spi_flash_enable+0xd8>)
    28e2:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    28e4:	2181      	movs	r1, #129	; 0x81
    28e6:	4820      	ldr	r0, [pc, #128]	; (2968 <spi_flash_enable+0xdc>)
    28e8:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    28ea:	4e20      	ldr	r6, [pc, #128]	; (296c <spi_flash_enable+0xe0>)
    28ec:	4c20      	ldr	r4, [pc, #128]	; (2970 <spi_flash_enable+0xe4>)
    28ee:	0030      	movs	r0, r6
    28f0:	47a0      	blx	r4
    28f2:	2801      	cmp	r0, #1
    28f4:	d1fb      	bne.n	28ee <spi_flash_enable+0x62>
		u32Val &= ~((0x7777ul) << 12);
    28f6:	4b15      	ldr	r3, [pc, #84]	; (294c <spi_flash_enable+0xc0>)
    28f8:	9a01      	ldr	r2, [sp, #4]
    28fa:	4013      	ands	r3, r2
		u32Val |= ((0x0010ul) << 12);
    28fc:	2180      	movs	r1, #128	; 0x80
    28fe:	0249      	lsls	r1, r1, #9
    2900:	4319      	orrs	r1, r3
    2902:	9101      	str	r1, [sp, #4]
		nm_write_reg(0x1410, u32Val);
    2904:	480f      	ldr	r0, [pc, #60]	; (2944 <spi_flash_enable+0xb8>)
    2906:	4b13      	ldr	r3, [pc, #76]	; (2954 <spi_flash_enable+0xc8>)
    2908:	4798      	blx	r3
    290a:	e7ca      	b.n	28a2 <spi_flash_enable+0x16>
	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    290c:	2100      	movs	r1, #0
    290e:	4812      	ldr	r0, [pc, #72]	; (2958 <spi_flash_enable+0xcc>)
    2910:	4c10      	ldr	r4, [pc, #64]	; (2954 <spi_flash_enable+0xc8>)
    2912:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    2914:	21b9      	movs	r1, #185	; 0xb9
    2916:	4811      	ldr	r0, [pc, #68]	; (295c <spi_flash_enable+0xd0>)
    2918:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    291a:	2101      	movs	r1, #1
    291c:	4810      	ldr	r0, [pc, #64]	; (2960 <spi_flash_enable+0xd4>)
    291e:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    2920:	2100      	movs	r1, #0
    2922:	4810      	ldr	r0, [pc, #64]	; (2964 <spi_flash_enable+0xd8>)
    2924:	47a0      	blx	r4
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    2926:	2181      	movs	r1, #129	; 0x81
    2928:	480f      	ldr	r0, [pc, #60]	; (2968 <spi_flash_enable+0xdc>)
    292a:	47a0      	blx	r4
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    292c:	4e0f      	ldr	r6, [pc, #60]	; (296c <spi_flash_enable+0xe0>)
    292e:	4c10      	ldr	r4, [pc, #64]	; (2970 <spi_flash_enable+0xe4>)
    2930:	0030      	movs	r0, r6
    2932:	47a0      	blx	r4
    2934:	2801      	cmp	r0, #1
    2936:	d1fb      	bne.n	2930 <spi_flash_enable+0xa4>
    2938:	e7dd      	b.n	28f6 <spi_flash_enable+0x6a>
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	000014c1 	.word	0x000014c1
    2940:	0000039f 	.word	0x0000039f
    2944:	00001410 	.word	0x00001410
    2948:	00001939 	.word	0x00001939
    294c:	f8888fff 	.word	0xf8888fff
    2950:	01111000 	.word	0x01111000
    2954:	00001945 	.word	0x00001945
    2958:	00010208 	.word	0x00010208
    295c:	0001020c 	.word	0x0001020c
    2960:	00010214 	.word	0x00010214
    2964:	0001021c 	.word	0x0001021c
    2968:	00010204 	.word	0x00010204
    296c:	00010218 	.word	0x00010218
    2970:	0000192d 	.word	0x0000192d

00002974 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    2974:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    2976:	2000      	movs	r0, #0
    2978:	4b08      	ldr	r3, [pc, #32]	; (299c <delay_init+0x28>)
    297a:	4798      	blx	r3
    297c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    297e:	4c08      	ldr	r4, [pc, #32]	; (29a0 <delay_init+0x2c>)
    2980:	21fa      	movs	r1, #250	; 0xfa
    2982:	0089      	lsls	r1, r1, #2
    2984:	47a0      	blx	r4
    2986:	4b07      	ldr	r3, [pc, #28]	; (29a4 <delay_init+0x30>)
    2988:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    298a:	4907      	ldr	r1, [pc, #28]	; (29a8 <delay_init+0x34>)
    298c:	0028      	movs	r0, r5
    298e:	47a0      	blx	r4
    2990:	4b06      	ldr	r3, [pc, #24]	; (29ac <delay_init+0x38>)
    2992:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2994:	2205      	movs	r2, #5
    2996:	4b06      	ldr	r3, [pc, #24]	; (29b0 <delay_init+0x3c>)
    2998:	601a      	str	r2, [r3, #0]
}
    299a:	bd70      	pop	{r4, r5, r6, pc}
    299c:	00005891 	.word	0x00005891
    29a0:	00014b71 	.word	0x00014b71
    29a4:	20000004 	.word	0x20000004
    29a8:	000f4240 	.word	0x000f4240
    29ac:	20000008 	.word	0x20000008
    29b0:	e000e010 	.word	0xe000e010

000029b4 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    29b4:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    29b6:	4b08      	ldr	r3, [pc, #32]	; (29d8 <delay_cycles_us+0x24>)
    29b8:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    29ba:	4a08      	ldr	r2, [pc, #32]	; (29dc <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
    29bc:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29be:	2180      	movs	r1, #128	; 0x80
    29c0:	0249      	lsls	r1, r1, #9
	while (n--) {
    29c2:	3801      	subs	r0, #1
    29c4:	d307      	bcc.n	29d6 <delay_cycles_us+0x22>
	if (n > 0) {
    29c6:	2c00      	cmp	r4, #0
    29c8:	d0fb      	beq.n	29c2 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    29ca:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    29cc:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29ce:	6813      	ldr	r3, [r2, #0]
    29d0:	420b      	tst	r3, r1
    29d2:	d0fc      	beq.n	29ce <delay_cycles_us+0x1a>
    29d4:	e7f5      	b.n	29c2 <delay_cycles_us+0xe>
	}
}
    29d6:	bd30      	pop	{r4, r5, pc}
    29d8:	20000008 	.word	0x20000008
    29dc:	e000e010 	.word	0xe000e010

000029e0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    29e0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    29e2:	4b08      	ldr	r3, [pc, #32]	; (2a04 <delay_cycles_ms+0x24>)
    29e4:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
    29e6:	4a08      	ldr	r2, [pc, #32]	; (2a08 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    29e8:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29ea:	2180      	movs	r1, #128	; 0x80
    29ec:	0249      	lsls	r1, r1, #9
	while (n--) {
    29ee:	3801      	subs	r0, #1
    29f0:	d307      	bcc.n	2a02 <delay_cycles_ms+0x22>
	if (n > 0) {
    29f2:	2c00      	cmp	r4, #0
    29f4:	d0fb      	beq.n	29ee <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    29f6:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    29f8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    29fa:	6813      	ldr	r3, [r2, #0]
    29fc:	420b      	tst	r3, r1
    29fe:	d0fc      	beq.n	29fa <delay_cycles_ms+0x1a>
    2a00:	e7f5      	b.n	29ee <delay_cycles_ms+0xe>
	}
}
    2a02:	bd30      	pop	{r4, r5, pc}
    2a04:	20000004 	.word	0x20000004
    2a08:	e000e010 	.word	0xe000e010

00002a0c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    2a0c:	4b0c      	ldr	r3, [pc, #48]	; (2a40 <cpu_irq_enter_critical+0x34>)
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	2b00      	cmp	r3, #0
    2a12:	d106      	bne.n	2a22 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2a14:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    2a18:	2b00      	cmp	r3, #0
    2a1a:	d007      	beq.n	2a2c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2a1c:	2200      	movs	r2, #0
    2a1e:	4b09      	ldr	r3, [pc, #36]	; (2a44 <cpu_irq_enter_critical+0x38>)
    2a20:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2a22:	4a07      	ldr	r2, [pc, #28]	; (2a40 <cpu_irq_enter_critical+0x34>)
    2a24:	6813      	ldr	r3, [r2, #0]
    2a26:	3301      	adds	r3, #1
    2a28:	6013      	str	r3, [r2, #0]
}
    2a2a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    2a2c:	b672      	cpsid	i
    2a2e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2a32:	2200      	movs	r2, #0
    2a34:	4b04      	ldr	r3, [pc, #16]	; (2a48 <cpu_irq_enter_critical+0x3c>)
    2a36:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2a38:	3201      	adds	r2, #1
    2a3a:	4b02      	ldr	r3, [pc, #8]	; (2a44 <cpu_irq_enter_critical+0x38>)
    2a3c:	701a      	strb	r2, [r3, #0]
    2a3e:	e7f0      	b.n	2a22 <cpu_irq_enter_critical+0x16>
    2a40:	20000ab8 	.word	0x20000ab8
    2a44:	20000abc 	.word	0x20000abc
    2a48:	2000000c 	.word	0x2000000c

00002a4c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2a4c:	4b08      	ldr	r3, [pc, #32]	; (2a70 <cpu_irq_leave_critical+0x24>)
    2a4e:	681a      	ldr	r2, [r3, #0]
    2a50:	3a01      	subs	r2, #1
    2a52:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2a54:	681b      	ldr	r3, [r3, #0]
    2a56:	2b00      	cmp	r3, #0
    2a58:	d109      	bne.n	2a6e <cpu_irq_leave_critical+0x22>
    2a5a:	4b06      	ldr	r3, [pc, #24]	; (2a74 <cpu_irq_leave_critical+0x28>)
    2a5c:	781b      	ldrb	r3, [r3, #0]
    2a5e:	2b00      	cmp	r3, #0
    2a60:	d005      	beq.n	2a6e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    2a62:	2201      	movs	r2, #1
    2a64:	4b04      	ldr	r3, [pc, #16]	; (2a78 <cpu_irq_leave_critical+0x2c>)
    2a66:	701a      	strb	r2, [r3, #0]
    2a68:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2a6c:	b662      	cpsie	i
	}
}
    2a6e:	4770      	bx	lr
    2a70:	20000ab8 	.word	0x20000ab8
    2a74:	20000abc 	.word	0x20000abc
    2a78:	2000000c 	.word	0x2000000c

00002a7c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    2a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a7e:	46c6      	mov	lr, r8
    2a80:	b500      	push	{lr}
    2a82:	b082      	sub	sp, #8
	config->input_pull = PORT_PIN_PULL_UP;
    2a84:	ac01      	add	r4, sp, #4
    2a86:	2501      	movs	r5, #1
    2a88:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    2a8a:	2300      	movs	r3, #0
    2a8c:	4698      	mov	r8, r3
    2a8e:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2a90:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    2a92:	0021      	movs	r1, r4
    2a94:	2013      	movs	r0, #19
    2a96:	4e12      	ldr	r6, [pc, #72]	; (2ae0 <system_board_init+0x64>)
    2a98:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
    2a9a:	4f12      	ldr	r7, [pc, #72]	; (2ae4 <system_board_init+0x68>)
    2a9c:	2380      	movs	r3, #128	; 0x80
    2a9e:	031b      	lsls	r3, r3, #12
    2aa0:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2aa2:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
    2aa4:	0021      	movs	r1, r4
    2aa6:	2012      	movs	r0, #18
    2aa8:	47b0      	blx	r6
    2aaa:	2380      	movs	r3, #128	; 0x80
    2aac:	02db      	lsls	r3, r3, #11
    2aae:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2ab0:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
    2ab2:	0021      	movs	r1, r4
    2ab4:	200d      	movs	r0, #13
    2ab6:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    2ab8:	2380      	movs	r3, #128	; 0x80
    2aba:	019b      	lsls	r3, r3, #6
    2abc:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    2abe:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
    2ac0:	0021      	movs	r1, r4
    2ac2:	2009      	movs	r0, #9
    2ac4:	47b0      	blx	r6
    2ac6:	2380      	movs	r3, #128	; 0x80
    2ac8:	009b      	lsls	r3, r3, #2
    2aca:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    2acc:	4643      	mov	r3, r8
    2ace:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    2ad0:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    2ad2:	0021      	movs	r1, r4
    2ad4:	201c      	movs	r0, #28
    2ad6:	47b0      	blx	r6
		
}
    2ad8:	b002      	add	sp, #8
    2ada:	bc04      	pop	{r2}
    2adc:	4690      	mov	r8, r2
    2ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ae0:	000036fd 	.word	0x000036fd
    2ae4:	40002800 	.word	0x40002800

00002ae8 <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    2ae8:	2000      	movs	r0, #0
    2aea:	4770      	bx	lr

00002aec <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
    2aec:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    2aee:	2300      	movs	r3, #0
    2af0:	2200      	movs	r2, #0
    2af2:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
    2af4:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
    2af6:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
    2af8:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    2afa:	2100      	movs	r1, #0
    2afc:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
    2afe:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
    2b00:	61c3      	str	r3, [r0, #28]
#if SAMR30 || SAMR34 || SAMR35
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
    2b02:	2406      	movs	r4, #6
    2b04:	7104      	strb	r4, [r0, #4]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
    2b06:	24c0      	movs	r4, #192	; 0xc0
    2b08:	0164      	lsls	r4, r4, #5
    2b0a:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    2b0c:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    2b0e:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
    2b10:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
    2b12:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
    2b14:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    2b16:	242a      	movs	r4, #42	; 0x2a
    2b18:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
    2b1a:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
    2b1c:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
    2b1e:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
    2b20:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
    2b22:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
    2b24:	3c06      	subs	r4, #6
    2b26:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    2b28:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    2b2a:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
    2b2c:	7541      	strb	r1, [r0, #21]
}
    2b2e:	bd10      	pop	{r4, pc}

00002b30 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
    2b30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b32:	46ce      	mov	lr, r9
    2b34:	b500      	push	{lr}
    2b36:	b098      	sub	sp, #96	; 0x60
    2b38:	0005      	movs	r5, r0
    2b3a:	000c      	movs	r4, r1
    2b3c:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
    2b3e:	0008      	movs	r0, r1
    2b40:	4bb2      	ldr	r3, [pc, #712]	; (2e0c <adc_init+0x2dc>)
    2b42:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    2b44:	602c      	str	r4, [r5, #0]

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
    2b46:	4ab2      	ldr	r2, [pc, #712]	; (2e10 <adc_init+0x2e0>)
    2b48:	6a13      	ldr	r3, [r2, #32]
    2b4a:	2108      	movs	r1, #8
    2b4c:	430b      	orrs	r3, r1
    2b4e:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2b50:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2b52:	2305      	movs	r3, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
    2b54:	07d2      	lsls	r2, r2, #31
    2b56:	d504      	bpl.n	2b62 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
    2b58:	0018      	movs	r0, r3
    2b5a:	b018      	add	sp, #96	; 0x60
    2b5c:	bc04      	pop	{r2}
    2b5e:	4691      	mov	r9, r2
    2b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    2b62:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
    2b64:	8c13      	ldrh	r3, [r2, #32]
    2b66:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2b68:	2b00      	cmp	r3, #0
    2b6a:	d1fb      	bne.n	2b64 <adc_init+0x34>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2b6c:	7822      	ldrb	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    2b6e:	331c      	adds	r3, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
    2b70:	0792      	lsls	r2, r2, #30
    2b72:	d4f1      	bmi.n	2b58 <adc_init+0x28>
	module_inst->reference = config->reference;
    2b74:	7873      	ldrb	r3, [r6, #1]
    2b76:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
    2b78:	2b00      	cmp	r3, #0
    2b7a:	d104      	bne.n	2b86 <adc_init+0x56>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
    2b7c:	4aa5      	ldr	r2, [pc, #660]	; (2e14 <adc_init+0x2e4>)
    2b7e:	69d3      	ldr	r3, [r2, #28]
    2b80:	2104      	movs	r1, #4
    2b82:	430b      	orrs	r3, r1
    2b84:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
    2b86:	2300      	movs	r3, #0
    2b88:	60ab      	str	r3, [r5, #8]
    2b8a:	60eb      	str	r3, [r5, #12]
    2b8c:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
    2b8e:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
    2b90:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
    2b92:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
    2b94:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
    2b96:	0080      	lsls	r0, r0, #2
    2b98:	4b9f      	ldr	r3, [pc, #636]	; (2e18 <adc_init+0x2e8>)
    2b9a:	50c5      	str	r5, [r0, r3]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
    2b9c:	232a      	movs	r3, #42	; 0x2a
    2b9e:	5cf3      	ldrb	r3, [r6, r3]
    2ba0:	2b00      	cmp	r3, #0
    2ba2:	d105      	bne.n	2bb0 <adc_init+0x80>
    2ba4:	7b33      	ldrb	r3, [r6, #12]
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	d102      	bne.n	2bb0 <adc_init+0x80>
		module_inst->software_trigger = true;
    2baa:	3301      	adds	r3, #1
    2bac:	776b      	strb	r3, [r5, #29]
    2bae:	e001      	b.n	2bb4 <adc_init+0x84>
		module_inst->software_trigger = false;
    2bb0:	2300      	movs	r3, #0
    2bb2:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
    2bb4:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
    2bb6:	7833      	ldrb	r3, [r6, #0]
    2bb8:	466a      	mov	r2, sp
    2bba:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
    2bbc:	4669      	mov	r1, sp
    2bbe:	201e      	movs	r0, #30
    2bc0:	4b96      	ldr	r3, [pc, #600]	; (2e1c <adc_init+0x2ec>)
    2bc2:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
    2bc4:	201e      	movs	r0, #30
    2bc6:	4b96      	ldr	r3, [pc, #600]	; (2e20 <adc_init+0x2f0>)
    2bc8:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
    2bca:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
    2bcc:	2258      	movs	r2, #88	; 0x58
    2bce:	4995      	ldr	r1, [pc, #596]	; (2e24 <adc_init+0x2f4>)
    2bd0:	a802      	add	r0, sp, #8
    2bd2:	4b95      	ldr	r3, [pc, #596]	; (2e28 <adc_init+0x2f8>)
    2bd4:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
    2bd6:	2c13      	cmp	r4, #19
    2bd8:	d90b      	bls.n	2bf2 <adc_init+0xc2>
	_adc_configure_ain_pin(index, config->negative_input);
    2bda:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
    2bdc:	2258      	movs	r2, #88	; 0x58
    2bde:	4991      	ldr	r1, [pc, #580]	; (2e24 <adc_init+0x2f4>)
    2be0:	a802      	add	r0, sp, #8
    2be2:	4b91      	ldr	r3, [pc, #580]	; (2e28 <adc_init+0x2f8>)
    2be4:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
    2be6:	2c13      	cmp	r4, #19
    2be8:	d911      	bls.n	2c0e <adc_init+0xde>
    2bea:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
    2bec:	4b8e      	ldr	r3, [pc, #568]	; (2e28 <adc_init+0x2f8>)
    2bee:	4699      	mov	r9, r3
    2bf0:	e01e      	b.n	2c30 <adc_init+0x100>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2bf2:	00a4      	lsls	r4, r4, #2
    2bf4:	ab02      	add	r3, sp, #8
    2bf6:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2bf8:	a901      	add	r1, sp, #4
    2bfa:	2300      	movs	r3, #0
    2bfc:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2bfe:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2c00:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2c02:	3301      	adds	r3, #1
    2c04:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2c06:	b2c0      	uxtb	r0, r0
    2c08:	4b88      	ldr	r3, [pc, #544]	; (2e2c <adc_init+0x2fc>)
    2c0a:	4798      	blx	r3
    2c0c:	e7e5      	b.n	2bda <adc_init+0xaa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2c0e:	00a4      	lsls	r4, r4, #2
    2c10:	ab02      	add	r3, sp, #8
    2c12:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2c14:	a901      	add	r1, sp, #4
    2c16:	2300      	movs	r3, #0
    2c18:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2c1a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2c1c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2c1e:	3301      	adds	r3, #1
    2c20:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2c22:	b2c0      	uxtb	r0, r0
    2c24:	4b81      	ldr	r3, [pc, #516]	; (2e2c <adc_init+0x2fc>)
    2c26:	4798      	blx	r3
    2c28:	e7df      	b.n	2bea <adc_init+0xba>
    2c2a:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
    2c2c:	2c14      	cmp	r4, #20
    2c2e:	d018      	beq.n	2c62 <adc_init+0x132>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
    2c30:	2301      	movs	r3, #1
    2c32:	40a3      	lsls	r3, r4
    2c34:	6932      	ldr	r2, [r6, #16]
    2c36:	421a      	tst	r2, r3
    2c38:	d0f7      	beq.n	2c2a <adc_init+0xfa>
	const uint32_t pinmapping[] = {
    2c3a:	2258      	movs	r2, #88	; 0x58
    2c3c:	4979      	ldr	r1, [pc, #484]	; (2e24 <adc_init+0x2f4>)
    2c3e:	a802      	add	r0, sp, #8
    2c40:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
    2c42:	2c13      	cmp	r4, #19
    2c44:	d8f1      	bhi.n	2c2a <adc_init+0xfa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
    2c46:	00a3      	lsls	r3, r4, #2
    2c48:	aa02      	add	r2, sp, #8
    2c4a:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2c4c:	a901      	add	r1, sp, #4
    2c4e:	2300      	movs	r3, #0
    2c50:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    2c52:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
    2c54:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
    2c56:	3301      	adds	r3, #1
    2c58:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
    2c5a:	b2c0      	uxtb	r0, r0
    2c5c:	4b73      	ldr	r3, [pc, #460]	; (2e2c <adc_init+0x2fc>)
    2c5e:	4798      	blx	r3
    2c60:	e7e3      	b.n	2c2a <adc_init+0xfa>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
    2c62:	7b73      	ldrb	r3, [r6, #13]
    2c64:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
    2c66:	7bb2      	ldrb	r2, [r6, #14]
    2c68:	01d2      	lsls	r2, r2, #7
    2c6a:	4313      	orrs	r3, r2
    2c6c:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
    2c6e:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
    2c70:	7d33      	ldrb	r3, [r6, #20]
    2c72:	01db      	lsls	r3, r3, #7
			| (config->reference);
    2c74:	7872      	ldrb	r2, [r6, #1]
    2c76:	4313      	orrs	r3, r2
    2c78:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
    2c7a:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
    2c7c:	78f3      	ldrb	r3, [r6, #3]
    2c7e:	2b34      	cmp	r3, #52	; 0x34
    2c80:	d900      	bls.n	2c84 <adc_init+0x154>
    2c82:	e140      	b.n	2f06 <adc_init+0x3d6>
    2c84:	009b      	lsls	r3, r3, #2
    2c86:	4a6a      	ldr	r2, [pc, #424]	; (2e30 <adc_init+0x300>)
    2c88:	58d3      	ldr	r3, [r2, r3]
    2c8a:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
    2c8c:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
    2c8e:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
    2c90:	2102      	movs	r1, #2
    2c92:	e01a      	b.n	2cca <adc_init+0x19a>
		adjres = config->divide_result;
    2c94:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
    2c96:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
    2c98:	2010      	movs	r0, #16
    2c9a:	e016      	b.n	2cca <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
    2c9c:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
    2c9e:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
    2ca0:	2101      	movs	r1, #1
    2ca2:	e012      	b.n	2cca <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
    2ca4:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
    2ca6:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
    2ca8:	2100      	movs	r1, #0
    2caa:	e00e      	b.n	2cca <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2cac:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
    2cae:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
    2cb0:	2100      	movs	r1, #0
    2cb2:	e00a      	b.n	2cca <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2cb4:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
    2cb6:	2020      	movs	r0, #32
	uint8_t adjres = 0;
    2cb8:	2100      	movs	r1, #0
    2cba:	e006      	b.n	2cca <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
    2cbc:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
    2cbe:	2000      	movs	r0, #0
	uint8_t adjres = 0;
    2cc0:	2100      	movs	r1, #0
    2cc2:	e002      	b.n	2cca <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
    2cc4:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
    2cc6:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
    2cc8:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
    2cca:	0109      	lsls	r1, r1, #4
    2ccc:	2370      	movs	r3, #112	; 0x70
    2cce:	400b      	ands	r3, r1
    2cd0:	4313      	orrs	r3, r2
    2cd2:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
    2cd4:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2cd6:	8c13      	ldrh	r3, [r2, #32]
    2cd8:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2cda:	2b00      	cmp	r3, #0
    2cdc:	d1fb      	bne.n	2cd6 <adc_init+0x1a6>
	if (config->sample_length > 63) {
    2cde:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
    2ce0:	3317      	adds	r3, #23
	if (config->sample_length > 63) {
    2ce2:	2a3f      	cmp	r2, #63	; 0x3f
    2ce4:	d900      	bls.n	2ce8 <adc_init+0x1b8>
    2ce6:	e737      	b.n	2b58 <adc_init+0x28>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
    2ce8:	7bf3      	ldrb	r3, [r6, #15]
    2cea:	01db      	lsls	r3, r3, #7
    2cec:	431a      	orrs	r2, r3
    2cee:	b2d2      	uxtb	r2, r2
		adc_module->SAMPCTRL.reg =
    2cf0:	737a      	strb	r2, [r7, #13]
	Adc *const adc_module = module_inst->hw;
    2cf2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2cf4:	8c13      	ldrh	r3, [r2, #32]
    2cf6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2cf8:	2b00      	cmp	r3, #0
    2cfa:	d1fb      	bne.n	2cf4 <adc_init+0x1c4>
			config->clock_prescaler;
    2cfc:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
    2cfe:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
    2d00:	2324      	movs	r3, #36	; 0x24
    2d02:	5cf3      	ldrb	r3, [r6, r3]
    2d04:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
    2d06:	7b32      	ldrb	r2, [r6, #12]
    2d08:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
    2d0a:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
    2d0c:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
    2d0e:	4313      	orrs	r3, r2
    2d10:	7ab2      	ldrb	r2, [r6, #10]
    2d12:	0052      	lsls	r2, r2, #1
    2d14:	4313      	orrs	r3, r2
    2d16:	4303      	orrs	r3, r0
	adc_module->CTRLC.reg =
    2d18:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
    2d1a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2d1c:	8c13      	ldrh	r3, [r2, #32]
    2d1e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2d20:	2b00      	cmp	r3, #0
    2d22:	d1fb      	bne.n	2d1c <adc_init+0x1ec>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
    2d24:	8b32      	ldrh	r2, [r6, #24]
    2d26:	2a00      	cmp	r2, #0
    2d28:	d020      	beq.n	2d6c <adc_init+0x23c>
		switch (resolution) {
    2d2a:	2810      	cmp	r0, #16
    2d2c:	d100      	bne.n	2d30 <adc_init+0x200>
    2d2e:	e0c9      	b.n	2ec4 <adc_init+0x394>
    2d30:	d800      	bhi.n	2d34 <adc_init+0x204>
    2d32:	e083      	b.n	2e3c <adc_init+0x30c>
    2d34:	2820      	cmp	r0, #32
    2d36:	d100      	bne.n	2d3a <adc_init+0x20a>
    2d38:	e0a3      	b.n	2e82 <adc_init+0x352>
    2d3a:	2830      	cmp	r0, #48	; 0x30
    2d3c:	d116      	bne.n	2d6c <adc_init+0x23c>
			if (config->differential_mode &&
    2d3e:	7af3      	ldrb	r3, [r6, #11]
    2d40:	2b00      	cmp	r3, #0
    2d42:	d00a      	beq.n	2d5a <adc_init+0x22a>
					(config->window.window_lower_value > 127 ||
    2d44:	69f1      	ldr	r1, [r6, #28]
    2d46:	3180      	adds	r1, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
    2d48:	2317      	movs	r3, #23
			if (config->differential_mode &&
    2d4a:	29ff      	cmp	r1, #255	; 0xff
    2d4c:	d900      	bls.n	2d50 <adc_init+0x220>
    2d4e:	e703      	b.n	2b58 <adc_init+0x28>
					config->window.window_lower_value < -128 ||
    2d50:	6a31      	ldr	r1, [r6, #32]
    2d52:	3180      	adds	r1, #128	; 0x80
    2d54:	29ff      	cmp	r1, #255	; 0xff
    2d56:	d900      	bls.n	2d5a <adc_init+0x22a>
    2d58:	e6fe      	b.n	2b58 <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
    2d5a:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 255 ||
    2d5c:	69f1      	ldr	r1, [r6, #28]
    2d5e:	29ff      	cmp	r1, #255	; 0xff
    2d60:	dd00      	ble.n	2d64 <adc_init+0x234>
    2d62:	e6f9      	b.n	2b58 <adc_init+0x28>
    2d64:	6a31      	ldr	r1, [r6, #32]
    2d66:	29ff      	cmp	r1, #255	; 0xff
    2d68:	dd00      	ble.n	2d6c <adc_init+0x23c>
    2d6a:	e6f5      	b.n	2b58 <adc_init+0x28>
	adc_module->CTRLC.reg |= config->window.window_mode;
    2d6c:	897b      	ldrh	r3, [r7, #10]
    2d6e:	431a      	orrs	r2, r3
    2d70:	817a      	strh	r2, [r7, #10]
	Adc *const adc_module = module_inst->hw;
    2d72:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2d74:	8c13      	ldrh	r3, [r2, #32]
    2d76:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d1fb      	bne.n	2d74 <adc_init+0x244>
	adc_module->WINLT.reg =
    2d7c:	8bb3      	ldrh	r3, [r6, #28]
    2d7e:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
    2d80:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2d82:	8c13      	ldrh	r3, [r2, #32]
    2d84:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2d86:	2b00      	cmp	r3, #0
    2d88:	d1fb      	bne.n	2d82 <adc_init+0x252>
	adc_module->WINUT.reg = config->window.window_upper_value <<
    2d8a:	8c33      	ldrh	r3, [r6, #32]
    2d8c:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
    2d8e:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2d90:	8c13      	ldrh	r3, [r2, #32]
    2d92:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2d94:	2b00      	cmp	r3, #0
    2d96:	d1fb      	bne.n	2d90 <adc_init+0x260>
			config->positive_input;
    2d98:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
    2d9a:	88f2      	ldrh	r2, [r6, #6]
    2d9c:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
    2d9e:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
    2da0:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2da2:	8c13      	ldrh	r3, [r2, #32]
    2da4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    2da6:	2b00      	cmp	r3, #0
    2da8:	d1fb      	bne.n	2da2 <adc_init+0x272>
	adc_module->EVCTRL.reg = config->event_action;
    2daa:	332a      	adds	r3, #42	; 0x2a
    2dac:	5cf3      	ldrb	r3, [r6, r3]
    2dae:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
    2db0:	2307      	movs	r3, #7
    2db2:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
    2db4:	331d      	adds	r3, #29
    2db6:	5cf3      	ldrb	r3, [r6, r3]
    2db8:	2b00      	cmp	r3, #0
    2dba:	d01b      	beq.n	2df4 <adc_init+0x2c4>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2dbc:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
    2dbe:	491d      	ldr	r1, [pc, #116]	; (2e34 <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
    2dc0:	2317      	movs	r3, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
    2dc2:	428a      	cmp	r2, r1
    2dc4:	d900      	bls.n	2dc8 <adc_init+0x298>
    2dc6:	e6c7      	b.n	2b58 <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
    2dc8:	827a      	strh	r2, [r7, #18]
	Adc *const adc_module = module_inst->hw;
    2dca:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2dcc:	8c13      	ldrh	r3, [r2, #32]
    2dce:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
    2dd0:	2b00      	cmp	r3, #0
    2dd2:	d1fb      	bne.n	2dcc <adc_init+0x29c>
		if (config->correction.offset_correction > 2047 ||
    2dd4:	8d31      	ldrh	r1, [r6, #40]	; 0x28
    2dd6:	2380      	movs	r3, #128	; 0x80
    2dd8:	011b      	lsls	r3, r3, #4
    2dda:	18ca      	adds	r2, r1, r3
    2ddc:	4815      	ldr	r0, [pc, #84]	; (2e34 <adc_init+0x304>)
    2dde:	b292      	uxth	r2, r2
			return STATUS_ERR_INVALID_ARG;
    2de0:	2317      	movs	r3, #23
		if (config->correction.offset_correction > 2047 ||
    2de2:	4282      	cmp	r2, r0
    2de4:	d900      	bls.n	2de8 <adc_init+0x2b8>
    2de6:	e6b7      	b.n	2b58 <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
    2de8:	82b9      	strh	r1, [r7, #20]
	Adc *const adc_module = module_inst->hw;
    2dea:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
    2dec:	8c13      	ldrh	r3, [r2, #32]
    2dee:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
    2df0:	2b00      	cmp	r3, #0
    2df2:	d1fb      	bne.n	2dec <adc_init+0x2bc>
			ADC_CALIB_BIASREFBUF(
    2df4:	4b10      	ldr	r3, [pc, #64]	; (2e38 <adc_init+0x308>)
    2df6:	681b      	ldr	r3, [r3, #0]
    2df8:	021a      	lsls	r2, r3, #8
    2dfa:	21e0      	movs	r1, #224	; 0xe0
    2dfc:	00c9      	lsls	r1, r1, #3
    2dfe:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
    2e00:	069b      	lsls	r3, r3, #26
    2e02:	0f5b      	lsrs	r3, r3, #29
			) |
    2e04:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
    2e06:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
    2e08:	2300      	movs	r3, #0
    2e0a:	e6a5      	b.n	2b58 <adc_init+0x28>
    2e0c:	00002ae9 	.word	0x00002ae9
    2e10:	40000400 	.word	0x40000400
    2e14:	40001400 	.word	0x40001400
    2e18:	20001120 	.word	0x20001120
    2e1c:	0000596d 	.word	0x0000596d
    2e20:	000058fd 	.word	0x000058fd
    2e24:	0001dd20 	.word	0x0001dd20
    2e28:	00018195 	.word	0x00018195
    2e2c:	00005a69 	.word	0x00005a69
    2e30:	0001dc4c 	.word	0x0001dc4c
    2e34:	00000fff 	.word	0x00000fff
    2e38:	00806020 	.word	0x00806020
		switch (resolution) {
    2e3c:	2800      	cmp	r0, #0
    2e3e:	d195      	bne.n	2d6c <adc_init+0x23c>
			if (config->differential_mode &&
    2e40:	7af3      	ldrb	r3, [r6, #11]
    2e42:	2b00      	cmp	r3, #0
    2e44:	d012      	beq.n	2e6c <adc_init+0x33c>
					(config->window.window_lower_value > 2047 ||
    2e46:	69f3      	ldr	r3, [r6, #28]
    2e48:	2080      	movs	r0, #128	; 0x80
    2e4a:	0100      	lsls	r0, r0, #4
    2e4c:	4684      	mov	ip, r0
    2e4e:	4463      	add	r3, ip
    2e50:	0019      	movs	r1, r3
			if (config->differential_mode &&
    2e52:	482e      	ldr	r0, [pc, #184]	; (2f0c <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
    2e54:	2317      	movs	r3, #23
			if (config->differential_mode &&
    2e56:	4281      	cmp	r1, r0
    2e58:	d900      	bls.n	2e5c <adc_init+0x32c>
    2e5a:	e67d      	b.n	2b58 <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
    2e5c:	6a33      	ldr	r3, [r6, #32]
    2e5e:	4463      	add	r3, ip
    2e60:	0019      	movs	r1, r3
    2e62:	482a      	ldr	r0, [pc, #168]	; (2f0c <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
    2e64:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
    2e66:	4281      	cmp	r1, r0
    2e68:	d900      	bls.n	2e6c <adc_init+0x33c>
    2e6a:	e675      	b.n	2b58 <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
    2e6c:	4927      	ldr	r1, [pc, #156]	; (2f0c <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
    2e6e:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 4095 ||
    2e70:	69f0      	ldr	r0, [r6, #28]
    2e72:	4288      	cmp	r0, r1
    2e74:	dd00      	ble.n	2e78 <adc_init+0x348>
    2e76:	e66f      	b.n	2b58 <adc_init+0x28>
    2e78:	6a30      	ldr	r0, [r6, #32]
    2e7a:	4288      	cmp	r0, r1
    2e7c:	dd00      	ble.n	2e80 <adc_init+0x350>
    2e7e:	e66b      	b.n	2b58 <adc_init+0x28>
    2e80:	e774      	b.n	2d6c <adc_init+0x23c>
			if (config->differential_mode &&
    2e82:	7af3      	ldrb	r3, [r6, #11]
    2e84:	2b00      	cmp	r3, #0
    2e86:	d012      	beq.n	2eae <adc_init+0x37e>
					(config->window.window_lower_value > 511 ||
    2e88:	69f3      	ldr	r3, [r6, #28]
    2e8a:	2080      	movs	r0, #128	; 0x80
    2e8c:	0080      	lsls	r0, r0, #2
    2e8e:	4684      	mov	ip, r0
    2e90:	4463      	add	r3, ip
    2e92:	0019      	movs	r1, r3
			if (config->differential_mode &&
    2e94:	481e      	ldr	r0, [pc, #120]	; (2f10 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
    2e96:	2317      	movs	r3, #23
			if (config->differential_mode &&
    2e98:	4281      	cmp	r1, r0
    2e9a:	d900      	bls.n	2e9e <adc_init+0x36e>
    2e9c:	e65c      	b.n	2b58 <adc_init+0x28>
					config->window.window_lower_value < -512 ||
    2e9e:	6a33      	ldr	r3, [r6, #32]
    2ea0:	4463      	add	r3, ip
    2ea2:	0019      	movs	r1, r3
    2ea4:	481a      	ldr	r0, [pc, #104]	; (2f10 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
    2ea6:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
    2ea8:	4281      	cmp	r1, r0
    2eaa:	d900      	bls.n	2eae <adc_init+0x37e>
    2eac:	e654      	b.n	2b58 <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
    2eae:	4918      	ldr	r1, [pc, #96]	; (2f10 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
    2eb0:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 1023 ||
    2eb2:	69f0      	ldr	r0, [r6, #28]
    2eb4:	4288      	cmp	r0, r1
    2eb6:	dd00      	ble.n	2eba <adc_init+0x38a>
    2eb8:	e64e      	b.n	2b58 <adc_init+0x28>
    2eba:	6a30      	ldr	r0, [r6, #32]
    2ebc:	4288      	cmp	r0, r1
    2ebe:	dd00      	ble.n	2ec2 <adc_init+0x392>
    2ec0:	e64a      	b.n	2b58 <adc_init+0x28>
    2ec2:	e753      	b.n	2d6c <adc_init+0x23c>
			if (config->differential_mode &&
    2ec4:	7af3      	ldrb	r3, [r6, #11]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d012      	beq.n	2ef0 <adc_init+0x3c0>
					(config->window.window_lower_value > 32767 ||
    2eca:	69f3      	ldr	r3, [r6, #28]
    2ecc:	2080      	movs	r0, #128	; 0x80
    2ece:	0200      	lsls	r0, r0, #8
    2ed0:	4684      	mov	ip, r0
    2ed2:	4463      	add	r3, ip
    2ed4:	0019      	movs	r1, r3
			if (config->differential_mode &&
    2ed6:	480f      	ldr	r0, [pc, #60]	; (2f14 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
    2ed8:	2317      	movs	r3, #23
			if (config->differential_mode &&
    2eda:	4281      	cmp	r1, r0
    2edc:	d900      	bls.n	2ee0 <adc_init+0x3b0>
    2ede:	e63b      	b.n	2b58 <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
    2ee0:	6a33      	ldr	r3, [r6, #32]
    2ee2:	4463      	add	r3, ip
    2ee4:	0019      	movs	r1, r3
    2ee6:	480b      	ldr	r0, [pc, #44]	; (2f14 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
    2ee8:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
    2eea:	4281      	cmp	r1, r0
    2eec:	d900      	bls.n	2ef0 <adc_init+0x3c0>
    2eee:	e633      	b.n	2b58 <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
    2ef0:	4908      	ldr	r1, [pc, #32]	; (2f14 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
    2ef2:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 65535 ||
    2ef4:	69f0      	ldr	r0, [r6, #28]
    2ef6:	4288      	cmp	r0, r1
    2ef8:	dd00      	ble.n	2efc <adc_init+0x3cc>
    2efa:	e62d      	b.n	2b58 <adc_init+0x28>
    2efc:	6a30      	ldr	r0, [r6, #32]
    2efe:	4288      	cmp	r0, r1
    2f00:	dd00      	ble.n	2f04 <adc_init+0x3d4>
    2f02:	e629      	b.n	2b58 <adc_init+0x28>
    2f04:	e732      	b.n	2d6c <adc_init+0x23c>
		return STATUS_ERR_INVALID_ARG;
    2f06:	2317      	movs	r3, #23
    2f08:	e626      	b.n	2b58 <adc_init+0x28>
    2f0a:	46c0      	nop			; (mov r8, r8)
    2f0c:	00000fff 	.word	0x00000fff
    2f10:	000003ff 	.word	0x000003ff
    2f14:	0000ffff 	.word	0x0000ffff

00002f18 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
    2f18:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
    2f1a:	4b2f      	ldr	r3, [pc, #188]	; (2fd8 <ADC_Handler+0xc0>)
    2f1c:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
    2f1e:	6823      	ldr	r3, [r4, #0]
    2f20:	799a      	ldrb	r2, [r3, #6]
    2f22:	795d      	ldrb	r5, [r3, #5]
    2f24:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
    2f26:	07ea      	lsls	r2, r5, #31
    2f28:	d52a      	bpl.n	2f80 <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    2f2a:	2201      	movs	r2, #1
    2f2c:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
    2f2e:	6962      	ldr	r2, [r4, #20]
    2f30:	1c93      	adds	r3, r2, #2
    2f32:	6163      	str	r3, [r4, #20]
    2f34:	6823      	ldr	r3, [r4, #0]
    2f36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2f38:	b29b      	uxth	r3, r3
    2f3a:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
    2f3c:	8b23      	ldrh	r3, [r4, #24]
    2f3e:	3b01      	subs	r3, #1
    2f40:	b29b      	uxth	r3, r3
    2f42:	8323      	strh	r3, [r4, #24]
    2f44:	2b00      	cmp	r3, #0
    2f46:	d015      	beq.n	2f74 <ADC_Handler+0x5c>
			if (module->software_trigger == true
    2f48:	7f63      	ldrb	r3, [r4, #29]
    2f4a:	2b00      	cmp	r3, #0
    2f4c:	d018      	beq.n	2f80 <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
    2f4e:	6822      	ldr	r2, [r4, #0]
    2f50:	79d3      	ldrb	r3, [r2, #7]
    2f52:	b25b      	sxtb	r3, r3
    2f54:	2b00      	cmp	r3, #0
    2f56:	db13      	blt.n	2f80 <ADC_Handler+0x68>
    2f58:	8c13      	ldrh	r3, [r2, #32]
    2f5a:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d1fb      	bne.n	2f58 <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    2f60:	7e13      	ldrb	r3, [r2, #24]
    2f62:	2102      	movs	r1, #2
    2f64:	430b      	orrs	r3, r1
    2f66:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
    2f68:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
    2f6a:	8c13      	ldrh	r3, [r2, #32]
    2f6c:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
    2f6e:	2b00      	cmp	r3, #0
    2f70:	d1fb      	bne.n	2f6a <ADC_Handler+0x52>
    2f72:	e005      	b.n	2f80 <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    2f74:	2301      	movs	r3, #1
    2f76:	6822      	ldr	r2, [r4, #0]
    2f78:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
    2f7a:	7f23      	ldrb	r3, [r4, #28]
    2f7c:	2b05      	cmp	r3, #5
    2f7e:	d016      	beq.n	2fae <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
    2f80:	076b      	lsls	r3, r5, #29
    2f82:	d508      	bpl.n	2f96 <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    2f84:	2304      	movs	r3, #4
    2f86:	6822      	ldr	r2, [r4, #0]
    2f88:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    2f8a:	7ee3      	ldrb	r3, [r4, #27]
    2f8c:	079b      	lsls	r3, r3, #30
    2f8e:	d502      	bpl.n	2f96 <ADC_Handler+0x7e>
    2f90:	7ea3      	ldrb	r3, [r4, #26]
    2f92:	079b      	lsls	r3, r3, #30
    2f94:	d417      	bmi.n	2fc6 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
    2f96:	07ab      	lsls	r3, r5, #30
    2f98:	d508      	bpl.n	2fac <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    2f9a:	2302      	movs	r3, #2
    2f9c:	6822      	ldr	r2, [r4, #0]
    2f9e:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    2fa0:	7ee3      	ldrb	r3, [r4, #27]
    2fa2:	075b      	lsls	r3, r3, #29
    2fa4:	d502      	bpl.n	2fac <ADC_Handler+0x94>
    2fa6:	7ea3      	ldrb	r3, [r4, #26]
    2fa8:	075b      	lsls	r3, r3, #29
    2faa:	d410      	bmi.n	2fce <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
    2fac:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
    2fae:	2300      	movs	r3, #0
    2fb0:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
    2fb2:	7ee3      	ldrb	r3, [r4, #27]
    2fb4:	07db      	lsls	r3, r3, #31
    2fb6:	d5e3      	bpl.n	2f80 <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
    2fb8:	7ea3      	ldrb	r3, [r4, #26]
    2fba:	07db      	lsls	r3, r3, #31
    2fbc:	d5e0      	bpl.n	2f80 <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    2fbe:	0020      	movs	r0, r4
    2fc0:	68a3      	ldr	r3, [r4, #8]
    2fc2:	4798      	blx	r3
    2fc4:	e7dc      	b.n	2f80 <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    2fc6:	0020      	movs	r0, r4
    2fc8:	68e3      	ldr	r3, [r4, #12]
    2fca:	4798      	blx	r3
    2fcc:	e7e3      	b.n	2f96 <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
    2fce:	6923      	ldr	r3, [r4, #16]
    2fd0:	0020      	movs	r0, r4
    2fd2:	4798      	blx	r3
}
    2fd4:	e7ea      	b.n	2fac <ADC_Handler+0x94>
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	20001120 	.word	0x20001120

00002fdc <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
    2fdc:	2301      	movs	r3, #1
    2fde:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
    2fe0:	2300      	movs	r3, #0
    2fe2:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
    2fe4:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
    2fe6:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
    2fe8:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
    2fea:	220f      	movs	r2, #15
    2fec:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
    2fee:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
    2ff0:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
    2ff2:	7203      	strb	r3, [r0, #8]
}
    2ff4:	4770      	bx	lr

00002ff6 <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
    2ff6:	6802      	ldr	r2, [r0, #0]
    2ff8:	6813      	ldr	r3, [r2, #0]
    2ffa:	2102      	movs	r1, #2
    2ffc:	430b      	orrs	r3, r1
    2ffe:	6013      	str	r3, [r2, #0]

}
    3000:	4770      	bx	lr

00003002 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
    3002:	2303      	movs	r3, #3
    3004:	6802      	ldr	r2, [r0, #0]
    3006:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
    3008:	6802      	ldr	r2, [r0, #0]
    300a:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
    300c:	6802      	ldr	r2, [r0, #0]
    300e:	6813      	ldr	r3, [r2, #0]
    3010:	2102      	movs	r1, #2
    3012:	438b      	bics	r3, r1
    3014:	6013      	str	r3, [r2, #0]
}
    3016:	4770      	bx	lr

00003018 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
    3018:	b570      	push	{r4, r5, r6, lr}
    301a:	0004      	movs	r4, r0
    301c:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
    301e:	78d3      	ldrb	r3, [r2, #3]
    3020:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
    3022:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
    3024:	7853      	ldrb	r3, [r2, #1]
    3026:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
    3028:	7913      	ldrb	r3, [r2, #4]
    302a:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
    302c:	7813      	ldrb	r3, [r2, #0]
    302e:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
    3030:	7891      	ldrb	r1, [r2, #2]
    3032:	02c9      	lsls	r1, r1, #11
    3034:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
    3036:	7851      	ldrb	r1, [r2, #1]
    3038:	0209      	lsls	r1, r1, #8
    303a:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
    303c:	78d1      	ldrb	r1, [r2, #3]
    303e:	0089      	lsls	r1, r1, #2
    3040:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
    3042:	7911      	ldrb	r1, [r2, #4]
    3044:	0149      	lsls	r1, r1, #5
    3046:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
    3048:	7991      	ldrb	r1, [r2, #6]
    304a:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
    304c:	79d0      	ldrb	r0, [r2, #7]
    304e:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
    3050:	4301      	orrs	r1, r0
    3052:	7a10      	ldrb	r0, [r2, #8]
    3054:	0300      	lsls	r0, r0, #12
    3056:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
    3058:	7952      	ldrb	r2, [r2, #5]
    305a:	0412      	lsls	r2, r2, #16
    305c:	20f0      	movs	r0, #240	; 0xf0
    305e:	0300      	lsls	r0, r0, #12
    3060:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
    3062:	430a      	orrs	r2, r1
    3064:	4313      	orrs	r3, r2
    3066:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
    3068:	682b      	ldr	r3, [r5, #0]
    306a:	079b      	lsls	r3, r3, #30
    306c:	d401      	bmi.n	3072 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
    306e:	602e      	str	r6, [r5, #0]
	}
}
    3070:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
    3072:	0020      	movs	r0, r4
    3074:	4b03      	ldr	r3, [pc, #12]	; (3084 <aes_set_config+0x6c>)
    3076:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
    3078:	602e      	str	r6, [r5, #0]
		aes_enable(module);
    307a:	0020      	movs	r0, r4
    307c:	4b02      	ldr	r3, [pc, #8]	; (3088 <aes_set_config+0x70>)
    307e:	4798      	blx	r3
    3080:	e7f6      	b.n	3070 <aes_set_config+0x58>
    3082:	46c0      	nop			; (mov r8, r8)
    3084:	00003003 	.word	0x00003003
    3088:	00002ff7 	.word	0x00002ff7

0000308c <aes_init>:
{
    308c:	b570      	push	{r4, r5, r6, lr}
			MCLK->APBCMASK.reg |= mask;
    308e:	4c05      	ldr	r4, [pc, #20]	; (30a4 <aes_init+0x18>)
    3090:	69e5      	ldr	r5, [r4, #28]
    3092:	2380      	movs	r3, #128	; 0x80
    3094:	019b      	lsls	r3, r3, #6
    3096:	432b      	orrs	r3, r5
    3098:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
    309a:	2301      	movs	r3, #1
    309c:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
    309e:	4b02      	ldr	r3, [pc, #8]	; (30a8 <aes_init+0x1c>)
    30a0:	4798      	blx	r3
}
    30a2:	bd70      	pop	{r4, r5, r6, pc}
    30a4:	40000400 	.word	0x40000400
    30a8:	00003019 	.word	0x00003019

000030ac <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
    30ac:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
    30ae:	7943      	ldrb	r3, [r0, #5]
    30b0:	2b01      	cmp	r3, #1
    30b2:	d005      	beq.n	30c0 <aes_write_key+0x14>
    30b4:	2b00      	cmp	r3, #0
    30b6:	d010      	beq.n	30da <aes_write_key+0x2e>
    30b8:	2b02      	cmp	r3, #2
    30ba:	d10d      	bne.n	30d8 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
    30bc:	2508      	movs	r5, #8
    30be:	e000      	b.n	30c2 <aes_write_key+0x16>
		key_length = 6;
    30c0:	2506      	movs	r5, #6
{
    30c2:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
    30c4:	c910      	ldmia	r1!, {r4}
    30c6:	1c9a      	adds	r2, r3, #2
    30c8:	0092      	lsls	r2, r2, #2
    30ca:	6806      	ldr	r6, [r0, #0]
    30cc:	46b4      	mov	ip, r6
    30ce:	4462      	add	r2, ip
    30d0:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
    30d2:	3301      	adds	r3, #1
    30d4:	42ab      	cmp	r3, r5
    30d6:	d3f5      	bcc.n	30c4 <aes_write_key+0x18>
		key++;
	}
}
    30d8:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
    30da:	2504      	movs	r5, #4
    30dc:	e7f1      	b.n	30c2 <aes_write_key+0x16>
	...

000030e0 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
    30e0:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    30e2:	2300      	movs	r3, #0
    30e4:	6802      	ldr	r2, [r0, #0]
    30e6:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    30e8:	4b0f      	ldr	r3, [pc, #60]	; (3128 <aes_write_input_data+0x48>)
    30ea:	6842      	ldr	r2, [r0, #4]
    30ec:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    30ee:	4a0f      	ldr	r2, [pc, #60]	; (312c <aes_write_input_data+0x4c>)
    30f0:	4293      	cmp	r3, r2
    30f2:	d00a      	beq.n	310a <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    30f4:	7903      	ldrb	r3, [r0, #4]
    30f6:	2b03      	cmp	r3, #3
    30f8:	d00e      	beq.n	3118 <aes_write_input_data+0x38>
    30fa:	000c      	movs	r4, r1
    30fc:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
    30fe:	6803      	ldr	r3, [r0, #0]
    3100:	c904      	ldmia	r1!, {r2}
    3102:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
    3104:	428c      	cmp	r4, r1
    3106:	d1fa      	bne.n	30fe <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
    3108:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
    310a:	6803      	ldr	r3, [r0, #0]
    310c:	680a      	ldr	r2, [r1, #0]
    310e:	639a      	str	r2, [r3, #56]	; 0x38
    3110:	6803      	ldr	r3, [r0, #0]
    3112:	684a      	ldr	r2, [r1, #4]
    3114:	639a      	str	r2, [r3, #56]	; 0x38
    3116:	e7f7      	b.n	3108 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    3118:	7983      	ldrb	r3, [r0, #6]
    311a:	3b02      	subs	r3, #2
    311c:	2b01      	cmp	r3, #1
    311e:	d8ec      	bhi.n	30fa <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
    3120:	6803      	ldr	r3, [r0, #0]
    3122:	680a      	ldr	r2, [r1, #0]
    3124:	639a      	str	r2, [r3, #56]	; 0x38
    3126:	e7ef      	b.n	3108 <aes_write_input_data+0x28>
    3128:	00ff00ff 	.word	0x00ff00ff
    312c:	00010003 	.word	0x00010003

00003130 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
    3130:	2300      	movs	r3, #0
    3132:	6802      	ldr	r2, [r0, #0]
    3134:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
    3136:	4b10      	ldr	r3, [pc, #64]	; (3178 <aes_read_output_data+0x48>)
    3138:	6842      	ldr	r2, [r0, #4]
    313a:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
    313c:	4a0f      	ldr	r2, [pc, #60]	; (317c <aes_read_output_data+0x4c>)
    313e:	4293      	cmp	r3, r2
    3140:	d00a      	beq.n	3158 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
    3142:	7903      	ldrb	r3, [r0, #4]
    3144:	2b03      	cmp	r3, #3
    3146:	d00e      	beq.n	3166 <aes_read_output_data+0x36>
    3148:	000a      	movs	r2, r1
    314a:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
    314c:	6803      	ldr	r3, [r0, #0]
    314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3150:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
    3152:	428a      	cmp	r2, r1
    3154:	d1fa      	bne.n	314c <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
    3156:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
    3158:	6803      	ldr	r3, [r0, #0]
    315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    315c:	600b      	str	r3, [r1, #0]
    315e:	6803      	ldr	r3, [r0, #0]
    3160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3162:	604b      	str	r3, [r1, #4]
    3164:	e7f7      	b.n	3156 <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
    3166:	7983      	ldrb	r3, [r0, #6]
    3168:	3b02      	subs	r3, #2
    316a:	2b01      	cmp	r3, #1
    316c:	d8ec      	bhi.n	3148 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
    316e:	6803      	ldr	r3, [r0, #0]
    3170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3172:	600b      	str	r3, [r1, #0]
    3174:	e7ef      	b.n	3156 <aes_read_output_data+0x26>
    3176:	46c0      	nop			; (mov r8, r8)
    3178:	00ff00ff 	.word	0x00ff00ff
    317c:	00010003 	.word	0x00010003

00003180 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3180:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    3182:	2a00      	cmp	r2, #0
    3184:	d001      	beq.n	318a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
    3186:	0018      	movs	r0, r3
    3188:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
    318a:	008b      	lsls	r3, r1, #2
    318c:	4a06      	ldr	r2, [pc, #24]	; (31a8 <extint_register_callback+0x28>)
    318e:	589b      	ldr	r3, [r3, r2]
    3190:	2b00      	cmp	r3, #0
    3192:	d003      	beq.n	319c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
    3194:	4283      	cmp	r3, r0
    3196:	d005      	beq.n	31a4 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
    3198:	231d      	movs	r3, #29
    319a:	e7f4      	b.n	3186 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
    319c:	0089      	lsls	r1, r1, #2
    319e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
    31a0:	2300      	movs	r3, #0
    31a2:	e7f0      	b.n	3186 <extint_register_callback+0x6>
		return STATUS_OK;
    31a4:	2300      	movs	r3, #0
    31a6:	e7ee      	b.n	3186 <extint_register_callback+0x6>
    31a8:	20001128 	.word	0x20001128

000031ac <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    31ac:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    31ae:	2900      	cmp	r1, #0
    31b0:	d001      	beq.n	31b6 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
    31b2:	0018      	movs	r0, r3
    31b4:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    31b6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    31b8:	281f      	cmp	r0, #31
    31ba:	d800      	bhi.n	31be <extint_chan_enable_callback+0x12>
		return eics[eic_index];
    31bc:	4a02      	ldr	r2, [pc, #8]	; (31c8 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
    31be:	2301      	movs	r3, #1
    31c0:	4083      	lsls	r3, r0
    31c2:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
    31c4:	2300      	movs	r3, #0
    31c6:	e7f4      	b.n	31b2 <extint_chan_enable_callback+0x6>
    31c8:	40002400 	.word	0x40002400

000031cc <extint_chan_disable_callback>:

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    31cc:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    31ce:	2900      	cmp	r1, #0
    31d0:	d001      	beq.n	31d6 <extint_chan_disable_callback+0xa>
	}

	return STATUS_OK;
}
    31d2:	0018      	movs	r0, r3
    31d4:	4770      	bx	lr
		return NULL;
    31d6:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
    31d8:	281f      	cmp	r0, #31
    31da:	d800      	bhi.n	31de <extint_chan_disable_callback+0x12>
		return eics[eic_index];
    31dc:	4a02      	ldr	r2, [pc, #8]	; (31e8 <extint_chan_disable_callback+0x1c>)
		eic->INTENCLR.reg = (1UL << channel);
    31de:	2301      	movs	r3, #1
    31e0:	4083      	lsls	r3, r0
    31e2:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
    31e4:	2300      	movs	r3, #0
    31e6:	e7f4      	b.n	31d2 <extint_chan_disable_callback+0x6>
    31e8:	40002400 	.word	0x40002400

000031ec <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    31ec:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    31ee:	2200      	movs	r2, #0
    31f0:	4b10      	ldr	r3, [pc, #64]	; (3234 <EIC_Handler+0x48>)
    31f2:	701a      	strb	r2, [r3, #0]
    31f4:	2300      	movs	r3, #0
    31f6:	4910      	ldr	r1, [pc, #64]	; (3238 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    31f8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    31fa:	4e10      	ldr	r6, [pc, #64]	; (323c <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    31fc:	4c0d      	ldr	r4, [pc, #52]	; (3234 <EIC_Handler+0x48>)
    31fe:	e00a      	b.n	3216 <EIC_Handler+0x2a>
		return eics[eic_index];
    3200:	490d      	ldr	r1, [pc, #52]	; (3238 <EIC_Handler+0x4c>)
    3202:	e008      	b.n	3216 <EIC_Handler+0x2a>
    3204:	7823      	ldrb	r3, [r4, #0]
    3206:	3301      	adds	r3, #1
    3208:	b2db      	uxtb	r3, r3
    320a:	7023      	strb	r3, [r4, #0]
    320c:	2b0f      	cmp	r3, #15
    320e:	d810      	bhi.n	3232 <EIC_Handler+0x46>
		return NULL;
    3210:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    3212:	2b1f      	cmp	r3, #31
    3214:	d9f4      	bls.n	3200 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
    3216:	0028      	movs	r0, r5
    3218:	4018      	ands	r0, r3
    321a:	2201      	movs	r2, #1
    321c:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
    321e:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
    3220:	4210      	tst	r0, r2
    3222:	d0ef      	beq.n	3204 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    3224:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3226:	009b      	lsls	r3, r3, #2
    3228:	599b      	ldr	r3, [r3, r6]
    322a:	2b00      	cmp	r3, #0
    322c:	d0ea      	beq.n	3204 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    322e:	4798      	blx	r3
    3230:	e7e8      	b.n	3204 <EIC_Handler+0x18>
			}
		}
	}
}
    3232:	bd70      	pop	{r4, r5, r6, pc}
    3234:	20001124 	.word	0x20001124
    3238:	40002400 	.word	0x40002400
    323c:	20001128 	.word	0x20001128

00003240 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
    3240:	4a06      	ldr	r2, [pc, #24]	; (325c <_extint_enable+0x1c>)
    3242:	7813      	ldrb	r3, [r2, #0]
    3244:	2102      	movs	r1, #2
    3246:	430b      	orrs	r3, r1
    3248:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    324a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    324c:	6853      	ldr	r3, [r2, #4]
    324e:	4219      	tst	r1, r3
    3250:	d1fc      	bne.n	324c <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    3252:	6853      	ldr	r3, [r2, #4]
    3254:	4218      	tst	r0, r3
    3256:	d1f9      	bne.n	324c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3258:	4770      	bx	lr
    325a:	46c0      	nop			; (mov r8, r8)
    325c:	40002400 	.word	0x40002400

00003260 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    3260:	4a06      	ldr	r2, [pc, #24]	; (327c <_extint_disable+0x1c>)
    3262:	7813      	ldrb	r3, [r2, #0]
    3264:	2102      	movs	r1, #2
    3266:	438b      	bics	r3, r1
    3268:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    326a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    326c:	6853      	ldr	r3, [r2, #4]
    326e:	4219      	tst	r1, r3
    3270:	d1fc      	bne.n	326c <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    3272:	6853      	ldr	r3, [r2, #4]
    3274:	4218      	tst	r0, r3
    3276:	d1f9      	bne.n	326c <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3278:	4770      	bx	lr
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	40002400 	.word	0x40002400

00003280 <_system_extint_init>:
{
    3280:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
    3282:	4a12      	ldr	r2, [pc, #72]	; (32cc <_system_extint_init+0x4c>)
    3284:	6951      	ldr	r1, [r2, #20]
    3286:	2380      	movs	r3, #128	; 0x80
    3288:	009b      	lsls	r3, r3, #2
    328a:	430b      	orrs	r3, r1
    328c:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
    328e:	4a10      	ldr	r2, [pc, #64]	; (32d0 <_system_extint_init+0x50>)
    3290:	7813      	ldrb	r3, [r2, #0]
    3292:	2101      	movs	r1, #1
    3294:	430b      	orrs	r3, r1
    3296:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    3298:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    329a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
    329c:	6853      	ldr	r3, [r2, #4]
    329e:	4219      	tst	r1, r3
    32a0:	d1fc      	bne.n	329c <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
    32a2:	6853      	ldr	r3, [r2, #4]
    32a4:	4218      	tst	r0, r3
    32a6:	d1f9      	bne.n	329c <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
    32a8:	4a09      	ldr	r2, [pc, #36]	; (32d0 <_system_extint_init+0x50>)
    32aa:	7813      	ldrb	r3, [r2, #0]
    32ac:	2110      	movs	r1, #16
    32ae:	430b      	orrs	r3, r1
    32b0:	7013      	strb	r3, [r2, #0]
    32b2:	4b08      	ldr	r3, [pc, #32]	; (32d4 <_system_extint_init+0x54>)
    32b4:	0019      	movs	r1, r3
    32b6:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
    32b8:	2200      	movs	r2, #0
    32ba:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    32bc:	428b      	cmp	r3, r1
    32be:	d1fc      	bne.n	32ba <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    32c0:	2208      	movs	r2, #8
    32c2:	4b05      	ldr	r3, [pc, #20]	; (32d8 <_system_extint_init+0x58>)
    32c4:	601a      	str	r2, [r3, #0]
	_extint_enable();
    32c6:	4b05      	ldr	r3, [pc, #20]	; (32dc <_system_extint_init+0x5c>)
    32c8:	4798      	blx	r3
}
    32ca:	bd10      	pop	{r4, pc}
    32cc:	40000400 	.word	0x40000400
    32d0:	40002400 	.word	0x40002400
    32d4:	20001128 	.word	0x20001128
    32d8:	e000e100 	.word	0xe000e100
    32dc:	00003241 	.word	0x00003241

000032e0 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    32e0:	2300      	movs	r3, #0
    32e2:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    32e4:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    32e6:	2201      	movs	r2, #1
    32e8:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
    32ea:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    32ec:	3201      	adds	r2, #1
    32ee:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
    32f0:	7243      	strb	r3, [r0, #9]
}
    32f2:	4770      	bx	lr

000032f4 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    32f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    32f6:	b083      	sub	sp, #12
    32f8:	0005      	movs	r5, r0
    32fa:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
    32fc:	4b1c      	ldr	r3, [pc, #112]	; (3370 <extint_chan_set_config+0x7c>)
    32fe:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3300:	a901      	add	r1, sp, #4
    3302:	2300      	movs	r3, #0
    3304:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
    3306:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    3308:	7923      	ldrb	r3, [r4, #4]
    330a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    330c:	7a23      	ldrb	r3, [r4, #8]
    330e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    3310:	7820      	ldrb	r0, [r4, #0]
    3312:	4b18      	ldr	r3, [pc, #96]	; (3374 <extint_chan_set_config+0x80>)
    3314:	4798      	blx	r3
		return NULL;
    3316:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
    3318:	2d1f      	cmp	r5, #31
    331a:	d800      	bhi.n	331e <extint_chan_set_config+0x2a>
		return eics[eic_index];
    331c:	4916      	ldr	r1, [pc, #88]	; (3378 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    331e:	2207      	movs	r2, #7
    3320:	402a      	ands	r2, r5
    3322:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    3324:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    3326:	7aa3      	ldrb	r3, [r4, #10]
    3328:	2b00      	cmp	r3, #0
    332a:	d001      	beq.n	3330 <extint_chan_set_config+0x3c>
    332c:	2308      	movs	r3, #8
    332e:	431f      	orrs	r7, r3
    3330:	08eb      	lsrs	r3, r5, #3
    3332:	009b      	lsls	r3, r3, #2
    3334:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    3336:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3338:	260f      	movs	r6, #15
    333a:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    333c:	43b0      	bics	r0, r6
			(new_config << config_pos);
    333e:	4097      	lsls	r7, r2
    3340:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    3342:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    3344:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
    3346:	7a63      	ldrb	r3, [r4, #9]
    3348:	2b00      	cmp	r3, #0
    334a:	d10b      	bne.n	3364 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
    334c:	698a      	ldr	r2, [r1, #24]
    334e:	2301      	movs	r3, #1
    3350:	40ab      	lsls	r3, r5
    3352:	43db      	mvns	r3, r3
    3354:	041b      	lsls	r3, r3, #16
    3356:	0c1b      	lsrs	r3, r3, #16
    3358:	4013      	ands	r3, r2
    335a:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
    335c:	4b07      	ldr	r3, [pc, #28]	; (337c <extint_chan_set_config+0x88>)
    335e:	4798      	blx	r3
}
    3360:	b003      	add	sp, #12
    3362:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
    3364:	698a      	ldr	r2, [r1, #24]
    3366:	2301      	movs	r3, #1
    3368:	40ab      	lsls	r3, r5
    336a:	4313      	orrs	r3, r2
    336c:	618b      	str	r3, [r1, #24]
    336e:	e7f5      	b.n	335c <extint_chan_set_config+0x68>
    3370:	00003261 	.word	0x00003261
    3374:	00005a69 	.word	0x00005a69
    3378:	40002400 	.word	0x40002400
    337c:	00003241 	.word	0x00003241

00003380 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    3380:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
    3382:	4a1e      	ldr	r2, [pc, #120]	; (33fc <nvm_set_config+0x7c>)
    3384:	6993      	ldr	r3, [r2, #24]
    3386:	2104      	movs	r1, #4
    3388:	430b      	orrs	r3, r1
    338a:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    338c:	4b1c      	ldr	r3, [pc, #112]	; (3400 <nvm_set_config+0x80>)
    338e:	2220      	movs	r2, #32
    3390:	32ff      	adds	r2, #255	; 0xff
    3392:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    3394:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
    3396:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
    3398:	07d2      	lsls	r2, r2, #31
    339a:	d401      	bmi.n	33a0 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
    339c:	0018      	movs	r0, r3
    339e:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    33a0:	7803      	ldrb	r3, [r0, #0]
    33a2:	021b      	lsls	r3, r3, #8
    33a4:	22c0      	movs	r2, #192	; 0xc0
    33a6:	0092      	lsls	r2, r2, #2
    33a8:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    33aa:	7841      	ldrb	r1, [r0, #1]
    33ac:	01c9      	lsls	r1, r1, #7
    33ae:	22ff      	movs	r2, #255	; 0xff
    33b0:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    33b2:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    33b4:	7881      	ldrb	r1, [r0, #2]
    33b6:	0049      	lsls	r1, r1, #1
    33b8:	221e      	movs	r2, #30
    33ba:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    33bc:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    33be:	78c2      	ldrb	r2, [r0, #3]
    33c0:	0492      	lsls	r2, r2, #18
    33c2:	2180      	movs	r1, #128	; 0x80
    33c4:	02c9      	lsls	r1, r1, #11
    33c6:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    33c8:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    33ca:	7902      	ldrb	r2, [r0, #4]
    33cc:	0412      	lsls	r2, r2, #16
    33ce:	21c0      	movs	r1, #192	; 0xc0
    33d0:	0289      	lsls	r1, r1, #10
    33d2:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    33d4:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    33d6:	4a0a      	ldr	r2, [pc, #40]	; (3400 <nvm_set_config+0x80>)
    33d8:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    33da:	6893      	ldr	r3, [r2, #8]
    33dc:	035b      	lsls	r3, r3, #13
    33de:	0f5b      	lsrs	r3, r3, #29
    33e0:	4908      	ldr	r1, [pc, #32]	; (3404 <nvm_set_config+0x84>)
    33e2:	2408      	movs	r4, #8
    33e4:	409c      	lsls	r4, r3
    33e6:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    33e8:	6893      	ldr	r3, [r2, #8]
    33ea:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    33ec:	7843      	ldrb	r3, [r0, #1]
    33ee:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    33f0:	8b13      	ldrh	r3, [r2, #24]
    33f2:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
    33f4:	0fdb      	lsrs	r3, r3, #31
    33f6:	011b      	lsls	r3, r3, #4
    33f8:	e7d0      	b.n	339c <nvm_set_config+0x1c>
    33fa:	46c0      	nop			; (mov r8, r8)
    33fc:	40000400 	.word	0x40000400
    3400:	41004000 	.word	0x41004000
    3404:	20000ac0 	.word	0x20000ac0

00003408 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    3408:	b530      	push	{r4, r5, lr}
    340a:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    340c:	4a25      	ldr	r2, [pc, #148]	; (34a4 <nvm_execute_command+0x9c>)
    340e:	8810      	ldrh	r0, [r2, #0]
    3410:	8853      	ldrh	r3, [r2, #2]
    3412:	4343      	muls	r3, r0
    3414:	428b      	cmp	r3, r1
    3416:	d20b      	bcs.n	3430 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    3418:	2280      	movs	r2, #128	; 0x80
    341a:	0192      	lsls	r2, r2, #6
    341c:	4b22      	ldr	r3, [pc, #136]	; (34a8 <nvm_execute_command+0xa0>)
    341e:	18cb      	adds	r3, r1, r3
    3420:	4293      	cmp	r3, r2
    3422:	d905      	bls.n	3430 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    3424:	4a21      	ldr	r2, [pc, #132]	; (34ac <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    3426:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    3428:	4b21      	ldr	r3, [pc, #132]	; (34b0 <nvm_execute_command+0xa8>)
    342a:	18cb      	adds	r3, r1, r3
    342c:	4293      	cmp	r3, r2
    342e:	d80e      	bhi.n	344e <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    3430:	4b20      	ldr	r3, [pc, #128]	; (34b4 <nvm_execute_command+0xac>)
    3432:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    3434:	2280      	movs	r2, #128	; 0x80
    3436:	02d2      	lsls	r2, r2, #11
    3438:	432a      	orrs	r2, r5
    343a:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    343c:	2220      	movs	r2, #32
    343e:	32ff      	adds	r2, #255	; 0xff
    3440:	831a      	strh	r2, [r3, #24]
    3442:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    3444:	07db      	lsls	r3, r3, #31
    3446:	d403      	bmi.n	3450 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    3448:	4b1a      	ldr	r3, [pc, #104]	; (34b4 <nvm_execute_command+0xac>)
    344a:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
    344c:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    344e:	bd30      	pop	{r4, r5, pc}
	switch (command) {
    3450:	2c45      	cmp	r4, #69	; 0x45
    3452:	d822      	bhi.n	349a <nvm_execute_command+0x92>
    3454:	00a3      	lsls	r3, r4, #2
    3456:	4a18      	ldr	r2, [pc, #96]	; (34b8 <nvm_execute_command+0xb0>)
    3458:	58d3      	ldr	r3, [r2, r3]
    345a:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    345c:	4b15      	ldr	r3, [pc, #84]	; (34b4 <nvm_execute_command+0xac>)
    345e:	8b1b      	ldrh	r3, [r3, #24]
    3460:	05db      	lsls	r3, r3, #23
    3462:	d503      	bpl.n	346c <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
    3464:	4b13      	ldr	r3, [pc, #76]	; (34b4 <nvm_execute_command+0xac>)
    3466:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
    3468:	2010      	movs	r0, #16
    346a:	e7f0      	b.n	344e <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    346c:	0889      	lsrs	r1, r1, #2
    346e:	0049      	lsls	r1, r1, #1
    3470:	4b10      	ldr	r3, [pc, #64]	; (34b4 <nvm_execute_command+0xac>)
    3472:	61d9      	str	r1, [r3, #28]
			break;
    3474:	e003      	b.n	347e <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    3476:	0889      	lsrs	r1, r1, #2
    3478:	0049      	lsls	r1, r1, #1
    347a:	4b0e      	ldr	r3, [pc, #56]	; (34b4 <nvm_execute_command+0xac>)
    347c:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    347e:	20a5      	movs	r0, #165	; 0xa5
    3480:	0200      	lsls	r0, r0, #8
    3482:	4304      	orrs	r4, r0
    3484:	4b0b      	ldr	r3, [pc, #44]	; (34b4 <nvm_execute_command+0xac>)
    3486:	801c      	strh	r4, [r3, #0]
    3488:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    348a:	2201      	movs	r2, #1
    348c:	7d0b      	ldrb	r3, [r1, #20]
    348e:	4213      	tst	r3, r2
    3490:	d0fc      	beq.n	348c <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
    3492:	4b08      	ldr	r3, [pc, #32]	; (34b4 <nvm_execute_command+0xac>)
    3494:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
    3496:	2000      	movs	r0, #0
    3498:	e7d9      	b.n	344e <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
    349a:	4b06      	ldr	r3, [pc, #24]	; (34b4 <nvm_execute_command+0xac>)
    349c:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    349e:	2017      	movs	r0, #23
    34a0:	e7d5      	b.n	344e <nvm_execute_command+0x46>
    34a2:	46c0      	nop			; (mov r8, r8)
    34a4:	20000ac0 	.word	0x20000ac0
    34a8:	ff7fc000 	.word	0xff7fc000
    34ac:	00001fff 	.word	0x00001fff
    34b0:	ffc00000 	.word	0xffc00000
    34b4:	41004000 	.word	0x41004000
    34b8:	0001dd78 	.word	0x0001dd78

000034bc <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    34bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    34be:	4b2f      	ldr	r3, [pc, #188]	; (357c <nvm_write_buffer+0xc0>)
    34c0:	881c      	ldrh	r4, [r3, #0]
    34c2:	885b      	ldrh	r3, [r3, #2]
    34c4:	4363      	muls	r3, r4
	if (destination_address >
    34c6:	4283      	cmp	r3, r0
    34c8:	d207      	bcs.n	34da <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    34ca:	4e2d      	ldr	r6, [pc, #180]	; (3580 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    34cc:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    34ce:	4b2d      	ldr	r3, [pc, #180]	; (3584 <nvm_write_buffer+0xc8>)
    34d0:	18c3      	adds	r3, r0, r3
    34d2:	42b3      	cmp	r3, r6
    34d4:	d806      	bhi.n	34e4 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
    34d6:	2601      	movs	r6, #1
    34d8:	e000      	b.n	34dc <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
    34da:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    34dc:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    34de:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
    34e0:	4218      	tst	r0, r3
    34e2:	d001      	beq.n	34e8 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
    34e4:	0028      	movs	r0, r5
    34e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    34e8:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    34ea:	4294      	cmp	r4, r2
    34ec:	d3fa      	bcc.n	34e4 <nvm_write_buffer+0x28>
    34ee:	4b26      	ldr	r3, [pc, #152]	; (3588 <nvm_write_buffer+0xcc>)
    34f0:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    34f2:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    34f4:	07db      	lsls	r3, r3, #31
    34f6:	d5f5      	bpl.n	34e4 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    34f8:	4c24      	ldr	r4, [pc, #144]	; (358c <nvm_write_buffer+0xd0>)
    34fa:	4b23      	ldr	r3, [pc, #140]	; (3588 <nvm_write_buffer+0xcc>)
    34fc:	801c      	strh	r4, [r3, #0]
    34fe:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
    3500:	2401      	movs	r4, #1
    3502:	7d2b      	ldrb	r3, [r5, #20]
    3504:	4223      	tst	r3, r4
    3506:	d0fc      	beq.n	3502 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    3508:	2420      	movs	r4, #32
    350a:	34ff      	adds	r4, #255	; 0xff
    350c:	4b1e      	ldr	r3, [pc, #120]	; (3588 <nvm_write_buffer+0xcc>)
    350e:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    3510:	2a00      	cmp	r2, #0
    3512:	d02c      	beq.n	356e <nvm_write_buffer+0xb2>
    3514:	2301      	movs	r3, #1
    3516:	0005      	movs	r5, r0
    3518:	439d      	bics	r5, r3
    351a:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    351c:	1e54      	subs	r4, r2, #1
    351e:	46a4      	mov	ip, r4
    3520:	e009      	b.n	3536 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
    3522:	18cf      	adds	r7, r1, r3
    3524:	787f      	ldrb	r7, [r7, #1]
    3526:	023f      	lsls	r7, r7, #8
    3528:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
    352a:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    352c:	3302      	adds	r3, #2
    352e:	b29b      	uxth	r3, r3
    3530:	3502      	adds	r5, #2
    3532:	429a      	cmp	r2, r3
    3534:	d904      	bls.n	3540 <nvm_write_buffer+0x84>
		data = buffer[i];
    3536:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
    3538:	4563      	cmp	r3, ip
    353a:	dbf2      	blt.n	3522 <nvm_write_buffer+0x66>
		data = buffer[i];
    353c:	b2a4      	uxth	r4, r4
    353e:	e7f4      	b.n	352a <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    3540:	4b0e      	ldr	r3, [pc, #56]	; (357c <nvm_write_buffer+0xc0>)
    3542:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    3544:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    3546:	2b00      	cmp	r3, #0
    3548:	d1cc      	bne.n	34e4 <nvm_write_buffer+0x28>
    354a:	2a3f      	cmp	r2, #63	; 0x3f
    354c:	d8ca      	bhi.n	34e4 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
    354e:	2e00      	cmp	r6, #0
    3550:	d106      	bne.n	3560 <nvm_write_buffer+0xa4>
    3552:	2200      	movs	r2, #0
    3554:	0001      	movs	r1, r0
    3556:	2004      	movs	r0, #4
    3558:	4b0d      	ldr	r3, [pc, #52]	; (3590 <nvm_write_buffer+0xd4>)
    355a:	4798      	blx	r3
    355c:	0005      	movs	r5, r0
    355e:	e7c1      	b.n	34e4 <nvm_write_buffer+0x28>
    3560:	2200      	movs	r2, #0
    3562:	0001      	movs	r1, r0
    3564:	201c      	movs	r0, #28
    3566:	4b0a      	ldr	r3, [pc, #40]	; (3590 <nvm_write_buffer+0xd4>)
    3568:	4798      	blx	r3
    356a:	0005      	movs	r5, r0
    356c:	e7ba      	b.n	34e4 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    356e:	4b03      	ldr	r3, [pc, #12]	; (357c <nvm_write_buffer+0xc0>)
    3570:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
    3572:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    3574:	2b00      	cmp	r3, #0
    3576:	d0ea      	beq.n	354e <nvm_write_buffer+0x92>
    3578:	e7b4      	b.n	34e4 <nvm_write_buffer+0x28>
    357a:	46c0      	nop			; (mov r8, r8)
    357c:	20000ac0 	.word	0x20000ac0
    3580:	00001fff 	.word	0x00001fff
    3584:	ffc00000 	.word	0xffc00000
    3588:	41004000 	.word	0x41004000
    358c:	ffffa544 	.word	0xffffa544
    3590:	00003409 	.word	0x00003409

00003594 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
    3594:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    3596:	4b1b      	ldr	r3, [pc, #108]	; (3604 <nvm_read_buffer+0x70>)
    3598:	881c      	ldrh	r4, [r3, #0]
    359a:	885b      	ldrh	r3, [r3, #2]
    359c:	4363      	muls	r3, r4
	if (source_address >
    359e:	4283      	cmp	r3, r0
    35a0:	d205      	bcs.n	35ae <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    35a2:	4e19      	ldr	r6, [pc, #100]	; (3608 <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    35a4:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    35a6:	4b19      	ldr	r3, [pc, #100]	; (360c <nvm_read_buffer+0x78>)
    35a8:	18c3      	adds	r3, r0, r3
    35aa:	42b3      	cmp	r3, r6
    35ac:	d803      	bhi.n	35b6 <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
    35ae:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
    35b0:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
    35b2:	4218      	tst	r0, r3
    35b4:	d001      	beq.n	35ba <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
    35b6:	0028      	movs	r0, r5
    35b8:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
    35ba:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
    35bc:	4294      	cmp	r4, r2
    35be:	d3fa      	bcc.n	35b6 <nvm_read_buffer+0x22>
    35c0:	4b13      	ldr	r3, [pc, #76]	; (3610 <nvm_read_buffer+0x7c>)
    35c2:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    35c4:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
    35c6:	07db      	lsls	r3, r3, #31
    35c8:	d5f5      	bpl.n	35b6 <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    35ca:	2420      	movs	r4, #32
    35cc:	34ff      	adds	r4, #255	; 0xff
    35ce:	4b10      	ldr	r3, [pc, #64]	; (3610 <nvm_read_buffer+0x7c>)
    35d0:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
    35d2:	2a00      	cmp	r2, #0
    35d4:	d014      	beq.n	3600 <nvm_read_buffer+0x6c>
    35d6:	2301      	movs	r3, #1
    35d8:	4398      	bics	r0, r3
    35da:	2300      	movs	r3, #0
		if (i < (length - 1)) {
    35dc:	1e56      	subs	r6, r2, #1
    35de:	e004      	b.n	35ea <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
    35e0:	3302      	adds	r3, #2
    35e2:	b29b      	uxth	r3, r3
    35e4:	3002      	adds	r0, #2
    35e6:	429a      	cmp	r2, r3
    35e8:	d908      	bls.n	35fc <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
    35ea:	8804      	ldrh	r4, [r0, #0]
    35ec:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
    35ee:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
    35f0:	42b3      	cmp	r3, r6
    35f2:	daf5      	bge.n	35e0 <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
    35f4:	18cd      	adds	r5, r1, r3
    35f6:	0a24      	lsrs	r4, r4, #8
    35f8:	706c      	strb	r4, [r5, #1]
    35fa:	e7f1      	b.n	35e0 <nvm_read_buffer+0x4c>
	return STATUS_OK;
    35fc:	2500      	movs	r5, #0
    35fe:	e7da      	b.n	35b6 <nvm_read_buffer+0x22>
    3600:	2500      	movs	r5, #0
    3602:	e7d8      	b.n	35b6 <nvm_read_buffer+0x22>
    3604:	20000ac0 	.word	0x20000ac0
    3608:	00001fff 	.word	0x00001fff
    360c:	ffc00000 	.word	0xffc00000
    3610:	41004000 	.word	0x41004000

00003614 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    3614:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    3616:	4a1b      	ldr	r2, [pc, #108]	; (3684 <nvm_erase_row+0x70>)
    3618:	8813      	ldrh	r3, [r2, #0]
    361a:	8852      	ldrh	r2, [r2, #2]
    361c:	435a      	muls	r2, r3
	if (row_address >
    361e:	4282      	cmp	r2, r0
    3620:	d207      	bcs.n	3632 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    3622:	4c19      	ldr	r4, [pc, #100]	; (3688 <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
    3624:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
    3626:	4919      	ldr	r1, [pc, #100]	; (368c <nvm_erase_row+0x78>)
    3628:	1841      	adds	r1, r0, r1
    362a:	42a1      	cmp	r1, r4
    362c:	d807      	bhi.n	363e <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
    362e:	2101      	movs	r1, #1
    3630:	e000      	b.n	3634 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
    3632:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    3634:	009b      	lsls	r3, r3, #2
    3636:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
    3638:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    363a:	4218      	tst	r0, r3
    363c:	d001      	beq.n	3642 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
    363e:	0010      	movs	r0, r2
    3640:	bd10      	pop	{r4, pc}
    3642:	4b13      	ldr	r3, [pc, #76]	; (3690 <nvm_erase_row+0x7c>)
    3644:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
    3646:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
    3648:	07db      	lsls	r3, r3, #31
    364a:	d5f8      	bpl.n	363e <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    364c:	4b10      	ldr	r3, [pc, #64]	; (3690 <nvm_erase_row+0x7c>)
    364e:	2220      	movs	r2, #32
    3650:	32ff      	adds	r2, #255	; 0xff
    3652:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    3654:	0880      	lsrs	r0, r0, #2
    3656:	0040      	lsls	r0, r0, #1
    3658:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    365a:	2900      	cmp	r1, #0
    365c:	d10f      	bne.n	367e <nvm_erase_row+0x6a>
    365e:	4a0d      	ldr	r2, [pc, #52]	; (3694 <nvm_erase_row+0x80>)
    3660:	4b0b      	ldr	r3, [pc, #44]	; (3690 <nvm_erase_row+0x7c>)
    3662:	801a      	strh	r2, [r3, #0]
    3664:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
    3666:	2201      	movs	r2, #1
    3668:	7d0b      	ldrb	r3, [r1, #20]
    366a:	4213      	tst	r3, r2
    366c:	d0fc      	beq.n	3668 <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    366e:	4b08      	ldr	r3, [pc, #32]	; (3690 <nvm_erase_row+0x7c>)
    3670:	8b1a      	ldrh	r2, [r3, #24]
    3672:	201c      	movs	r0, #28
    3674:	4002      	ands	r2, r0
	return STATUS_OK;
    3676:	1e50      	subs	r0, r2, #1
    3678:	4182      	sbcs	r2, r0
    367a:	0092      	lsls	r2, r2, #2
    367c:	e7df      	b.n	363e <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    367e:	4a06      	ldr	r2, [pc, #24]	; (3698 <nvm_erase_row+0x84>)
    3680:	e7ee      	b.n	3660 <nvm_erase_row+0x4c>
    3682:	46c0      	nop			; (mov r8, r8)
    3684:	20000ac0 	.word	0x20000ac0
    3688:	00001fff 	.word	0x00001fff
    368c:	ffc00000 	.word	0xffc00000
    3690:	41004000 	.word	0x41004000
    3694:	0000a502 	.word	0x0000a502
    3698:	0000a51a 	.word	0x0000a51a

0000369c <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    369c:	4b15      	ldr	r3, [pc, #84]	; (36f4 <nvm_get_parameters+0x58>)
    369e:	2220      	movs	r2, #32
    36a0:	32ff      	adds	r2, #255	; 0xff
    36a2:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    36a4:	689b      	ldr	r3, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    36a6:	0359      	lsls	r1, r3, #13
    36a8:	0f49      	lsrs	r1, r1, #29
    36aa:	3a18      	subs	r2, #24
    36ac:	3aff      	subs	r2, #255	; 0xff
    36ae:	408a      	lsls	r2, r1
	parameters->page_size =
    36b0:	7002      	strb	r2, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    36b2:	8043      	strh	r3, [r0, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
    36b4:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
    36b6:	8183      	strh	r3, [r0, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    36b8:	4b0f      	ldr	r3, [pc, #60]	; (36f8 <nvm_get_parameters+0x5c>)
    36ba:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
    36bc:	065b      	lsls	r3, r3, #25
    36be:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    36c0:	2b07      	cmp	r3, #7
    36c2:	d010      	beq.n	36e6 <nvm_get_parameters+0x4a>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    36c4:	2206      	movs	r2, #6
    36c6:	1ad2      	subs	r2, r2, r3
    36c8:	2304      	movs	r3, #4
    36ca:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
    36cc:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    36ce:	4b0a      	ldr	r3, [pc, #40]	; (36f8 <nvm_get_parameters+0x5c>)
    36d0:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    36d2:	2207      	movs	r2, #7
    36d4:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    36d6:	2b07      	cmp	r3, #7
    36d8:	d008      	beq.n	36ec <nvm_get_parameters+0x50>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    36da:	2207      	movs	r2, #7
    36dc:	1ad2      	subs	r2, r2, r3
    36de:	2304      	movs	r3, #4
    36e0:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    36e2:	6083      	str	r3, [r0, #8]
	}
}
    36e4:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    36e6:	2300      	movs	r3, #0
    36e8:	6043      	str	r3, [r0, #4]
    36ea:	e7f0      	b.n	36ce <nvm_get_parameters+0x32>
		parameters->bootloader_number_of_pages = 0;
    36ec:	2300      	movs	r3, #0
    36ee:	6083      	str	r3, [r0, #8]
    36f0:	e7f8      	b.n	36e4 <nvm_get_parameters+0x48>
    36f2:	46c0      	nop			; (mov r8, r8)
    36f4:	41004000 	.word	0x41004000
    36f8:	00804000 	.word	0x00804000

000036fc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    36fc:	b500      	push	{lr}
    36fe:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3700:	ab01      	add	r3, sp, #4
    3702:	2280      	movs	r2, #128	; 0x80
    3704:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3706:	780a      	ldrb	r2, [r1, #0]
    3708:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    370a:	784a      	ldrb	r2, [r1, #1]
    370c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    370e:	788a      	ldrb	r2, [r1, #2]
    3710:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3712:	0019      	movs	r1, r3
    3714:	4b01      	ldr	r3, [pc, #4]	; (371c <port_pin_set_config+0x20>)
    3716:	4798      	blx	r3
}
    3718:	b003      	add	sp, #12
    371a:	bd00      	pop	{pc}
    371c:	00005a69 	.word	0x00005a69

00003720 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3720:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    3722:	6918      	ldr	r0, [r3, #16]
    3724:	1e43      	subs	r3, r0, #1
    3726:	4198      	sbcs	r0, r3
    3728:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    372a:	4770      	bx	lr

0000372c <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    372c:	b570      	push	{r4, r5, r6, lr}
    372e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3730:	6806      	ldr	r6, [r0, #0]
    3732:	2204      	movs	r2, #4
    3734:	4b08      	ldr	r3, [pc, #32]	; (3758 <rtc_count_enable+0x2c>)
    3736:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    3738:	4d08      	ldr	r5, [pc, #32]	; (375c <rtc_count_enable+0x30>)
    373a:	0020      	movs	r0, r4
    373c:	47a8      	blx	r5
    373e:	2800      	cmp	r0, #0
    3740:	d1fb      	bne.n	373a <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    3742:	8833      	ldrh	r3, [r6, #0]
    3744:	2202      	movs	r2, #2
    3746:	4313      	orrs	r3, r2
    3748:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    374a:	4d04      	ldr	r5, [pc, #16]	; (375c <rtc_count_enable+0x30>)
    374c:	0020      	movs	r0, r4
    374e:	47a8      	blx	r5
    3750:	2800      	cmp	r0, #0
    3752:	d1fb      	bne.n	374c <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
    3754:	bd70      	pop	{r4, r5, r6, pc}
    3756:	46c0      	nop			; (mov r8, r8)
    3758:	e000e100 	.word	0xe000e100
    375c:	00003721 	.word	0x00003721

00003760 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    3760:	b570      	push	{r4, r5, r6, lr}
    3762:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3764:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3766:	2104      	movs	r1, #4
    3768:	2380      	movs	r3, #128	; 0x80
    376a:	4a0a      	ldr	r2, [pc, #40]	; (3794 <rtc_count_disable+0x34>)
    376c:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    376e:	4d0a      	ldr	r5, [pc, #40]	; (3798 <rtc_count_disable+0x38>)
    3770:	0020      	movs	r0, r4
    3772:	47a8      	blx	r5
    3774:	2800      	cmp	r0, #0
    3776:	d1fb      	bne.n	3770 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    3778:	4b08      	ldr	r3, [pc, #32]	; (379c <rtc_count_disable+0x3c>)
    377a:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    377c:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    377e:	8833      	ldrh	r3, [r6, #0]
    3780:	2202      	movs	r2, #2
    3782:	4393      	bics	r3, r2
    3784:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    3786:	4d04      	ldr	r5, [pc, #16]	; (3798 <rtc_count_disable+0x38>)
    3788:	0020      	movs	r0, r4
    378a:	47a8      	blx	r5
    378c:	2800      	cmp	r0, #0
    378e:	d1fb      	bne.n	3788 <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
    3790:	bd70      	pop	{r4, r5, r6, pc}
    3792:	46c0      	nop			; (mov r8, r8)
    3794:	e000e100 	.word	0xe000e100
    3798:	00003721 	.word	0x00003721
    379c:	ffff81ff 	.word	0xffff81ff

000037a0 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    37a0:	b570      	push	{r4, r5, r6, lr}
    37a2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    37a4:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
    37a6:	4b0a      	ldr	r3, [pc, #40]	; (37d0 <rtc_count_reset+0x30>)
    37a8:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    37aa:	2300      	movs	r3, #0
    37ac:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
    37ae:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    37b0:	4d08      	ldr	r5, [pc, #32]	; (37d4 <rtc_count_reset+0x34>)
    37b2:	0020      	movs	r0, r4
    37b4:	47a8      	blx	r5
    37b6:	2800      	cmp	r0, #0
    37b8:	d1fb      	bne.n	37b2 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    37ba:	8833      	ldrh	r3, [r6, #0]
    37bc:	2201      	movs	r2, #1
    37be:	4313      	orrs	r3, r2
    37c0:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    37c2:	4d04      	ldr	r5, [pc, #16]	; (37d4 <rtc_count_reset+0x34>)
    37c4:	0020      	movs	r0, r4
    37c6:	47a8      	blx	r5
    37c8:	2800      	cmp	r0, #0
    37ca:	d1fb      	bne.n	37c4 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
    37cc:	bd70      	pop	{r4, r5, r6, pc}
    37ce:	46c0      	nop			; (mov r8, r8)
    37d0:	00003761 	.word	0x00003761
    37d4:	00003721 	.word	0x00003721

000037d8 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
    37d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37da:	0004      	movs	r4, r0
    37dc:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    37de:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    37e0:	4d0c      	ldr	r5, [pc, #48]	; (3814 <rtc_count_set_count+0x3c>)
    37e2:	0020      	movs	r0, r4
    37e4:	47a8      	blx	r5
    37e6:	2800      	cmp	r0, #0
    37e8:	d1fb      	bne.n	37e2 <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
    37ea:	7923      	ldrb	r3, [r4, #4]
    37ec:	2b00      	cmp	r3, #0
    37ee:	d009      	beq.n	3804 <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    37f0:	2017      	movs	r0, #23
	switch(module->mode){
    37f2:	2b01      	cmp	r3, #1
    37f4:	d105      	bne.n	3802 <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
    37f6:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
    37f8:	4d06      	ldr	r5, [pc, #24]	; (3814 <rtc_count_set_count+0x3c>)
    37fa:	0020      	movs	r0, r4
    37fc:	47a8      	blx	r5
    37fe:	2800      	cmp	r0, #0
    3800:	d1fb      	bne.n	37fa <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
    3802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
    3804:	4b04      	ldr	r3, [pc, #16]	; (3818 <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
    3806:	2017      	movs	r0, #23
			if(count_value > 0xffff){
    3808:	429e      	cmp	r6, r3
    380a:	d8fa      	bhi.n	3802 <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
    380c:	b2b6      	uxth	r6, r6
    380e:	833e      	strh	r6, [r7, #24]
			break;
    3810:	e7f2      	b.n	37f8 <rtc_count_set_count+0x20>
    3812:	46c0      	nop			; (mov r8, r8)
    3814:	00003721 	.word	0x00003721
    3818:	0000ffff 	.word	0x0000ffff

0000381c <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    381c:	b570      	push	{r4, r5, r6, lr}
    381e:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3820:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    3822:	4d08      	ldr	r5, [pc, #32]	; (3844 <rtc_count_get_count+0x28>)
    3824:	0020      	movs	r0, r4
    3826:	47a8      	blx	r5
    3828:	2800      	cmp	r0, #0
    382a:	d1fb      	bne.n	3824 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    382c:	7923      	ldrb	r3, [r4, #4]
    382e:	2b00      	cmp	r3, #0
    3830:	d004      	beq.n	383c <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    3832:	2000      	movs	r0, #0
	switch (module->mode) {
    3834:	2b01      	cmp	r3, #1
    3836:	d100      	bne.n	383a <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    3838:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    383a:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    383c:	8b30      	ldrh	r0, [r6, #24]
    383e:	b280      	uxth	r0, r0
			break;
    3840:	e7fb      	b.n	383a <rtc_count_get_count+0x1e>
    3842:	46c0      	nop			; (mov r8, r8)
    3844:	00003721 	.word	0x00003721

00003848 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    3848:	b5f0      	push	{r4, r5, r6, r7, lr}
    384a:	b083      	sub	sp, #12
    384c:	0004      	movs	r4, r0
    384e:	9101      	str	r1, [sp, #4]
    3850:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3852:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    3854:	4f13      	ldr	r7, [pc, #76]	; (38a4 <rtc_count_set_compare+0x5c>)
    3856:	0020      	movs	r0, r4
    3858:	47b8      	blx	r7
    385a:	2800      	cmp	r0, #0
    385c:	d1fb      	bne.n	3856 <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    385e:	7923      	ldrb	r3, [r4, #4]
    3860:	2b00      	cmp	r3, #0
    3862:	d00e      	beq.n	3882 <rtc_count_set_compare+0x3a>
    3864:	2b01      	cmp	r3, #1
    3866:	d119      	bne.n	389c <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
    3868:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    386a:	2d01      	cmp	r5, #1
    386c:	d817      	bhi.n	389e <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    386e:	3508      	adds	r5, #8
    3870:	00ad      	lsls	r5, r5, #2
    3872:	9b01      	ldr	r3, [sp, #4]
    3874:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
    3876:	4d0b      	ldr	r5, [pc, #44]	; (38a4 <rtc_count_set_compare+0x5c>)
    3878:	0020      	movs	r0, r4
    387a:	47a8      	blx	r5
    387c:	2800      	cmp	r0, #0
    387e:	d1fb      	bne.n	3878 <rtc_count_set_compare+0x30>
    3880:	e00d      	b.n	389e <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    3882:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    3884:	2d02      	cmp	r5, #2
    3886:	d80a      	bhi.n	389e <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
    3888:	4b07      	ldr	r3, [pc, #28]	; (38a8 <rtc_count_set_compare+0x60>)
    388a:	9a01      	ldr	r2, [sp, #4]
    388c:	429a      	cmp	r2, r3
    388e:	d806      	bhi.n	389e <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    3890:	466b      	mov	r3, sp
    3892:	889b      	ldrh	r3, [r3, #4]
    3894:	3510      	adds	r5, #16
    3896:	006d      	lsls	r5, r5, #1
    3898:	53ab      	strh	r3, [r5, r6]
			break;
    389a:	e7ec      	b.n	3876 <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
    389c:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
    389e:	b003      	add	sp, #12
    38a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38a2:	46c0      	nop			; (mov r8, r8)
    38a4:	00003721 	.word	0x00003721
    38a8:	0000ffff 	.word	0x0000ffff

000038ac <rtc_count_init>:
{
    38ac:	b570      	push	{r4, r5, r6, lr}
    38ae:	0004      	movs	r4, r0
    38b0:	0015      	movs	r5, r2
	module->hw = hw;
    38b2:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
    38b4:	4a1f      	ldr	r2, [pc, #124]	; (3934 <rtc_count_init+0x88>)
    38b6:	6951      	ldr	r1, [r2, #20]
    38b8:	2380      	movs	r3, #128	; 0x80
    38ba:	005b      	lsls	r3, r3, #1
    38bc:	430b      	orrs	r3, r1
    38be:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    38c0:	2205      	movs	r2, #5
    38c2:	4b1d      	ldr	r3, [pc, #116]	; (3938 <rtc_count_init+0x8c>)
    38c4:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
    38c6:	4b1d      	ldr	r3, [pc, #116]	; (393c <rtc_count_init+0x90>)
    38c8:	4798      	blx	r3
	module->mode                = config->mode;
    38ca:	78ab      	ldrb	r3, [r5, #2]
    38cc:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
    38ce:	4b1c      	ldr	r3, [pc, #112]	; (3940 <rtc_count_init+0x94>)
    38d0:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
    38d2:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    38d4:	792b      	ldrb	r3, [r5, #4]
    38d6:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
    38d8:	8829      	ldrh	r1, [r5, #0]
    38da:	430b      	orrs	r3, r1
    38dc:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    38de:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
    38e0:	78ab      	ldrb	r3, [r5, #2]
    38e2:	2b00      	cmp	r3, #0
    38e4:	d013      	beq.n	390e <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
    38e6:	2017      	movs	r0, #23
	switch (config->mode) {
    38e8:	2b01      	cmp	r3, #1
    38ea:	d10f      	bne.n	390c <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    38ec:	8813      	ldrh	r3, [r2, #0]
    38ee:	b29b      	uxth	r3, r3
    38f0:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    38f2:	78eb      	ldrb	r3, [r5, #3]
    38f4:	2b00      	cmp	r3, #0
    38f6:	d003      	beq.n	3900 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    38f8:	8813      	ldrh	r3, [r2, #0]
    38fa:	2180      	movs	r1, #128	; 0x80
    38fc:	430b      	orrs	r3, r1
    38fe:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
    3900:	68a9      	ldr	r1, [r5, #8]
    3902:	2200      	movs	r2, #0
    3904:	0020      	movs	r0, r4
    3906:	4b0f      	ldr	r3, [pc, #60]	; (3944 <rtc_count_init+0x98>)
    3908:	4798      	blx	r3
	return STATUS_OK;
    390a:	2000      	movs	r0, #0
}
    390c:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    390e:	8813      	ldrh	r3, [r2, #0]
    3910:	2104      	movs	r1, #4
    3912:	430b      	orrs	r3, r1
    3914:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    3916:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
    3918:	2017      	movs	r0, #23
			if (config->clear_on_match) {
    391a:	2b00      	cmp	r3, #0
    391c:	d1f6      	bne.n	390c <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
    391e:	2200      	movs	r2, #0
    3920:	68a9      	ldr	r1, [r5, #8]
    3922:	0020      	movs	r0, r4
    3924:	4e07      	ldr	r6, [pc, #28]	; (3944 <rtc_count_init+0x98>)
    3926:	47b0      	blx	r6
    3928:	68e9      	ldr	r1, [r5, #12]
    392a:	2201      	movs	r2, #1
    392c:	0020      	movs	r0, r4
    392e:	47b0      	blx	r6
	return STATUS_OK;
    3930:	2000      	movs	r0, #0
    3932:	e7eb      	b.n	390c <rtc_count_init+0x60>
    3934:	40000400 	.word	0x40000400
    3938:	40001000 	.word	0x40001000
    393c:	000037a1 	.word	0x000037a1
    3940:	20001168 	.word	0x20001168
    3944:	00003849 	.word	0x00003849

00003948 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    3948:	2a0a      	cmp	r2, #10
    394a:	d009      	beq.n	3960 <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    394c:	2a07      	cmp	r2, #7
    394e:	d907      	bls.n	3960 <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    3950:	7903      	ldrb	r3, [r0, #4]
    3952:	2b00      	cmp	r3, #0
    3954:	d010      	beq.n	3978 <rtc_count_register_callback+0x30>
    3956:	2b01      	cmp	r3, #1
    3958:	d112      	bne.n	3980 <rtc_count_register_callback+0x38>
    395a:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    395c:	2a09      	cmp	r2, #9
    395e:	d809      	bhi.n	3974 <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    3960:	1c93      	adds	r3, r2, #2
    3962:	009b      	lsls	r3, r3, #2
    3964:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    3966:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    3968:	2101      	movs	r1, #1
    396a:	4091      	lsls	r1, r2
    396c:	430b      	orrs	r3, r1
    396e:	b29b      	uxth	r3, r3
    3970:	8683      	strh	r3, [r0, #52]	; 0x34
    3972:	2300      	movs	r3, #0
	}

	return status;
}
    3974:	0018      	movs	r0, r3
    3976:	4770      	bx	lr
    3978:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    397a:	2a0a      	cmp	r2, #10
    397c:	d8fa      	bhi.n	3974 <rtc_count_register_callback+0x2c>
    397e:	e7ef      	b.n	3960 <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
    3980:	2317      	movs	r3, #23
    3982:	e7f7      	b.n	3974 <rtc_count_register_callback+0x2c>

00003984 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    3984:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3986:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    3988:	290a      	cmp	r1, #10
    398a:	d011      	beq.n	39b0 <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    398c:	2907      	cmp	r1, #7
    398e:	d912      	bls.n	39b6 <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    3990:	2380      	movs	r3, #128	; 0x80
    3992:	005b      	lsls	r3, r3, #1
    3994:	000c      	movs	r4, r1
    3996:	3c08      	subs	r4, #8
    3998:	40a3      	lsls	r3, r4
    399a:	24c0      	movs	r4, #192	; 0xc0
    399c:	00a4      	lsls	r4, r4, #2
    399e:	4023      	ands	r3, r4
    39a0:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    39a2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    39a4:	2201      	movs	r2, #1
    39a6:	408a      	lsls	r2, r1
    39a8:	4313      	orrs	r3, r2
    39aa:	b29b      	uxth	r3, r3
    39ac:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    39ae:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    39b0:	4b04      	ldr	r3, [pc, #16]	; (39c4 <rtc_count_enable_callback+0x40>)
    39b2:	8153      	strh	r3, [r2, #10]
    39b4:	e7f5      	b.n	39a2 <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    39b6:	2401      	movs	r4, #1
    39b8:	408c      	lsls	r4, r1
    39ba:	23ff      	movs	r3, #255	; 0xff
    39bc:	4023      	ands	r3, r4
    39be:	8153      	strh	r3, [r2, #10]
    39c0:	e7ef      	b.n	39a2 <rtc_count_enable_callback+0x1e>
    39c2:	46c0      	nop			; (mov r8, r8)
    39c4:	ffff8000 	.word	0xffff8000

000039c8 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    39c8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    39ca:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    39cc:	290a      	cmp	r1, #10
    39ce:	d010      	beq.n	39f2 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    39d0:	2907      	cmp	r1, #7
    39d2:	d911      	bls.n	39f8 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    39d4:	2380      	movs	r3, #128	; 0x80
    39d6:	005b      	lsls	r3, r3, #1
    39d8:	000c      	movs	r4, r1
    39da:	3c08      	subs	r4, #8
    39dc:	40a3      	lsls	r3, r4
    39de:	24c0      	movs	r4, #192	; 0xc0
    39e0:	00a4      	lsls	r4, r4, #2
    39e2:	4023      	ands	r3, r4
    39e4:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    39e6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    39e8:	2201      	movs	r2, #1
    39ea:	408a      	lsls	r2, r1
    39ec:	4393      	bics	r3, r2
    39ee:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    39f0:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    39f2:	4b04      	ldr	r3, [pc, #16]	; (3a04 <rtc_count_disable_callback+0x3c>)
    39f4:	8113      	strh	r3, [r2, #8]
    39f6:	e7f6      	b.n	39e6 <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    39f8:	2401      	movs	r4, #1
    39fa:	408c      	lsls	r4, r1
    39fc:	23ff      	movs	r3, #255	; 0xff
    39fe:	4023      	ands	r3, r4
    3a00:	8113      	strh	r3, [r2, #8]
    3a02:	e7f0      	b.n	39e6 <rtc_count_disable_callback+0x1e>
    3a04:	ffff8000 	.word	0xffff8000

00003a08 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    3a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a0a:	46de      	mov	lr, fp
    3a0c:	4657      	mov	r7, sl
    3a0e:	464e      	mov	r6, r9
    3a10:	4645      	mov	r5, r8
    3a12:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    3a14:	4b2b      	ldr	r3, [pc, #172]	; (3ac4 <RTC_Handler+0xbc>)
    3a16:	681b      	ldr	r3, [r3, #0]
    3a18:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    3a1a:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    3a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    3a1e:	4652      	mov	r2, sl
    3a20:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    3a22:	401a      	ands	r2, r3
    3a24:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    3a26:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    3a28:	8973      	ldrh	r3, [r6, #10]
    3a2a:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    3a2c:	b21a      	sxth	r2, r3
    3a2e:	2a00      	cmp	r2, #0
    3a30:	db08      	blt.n	3a44 <RTC_Handler+0x3c>
    3a32:	27ff      	movs	r7, #255	; 0xff
    3a34:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    3a36:	d02a      	beq.n	3a8e <RTC_Handler+0x86>
    3a38:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    3a3a:	2301      	movs	r3, #1
    3a3c:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    3a3e:	33fe      	adds	r3, #254	; 0xfe
    3a40:	469b      	mov	fp, r3
    3a42:	e014      	b.n	3a6e <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    3a44:	4643      	mov	r3, r8
    3a46:	055b      	lsls	r3, r3, #21
    3a48:	d407      	bmi.n	3a5a <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    3a4a:	4b1f      	ldr	r3, [pc, #124]	; (3ac8 <RTC_Handler+0xc0>)
    3a4c:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    3a4e:	bc3c      	pop	{r2, r3, r4, r5}
    3a50:	4690      	mov	r8, r2
    3a52:	4699      	mov	r9, r3
    3a54:	46a2      	mov	sl, r4
    3a56:	46ab      	mov	fp, r5
    3a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    3a5a:	4653      	mov	r3, sl
    3a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3a5e:	4798      	blx	r3
    3a60:	e7f3      	b.n	3a4a <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    3a62:	465b      	mov	r3, fp
    3a64:	401d      	ands	r5, r3
    3a66:	81b5      	strh	r5, [r6, #12]
    3a68:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    3a6a:	2c08      	cmp	r4, #8
    3a6c:	d0ef      	beq.n	3a4e <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    3a6e:	0023      	movs	r3, r4
    3a70:	464d      	mov	r5, r9
    3a72:	40a5      	lsls	r5, r4
    3a74:	422f      	tst	r7, r5
    3a76:	d0f4      	beq.n	3a62 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    3a78:	4642      	mov	r2, r8
    3a7a:	4122      	asrs	r2, r4
    3a7c:	4649      	mov	r1, r9
    3a7e:	4211      	tst	r1, r2
    3a80:	d0ef      	beq.n	3a62 <RTC_Handler+0x5a>
				module->callbacks[i]();
    3a82:	3302      	adds	r3, #2
    3a84:	009b      	lsls	r3, r3, #2
    3a86:	4652      	mov	r2, sl
    3a88:	589b      	ldr	r3, [r3, r2]
    3a8a:	4798      	blx	r3
    3a8c:	e7e9      	b.n	3a62 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    3a8e:	05da      	lsls	r2, r3, #23
    3a90:	d50a      	bpl.n	3aa8 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    3a92:	4643      	mov	r3, r8
    3a94:	05db      	lsls	r3, r3, #23
    3a96:	d403      	bmi.n	3aa0 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    3a98:	2380      	movs	r3, #128	; 0x80
    3a9a:	005b      	lsls	r3, r3, #1
    3a9c:	81b3      	strh	r3, [r6, #12]
    3a9e:	e7d6      	b.n	3a4e <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    3aa0:	4653      	mov	r3, sl
    3aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3aa4:	4798      	blx	r3
    3aa6:	e7f7      	b.n	3a98 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    3aa8:	059b      	lsls	r3, r3, #22
    3aaa:	d5d0      	bpl.n	3a4e <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    3aac:	4643      	mov	r3, r8
    3aae:	059b      	lsls	r3, r3, #22
    3ab0:	d403      	bmi.n	3aba <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    3ab2:	2380      	movs	r3, #128	; 0x80
    3ab4:	009b      	lsls	r3, r3, #2
    3ab6:	81b3      	strh	r3, [r6, #12]
}
    3ab8:	e7c9      	b.n	3a4e <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    3aba:	4653      	mov	r3, sl
    3abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3abe:	4798      	blx	r3
    3ac0:	e7f7      	b.n	3ab2 <RTC_Handler+0xaa>
    3ac2:	46c0      	nop			; (mov r8, r8)
    3ac4:	20001168 	.word	0x20001168
    3ac8:	ffff8000 	.word	0xffff8000

00003acc <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3acc:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3ace:	2207      	movs	r2, #7
    3ad0:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    3ad2:	421a      	tst	r2, r3
    3ad4:	d1fc      	bne.n	3ad0 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    3ad6:	4770      	bx	lr

00003ad8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    3ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ada:	46d6      	mov	lr, sl
    3adc:	464f      	mov	r7, r9
    3ade:	4646      	mov	r6, r8
    3ae0:	b5c0      	push	{r6, r7, lr}
    3ae2:	b08a      	sub	sp, #40	; 0x28
    3ae4:	0007      	movs	r7, r0
    3ae6:	000e      	movs	r6, r1
    3ae8:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    3aea:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    3aec:	0008      	movs	r0, r1
    3aee:	4ba5      	ldr	r3, [pc, #660]	; (3d84 <i2c_master_init+0x2ac>)
    3af0:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    3af2:	2805      	cmp	r0, #5
    3af4:	d100      	bne.n	3af8 <i2c_master_init+0x20>
    3af6:	e13d      	b.n	3d74 <i2c_master_init+0x29c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    3af8:	0005      	movs	r5, r0
    3afa:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    3afc:	4aa2      	ldr	r2, [pc, #648]	; (3d88 <i2c_master_init+0x2b0>)
    3afe:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    3b00:	2301      	movs	r3, #1
    3b02:	4083      	lsls	r3, r0
    3b04:	430b      	orrs	r3, r1
    3b06:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    3b08:	a909      	add	r1, sp, #36	; 0x24
    3b0a:	7b23      	ldrb	r3, [r4, #12]
    3b0c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    3b0e:	b2ed      	uxtb	r5, r5
    3b10:	0028      	movs	r0, r5
    3b12:	4b9e      	ldr	r3, [pc, #632]	; (3d8c <i2c_master_init+0x2b4>)
    3b14:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    3b16:	0028      	movs	r0, r5
    3b18:	4b9d      	ldr	r3, [pc, #628]	; (3d90 <i2c_master_init+0x2b8>)
    3b1a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    3b1c:	7b20      	ldrb	r0, [r4, #12]
    3b1e:	2100      	movs	r1, #0
    3b20:	4b9c      	ldr	r3, [pc, #624]	; (3d94 <i2c_master_init+0x2bc>)
    3b22:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3b24:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    3b26:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    3b28:	079b      	lsls	r3, r3, #30
    3b2a:	d505      	bpl.n	3b38 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    3b2c:	b00a      	add	sp, #40	; 0x28
    3b2e:	bc1c      	pop	{r2, r3, r4}
    3b30:	4690      	mov	r8, r2
    3b32:	4699      	mov	r9, r3
    3b34:	46a2      	mov	sl, r4
    3b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    3b38:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    3b3a:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    3b3c:	07db      	lsls	r3, r3, #31
    3b3e:	d4f5      	bmi.n	3b2c <i2c_master_init+0x54>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    3b40:	6838      	ldr	r0, [r7, #0]
    3b42:	4b90      	ldr	r3, [pc, #576]	; (3d84 <i2c_master_init+0x2ac>)
    3b44:	4699      	mov	r9, r3
    3b46:	4798      	blx	r3
    3b48:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    3b4a:	4993      	ldr	r1, [pc, #588]	; (3d98 <i2c_master_init+0x2c0>)
    3b4c:	4b93      	ldr	r3, [pc, #588]	; (3d9c <i2c_master_init+0x2c4>)
    3b4e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    3b50:	00ad      	lsls	r5, r5, #2
    3b52:	4b93      	ldr	r3, [pc, #588]	; (3da0 <i2c_master_init+0x2c8>)
    3b54:	50ef      	str	r7, [r5, r3]
	module->registered_callback = 0;
    3b56:	2300      	movs	r3, #0
    3b58:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    3b5a:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    3b5c:	2500      	movs	r5, #0
    3b5e:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    3b60:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    3b62:	2225      	movs	r2, #37	; 0x25
    3b64:	54bd      	strb	r5, [r7, r2]
	module->buffer = NULL;
    3b66:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    3b68:	3314      	adds	r3, #20
    3b6a:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3b6c:	683b      	ldr	r3, [r7, #0]
    3b6e:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    3b70:	0018      	movs	r0, r3
    3b72:	47c8      	blx	r9
    3b74:	4681      	mov	r9, r0
    3b76:	2380      	movs	r3, #128	; 0x80
    3b78:	aa08      	add	r2, sp, #32
    3b7a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3b7c:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3b7e:	2301      	movs	r3, #1
    3b80:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    3b82:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    3b84:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    3b86:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    3b88:	2800      	cmp	r0, #0
    3b8a:	d100      	bne.n	3b8e <i2c_master_init+0xb6>
    3b8c:	e0af      	b.n	3cee <i2c_master_init+0x216>
	pin_conf.mux_position = pad0 & 0xFFFF;
    3b8e:	ab08      	add	r3, sp, #32
    3b90:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3b92:	2302      	movs	r3, #2
    3b94:	aa08      	add	r2, sp, #32
    3b96:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    3b98:	0c00      	lsrs	r0, r0, #16
    3b9a:	b2c0      	uxtb	r0, r0
    3b9c:	0011      	movs	r1, r2
    3b9e:	4b81      	ldr	r3, [pc, #516]	; (3da4 <i2c_master_init+0x2cc>)
    3ba0:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    3ba2:	2e00      	cmp	r6, #0
    3ba4:	d100      	bne.n	3ba8 <i2c_master_init+0xd0>
    3ba6:	e0a7      	b.n	3cf8 <i2c_master_init+0x220>
	pin_conf.mux_position = pad1 & 0xFFFF;
    3ba8:	ab08      	add	r3, sp, #32
    3baa:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3bac:	2302      	movs	r3, #2
    3bae:	aa08      	add	r2, sp, #32
    3bb0:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    3bb2:	0c36      	lsrs	r6, r6, #16
    3bb4:	b2f0      	uxtb	r0, r6
    3bb6:	0011      	movs	r1, r2
    3bb8:	4b7a      	ldr	r3, [pc, #488]	; (3da4 <i2c_master_init+0x2cc>)
    3bba:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    3bbc:	8aa3      	ldrh	r3, [r4, #20]
    3bbe:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    3bc0:	8ae3      	ldrh	r3, [r4, #22]
    3bc2:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    3bc4:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3bc6:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    3bc8:	2b00      	cmp	r3, #0
    3bca:	d104      	bne.n	3bd6 <i2c_master_init+0xfe>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3bcc:	4b76      	ldr	r3, [pc, #472]	; (3da8 <i2c_master_init+0x2d0>)
    3bce:	789b      	ldrb	r3, [r3, #2]
    3bd0:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    3bd2:	0fdb      	lsrs	r3, r3, #31
    3bd4:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    3bd6:	68a1      	ldr	r1, [r4, #8]
    3bd8:	6923      	ldr	r3, [r4, #16]
    3bda:	430b      	orrs	r3, r1
    3bdc:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    3bde:	2224      	movs	r2, #36	; 0x24
    3be0:	5ca2      	ldrb	r2, [r4, r2]
    3be2:	2a00      	cmp	r2, #0
    3be4:	d002      	beq.n	3bec <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    3be6:	2280      	movs	r2, #128	; 0x80
    3be8:	05d2      	lsls	r2, r2, #23
    3bea:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    3bec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3bee:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    3bf0:	222c      	movs	r2, #44	; 0x2c
    3bf2:	5ca2      	ldrb	r2, [r4, r2]
    3bf4:	2a00      	cmp	r2, #0
    3bf6:	d103      	bne.n	3c00 <i2c_master_init+0x128>
    3bf8:	2280      	movs	r2, #128	; 0x80
    3bfa:	0492      	lsls	r2, r2, #18
    3bfc:	4291      	cmp	r1, r2
    3bfe:	d102      	bne.n	3c06 <i2c_master_init+0x12e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    3c00:	2280      	movs	r2, #128	; 0x80
    3c02:	0512      	lsls	r2, r2, #20
    3c04:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    3c06:	222d      	movs	r2, #45	; 0x2d
    3c08:	5ca2      	ldrb	r2, [r4, r2]
    3c0a:	2a00      	cmp	r2, #0
    3c0c:	d002      	beq.n	3c14 <i2c_master_init+0x13c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    3c0e:	2280      	movs	r2, #128	; 0x80
    3c10:	0412      	lsls	r2, r2, #16
    3c12:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    3c14:	222e      	movs	r2, #46	; 0x2e
    3c16:	5ca2      	ldrb	r2, [r4, r2]
    3c18:	2a00      	cmp	r2, #0
    3c1a:	d002      	beq.n	3c22 <i2c_master_init+0x14a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    3c1c:	2280      	movs	r2, #128	; 0x80
    3c1e:	03d2      	lsls	r2, r2, #15
    3c20:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    3c22:	4642      	mov	r2, r8
    3c24:	6812      	ldr	r2, [r2, #0]
    3c26:	4313      	orrs	r3, r2
    3c28:	4642      	mov	r2, r8
    3c2a:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    3c2c:	2380      	movs	r3, #128	; 0x80
    3c2e:	005b      	lsls	r3, r3, #1
    3c30:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    3c32:	464d      	mov	r5, r9
    3c34:	3512      	adds	r5, #18
    3c36:	b2e8      	uxtb	r0, r5
    3c38:	4b5c      	ldr	r3, [pc, #368]	; (3dac <i2c_master_init+0x2d4>)
    3c3a:	4798      	blx	r3
    3c3c:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    3c3e:	23fa      	movs	r3, #250	; 0xfa
    3c40:	009b      	lsls	r3, r3, #2
    3c42:	6822      	ldr	r2, [r4, #0]
    3c44:	435a      	muls	r2, r3
    3c46:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    3c48:	6863      	ldr	r3, [r4, #4]
    3c4a:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    3c4c:	4d58      	ldr	r5, [pc, #352]	; (3db0 <i2c_master_init+0x2d8>)
    3c4e:	47a8      	blx	r5
    3c50:	9000      	str	r0, [sp, #0]
    3c52:	9101      	str	r1, [sp, #4]
    3c54:	464b      	mov	r3, r9
    3c56:	0058      	lsls	r0, r3, #1
    3c58:	47a8      	blx	r5
    3c5a:	9002      	str	r0, [sp, #8]
    3c5c:	9103      	str	r1, [sp, #12]
    3c5e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    3c60:	47a8      	blx	r5
    3c62:	9004      	str	r0, [sp, #16]
    3c64:	9105      	str	r1, [sp, #20]
    3c66:	4f53      	ldr	r7, [pc, #332]	; (3db4 <i2c_master_init+0x2dc>)
    3c68:	4a53      	ldr	r2, [pc, #332]	; (3db8 <i2c_master_init+0x2e0>)
    3c6a:	4b54      	ldr	r3, [pc, #336]	; (3dbc <i2c_master_init+0x2e4>)
    3c6c:	9800      	ldr	r0, [sp, #0]
    3c6e:	9901      	ldr	r1, [sp, #4]
    3c70:	47b8      	blx	r7
    3c72:	0002      	movs	r2, r0
    3c74:	000b      	movs	r3, r1
    3c76:	9804      	ldr	r0, [sp, #16]
    3c78:	9905      	ldr	r1, [sp, #20]
    3c7a:	47b8      	blx	r7
    3c7c:	4e50      	ldr	r6, [pc, #320]	; (3dc0 <i2c_master_init+0x2e8>)
    3c7e:	2200      	movs	r2, #0
    3c80:	4b50      	ldr	r3, [pc, #320]	; (3dc4 <i2c_master_init+0x2ec>)
    3c82:	47b0      	blx	r6
    3c84:	9004      	str	r0, [sp, #16]
    3c86:	9105      	str	r1, [sp, #20]
    3c88:	4648      	mov	r0, r9
    3c8a:	47a8      	blx	r5
    3c8c:	0002      	movs	r2, r0
    3c8e:	000b      	movs	r3, r1
    3c90:	9804      	ldr	r0, [sp, #16]
    3c92:	9905      	ldr	r1, [sp, #20]
    3c94:	47b8      	blx	r7
    3c96:	0002      	movs	r2, r0
    3c98:	000b      	movs	r3, r1
    3c9a:	4d4b      	ldr	r5, [pc, #300]	; (3dc8 <i2c_master_init+0x2f0>)
    3c9c:	9800      	ldr	r0, [sp, #0]
    3c9e:	9901      	ldr	r1, [sp, #4]
    3ca0:	47a8      	blx	r5
    3ca2:	9a02      	ldr	r2, [sp, #8]
    3ca4:	9b03      	ldr	r3, [sp, #12]
    3ca6:	47b0      	blx	r6
    3ca8:	2200      	movs	r2, #0
    3caa:	4b48      	ldr	r3, [pc, #288]	; (3dcc <i2c_master_init+0x2f4>)
    3cac:	47a8      	blx	r5
    3cae:	9a02      	ldr	r2, [sp, #8]
    3cb0:	9b03      	ldr	r3, [sp, #12]
    3cb2:	4d47      	ldr	r5, [pc, #284]	; (3dd0 <i2c_master_init+0x2f8>)
    3cb4:	47a8      	blx	r5
    3cb6:	4b47      	ldr	r3, [pc, #284]	; (3dd4 <i2c_master_init+0x2fc>)
    3cb8:	4798      	blx	r3
    3cba:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    3cbc:	2380      	movs	r3, #128	; 0x80
    3cbe:	049b      	lsls	r3, r3, #18
    3cc0:	68a2      	ldr	r2, [r4, #8]
    3cc2:	429a      	cmp	r2, r3
    3cc4:	d01e      	beq.n	3d04 <i2c_master_init+0x22c>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3cc6:	0003      	movs	r3, r0
    3cc8:	2040      	movs	r0, #64	; 0x40
    3cca:	2dff      	cmp	r5, #255	; 0xff
    3ccc:	d900      	bls.n	3cd0 <i2c_master_init+0x1f8>
    3cce:	e72d      	b.n	3b2c <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    3cd0:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    3cd2:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3cd4:	25ff      	movs	r5, #255	; 0xff
    3cd6:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    3cd8:	0624      	lsls	r4, r4, #24
    3cda:	4325      	orrs	r5, r4
    3cdc:	0400      	lsls	r0, r0, #16
    3cde:	23ff      	movs	r3, #255	; 0xff
    3ce0:	041b      	lsls	r3, r3, #16
    3ce2:	4018      	ands	r0, r3
    3ce4:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    3ce6:	4643      	mov	r3, r8
    3ce8:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    3cea:	2000      	movs	r0, #0
    3cec:	e71e      	b.n	3b2c <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    3cee:	2100      	movs	r1, #0
    3cf0:	4640      	mov	r0, r8
    3cf2:	4b39      	ldr	r3, [pc, #228]	; (3dd8 <i2c_master_init+0x300>)
    3cf4:	4798      	blx	r3
    3cf6:	e74a      	b.n	3b8e <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    3cf8:	2101      	movs	r1, #1
    3cfa:	4640      	mov	r0, r8
    3cfc:	4b36      	ldr	r3, [pc, #216]	; (3dd8 <i2c_master_init+0x300>)
    3cfe:	4798      	blx	r3
    3d00:	0006      	movs	r6, r0
    3d02:	e751      	b.n	3ba8 <i2c_master_init+0xd0>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    3d04:	26fa      	movs	r6, #250	; 0xfa
    3d06:	00b6      	lsls	r6, r6, #2
    3d08:	4653      	mov	r3, sl
    3d0a:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    3d0c:	9800      	ldr	r0, [sp, #0]
    3d0e:	9901      	ldr	r1, [sp, #4]
    3d10:	0002      	movs	r2, r0
    3d12:	000b      	movs	r3, r1
    3d14:	4c2a      	ldr	r4, [pc, #168]	; (3dc0 <i2c_master_init+0x2e8>)
    3d16:	47a0      	blx	r4
    3d18:	9000      	str	r0, [sp, #0]
    3d1a:	9101      	str	r1, [sp, #4]
    3d1c:	0030      	movs	r0, r6
    3d1e:	4b24      	ldr	r3, [pc, #144]	; (3db0 <i2c_master_init+0x2d8>)
    3d20:	4798      	blx	r3
    3d22:	2200      	movs	r2, #0
    3d24:	4b2d      	ldr	r3, [pc, #180]	; (3ddc <i2c_master_init+0x304>)
    3d26:	47b8      	blx	r7
    3d28:	0002      	movs	r2, r0
    3d2a:	000b      	movs	r3, r1
    3d2c:	9800      	ldr	r0, [sp, #0]
    3d2e:	9901      	ldr	r1, [sp, #4]
    3d30:	4c27      	ldr	r4, [pc, #156]	; (3dd0 <i2c_master_init+0x2f8>)
    3d32:	47a0      	blx	r4
    3d34:	2200      	movs	r2, #0
    3d36:	4b25      	ldr	r3, [pc, #148]	; (3dcc <i2c_master_init+0x2f4>)
    3d38:	4c23      	ldr	r4, [pc, #140]	; (3dc8 <i2c_master_init+0x2f0>)
    3d3a:	47a0      	blx	r4
    3d3c:	4b25      	ldr	r3, [pc, #148]	; (3dd4 <i2c_master_init+0x2fc>)
    3d3e:	4798      	blx	r3
    3d40:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    3d42:	d00c      	beq.n	3d5e <i2c_master_init+0x286>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    3d44:	0031      	movs	r1, r6
    3d46:	9807      	ldr	r0, [sp, #28]
    3d48:	4b25      	ldr	r3, [pc, #148]	; (3de0 <i2c_master_init+0x308>)
    3d4a:	4798      	blx	r3
    3d4c:	3802      	subs	r0, #2
    3d4e:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3d50:	002b      	movs	r3, r5
    3d52:	2dff      	cmp	r5, #255	; 0xff
    3d54:	d80c      	bhi.n	3d70 <i2c_master_init+0x298>
    3d56:	28ff      	cmp	r0, #255	; 0xff
    3d58:	d9bc      	bls.n	3cd4 <i2c_master_init+0x1fc>
    3d5a:	2040      	movs	r0, #64	; 0x40
    3d5c:	e6e6      	b.n	3b2c <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    3d5e:	0071      	lsls	r1, r6, #1
    3d60:	1e48      	subs	r0, r1, #1
    3d62:	9b07      	ldr	r3, [sp, #28]
    3d64:	469c      	mov	ip, r3
    3d66:	4460      	add	r0, ip
    3d68:	4b1d      	ldr	r3, [pc, #116]	; (3de0 <i2c_master_init+0x308>)
    3d6a:	4798      	blx	r3
    3d6c:	3801      	subs	r0, #1
    3d6e:	e7ef      	b.n	3d50 <i2c_master_init+0x278>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    3d70:	2040      	movs	r0, #64	; 0x40
    3d72:	e6db      	b.n	3b2c <i2c_master_init+0x54>
			MCLK->APBDMASK.reg |= mask;
    3d74:	4a04      	ldr	r2, [pc, #16]	; (3d88 <i2c_master_init+0x2b0>)
    3d76:	6a13      	ldr	r3, [r2, #32]
    3d78:	2102      	movs	r1, #2
    3d7a:	430b      	orrs	r3, r1
    3d7c:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    3d7e:	2518      	movs	r5, #24
    3d80:	e6c2      	b.n	3b08 <i2c_master_init+0x30>
    3d82:	46c0      	nop			; (mov r8, r8)
    3d84:	00004719 	.word	0x00004719
    3d88:	40000400 	.word	0x40000400
    3d8c:	0000596d 	.word	0x0000596d
    3d90:	000058fd 	.word	0x000058fd
    3d94:	00004571 	.word	0x00004571
    3d98:	0000420d 	.word	0x0000420d
    3d9c:	00004755 	.word	0x00004755
    3da0:	2000116c 	.word	0x2000116c
    3da4:	00005a69 	.word	0x00005a69
    3da8:	41002000 	.word	0x41002000
    3dac:	00005991 	.word	0x00005991
    3db0:	00017759 	.word	0x00017759
    3db4:	00016bc5 	.word	0x00016bc5
    3db8:	e826d695 	.word	0xe826d695
    3dbc:	3e112e0b 	.word	0x3e112e0b
    3dc0:	00015f3d 	.word	0x00015f3d
    3dc4:	40240000 	.word	0x40240000
    3dc8:	000170c5 	.word	0x000170c5
    3dcc:	3ff00000 	.word	0x3ff00000
    3dd0:	0001655d 	.word	0x0001655d
    3dd4:	000176f1 	.word	0x000176f1
    3dd8:	000045bd 	.word	0x000045bd
    3ddc:	40080000 	.word	0x40080000
    3de0:	00014b71 	.word	0x00014b71

00003de4 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3de4:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    3de6:	7e1a      	ldrb	r2, [r3, #24]
    3de8:	0792      	lsls	r2, r2, #30
    3dea:	d507      	bpl.n	3dfc <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    3dec:	2202      	movs	r2, #2
    3dee:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    3df0:	8b5b      	ldrh	r3, [r3, #26]
    3df2:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    3df4:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    3df6:	17db      	asrs	r3, r3, #31
    3df8:	4018      	ands	r0, r3
}
    3dfa:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    3dfc:	8b5a      	ldrh	r2, [r3, #26]
    3dfe:	0752      	lsls	r2, r2, #29
    3e00:	d506      	bpl.n	3e10 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3e02:	6859      	ldr	r1, [r3, #4]
    3e04:	22c0      	movs	r2, #192	; 0xc0
    3e06:	0292      	lsls	r2, r2, #10
    3e08:	430a      	orrs	r2, r1
    3e0a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    3e0c:	2018      	movs	r0, #24
    3e0e:	e7f4      	b.n	3dfa <_i2c_master_address_response+0x16>
	return STATUS_OK;
    3e10:	2000      	movs	r0, #0
    3e12:	e7f2      	b.n	3dfa <_i2c_master_address_response+0x16>

00003e14 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    3e14:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3e16:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    3e18:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3e1a:	2401      	movs	r4, #1
    3e1c:	2502      	movs	r5, #2
    3e1e:	7e11      	ldrb	r1, [r2, #24]
    3e20:	4221      	tst	r1, r4
    3e22:	d10b      	bne.n	3e3c <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    3e24:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    3e26:	4229      	tst	r1, r5
    3e28:	d106      	bne.n	3e38 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    3e2a:	3301      	adds	r3, #1
    3e2c:	b29b      	uxth	r3, r3
    3e2e:	8901      	ldrh	r1, [r0, #8]
    3e30:	4299      	cmp	r1, r3
    3e32:	d8f4      	bhi.n	3e1e <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    3e34:	2012      	movs	r0, #18
    3e36:	e002      	b.n	3e3e <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    3e38:	2000      	movs	r0, #0
    3e3a:	e000      	b.n	3e3e <_i2c_master_wait_for_bus+0x2a>
    3e3c:	2000      	movs	r0, #0
}
    3e3e:	bd30      	pop	{r4, r5, pc}

00003e40 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    3e40:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3e42:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3e44:	6862      	ldr	r2, [r4, #4]
    3e46:	2380      	movs	r3, #128	; 0x80
    3e48:	02db      	lsls	r3, r3, #11
    3e4a:	4313      	orrs	r3, r2
    3e4c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    3e4e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3e50:	4b02      	ldr	r3, [pc, #8]	; (3e5c <_i2c_master_send_hs_master_code+0x1c>)
    3e52:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    3e54:	2301      	movs	r3, #1
    3e56:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    3e58:	bd10      	pop	{r4, pc}
    3e5a:	46c0      	nop			; (mov r8, r8)
    3e5c:	00003e15 	.word	0x00003e15

00003e60 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    3e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e62:	46de      	mov	lr, fp
    3e64:	4657      	mov	r7, sl
    3e66:	464e      	mov	r6, r9
    3e68:	4645      	mov	r5, r8
    3e6a:	b5e0      	push	{r5, r6, r7, lr}
    3e6c:	b083      	sub	sp, #12
    3e6e:	0006      	movs	r6, r0
    3e70:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3e72:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    3e74:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    3e76:	682b      	ldr	r3, [r5, #0]
    3e78:	011b      	lsls	r3, r3, #4
    3e7a:	0fdb      	lsrs	r3, r3, #31
    3e7c:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    3e7e:	7a4b      	ldrb	r3, [r1, #9]
    3e80:	2b00      	cmp	r3, #0
    3e82:	d12b      	bne.n	3edc <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3e84:	686b      	ldr	r3, [r5, #4]
    3e86:	4a58      	ldr	r2, [pc, #352]	; (3fe8 <_i2c_master_read_packet+0x188>)
    3e88:	4013      	ands	r3, r2
    3e8a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    3e8c:	464b      	mov	r3, r9
    3e8e:	7a1b      	ldrb	r3, [r3, #8]
    3e90:	2b00      	cmp	r3, #0
    3e92:	d127      	bne.n	3ee4 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3e94:	464b      	mov	r3, r9
    3e96:	881b      	ldrh	r3, [r3, #0]
    3e98:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    3e9a:	464a      	mov	r2, r9
    3e9c:	7a52      	ldrb	r2, [r2, #9]
    3e9e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    3ea0:	4313      	orrs	r3, r2
    3ea2:	2201      	movs	r2, #1
    3ea4:	4313      	orrs	r3, r2
    3ea6:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    3ea8:	0030      	movs	r0, r6
    3eaa:	4b50      	ldr	r3, [pc, #320]	; (3fec <_i2c_master_read_packet+0x18c>)
    3eac:	4798      	blx	r3
    3eae:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    3eb0:	4653      	mov	r3, sl
    3eb2:	2b00      	cmp	r3, #0
    3eb4:	d003      	beq.n	3ebe <_i2c_master_read_packet+0x5e>
    3eb6:	464b      	mov	r3, r9
    3eb8:	885b      	ldrh	r3, [r3, #2]
    3eba:	2b01      	cmp	r3, #1
    3ebc:	d03b      	beq.n	3f36 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    3ebe:	686b      	ldr	r3, [r5, #4]
    3ec0:	4a49      	ldr	r2, [pc, #292]	; (3fe8 <_i2c_master_read_packet+0x188>)
    3ec2:	4013      	ands	r3, r2
    3ec4:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    3ec6:	9b01      	ldr	r3, [sp, #4]
    3ec8:	2b00      	cmp	r3, #0
    3eca:	d03a      	beq.n	3f42 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    3ecc:	9801      	ldr	r0, [sp, #4]
    3ece:	b003      	add	sp, #12
    3ed0:	bc3c      	pop	{r2, r3, r4, r5}
    3ed2:	4690      	mov	r8, r2
    3ed4:	4699      	mov	r9, r3
    3ed6:	46a2      	mov	sl, r4
    3ed8:	46ab      	mov	fp, r5
    3eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    3edc:	7a89      	ldrb	r1, [r1, #10]
    3ede:	4b44      	ldr	r3, [pc, #272]	; (3ff0 <_i2c_master_read_packet+0x190>)
    3ee0:	4798      	blx	r3
    3ee2:	e7cf      	b.n	3e84 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    3ee4:	464b      	mov	r3, r9
    3ee6:	881b      	ldrh	r3, [r3, #0]
    3ee8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3eea:	464a      	mov	r2, r9
    3eec:	7a52      	ldrb	r2, [r2, #9]
    3eee:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    3ef0:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3ef2:	2280      	movs	r2, #128	; 0x80
    3ef4:	0212      	lsls	r2, r2, #8
    3ef6:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    3ef8:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    3efa:	0030      	movs	r0, r6
    3efc:	4b3b      	ldr	r3, [pc, #236]	; (3fec <_i2c_master_read_packet+0x18c>)
    3efe:	4798      	blx	r3
    3f00:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3f02:	686b      	ldr	r3, [r5, #4]
    3f04:	4a38      	ldr	r2, [pc, #224]	; (3fe8 <_i2c_master_read_packet+0x188>)
    3f06:	4013      	ands	r3, r2
    3f08:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    3f0a:	2800      	cmp	r0, #0
    3f0c:	d1de      	bne.n	3ecc <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    3f0e:	0030      	movs	r0, r6
    3f10:	4b38      	ldr	r3, [pc, #224]	; (3ff4 <_i2c_master_read_packet+0x194>)
    3f12:	4798      	blx	r3
    3f14:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    3f16:	2800      	cmp	r0, #0
    3f18:	d1d8      	bne.n	3ecc <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3f1a:	464b      	mov	r3, r9
    3f1c:	881b      	ldrh	r3, [r3, #0]
    3f1e:	0a1b      	lsrs	r3, r3, #8
    3f20:	2278      	movs	r2, #120	; 0x78
    3f22:	4313      	orrs	r3, r2
    3f24:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    3f26:	464a      	mov	r2, r9
    3f28:	7a52      	ldrb	r2, [r2, #9]
    3f2a:	0392      	lsls	r2, r2, #14
    3f2c:	2101      	movs	r1, #1
    3f2e:	430a      	orrs	r2, r1
    3f30:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    3f32:	626b      	str	r3, [r5, #36]	; 0x24
    3f34:	e7b8      	b.n	3ea8 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3f36:	686a      	ldr	r2, [r5, #4]
    3f38:	2380      	movs	r3, #128	; 0x80
    3f3a:	02db      	lsls	r3, r3, #11
    3f3c:	4313      	orrs	r3, r2
    3f3e:	606b      	str	r3, [r5, #4]
    3f40:	e7c1      	b.n	3ec6 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    3f42:	0030      	movs	r0, r6
    3f44:	4b2b      	ldr	r3, [pc, #172]	; (3ff4 <_i2c_master_read_packet+0x194>)
    3f46:	4798      	blx	r3
    3f48:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    3f4a:	2800      	cmp	r0, #0
    3f4c:	d1be      	bne.n	3ecc <_i2c_master_read_packet+0x6c>
    3f4e:	3c01      	subs	r4, #1
    3f50:	b2a4      	uxth	r4, r4
    3f52:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    3f54:	4b28      	ldr	r3, [pc, #160]	; (3ff8 <_i2c_master_read_packet+0x198>)
    3f56:	469b      	mov	fp, r3
    3f58:	e015      	b.n	3f86 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    3f5a:	2c01      	cmp	r4, #1
    3f5c:	d020      	beq.n	3fa0 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    3f5e:	0030      	movs	r0, r6
    3f60:	4b26      	ldr	r3, [pc, #152]	; (3ffc <_i2c_master_read_packet+0x19c>)
    3f62:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    3f64:	4643      	mov	r3, r8
    3f66:	1c5f      	adds	r7, r3, #1
    3f68:	b2bf      	uxth	r7, r7
    3f6a:	2328      	movs	r3, #40	; 0x28
    3f6c:	5ceb      	ldrb	r3, [r5, r3]
    3f6e:	464a      	mov	r2, r9
    3f70:	6852      	ldr	r2, [r2, #4]
    3f72:	4641      	mov	r1, r8
    3f74:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    3f76:	0030      	movs	r0, r6
    3f78:	4b1c      	ldr	r3, [pc, #112]	; (3fec <_i2c_master_read_packet+0x18c>)
    3f7a:	4798      	blx	r3
    3f7c:	3c01      	subs	r4, #1
    3f7e:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    3f80:	2800      	cmp	r0, #0
    3f82:	d115      	bne.n	3fb0 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    3f84:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    3f86:	455c      	cmp	r4, fp
    3f88:	d014      	beq.n	3fb4 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    3f8a:	8b6b      	ldrh	r3, [r5, #26]
    3f8c:	069b      	lsls	r3, r3, #26
    3f8e:	d527      	bpl.n	3fe0 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    3f90:	7af3      	ldrb	r3, [r6, #11]
    3f92:	2b00      	cmp	r3, #0
    3f94:	d0e3      	beq.n	3f5e <_i2c_master_read_packet+0xfe>
    3f96:	4653      	mov	r3, sl
    3f98:	2b00      	cmp	r3, #0
    3f9a:	d1de      	bne.n	3f5a <_i2c_master_read_packet+0xfa>
    3f9c:	2c00      	cmp	r4, #0
    3f9e:	d1de      	bne.n	3f5e <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3fa0:	686a      	ldr	r2, [r5, #4]
    3fa2:	2380      	movs	r3, #128	; 0x80
    3fa4:	02db      	lsls	r3, r3, #11
    3fa6:	4313      	orrs	r3, r2
    3fa8:	606b      	str	r3, [r5, #4]
    3faa:	3c01      	subs	r4, #1
    3fac:	b2a4      	uxth	r4, r4
    3fae:	e7ea      	b.n	3f86 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    3fb0:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    3fb2:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    3fb4:	7ab3      	ldrb	r3, [r6, #10]
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d109      	bne.n	3fce <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    3fba:	0030      	movs	r0, r6
    3fbc:	4b0f      	ldr	r3, [pc, #60]	; (3ffc <_i2c_master_read_packet+0x19c>)
    3fbe:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    3fc0:	2328      	movs	r3, #40	; 0x28
    3fc2:	5cea      	ldrb	r2, [r5, r3]
    3fc4:	464b      	mov	r3, r9
    3fc6:	685b      	ldr	r3, [r3, #4]
    3fc8:	4641      	mov	r1, r8
    3fca:	545a      	strb	r2, [r3, r1]
    3fcc:	e77e      	b.n	3ecc <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    3fce:	0030      	movs	r0, r6
    3fd0:	4b0a      	ldr	r3, [pc, #40]	; (3ffc <_i2c_master_read_packet+0x19c>)
    3fd2:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    3fd4:	686a      	ldr	r2, [r5, #4]
    3fd6:	23c0      	movs	r3, #192	; 0xc0
    3fd8:	029b      	lsls	r3, r3, #10
    3fda:	4313      	orrs	r3, r2
    3fdc:	606b      	str	r3, [r5, #4]
    3fde:	e7ec      	b.n	3fba <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    3fe0:	2341      	movs	r3, #65	; 0x41
    3fe2:	9301      	str	r3, [sp, #4]
    3fe4:	e772      	b.n	3ecc <_i2c_master_read_packet+0x6c>
    3fe6:	46c0      	nop			; (mov r8, r8)
    3fe8:	fffbffff 	.word	0xfffbffff
    3fec:	00003e15 	.word	0x00003e15
    3ff0:	00003e41 	.word	0x00003e41
    3ff4:	00003de5 	.word	0x00003de5
    3ff8:	0000ffff 	.word	0x0000ffff
    3ffc:	00003acd 	.word	0x00003acd

00004000 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    4000:	b5f0      	push	{r4, r5, r6, r7, lr}
    4002:	46de      	mov	lr, fp
    4004:	4657      	mov	r7, sl
    4006:	464e      	mov	r6, r9
    4008:	4645      	mov	r5, r8
    400a:	b5e0      	push	{r5, r6, r7, lr}
    400c:	b083      	sub	sp, #12
    400e:	0006      	movs	r6, r0
    4010:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4012:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    4014:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    4016:	4b32      	ldr	r3, [pc, #200]	; (40e0 <_i2c_master_write_packet+0xe0>)
    4018:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    401a:	7a7b      	ldrb	r3, [r7, #9]
    401c:	2b00      	cmp	r3, #0
    401e:	d11d      	bne.n	405c <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    4020:	686b      	ldr	r3, [r5, #4]
    4022:	4a30      	ldr	r2, [pc, #192]	; (40e4 <_i2c_master_write_packet+0xe4>)
    4024:	4013      	ands	r3, r2
    4026:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    4028:	7a3b      	ldrb	r3, [r7, #8]
    402a:	2b00      	cmp	r3, #0
    402c:	d01b      	beq.n	4066 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    402e:	883b      	ldrh	r3, [r7, #0]
    4030:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    4032:	7a7a      	ldrb	r2, [r7, #9]
    4034:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    4036:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    4038:	2280      	movs	r2, #128	; 0x80
    403a:	0212      	lsls	r2, r2, #8
    403c:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    403e:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    4040:	0030      	movs	r0, r6
    4042:	4b29      	ldr	r3, [pc, #164]	; (40e8 <_i2c_master_write_packet+0xe8>)
    4044:	4798      	blx	r3
    4046:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    4048:	2800      	cmp	r0, #0
    404a:	d013      	beq.n	4074 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    404c:	9801      	ldr	r0, [sp, #4]
    404e:	b003      	add	sp, #12
    4050:	bc3c      	pop	{r2, r3, r4, r5}
    4052:	4690      	mov	r8, r2
    4054:	4699      	mov	r9, r3
    4056:	46a2      	mov	sl, r4
    4058:	46ab      	mov	fp, r5
    405a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    405c:	7ab9      	ldrb	r1, [r7, #10]
    405e:	0030      	movs	r0, r6
    4060:	4b22      	ldr	r3, [pc, #136]	; (40ec <_i2c_master_write_packet+0xec>)
    4062:	4798      	blx	r3
    4064:	e7dc      	b.n	4020 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    4066:	883b      	ldrh	r3, [r7, #0]
    4068:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    406a:	7a7a      	ldrb	r2, [r7, #9]
    406c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    406e:	4313      	orrs	r3, r2
    4070:	626b      	str	r3, [r5, #36]	; 0x24
    4072:	e7e5      	b.n	4040 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    4074:	0030      	movs	r0, r6
    4076:	4b1e      	ldr	r3, [pc, #120]	; (40f0 <_i2c_master_write_packet+0xf0>)
    4078:	4798      	blx	r3
    407a:	1e03      	subs	r3, r0, #0
    407c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    407e:	d1e5      	bne.n	404c <_i2c_master_write_packet+0x4c>
    4080:	46a0      	mov	r8, r4
    4082:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    4084:	3320      	adds	r3, #32
    4086:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    4088:	4b15      	ldr	r3, [pc, #84]	; (40e0 <_i2c_master_write_packet+0xe0>)
    408a:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    408c:	4b16      	ldr	r3, [pc, #88]	; (40e8 <_i2c_master_write_packet+0xe8>)
    408e:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    4090:	4544      	cmp	r4, r8
    4092:	d015      	beq.n	40c0 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    4094:	8b6b      	ldrh	r3, [r5, #26]
    4096:	464a      	mov	r2, r9
    4098:	4213      	tst	r3, r2
    409a:	d01d      	beq.n	40d8 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    409c:	0030      	movs	r0, r6
    409e:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    40a0:	687b      	ldr	r3, [r7, #4]
    40a2:	5d1a      	ldrb	r2, [r3, r4]
    40a4:	2328      	movs	r3, #40	; 0x28
    40a6:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    40a8:	0030      	movs	r0, r6
    40aa:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    40ac:	2800      	cmp	r0, #0
    40ae:	d106      	bne.n	40be <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    40b0:	8b6b      	ldrh	r3, [r5, #26]
    40b2:	3401      	adds	r4, #1
    40b4:	075b      	lsls	r3, r3, #29
    40b6:	d5eb      	bpl.n	4090 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    40b8:	231e      	movs	r3, #30
    40ba:	9301      	str	r3, [sp, #4]
    40bc:	e000      	b.n	40c0 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    40be:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    40c0:	7ab3      	ldrb	r3, [r6, #10]
    40c2:	2b00      	cmp	r3, #0
    40c4:	d0c2      	beq.n	404c <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    40c6:	0030      	movs	r0, r6
    40c8:	4b05      	ldr	r3, [pc, #20]	; (40e0 <_i2c_master_write_packet+0xe0>)
    40ca:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    40cc:	686a      	ldr	r2, [r5, #4]
    40ce:	23c0      	movs	r3, #192	; 0xc0
    40d0:	029b      	lsls	r3, r3, #10
    40d2:	4313      	orrs	r3, r2
    40d4:	606b      	str	r3, [r5, #4]
    40d6:	e7b9      	b.n	404c <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    40d8:	2341      	movs	r3, #65	; 0x41
    40da:	9301      	str	r3, [sp, #4]
    40dc:	e7b6      	b.n	404c <_i2c_master_write_packet+0x4c>
    40de:	46c0      	nop			; (mov r8, r8)
    40e0:	00003acd 	.word	0x00003acd
    40e4:	fffbffff 	.word	0xfffbffff
    40e8:	00003e15 	.word	0x00003e15
    40ec:	00003e41 	.word	0x00003e41
    40f0:	00003de5 	.word	0x00003de5

000040f4 <i2c_master_read_packet_wait>:
{
    40f4:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    40f6:	8b83      	ldrh	r3, [r0, #28]
    40f8:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    40fa:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    40fc:	2b00      	cmp	r3, #0
    40fe:	d001      	beq.n	4104 <i2c_master_read_packet_wait+0x10>
}
    4100:	0010      	movs	r0, r2
    4102:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    4104:	3301      	adds	r3, #1
    4106:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    4108:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    410a:	4b02      	ldr	r3, [pc, #8]	; (4114 <i2c_master_read_packet_wait+0x20>)
    410c:	4798      	blx	r3
    410e:	0002      	movs	r2, r0
    4110:	e7f6      	b.n	4100 <i2c_master_read_packet_wait+0xc>
    4112:	46c0      	nop			; (mov r8, r8)
    4114:	00003e61 	.word	0x00003e61

00004118 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    4118:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    411a:	8b83      	ldrh	r3, [r0, #28]
    411c:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    411e:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    4120:	2b00      	cmp	r3, #0
    4122:	d001      	beq.n	4128 <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    4124:	0010      	movs	r0, r2
    4126:	bd10      	pop	{r4, pc}
	module->send_stop = false;
    4128:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    412a:	3301      	adds	r3, #1
    412c:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    412e:	4b02      	ldr	r3, [pc, #8]	; (4138 <i2c_master_write_packet_wait_no_stop+0x20>)
    4130:	4798      	blx	r3
    4132:	0002      	movs	r2, r0
    4134:	e7f6      	b.n	4124 <i2c_master_write_packet_wait_no_stop+0xc>
    4136:	46c0      	nop			; (mov r8, r8)
    4138:	00004001 	.word	0x00004001

0000413c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    413c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    413e:	2207      	movs	r2, #7
    4140:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    4142:	421a      	tst	r2, r3
    4144:	d1fc      	bne.n	4140 <_i2c_master_wait_for_sync+0x4>
}
    4146:	4770      	bx	lr

00004148 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    4148:	b570      	push	{r4, r5, r6, lr}
    414a:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    414c:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    414e:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    4150:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    4152:	8b83      	ldrh	r3, [r0, #28]
    4154:	1aed      	subs	r5, r5, r3
    4156:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    4158:	8b83      	ldrh	r3, [r0, #28]
    415a:	3b01      	subs	r3, #1
    415c:	b29b      	uxth	r3, r3
    415e:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    4160:	0113      	lsls	r3, r2, #4
    4162:	d51d      	bpl.n	41a0 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    4164:	7ac3      	ldrb	r3, [r0, #11]
    4166:	2b00      	cmp	r3, #0
    4168:	d003      	beq.n	4172 <_i2c_master_read+0x2a>
    416a:	8b83      	ldrh	r3, [r0, #28]
    416c:	b29b      	uxth	r3, r3
    416e:	2b01      	cmp	r3, #1
    4170:	d010      	beq.n	4194 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    4172:	8ba3      	ldrh	r3, [r4, #28]
    4174:	b29b      	uxth	r3, r3
    4176:	2b00      	cmp	r3, #0
    4178:	d102      	bne.n	4180 <_i2c_master_read+0x38>
		if (module->send_stop) {
    417a:	7aa3      	ldrb	r3, [r4, #10]
    417c:	2b00      	cmp	r3, #0
    417e:	d11c      	bne.n	41ba <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    4180:	0020      	movs	r0, r4
    4182:	4b12      	ldr	r3, [pc, #72]	; (41cc <_i2c_master_read+0x84>)
    4184:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    4186:	6a23      	ldr	r3, [r4, #32]
    4188:	195d      	adds	r5, r3, r5
    418a:	2328      	movs	r3, #40	; 0x28
    418c:	5cf3      	ldrb	r3, [r6, r3]
    418e:	b2db      	uxtb	r3, r3
    4190:	702b      	strb	r3, [r5, #0]
}
    4192:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    4194:	6872      	ldr	r2, [r6, #4]
    4196:	2380      	movs	r3, #128	; 0x80
    4198:	02db      	lsls	r3, r3, #11
    419a:	4313      	orrs	r3, r2
    419c:	6073      	str	r3, [r6, #4]
    419e:	e7e8      	b.n	4172 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    41a0:	7ac3      	ldrb	r3, [r0, #11]
    41a2:	2b00      	cmp	r3, #0
    41a4:	d0e5      	beq.n	4172 <_i2c_master_read+0x2a>
    41a6:	8b83      	ldrh	r3, [r0, #28]
    41a8:	b29b      	uxth	r3, r3
    41aa:	2b00      	cmp	r3, #0
    41ac:	d1e1      	bne.n	4172 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    41ae:	6872      	ldr	r2, [r6, #4]
    41b0:	2380      	movs	r3, #128	; 0x80
    41b2:	02db      	lsls	r3, r3, #11
    41b4:	4313      	orrs	r3, r2
    41b6:	6073      	str	r3, [r6, #4]
    41b8:	e7db      	b.n	4172 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    41ba:	0020      	movs	r0, r4
    41bc:	4b03      	ldr	r3, [pc, #12]	; (41cc <_i2c_master_read+0x84>)
    41be:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    41c0:	6872      	ldr	r2, [r6, #4]
    41c2:	23c0      	movs	r3, #192	; 0xc0
    41c4:	029b      	lsls	r3, r3, #10
    41c6:	4313      	orrs	r3, r2
    41c8:	6073      	str	r3, [r6, #4]
    41ca:	e7d9      	b.n	4180 <_i2c_master_read+0x38>
    41cc:	0000413d 	.word	0x0000413d

000041d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    41d0:	b570      	push	{r4, r5, r6, lr}
    41d2:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    41d4:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    41d6:	8b6b      	ldrh	r3, [r5, #26]
    41d8:	075b      	lsls	r3, r3, #29
    41da:	d503      	bpl.n	41e4 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    41dc:	221e      	movs	r2, #30
    41de:	2325      	movs	r3, #37	; 0x25
    41e0:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    41e2:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    41e4:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    41e6:	8b83      	ldrh	r3, [r0, #28]
    41e8:	1af6      	subs	r6, r6, r3
    41ea:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    41ec:	8b83      	ldrh	r3, [r0, #28]
    41ee:	3b01      	subs	r3, #1
    41f0:	b29b      	uxth	r3, r3
    41f2:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    41f4:	4b04      	ldr	r3, [pc, #16]	; (4208 <_i2c_master_write+0x38>)
    41f6:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    41f8:	6a23      	ldr	r3, [r4, #32]
    41fa:	199e      	adds	r6, r3, r6
    41fc:	7833      	ldrb	r3, [r6, #0]
    41fe:	b2db      	uxtb	r3, r3
    4200:	2228      	movs	r2, #40	; 0x28
    4202:	54ab      	strb	r3, [r5, r2]
    4204:	e7ed      	b.n	41e2 <_i2c_master_write+0x12>
    4206:	46c0      	nop			; (mov r8, r8)
    4208:	0000413d 	.word	0x0000413d

0000420c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    420c:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    420e:	0080      	lsls	r0, r0, #2
    4210:	4b75      	ldr	r3, [pc, #468]	; (43e8 <_i2c_master_interrupt_handler+0x1dc>)
    4212:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4214:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    4216:	682b      	ldr	r3, [r5, #0]
    4218:	011b      	lsls	r3, r3, #4
    421a:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    421c:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    421e:	7e26      	ldrb	r6, [r4, #24]
    4220:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    4222:	8b63      	ldrh	r3, [r4, #26]
    4224:	b29b      	uxth	r3, r3
    4226:	2b00      	cmp	r3, #0
    4228:	d103      	bne.n	4232 <_i2c_master_interrupt_handler+0x26>
    422a:	8ba3      	ldrh	r3, [r4, #28]
    422c:	b29b      	uxth	r3, r3
    422e:	2b00      	cmp	r3, #0
    4230:	d123      	bne.n	427a <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4232:	8b63      	ldrh	r3, [r4, #26]
    4234:	b29b      	uxth	r3, r3
    4236:	2b00      	cmp	r3, #0
    4238:	d008      	beq.n	424c <_i2c_master_interrupt_handler+0x40>
    423a:	8ba3      	ldrh	r3, [r4, #28]
    423c:	b29b      	uxth	r3, r3
    423e:	2b00      	cmp	r3, #0
    4240:	d104      	bne.n	424c <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    4242:	3325      	adds	r3, #37	; 0x25
    4244:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4246:	2b05      	cmp	r3, #5
    4248:	d100      	bne.n	424c <_i2c_master_interrupt_handler+0x40>
    424a:	e06d      	b.n	4328 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    424c:	8b63      	ldrh	r3, [r4, #26]
    424e:	b29b      	uxth	r3, r3
    4250:	2b00      	cmp	r3, #0
    4252:	d024      	beq.n	429e <_i2c_master_interrupt_handler+0x92>
    4254:	8ba3      	ldrh	r3, [r4, #28]
    4256:	b29b      	uxth	r3, r3
    4258:	2b00      	cmp	r3, #0
    425a:	d020      	beq.n	429e <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    425c:	8b6b      	ldrh	r3, [r5, #26]
    425e:	069b      	lsls	r3, r3, #26
    4260:	d500      	bpl.n	4264 <_i2c_master_interrupt_handler+0x58>
    4262:	e081      	b.n	4368 <_i2c_master_interrupt_handler+0x15c>
    4264:	2a00      	cmp	r2, #0
    4266:	d004      	beq.n	4272 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    4268:	8ba3      	ldrh	r3, [r4, #28]
    426a:	b29b      	uxth	r3, r3
    426c:	2b01      	cmp	r3, #1
    426e:	d100      	bne.n	4272 <_i2c_master_interrupt_handler+0x66>
    4270:	e07a      	b.n	4368 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    4272:	2241      	movs	r2, #65	; 0x41
    4274:	2325      	movs	r3, #37	; 0x25
    4276:	54e2      	strb	r2, [r4, r3]
    4278:	e011      	b.n	429e <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    427a:	7e2b      	ldrb	r3, [r5, #24]
    427c:	07db      	lsls	r3, r3, #31
    427e:	d507      	bpl.n	4290 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    4280:	2301      	movs	r3, #1
    4282:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    4284:	8b6b      	ldrh	r3, [r5, #26]
    4286:	079b      	lsls	r3, r3, #30
    4288:	d52e      	bpl.n	42e8 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    428a:	2241      	movs	r2, #65	; 0x41
    428c:	2325      	movs	r3, #37	; 0x25
    428e:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    4290:	8ba3      	ldrh	r3, [r4, #28]
    4292:	b29b      	uxth	r3, r3
    4294:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    4296:	2325      	movs	r3, #37	; 0x25
    4298:	5ce3      	ldrb	r3, [r4, r3]
    429a:	2b05      	cmp	r3, #5
    429c:	d038      	beq.n	4310 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    429e:	8b63      	ldrh	r3, [r4, #26]
    42a0:	b29b      	uxth	r3, r3
    42a2:	2b00      	cmp	r3, #0
    42a4:	d007      	beq.n	42b6 <_i2c_master_interrupt_handler+0xaa>
    42a6:	8ba3      	ldrh	r3, [r4, #28]
    42a8:	b29b      	uxth	r3, r3
    42aa:	2b00      	cmp	r3, #0
    42ac:	d103      	bne.n	42b6 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    42ae:	3325      	adds	r3, #37	; 0x25
    42b0:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    42b2:	2b05      	cmp	r3, #5
    42b4:	d064      	beq.n	4380 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    42b6:	2325      	movs	r3, #37	; 0x25
    42b8:	5ce3      	ldrb	r3, [r4, r3]
    42ba:	2b05      	cmp	r3, #5
    42bc:	d013      	beq.n	42e6 <_i2c_master_interrupt_handler+0xda>
    42be:	2325      	movs	r3, #37	; 0x25
    42c0:	5ce3      	ldrb	r3, [r4, r3]
    42c2:	2b00      	cmp	r3, #0
    42c4:	d00f      	beq.n	42e6 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    42c6:	2303      	movs	r3, #3
    42c8:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    42ca:	2300      	movs	r3, #0
    42cc:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    42ce:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    42d0:	3325      	adds	r3, #37	; 0x25
    42d2:	5ce3      	ldrb	r3, [r4, r3]
    42d4:	2b41      	cmp	r3, #65	; 0x41
    42d6:	d003      	beq.n	42e0 <_i2c_master_interrupt_handler+0xd4>
    42d8:	7aa3      	ldrb	r3, [r4, #10]
    42da:	2b00      	cmp	r3, #0
    42dc:	d000      	beq.n	42e0 <_i2c_master_interrupt_handler+0xd4>
    42de:	e075      	b.n	43cc <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    42e0:	0773      	lsls	r3, r6, #29
    42e2:	d500      	bpl.n	42e6 <_i2c_master_interrupt_handler+0xda>
    42e4:	e07b      	b.n	43de <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    42e6:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    42e8:	8b6b      	ldrh	r3, [r5, #26]
    42ea:	075b      	lsls	r3, r3, #29
    42ec:	d5d0      	bpl.n	4290 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    42ee:	2218      	movs	r2, #24
    42f0:	2325      	movs	r3, #37	; 0x25
    42f2:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    42f4:	2300      	movs	r3, #0
    42f6:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    42f8:	7aa3      	ldrb	r3, [r4, #10]
    42fa:	2b00      	cmp	r3, #0
    42fc:	d0c8      	beq.n	4290 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    42fe:	0020      	movs	r0, r4
    4300:	4b3a      	ldr	r3, [pc, #232]	; (43ec <_i2c_master_interrupt_handler+0x1e0>)
    4302:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4304:	686a      	ldr	r2, [r5, #4]
    4306:	23c0      	movs	r3, #192	; 0xc0
    4308:	029b      	lsls	r3, r3, #10
    430a:	4313      	orrs	r3, r2
    430c:	606b      	str	r3, [r5, #4]
    430e:	e7bf      	b.n	4290 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4310:	331f      	adds	r3, #31
    4312:	5ce3      	ldrb	r3, [r4, r3]
    4314:	2b00      	cmp	r3, #0
    4316:	d003      	beq.n	4320 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    4318:	0020      	movs	r0, r4
    431a:	4b35      	ldr	r3, [pc, #212]	; (43f0 <_i2c_master_interrupt_handler+0x1e4>)
    431c:	4798      	blx	r3
    431e:	e7be      	b.n	429e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    4320:	0020      	movs	r0, r4
    4322:	4b34      	ldr	r3, [pc, #208]	; (43f4 <_i2c_master_interrupt_handler+0x1e8>)
    4324:	4798      	blx	r3
    4326:	e7ba      	b.n	429e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    4328:	331f      	adds	r3, #31
    432a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    432c:	2b00      	cmp	r3, #0
    432e:	d000      	beq.n	4332 <_i2c_master_interrupt_handler+0x126>
    4330:	e78c      	b.n	424c <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    4332:	3303      	adds	r3, #3
    4334:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    4336:	2300      	movs	r3, #0
    4338:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    433a:	3325      	adds	r3, #37	; 0x25
    433c:	2200      	movs	r2, #0
    433e:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    4340:	7aa3      	ldrb	r3, [r4, #10]
    4342:	2b00      	cmp	r3, #0
    4344:	d107      	bne.n	4356 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    4346:	2301      	movs	r3, #1
    4348:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    434a:	07f3      	lsls	r3, r6, #31
    434c:	d5a7      	bpl.n	429e <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    434e:	68e3      	ldr	r3, [r4, #12]
    4350:	0020      	movs	r0, r4
    4352:	4798      	blx	r3
    4354:	e7a3      	b.n	429e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    4356:	0020      	movs	r0, r4
    4358:	4b24      	ldr	r3, [pc, #144]	; (43ec <_i2c_master_interrupt_handler+0x1e0>)
    435a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    435c:	686a      	ldr	r2, [r5, #4]
    435e:	23c0      	movs	r3, #192	; 0xc0
    4360:	029b      	lsls	r3, r3, #10
    4362:	4313      	orrs	r3, r2
    4364:	606b      	str	r3, [r5, #4]
    4366:	e7f0      	b.n	434a <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4368:	2324      	movs	r3, #36	; 0x24
    436a:	5ce3      	ldrb	r3, [r4, r3]
    436c:	2b00      	cmp	r3, #0
    436e:	d103      	bne.n	4378 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    4370:	0020      	movs	r0, r4
    4372:	4b20      	ldr	r3, [pc, #128]	; (43f4 <_i2c_master_interrupt_handler+0x1e8>)
    4374:	4798      	blx	r3
    4376:	e792      	b.n	429e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    4378:	0020      	movs	r0, r4
    437a:	4b1d      	ldr	r3, [pc, #116]	; (43f0 <_i2c_master_interrupt_handler+0x1e4>)
    437c:	4798      	blx	r3
    437e:	e78e      	b.n	429e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    4380:	331f      	adds	r3, #31
    4382:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    4384:	2b01      	cmp	r3, #1
    4386:	d196      	bne.n	42b6 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    4388:	7e2b      	ldrb	r3, [r5, #24]
    438a:	079b      	lsls	r3, r3, #30
    438c:	d501      	bpl.n	4392 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    438e:	2302      	movs	r3, #2
    4390:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    4392:	2303      	movs	r3, #3
    4394:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    4396:	2300      	movs	r3, #0
    4398:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    439a:	3325      	adds	r3, #37	; 0x25
    439c:	2200      	movs	r2, #0
    439e:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    43a0:	07b3      	lsls	r3, r6, #30
    43a2:	d503      	bpl.n	43ac <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    43a4:	2324      	movs	r3, #36	; 0x24
    43a6:	5ce3      	ldrb	r3, [r4, r3]
    43a8:	2b01      	cmp	r3, #1
    43aa:	d00b      	beq.n	43c4 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    43ac:	07f3      	lsls	r3, r6, #31
    43ae:	d400      	bmi.n	43b2 <_i2c_master_interrupt_handler+0x1a6>
    43b0:	e781      	b.n	42b6 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    43b2:	2324      	movs	r3, #36	; 0x24
    43b4:	5ce3      	ldrb	r3, [r4, r3]
    43b6:	2b00      	cmp	r3, #0
    43b8:	d000      	beq.n	43bc <_i2c_master_interrupt_handler+0x1b0>
    43ba:	e77c      	b.n	42b6 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    43bc:	68e3      	ldr	r3, [r4, #12]
    43be:	0020      	movs	r0, r4
    43c0:	4798      	blx	r3
    43c2:	e778      	b.n	42b6 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    43c4:	6923      	ldr	r3, [r4, #16]
    43c6:	0020      	movs	r0, r4
    43c8:	4798      	blx	r3
    43ca:	e774      	b.n	42b6 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    43cc:	0020      	movs	r0, r4
    43ce:	4b07      	ldr	r3, [pc, #28]	; (43ec <_i2c_master_interrupt_handler+0x1e0>)
    43d0:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    43d2:	686a      	ldr	r2, [r5, #4]
    43d4:	23e0      	movs	r3, #224	; 0xe0
    43d6:	02db      	lsls	r3, r3, #11
    43d8:	4313      	orrs	r3, r2
    43da:	606b      	str	r3, [r5, #4]
    43dc:	e780      	b.n	42e0 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    43de:	6963      	ldr	r3, [r4, #20]
    43e0:	0020      	movs	r0, r4
    43e2:	4798      	blx	r3
}
    43e4:	e77f      	b.n	42e6 <_i2c_master_interrupt_handler+0xda>
    43e6:	46c0      	nop			; (mov r8, r8)
    43e8:	2000116c 	.word	0x2000116c
    43ec:	0000413d 	.word	0x0000413d
    43f0:	00004149 	.word	0x00004149
    43f4:	000041d1 	.word	0x000041d1

000043f8 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    43f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    43fa:	46de      	mov	lr, fp
    43fc:	4657      	mov	r7, sl
    43fe:	464e      	mov	r6, r9
    4400:	4645      	mov	r5, r8
    4402:	b5e0      	push	{r5, r6, r7, lr}
    4404:	b087      	sub	sp, #28
    4406:	4680      	mov	r8, r0
    4408:	9104      	str	r1, [sp, #16]
    440a:	0016      	movs	r6, r2
    440c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    440e:	2200      	movs	r2, #0
    4410:	2300      	movs	r3, #0
    4412:	2100      	movs	r1, #0
    4414:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    4416:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    4418:	2001      	movs	r0, #1
    441a:	0021      	movs	r1, r4
    441c:	9600      	str	r6, [sp, #0]
    441e:	9701      	str	r7, [sp, #4]
    4420:	465c      	mov	r4, fp
    4422:	9403      	str	r4, [sp, #12]
    4424:	4644      	mov	r4, r8
    4426:	9405      	str	r4, [sp, #20]
    4428:	e013      	b.n	4452 <long_division+0x5a>
    442a:	2420      	movs	r4, #32
    442c:	1a64      	subs	r4, r4, r1
    442e:	0005      	movs	r5, r0
    4430:	40e5      	lsrs	r5, r4
    4432:	46a8      	mov	r8, r5
    4434:	e014      	b.n	4460 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    4436:	9c00      	ldr	r4, [sp, #0]
    4438:	9d01      	ldr	r5, [sp, #4]
    443a:	1b12      	subs	r2, r2, r4
    443c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    443e:	465c      	mov	r4, fp
    4440:	464d      	mov	r5, r9
    4442:	432c      	orrs	r4, r5
    4444:	46a3      	mov	fp, r4
    4446:	9c03      	ldr	r4, [sp, #12]
    4448:	4645      	mov	r5, r8
    444a:	432c      	orrs	r4, r5
    444c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    444e:	3901      	subs	r1, #1
    4450:	d325      	bcc.n	449e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    4452:	2420      	movs	r4, #32
    4454:	4264      	negs	r4, r4
    4456:	190c      	adds	r4, r1, r4
    4458:	d4e7      	bmi.n	442a <long_division+0x32>
    445a:	0005      	movs	r5, r0
    445c:	40a5      	lsls	r5, r4
    445e:	46a8      	mov	r8, r5
    4460:	0004      	movs	r4, r0
    4462:	408c      	lsls	r4, r1
    4464:	46a1      	mov	r9, r4
		r = r << 1;
    4466:	1892      	adds	r2, r2, r2
    4468:	415b      	adcs	r3, r3
    446a:	0014      	movs	r4, r2
    446c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    446e:	9e05      	ldr	r6, [sp, #20]
    4470:	464f      	mov	r7, r9
    4472:	403e      	ands	r6, r7
    4474:	46b4      	mov	ip, r6
    4476:	9e04      	ldr	r6, [sp, #16]
    4478:	4647      	mov	r7, r8
    447a:	403e      	ands	r6, r7
    447c:	46b2      	mov	sl, r6
    447e:	4666      	mov	r6, ip
    4480:	4657      	mov	r7, sl
    4482:	433e      	orrs	r6, r7
    4484:	d003      	beq.n	448e <long_division+0x96>
			r |= 0x01;
    4486:	0006      	movs	r6, r0
    4488:	4326      	orrs	r6, r4
    448a:	0032      	movs	r2, r6
    448c:	002b      	movs	r3, r5
		if (r >= d) {
    448e:	9c00      	ldr	r4, [sp, #0]
    4490:	9d01      	ldr	r5, [sp, #4]
    4492:	429d      	cmp	r5, r3
    4494:	d8db      	bhi.n	444e <long_division+0x56>
    4496:	d1ce      	bne.n	4436 <long_division+0x3e>
    4498:	4294      	cmp	r4, r2
    449a:	d8d8      	bhi.n	444e <long_division+0x56>
    449c:	e7cb      	b.n	4436 <long_division+0x3e>
    449e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    44a0:	4658      	mov	r0, fp
    44a2:	0019      	movs	r1, r3
    44a4:	b007      	add	sp, #28
    44a6:	bc3c      	pop	{r2, r3, r4, r5}
    44a8:	4690      	mov	r8, r2
    44aa:	4699      	mov	r9, r3
    44ac:	46a2      	mov	sl, r4
    44ae:	46ab      	mov	fp, r5
    44b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000044b2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    44b2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    44b4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    44b6:	2340      	movs	r3, #64	; 0x40
    44b8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    44ba:	4281      	cmp	r1, r0
    44bc:	d202      	bcs.n	44c4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    44be:	0018      	movs	r0, r3
    44c0:	bd10      	pop	{r4, pc}
		baud_calculated++;
    44c2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    44c4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    44c6:	1c63      	adds	r3, r4, #1
    44c8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    44ca:	4288      	cmp	r0, r1
    44cc:	d9f9      	bls.n	44c2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    44ce:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    44d0:	2cff      	cmp	r4, #255	; 0xff
    44d2:	d8f4      	bhi.n	44be <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    44d4:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    44d6:	2300      	movs	r3, #0
    44d8:	e7f1      	b.n	44be <_sercom_get_sync_baud_val+0xc>
	...

000044dc <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    44dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    44de:	b083      	sub	sp, #12
    44e0:	000f      	movs	r7, r1
    44e2:	0016      	movs	r6, r2
    44e4:	aa08      	add	r2, sp, #32
    44e6:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    44e8:	0004      	movs	r4, r0
    44ea:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    44ec:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    44ee:	42bc      	cmp	r4, r7
    44f0:	d902      	bls.n	44f8 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    44f2:	0010      	movs	r0, r2
    44f4:	b003      	add	sp, #12
    44f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    44f8:	2b00      	cmp	r3, #0
    44fa:	d114      	bne.n	4526 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    44fc:	0002      	movs	r2, r0
    44fe:	0008      	movs	r0, r1
    4500:	2100      	movs	r1, #0
    4502:	4c19      	ldr	r4, [pc, #100]	; (4568 <_sercom_get_async_baud_val+0x8c>)
    4504:	47a0      	blx	r4
    4506:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    4508:	003a      	movs	r2, r7
    450a:	2300      	movs	r3, #0
    450c:	2000      	movs	r0, #0
    450e:	4c17      	ldr	r4, [pc, #92]	; (456c <_sercom_get_async_baud_val+0x90>)
    4510:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    4512:	2200      	movs	r2, #0
    4514:	2301      	movs	r3, #1
    4516:	1a12      	subs	r2, r2, r0
    4518:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    451a:	0c12      	lsrs	r2, r2, #16
    451c:	041b      	lsls	r3, r3, #16
    451e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    4520:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    4522:	2200      	movs	r2, #0
    4524:	e7e5      	b.n	44f2 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    4526:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    4528:	2b01      	cmp	r3, #1
    452a:	d1f9      	bne.n	4520 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    452c:	000a      	movs	r2, r1
    452e:	2300      	movs	r3, #0
    4530:	2100      	movs	r1, #0
    4532:	4c0d      	ldr	r4, [pc, #52]	; (4568 <_sercom_get_async_baud_val+0x8c>)
    4534:	47a0      	blx	r4
    4536:	0002      	movs	r2, r0
    4538:	000b      	movs	r3, r1
    453a:	9200      	str	r2, [sp, #0]
    453c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    453e:	0038      	movs	r0, r7
    4540:	2100      	movs	r1, #0
    4542:	4c0a      	ldr	r4, [pc, #40]	; (456c <_sercom_get_async_baud_val+0x90>)
    4544:	47a0      	blx	r4
    4546:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    4548:	2380      	movs	r3, #128	; 0x80
    454a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    454c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    454e:	4298      	cmp	r0, r3
    4550:	d8cf      	bhi.n	44f2 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    4552:	0f79      	lsrs	r1, r7, #29
    4554:	00f8      	lsls	r0, r7, #3
    4556:	9a00      	ldr	r2, [sp, #0]
    4558:	9b01      	ldr	r3, [sp, #4]
    455a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    455c:	00ea      	lsls	r2, r5, #3
    455e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    4560:	b2d2      	uxtb	r2, r2
    4562:	0352      	lsls	r2, r2, #13
    4564:	432a      	orrs	r2, r5
    4566:	e7db      	b.n	4520 <_sercom_get_async_baud_val+0x44>
    4568:	00014f11 	.word	0x00014f11
    456c:	000043f9 	.word	0x000043f9

00004570 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4570:	b510      	push	{r4, lr}
    4572:	b082      	sub	sp, #8
    4574:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4576:	4b0e      	ldr	r3, [pc, #56]	; (45b0 <sercom_set_gclk_generator+0x40>)
    4578:	781b      	ldrb	r3, [r3, #0]
    457a:	2b00      	cmp	r3, #0
    457c:	d007      	beq.n	458e <sercom_set_gclk_generator+0x1e>
    457e:	2900      	cmp	r1, #0
    4580:	d105      	bne.n	458e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    4582:	4b0b      	ldr	r3, [pc, #44]	; (45b0 <sercom_set_gclk_generator+0x40>)
    4584:	785b      	ldrb	r3, [r3, #1]
    4586:	4283      	cmp	r3, r0
    4588:	d010      	beq.n	45ac <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    458a:	201d      	movs	r0, #29
    458c:	e00c      	b.n	45a8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    458e:	a901      	add	r1, sp, #4
    4590:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4592:	2011      	movs	r0, #17
    4594:	4b07      	ldr	r3, [pc, #28]	; (45b4 <sercom_set_gclk_generator+0x44>)
    4596:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4598:	2011      	movs	r0, #17
    459a:	4b07      	ldr	r3, [pc, #28]	; (45b8 <sercom_set_gclk_generator+0x48>)
    459c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    459e:	4b04      	ldr	r3, [pc, #16]	; (45b0 <sercom_set_gclk_generator+0x40>)
    45a0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    45a2:	2201      	movs	r2, #1
    45a4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    45a6:	2000      	movs	r0, #0
}
    45a8:	b002      	add	sp, #8
    45aa:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    45ac:	2000      	movs	r0, #0
    45ae:	e7fb      	b.n	45a8 <sercom_set_gclk_generator+0x38>
    45b0:	20000ac8 	.word	0x20000ac8
    45b4:	0000596d 	.word	0x0000596d
    45b8:	000058fd 	.word	0x000058fd

000045bc <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    45bc:	4b3c      	ldr	r3, [pc, #240]	; (46b0 <_sercom_get_default_pad+0xf4>)
    45be:	4298      	cmp	r0, r3
    45c0:	d032      	beq.n	4628 <_sercom_get_default_pad+0x6c>
    45c2:	d90a      	bls.n	45da <_sercom_get_default_pad+0x1e>
    45c4:	4b3b      	ldr	r3, [pc, #236]	; (46b4 <_sercom_get_default_pad+0xf8>)
    45c6:	4298      	cmp	r0, r3
    45c8:	d04e      	beq.n	4668 <_sercom_get_default_pad+0xac>
    45ca:	4b3b      	ldr	r3, [pc, #236]	; (46b8 <_sercom_get_default_pad+0xfc>)
    45cc:	4298      	cmp	r0, r3
    45ce:	d055      	beq.n	467c <_sercom_get_default_pad+0xc0>
    45d0:	4b3a      	ldr	r3, [pc, #232]	; (46bc <_sercom_get_default_pad+0x100>)
    45d2:	4298      	cmp	r0, r3
    45d4:	d038      	beq.n	4648 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    45d6:	2000      	movs	r0, #0
}
    45d8:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    45da:	2384      	movs	r3, #132	; 0x84
    45dc:	05db      	lsls	r3, r3, #23
    45de:	4298      	cmp	r0, r3
    45e0:	d00c      	beq.n	45fc <_sercom_get_default_pad+0x40>
    45e2:	4b37      	ldr	r3, [pc, #220]	; (46c0 <_sercom_get_default_pad+0x104>)
    45e4:	4298      	cmp	r0, r3
    45e6:	d1f6      	bne.n	45d6 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    45e8:	2901      	cmp	r1, #1
    45ea:	d017      	beq.n	461c <_sercom_get_default_pad+0x60>
    45ec:	2900      	cmp	r1, #0
    45ee:	d057      	beq.n	46a0 <_sercom_get_default_pad+0xe4>
    45f0:	2902      	cmp	r1, #2
    45f2:	d015      	beq.n	4620 <_sercom_get_default_pad+0x64>
    45f4:	2903      	cmp	r1, #3
    45f6:	d015      	beq.n	4624 <_sercom_get_default_pad+0x68>
	return 0;
    45f8:	2000      	movs	r0, #0
    45fa:	e7ed      	b.n	45d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    45fc:	2901      	cmp	r1, #1
    45fe:	d007      	beq.n	4610 <_sercom_get_default_pad+0x54>
    4600:	2900      	cmp	r1, #0
    4602:	d04b      	beq.n	469c <_sercom_get_default_pad+0xe0>
    4604:	2902      	cmp	r1, #2
    4606:	d005      	beq.n	4614 <_sercom_get_default_pad+0x58>
    4608:	2903      	cmp	r1, #3
    460a:	d005      	beq.n	4618 <_sercom_get_default_pad+0x5c>
	return 0;
    460c:	2000      	movs	r0, #0
    460e:	e7e3      	b.n	45d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4610:	482c      	ldr	r0, [pc, #176]	; (46c4 <_sercom_get_default_pad+0x108>)
    4612:	e7e1      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4614:	482c      	ldr	r0, [pc, #176]	; (46c8 <_sercom_get_default_pad+0x10c>)
    4616:	e7df      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4618:	482c      	ldr	r0, [pc, #176]	; (46cc <_sercom_get_default_pad+0x110>)
    461a:	e7dd      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    461c:	482c      	ldr	r0, [pc, #176]	; (46d0 <_sercom_get_default_pad+0x114>)
    461e:	e7db      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4620:	482c      	ldr	r0, [pc, #176]	; (46d4 <_sercom_get_default_pad+0x118>)
    4622:	e7d9      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4624:	482c      	ldr	r0, [pc, #176]	; (46d8 <_sercom_get_default_pad+0x11c>)
    4626:	e7d7      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4628:	2901      	cmp	r1, #1
    462a:	d007      	beq.n	463c <_sercom_get_default_pad+0x80>
    462c:	2900      	cmp	r1, #0
    462e:	d039      	beq.n	46a4 <_sercom_get_default_pad+0xe8>
    4630:	2902      	cmp	r1, #2
    4632:	d005      	beq.n	4640 <_sercom_get_default_pad+0x84>
    4634:	2903      	cmp	r1, #3
    4636:	d005      	beq.n	4644 <_sercom_get_default_pad+0x88>
	return 0;
    4638:	2000      	movs	r0, #0
    463a:	e7cd      	b.n	45d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    463c:	4827      	ldr	r0, [pc, #156]	; (46dc <_sercom_get_default_pad+0x120>)
    463e:	e7cb      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4640:	4827      	ldr	r0, [pc, #156]	; (46e0 <_sercom_get_default_pad+0x124>)
    4642:	e7c9      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4644:	4827      	ldr	r0, [pc, #156]	; (46e4 <_sercom_get_default_pad+0x128>)
    4646:	e7c7      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4648:	2901      	cmp	r1, #1
    464a:	d007      	beq.n	465c <_sercom_get_default_pad+0xa0>
    464c:	2900      	cmp	r1, #0
    464e:	d02b      	beq.n	46a8 <_sercom_get_default_pad+0xec>
    4650:	2902      	cmp	r1, #2
    4652:	d005      	beq.n	4660 <_sercom_get_default_pad+0xa4>
    4654:	2903      	cmp	r1, #3
    4656:	d005      	beq.n	4664 <_sercom_get_default_pad+0xa8>
	return 0;
    4658:	2000      	movs	r0, #0
    465a:	e7bd      	b.n	45d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    465c:	4822      	ldr	r0, [pc, #136]	; (46e8 <_sercom_get_default_pad+0x12c>)
    465e:	e7bb      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4660:	4822      	ldr	r0, [pc, #136]	; (46ec <_sercom_get_default_pad+0x130>)
    4662:	e7b9      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4664:	4822      	ldr	r0, [pc, #136]	; (46f0 <_sercom_get_default_pad+0x134>)
    4666:	e7b7      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4668:	2902      	cmp	r1, #2
    466a:	d003      	beq.n	4674 <_sercom_get_default_pad+0xb8>
    466c:	2903      	cmp	r1, #3
    466e:	d003      	beq.n	4678 <_sercom_get_default_pad+0xbc>
    4670:	2000      	movs	r0, #0
    4672:	e7b1      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4674:	481f      	ldr	r0, [pc, #124]	; (46f4 <_sercom_get_default_pad+0x138>)
    4676:	e7af      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4678:	481f      	ldr	r0, [pc, #124]	; (46f8 <_sercom_get_default_pad+0x13c>)
    467a:	e7ad      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    467c:	2901      	cmp	r1, #1
    467e:	d007      	beq.n	4690 <_sercom_get_default_pad+0xd4>
    4680:	2900      	cmp	r1, #0
    4682:	d013      	beq.n	46ac <_sercom_get_default_pad+0xf0>
    4684:	2902      	cmp	r1, #2
    4686:	d005      	beq.n	4694 <_sercom_get_default_pad+0xd8>
    4688:	2903      	cmp	r1, #3
    468a:	d005      	beq.n	4698 <_sercom_get_default_pad+0xdc>
	return 0;
    468c:	2000      	movs	r0, #0
    468e:	e7a3      	b.n	45d8 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4690:	481a      	ldr	r0, [pc, #104]	; (46fc <_sercom_get_default_pad+0x140>)
    4692:	e7a1      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4694:	481a      	ldr	r0, [pc, #104]	; (4700 <_sercom_get_default_pad+0x144>)
    4696:	e79f      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    4698:	481a      	ldr	r0, [pc, #104]	; (4704 <_sercom_get_default_pad+0x148>)
    469a:	e79d      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    469c:	481a      	ldr	r0, [pc, #104]	; (4708 <_sercom_get_default_pad+0x14c>)
    469e:	e79b      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    46a0:	2003      	movs	r0, #3
    46a2:	e799      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    46a4:	4819      	ldr	r0, [pc, #100]	; (470c <_sercom_get_default_pad+0x150>)
    46a6:	e797      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    46a8:	4819      	ldr	r0, [pc, #100]	; (4710 <_sercom_get_default_pad+0x154>)
    46aa:	e795      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    46ac:	4819      	ldr	r0, [pc, #100]	; (4714 <_sercom_get_default_pad+0x158>)
    46ae:	e793      	b.n	45d8 <_sercom_get_default_pad+0x1c>
    46b0:	42000800 	.word	0x42000800
    46b4:	42001000 	.word	0x42001000
    46b8:	43000400 	.word	0x43000400
    46bc:	42000c00 	.word	0x42000c00
    46c0:	42000400 	.word	0x42000400
    46c4:	00050003 	.word	0x00050003
    46c8:	00060003 	.word	0x00060003
    46cc:	00070003 	.word	0x00070003
    46d0:	00010003 	.word	0x00010003
    46d4:	001e0003 	.word	0x001e0003
    46d8:	001f0003 	.word	0x001f0003
    46dc:	00090003 	.word	0x00090003
    46e0:	000a0003 	.word	0x000a0003
    46e4:	000b0003 	.word	0x000b0003
    46e8:	00110003 	.word	0x00110003
    46ec:	00120003 	.word	0x00120003
    46f0:	00130003 	.word	0x00130003
    46f4:	000e0003 	.word	0x000e0003
    46f8:	000f0003 	.word	0x000f0003
    46fc:	00170003 	.word	0x00170003
    4700:	00180003 	.word	0x00180003
    4704:	00190003 	.word	0x00190003
    4708:	00040003 	.word	0x00040003
    470c:	00080003 	.word	0x00080003
    4710:	00100003 	.word	0x00100003
    4714:	00160003 	.word	0x00160003

00004718 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4718:	b530      	push	{r4, r5, lr}
    471a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    471c:	4b0b      	ldr	r3, [pc, #44]	; (474c <_sercom_get_sercom_inst_index+0x34>)
    471e:	466a      	mov	r2, sp
    4720:	cb32      	ldmia	r3!, {r1, r4, r5}
    4722:	c232      	stmia	r2!, {r1, r4, r5}
    4724:	cb32      	ldmia	r3!, {r1, r4, r5}
    4726:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4728:	9b00      	ldr	r3, [sp, #0]
    472a:	4283      	cmp	r3, r0
    472c:	d00b      	beq.n	4746 <_sercom_get_sercom_inst_index+0x2e>
    472e:	2301      	movs	r3, #1
    4730:	009a      	lsls	r2, r3, #2
    4732:	4669      	mov	r1, sp
    4734:	5852      	ldr	r2, [r2, r1]
    4736:	4282      	cmp	r2, r0
    4738:	d006      	beq.n	4748 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    473a:	3301      	adds	r3, #1
    473c:	2b06      	cmp	r3, #6
    473e:	d1f7      	bne.n	4730 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4740:	2000      	movs	r0, #0
}
    4742:	b007      	add	sp, #28
    4744:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4746:	2300      	movs	r3, #0
			return i;
    4748:	b2d8      	uxtb	r0, r3
    474a:	e7fa      	b.n	4742 <_sercom_get_sercom_inst_index+0x2a>
    474c:	0001de90 	.word	0x0001de90

00004750 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    4750:	4770      	bx	lr
	...

00004754 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4754:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4756:	4b0a      	ldr	r3, [pc, #40]	; (4780 <_sercom_set_handler+0x2c>)
    4758:	781b      	ldrb	r3, [r3, #0]
    475a:	2b00      	cmp	r3, #0
    475c:	d10c      	bne.n	4778 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    475e:	4f09      	ldr	r7, [pc, #36]	; (4784 <_sercom_set_handler+0x30>)
    4760:	4e09      	ldr	r6, [pc, #36]	; (4788 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    4762:	4d0a      	ldr	r5, [pc, #40]	; (478c <_sercom_set_handler+0x38>)
    4764:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4766:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    4768:	195a      	adds	r2, r3, r5
    476a:	6014      	str	r4, [r2, #0]
    476c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    476e:	2b18      	cmp	r3, #24
    4770:	d1f9      	bne.n	4766 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    4772:	2201      	movs	r2, #1
    4774:	4b02      	ldr	r3, [pc, #8]	; (4780 <_sercom_set_handler+0x2c>)
    4776:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4778:	0080      	lsls	r0, r0, #2
    477a:	4b02      	ldr	r3, [pc, #8]	; (4784 <_sercom_set_handler+0x30>)
    477c:	50c1      	str	r1, [r0, r3]
}
    477e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4780:	20000aca 	.word	0x20000aca
    4784:	20000acc 	.word	0x20000acc
    4788:	00004751 	.word	0x00004751
    478c:	2000116c 	.word	0x2000116c

00004790 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4790:	b500      	push	{lr}
    4792:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4794:	2308      	movs	r3, #8
    4796:	466a      	mov	r2, sp
    4798:	7013      	strb	r3, [r2, #0]
    479a:	3301      	adds	r3, #1
    479c:	7053      	strb	r3, [r2, #1]
    479e:	3301      	adds	r3, #1
    47a0:	7093      	strb	r3, [r2, #2]
    47a2:	3301      	adds	r3, #1
    47a4:	70d3      	strb	r3, [r2, #3]
    47a6:	3301      	adds	r3, #1
    47a8:	7113      	strb	r3, [r2, #4]
    47aa:	3301      	adds	r3, #1
    47ac:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    47ae:	4b03      	ldr	r3, [pc, #12]	; (47bc <_sercom_get_interrupt_vector+0x2c>)
    47b0:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    47b2:	466b      	mov	r3, sp
    47b4:	5618      	ldrsb	r0, [r3, r0]
}
    47b6:	b003      	add	sp, #12
    47b8:	bd00      	pop	{pc}
    47ba:	46c0      	nop			; (mov r8, r8)
    47bc:	00004719 	.word	0x00004719

000047c0 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    47c0:	b510      	push	{r4, lr}
    47c2:	4b02      	ldr	r3, [pc, #8]	; (47cc <SERCOM0_Handler+0xc>)
    47c4:	681b      	ldr	r3, [r3, #0]
    47c6:	2000      	movs	r0, #0
    47c8:	4798      	blx	r3
    47ca:	bd10      	pop	{r4, pc}
    47cc:	20000acc 	.word	0x20000acc

000047d0 <SERCOM1_Handler>:
    47d0:	b510      	push	{r4, lr}
    47d2:	4b02      	ldr	r3, [pc, #8]	; (47dc <SERCOM1_Handler+0xc>)
    47d4:	685b      	ldr	r3, [r3, #4]
    47d6:	2001      	movs	r0, #1
    47d8:	4798      	blx	r3
    47da:	bd10      	pop	{r4, pc}
    47dc:	20000acc 	.word	0x20000acc

000047e0 <SERCOM2_Handler>:
    47e0:	b510      	push	{r4, lr}
    47e2:	4b02      	ldr	r3, [pc, #8]	; (47ec <SERCOM2_Handler+0xc>)
    47e4:	689b      	ldr	r3, [r3, #8]
    47e6:	2002      	movs	r0, #2
    47e8:	4798      	blx	r3
    47ea:	bd10      	pop	{r4, pc}
    47ec:	20000acc 	.word	0x20000acc

000047f0 <SERCOM3_Handler>:
    47f0:	b510      	push	{r4, lr}
    47f2:	4b02      	ldr	r3, [pc, #8]	; (47fc <SERCOM3_Handler+0xc>)
    47f4:	68db      	ldr	r3, [r3, #12]
    47f6:	2003      	movs	r0, #3
    47f8:	4798      	blx	r3
    47fa:	bd10      	pop	{r4, pc}
    47fc:	20000acc 	.word	0x20000acc

00004800 <SERCOM4_Handler>:
    4800:	b510      	push	{r4, lr}
    4802:	4b02      	ldr	r3, [pc, #8]	; (480c <SERCOM4_Handler+0xc>)
    4804:	691b      	ldr	r3, [r3, #16]
    4806:	2004      	movs	r0, #4
    4808:	4798      	blx	r3
    480a:	bd10      	pop	{r4, pc}
    480c:	20000acc 	.word	0x20000acc

00004810 <SERCOM5_Handler>:
    4810:	b510      	push	{r4, lr}
    4812:	4b02      	ldr	r3, [pc, #8]	; (481c <SERCOM5_Handler+0xc>)
    4814:	695b      	ldr	r3, [r3, #20]
    4816:	2005      	movs	r0, #5
    4818:	4798      	blx	r3
    481a:	bd10      	pop	{r4, pc}
    481c:	20000acc 	.word	0x20000acc

00004820 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    4820:	b5f0      	push	{r4, r5, r6, r7, lr}
    4822:	46d6      	mov	lr, sl
    4824:	464f      	mov	r7, r9
    4826:	4646      	mov	r6, r8
    4828:	b5c0      	push	{r6, r7, lr}
    482a:	b08a      	sub	sp, #40	; 0x28
    482c:	0006      	movs	r6, r0
    482e:	000f      	movs	r7, r1
    4830:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4832:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    4834:	680b      	ldr	r3, [r1, #0]
    4836:	079b      	lsls	r3, r3, #30
    4838:	d40a      	bmi.n	4850 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    483a:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    483c:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    483e:	07db      	lsls	r3, r3, #31
    4840:	d400      	bmi.n	4844 <spi_init+0x24>
    4842:	e097      	b.n	4974 <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    4844:	b00a      	add	sp, #40	; 0x28
    4846:	bc1c      	pop	{r2, r3, r4}
    4848:	4690      	mov	r8, r2
    484a:	4699      	mov	r9, r3
    484c:	46a2      	mov	sl, r4
    484e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    4850:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4852:	9305      	str	r3, [sp, #20]
    4854:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4856:	9306      	str	r3, [sp, #24]
    4858:	6b13      	ldr	r3, [r2, #48]	; 0x30
    485a:	9307      	str	r3, [sp, #28]
    485c:	6b53      	ldr	r3, [r2, #52]	; 0x34
    485e:	9308      	str	r3, [sp, #32]
    4860:	2500      	movs	r5, #0
    4862:	e00a      	b.n	487a <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4864:	0038      	movs	r0, r7
    4866:	4b9a      	ldr	r3, [pc, #616]	; (4ad0 <spi_init+0x2b0>)
    4868:	4798      	blx	r3
    486a:	e00e      	b.n	488a <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    486c:	230f      	movs	r3, #15
    486e:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    4870:	4581      	cmp	r9, r0
    4872:	d130      	bne.n	48d6 <spi_init+0xb6>
    4874:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4876:	2d04      	cmp	r5, #4
    4878:	d031      	beq.n	48de <spi_init+0xbe>
    487a:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    487c:	00ab      	lsls	r3, r5, #2
    487e:	aa02      	add	r2, sp, #8
    4880:	200c      	movs	r0, #12
    4882:	1812      	adds	r2, r2, r0
    4884:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    4886:	2800      	cmp	r0, #0
    4888:	d0ec      	beq.n	4864 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    488a:	1c43      	adds	r3, r0, #1
    488c:	d0f2      	beq.n	4874 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    488e:	0401      	lsls	r1, r0, #16
    4890:	0c0b      	lsrs	r3, r1, #16
    4892:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    4894:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    4896:	b2c3      	uxtb	r3, r0
    4898:	469c      	mov	ip, r3
		return NULL;
    489a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    489c:	0602      	lsls	r2, r0, #24
    489e:	d405      	bmi.n	48ac <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    48a0:	4663      	mov	r3, ip
    48a2:	095b      	lsrs	r3, r3, #5
    48a4:	01db      	lsls	r3, r3, #7
    48a6:	4a8b      	ldr	r2, [pc, #556]	; (4ad4 <spi_init+0x2b4>)
    48a8:	4690      	mov	r8, r2
    48aa:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    48ac:	221f      	movs	r2, #31
    48ae:	4660      	mov	r0, ip
    48b0:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    48b2:	1898      	adds	r0, r3, r2
    48b4:	3040      	adds	r0, #64	; 0x40
    48b6:	7800      	ldrb	r0, [r0, #0]
    48b8:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    48ba:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    48bc:	4651      	mov	r1, sl
    48be:	07c9      	lsls	r1, r1, #31
    48c0:	d5d6      	bpl.n	4870 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    48c2:	0852      	lsrs	r2, r2, #1
    48c4:	189b      	adds	r3, r3, r2
    48c6:	3330      	adds	r3, #48	; 0x30
    48c8:	7818      	ldrb	r0, [r3, #0]
    48ca:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    48cc:	4663      	mov	r3, ip
    48ce:	07db      	lsls	r3, r3, #31
    48d0:	d5cc      	bpl.n	486c <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    48d2:	0900      	lsrs	r0, r0, #4
    48d4:	e7cc      	b.n	4870 <spi_init+0x50>
			module->hw = NULL;
    48d6:	2300      	movs	r3, #0
    48d8:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    48da:	201c      	movs	r0, #28
    48dc:	e7b2      	b.n	4844 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    48de:	2011      	movs	r0, #17
    48e0:	4b7d      	ldr	r3, [pc, #500]	; (4ad8 <spi_init+0x2b8>)
    48e2:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    48e4:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    48e6:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    48e8:	2a01      	cmp	r2, #1
    48ea:	d026      	beq.n	493a <spi_init+0x11a>
	ctrla |= config->mux_setting;
    48ec:	6863      	ldr	r3, [r4, #4]
    48ee:	68a2      	ldr	r2, [r4, #8]
    48f0:	4313      	orrs	r3, r2
    48f2:	68e2      	ldr	r2, [r4, #12]
    48f4:	4313      	orrs	r3, r2
    48f6:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    48f8:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    48fa:	7c61      	ldrb	r1, [r4, #17]
    48fc:	2900      	cmp	r1, #0
    48fe:	d001      	beq.n	4904 <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4900:	2180      	movs	r1, #128	; 0x80
    4902:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    4904:	7ca1      	ldrb	r1, [r4, #18]
    4906:	2900      	cmp	r1, #0
    4908:	d002      	beq.n	4910 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    490a:	2180      	movs	r1, #128	; 0x80
    490c:	0289      	lsls	r1, r1, #10
    490e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    4910:	7ce1      	ldrb	r1, [r4, #19]
    4912:	2900      	cmp	r1, #0
    4914:	d002      	beq.n	491c <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4916:	2180      	movs	r1, #128	; 0x80
    4918:	0089      	lsls	r1, r1, #2
    491a:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    491c:	7d21      	ldrb	r1, [r4, #20]
    491e:	2900      	cmp	r1, #0
    4920:	d002      	beq.n	4928 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4922:	2180      	movs	r1, #128	; 0x80
    4924:	0189      	lsls	r1, r1, #6
    4926:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    4928:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    492a:	2002      	movs	r0, #2
    492c:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    492e:	428b      	cmp	r3, r1
    4930:	d017      	beq.n	4962 <spi_init+0x142>
	module->hw = NULL;
    4932:	2300      	movs	r3, #0
    4934:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    4936:	201c      	movs	r0, #28
    4938:	e784      	b.n	4844 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    493a:	aa04      	add	r2, sp, #16
    493c:	0001      	movs	r1, r0
    493e:	69a0      	ldr	r0, [r4, #24]
    4940:	4b66      	ldr	r3, [pc, #408]	; (4adc <spi_init+0x2bc>)
    4942:	4798      	blx	r3
    4944:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4946:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4948:	2b00      	cmp	r3, #0
    494a:	d000      	beq.n	494e <spi_init+0x12e>
    494c:	e77a      	b.n	4844 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    494e:	7b3b      	ldrb	r3, [r7, #12]
    4950:	b2db      	uxtb	r3, r3
    4952:	aa04      	add	r2, sp, #16
    4954:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    4956:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    4958:	429a      	cmp	r2, r3
    495a:	d000      	beq.n	495e <spi_init+0x13e>
    495c:	e772      	b.n	4844 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    495e:	350c      	adds	r5, #12
    4960:	e7c4      	b.n	48ec <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    4962:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    4964:	4293      	cmp	r3, r2
    4966:	d1e4      	bne.n	4932 <spi_init+0x112>
		module->mode           = config->mode;
    4968:	7823      	ldrb	r3, [r4, #0]
    496a:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    496c:	7c23      	ldrb	r3, [r4, #16]
    496e:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    4970:	2000      	movs	r0, #0
    4972:	e767      	b.n	4844 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4974:	0008      	movs	r0, r1
    4976:	4b5a      	ldr	r3, [pc, #360]	; (4ae0 <spi_init+0x2c0>)
    4978:	4798      	blx	r3
	if (sercom_index == 5) {
    497a:	2805      	cmp	r0, #5
    497c:	d100      	bne.n	4980 <spi_init+0x160>
    497e:	e09f      	b.n	4ac0 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4980:	0003      	movs	r3, r0
    4982:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    4984:	4957      	ldr	r1, [pc, #348]	; (4ae4 <spi_init+0x2c4>)
    4986:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4988:	2201      	movs	r2, #1
    498a:	4082      	lsls	r2, r0
    498c:	432a      	orrs	r2, r5
    498e:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    4990:	a909      	add	r1, sp, #36	; 0x24
    4992:	2524      	movs	r5, #36	; 0x24
    4994:	5d62      	ldrb	r2, [r4, r5]
    4996:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4998:	b2db      	uxtb	r3, r3
    499a:	9301      	str	r3, [sp, #4]
    499c:	0018      	movs	r0, r3
    499e:	4b52      	ldr	r3, [pc, #328]	; (4ae8 <spi_init+0x2c8>)
    49a0:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    49a2:	9801      	ldr	r0, [sp, #4]
    49a4:	4b51      	ldr	r3, [pc, #324]	; (4aec <spi_init+0x2cc>)
    49a6:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    49a8:	5d60      	ldrb	r0, [r4, r5]
    49aa:	2100      	movs	r1, #0
    49ac:	4b50      	ldr	r3, [pc, #320]	; (4af0 <spi_init+0x2d0>)
    49ae:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    49b0:	7823      	ldrb	r3, [r4, #0]
    49b2:	2b01      	cmp	r3, #1
    49b4:	d019      	beq.n	49ea <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    49b6:	6833      	ldr	r3, [r6, #0]
    49b8:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    49ba:	ab04      	add	r3, sp, #16
    49bc:	2280      	movs	r2, #128	; 0x80
    49be:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    49c0:	2200      	movs	r2, #0
    49c2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    49c4:	2101      	movs	r1, #1
    49c6:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    49c8:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    49ca:	7823      	ldrb	r3, [r4, #0]
    49cc:	2b00      	cmp	r3, #0
    49ce:	d101      	bne.n	49d4 <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    49d0:	ab04      	add	r3, sp, #16
    49d2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    49d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    49d6:	9305      	str	r3, [sp, #20]
    49d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    49da:	9306      	str	r3, [sp, #24]
    49dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    49de:	9307      	str	r3, [sp, #28]
    49e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    49e2:	9308      	str	r3, [sp, #32]
    49e4:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    49e6:	ad05      	add	r5, sp, #20
    49e8:	e011      	b.n	4a0e <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    49ea:	683b      	ldr	r3, [r7, #0]
    49ec:	220c      	movs	r2, #12
    49ee:	4313      	orrs	r3, r2
    49f0:	603b      	str	r3, [r7, #0]
    49f2:	e7e0      	b.n	49b6 <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    49f4:	4640      	mov	r0, r8
    49f6:	4b36      	ldr	r3, [pc, #216]	; (4ad0 <spi_init+0x2b0>)
    49f8:	4798      	blx	r3
    49fa:	e00d      	b.n	4a18 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    49fc:	a904      	add	r1, sp, #16
    49fe:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4a00:	0c00      	lsrs	r0, r0, #16
    4a02:	b2c0      	uxtb	r0, r0
    4a04:	4b3b      	ldr	r3, [pc, #236]	; (4af4 <spi_init+0x2d4>)
    4a06:	4798      	blx	r3
    4a08:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4a0a:	2f04      	cmp	r7, #4
    4a0c:	d007      	beq.n	4a1e <spi_init+0x1fe>
    4a0e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4a10:	00bb      	lsls	r3, r7, #2
    4a12:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    4a14:	2800      	cmp	r0, #0
    4a16:	d0ed      	beq.n	49f4 <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    4a18:	1c43      	adds	r3, r0, #1
    4a1a:	d1ef      	bne.n	49fc <spi_init+0x1dc>
    4a1c:	e7f4      	b.n	4a08 <spi_init+0x1e8>
	module->mode             = config->mode;
    4a1e:	7823      	ldrb	r3, [r4, #0]
    4a20:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    4a22:	7c23      	ldrb	r3, [r4, #16]
    4a24:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    4a26:	7ca3      	ldrb	r3, [r4, #18]
    4a28:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    4a2a:	7d23      	ldrb	r3, [r4, #20]
    4a2c:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    4a2e:	2200      	movs	r2, #0
    4a30:	ab02      	add	r3, sp, #8
    4a32:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    4a34:	7823      	ldrb	r3, [r4, #0]
    4a36:	2b01      	cmp	r3, #1
    4a38:	d02a      	beq.n	4a90 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    4a3a:	6863      	ldr	r3, [r4, #4]
    4a3c:	68a2      	ldr	r2, [r4, #8]
    4a3e:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    4a40:	68e2      	ldr	r2, [r4, #12]
    4a42:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    4a44:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    4a46:	7c62      	ldrb	r2, [r4, #17]
    4a48:	2a00      	cmp	r2, #0
    4a4a:	d103      	bne.n	4a54 <spi_init+0x234>
    4a4c:	4a2a      	ldr	r2, [pc, #168]	; (4af8 <spi_init+0x2d8>)
    4a4e:	7892      	ldrb	r2, [r2, #2]
    4a50:	0792      	lsls	r2, r2, #30
    4a52:	d501      	bpl.n	4a58 <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4a54:	2280      	movs	r2, #128	; 0x80
    4a56:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    4a58:	7ca2      	ldrb	r2, [r4, #18]
    4a5a:	2a00      	cmp	r2, #0
    4a5c:	d002      	beq.n	4a64 <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4a5e:	2280      	movs	r2, #128	; 0x80
    4a60:	0292      	lsls	r2, r2, #10
    4a62:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    4a64:	7ce2      	ldrb	r2, [r4, #19]
    4a66:	2a00      	cmp	r2, #0
    4a68:	d002      	beq.n	4a70 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    4a6a:	2280      	movs	r2, #128	; 0x80
    4a6c:	0092      	lsls	r2, r2, #2
    4a6e:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    4a70:	7d22      	ldrb	r2, [r4, #20]
    4a72:	2a00      	cmp	r2, #0
    4a74:	d002      	beq.n	4a7c <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    4a76:	2280      	movs	r2, #128	; 0x80
    4a78:	0192      	lsls	r2, r2, #6
    4a7a:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    4a7c:	4642      	mov	r2, r8
    4a7e:	6812      	ldr	r2, [r2, #0]
    4a80:	4313      	orrs	r3, r2
    4a82:	4642      	mov	r2, r8
    4a84:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    4a86:	6853      	ldr	r3, [r2, #4]
    4a88:	430b      	orrs	r3, r1
    4a8a:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    4a8c:	2000      	movs	r0, #0
    4a8e:	e6d9      	b.n	4844 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4a90:	6830      	ldr	r0, [r6, #0]
    4a92:	4b13      	ldr	r3, [pc, #76]	; (4ae0 <spi_init+0x2c0>)
    4a94:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4a96:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    4a98:	b2c0      	uxtb	r0, r0
    4a9a:	4b0f      	ldr	r3, [pc, #60]	; (4ad8 <spi_init+0x2b8>)
    4a9c:	4798      	blx	r3
    4a9e:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    4aa0:	ab02      	add	r3, sp, #8
    4aa2:	1d9a      	adds	r2, r3, #6
    4aa4:	69a0      	ldr	r0, [r4, #24]
    4aa6:	4b0d      	ldr	r3, [pc, #52]	; (4adc <spi_init+0x2bc>)
    4aa8:	4798      	blx	r3
    4aaa:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    4aac:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    4aae:	2b00      	cmp	r3, #0
    4ab0:	d000      	beq.n	4ab4 <spi_init+0x294>
    4ab2:	e6c7      	b.n	4844 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    4ab4:	ab02      	add	r3, sp, #8
    4ab6:	3306      	adds	r3, #6
    4ab8:	781b      	ldrb	r3, [r3, #0]
    4aba:	4642      	mov	r2, r8
    4abc:	7313      	strb	r3, [r2, #12]
    4abe:	e7bc      	b.n	4a3a <spi_init+0x21a>
			MCLK->APBDMASK.reg |= mask;
    4ac0:	4a08      	ldr	r2, [pc, #32]	; (4ae4 <spi_init+0x2c4>)
    4ac2:	6a13      	ldr	r3, [r2, #32]
    4ac4:	2102      	movs	r1, #2
    4ac6:	430b      	orrs	r3, r1
    4ac8:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    4aca:	2318      	movs	r3, #24
    4acc:	e760      	b.n	4990 <spi_init+0x170>
    4ace:	46c0      	nop			; (mov r8, r8)
    4ad0:	000045bd 	.word	0x000045bd
    4ad4:	40002800 	.word	0x40002800
    4ad8:	00005991 	.word	0x00005991
    4adc:	000044b3 	.word	0x000044b3
    4ae0:	00004719 	.word	0x00004719
    4ae4:	40000400 	.word	0x40000400
    4ae8:	0000596d 	.word	0x0000596d
    4aec:	000058fd 	.word	0x000058fd
    4af0:	00004571 	.word	0x00004571
    4af4:	00005a69 	.word	0x00005a69
    4af8:	41002000 	.word	0x41002000

00004afc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    4afc:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    4afe:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    4b00:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    4b02:	2c01      	cmp	r4, #1
    4b04:	d001      	beq.n	4b0a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    4b06:	0018      	movs	r0, r3
    4b08:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    4b0a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    4b0c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    4b0e:	2c00      	cmp	r4, #0
    4b10:	d1f9      	bne.n	4b06 <spi_select_slave+0xa>
		if (select) {
    4b12:	2a00      	cmp	r2, #0
    4b14:	d058      	beq.n	4bc8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    4b16:	784b      	ldrb	r3, [r1, #1]
    4b18:	2b00      	cmp	r3, #0
    4b1a:	d044      	beq.n	4ba6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4b1c:	6803      	ldr	r3, [r0, #0]
    4b1e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    4b20:	07db      	lsls	r3, r3, #31
    4b22:	d410      	bmi.n	4b46 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    4b24:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4b26:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4b28:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4b2a:	2900      	cmp	r1, #0
    4b2c:	d104      	bne.n	4b38 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    4b2e:	0953      	lsrs	r3, r2, #5
    4b30:	01db      	lsls	r3, r3, #7
    4b32:	492e      	ldr	r1, [pc, #184]	; (4bec <spi_select_slave+0xf0>)
    4b34:	468c      	mov	ip, r1
    4b36:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4b38:	211f      	movs	r1, #31
    4b3a:	4011      	ands	r1, r2
    4b3c:	2201      	movs	r2, #1
    4b3e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4b40:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    4b42:	2305      	movs	r3, #5
    4b44:	e7df      	b.n	4b06 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4b46:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4b48:	09d4      	lsrs	r4, r2, #7
		return NULL;
    4b4a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4b4c:	2c00      	cmp	r4, #0
    4b4e:	d104      	bne.n	4b5a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    4b50:	0953      	lsrs	r3, r2, #5
    4b52:	01db      	lsls	r3, r3, #7
    4b54:	4c25      	ldr	r4, [pc, #148]	; (4bec <spi_select_slave+0xf0>)
    4b56:	46a4      	mov	ip, r4
    4b58:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4b5a:	241f      	movs	r4, #31
    4b5c:	4014      	ands	r4, r2
    4b5e:	2201      	movs	r2, #1
    4b60:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    4b62:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    4b64:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    4b66:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    4b68:	07d2      	lsls	r2, r2, #31
    4b6a:	d501      	bpl.n	4b70 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    4b6c:	788a      	ldrb	r2, [r1, #2]
    4b6e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    4b70:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    4b72:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    4b74:	2a00      	cmp	r2, #0
    4b76:	d1c6      	bne.n	4b06 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    4b78:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    4b7a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    4b7c:	7e13      	ldrb	r3, [r2, #24]
    4b7e:	420b      	tst	r3, r1
    4b80:	d0fc      	beq.n	4b7c <spi_select_slave+0x80>
    4b82:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    4b84:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    4b86:	0749      	lsls	r1, r1, #29
    4b88:	d5bd      	bpl.n	4b06 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4b8a:	8b53      	ldrh	r3, [r2, #26]
    4b8c:	075b      	lsls	r3, r3, #29
    4b8e:	d501      	bpl.n	4b94 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4b90:	2304      	movs	r3, #4
    4b92:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4b94:	7983      	ldrb	r3, [r0, #6]
    4b96:	2b01      	cmp	r3, #1
    4b98:	d002      	beq.n	4ba0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    4b9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4b9c:	2300      	movs	r3, #0
    4b9e:	e7b2      	b.n	4b06 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    4ba0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4ba2:	2300      	movs	r3, #0
    4ba4:	e7af      	b.n	4b06 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    4ba6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4ba8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4baa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4bac:	2900      	cmp	r1, #0
    4bae:	d104      	bne.n	4bba <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    4bb0:	0953      	lsrs	r3, r2, #5
    4bb2:	01db      	lsls	r3, r3, #7
    4bb4:	490d      	ldr	r1, [pc, #52]	; (4bec <spi_select_slave+0xf0>)
    4bb6:	468c      	mov	ip, r1
    4bb8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4bba:	211f      	movs	r1, #31
    4bbc:	4011      	ands	r1, r2
    4bbe:	2201      	movs	r2, #1
    4bc0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    4bc2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    4bc4:	2300      	movs	r3, #0
    4bc6:	e79e      	b.n	4b06 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    4bc8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    4bca:	09d1      	lsrs	r1, r2, #7
		return NULL;
    4bcc:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    4bce:	2900      	cmp	r1, #0
    4bd0:	d104      	bne.n	4bdc <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    4bd2:	0953      	lsrs	r3, r2, #5
    4bd4:	01db      	lsls	r3, r3, #7
    4bd6:	4905      	ldr	r1, [pc, #20]	; (4bec <spi_select_slave+0xf0>)
    4bd8:	468c      	mov	ip, r1
    4bda:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4bdc:	211f      	movs	r1, #31
    4bde:	4011      	ands	r1, r2
    4be0:	2201      	movs	r2, #1
    4be2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    4be4:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    4be6:	2300      	movs	r3, #0
    4be8:	e78d      	b.n	4b06 <spi_select_slave+0xa>
    4bea:	46c0      	nop			; (mov r8, r8)
    4bec:	40002800 	.word	0x40002800

00004bf0 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bf2:	46de      	mov	lr, fp
    4bf4:	4657      	mov	r7, sl
    4bf6:	464e      	mov	r6, r9
    4bf8:	4645      	mov	r5, r8
    4bfa:	b5e0      	push	{r5, r6, r7, lr}
    4bfc:	b091      	sub	sp, #68	; 0x44
    4bfe:	0005      	movs	r5, r0
    4c00:	000c      	movs	r4, r1
    4c02:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4c04:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4c06:	0008      	movs	r0, r1
    4c08:	4bc6      	ldr	r3, [pc, #792]	; (4f24 <usart_init+0x334>)
    4c0a:	4798      	blx	r3
    4c0c:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    4c0e:	2805      	cmp	r0, #5
    4c10:	d00d      	beq.n	4c2e <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4c12:	0007      	movs	r7, r0
    4c14:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    4c16:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4c18:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4c1a:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4c1c:	07c9      	lsls	r1, r1, #31
    4c1e:	d509      	bpl.n	4c34 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    4c20:	b011      	add	sp, #68	; 0x44
    4c22:	bc3c      	pop	{r2, r3, r4, r5}
    4c24:	4690      	mov	r8, r2
    4c26:	4699      	mov	r9, r3
    4c28:	46a2      	mov	sl, r4
    4c2a:	46ab      	mov	fp, r5
    4c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    4c2e:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    4c30:	2301      	movs	r3, #1
    4c32:	e7f1      	b.n	4c18 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4c34:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    4c36:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4c38:	0789      	lsls	r1, r1, #30
    4c3a:	d4f1      	bmi.n	4c20 <usart_init+0x30>
	if (sercom_index == 5) {
    4c3c:	2a05      	cmp	r2, #5
    4c3e:	d049      	beq.n	4cd4 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    4c40:	49b9      	ldr	r1, [pc, #740]	; (4f28 <usart_init+0x338>)
    4c42:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    4c44:	2201      	movs	r2, #1
    4c46:	409a      	lsls	r2, r3
    4c48:	0013      	movs	r3, r2
    4c4a:	4303      	orrs	r3, r0
    4c4c:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    4c4e:	a90f      	add	r1, sp, #60	; 0x3c
    4c50:	232d      	movs	r3, #45	; 0x2d
    4c52:	4698      	mov	r8, r3
    4c54:	5cf3      	ldrb	r3, [r6, r3]
    4c56:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4c58:	b2ff      	uxtb	r7, r7
    4c5a:	0038      	movs	r0, r7
    4c5c:	4bb3      	ldr	r3, [pc, #716]	; (4f2c <usart_init+0x33c>)
    4c5e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4c60:	0038      	movs	r0, r7
    4c62:	4bb3      	ldr	r3, [pc, #716]	; (4f30 <usart_init+0x340>)
    4c64:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4c66:	4643      	mov	r3, r8
    4c68:	5cf0      	ldrb	r0, [r6, r3]
    4c6a:	2100      	movs	r1, #0
    4c6c:	4bb1      	ldr	r3, [pc, #708]	; (4f34 <usart_init+0x344>)
    4c6e:	4798      	blx	r3
	module->character_size = config->character_size;
    4c70:	7af3      	ldrb	r3, [r6, #11]
    4c72:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    4c74:	2324      	movs	r3, #36	; 0x24
    4c76:	5cf3      	ldrb	r3, [r6, r3]
    4c78:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    4c7a:	2325      	movs	r3, #37	; 0x25
    4c7c:	5cf3      	ldrb	r3, [r6, r3]
    4c7e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    4c80:	7ef3      	ldrb	r3, [r6, #27]
    4c82:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    4c84:	7f33      	ldrb	r3, [r6, #28]
    4c86:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4c88:	682b      	ldr	r3, [r5, #0]
    4c8a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4c8c:	0018      	movs	r0, r3
    4c8e:	4ba5      	ldr	r3, [pc, #660]	; (4f24 <usart_init+0x334>)
    4c90:	4798      	blx	r3
	if (sercom_index == 5) {
    4c92:	2805      	cmp	r0, #5
    4c94:	d026      	beq.n	4ce4 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4c96:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    4c98:	2200      	movs	r2, #0
    4c9a:	230e      	movs	r3, #14
    4c9c:	a906      	add	r1, sp, #24
    4c9e:	468c      	mov	ip, r1
    4ca0:	4463      	add	r3, ip
    4ca2:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    4ca4:	8a32      	ldrh	r2, [r6, #16]
    4ca6:	9202      	str	r2, [sp, #8]
    4ca8:	2380      	movs	r3, #128	; 0x80
    4caa:	01db      	lsls	r3, r3, #7
    4cac:	429a      	cmp	r2, r3
    4cae:	d100      	bne.n	4cb2 <usart_init+0xc2>
    4cb0:	e0ab      	b.n	4e0a <usart_init+0x21a>
    4cb2:	d919      	bls.n	4ce8 <usart_init+0xf8>
    4cb4:	23c0      	movs	r3, #192	; 0xc0
    4cb6:	01db      	lsls	r3, r3, #7
    4cb8:	9a02      	ldr	r2, [sp, #8]
    4cba:	429a      	cmp	r2, r3
    4cbc:	d100      	bne.n	4cc0 <usart_init+0xd0>
    4cbe:	e09f      	b.n	4e00 <usart_init+0x210>
    4cc0:	2380      	movs	r3, #128	; 0x80
    4cc2:	021b      	lsls	r3, r3, #8
    4cc4:	429a      	cmp	r2, r3
    4cc6:	d000      	beq.n	4cca <usart_init+0xda>
    4cc8:	e127      	b.n	4f1a <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4cca:	2303      	movs	r3, #3
    4ccc:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4cce:	2300      	movs	r3, #0
    4cd0:	9307      	str	r3, [sp, #28]
    4cd2:	e012      	b.n	4cfa <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    4cd4:	4994      	ldr	r1, [pc, #592]	; (4f28 <usart_init+0x338>)
    4cd6:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    4cd8:	3a04      	subs	r2, #4
    4cda:	409a      	lsls	r2, r3
    4cdc:	0013      	movs	r3, r2
    4cde:	4303      	orrs	r3, r0
    4ce0:	620b      	str	r3, [r1, #32]
    4ce2:	e7b4      	b.n	4c4e <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    4ce4:	2018      	movs	r0, #24
    4ce6:	e7d7      	b.n	4c98 <usart_init+0xa8>
	switch (config->sample_rate) {
    4ce8:	2380      	movs	r3, #128	; 0x80
    4cea:	019b      	lsls	r3, r3, #6
    4cec:	429a      	cmp	r2, r3
    4cee:	d000      	beq.n	4cf2 <usart_init+0x102>
    4cf0:	e113      	b.n	4f1a <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4cf2:	2310      	movs	r3, #16
    4cf4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4cf6:	3b0f      	subs	r3, #15
    4cf8:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    4cfa:	6833      	ldr	r3, [r6, #0]
    4cfc:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4cfe:	68f3      	ldr	r3, [r6, #12]
    4d00:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4d02:	6973      	ldr	r3, [r6, #20]
    4d04:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4d06:	7e33      	ldrb	r3, [r6, #24]
    4d08:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4d0a:	2326      	movs	r3, #38	; 0x26
    4d0c:	5cf3      	ldrb	r3, [r6, r3]
    4d0e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4d10:	6873      	ldr	r3, [r6, #4]
    4d12:	4699      	mov	r9, r3
	switch (transfer_mode)
    4d14:	2b00      	cmp	r3, #0
    4d16:	d100      	bne.n	4d1a <usart_init+0x12a>
    4d18:	e09f      	b.n	4e5a <usart_init+0x26a>
    4d1a:	2380      	movs	r3, #128	; 0x80
    4d1c:	055b      	lsls	r3, r3, #21
    4d1e:	4599      	cmp	r9, r3
    4d20:	d104      	bne.n	4d2c <usart_init+0x13c>
			if (!config->use_external_clock) {
    4d22:	2327      	movs	r3, #39	; 0x27
    4d24:	5cf3      	ldrb	r3, [r6, r3]
    4d26:	2b00      	cmp	r3, #0
    4d28:	d100      	bne.n	4d2c <usart_init+0x13c>
    4d2a:	e084      	b.n	4e36 <usart_init+0x246>
	if(config->encoding_format_enable) {
    4d2c:	7e73      	ldrb	r3, [r6, #25]
    4d2e:	2b00      	cmp	r3, #0
    4d30:	d002      	beq.n	4d38 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4d32:	7eb3      	ldrb	r3, [r6, #26]
    4d34:	4642      	mov	r2, r8
    4d36:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    4d38:	682a      	ldr	r2, [r5, #0]
    4d3a:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    4d3c:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    4d3e:	2b00      	cmp	r3, #0
    4d40:	d1fc      	bne.n	4d3c <usart_init+0x14c>
	usart_hw->BAUD.reg = baud;
    4d42:	330e      	adds	r3, #14
    4d44:	aa06      	add	r2, sp, #24
    4d46:	4694      	mov	ip, r2
    4d48:	4463      	add	r3, ip
    4d4a:	881b      	ldrh	r3, [r3, #0]
    4d4c:	4642      	mov	r2, r8
    4d4e:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    4d50:	9b05      	ldr	r3, [sp, #20]
    4d52:	9a03      	ldr	r2, [sp, #12]
    4d54:	4313      	orrs	r3, r2
    4d56:	9a04      	ldr	r2, [sp, #16]
    4d58:	4313      	orrs	r3, r2
    4d5a:	464a      	mov	r2, r9
    4d5c:	4313      	orrs	r3, r2
    4d5e:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4d60:	465b      	mov	r3, fp
    4d62:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    4d64:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4d66:	4653      	mov	r3, sl
    4d68:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    4d6a:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    4d6c:	2327      	movs	r3, #39	; 0x27
    4d6e:	5cf3      	ldrb	r3, [r6, r3]
    4d70:	2b00      	cmp	r3, #0
    4d72:	d101      	bne.n	4d78 <usart_init+0x188>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4d74:	3304      	adds	r3, #4
    4d76:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4d78:	7e73      	ldrb	r3, [r6, #25]
    4d7a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4d7c:	7f32      	ldrb	r2, [r6, #28]
    4d7e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4d80:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4d82:	7f72      	ldrb	r2, [r6, #29]
    4d84:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4d86:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4d88:	2224      	movs	r2, #36	; 0x24
    4d8a:	5cb2      	ldrb	r2, [r6, r2]
    4d8c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4d8e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4d90:	2225      	movs	r2, #37	; 0x25
    4d92:	5cb2      	ldrb	r2, [r6, r2]
    4d94:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4d96:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    4d98:	7ab1      	ldrb	r1, [r6, #10]
    4d9a:	7af2      	ldrb	r2, [r6, #11]
    4d9c:	4311      	orrs	r1, r2
    4d9e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    4da0:	8933      	ldrh	r3, [r6, #8]
    4da2:	2bff      	cmp	r3, #255	; 0xff
    4da4:	d07d      	beq.n	4ea2 <usart_init+0x2b2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4da6:	2280      	movs	r2, #128	; 0x80
    4da8:	0452      	lsls	r2, r2, #17
    4daa:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    4dac:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    4dae:	232c      	movs	r3, #44	; 0x2c
    4db0:	5cf3      	ldrb	r3, [r6, r3]
    4db2:	2b00      	cmp	r3, #0
    4db4:	d103      	bne.n	4dbe <usart_init+0x1ce>
    4db6:	4b60      	ldr	r3, [pc, #384]	; (4f38 <usart_init+0x348>)
    4db8:	789b      	ldrb	r3, [r3, #2]
    4dba:	079b      	lsls	r3, r3, #30
    4dbc:	d501      	bpl.n	4dc2 <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4dbe:	2380      	movs	r3, #128	; 0x80
    4dc0:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    4dc2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4dc4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4dc6:	2b00      	cmp	r3, #0
    4dc8:	d1fc      	bne.n	4dc4 <usart_init+0x1d4>
	usart_hw->CTRLB.reg = ctrlb;
    4dca:	4643      	mov	r3, r8
    4dcc:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4dce:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    4dd0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4dd2:	2b00      	cmp	r3, #0
    4dd4:	d1fc      	bne.n	4dd0 <usart_init+0x1e0>
	usart_hw->CTRLA.reg = ctrla;
    4dd6:	4643      	mov	r3, r8
    4dd8:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4dda:	ab0e      	add	r3, sp, #56	; 0x38
    4ddc:	2280      	movs	r2, #128	; 0x80
    4dde:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4de0:	2200      	movs	r2, #0
    4de2:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    4de4:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4de6:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    4de8:	6b33      	ldr	r3, [r6, #48]	; 0x30
    4dea:	930a      	str	r3, [sp, #40]	; 0x28
    4dec:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4dee:	930b      	str	r3, [sp, #44]	; 0x2c
    4df0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    4df2:	930c      	str	r3, [sp, #48]	; 0x30
    4df4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    4df6:	9302      	str	r3, [sp, #8]
    4df8:	930d      	str	r3, [sp, #52]	; 0x34
    4dfa:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4dfc:	ae0a      	add	r6, sp, #40	; 0x28
    4dfe:	e05e      	b.n	4ebe <usart_init+0x2ce>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4e00:	2308      	movs	r3, #8
    4e02:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4e04:	3b07      	subs	r3, #7
    4e06:	9307      	str	r3, [sp, #28]
    4e08:	e777      	b.n	4cfa <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    4e0a:	6833      	ldr	r3, [r6, #0]
    4e0c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    4e0e:	68f3      	ldr	r3, [r6, #12]
    4e10:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    4e12:	6973      	ldr	r3, [r6, #20]
    4e14:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4e16:	7e33      	ldrb	r3, [r6, #24]
    4e18:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4e1a:	2326      	movs	r3, #38	; 0x26
    4e1c:	5cf3      	ldrb	r3, [r6, r3]
    4e1e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    4e20:	6873      	ldr	r3, [r6, #4]
    4e22:	4699      	mov	r9, r3
	switch (transfer_mode)
    4e24:	2b00      	cmp	r3, #0
    4e26:	d014      	beq.n	4e52 <usart_init+0x262>
    4e28:	2380      	movs	r3, #128	; 0x80
    4e2a:	055b      	lsls	r3, r3, #21
    4e2c:	4599      	cmp	r9, r3
    4e2e:	d100      	bne.n	4e32 <usart_init+0x242>
    4e30:	e777      	b.n	4d22 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    4e32:	2000      	movs	r0, #0
    4e34:	e020      	b.n	4e78 <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4e36:	6a33      	ldr	r3, [r6, #32]
    4e38:	001f      	movs	r7, r3
    4e3a:	b2c0      	uxtb	r0, r0
    4e3c:	4b3f      	ldr	r3, [pc, #252]	; (4f3c <usart_init+0x34c>)
    4e3e:	4798      	blx	r3
    4e40:	0001      	movs	r1, r0
    4e42:	220e      	movs	r2, #14
    4e44:	ab06      	add	r3, sp, #24
    4e46:	469c      	mov	ip, r3
    4e48:	4462      	add	r2, ip
    4e4a:	0038      	movs	r0, r7
    4e4c:	4b3c      	ldr	r3, [pc, #240]	; (4f40 <usart_init+0x350>)
    4e4e:	4798      	blx	r3
    4e50:	e012      	b.n	4e78 <usart_init+0x288>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4e52:	2308      	movs	r3, #8
    4e54:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4e56:	2300      	movs	r3, #0
    4e58:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    4e5a:	2327      	movs	r3, #39	; 0x27
    4e5c:	5cf3      	ldrb	r3, [r6, r3]
    4e5e:	2b00      	cmp	r3, #0
    4e60:	d00e      	beq.n	4e80 <usart_init+0x290>
				status_code =
    4e62:	9b06      	ldr	r3, [sp, #24]
    4e64:	9300      	str	r3, [sp, #0]
    4e66:	9b07      	ldr	r3, [sp, #28]
    4e68:	220e      	movs	r2, #14
    4e6a:	a906      	add	r1, sp, #24
    4e6c:	468c      	mov	ip, r1
    4e6e:	4462      	add	r2, ip
    4e70:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    4e72:	6a30      	ldr	r0, [r6, #32]
    4e74:	4f33      	ldr	r7, [pc, #204]	; (4f44 <usart_init+0x354>)
    4e76:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    4e78:	2800      	cmp	r0, #0
    4e7a:	d000      	beq.n	4e7e <usart_init+0x28e>
    4e7c:	e6d0      	b.n	4c20 <usart_init+0x30>
    4e7e:	e755      	b.n	4d2c <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    4e80:	6a33      	ldr	r3, [r6, #32]
    4e82:	001f      	movs	r7, r3
    4e84:	b2c0      	uxtb	r0, r0
    4e86:	4b2d      	ldr	r3, [pc, #180]	; (4f3c <usart_init+0x34c>)
    4e88:	4798      	blx	r3
    4e8a:	0001      	movs	r1, r0
				status_code =
    4e8c:	9b06      	ldr	r3, [sp, #24]
    4e8e:	9300      	str	r3, [sp, #0]
    4e90:	9b07      	ldr	r3, [sp, #28]
    4e92:	220e      	movs	r2, #14
    4e94:	a806      	add	r0, sp, #24
    4e96:	4684      	mov	ip, r0
    4e98:	4462      	add	r2, ip
    4e9a:	0038      	movs	r0, r7
    4e9c:	4f29      	ldr	r7, [pc, #164]	; (4f44 <usart_init+0x354>)
    4e9e:	47b8      	blx	r7
    4ea0:	e7ea      	b.n	4e78 <usart_init+0x288>
		if(config->lin_slave_enable) {
    4ea2:	7ef3      	ldrb	r3, [r6, #27]
    4ea4:	2b00      	cmp	r3, #0
    4ea6:	d082      	beq.n	4dae <usart_init+0x1be>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4ea8:	2380      	movs	r3, #128	; 0x80
    4eaa:	04db      	lsls	r3, r3, #19
    4eac:	431f      	orrs	r7, r3
    4eae:	e77e      	b.n	4dae <usart_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4eb0:	0020      	movs	r0, r4
    4eb2:	4b25      	ldr	r3, [pc, #148]	; (4f48 <usart_init+0x358>)
    4eb4:	4798      	blx	r3
    4eb6:	e007      	b.n	4ec8 <usart_init+0x2d8>
    4eb8:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    4eba:	2f04      	cmp	r7, #4
    4ebc:	d00d      	beq.n	4eda <usart_init+0x2ea>
    4ebe:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    4ec0:	00bb      	lsls	r3, r7, #2
    4ec2:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    4ec4:	2800      	cmp	r0, #0
    4ec6:	d0f3      	beq.n	4eb0 <usart_init+0x2c0>
		if (current_pinmux != PINMUX_UNUSED) {
    4ec8:	1c43      	adds	r3, r0, #1
    4eca:	d0f5      	beq.n	4eb8 <usart_init+0x2c8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    4ecc:	a90e      	add	r1, sp, #56	; 0x38
    4ece:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4ed0:	0c00      	lsrs	r0, r0, #16
    4ed2:	b2c0      	uxtb	r0, r0
    4ed4:	4b1d      	ldr	r3, [pc, #116]	; (4f4c <usart_init+0x35c>)
    4ed6:	4798      	blx	r3
    4ed8:	e7ee      	b.n	4eb8 <usart_init+0x2c8>
		module->callback[i]            = NULL;
    4eda:	2300      	movs	r3, #0
    4edc:	60eb      	str	r3, [r5, #12]
    4ede:	612b      	str	r3, [r5, #16]
    4ee0:	616b      	str	r3, [r5, #20]
    4ee2:	61ab      	str	r3, [r5, #24]
    4ee4:	61eb      	str	r3, [r5, #28]
    4ee6:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    4ee8:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    4eea:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    4eec:	2200      	movs	r2, #0
    4eee:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    4ef0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    4ef2:	3330      	adds	r3, #48	; 0x30
    4ef4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    4ef6:	3301      	adds	r3, #1
    4ef8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    4efa:	3301      	adds	r3, #1
    4efc:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    4efe:	3301      	adds	r3, #1
    4f00:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    4f02:	6828      	ldr	r0, [r5, #0]
    4f04:	4b07      	ldr	r3, [pc, #28]	; (4f24 <usart_init+0x334>)
    4f06:	4798      	blx	r3
    4f08:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    4f0a:	4911      	ldr	r1, [pc, #68]	; (4f50 <usart_init+0x360>)
    4f0c:	4b11      	ldr	r3, [pc, #68]	; (4f54 <usart_init+0x364>)
    4f0e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4f10:	00a4      	lsls	r4, r4, #2
    4f12:	4b11      	ldr	r3, [pc, #68]	; (4f58 <usart_init+0x368>)
    4f14:	50e5      	str	r5, [r4, r3]
	return status_code;
    4f16:	2000      	movs	r0, #0
    4f18:	e682      	b.n	4c20 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4f1a:	2310      	movs	r3, #16
    4f1c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4f1e:	2300      	movs	r3, #0
    4f20:	9307      	str	r3, [sp, #28]
    4f22:	e6ea      	b.n	4cfa <usart_init+0x10a>
    4f24:	00004719 	.word	0x00004719
    4f28:	40000400 	.word	0x40000400
    4f2c:	0000596d 	.word	0x0000596d
    4f30:	000058fd 	.word	0x000058fd
    4f34:	00004571 	.word	0x00004571
    4f38:	41002000 	.word	0x41002000
    4f3c:	00005991 	.word	0x00005991
    4f40:	000044b3 	.word	0x000044b3
    4f44:	000044dd 	.word	0x000044dd
    4f48:	000045bd 	.word	0x000045bd
    4f4c:	00005a69 	.word	0x00005a69
    4f50:	00005091 	.word	0x00005091
    4f54:	00004755 	.word	0x00004755
    4f58:	2000116c 	.word	0x2000116c

00004f5c <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    4f5c:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    4f5e:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    4f60:	2a00      	cmp	r2, #0
    4f62:	d101      	bne.n	4f68 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    4f64:	0018      	movs	r0, r3
    4f66:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    4f68:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    4f6a:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4f6c:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    4f6e:	2a00      	cmp	r2, #0
    4f70:	d1f8      	bne.n	4f64 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4f72:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    4f74:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    4f76:	2a00      	cmp	r2, #0
    4f78:	d1fc      	bne.n	4f74 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    4f7a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    4f7c:	2102      	movs	r1, #2
    4f7e:	7e1a      	ldrb	r2, [r3, #24]
    4f80:	420a      	tst	r2, r1
    4f82:	d0fc      	beq.n	4f7e <usart_write_wait+0x22>
	return STATUS_OK;
    4f84:	2300      	movs	r3, #0
    4f86:	e7ed      	b.n	4f64 <usart_write_wait+0x8>

00004f88 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    4f88:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    4f8a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    4f8c:	2a00      	cmp	r2, #0
    4f8e:	d101      	bne.n	4f94 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    4f90:	0018      	movs	r0, r3
    4f92:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    4f94:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    4f96:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    4f98:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    4f9a:	2a00      	cmp	r2, #0
    4f9c:	d1f8      	bne.n	4f90 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    4f9e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    4fa0:	7e10      	ldrb	r0, [r2, #24]
    4fa2:	0740      	lsls	r0, r0, #29
    4fa4:	d5f4      	bpl.n	4f90 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    4fa6:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    4fa8:	2b00      	cmp	r3, #0
    4faa:	d1fc      	bne.n	4fa6 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    4fac:	8b53      	ldrh	r3, [r2, #26]
    4fae:	b2db      	uxtb	r3, r3
	if (error_code) {
    4fb0:	0698      	lsls	r0, r3, #26
    4fb2:	d01d      	beq.n	4ff0 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    4fb4:	0798      	lsls	r0, r3, #30
    4fb6:	d503      	bpl.n	4fc0 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    4fb8:	2302      	movs	r3, #2
    4fba:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    4fbc:	3318      	adds	r3, #24
    4fbe:	e7e7      	b.n	4f90 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    4fc0:	0758      	lsls	r0, r3, #29
    4fc2:	d503      	bpl.n	4fcc <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    4fc4:	2304      	movs	r3, #4
    4fc6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    4fc8:	331a      	adds	r3, #26
    4fca:	e7e1      	b.n	4f90 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    4fcc:	07d8      	lsls	r0, r3, #31
    4fce:	d503      	bpl.n	4fd8 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    4fd0:	2301      	movs	r3, #1
    4fd2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    4fd4:	3312      	adds	r3, #18
    4fd6:	e7db      	b.n	4f90 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    4fd8:	06d8      	lsls	r0, r3, #27
    4fda:	d503      	bpl.n	4fe4 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    4fdc:	2310      	movs	r3, #16
    4fde:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    4fe0:	3332      	adds	r3, #50	; 0x32
    4fe2:	e7d5      	b.n	4f90 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    4fe4:	069b      	lsls	r3, r3, #26
    4fe6:	d503      	bpl.n	4ff0 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    4fe8:	2320      	movs	r3, #32
    4fea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    4fec:	3321      	adds	r3, #33	; 0x21
    4fee:	e7cf      	b.n	4f90 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    4ff0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    4ff2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    4ff4:	2300      	movs	r3, #0
    4ff6:	e7cb      	b.n	4f90 <usart_read_wait+0x8>

00004ff8 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    4ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ffa:	46d6      	mov	lr, sl
    4ffc:	b500      	push	{lr}
    4ffe:	b084      	sub	sp, #16
    5000:	0004      	movs	r4, r0
    5002:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    5004:	2017      	movs	r0, #23
	if (length == 0) {
    5006:	2a00      	cmp	r2, #0
    5008:	d103      	bne.n	5012 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    500a:	b004      	add	sp, #16
    500c:	bc04      	pop	{r2}
    500e:	4692      	mov	sl, r2
    5010:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    5012:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    5014:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    5016:	2b00      	cmp	r3, #0
    5018:	d0f7      	beq.n	500a <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    501a:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    501c:	3a01      	subs	r2, #1
    501e:	b293      	uxth	r3, r2
    5020:	469a      	mov	sl, r3
    5022:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    5024:	2704      	movs	r7, #4
    5026:	e019      	b.n	505c <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    5028:	2300      	movs	r3, #0
    502a:	aa02      	add	r2, sp, #8
    502c:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    502e:	1d91      	adds	r1, r2, #6
    5030:	0020      	movs	r0, r4
    5032:	4b15      	ldr	r3, [pc, #84]	; (5088 <usart_read_buffer_wait+0x90>)
    5034:	4798      	blx	r3
		if (retval != STATUS_OK) {
    5036:	2800      	cmp	r0, #0
    5038:	d1e7      	bne.n	500a <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    503a:	1c69      	adds	r1, r5, #1
    503c:	b289      	uxth	r1, r1
    503e:	ab02      	add	r3, sp, #8
    5040:	88db      	ldrh	r3, [r3, #6]
    5042:	9a01      	ldr	r2, [sp, #4]
    5044:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5046:	7962      	ldrb	r2, [r4, #5]
    5048:	2a01      	cmp	r2, #1
    504a:	d014      	beq.n	5076 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    504c:	000d      	movs	r5, r1
	while (length--) {
    504e:	4653      	mov	r3, sl
    5050:	3b01      	subs	r3, #1
    5052:	b29b      	uxth	r3, r3
    5054:	469a      	mov	sl, r3
    5056:	4b0d      	ldr	r3, [pc, #52]	; (508c <usart_read_buffer_wait+0x94>)
    5058:	459a      	cmp	sl, r3
    505a:	d0d6      	beq.n	500a <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    505c:	7e33      	ldrb	r3, [r6, #24]
    505e:	423b      	tst	r3, r7
    5060:	d1e2      	bne.n	5028 <usart_read_buffer_wait+0x30>
    5062:	4b0a      	ldr	r3, [pc, #40]	; (508c <usart_read_buffer_wait+0x94>)
    5064:	7e32      	ldrb	r2, [r6, #24]
    5066:	423a      	tst	r2, r7
    5068:	d1de      	bne.n	5028 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    506a:	2b01      	cmp	r3, #1
    506c:	d009      	beq.n	5082 <usart_read_buffer_wait+0x8a>
    506e:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    5070:	2b00      	cmp	r3, #0
    5072:	d1f7      	bne.n	5064 <usart_read_buffer_wait+0x6c>
    5074:	e7d8      	b.n	5028 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    5076:	3502      	adds	r5, #2
    5078:	b2ad      	uxth	r5, r5
    507a:	0a1b      	lsrs	r3, r3, #8
    507c:	9a01      	ldr	r2, [sp, #4]
    507e:	5453      	strb	r3, [r2, r1]
    5080:	e7e5      	b.n	504e <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    5082:	2012      	movs	r0, #18
    5084:	e7c1      	b.n	500a <usart_read_buffer_wait+0x12>
    5086:	46c0      	nop			; (mov r8, r8)
    5088:	00004f89 	.word	0x00004f89
    508c:	0000ffff 	.word	0x0000ffff

00005090 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    5090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    5092:	0080      	lsls	r0, r0, #2
    5094:	4b62      	ldr	r3, [pc, #392]	; (5220 <_usart_interrupt_handler+0x190>)
    5096:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    5098:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    509a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    509c:	2b00      	cmp	r3, #0
    509e:	d1fc      	bne.n	509a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    50a0:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    50a2:	7da6      	ldrb	r6, [r4, #22]
    50a4:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    50a6:	2330      	movs	r3, #48	; 0x30
    50a8:	5ceb      	ldrb	r3, [r5, r3]
    50aa:	2231      	movs	r2, #49	; 0x31
    50ac:	5caf      	ldrb	r7, [r5, r2]
    50ae:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    50b0:	07f3      	lsls	r3, r6, #31
    50b2:	d522      	bpl.n	50fa <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    50b4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    50b6:	b29b      	uxth	r3, r3
    50b8:	2b00      	cmp	r3, #0
    50ba:	d01c      	beq.n	50f6 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    50bc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    50be:	7813      	ldrb	r3, [r2, #0]
    50c0:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    50c2:	1c51      	adds	r1, r2, #1
    50c4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    50c6:	7969      	ldrb	r1, [r5, #5]
    50c8:	2901      	cmp	r1, #1
    50ca:	d00e      	beq.n	50ea <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    50cc:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    50ce:	05db      	lsls	r3, r3, #23
    50d0:	0ddb      	lsrs	r3, r3, #23
    50d2:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    50d4:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    50d6:	3b01      	subs	r3, #1
    50d8:	b29b      	uxth	r3, r3
    50da:	85eb      	strh	r3, [r5, #46]	; 0x2e
    50dc:	2b00      	cmp	r3, #0
    50de:	d10c      	bne.n	50fa <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    50e0:	3301      	adds	r3, #1
    50e2:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    50e4:	3301      	adds	r3, #1
    50e6:	75a3      	strb	r3, [r4, #22]
    50e8:	e007      	b.n	50fa <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    50ea:	7851      	ldrb	r1, [r2, #1]
    50ec:	0209      	lsls	r1, r1, #8
    50ee:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    50f0:	3202      	adds	r2, #2
    50f2:	62aa      	str	r2, [r5, #40]	; 0x28
    50f4:	e7eb      	b.n	50ce <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    50f6:	2301      	movs	r3, #1
    50f8:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    50fa:	07b3      	lsls	r3, r6, #30
    50fc:	d506      	bpl.n	510c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    50fe:	2302      	movs	r3, #2
    5100:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    5102:	2200      	movs	r2, #0
    5104:	3331      	adds	r3, #49	; 0x31
    5106:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    5108:	07fb      	lsls	r3, r7, #31
    510a:	d41a      	bmi.n	5142 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    510c:	0773      	lsls	r3, r6, #29
    510e:	d565      	bpl.n	51dc <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    5110:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    5112:	b29b      	uxth	r3, r3
    5114:	2b00      	cmp	r3, #0
    5116:	d05f      	beq.n	51d8 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5118:	8b63      	ldrh	r3, [r4, #26]
    511a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    511c:	071a      	lsls	r2, r3, #28
    511e:	d414      	bmi.n	514a <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5120:	223f      	movs	r2, #63	; 0x3f
    5122:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5124:	2b00      	cmp	r3, #0
    5126:	d034      	beq.n	5192 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    5128:	079a      	lsls	r2, r3, #30
    512a:	d511      	bpl.n	5150 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    512c:	221a      	movs	r2, #26
    512e:	2332      	movs	r3, #50	; 0x32
    5130:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    5132:	3b30      	subs	r3, #48	; 0x30
    5134:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    5136:	077b      	lsls	r3, r7, #29
    5138:	d550      	bpl.n	51dc <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    513a:	0028      	movs	r0, r5
    513c:	696b      	ldr	r3, [r5, #20]
    513e:	4798      	blx	r3
    5140:	e04c      	b.n	51dc <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    5142:	0028      	movs	r0, r5
    5144:	68eb      	ldr	r3, [r5, #12]
    5146:	4798      	blx	r3
    5148:	e7e0      	b.n	510c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    514a:	2237      	movs	r2, #55	; 0x37
    514c:	4013      	ands	r3, r2
    514e:	e7e9      	b.n	5124 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5150:	075a      	lsls	r2, r3, #29
    5152:	d505      	bpl.n	5160 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    5154:	221e      	movs	r2, #30
    5156:	2332      	movs	r3, #50	; 0x32
    5158:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    515a:	3b2e      	subs	r3, #46	; 0x2e
    515c:	8363      	strh	r3, [r4, #26]
    515e:	e7ea      	b.n	5136 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5160:	07da      	lsls	r2, r3, #31
    5162:	d505      	bpl.n	5170 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    5164:	2213      	movs	r2, #19
    5166:	2332      	movs	r3, #50	; 0x32
    5168:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    516a:	3b31      	subs	r3, #49	; 0x31
    516c:	8363      	strh	r3, [r4, #26]
    516e:	e7e2      	b.n	5136 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    5170:	06da      	lsls	r2, r3, #27
    5172:	d505      	bpl.n	5180 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    5174:	2242      	movs	r2, #66	; 0x42
    5176:	2332      	movs	r3, #50	; 0x32
    5178:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    517a:	3b22      	subs	r3, #34	; 0x22
    517c:	8363      	strh	r3, [r4, #26]
    517e:	e7da      	b.n	5136 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    5180:	2220      	movs	r2, #32
    5182:	421a      	tst	r2, r3
    5184:	d0d7      	beq.n	5136 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    5186:	3221      	adds	r2, #33	; 0x21
    5188:	2332      	movs	r3, #50	; 0x32
    518a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    518c:	3b12      	subs	r3, #18
    518e:	8363      	strh	r3, [r4, #26]
    5190:	e7d1      	b.n	5136 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    5192:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    5194:	05db      	lsls	r3, r3, #23
    5196:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    5198:	b2da      	uxtb	r2, r3
    519a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    519c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    519e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    51a0:	1c51      	adds	r1, r2, #1
    51a2:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    51a4:	7969      	ldrb	r1, [r5, #5]
    51a6:	2901      	cmp	r1, #1
    51a8:	d010      	beq.n	51cc <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    51aa:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    51ac:	3b01      	subs	r3, #1
    51ae:	b29b      	uxth	r3, r3
    51b0:	85ab      	strh	r3, [r5, #44]	; 0x2c
    51b2:	2b00      	cmp	r3, #0
    51b4:	d112      	bne.n	51dc <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    51b6:	3304      	adds	r3, #4
    51b8:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    51ba:	2200      	movs	r2, #0
    51bc:	332e      	adds	r3, #46	; 0x2e
    51be:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    51c0:	07bb      	lsls	r3, r7, #30
    51c2:	d50b      	bpl.n	51dc <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    51c4:	0028      	movs	r0, r5
    51c6:	692b      	ldr	r3, [r5, #16]
    51c8:	4798      	blx	r3
    51ca:	e007      	b.n	51dc <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    51cc:	0a1b      	lsrs	r3, r3, #8
    51ce:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    51d0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    51d2:	3301      	adds	r3, #1
    51d4:	626b      	str	r3, [r5, #36]	; 0x24
    51d6:	e7e8      	b.n	51aa <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    51d8:	2304      	movs	r3, #4
    51da:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    51dc:	06f3      	lsls	r3, r6, #27
    51de:	d504      	bpl.n	51ea <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    51e0:	2310      	movs	r3, #16
    51e2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    51e4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    51e6:	06fb      	lsls	r3, r7, #27
    51e8:	d40e      	bmi.n	5208 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    51ea:	06b3      	lsls	r3, r6, #26
    51ec:	d504      	bpl.n	51f8 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    51ee:	2320      	movs	r3, #32
    51f0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    51f2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    51f4:	073b      	lsls	r3, r7, #28
    51f6:	d40b      	bmi.n	5210 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    51f8:	0733      	lsls	r3, r6, #28
    51fa:	d504      	bpl.n	5206 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    51fc:	2308      	movs	r3, #8
    51fe:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    5200:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    5202:	06bb      	lsls	r3, r7, #26
    5204:	d408      	bmi.n	5218 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    5206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    5208:	0028      	movs	r0, r5
    520a:	69eb      	ldr	r3, [r5, #28]
    520c:	4798      	blx	r3
    520e:	e7ec      	b.n	51ea <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    5210:	0028      	movs	r0, r5
    5212:	69ab      	ldr	r3, [r5, #24]
    5214:	4798      	blx	r3
    5216:	e7ef      	b.n	51f8 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5218:	6a2b      	ldr	r3, [r5, #32]
    521a:	0028      	movs	r0, r5
    521c:	4798      	blx	r3
}
    521e:	e7f2      	b.n	5206 <_usart_interrupt_handler+0x176>
    5220:	2000116c 	.word	0x2000116c

00005224 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5224:	b510      	push	{r4, lr}
	switch (clock_source) {
    5226:	2808      	cmp	r0, #8
    5228:	d803      	bhi.n	5232 <system_clock_source_get_hz+0xe>
    522a:	0080      	lsls	r0, r0, #2
    522c:	4b1c      	ldr	r3, [pc, #112]	; (52a0 <system_clock_source_get_hz+0x7c>)
    522e:	581b      	ldr	r3, [r3, r0]
    5230:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    5232:	2000      	movs	r0, #0
    5234:	e032      	b.n	529c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    5236:	4b1b      	ldr	r3, [pc, #108]	; (52a4 <system_clock_source_get_hz+0x80>)
    5238:	6918      	ldr	r0, [r3, #16]
    523a:	e02f      	b.n	529c <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    523c:	4b1a      	ldr	r3, [pc, #104]	; (52a8 <system_clock_source_get_hz+0x84>)
    523e:	7d18      	ldrb	r0, [r3, #20]
    5240:	0700      	lsls	r0, r0, #28
    5242:	0f80      	lsrs	r0, r0, #30
    5244:	1c43      	adds	r3, r0, #1
    5246:	4819      	ldr	r0, [pc, #100]	; (52ac <system_clock_source_get_hz+0x88>)
    5248:	4358      	muls	r0, r3
    524a:	e027      	b.n	529c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    524c:	4b15      	ldr	r3, [pc, #84]	; (52a4 <system_clock_source_get_hz+0x80>)
    524e:	6958      	ldr	r0, [r3, #20]
    5250:	e024      	b.n	529c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    5252:	4b14      	ldr	r3, [pc, #80]	; (52a4 <system_clock_source_get_hz+0x80>)
    5254:	681b      	ldr	r3, [r3, #0]
			return 0;
    5256:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    5258:	079b      	lsls	r3, r3, #30
    525a:	d51f      	bpl.n	529c <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    525c:	4912      	ldr	r1, [pc, #72]	; (52a8 <system_clock_source_get_hz+0x84>)
    525e:	2280      	movs	r2, #128	; 0x80
    5260:	0052      	lsls	r2, r2, #1
    5262:	68cb      	ldr	r3, [r1, #12]
    5264:	4213      	tst	r3, r2
    5266:	d0fc      	beq.n	5262 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    5268:	4b0e      	ldr	r3, [pc, #56]	; (52a4 <system_clock_source_get_hz+0x80>)
    526a:	681b      	ldr	r3, [r3, #0]
    526c:	075b      	lsls	r3, r3, #29
    526e:	d401      	bmi.n	5274 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    5270:	480f      	ldr	r0, [pc, #60]	; (52b0 <system_clock_source_get_hz+0x8c>)
    5272:	e013      	b.n	529c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    5274:	2000      	movs	r0, #0
    5276:	4b0f      	ldr	r3, [pc, #60]	; (52b4 <system_clock_source_get_hz+0x90>)
    5278:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    527a:	4b0a      	ldr	r3, [pc, #40]	; (52a4 <system_clock_source_get_hz+0x80>)
    527c:	689b      	ldr	r3, [r3, #8]
    527e:	041b      	lsls	r3, r3, #16
    5280:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    5282:	4358      	muls	r0, r3
    5284:	e00a      	b.n	529c <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    5286:	2328      	movs	r3, #40	; 0x28
    5288:	4a07      	ldr	r2, [pc, #28]	; (52a8 <system_clock_source_get_hz+0x84>)
    528a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    528c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    528e:	079b      	lsls	r3, r3, #30
    5290:	d504      	bpl.n	529c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    5292:	4b04      	ldr	r3, [pc, #16]	; (52a4 <system_clock_source_get_hz+0x80>)
    5294:	68d8      	ldr	r0, [r3, #12]
    5296:	e001      	b.n	529c <system_clock_source_get_hz+0x78>
		return 32768UL;
    5298:	2080      	movs	r0, #128	; 0x80
    529a:	0200      	lsls	r0, r0, #8
	}
}
    529c:	bd10      	pop	{r4, pc}
    529e:	46c0      	nop			; (mov r8, r8)
    52a0:	0001dea8 	.word	0x0001dea8
    52a4:	20000ae4 	.word	0x20000ae4
    52a8:	40000c00 	.word	0x40000c00
    52ac:	003d0900 	.word	0x003d0900
    52b0:	02dc6c00 	.word	0x02dc6c00
    52b4:	00005991 	.word	0x00005991

000052b8 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    52b8:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    52ba:	4c0b      	ldr	r4, [pc, #44]	; (52e8 <system_clock_source_osc16m_set_config+0x30>)
    52bc:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    52be:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    52c0:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    52c2:	7802      	ldrb	r2, [r0, #0]
    52c4:	2103      	movs	r1, #3
    52c6:	4011      	ands	r1, r2
    52c8:	0089      	lsls	r1, r1, #2
    52ca:	220c      	movs	r2, #12
    52cc:	4393      	bics	r3, r2
    52ce:	430b      	orrs	r3, r1
    52d0:	3a0b      	subs	r2, #11
    52d2:	4032      	ands	r2, r6
    52d4:	0192      	lsls	r2, r2, #6
    52d6:	2140      	movs	r1, #64	; 0x40
    52d8:	438b      	bics	r3, r1
    52da:	4313      	orrs	r3, r2
    52dc:	01ed      	lsls	r5, r5, #7
    52de:	227f      	movs	r2, #127	; 0x7f
    52e0:	4013      	ands	r3, r2
    52e2:	432b      	orrs	r3, r5
    52e4:	7523      	strb	r3, [r4, #20]
}
    52e6:	bd70      	pop	{r4, r5, r6, pc}
    52e8:	40000c00 	.word	0x40000c00

000052ec <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    52ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    52ee:	46d6      	mov	lr, sl
    52f0:	464f      	mov	r7, r9
    52f2:	4646      	mov	r6, r8
    52f4:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    52f6:	4b20      	ldr	r3, [pc, #128]	; (5378 <system_clock_source_xosc32k_set_config+0x8c>)
    52f8:	469a      	mov	sl, r3
    52fa:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    52fc:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    52fe:	7801      	ldrb	r1, [r0, #0]
    5300:	424c      	negs	r4, r1
    5302:	414c      	adcs	r4, r1
    5304:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    5306:	7881      	ldrb	r1, [r0, #2]
    5308:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    530a:	78c1      	ldrb	r1, [r0, #3]
    530c:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    530e:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5310:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    5312:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5314:	6840      	ldr	r0, [r0, #4]
    5316:	4919      	ldr	r1, [pc, #100]	; (537c <system_clock_source_xosc32k_set_config+0x90>)
    5318:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    531a:	2101      	movs	r1, #1
    531c:	4648      	mov	r0, r9
    531e:	0080      	lsls	r0, r0, #2
    5320:	2204      	movs	r2, #4
    5322:	4393      	bics	r3, r2
    5324:	4303      	orrs	r3, r0
    5326:	4640      	mov	r0, r8
    5328:	4008      	ands	r0, r1
    532a:	00c0      	lsls	r0, r0, #3
    532c:	3204      	adds	r2, #4
    532e:	4393      	bics	r3, r2
    5330:	4303      	orrs	r3, r0
    5332:	4660      	mov	r0, ip
    5334:	4008      	ands	r0, r1
    5336:	0100      	lsls	r0, r0, #4
    5338:	3208      	adds	r2, #8
    533a:	4393      	bics	r3, r2
    533c:	4303      	orrs	r3, r0
    533e:	400f      	ands	r7, r1
    5340:	01bf      	lsls	r7, r7, #6
    5342:	2040      	movs	r0, #64	; 0x40
    5344:	4383      	bics	r3, r0
    5346:	433b      	orrs	r3, r7
    5348:	400e      	ands	r6, r1
    534a:	01f6      	lsls	r6, r6, #7
    534c:	3040      	adds	r0, #64	; 0x40
    534e:	4383      	bics	r3, r0
    5350:	4333      	orrs	r3, r6
    5352:	3879      	subs	r0, #121	; 0x79
    5354:	4005      	ands	r5, r0
    5356:	022d      	lsls	r5, r5, #8
    5358:	4809      	ldr	r0, [pc, #36]	; (5380 <system_clock_source_xosc32k_set_config+0x94>)
    535a:	4003      	ands	r3, r0
    535c:	432b      	orrs	r3, r5
    535e:	4021      	ands	r1, r4
    5360:	0309      	lsls	r1, r1, #12
    5362:	4808      	ldr	r0, [pc, #32]	; (5384 <system_clock_source_xosc32k_set_config+0x98>)
    5364:	4003      	ands	r3, r0
    5366:	430b      	orrs	r3, r1
    5368:	4652      	mov	r2, sl
    536a:	6153      	str	r3, [r2, #20]
}
    536c:	bc1c      	pop	{r2, r3, r4}
    536e:	4690      	mov	r8, r2
    5370:	4699      	mov	r9, r3
    5372:	46a2      	mov	sl, r4
    5374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5376:	46c0      	nop			; (mov r8, r8)
    5378:	40001000 	.word	0x40001000
    537c:	20000ae4 	.word	0x20000ae4
    5380:	fffff8ff 	.word	0xfffff8ff
    5384:	ffffefff 	.word	0xffffefff

00005388 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5388:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    538a:	7a83      	ldrb	r3, [r0, #10]
    538c:	069b      	lsls	r3, r3, #26
    538e:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    5390:	8982      	ldrh	r2, [r0, #12]
    5392:	0592      	lsls	r2, r2, #22
    5394:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5396:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    5398:	491a      	ldr	r1, [pc, #104]	; (5404 <system_clock_source_dfll_set_config+0x7c>)
    539a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    539c:	7a03      	ldrb	r3, [r0, #8]
    539e:	7a42      	ldrb	r2, [r0, #9]
    53a0:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    53a2:	8882      	ldrh	r2, [r0, #4]
    53a4:	88c4      	ldrh	r4, [r0, #6]
    53a6:	4322      	orrs	r2, r4
    53a8:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    53aa:	7842      	ldrb	r2, [r0, #1]
    53ac:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    53ae:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    53b0:	7882      	ldrb	r2, [r0, #2]
    53b2:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    53b4:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    53b6:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    53b8:	7803      	ldrb	r3, [r0, #0]
    53ba:	2b04      	cmp	r3, #4
    53bc:	d011      	beq.n	53e2 <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    53be:	2b20      	cmp	r3, #32
    53c0:	d10e      	bne.n	53e0 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    53c2:	7b83      	ldrb	r3, [r0, #14]
    53c4:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    53c6:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    53c8:	4313      	orrs	r3, r2
    53ca:	8a02      	ldrh	r2, [r0, #16]
    53cc:	0412      	lsls	r2, r2, #16
    53ce:	490e      	ldr	r1, [pc, #56]	; (5408 <system_clock_source_dfll_set_config+0x80>)
    53d0:	400a      	ands	r2, r1
    53d2:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    53d4:	4a0b      	ldr	r2, [pc, #44]	; (5404 <system_clock_source_dfll_set_config+0x7c>)
    53d6:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    53d8:	6811      	ldr	r1, [r2, #0]
    53da:	4b0c      	ldr	r3, [pc, #48]	; (540c <system_clock_source_dfll_set_config+0x84>)
    53dc:	430b      	orrs	r3, r1
    53de:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    53e0:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    53e2:	7b83      	ldrb	r3, [r0, #14]
    53e4:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    53e6:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    53e8:	4313      	orrs	r3, r2
    53ea:	8a02      	ldrh	r2, [r0, #16]
    53ec:	0412      	lsls	r2, r2, #16
    53ee:	4906      	ldr	r1, [pc, #24]	; (5408 <system_clock_source_dfll_set_config+0x80>)
    53f0:	400a      	ands	r2, r1
    53f2:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    53f4:	4a03      	ldr	r2, [pc, #12]	; (5404 <system_clock_source_dfll_set_config+0x7c>)
    53f6:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    53f8:	6813      	ldr	r3, [r2, #0]
    53fa:	2104      	movs	r1, #4
    53fc:	430b      	orrs	r3, r1
    53fe:	6013      	str	r3, [r2, #0]
    5400:	e7ee      	b.n	53e0 <system_clock_source_dfll_set_config+0x58>
    5402:	46c0      	nop			; (mov r8, r8)
    5404:	20000ae4 	.word	0x20000ae4
    5408:	03ff0000 	.word	0x03ff0000
    540c:	00000424 	.word	0x00000424

00005410 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    5410:	2808      	cmp	r0, #8
    5412:	d803      	bhi.n	541c <system_clock_source_enable+0xc>
    5414:	0080      	lsls	r0, r0, #2
    5416:	4b29      	ldr	r3, [pc, #164]	; (54bc <system_clock_source_enable+0xac>)
    5418:	581b      	ldr	r3, [r3, r0]
    541a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    541c:	2017      	movs	r0, #23
    541e:	e04b      	b.n	54b8 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    5420:	4a27      	ldr	r2, [pc, #156]	; (54c0 <system_clock_source_enable+0xb0>)
    5422:	7d13      	ldrb	r3, [r2, #20]
    5424:	2102      	movs	r1, #2
    5426:	430b      	orrs	r3, r1
    5428:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    542a:	2000      	movs	r0, #0
    542c:	e044      	b.n	54b8 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    542e:	4a25      	ldr	r2, [pc, #148]	; (54c4 <system_clock_source_enable+0xb4>)
    5430:	6993      	ldr	r3, [r2, #24]
    5432:	2102      	movs	r1, #2
    5434:	430b      	orrs	r3, r1
    5436:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    5438:	2000      	movs	r0, #0
		break;
    543a:	e03d      	b.n	54b8 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    543c:	4a20      	ldr	r2, [pc, #128]	; (54c0 <system_clock_source_enable+0xb0>)
    543e:	8a13      	ldrh	r3, [r2, #16]
    5440:	2102      	movs	r1, #2
    5442:	430b      	orrs	r3, r1
    5444:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    5446:	2000      	movs	r0, #0
		break;
    5448:	e036      	b.n	54b8 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    544a:	4a1e      	ldr	r2, [pc, #120]	; (54c4 <system_clock_source_enable+0xb4>)
    544c:	6953      	ldr	r3, [r2, #20]
    544e:	2102      	movs	r1, #2
    5450:	430b      	orrs	r3, r1
    5452:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    5454:	2000      	movs	r0, #0
		break;
    5456:	e02f      	b.n	54b8 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    5458:	491b      	ldr	r1, [pc, #108]	; (54c8 <system_clock_source_enable+0xb8>)
    545a:	680b      	ldr	r3, [r1, #0]
    545c:	2202      	movs	r2, #2
    545e:	4313      	orrs	r3, r2
    5460:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    5462:	4b17      	ldr	r3, [pc, #92]	; (54c0 <system_clock_source_enable+0xb0>)
    5464:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    5466:	0019      	movs	r1, r3
    5468:	32fe      	adds	r2, #254	; 0xfe
    546a:	68cb      	ldr	r3, [r1, #12]
    546c:	4213      	tst	r3, r2
    546e:	d0fc      	beq.n	546a <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5470:	4a15      	ldr	r2, [pc, #84]	; (54c8 <system_clock_source_enable+0xb8>)
    5472:	6891      	ldr	r1, [r2, #8]
    5474:	4b12      	ldr	r3, [pc, #72]	; (54c0 <system_clock_source_enable+0xb0>)
    5476:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5478:	6852      	ldr	r2, [r2, #4]
    547a:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    547c:	2200      	movs	r2, #0
    547e:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    5480:	0019      	movs	r1, r3
    5482:	3201      	adds	r2, #1
    5484:	32ff      	adds	r2, #255	; 0xff
    5486:	68cb      	ldr	r3, [r1, #12]
    5488:	4213      	tst	r3, r2
    548a:	d0fc      	beq.n	5486 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    548c:	4b0e      	ldr	r3, [pc, #56]	; (54c8 <system_clock_source_enable+0xb8>)
    548e:	681b      	ldr	r3, [r3, #0]
    5490:	b29b      	uxth	r3, r3
    5492:	4a0b      	ldr	r2, [pc, #44]	; (54c0 <system_clock_source_enable+0xb0>)
    5494:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    5496:	2000      	movs	r0, #0
    5498:	e00e      	b.n	54b8 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    549a:	4909      	ldr	r1, [pc, #36]	; (54c0 <system_clock_source_enable+0xb0>)
    549c:	2228      	movs	r2, #40	; 0x28
    549e:	5c8b      	ldrb	r3, [r1, r2]
    54a0:	2002      	movs	r0, #2
    54a2:	4303      	orrs	r3, r0
    54a4:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    54a6:	0008      	movs	r0, r1
    54a8:	2138      	movs	r1, #56	; 0x38
    54aa:	3a26      	subs	r2, #38	; 0x26
    54ac:	5c43      	ldrb	r3, [r0, r1]
    54ae:	4213      	tst	r3, r2
    54b0:	d1fc      	bne.n	54ac <system_clock_source_enable+0x9c>
	return STATUS_OK;
    54b2:	2000      	movs	r0, #0
    54b4:	e000      	b.n	54b8 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    54b6:	2000      	movs	r0, #0
}
    54b8:	4770      	bx	lr
    54ba:	46c0      	nop			; (mov r8, r8)
    54bc:	0001decc 	.word	0x0001decc
    54c0:	40000c00 	.word	0x40000c00
    54c4:	40001000 	.word	0x40001000
    54c8:	20000ae4 	.word	0x20000ae4

000054cc <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    54cc:	2808      	cmp	r0, #8
    54ce:	d832      	bhi.n	5536 <system_clock_source_disable+0x6a>
    54d0:	0080      	lsls	r0, r0, #2
    54d2:	4b1a      	ldr	r3, [pc, #104]	; (553c <system_clock_source_disable+0x70>)
    54d4:	581b      	ldr	r3, [r3, r0]
    54d6:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    54d8:	4a19      	ldr	r2, [pc, #100]	; (5540 <system_clock_source_disable+0x74>)
    54da:	7d13      	ldrb	r3, [r2, #20]
    54dc:	2102      	movs	r1, #2
    54de:	438b      	bics	r3, r1
    54e0:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    54e2:	2000      	movs	r0, #0
}
    54e4:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    54e6:	4a17      	ldr	r2, [pc, #92]	; (5544 <system_clock_source_disable+0x78>)
    54e8:	6993      	ldr	r3, [r2, #24]
    54ea:	2102      	movs	r1, #2
    54ec:	438b      	bics	r3, r1
    54ee:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    54f0:	2000      	movs	r0, #0
		break;
    54f2:	e7f7      	b.n	54e4 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    54f4:	4a12      	ldr	r2, [pc, #72]	; (5540 <system_clock_source_disable+0x74>)
    54f6:	8a13      	ldrh	r3, [r2, #16]
    54f8:	2102      	movs	r1, #2
    54fa:	438b      	bics	r3, r1
    54fc:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    54fe:	2000      	movs	r0, #0
		break;
    5500:	e7f0      	b.n	54e4 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    5502:	4a10      	ldr	r2, [pc, #64]	; (5544 <system_clock_source_disable+0x78>)
    5504:	6953      	ldr	r3, [r2, #20]
    5506:	2102      	movs	r1, #2
    5508:	438b      	bics	r3, r1
    550a:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    550c:	2000      	movs	r0, #0
		break;
    550e:	e7e9      	b.n	54e4 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    5510:	4b0d      	ldr	r3, [pc, #52]	; (5548 <system_clock_source_disable+0x7c>)
    5512:	681a      	ldr	r2, [r3, #0]
    5514:	2102      	movs	r1, #2
    5516:	438a      	bics	r2, r1
    5518:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    551a:	681b      	ldr	r3, [r3, #0]
    551c:	b29b      	uxth	r3, r3
    551e:	4a08      	ldr	r2, [pc, #32]	; (5540 <system_clock_source_disable+0x74>)
    5520:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    5522:	2000      	movs	r0, #0
		break;
    5524:	e7de      	b.n	54e4 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    5526:	4906      	ldr	r1, [pc, #24]	; (5540 <system_clock_source_disable+0x74>)
    5528:	2228      	movs	r2, #40	; 0x28
    552a:	5c8b      	ldrb	r3, [r1, r2]
    552c:	2002      	movs	r0, #2
    552e:	4383      	bics	r3, r0
    5530:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    5532:	2000      	movs	r0, #0
		break;
    5534:	e7d6      	b.n	54e4 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    5536:	2017      	movs	r0, #23
    5538:	e7d4      	b.n	54e4 <system_clock_source_disable+0x18>
    553a:	46c0      	nop			; (mov r8, r8)
    553c:	0001def0 	.word	0x0001def0
    5540:	40000c00 	.word	0x40000c00
    5544:	40001000 	.word	0x40001000
    5548:	20000ae4 	.word	0x20000ae4

0000554c <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    554c:	b5f0      	push	{r4, r5, r6, r7, lr}
    554e:	46ce      	mov	lr, r9
    5550:	4647      	mov	r7, r8
    5552:	b580      	push	{r7, lr}
    5554:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    5556:	2280      	movs	r2, #128	; 0x80
    5558:	0052      	lsls	r2, r2, #1
    555a:	4b76      	ldr	r3, [pc, #472]	; (5734 <system_clock_init+0x1e8>)
    555c:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    555e:	3afd      	subs	r2, #253	; 0xfd
    5560:	4b75      	ldr	r3, [pc, #468]	; (5738 <system_clock_init+0x1ec>)
    5562:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5564:	4a75      	ldr	r2, [pc, #468]	; (573c <system_clock_init+0x1f0>)
    5566:	6853      	ldr	r3, [r2, #4]
    5568:	211e      	movs	r1, #30
    556a:	438b      	bics	r3, r1
    556c:	391a      	subs	r1, #26
    556e:	430b      	orrs	r3, r1
    5570:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    5572:	2380      	movs	r3, #128	; 0x80
    5574:	05db      	lsls	r3, r3, #23
    5576:	789b      	ldrb	r3, [r3, #2]
    5578:	2b02      	cmp	r3, #2
    557a:	d00f      	beq.n	559c <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    557c:	2380      	movs	r3, #128	; 0x80
    557e:	05db      	lsls	r3, r3, #23
    5580:	789b      	ldrb	r3, [r3, #2]
    5582:	b25b      	sxtb	r3, r3
    5584:	2b00      	cmp	r3, #0
    5586:	db09      	blt.n	559c <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    5588:	2380      	movs	r3, #128	; 0x80
    558a:	05db      	lsls	r3, r3, #23
    558c:	2201      	movs	r2, #1
    558e:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    5590:	3201      	adds	r2, #1
    5592:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    5594:	001a      	movs	r2, r3
    5596:	7993      	ldrb	r3, [r2, #6]
    5598:	2b00      	cmp	r3, #0
    559a:	d0fc      	beq.n	5596 <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    559c:	a809      	add	r0, sp, #36	; 0x24
    559e:	2300      	movs	r3, #0
    55a0:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    55a2:	2280      	movs	r2, #128	; 0x80
    55a4:	0212      	lsls	r2, r2, #8
    55a6:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    55a8:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    55aa:	2201      	movs	r2, #1
    55ac:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    55ae:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    55b0:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    55b2:	3203      	adds	r2, #3
    55b4:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    55b6:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    55b8:	4b61      	ldr	r3, [pc, #388]	; (5740 <system_clock_init+0x1f4>)
    55ba:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    55bc:	2005      	movs	r0, #5
    55be:	4b61      	ldr	r3, [pc, #388]	; (5744 <system_clock_init+0x1f8>)
    55c0:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    55c2:	4961      	ldr	r1, [pc, #388]	; (5748 <system_clock_init+0x1fc>)
    55c4:	2201      	movs	r2, #1
    55c6:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    55c8:	421a      	tst	r2, r3
    55ca:	d0fc      	beq.n	55c6 <system_clock_init+0x7a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    55cc:	a901      	add	r1, sp, #4
    55ce:	2501      	movs	r5, #1
    55d0:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    55d2:	2400      	movs	r4, #0
    55d4:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    55d6:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    55d8:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    55da:	2303      	movs	r3, #3
    55dc:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    55de:	2000      	movs	r0, #0
    55e0:	4b5a      	ldr	r3, [pc, #360]	; (574c <system_clock_init+0x200>)
    55e2:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    55e4:	2006      	movs	r0, #6
    55e6:	4b5a      	ldr	r3, [pc, #360]	; (5750 <system_clock_init+0x204>)
    55e8:	4798      	blx	r3
	config->run_in_standby  = false;
    55ea:	466b      	mov	r3, sp
    55ec:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    55ee:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    55f0:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    55f2:	4668      	mov	r0, sp
    55f4:	4b57      	ldr	r3, [pc, #348]	; (5754 <system_clock_init+0x208>)
    55f6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    55f8:	2006      	movs	r0, #6
    55fa:	4b52      	ldr	r3, [pc, #328]	; (5744 <system_clock_init+0x1f8>)
    55fc:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    55fe:	494d      	ldr	r1, [pc, #308]	; (5734 <system_clock_init+0x1e8>)
    5600:	2210      	movs	r2, #16
    5602:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    5604:	421a      	tst	r2, r3
    5606:	d0fc      	beq.n	5602 <system_clock_init+0xb6>
	config->division_factor    = 1;
    5608:	a901      	add	r1, sp, #4
    560a:	2301      	movs	r3, #1
    560c:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    560e:	2400      	movs	r4, #0
    5610:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    5612:	3305      	adds	r3, #5
    5614:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    5616:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    5618:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    561a:	2000      	movs	r0, #0
    561c:	4b4b      	ldr	r3, [pc, #300]	; (574c <system_clock_init+0x200>)
    561e:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5620:	ab04      	add	r3, sp, #16
    5622:	2200      	movs	r2, #0
    5624:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5626:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5628:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    562a:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    562c:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    562e:	213f      	movs	r1, #63	; 0x3f
    5630:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    5632:	393b      	subs	r1, #59	; 0x3b
    5634:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    5636:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    5638:	4b47      	ldr	r3, [pc, #284]	; (5758 <system_clock_init+0x20c>)
    563a:	681b      	ldr	r3, [r3, #0]
    563c:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    563e:	2b3f      	cmp	r3, #63	; 0x3f
    5640:	d100      	bne.n	5644 <system_clock_init+0xf8>
    5642:	e074      	b.n	572e <system_clock_init+0x1e2>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    5644:	a804      	add	r0, sp, #16
    5646:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    5648:	23b7      	movs	r3, #183	; 0xb7
    564a:	00db      	lsls	r3, r3, #3
    564c:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    564e:	2307      	movs	r3, #7
    5650:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    5652:	3338      	adds	r3, #56	; 0x38
    5654:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    5656:	4b41      	ldr	r3, [pc, #260]	; (575c <system_clock_init+0x210>)
    5658:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    565a:	4b41      	ldr	r3, [pc, #260]	; (5760 <system_clock_init+0x214>)
    565c:	4798      	blx	r3
	config->division_factor    = 1;
    565e:	ac01      	add	r4, sp, #4
    5660:	2601      	movs	r6, #1
    5662:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    5664:	2500      	movs	r5, #0
    5666:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    5668:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    566a:	2305      	movs	r3, #5
    566c:	4699      	mov	r9, r3
    566e:	7023      	strb	r3, [r4, #0]
    5670:	7226      	strb	r6, [r4, #8]
    5672:	0021      	movs	r1, r4
    5674:	2001      	movs	r0, #1
    5676:	4b35      	ldr	r3, [pc, #212]	; (574c <system_clock_init+0x200>)
    5678:	4698      	mov	r8, r3
    567a:	4798      	blx	r3
    567c:	2001      	movs	r0, #1
    567e:	4f39      	ldr	r7, [pc, #228]	; (5764 <system_clock_init+0x218>)
    5680:	47b8      	blx	r7
	config->high_when_disabled = false;
    5682:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    5684:	2306      	movs	r3, #6
    5686:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    5688:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    568a:	7265      	strb	r5, [r4, #9]
    568c:	464b      	mov	r3, r9
    568e:	6063      	str	r3, [r4, #4]
    5690:	0021      	movs	r1, r4
    5692:	2002      	movs	r0, #2
    5694:	47c0      	blx	r8
    5696:	2002      	movs	r0, #2
    5698:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    569a:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    569c:	0021      	movs	r1, r4
    569e:	2000      	movs	r0, #0
    56a0:	4b31      	ldr	r3, [pc, #196]	; (5768 <system_clock_init+0x21c>)
    56a2:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    56a4:	2000      	movs	r0, #0
    56a6:	4b31      	ldr	r3, [pc, #196]	; (576c <system_clock_init+0x220>)
    56a8:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    56aa:	2007      	movs	r0, #7
    56ac:	4b25      	ldr	r3, [pc, #148]	; (5744 <system_clock_init+0x1f8>)
    56ae:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    56b0:	4920      	ldr	r1, [pc, #128]	; (5734 <system_clock_init+0x1e8>)
    56b2:	22d0      	movs	r2, #208	; 0xd0
    56b4:	0112      	lsls	r2, r2, #4
    56b6:	68cb      	ldr	r3, [r1, #12]
    56b8:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    56ba:	4293      	cmp	r3, r2
    56bc:	d1fb      	bne.n	56b6 <system_clock_init+0x16a>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    56be:	4c2c      	ldr	r4, [pc, #176]	; (5770 <system_clock_init+0x224>)
    56c0:	2301      	movs	r3, #1
    56c2:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    56c4:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    56c6:	7123      	strb	r3, [r4, #4]
	config->high_when_disabled = false;
    56c8:	a901      	add	r1, sp, #4
    56ca:	2300      	movs	r3, #0
    56cc:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    56ce:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    56d0:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    56d2:	3307      	adds	r3, #7
    56d4:	700b      	strb	r3, [r1, #0]
    56d6:	3b01      	subs	r3, #1
    56d8:	604b      	str	r3, [r1, #4]
    56da:	2000      	movs	r0, #0
    56dc:	4b1b      	ldr	r3, [pc, #108]	; (574c <system_clock_init+0x200>)
    56de:	4798      	blx	r3
    56e0:	2000      	movs	r0, #0
    56e2:	4b20      	ldr	r3, [pc, #128]	; (5764 <system_clock_init+0x218>)
    56e4:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    56e6:	2000      	movs	r0, #0
    56e8:	4b22      	ldr	r3, [pc, #136]	; (5774 <system_clock_init+0x228>)
    56ea:	4798      	blx	r3
    56ec:	7921      	ldrb	r1, [r4, #4]
    56ee:	b2c9      	uxtb	r1, r1
    56f0:	4b21      	ldr	r3, [pc, #132]	; (5778 <system_clock_init+0x22c>)
    56f2:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    56f4:	4b21      	ldr	r3, [pc, #132]	; (577c <system_clock_init+0x230>)
    56f6:	4298      	cmp	r0, r3
    56f8:	d814      	bhi.n	5724 <system_clock_init+0x1d8>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    56fa:	2380      	movs	r3, #128	; 0x80
    56fc:	05db      	lsls	r3, r3, #23
    56fe:	789b      	ldrb	r3, [r3, #2]
    5700:	2b00      	cmp	r3, #0
    5702:	d00f      	beq.n	5724 <system_clock_init+0x1d8>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    5704:	2380      	movs	r3, #128	; 0x80
    5706:	05db      	lsls	r3, r3, #23
    5708:	789b      	ldrb	r3, [r3, #2]
    570a:	b25b      	sxtb	r3, r3
    570c:	2b00      	cmp	r3, #0
    570e:	db09      	blt.n	5724 <system_clock_init+0x1d8>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    5710:	2380      	movs	r3, #128	; 0x80
    5712:	05db      	lsls	r3, r3, #23
    5714:	2201      	movs	r2, #1
    5716:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    5718:	2200      	movs	r2, #0
    571a:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    571c:	001a      	movs	r2, r3
    571e:	7993      	ldrb	r3, [r2, #6]
    5720:	2b00      	cmp	r3, #0
    5722:	d0fc      	beq.n	571e <system_clock_init+0x1d2>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    5724:	b00d      	add	sp, #52	; 0x34
    5726:	bc0c      	pop	{r2, r3}
    5728:	4690      	mov	r8, r2
    572a:	4699      	mov	r9, r3
    572c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    572e:	3b20      	subs	r3, #32
    5730:	e788      	b.n	5644 <system_clock_init+0xf8>
    5732:	46c0      	nop			; (mov r8, r8)
    5734:	40000c00 	.word	0x40000c00
    5738:	40001400 	.word	0x40001400
    573c:	41004000 	.word	0x41004000
    5740:	000052ed 	.word	0x000052ed
    5744:	00005411 	.word	0x00005411
    5748:	40001000 	.word	0x40001000
    574c:	000057a5 	.word	0x000057a5
    5750:	000054cd 	.word	0x000054cd
    5754:	000052b9 	.word	0x000052b9
    5758:	00806020 	.word	0x00806020
    575c:	00005389 	.word	0x00005389
    5760:	00005781 	.word	0x00005781
    5764:	00005851 	.word	0x00005851
    5768:	0000596d 	.word	0x0000596d
    576c:	000058fd 	.word	0x000058fd
    5770:	40000400 	.word	0x40000400
    5774:	00005891 	.word	0x00005891
    5778:	00014b71 	.word	0x00014b71
    577c:	00b71b00 	.word	0x00b71b00

00005780 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    5780:	4a06      	ldr	r2, [pc, #24]	; (579c <system_gclk_init+0x1c>)
    5782:	6953      	ldr	r3, [r2, #20]
    5784:	2140      	movs	r1, #64	; 0x40
    5786:	430b      	orrs	r3, r1
    5788:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    578a:	2201      	movs	r2, #1
    578c:	4b04      	ldr	r3, [pc, #16]	; (57a0 <system_gclk_init+0x20>)
    578e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    5790:	0019      	movs	r1, r3
    5792:	780b      	ldrb	r3, [r1, #0]
    5794:	4213      	tst	r3, r2
    5796:	d1fc      	bne.n	5792 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    5798:	4770      	bx	lr
    579a:	46c0      	nop			; (mov r8, r8)
    579c:	40000400 	.word	0x40000400
    57a0:	40001800 	.word	0x40001800

000057a4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    57a4:	b570      	push	{r4, r5, r6, lr}
    57a6:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    57a8:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    57aa:	784b      	ldrb	r3, [r1, #1]
    57ac:	2b00      	cmp	r3, #0
    57ae:	d002      	beq.n	57b6 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    57b0:	2380      	movs	r3, #128	; 0x80
    57b2:	00db      	lsls	r3, r3, #3
    57b4:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    57b6:	7a4b      	ldrb	r3, [r1, #9]
    57b8:	2b00      	cmp	r3, #0
    57ba:	d002      	beq.n	57c2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    57bc:	2380      	movs	r3, #128	; 0x80
    57be:	011b      	lsls	r3, r3, #4
    57c0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    57c2:	6848      	ldr	r0, [r1, #4]
    57c4:	2801      	cmp	r0, #1
    57c6:	d90f      	bls.n	57e8 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    57c8:	1e43      	subs	r3, r0, #1
    57ca:	4218      	tst	r0, r3
    57cc:	d131      	bne.n	5832 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    57ce:	2802      	cmp	r0, #2
    57d0:	d92d      	bls.n	582e <system_gclk_gen_set_config+0x8a>
    57d2:	2302      	movs	r3, #2
    57d4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    57d6:	3201      	adds	r2, #1
						mask <<= 1) {
    57d8:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    57da:	4298      	cmp	r0, r3
    57dc:	d8fb      	bhi.n	57d6 <system_gclk_gen_set_config+0x32>
    57de:	2380      	movs	r3, #128	; 0x80
    57e0:	015b      	lsls	r3, r3, #5
    57e2:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    57e4:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    57e6:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    57e8:	7a0b      	ldrb	r3, [r1, #8]
    57ea:	2b00      	cmp	r3, #0
    57ec:	d002      	beq.n	57f4 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    57ee:	2380      	movs	r3, #128	; 0x80
    57f0:	019b      	lsls	r3, r3, #6
    57f2:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    57f4:	2604      	movs	r6, #4
    57f6:	40a6      	lsls	r6, r4
    57f8:	4911      	ldr	r1, [pc, #68]	; (5840 <system_gclk_gen_set_config+0x9c>)
    57fa:	4a12      	ldr	r2, [pc, #72]	; (5844 <system_gclk_gen_set_config+0xa0>)
    57fc:	684b      	ldr	r3, [r1, #4]
    57fe:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    5800:	421e      	tst	r6, r3
    5802:	d1fb      	bne.n	57fc <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    5804:	4b10      	ldr	r3, [pc, #64]	; (5848 <system_gclk_gen_set_config+0xa4>)
    5806:	4798      	blx	r3
    5808:	00a4      	lsls	r4, r4, #2
    580a:	4b0d      	ldr	r3, [pc, #52]	; (5840 <system_gclk_gen_set_config+0x9c>)
    580c:	469c      	mov	ip, r3
    580e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    5810:	6a22      	ldr	r2, [r4, #32]
    5812:	2380      	movs	r3, #128	; 0x80
    5814:	005b      	lsls	r3, r3, #1
    5816:	401a      	ands	r2, r3
    5818:	432a      	orrs	r2, r5
    581a:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    581c:	4661      	mov	r1, ip
    581e:	4a09      	ldr	r2, [pc, #36]	; (5844 <system_gclk_gen_set_config+0xa0>)
    5820:	684b      	ldr	r3, [r1, #4]
    5822:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    5824:	421e      	tst	r6, r3
    5826:	d1fb      	bne.n	5820 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    5828:	4b08      	ldr	r3, [pc, #32]	; (584c <system_gclk_gen_set_config+0xa8>)
    582a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    582c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    582e:	2200      	movs	r2, #0
    5830:	e7d5      	b.n	57de <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    5832:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    5834:	2380      	movs	r3, #128	; 0x80
    5836:	009b      	lsls	r3, r3, #2
    5838:	4318      	orrs	r0, r3
    583a:	4305      	orrs	r5, r0
    583c:	e7d4      	b.n	57e8 <system_gclk_gen_set_config+0x44>
    583e:	46c0      	nop			; (mov r8, r8)
    5840:	40001800 	.word	0x40001800
    5844:	000007fc 	.word	0x000007fc
    5848:	00002a0d 	.word	0x00002a0d
    584c:	00002a4d 	.word	0x00002a4d

00005850 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    5850:	b510      	push	{r4, lr}
    5852:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    5854:	2204      	movs	r2, #4
    5856:	4082      	lsls	r2, r0
    5858:	4809      	ldr	r0, [pc, #36]	; (5880 <system_gclk_gen_enable+0x30>)
    585a:	490a      	ldr	r1, [pc, #40]	; (5884 <system_gclk_gen_enable+0x34>)
    585c:	6843      	ldr	r3, [r0, #4]
    585e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    5860:	421a      	tst	r2, r3
    5862:	d1fb      	bne.n	585c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    5864:	4b08      	ldr	r3, [pc, #32]	; (5888 <system_gclk_gen_enable+0x38>)
    5866:	4798      	blx	r3
    5868:	00a4      	lsls	r4, r4, #2
    586a:	4b05      	ldr	r3, [pc, #20]	; (5880 <system_gclk_gen_enable+0x30>)
    586c:	469c      	mov	ip, r3
    586e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    5870:	6a22      	ldr	r2, [r4, #32]
    5872:	2380      	movs	r3, #128	; 0x80
    5874:	005b      	lsls	r3, r3, #1
    5876:	4313      	orrs	r3, r2
    5878:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    587a:	4b04      	ldr	r3, [pc, #16]	; (588c <system_gclk_gen_enable+0x3c>)
    587c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    587e:	bd10      	pop	{r4, pc}
    5880:	40001800 	.word	0x40001800
    5884:	000007fc 	.word	0x000007fc
    5888:	00002a0d 	.word	0x00002a0d
    588c:	00002a4d 	.word	0x00002a4d

00005890 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    5890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5892:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    5894:	2204      	movs	r2, #4
    5896:	4082      	lsls	r2, r0
    5898:	4812      	ldr	r0, [pc, #72]	; (58e4 <system_gclk_gen_get_hz+0x54>)
    589a:	4913      	ldr	r1, [pc, #76]	; (58e8 <system_gclk_gen_get_hz+0x58>)
    589c:	6843      	ldr	r3, [r0, #4]
    589e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    58a0:	421a      	tst	r2, r3
    58a2:	d1fb      	bne.n	589c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    58a4:	4b11      	ldr	r3, [pc, #68]	; (58ec <system_gclk_gen_get_hz+0x5c>)
    58a6:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    58a8:	4f0e      	ldr	r7, [pc, #56]	; (58e4 <system_gclk_gen_get_hz+0x54>)
    58aa:	3408      	adds	r4, #8
    58ac:	00a4      	lsls	r4, r4, #2
    58ae:	59e0      	ldr	r0, [r4, r7]
    58b0:	0700      	lsls	r0, r0, #28
    58b2:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    58b4:	4b0e      	ldr	r3, [pc, #56]	; (58f0 <system_gclk_gen_get_hz+0x60>)
    58b6:	4798      	blx	r3
    58b8:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    58ba:	59e5      	ldr	r5, [r4, r7]
    58bc:	04ed      	lsls	r5, r5, #19
    58be:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    58c0:	59e4      	ldr	r4, [r4, r7]
    58c2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    58c4:	4b0b      	ldr	r3, [pc, #44]	; (58f4 <system_gclk_gen_get_hz+0x64>)
    58c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    58c8:	2d00      	cmp	r5, #0
    58ca:	d107      	bne.n	58dc <system_gclk_gen_get_hz+0x4c>
    58cc:	2c01      	cmp	r4, #1
    58ce:	d907      	bls.n	58e0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    58d0:	0021      	movs	r1, r4
    58d2:	0030      	movs	r0, r6
    58d4:	4b08      	ldr	r3, [pc, #32]	; (58f8 <system_gclk_gen_get_hz+0x68>)
    58d6:	4798      	blx	r3
    58d8:	0006      	movs	r6, r0
    58da:	e001      	b.n	58e0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    58dc:	3401      	adds	r4, #1
    58de:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    58e0:	0030      	movs	r0, r6
    58e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58e4:	40001800 	.word	0x40001800
    58e8:	000007fc 	.word	0x000007fc
    58ec:	00002a0d 	.word	0x00002a0d
    58f0:	00005225 	.word	0x00005225
    58f4:	00002a4d 	.word	0x00002a4d
    58f8:	00014b71 	.word	0x00014b71

000058fc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    58fc:	b510      	push	{r4, lr}
    58fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5900:	4b09      	ldr	r3, [pc, #36]	; (5928 <system_gclk_chan_enable+0x2c>)
    5902:	4798      	blx	r3
    5904:	00a0      	lsls	r0, r4, #2
    5906:	4b09      	ldr	r3, [pc, #36]	; (592c <system_gclk_chan_enable+0x30>)
    5908:	469c      	mov	ip, r3
    590a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    590c:	2280      	movs	r2, #128	; 0x80
    590e:	5883      	ldr	r3, [r0, r2]
    5910:	2140      	movs	r1, #64	; 0x40
    5912:	430b      	orrs	r3, r1
    5914:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    5916:	3140      	adds	r1, #64	; 0x40
    5918:	3a40      	subs	r2, #64	; 0x40
    591a:	5843      	ldr	r3, [r0, r1]
    591c:	421a      	tst	r2, r3
    591e:	d0fc      	beq.n	591a <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    5920:	4b03      	ldr	r3, [pc, #12]	; (5930 <system_gclk_chan_enable+0x34>)
    5922:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    5924:	bd10      	pop	{r4, pc}
    5926:	46c0      	nop			; (mov r8, r8)
    5928:	00002a0d 	.word	0x00002a0d
    592c:	40001800 	.word	0x40001800
    5930:	00002a4d 	.word	0x00002a4d

00005934 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    5934:	b510      	push	{r4, lr}
    5936:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5938:	4b09      	ldr	r3, [pc, #36]	; (5960 <system_gclk_chan_disable+0x2c>)
    593a:	4798      	blx	r3
    593c:	00a0      	lsls	r0, r4, #2
    593e:	4b09      	ldr	r3, [pc, #36]	; (5964 <system_gclk_chan_disable+0x30>)
    5940:	469c      	mov	ip, r3
    5942:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    5944:	2280      	movs	r2, #128	; 0x80
    5946:	5883      	ldr	r3, [r0, r2]
    5948:	2140      	movs	r1, #64	; 0x40
    594a:	438b      	bics	r3, r1
    594c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    594e:	3140      	adds	r1, #64	; 0x40
    5950:	3a40      	subs	r2, #64	; 0x40
    5952:	5843      	ldr	r3, [r0, r1]
    5954:	421a      	tst	r2, r3
    5956:	d1fc      	bne.n	5952 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    5958:	4b03      	ldr	r3, [pc, #12]	; (5968 <system_gclk_chan_disable+0x34>)
    595a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    595c:	bd10      	pop	{r4, pc}
    595e:	46c0      	nop			; (mov r8, r8)
    5960:	00002a0d 	.word	0x00002a0d
    5964:	40001800 	.word	0x40001800
    5968:	00002a4d 	.word	0x00002a4d

0000596c <system_gclk_chan_set_config>:
{
    596c:	b570      	push	{r4, r5, r6, lr}
    596e:	0004      	movs	r4, r0
    5970:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    5972:	4b05      	ldr	r3, [pc, #20]	; (5988 <system_gclk_chan_set_config+0x1c>)
    5974:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    5976:	782a      	ldrb	r2, [r5, #0]
    5978:	230f      	movs	r3, #15
    597a:	4013      	ands	r3, r2
    597c:	3420      	adds	r4, #32
    597e:	00a4      	lsls	r4, r4, #2
    5980:	4a02      	ldr	r2, [pc, #8]	; (598c <system_gclk_chan_set_config+0x20>)
    5982:	50a3      	str	r3, [r4, r2]
}
    5984:	bd70      	pop	{r4, r5, r6, pc}
    5986:	46c0      	nop			; (mov r8, r8)
    5988:	00005935 	.word	0x00005935
    598c:	40001800 	.word	0x40001800

00005990 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    5990:	b510      	push	{r4, lr}
    5992:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    5994:	4b06      	ldr	r3, [pc, #24]	; (59b0 <system_gclk_chan_get_hz+0x20>)
    5996:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    5998:	3420      	adds	r4, #32
    599a:	00a4      	lsls	r4, r4, #2
    599c:	4b05      	ldr	r3, [pc, #20]	; (59b4 <system_gclk_chan_get_hz+0x24>)
    599e:	58e4      	ldr	r4, [r4, r3]
    59a0:	0724      	lsls	r4, r4, #28
    59a2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    59a4:	4b04      	ldr	r3, [pc, #16]	; (59b8 <system_gclk_chan_get_hz+0x28>)
    59a6:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    59a8:	0020      	movs	r0, r4
    59aa:	4b04      	ldr	r3, [pc, #16]	; (59bc <system_gclk_chan_get_hz+0x2c>)
    59ac:	4798      	blx	r3
}
    59ae:	bd10      	pop	{r4, pc}
    59b0:	00002a0d 	.word	0x00002a0d
    59b4:	40001800 	.word	0x40001800
    59b8:	00002a4d 	.word	0x00002a4d
    59bc:	00005891 	.word	0x00005891

000059c0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    59c0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    59c2:	78d3      	ldrb	r3, [r2, #3]
    59c4:	2b00      	cmp	r3, #0
    59c6:	d135      	bne.n	5a34 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    59c8:	7813      	ldrb	r3, [r2, #0]
    59ca:	2b80      	cmp	r3, #128	; 0x80
    59cc:	d029      	beq.n	5a22 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    59ce:	061b      	lsls	r3, r3, #24
    59d0:	2480      	movs	r4, #128	; 0x80
    59d2:	0264      	lsls	r4, r4, #9
    59d4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    59d6:	7854      	ldrb	r4, [r2, #1]
    59d8:	2502      	movs	r5, #2
    59da:	43ac      	bics	r4, r5
    59dc:	d106      	bne.n	59ec <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    59de:	7894      	ldrb	r4, [r2, #2]
    59e0:	2c00      	cmp	r4, #0
    59e2:	d120      	bne.n	5a26 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    59e4:	2480      	movs	r4, #128	; 0x80
    59e6:	02a4      	lsls	r4, r4, #10
    59e8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    59ea:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    59ec:	7854      	ldrb	r4, [r2, #1]
    59ee:	3c01      	subs	r4, #1
    59f0:	2c01      	cmp	r4, #1
    59f2:	d91c      	bls.n	5a2e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    59f4:	040d      	lsls	r5, r1, #16
    59f6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    59f8:	24a0      	movs	r4, #160	; 0xa0
    59fa:	05e4      	lsls	r4, r4, #23
    59fc:	432c      	orrs	r4, r5
    59fe:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a00:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5a02:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5a04:	24d0      	movs	r4, #208	; 0xd0
    5a06:	0624      	lsls	r4, r4, #24
    5a08:	432c      	orrs	r4, r5
    5a0a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a0c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    5a0e:	78d4      	ldrb	r4, [r2, #3]
    5a10:	2c00      	cmp	r4, #0
    5a12:	d122      	bne.n	5a5a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    5a14:	035b      	lsls	r3, r3, #13
    5a16:	d51c      	bpl.n	5a52 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    5a18:	7893      	ldrb	r3, [r2, #2]
    5a1a:	2b01      	cmp	r3, #1
    5a1c:	d01e      	beq.n	5a5c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    5a1e:	6141      	str	r1, [r0, #20]
    5a20:	e017      	b.n	5a52 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    5a22:	2300      	movs	r3, #0
    5a24:	e7d7      	b.n	59d6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    5a26:	24c0      	movs	r4, #192	; 0xc0
    5a28:	02e4      	lsls	r4, r4, #11
    5a2a:	4323      	orrs	r3, r4
    5a2c:	e7dd      	b.n	59ea <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    5a2e:	4c0d      	ldr	r4, [pc, #52]	; (5a64 <_system_pinmux_config+0xa4>)
    5a30:	4023      	ands	r3, r4
    5a32:	e7df      	b.n	59f4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    5a34:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    5a36:	040c      	lsls	r4, r1, #16
    5a38:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    5a3a:	23a0      	movs	r3, #160	; 0xa0
    5a3c:	05db      	lsls	r3, r3, #23
    5a3e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a40:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    5a42:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    5a44:	23d0      	movs	r3, #208	; 0xd0
    5a46:	061b      	lsls	r3, r3, #24
    5a48:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    5a4a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    5a4c:	78d3      	ldrb	r3, [r2, #3]
    5a4e:	2b00      	cmp	r3, #0
    5a50:	d103      	bne.n	5a5a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    5a52:	7853      	ldrb	r3, [r2, #1]
    5a54:	3b01      	subs	r3, #1
    5a56:	2b01      	cmp	r3, #1
    5a58:	d902      	bls.n	5a60 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    5a5a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    5a5c:	6181      	str	r1, [r0, #24]
    5a5e:	e7f8      	b.n	5a52 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    5a60:	6081      	str	r1, [r0, #8]
}
    5a62:	e7fa      	b.n	5a5a <_system_pinmux_config+0x9a>
    5a64:	fffbffff 	.word	0xfffbffff

00005a68 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    5a68:	b510      	push	{r4, lr}
    5a6a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    5a6c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    5a6e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5a70:	2900      	cmp	r1, #0
    5a72:	d104      	bne.n	5a7e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    5a74:	0943      	lsrs	r3, r0, #5
    5a76:	01db      	lsls	r3, r3, #7
    5a78:	4905      	ldr	r1, [pc, #20]	; (5a90 <system_pinmux_pin_set_config+0x28>)
    5a7a:	468c      	mov	ip, r1
    5a7c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    5a7e:	241f      	movs	r4, #31
    5a80:	4020      	ands	r0, r4
    5a82:	2101      	movs	r1, #1
    5a84:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    5a86:	0018      	movs	r0, r3
    5a88:	4b02      	ldr	r3, [pc, #8]	; (5a94 <system_pinmux_pin_set_config+0x2c>)
    5a8a:	4798      	blx	r3
}
    5a8c:	bd10      	pop	{r4, pc}
    5a8e:	46c0      	nop			; (mov r8, r8)
    5a90:	40002800 	.word	0x40002800
    5a94:	000059c1 	.word	0x000059c1

00005a98 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    5a98:	4770      	bx	lr
	...

00005a9c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    5a9c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    5a9e:	4b05      	ldr	r3, [pc, #20]	; (5ab4 <system_init+0x18>)
    5aa0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    5aa2:	4b05      	ldr	r3, [pc, #20]	; (5ab8 <system_init+0x1c>)
    5aa4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    5aa6:	4b05      	ldr	r3, [pc, #20]	; (5abc <system_init+0x20>)
    5aa8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    5aaa:	4b05      	ldr	r3, [pc, #20]	; (5ac0 <system_init+0x24>)
    5aac:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    5aae:	4b05      	ldr	r3, [pc, #20]	; (5ac4 <system_init+0x28>)
    5ab0:	4798      	blx	r3
}
    5ab2:	bd10      	pop	{r4, pc}
    5ab4:	0000554d 	.word	0x0000554d
    5ab8:	00002a7d 	.word	0x00002a7d
    5abc:	00005a99 	.word	0x00005a99
    5ac0:	00003281 	.word	0x00003281
    5ac4:	00005a99 	.word	0x00005a99

00005ac8 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    5ac8:	1c93      	adds	r3, r2, #2
    5aca:	009b      	lsls	r3, r3, #2
    5acc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    5ace:	2a02      	cmp	r2, #2
    5ad0:	d009      	beq.n	5ae6 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    5ad2:	2a03      	cmp	r2, #3
    5ad4:	d00c      	beq.n	5af0 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    5ad6:	2301      	movs	r3, #1
    5ad8:	4093      	lsls	r3, r2
    5ada:	001a      	movs	r2, r3
    5adc:	7e03      	ldrb	r3, [r0, #24]
    5ade:	4313      	orrs	r3, r2
    5ae0:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    5ae2:	2000      	movs	r0, #0
    5ae4:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    5ae6:	7e03      	ldrb	r3, [r0, #24]
    5ae8:	2210      	movs	r2, #16
    5aea:	4313      	orrs	r3, r2
    5aec:	7603      	strb	r3, [r0, #24]
    5aee:	e7f8      	b.n	5ae2 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    5af0:	7e03      	ldrb	r3, [r0, #24]
    5af2:	2220      	movs	r2, #32
    5af4:	4313      	orrs	r3, r2
    5af6:	7603      	strb	r3, [r0, #24]
    5af8:	e7f3      	b.n	5ae2 <tc_register_callback+0x1a>
	...

00005afc <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    5afc:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    5afe:	0080      	lsls	r0, r0, #2
    5b00:	4b16      	ldr	r3, [pc, #88]	; (5b5c <_tc_interrupt_handler+0x60>)
    5b02:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    5b04:	6823      	ldr	r3, [r4, #0]
    5b06:	7a9d      	ldrb	r5, [r3, #10]
    5b08:	7e22      	ldrb	r2, [r4, #24]
    5b0a:	7e63      	ldrb	r3, [r4, #25]
    5b0c:	4013      	ands	r3, r2
    5b0e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    5b10:	07eb      	lsls	r3, r5, #31
    5b12:	d406      	bmi.n	5b22 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    5b14:	07ab      	lsls	r3, r5, #30
    5b16:	d40b      	bmi.n	5b30 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    5b18:	06eb      	lsls	r3, r5, #27
    5b1a:	d410      	bmi.n	5b3e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    5b1c:	06ab      	lsls	r3, r5, #26
    5b1e:	d415      	bmi.n	5b4c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    5b20:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    5b22:	0020      	movs	r0, r4
    5b24:	68a3      	ldr	r3, [r4, #8]
    5b26:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    5b28:	2301      	movs	r3, #1
    5b2a:	6822      	ldr	r2, [r4, #0]
    5b2c:	7293      	strb	r3, [r2, #10]
    5b2e:	e7f1      	b.n	5b14 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    5b30:	0020      	movs	r0, r4
    5b32:	68e3      	ldr	r3, [r4, #12]
    5b34:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    5b36:	2302      	movs	r3, #2
    5b38:	6822      	ldr	r2, [r4, #0]
    5b3a:	7293      	strb	r3, [r2, #10]
    5b3c:	e7ec      	b.n	5b18 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    5b3e:	0020      	movs	r0, r4
    5b40:	6923      	ldr	r3, [r4, #16]
    5b42:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    5b44:	2310      	movs	r3, #16
    5b46:	6822      	ldr	r2, [r4, #0]
    5b48:	7293      	strb	r3, [r2, #10]
    5b4a:	e7e7      	b.n	5b1c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    5b4c:	0020      	movs	r0, r4
    5b4e:	6963      	ldr	r3, [r4, #20]
    5b50:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    5b52:	6823      	ldr	r3, [r4, #0]
    5b54:	2220      	movs	r2, #32
    5b56:	729a      	strb	r2, [r3, #10]
}
    5b58:	e7e2      	b.n	5b20 <_tc_interrupt_handler+0x24>
    5b5a:	46c0      	nop			; (mov r8, r8)
    5b5c:	20001184 	.word	0x20001184

00005b60 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    5b60:	b510      	push	{r4, lr}
    5b62:	2000      	movs	r0, #0
    5b64:	4b01      	ldr	r3, [pc, #4]	; (5b6c <TC0_Handler+0xc>)
    5b66:	4798      	blx	r3
    5b68:	bd10      	pop	{r4, pc}
    5b6a:	46c0      	nop			; (mov r8, r8)
    5b6c:	00005afd 	.word	0x00005afd

00005b70 <TC1_Handler>:
    5b70:	b510      	push	{r4, lr}
    5b72:	2001      	movs	r0, #1
    5b74:	4b01      	ldr	r3, [pc, #4]	; (5b7c <TC1_Handler+0xc>)
    5b76:	4798      	blx	r3
    5b78:	bd10      	pop	{r4, pc}
    5b7a:	46c0      	nop			; (mov r8, r8)
    5b7c:	00005afd 	.word	0x00005afd

00005b80 <TC2_Handler>:
    5b80:	b510      	push	{r4, lr}
    5b82:	2002      	movs	r0, #2
    5b84:	4b01      	ldr	r3, [pc, #4]	; (5b8c <TC2_Handler+0xc>)
    5b86:	4798      	blx	r3
    5b88:	bd10      	pop	{r4, pc}
    5b8a:	46c0      	nop			; (mov r8, r8)
    5b8c:	00005afd 	.word	0x00005afd

00005b90 <TC3_Handler>:
    5b90:	b510      	push	{r4, lr}
    5b92:	2003      	movs	r0, #3
    5b94:	4b01      	ldr	r3, [pc, #4]	; (5b9c <TC3_Handler+0xc>)
    5b96:	4798      	blx	r3
    5b98:	bd10      	pop	{r4, pc}
    5b9a:	46c0      	nop			; (mov r8, r8)
    5b9c:	00005afd 	.word	0x00005afd

00005ba0 <TC4_Handler>:
    5ba0:	b510      	push	{r4, lr}
    5ba2:	2004      	movs	r0, #4
    5ba4:	4b01      	ldr	r3, [pc, #4]	; (5bac <TC4_Handler+0xc>)
    5ba6:	4798      	blx	r3
    5ba8:	bd10      	pop	{r4, pc}
    5baa:	46c0      	nop			; (mov r8, r8)
    5bac:	00005afd 	.word	0x00005afd

00005bb0 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    5bb0:	b530      	push	{r4, r5, lr}
    5bb2:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    5bb4:	a901      	add	r1, sp, #4
    5bb6:	4b0c      	ldr	r3, [pc, #48]	; (5be8 <_tc_get_inst_index+0x38>)
    5bb8:	000a      	movs	r2, r1
    5bba:	cb32      	ldmia	r3!, {r1, r4, r5}
    5bbc:	c232      	stmia	r2!, {r1, r4, r5}
    5bbe:	cb12      	ldmia	r3!, {r1, r4}
    5bc0:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    5bc2:	9b01      	ldr	r3, [sp, #4]
    5bc4:	4298      	cmp	r0, r3
    5bc6:	d00b      	beq.n	5be0 <_tc_get_inst_index+0x30>
    5bc8:	2301      	movs	r3, #1
    5bca:	a901      	add	r1, sp, #4
    5bcc:	009a      	lsls	r2, r3, #2
    5bce:	5852      	ldr	r2, [r2, r1]
    5bd0:	4282      	cmp	r2, r0
    5bd2:	d006      	beq.n	5be2 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    5bd4:	3301      	adds	r3, #1
    5bd6:	2b05      	cmp	r3, #5
    5bd8:	d1f8      	bne.n	5bcc <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    5bda:	2000      	movs	r0, #0
}
    5bdc:	b007      	add	sp, #28
    5bde:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    5be0:	2300      	movs	r3, #0
			return i;
    5be2:	b2d8      	uxtb	r0, r3
    5be4:	e7fa      	b.n	5bdc <_tc_get_inst_index+0x2c>
    5be6:	46c0      	nop			; (mov r8, r8)
    5be8:	0001df3c 	.word	0x0001df3c

00005bec <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    5bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bee:	46c6      	mov	lr, r8
    5bf0:	b500      	push	{lr}
    5bf2:	b08e      	sub	sp, #56	; 0x38
    5bf4:	0004      	movs	r4, r0
    5bf6:	000d      	movs	r5, r1
    5bf8:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    5bfa:	0008      	movs	r0, r1
    5bfc:	4bae      	ldr	r3, [pc, #696]	; (5eb8 <tc_init+0x2cc>)
    5bfe:	4798      	blx	r3
    5c00:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    5c02:	ab0c      	add	r3, sp, #48	; 0x30
    5c04:	221b      	movs	r2, #27
    5c06:	701a      	strb	r2, [r3, #0]
    5c08:	705a      	strb	r2, [r3, #1]
    5c0a:	3201      	adds	r2, #1
    5c0c:	709a      	strb	r2, [r3, #2]
    5c0e:	70da      	strb	r2, [r3, #3]
    5c10:	3201      	adds	r2, #1
    5c12:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    5c14:	a902      	add	r1, sp, #8
    5c16:	4ba9      	ldr	r3, [pc, #676]	; (5ebc <tc_init+0x2d0>)
    5c18:	3314      	adds	r3, #20
    5c1a:	000a      	movs	r2, r1
    5c1c:	cb83      	ldmia	r3!, {r0, r1, r7}
    5c1e:	c283      	stmia	r2!, {r0, r1, r7}
    5c20:	cb83      	ldmia	r3!, {r0, r1, r7}
    5c22:	c283      	stmia	r2!, {r0, r1, r7}
    5c24:	cb83      	ldmia	r3!, {r0, r1, r7}
    5c26:	c283      	stmia	r2!, {r0, r1, r7}
    5c28:	681b      	ldr	r3, [r3, #0]
    5c2a:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    5c2c:	2300      	movs	r3, #0
    5c2e:	60a3      	str	r3, [r4, #8]
    5c30:	60e3      	str	r3, [r4, #12]
    5c32:	6123      	str	r3, [r4, #16]
    5c34:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    5c36:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    5c38:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    5c3a:	4643      	mov	r3, r8
    5c3c:	009a      	lsls	r2, r3, #2
    5c3e:	4ba0      	ldr	r3, [pc, #640]	; (5ec0 <tc_init+0x2d4>)
    5c40:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    5c42:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    5c44:	2334      	movs	r3, #52	; 0x34
    5c46:	5cf3      	ldrb	r3, [r6, r3]
    5c48:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5c4a:	78f3      	ldrb	r3, [r6, #3]
    5c4c:	2b08      	cmp	r3, #8
    5c4e:	d008      	beq.n	5c62 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    5c50:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    5c52:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    5c54:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    5c56:	07db      	lsls	r3, r3, #31
    5c58:	d508      	bpl.n	5c6c <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    5c5a:	b00e      	add	sp, #56	; 0x38
    5c5c:	bc04      	pop	{r2}
    5c5e:	4690      	mov	r8, r2
    5c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    5c62:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    5c64:	4642      	mov	r2, r8
    5c66:	07d2      	lsls	r2, r2, #31
    5c68:	d4f7      	bmi.n	5c5a <tc_init+0x6e>
    5c6a:	e7f1      	b.n	5c50 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    5c6c:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    5c6e:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    5c70:	079b      	lsls	r3, r3, #30
    5c72:	d4f2      	bmi.n	5c5a <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    5c74:	682b      	ldr	r3, [r5, #0]
    5c76:	079b      	lsls	r3, r3, #30
    5c78:	d4ef      	bmi.n	5c5a <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    5c7a:	7c33      	ldrb	r3, [r6, #16]
    5c7c:	2b00      	cmp	r3, #0
    5c7e:	d112      	bne.n	5ca6 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    5c80:	7f33      	ldrb	r3, [r6, #28]
    5c82:	2b00      	cmp	r3, #0
    5c84:	d11b      	bne.n	5cbe <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    5c86:	4643      	mov	r3, r8
    5c88:	005a      	lsls	r2, r3, #1
    5c8a:	a902      	add	r1, sp, #8
    5c8c:	1c53      	adds	r3, r2, #1
    5c8e:	009b      	lsls	r3, r3, #2
    5c90:	5858      	ldr	r0, [r3, r1]
    5c92:	4643      	mov	r3, r8
    5c94:	00db      	lsls	r3, r3, #3
    5c96:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    5c98:	b2d9      	uxtb	r1, r3
    5c9a:	2904      	cmp	r1, #4
    5c9c:	d823      	bhi.n	5ce6 <tc_init+0xfa>
    5c9e:	008b      	lsls	r3, r1, #2
    5ca0:	4988      	ldr	r1, [pc, #544]	; (5ec4 <tc_init+0x2d8>)
    5ca2:	58cb      	ldr	r3, [r1, r3]
    5ca4:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5ca6:	a901      	add	r1, sp, #4
    5ca8:	2301      	movs	r3, #1
    5caa:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    5cac:	2200      	movs	r2, #0
    5cae:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    5cb0:	7e32      	ldrb	r2, [r6, #24]
    5cb2:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5cb4:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    5cb6:	7d30      	ldrb	r0, [r6, #20]
    5cb8:	4b83      	ldr	r3, [pc, #524]	; (5ec8 <tc_init+0x2dc>)
    5cba:	4798      	blx	r3
    5cbc:	e7e0      	b.n	5c80 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5cbe:	a901      	add	r1, sp, #4
    5cc0:	2301      	movs	r3, #1
    5cc2:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    5cc4:	2200      	movs	r2, #0
    5cc6:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    5cc8:	3224      	adds	r2, #36	; 0x24
    5cca:	18b2      	adds	r2, r6, r2
    5ccc:	7812      	ldrb	r2, [r2, #0]
    5cce:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    5cd0:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    5cd2:	331f      	adds	r3, #31
    5cd4:	18f3      	adds	r3, r6, r3
    5cd6:	7818      	ldrb	r0, [r3, #0]
    5cd8:	4b7b      	ldr	r3, [pc, #492]	; (5ec8 <tc_init+0x2dc>)
    5cda:	4798      	blx	r3
    5cdc:	e7d3      	b.n	5c86 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    5cde:	497b      	ldr	r1, [pc, #492]	; (5ecc <tc_init+0x2e0>)
    5ce0:	694b      	ldr	r3, [r1, #20]
    5ce2:	4318      	orrs	r0, r3
    5ce4:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    5ce6:	78f3      	ldrb	r3, [r6, #3]
    5ce8:	2b08      	cmp	r3, #8
    5cea:	d100      	bne.n	5cee <tc_init+0x102>
    5cec:	e086      	b.n	5dfc <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    5cee:	7833      	ldrb	r3, [r6, #0]
    5cf0:	466a      	mov	r2, sp
    5cf2:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    5cf4:	ab0c      	add	r3, sp, #48	; 0x30
    5cf6:	4642      	mov	r2, r8
    5cf8:	5c9f      	ldrb	r7, [r3, r2]
    5cfa:	4669      	mov	r1, sp
    5cfc:	0038      	movs	r0, r7
    5cfe:	4b74      	ldr	r3, [pc, #464]	; (5ed0 <tc_init+0x2e4>)
    5d00:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    5d02:	0038      	movs	r0, r7
    5d04:	4b73      	ldr	r3, [pc, #460]	; (5ed4 <tc_init+0x2e8>)
    5d06:	4798      	blx	r3
			(uint32_t)config->counter_size |
    5d08:	78f3      	ldrb	r3, [r6, #3]
    5d0a:	79f2      	ldrb	r2, [r6, #7]
    5d0c:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    5d0e:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    5d10:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    5d12:	7a72      	ldrb	r2, [r6, #9]
    5d14:	2a00      	cmp	r2, #0
    5d16:	d002      	beq.n	5d1e <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    5d18:	2280      	movs	r2, #128	; 0x80
    5d1a:	0252      	lsls	r2, r2, #9
    5d1c:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    5d1e:	7ab2      	ldrb	r2, [r6, #10]
    5d20:	2a00      	cmp	r2, #0
    5d22:	d002      	beq.n	5d2a <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    5d24:	2280      	movs	r2, #128	; 0x80
    5d26:	0292      	lsls	r2, r2, #10
    5d28:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    5d2a:	7af2      	ldrb	r2, [r6, #11]
    5d2c:	2a00      	cmp	r2, #0
    5d2e:	d002      	beq.n	5d36 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    5d30:	2280      	movs	r2, #128	; 0x80
    5d32:	0352      	lsls	r2, r2, #13
    5d34:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    5d36:	7b32      	ldrb	r2, [r6, #12]
    5d38:	2a00      	cmp	r2, #0
    5d3a:	d002      	beq.n	5d42 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    5d3c:	2280      	movs	r2, #128	; 0x80
    5d3e:	0392      	lsls	r2, r2, #14
    5d40:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    5d42:	7871      	ldrb	r1, [r6, #1]
    5d44:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    5d46:	78b2      	ldrb	r2, [r6, #2]
    5d48:	01d2      	lsls	r2, r2, #7
    5d4a:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    5d4c:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5d4e:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
    5d50:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    5d52:	2b00      	cmp	r3, #0
    5d54:	d1fc      	bne.n	5d50 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    5d56:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5d58:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5d5a:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    5d5c:	2b00      	cmp	r3, #0
    5d5e:	d1fc      	bne.n	5d5a <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    5d60:	79b3      	ldrb	r3, [r6, #6]
    5d62:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    5d64:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    5d66:	1e4b      	subs	r3, r1, #1
    5d68:	4199      	sbcs	r1, r3
    5d6a:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    5d6c:	7bb3      	ldrb	r3, [r6, #14]
    5d6e:	2b00      	cmp	r3, #0
    5d70:	d001      	beq.n	5d76 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    5d72:	2301      	movs	r3, #1
    5d74:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5d76:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5d78:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	d1fc      	bne.n	5d78 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    5d7e:	33ff      	adds	r3, #255	; 0xff
    5d80:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    5d82:	2900      	cmp	r1, #0
    5d84:	d004      	beq.n	5d90 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5d86:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5d88:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	d1fc      	bne.n	5d88 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    5d8e:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    5d90:	7a33      	ldrb	r3, [r6, #8]
    5d92:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5d94:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5d96:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    5d98:	2b00      	cmp	r3, #0
    5d9a:	d1fc      	bne.n	5d96 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    5d9c:	7923      	ldrb	r3, [r4, #4]
    5d9e:	2b04      	cmp	r3, #4
    5da0:	d059      	beq.n	5e56 <tc_init+0x26a>
    5da2:	2b08      	cmp	r3, #8
    5da4:	d074      	beq.n	5e90 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    5da6:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    5da8:	2b00      	cmp	r3, #0
    5daa:	d000      	beq.n	5dae <tc_init+0x1c2>
    5dac:	e755      	b.n	5c5a <tc_init+0x6e>
    5dae:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5db0:	2b00      	cmp	r3, #0
    5db2:	d1fc      	bne.n	5dae <tc_init+0x1c2>
				= config->counter_16_bit.value;
    5db4:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    5db6:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5db8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5dba:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5dbc:	2b00      	cmp	r3, #0
    5dbe:	d1fc      	bne.n	5dba <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    5dc0:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    5dc2:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5dc4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5dc6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5dc8:	2b00      	cmp	r3, #0
    5dca:	d1fc      	bne.n	5dc6 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    5dcc:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    5dce:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    5dd0:	2000      	movs	r0, #0
    5dd2:	e742      	b.n	5c5a <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    5dd4:	493d      	ldr	r1, [pc, #244]	; (5ecc <tc_init+0x2e0>)
    5dd6:	698b      	ldr	r3, [r1, #24]
    5dd8:	4318      	orrs	r0, r3
    5dda:	6188      	str	r0, [r1, #24]
    5ddc:	e783      	b.n	5ce6 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    5dde:	493b      	ldr	r1, [pc, #236]	; (5ecc <tc_init+0x2e0>)
    5de0:	69cb      	ldr	r3, [r1, #28]
    5de2:	4318      	orrs	r0, r3
    5de4:	61c8      	str	r0, [r1, #28]
    5de6:	e77e      	b.n	5ce6 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    5de8:	4938      	ldr	r1, [pc, #224]	; (5ecc <tc_init+0x2e0>)
    5dea:	6a0b      	ldr	r3, [r1, #32]
    5dec:	4318      	orrs	r0, r3
    5dee:	6208      	str	r0, [r1, #32]
    5df0:	e779      	b.n	5ce6 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    5df2:	4b36      	ldr	r3, [pc, #216]	; (5ecc <tc_init+0x2e0>)
    5df4:	6a59      	ldr	r1, [r3, #36]	; 0x24
    5df6:	4308      	orrs	r0, r1
    5df8:	6258      	str	r0, [r3, #36]	; 0x24
    5dfa:	e774      	b.n	5ce6 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    5dfc:	4643      	mov	r3, r8
    5dfe:	3301      	adds	r3, #1
    5e00:	2b04      	cmp	r3, #4
    5e02:	dd00      	ble.n	5e06 <tc_init+0x21a>
    5e04:	e773      	b.n	5cee <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    5e06:	ab02      	add	r3, sp, #8
    5e08:	1cd1      	adds	r1, r2, #3
    5e0a:	0089      	lsls	r1, r1, #2
    5e0c:	58c9      	ldr	r1, [r1, r3]
    5e0e:	3202      	adds	r2, #2
    5e10:	0092      	lsls	r2, r2, #2
    5e12:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    5e14:	b2da      	uxtb	r2, r3
    5e16:	2a04      	cmp	r2, #4
    5e18:	d900      	bls.n	5e1c <tc_init+0x230>
    5e1a:	e768      	b.n	5cee <tc_init+0x102>
    5e1c:	0093      	lsls	r3, r2, #2
    5e1e:	4a2e      	ldr	r2, [pc, #184]	; (5ed8 <tc_init+0x2ec>)
    5e20:	58d3      	ldr	r3, [r2, r3]
    5e22:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    5e24:	4a29      	ldr	r2, [pc, #164]	; (5ecc <tc_init+0x2e0>)
    5e26:	6953      	ldr	r3, [r2, #20]
    5e28:	4319      	orrs	r1, r3
    5e2a:	6151      	str	r1, [r2, #20]
    5e2c:	e75f      	b.n	5cee <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    5e2e:	4a27      	ldr	r2, [pc, #156]	; (5ecc <tc_init+0x2e0>)
    5e30:	6993      	ldr	r3, [r2, #24]
    5e32:	4319      	orrs	r1, r3
    5e34:	6191      	str	r1, [r2, #24]
    5e36:	e75a      	b.n	5cee <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    5e38:	4a24      	ldr	r2, [pc, #144]	; (5ecc <tc_init+0x2e0>)
    5e3a:	69d3      	ldr	r3, [r2, #28]
    5e3c:	4319      	orrs	r1, r3
    5e3e:	61d1      	str	r1, [r2, #28]
    5e40:	e755      	b.n	5cee <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    5e42:	4a22      	ldr	r2, [pc, #136]	; (5ecc <tc_init+0x2e0>)
    5e44:	6a13      	ldr	r3, [r2, #32]
    5e46:	4319      	orrs	r1, r3
    5e48:	6211      	str	r1, [r2, #32]
    5e4a:	e750      	b.n	5cee <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    5e4c:	4b1f      	ldr	r3, [pc, #124]	; (5ecc <tc_init+0x2e0>)
    5e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    5e50:	4311      	orrs	r1, r2
    5e52:	6259      	str	r1, [r3, #36]	; 0x24
    5e54:	e74b      	b.n	5cee <tc_init+0x102>
    5e56:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5e58:	2b00      	cmp	r3, #0
    5e5a:	d1fc      	bne.n	5e56 <tc_init+0x26a>
					config->counter_8_bit.value;
    5e5c:	3328      	adds	r3, #40	; 0x28
    5e5e:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    5e60:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5e62:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5e64:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5e66:	2b00      	cmp	r3, #0
    5e68:	d1fc      	bne.n	5e64 <tc_init+0x278>
					config->counter_8_bit.period;
    5e6a:	3329      	adds	r3, #41	; 0x29
    5e6c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    5e6e:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5e70:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5e72:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5e74:	2b00      	cmp	r3, #0
    5e76:	d1fc      	bne.n	5e72 <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    5e78:	332a      	adds	r3, #42	; 0x2a
    5e7a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    5e7c:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5e7e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5e80:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5e82:	2b00      	cmp	r3, #0
    5e84:	d1fc      	bne.n	5e80 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    5e86:	332b      	adds	r3, #43	; 0x2b
    5e88:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    5e8a:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    5e8c:	2000      	movs	r0, #0
    5e8e:	e6e4      	b.n	5c5a <tc_init+0x6e>
    5e90:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5e92:	2b00      	cmp	r3, #0
    5e94:	d1fc      	bne.n	5e90 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    5e96:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    5e98:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5e9a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5e9c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5e9e:	2b00      	cmp	r3, #0
    5ea0:	d1fc      	bne.n	5e9c <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    5ea2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    5ea4:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5ea6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    5ea8:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    5eaa:	2b00      	cmp	r3, #0
    5eac:	d1fc      	bne.n	5ea8 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    5eae:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    5eb0:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    5eb2:	2000      	movs	r0, #0
    5eb4:	e6d1      	b.n	5c5a <tc_init+0x6e>
    5eb6:	46c0      	nop			; (mov r8, r8)
    5eb8:	00005bb1 	.word	0x00005bb1
    5ebc:	0001df3c 	.word	0x0001df3c
    5ec0:	20001184 	.word	0x20001184
    5ec4:	0001df14 	.word	0x0001df14
    5ec8:	00005a69 	.word	0x00005a69
    5ecc:	40000400 	.word	0x40000400
    5ed0:	0000596d 	.word	0x0000596d
    5ed4:	000058fd 	.word	0x000058fd
    5ed8:	0001df28 	.word	0x0001df28

00005edc <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5edc:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    5ede:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    5ee0:	2b00      	cmp	r3, #0
    5ee2:	d1fc      	bne.n	5ede <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    5ee4:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    5ee6:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    5ee8:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    5eea:	2b00      	cmp	r3, #0
    5eec:	d1fc      	bne.n	5ee8 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    5eee:	3380      	adds	r3, #128	; 0x80
    5ef0:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5ef2:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    5ef4:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    5ef6:	2b00      	cmp	r3, #0
    5ef8:	d1fc      	bne.n	5ef4 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    5efa:	7903      	ldrb	r3, [r0, #4]
    5efc:	2b04      	cmp	r3, #4
    5efe:	d005      	beq.n	5f0c <tc_get_count_value+0x30>
    5f00:	2b08      	cmp	r3, #8
    5f02:	d009      	beq.n	5f18 <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    5f04:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    5f06:	2b00      	cmp	r3, #0
    5f08:	d003      	beq.n	5f12 <tc_get_count_value+0x36>
}
    5f0a:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    5f0c:	7d10      	ldrb	r0, [r2, #20]
    5f0e:	b2c0      	uxtb	r0, r0
    5f10:	e7fb      	b.n	5f0a <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    5f12:	8a90      	ldrh	r0, [r2, #20]
    5f14:	b280      	uxth	r0, r0
    5f16:	e7f8      	b.n	5f0a <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
    5f18:	6950      	ldr	r0, [r2, #20]
    5f1a:	e7f6      	b.n	5f0a <tc_get_count_value+0x2e>

00005f1c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    5f1c:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    5f1e:	6804      	ldr	r4, [r0, #0]
    5f20:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    5f22:	2b00      	cmp	r3, #0
    5f24:	d1fc      	bne.n	5f20 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    5f26:	7903      	ldrb	r3, [r0, #4]
    5f28:	2b04      	cmp	r3, #4
    5f2a:	d006      	beq.n	5f3a <tc_set_compare_value+0x1e>
    5f2c:	2b08      	cmp	r3, #8
    5f2e:	d028      	beq.n	5f82 <tc_set_compare_value+0x66>
    5f30:	2b00      	cmp	r3, #0
    5f32:	d013      	beq.n	5f5c <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    5f34:	2317      	movs	r3, #23
}
    5f36:	0018      	movs	r0, r3
    5f38:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    5f3a:	2317      	movs	r3, #23
			if (channel_index <
    5f3c:	2901      	cmp	r1, #1
    5f3e:	d8fa      	bhi.n	5f36 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    5f40:	7e83      	ldrb	r3, [r0, #26]
    5f42:	2b00      	cmp	r3, #0
    5f44:	d005      	beq.n	5f52 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    5f46:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    5f48:	1861      	adds	r1, r4, r1
    5f4a:	3130      	adds	r1, #48	; 0x30
    5f4c:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    5f4e:	2300      	movs	r3, #0
    5f50:	e7f1      	b.n	5f36 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    5f52:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    5f54:	1864      	adds	r4, r4, r1
    5f56:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    5f58:	2300      	movs	r3, #0
    5f5a:	e7ec      	b.n	5f36 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    5f5c:	2317      	movs	r3, #23
			if (channel_index <
    5f5e:	2901      	cmp	r1, #1
    5f60:	d8e9      	bhi.n	5f36 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    5f62:	7e83      	ldrb	r3, [r0, #26]
    5f64:	2b00      	cmp	r3, #0
    5f66:	d005      	beq.n	5f74 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    5f68:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    5f6a:	3118      	adds	r1, #24
    5f6c:	0049      	lsls	r1, r1, #1
    5f6e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    5f70:	2300      	movs	r3, #0
    5f72:	e7e0      	b.n	5f36 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    5f74:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    5f76:	310c      	adds	r1, #12
    5f78:	0049      	lsls	r1, r1, #1
    5f7a:	1864      	adds	r4, r4, r1
    5f7c:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    5f7e:	2300      	movs	r3, #0
    5f80:	e7d9      	b.n	5f36 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    5f82:	2317      	movs	r3, #23
			if (channel_index <
    5f84:	2901      	cmp	r1, #1
    5f86:	d8d6      	bhi.n	5f36 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    5f88:	7e83      	ldrb	r3, [r0, #26]
    5f8a:	2b00      	cmp	r3, #0
    5f8c:	d105      	bne.n	5f9a <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    5f8e:	3106      	adds	r1, #6
    5f90:	0089      	lsls	r1, r1, #2
    5f92:	1864      	adds	r4, r4, r1
    5f94:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    5f96:	2300      	movs	r3, #0
    5f98:	e7cd      	b.n	5f36 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    5f9a:	310c      	adds	r1, #12
    5f9c:	0089      	lsls	r1, r1, #2
    5f9e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    5fa0:	2300      	movs	r3, #0
    5fa2:	e7c8      	b.n	5f36 <tc_set_compare_value+0x1a>

00005fa4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    5fa4:	e7fe      	b.n	5fa4 <Dummy_Handler>
	...

00005fa8 <Reset_Handler>:
{
    5fa8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    5faa:	4a1a      	ldr	r2, [pc, #104]	; (6014 <Reset_Handler+0x6c>)
    5fac:	4b1a      	ldr	r3, [pc, #104]	; (6018 <Reset_Handler+0x70>)
    5fae:	429a      	cmp	r2, r3
    5fb0:	d011      	beq.n	5fd6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    5fb2:	001a      	movs	r2, r3
    5fb4:	4b19      	ldr	r3, [pc, #100]	; (601c <Reset_Handler+0x74>)
    5fb6:	429a      	cmp	r2, r3
    5fb8:	d20d      	bcs.n	5fd6 <Reset_Handler+0x2e>
    5fba:	4a19      	ldr	r2, [pc, #100]	; (6020 <Reset_Handler+0x78>)
    5fbc:	3303      	adds	r3, #3
    5fbe:	1a9b      	subs	r3, r3, r2
    5fc0:	089b      	lsrs	r3, r3, #2
    5fc2:	3301      	adds	r3, #1
    5fc4:	009b      	lsls	r3, r3, #2
    5fc6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    5fc8:	4813      	ldr	r0, [pc, #76]	; (6018 <Reset_Handler+0x70>)
    5fca:	4912      	ldr	r1, [pc, #72]	; (6014 <Reset_Handler+0x6c>)
    5fcc:	588c      	ldr	r4, [r1, r2]
    5fce:	5084      	str	r4, [r0, r2]
    5fd0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    5fd2:	429a      	cmp	r2, r3
    5fd4:	d1fa      	bne.n	5fcc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    5fd6:	4a13      	ldr	r2, [pc, #76]	; (6024 <Reset_Handler+0x7c>)
    5fd8:	4b13      	ldr	r3, [pc, #76]	; (6028 <Reset_Handler+0x80>)
    5fda:	429a      	cmp	r2, r3
    5fdc:	d20a      	bcs.n	5ff4 <Reset_Handler+0x4c>
    5fde:	43d3      	mvns	r3, r2
    5fe0:	4911      	ldr	r1, [pc, #68]	; (6028 <Reset_Handler+0x80>)
    5fe2:	185b      	adds	r3, r3, r1
    5fe4:	2103      	movs	r1, #3
    5fe6:	438b      	bics	r3, r1
    5fe8:	3304      	adds	r3, #4
    5fea:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    5fec:	2100      	movs	r1, #0
    5fee:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    5ff0:	4293      	cmp	r3, r2
    5ff2:	d1fc      	bne.n	5fee <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    5ff4:	4a0d      	ldr	r2, [pc, #52]	; (602c <Reset_Handler+0x84>)
    5ff6:	21ff      	movs	r1, #255	; 0xff
    5ff8:	4b0d      	ldr	r3, [pc, #52]	; (6030 <Reset_Handler+0x88>)
    5ffa:	438b      	bics	r3, r1
    5ffc:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    5ffe:	4a0d      	ldr	r2, [pc, #52]	; (6034 <Reset_Handler+0x8c>)
    6000:	6853      	ldr	r3, [r2, #4]
    6002:	397f      	subs	r1, #127	; 0x7f
    6004:	430b      	orrs	r3, r1
    6006:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    6008:	4b0b      	ldr	r3, [pc, #44]	; (6038 <Reset_Handler+0x90>)
    600a:	4798      	blx	r3
        main();
    600c:	4b0b      	ldr	r3, [pc, #44]	; (603c <Reset_Handler+0x94>)
    600e:	4798      	blx	r3
    6010:	e7fe      	b.n	6010 <Reset_Handler+0x68>
    6012:	46c0      	nop			; (mov r8, r8)
    6014:	0001fcbc 	.word	0x0001fcbc
    6018:	20000000 	.word	0x20000000
    601c:	20000a88 	.word	0x20000a88
    6020:	20000004 	.word	0x20000004
    6024:	20000a88 	.word	0x20000a88
    6028:	20002028 	.word	0x20002028
    602c:	e000ed00 	.word	0xe000ed00
    6030:	00000000 	.word	0x00000000
    6034:	41004000 	.word	0x41004000
    6038:	00017b85 	.word	0x00017b85
    603c:	0000ebcd 	.word	0x0000ebcd

00006040 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6040:	b5f0      	push	{r4, r5, r6, r7, lr}
    6042:	46c6      	mov	lr, r8
    6044:	b500      	push	{lr}
    6046:	000c      	movs	r4, r1
    6048:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    604a:	2800      	cmp	r0, #0
    604c:	d10f      	bne.n	606e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    604e:	2a00      	cmp	r2, #0
    6050:	dd11      	ble.n	6076 <_read+0x36>
    6052:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    6054:	4e09      	ldr	r6, [pc, #36]	; (607c <_read+0x3c>)
    6056:	4d0a      	ldr	r5, [pc, #40]	; (6080 <_read+0x40>)
    6058:	6830      	ldr	r0, [r6, #0]
    605a:	0021      	movs	r1, r4
    605c:	682b      	ldr	r3, [r5, #0]
    605e:	4798      	blx	r3
		ptr++;
    6060:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    6062:	42bc      	cmp	r4, r7
    6064:	d1f8      	bne.n	6058 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    6066:	4640      	mov	r0, r8
    6068:	bc04      	pop	{r2}
    606a:	4690      	mov	r8, r2
    606c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    606e:	2301      	movs	r3, #1
    6070:	425b      	negs	r3, r3
    6072:	4698      	mov	r8, r3
    6074:	e7f7      	b.n	6066 <_read+0x26>
	for (; len > 0; --len) {
    6076:	4680      	mov	r8, r0
    6078:	e7f5      	b.n	6066 <_read+0x26>
    607a:	46c0      	nop			; (mov r8, r8)
    607c:	200011a0 	.word	0x200011a0
    6080:	20001198 	.word	0x20001198

00006084 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6084:	b5f0      	push	{r4, r5, r6, r7, lr}
    6086:	46c6      	mov	lr, r8
    6088:	b500      	push	{lr}
    608a:	000e      	movs	r6, r1
    608c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    608e:	3801      	subs	r0, #1
    6090:	2802      	cmp	r0, #2
    6092:	d810      	bhi.n	60b6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    6094:	2a00      	cmp	r2, #0
    6096:	d011      	beq.n	60bc <_write+0x38>
    6098:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    609a:	4b0c      	ldr	r3, [pc, #48]	; (60cc <_write+0x48>)
    609c:	4698      	mov	r8, r3
    609e:	4f0c      	ldr	r7, [pc, #48]	; (60d0 <_write+0x4c>)
    60a0:	4643      	mov	r3, r8
    60a2:	6818      	ldr	r0, [r3, #0]
    60a4:	5d31      	ldrb	r1, [r6, r4]
    60a6:	683b      	ldr	r3, [r7, #0]
    60a8:	4798      	blx	r3
    60aa:	2800      	cmp	r0, #0
    60ac:	db08      	blt.n	60c0 <_write+0x3c>
			return -1;
		}
		++nChars;
    60ae:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    60b0:	42a5      	cmp	r5, r4
    60b2:	d1f5      	bne.n	60a0 <_write+0x1c>
    60b4:	e006      	b.n	60c4 <_write+0x40>
		return -1;
    60b6:	2401      	movs	r4, #1
    60b8:	4264      	negs	r4, r4
    60ba:	e003      	b.n	60c4 <_write+0x40>
	for (; len != 0; --len) {
    60bc:	0014      	movs	r4, r2
    60be:	e001      	b.n	60c4 <_write+0x40>
			return -1;
    60c0:	2401      	movs	r4, #1
    60c2:	4264      	negs	r4, r4
	}
	return nChars;
}
    60c4:	0020      	movs	r0, r4
    60c6:	bc04      	pop	{r2}
    60c8:	4690      	mov	r8, r2
    60ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    60cc:	200011a0 	.word	0x200011a0
    60d0:	2000119c 	.word	0x2000119c

000060d4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    60d4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    60d6:	4a06      	ldr	r2, [pc, #24]	; (60f0 <_sbrk+0x1c>)
    60d8:	6812      	ldr	r2, [r2, #0]
    60da:	2a00      	cmp	r2, #0
    60dc:	d004      	beq.n	60e8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    60de:	4a04      	ldr	r2, [pc, #16]	; (60f0 <_sbrk+0x1c>)
    60e0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    60e2:	18c3      	adds	r3, r0, r3
    60e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    60e6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    60e8:	4902      	ldr	r1, [pc, #8]	; (60f4 <_sbrk+0x20>)
    60ea:	4a01      	ldr	r2, [pc, #4]	; (60f0 <_sbrk+0x1c>)
    60ec:	6011      	str	r1, [r2, #0]
    60ee:	e7f6      	b.n	60de <_sbrk+0xa>
    60f0:	20000afc 	.word	0x20000afc
    60f4:	20004028 	.word	0x20004028

000060f8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    60f8:	2001      	movs	r0, #1
    60fa:	4240      	negs	r0, r0
    60fc:	4770      	bx	lr

000060fe <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    60fe:	2380      	movs	r3, #128	; 0x80
    6100:	019b      	lsls	r3, r3, #6
    6102:	604b      	str	r3, [r1, #4]

	return 0;
}
    6104:	2000      	movs	r0, #0
    6106:	4770      	bx	lr

00006108 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    6108:	2001      	movs	r0, #1
    610a:	4770      	bx	lr

0000610c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    610c:	2000      	movs	r0, #0
    610e:	4770      	bx	lr

00006110 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    6110:	b570      	push	{r4, r5, r6, lr}
    6112:	b082      	sub	sp, #8
    6114:	0005      	movs	r5, r0
    6116:	000e      	movs	r6, r1
	uint16_t temp = 0;
    6118:	2200      	movs	r2, #0
    611a:	466b      	mov	r3, sp
    611c:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    611e:	4c06      	ldr	r4, [pc, #24]	; (6138 <usart_serial_getchar+0x28>)
    6120:	466b      	mov	r3, sp
    6122:	1d99      	adds	r1, r3, #6
    6124:	0028      	movs	r0, r5
    6126:	47a0      	blx	r4
    6128:	2800      	cmp	r0, #0
    612a:	d1f9      	bne.n	6120 <usart_serial_getchar+0x10>

	*c = temp;
    612c:	466b      	mov	r3, sp
    612e:	3306      	adds	r3, #6
    6130:	881b      	ldrh	r3, [r3, #0]
    6132:	7033      	strb	r3, [r6, #0]
}
    6134:	b002      	add	sp, #8
    6136:	bd70      	pop	{r4, r5, r6, pc}
    6138:	00004f89 	.word	0x00004f89

0000613c <usart_serial_putchar>:
{
    613c:	b570      	push	{r4, r5, r6, lr}
    613e:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    6140:	b28c      	uxth	r4, r1
    6142:	4e03      	ldr	r6, [pc, #12]	; (6150 <usart_serial_putchar+0x14>)
    6144:	0021      	movs	r1, r4
    6146:	0028      	movs	r0, r5
    6148:	47b0      	blx	r6
    614a:	2800      	cmp	r0, #0
    614c:	d1fa      	bne.n	6144 <usart_serial_putchar+0x8>
}
    614e:	bd70      	pop	{r4, r5, r6, pc}
    6150:	00004f5d 	.word	0x00004f5d

00006154 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    6154:	b510      	push	{r4, lr}
    6156:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    6158:	466b      	mov	r3, sp
    615a:	1ddc      	adds	r4, r3, #7
    615c:	2201      	movs	r2, #1
    615e:	0021      	movs	r1, r4
    6160:	480f      	ldr	r0, [pc, #60]	; (61a0 <USART_HOST_ISR_VECT+0x4c>)
    6162:	4b10      	ldr	r3, [pc, #64]	; (61a4 <USART_HOST_ISR_VECT+0x50>)
    6164:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    6166:	b672      	cpsid	i
    6168:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    616c:	2200      	movs	r2, #0
    616e:	4b0e      	ldr	r3, [pc, #56]	; (61a8 <USART_HOST_ISR_VECT+0x54>)
    6170:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    6172:	4b0e      	ldr	r3, [pc, #56]	; (61ac <USART_HOST_ISR_VECT+0x58>)
    6174:	781b      	ldrb	r3, [r3, #0]
    6176:	7821      	ldrb	r1, [r4, #0]
    6178:	4a0d      	ldr	r2, [pc, #52]	; (61b0 <USART_HOST_ISR_VECT+0x5c>)
    617a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    617c:	2b7f      	cmp	r3, #127	; 0x7f
    617e:	d00a      	beq.n	6196 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    6180:	3301      	adds	r3, #1
    6182:	4a0a      	ldr	r2, [pc, #40]	; (61ac <USART_HOST_ISR_VECT+0x58>)
    6184:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    6186:	2201      	movs	r2, #1
    6188:	4b07      	ldr	r3, [pc, #28]	; (61a8 <USART_HOST_ISR_VECT+0x54>)
    618a:	701a      	strb	r2, [r3, #0]
    618c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6190:	b662      	cpsie	i
}
    6192:	b002      	add	sp, #8
    6194:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    6196:	2200      	movs	r2, #0
    6198:	4b04      	ldr	r3, [pc, #16]	; (61ac <USART_HOST_ISR_VECT+0x58>)
    619a:	701a      	strb	r2, [r3, #0]
    619c:	e7f3      	b.n	6186 <USART_HOST_ISR_VECT+0x32>
    619e:	46c0      	nop			; (mov r8, r8)
    61a0:	20000b00 	.word	0x20000b00
    61a4:	00004ff9 	.word	0x00004ff9
    61a8:	2000000c 	.word	0x2000000c
    61ac:	20000bb5 	.word	0x20000bb5
    61b0:	20000b34 	.word	0x20000b34

000061b4 <sio2host_init>:
{
    61b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    61b6:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    61b8:	2380      	movs	r3, #128	; 0x80
    61ba:	05db      	lsls	r3, r3, #23
    61bc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    61be:	2300      	movs	r3, #0
    61c0:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    61c2:	22ff      	movs	r2, #255	; 0xff
    61c4:	4669      	mov	r1, sp
    61c6:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    61c8:	2200      	movs	r2, #0
    61ca:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    61cc:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    61ce:	2401      	movs	r4, #1
    61d0:	2124      	movs	r1, #36	; 0x24
    61d2:	4668      	mov	r0, sp
    61d4:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    61d6:	3101      	adds	r1, #1
    61d8:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    61da:	3101      	adds	r1, #1
    61dc:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    61de:	3101      	adds	r1, #1
    61e0:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    61e2:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    61e4:	3105      	adds	r1, #5
    61e6:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    61e8:	3101      	adds	r1, #1
    61ea:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    61ec:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    61ee:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    61f0:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    61f2:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    61f4:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    61f6:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    61f8:	2313      	movs	r3, #19
    61fa:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    61fc:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    61fe:	2380      	movs	r3, #128	; 0x80
    6200:	035b      	lsls	r3, r3, #13
    6202:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    6204:	4b2f      	ldr	r3, [pc, #188]	; (62c4 <sio2host_init+0x110>)
    6206:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    6208:	4b2f      	ldr	r3, [pc, #188]	; (62c8 <sio2host_init+0x114>)
    620a:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    620c:	2301      	movs	r3, #1
    620e:	425b      	negs	r3, r3
    6210:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    6212:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    6214:	23e1      	movs	r3, #225	; 0xe1
    6216:	025b      	lsls	r3, r3, #9
    6218:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    621a:	4d2c      	ldr	r5, [pc, #176]	; (62cc <sio2host_init+0x118>)
    621c:	4b2c      	ldr	r3, [pc, #176]	; (62d0 <sio2host_init+0x11c>)
    621e:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    6220:	4a2c      	ldr	r2, [pc, #176]	; (62d4 <sio2host_init+0x120>)
    6222:	4b2d      	ldr	r3, [pc, #180]	; (62d8 <sio2host_init+0x124>)
    6224:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    6226:	4a2d      	ldr	r2, [pc, #180]	; (62dc <sio2host_init+0x128>)
    6228:	4b2d      	ldr	r3, [pc, #180]	; (62e0 <sio2host_init+0x12c>)
    622a:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    622c:	466a      	mov	r2, sp
    622e:	2184      	movs	r1, #132	; 0x84
    6230:	05c9      	lsls	r1, r1, #23
    6232:	0028      	movs	r0, r5
    6234:	4b2b      	ldr	r3, [pc, #172]	; (62e4 <sio2host_init+0x130>)
    6236:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    6238:	4f2b      	ldr	r7, [pc, #172]	; (62e8 <sio2host_init+0x134>)
    623a:	683b      	ldr	r3, [r7, #0]
    623c:	6898      	ldr	r0, [r3, #8]
    623e:	2100      	movs	r1, #0
    6240:	4e2a      	ldr	r6, [pc, #168]	; (62ec <sio2host_init+0x138>)
    6242:	47b0      	blx	r6
	setbuf(stdin, NULL);
    6244:	683b      	ldr	r3, [r7, #0]
    6246:	6858      	ldr	r0, [r3, #4]
    6248:	2100      	movs	r1, #0
    624a:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    624c:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    624e:	0030      	movs	r0, r6
    6250:	4b27      	ldr	r3, [pc, #156]	; (62f0 <sio2host_init+0x13c>)
    6252:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6254:	231f      	movs	r3, #31
    6256:	4018      	ands	r0, r3
    6258:	4084      	lsls	r4, r0
    625a:	4b26      	ldr	r3, [pc, #152]	; (62f4 <sio2host_init+0x140>)
    625c:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    625e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    6260:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    6262:	2b00      	cmp	r3, #0
    6264:	d1fc      	bne.n	6260 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    6266:	6833      	ldr	r3, [r6, #0]
    6268:	2202      	movs	r2, #2
    626a:	4313      	orrs	r3, r2
    626c:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    626e:	4b17      	ldr	r3, [pc, #92]	; (62cc <sio2host_init+0x118>)
    6270:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    6272:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    6274:	2a00      	cmp	r2, #0
    6276:	d1fc      	bne.n	6272 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    6278:	6859      	ldr	r1, [r3, #4]
    627a:	2280      	movs	r2, #128	; 0x80
    627c:	0252      	lsls	r2, r2, #9
    627e:	430a      	orrs	r2, r1
    6280:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    6282:	2101      	movs	r1, #1
    6284:	4a11      	ldr	r2, [pc, #68]	; (62cc <sio2host_init+0x118>)
    6286:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    6288:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    628a:	2a00      	cmp	r2, #0
    628c:	d1fc      	bne.n	6288 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    628e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    6290:	2a00      	cmp	r2, #0
    6292:	d1fc      	bne.n	628e <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    6294:	6859      	ldr	r1, [r3, #4]
    6296:	2280      	movs	r2, #128	; 0x80
    6298:	0292      	lsls	r2, r2, #10
    629a:	430a      	orrs	r2, r1
    629c:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    629e:	2101      	movs	r1, #1
    62a0:	4a0a      	ldr	r2, [pc, #40]	; (62cc <sio2host_init+0x118>)
    62a2:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    62a4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    62a6:	2a00      	cmp	r2, #0
    62a8:	d1fc      	bne.n	62a4 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    62aa:	4913      	ldr	r1, [pc, #76]	; (62f8 <sio2host_init+0x144>)
    62ac:	2000      	movs	r0, #0
    62ae:	4b13      	ldr	r3, [pc, #76]	; (62fc <sio2host_init+0x148>)
    62b0:	4798      	blx	r3
    62b2:	2204      	movs	r2, #4
    62b4:	2384      	movs	r3, #132	; 0x84
    62b6:	05db      	lsls	r3, r3, #23
    62b8:	759a      	strb	r2, [r3, #22]
    62ba:	32fc      	adds	r2, #252	; 0xfc
    62bc:	4b0d      	ldr	r3, [pc, #52]	; (62f4 <sio2host_init+0x140>)
    62be:	601a      	str	r2, [r3, #0]
}
    62c0:	b011      	add	sp, #68	; 0x44
    62c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62c4:	00040003 	.word	0x00040003
    62c8:	00050003 	.word	0x00050003
    62cc:	20000b00 	.word	0x20000b00
    62d0:	200011a0 	.word	0x200011a0
    62d4:	0000613d 	.word	0x0000613d
    62d8:	2000119c 	.word	0x2000119c
    62dc:	00006111 	.word	0x00006111
    62e0:	20001198 	.word	0x20001198
    62e4:	00004bf1 	.word	0x00004bf1
    62e8:	200000d8 	.word	0x200000d8
    62ec:	00018425 	.word	0x00018425
    62f0:	00004791 	.word	0x00004791
    62f4:	e000e100 	.word	0xe000e100
    62f8:	00006155 	.word	0x00006155
    62fc:	00004755 	.word	0x00004755

00006300 <sio2host_deinit>:
{
    6300:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    6302:	4d15      	ldr	r5, [pc, #84]	; (6358 <sio2host_deinit+0x58>)
    6304:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    6306:	0020      	movs	r0, r4
    6308:	4b14      	ldr	r3, [pc, #80]	; (635c <sio2host_deinit+0x5c>)
    630a:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    630c:	231f      	movs	r3, #31
    630e:	4018      	ands	r0, r3
    6310:	3b1e      	subs	r3, #30
    6312:	4083      	lsls	r3, r0
    6314:	2280      	movs	r2, #128	; 0x80
    6316:	4912      	ldr	r1, [pc, #72]	; (6360 <sio2host_deinit+0x60>)
    6318:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    631a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    631c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    631e:	2b00      	cmp	r3, #0
    6320:	d1fc      	bne.n	631c <sio2host_deinit+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    6322:	6823      	ldr	r3, [r4, #0]
    6324:	2202      	movs	r2, #2
    6326:	4393      	bics	r3, r2
    6328:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    632a:	4b0b      	ldr	r3, [pc, #44]	; (6358 <sio2host_deinit+0x58>)
    632c:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    632e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    6330:	2a00      	cmp	r2, #0
    6332:	d1fc      	bne.n	632e <sio2host_deinit+0x2e>
			module->receiver_enabled = false;
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    6334:	685a      	ldr	r2, [r3, #4]
    6336:	490b      	ldr	r1, [pc, #44]	; (6364 <sio2host_deinit+0x64>)
    6338:	400a      	ands	r2, r1
    633a:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    633c:	2100      	movs	r1, #0
    633e:	4a06      	ldr	r2, [pc, #24]	; (6358 <sio2host_deinit+0x58>)
    6340:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    6342:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    6344:	2a00      	cmp	r2, #0
    6346:	d1fc      	bne.n	6342 <sio2host_deinit+0x42>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    6348:	685a      	ldr	r2, [r3, #4]
    634a:	4907      	ldr	r1, [pc, #28]	; (6368 <sio2host_deinit+0x68>)
    634c:	400a      	ands	r2, r1
    634e:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    6350:	2200      	movs	r2, #0
    6352:	4b01      	ldr	r3, [pc, #4]	; (6358 <sio2host_deinit+0x58>)
    6354:	719a      	strb	r2, [r3, #6]
}
    6356:	bd70      	pop	{r4, r5, r6, pc}
    6358:	20000b00 	.word	0x20000b00
    635c:	00004791 	.word	0x00004791
    6360:	e000e100 	.word	0xe000e100
    6364:	fffeffff 	.word	0xfffeffff
    6368:	fffdffff 	.word	0xfffdffff

0000636c <sio2host_rx>:
{
    636c:	b570      	push	{r4, r5, r6, lr}
    636e:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    6370:	4b1f      	ldr	r3, [pc, #124]	; (63f0 <sio2host_rx+0x84>)
    6372:	781c      	ldrb	r4, [r3, #0]
    6374:	4b1f      	ldr	r3, [pc, #124]	; (63f4 <sio2host_rx+0x88>)
    6376:	781b      	ldrb	r3, [r3, #0]
    6378:	429c      	cmp	r4, r3
    637a:	d319      	bcc.n	63b0 <sio2host_rx+0x44>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    637c:	1ae3      	subs	r3, r4, r3
    637e:	481e      	ldr	r0, [pc, #120]	; (63f8 <sio2host_rx+0x8c>)
    6380:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    6382:	4b1d      	ldr	r3, [pc, #116]	; (63f8 <sio2host_rx+0x8c>)
    6384:	7818      	ldrb	r0, [r3, #0]
    6386:	2800      	cmp	r0, #0
    6388:	d031      	beq.n	63ee <sio2host_rx+0x82>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    638a:	b243      	sxtb	r3, r0
    638c:	2b00      	cmp	r3, #0
    638e:	db15      	blt.n	63bc <sio2host_rx+0x50>
    6390:	1c03      	adds	r3, r0, #0
    6392:	4288      	cmp	r0, r1
    6394:	d900      	bls.n	6398 <sio2host_rx+0x2c>
    6396:	1c0b      	adds	r3, r1, #0
    6398:	b2d8      	uxtb	r0, r3
	while (max_length > 0) {
    639a:	2800      	cmp	r0, #0
    639c:	d027      	beq.n	63ee <sio2host_rx+0x82>
    639e:	4b15      	ldr	r3, [pc, #84]	; (63f4 <sio2host_rx+0x88>)
    63a0:	781b      	ldrb	r3, [r3, #0]
    63a2:	1e44      	subs	r4, r0, #1
    63a4:	b2e4      	uxtb	r4, r4
    63a6:	3401      	adds	r4, #1
    63a8:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    63aa:	4d14      	ldr	r5, [pc, #80]	; (63fc <sio2host_rx+0x90>)
			serial_rx_buf_head = 0;
    63ac:	2600      	movs	r6, #0
    63ae:	e014      	b.n	63da <sio2host_rx+0x6e>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    63b0:	0020      	movs	r0, r4
    63b2:	3880      	subs	r0, #128	; 0x80
    63b4:	1ac3      	subs	r3, r0, r3
    63b6:	4810      	ldr	r0, [pc, #64]	; (63f8 <sio2host_rx+0x8c>)
    63b8:	7003      	strb	r3, [r0, #0]
    63ba:	e7e2      	b.n	6382 <sio2host_rx+0x16>
		serial_rx_buf_head = serial_rx_buf_tail;
    63bc:	4b0d      	ldr	r3, [pc, #52]	; (63f4 <sio2host_rx+0x88>)
    63be:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    63c0:	2080      	movs	r0, #128	; 0x80
    63c2:	4b0d      	ldr	r3, [pc, #52]	; (63f8 <sio2host_rx+0x8c>)
    63c4:	7018      	strb	r0, [r3, #0]
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    63c6:	b24b      	sxtb	r3, r1
    63c8:	2b00      	cmp	r3, #0
    63ca:	db01      	blt.n	63d0 <sio2host_rx+0x64>
    63cc:	0008      	movs	r0, r1
    63ce:	e7e4      	b.n	639a <sio2host_rx+0x2e>
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    63d0:	2080      	movs	r0, #128	; 0x80
    63d2:	e7e4      	b.n	639e <sio2host_rx+0x32>
			serial_rx_buf_head = 0;
    63d4:	0033      	movs	r3, r6
	while (max_length > 0) {
    63d6:	4294      	cmp	r4, r2
    63d8:	d007      	beq.n	63ea <sio2host_rx+0x7e>
		*data = serial_rx_buf[serial_rx_buf_head];
    63da:	5ce9      	ldrb	r1, [r5, r3]
    63dc:	7011      	strb	r1, [r2, #0]
		data++;
    63de:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    63e0:	2b7f      	cmp	r3, #127	; 0x7f
    63e2:	d0f7      	beq.n	63d4 <sio2host_rx+0x68>
			serial_rx_buf_head++;
    63e4:	3301      	adds	r3, #1
    63e6:	b2db      	uxtb	r3, r3
    63e8:	e7f5      	b.n	63d6 <sio2host_rx+0x6a>
    63ea:	4a02      	ldr	r2, [pc, #8]	; (63f4 <sio2host_rx+0x88>)
    63ec:	7013      	strb	r3, [r2, #0]
}
    63ee:	bd70      	pop	{r4, r5, r6, pc}
    63f0:	20000bb5 	.word	0x20000bb5
    63f4:	20000bb4 	.word	0x20000bb4
    63f8:	20000bb6 	.word	0x20000bb6
    63fc:	20000b34 	.word	0x20000b34

00006400 <sio2host_getchar>:
{
    6400:	b510      	push	{r4, lr}
    6402:	b082      	sub	sp, #8
	while (0 == sio2host_rx(&c, 1)) {
    6404:	4c05      	ldr	r4, [pc, #20]	; (641c <sio2host_getchar+0x1c>)
    6406:	2101      	movs	r1, #1
    6408:	466b      	mov	r3, sp
    640a:	1dd8      	adds	r0, r3, #7
    640c:	47a0      	blx	r4
    640e:	2800      	cmp	r0, #0
    6410:	d0f9      	beq.n	6406 <sio2host_getchar+0x6>
	return c;
    6412:	466b      	mov	r3, sp
    6414:	79d8      	ldrb	r0, [r3, #7]
}
    6416:	b002      	add	sp, #8
    6418:	bd10      	pop	{r4, pc}
    641a:	46c0      	nop			; (mov r8, r8)
    641c:	0000636d 	.word	0x0000636d

00006420 <sio2host_getchar_nowait>:
{
    6420:	b500      	push	{lr}
    6422:	b083      	sub	sp, #12
	int back = sio2host_rx(&c, 1);
    6424:	2101      	movs	r1, #1
    6426:	466b      	mov	r3, sp
    6428:	1dd8      	adds	r0, r3, #7
    642a:	4b05      	ldr	r3, [pc, #20]	; (6440 <sio2host_getchar_nowait+0x20>)
    642c:	4798      	blx	r3
	if (back >= 1) {
    642e:	2800      	cmp	r0, #0
    6430:	dd03      	ble.n	643a <sio2host_getchar_nowait+0x1a>
		return c;
    6432:	466b      	mov	r3, sp
    6434:	79d8      	ldrb	r0, [r3, #7]
}
    6436:	b003      	add	sp, #12
    6438:	bd00      	pop	{pc}
		return (-1);
    643a:	2001      	movs	r0, #1
    643c:	4240      	negs	r0, r0
    643e:	e7fa      	b.n	6436 <sio2host_getchar_nowait+0x16>
    6440:	0000636d 	.word	0x0000636d

00006444 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    6444:	4b13      	ldr	r3, [pc, #76]	; (6494 <HAL_SPISend+0x50>)
    6446:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    6448:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    644a:	7e1a      	ldrb	r2, [r3, #24]
    644c:	420a      	tst	r2, r1
    644e:	d0fc      	beq.n	644a <HAL_SPISend+0x6>
    6450:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    6452:	07d2      	lsls	r2, r2, #31
    6454:	d500      	bpl.n	6458 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    6456:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    6458:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    645a:	7e1a      	ldrb	r2, [r3, #24]
    645c:	420a      	tst	r2, r1
    645e:	d0fc      	beq.n	645a <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    6460:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    6462:	7e1a      	ldrb	r2, [r3, #24]
    6464:	420a      	tst	r2, r1
    6466:	d0fc      	beq.n	6462 <HAL_SPISend+0x1e>
    6468:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    646a:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    646c:	0752      	lsls	r2, r2, #29
    646e:	d50a      	bpl.n	6486 <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    6470:	8b5a      	ldrh	r2, [r3, #26]
    6472:	0752      	lsls	r2, r2, #29
    6474:	d501      	bpl.n	647a <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    6476:	2204      	movs	r2, #4
    6478:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    647a:	4a06      	ldr	r2, [pc, #24]	; (6494 <HAL_SPISend+0x50>)
    647c:	7992      	ldrb	r2, [r2, #6]
    647e:	2a01      	cmp	r2, #1
    6480:	d003      	beq.n	648a <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    6482:	6a98      	ldr	r0, [r3, #40]	; 0x28
    6484:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    6486:	b2c0      	uxtb	r0, r0
}
    6488:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    648a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    648c:	05c0      	lsls	r0, r0, #23
    648e:	0dc0      	lsrs	r0, r0, #23
    6490:	e7f9      	b.n	6486 <HAL_SPISend+0x42>
    6492:	46c0      	nop			; (mov r8, r8)
    6494:	20000bc4 	.word	0x20000bc4

00006498 <HAL_ResetPinMakeOutput>:
{
    6498:	b500      	push	{lr}
    649a:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
    649c:	a901      	add	r1, sp, #4
    649e:	2301      	movs	r3, #1
    64a0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    64a2:	2200      	movs	r2, #0
    64a4:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    64a6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    64a8:	202f      	movs	r0, #47	; 0x2f
    64aa:	4b02      	ldr	r3, [pc, #8]	; (64b4 <HAL_ResetPinMakeOutput+0x1c>)
    64ac:	4798      	blx	r3
}
    64ae:	b003      	add	sp, #12
    64b0:	bd00      	pop	{pc}
    64b2:	46c0      	nop			; (mov r8, r8)
    64b4:	000036fd 	.word	0x000036fd

000064b8 <HAL_RadioDIO2Callback>:
{
    64b8:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    64ba:	4b05      	ldr	r3, [pc, #20]	; (64d0 <HAL_RadioDIO2Callback+0x18>)
    64bc:	681b      	ldr	r3, [r3, #0]
    64be:	2b00      	cmp	r3, #0
    64c0:	d004      	beq.n	64cc <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    64c2:	4b04      	ldr	r3, [pc, #16]	; (64d4 <HAL_RadioDIO2Callback+0x1c>)
    64c4:	4798      	blx	r3
    interruptHandlerDio2();
    64c6:	4b02      	ldr	r3, [pc, #8]	; (64d0 <HAL_RadioDIO2Callback+0x18>)
    64c8:	681b      	ldr	r3, [r3, #0]
    64ca:	4798      	blx	r3
}
    64cc:	bd10      	pop	{r4, pc}
    64ce:	46c0      	nop			; (mov r8, r8)
    64d0:	20000bc0 	.word	0x20000bc0
    64d4:	00006a05 	.word	0x00006a05

000064d8 <HAL_RadioDIO1Callback>:
{
    64d8:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    64da:	4b05      	ldr	r3, [pc, #20]	; (64f0 <HAL_RadioDIO1Callback+0x18>)
    64dc:	681b      	ldr	r3, [r3, #0]
    64de:	2b00      	cmp	r3, #0
    64e0:	d004      	beq.n	64ec <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    64e2:	4b04      	ldr	r3, [pc, #16]	; (64f4 <HAL_RadioDIO1Callback+0x1c>)
    64e4:	4798      	blx	r3
    interruptHandlerDio1();
    64e6:	4b02      	ldr	r3, [pc, #8]	; (64f0 <HAL_RadioDIO1Callback+0x18>)
    64e8:	681b      	ldr	r3, [r3, #0]
    64ea:	4798      	blx	r3
}
    64ec:	bd10      	pop	{r4, pc}
    64ee:	46c0      	nop			; (mov r8, r8)
    64f0:	20000bbc 	.word	0x20000bbc
    64f4:	00006a05 	.word	0x00006a05

000064f8 <HAL_RadioDIO0Callback>:
{
    64f8:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    64fa:	4b05      	ldr	r3, [pc, #20]	; (6510 <HAL_RadioDIO0Callback+0x18>)
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	2b00      	cmp	r3, #0
    6500:	d004      	beq.n	650c <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    6502:	4b04      	ldr	r3, [pc, #16]	; (6514 <HAL_RadioDIO0Callback+0x1c>)
    6504:	4798      	blx	r3
    interruptHandlerDio0();
    6506:	4b02      	ldr	r3, [pc, #8]	; (6510 <HAL_RadioDIO0Callback+0x18>)
    6508:	681b      	ldr	r3, [r3, #0]
    650a:	4798      	blx	r3
}
    650c:	bd10      	pop	{r4, pc}
    650e:	46c0      	nop			; (mov r8, r8)
    6510:	20000bb8 	.word	0x20000bb8
    6514:	00006a05 	.word	0x00006a05

00006518 <HAL_SPICSAssert>:
{
    6518:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    651a:	2201      	movs	r2, #1
    651c:	4902      	ldr	r1, [pc, #8]	; (6528 <HAL_SPICSAssert+0x10>)
    651e:	4803      	ldr	r0, [pc, #12]	; (652c <HAL_SPICSAssert+0x14>)
    6520:	4b03      	ldr	r3, [pc, #12]	; (6530 <HAL_SPICSAssert+0x18>)
    6522:	4798      	blx	r3
}
    6524:	bd10      	pop	{r4, pc}
    6526:	46c0      	nop			; (mov r8, r8)
    6528:	200011a4 	.word	0x200011a4
    652c:	20000bc4 	.word	0x20000bc4
    6530:	00004afd 	.word	0x00004afd

00006534 <HAL_SPICSDeassert>:
{
    6534:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    6536:	2200      	movs	r2, #0
    6538:	4902      	ldr	r1, [pc, #8]	; (6544 <HAL_SPICSDeassert+0x10>)
    653a:	4803      	ldr	r0, [pc, #12]	; (6548 <HAL_SPICSDeassert+0x14>)
    653c:	4b03      	ldr	r3, [pc, #12]	; (654c <HAL_SPICSDeassert+0x18>)
    653e:	4798      	blx	r3
}
    6540:	bd10      	pop	{r4, pc}
    6542:	46c0      	nop			; (mov r8, r8)
    6544:	200011a4 	.word	0x200011a4
    6548:	20000bc4 	.word	0x20000bc4
    654c:	00004afd 	.word	0x00004afd

00006550 <HAL_RadioInit>:
{
    6550:	b5f0      	push	{r4, r5, r6, r7, lr}
    6552:	46d6      	mov	lr, sl
    6554:	464f      	mov	r7, r9
    6556:	4646      	mov	r6, r8
    6558:	b5c0      	push	{r6, r7, lr}
    655a:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    655c:	ac01      	add	r4, sp, #4
    655e:	2601      	movs	r6, #1
    6560:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    6562:	2500      	movs	r5, #0
    6564:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    6566:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    6568:	0021      	movs	r1, r4
    656a:	2052      	movs	r0, #82	; 0x52
    656c:	4f52      	ldr	r7, [pc, #328]	; (66b8 <HAL_RadioInit+0x168>)
    656e:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    6570:	0021      	movs	r1, r4
    6572:	203e      	movs	r0, #62	; 0x3e
    6574:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    6576:	0021      	movs	r1, r4
    6578:	203f      	movs	r0, #63	; 0x3f
    657a:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    657c:	0021      	movs	r1, r4
    657e:	202f      	movs	r0, #47	; 0x2f
    6580:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    6582:	2280      	movs	r2, #128	; 0x80
    6584:	02d2      	lsls	r2, r2, #11
    6586:	4b4d      	ldr	r3, [pc, #308]	; (66bc <HAL_RadioInit+0x16c>)
    6588:	619a      	str	r2, [r3, #24]
    658a:	4b4d      	ldr	r3, [pc, #308]	; (66c0 <HAL_RadioInit+0x170>)
    658c:	2280      	movs	r2, #128	; 0x80
    658e:	05d2      	lsls	r2, r2, #23
    6590:	619a      	str	r2, [r3, #24]
    6592:	2280      	movs	r2, #128	; 0x80
    6594:	0612      	lsls	r2, r2, #24
    6596:	619a      	str	r2, [r3, #24]
    6598:	2280      	movs	r2, #128	; 0x80
    659a:	0212      	lsls	r2, r2, #8
    659c:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    659e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    65a0:	0021      	movs	r1, r4
    65a2:	2053      	movs	r0, #83	; 0x53
    65a4:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    65a6:	ac02      	add	r4, sp, #8
    65a8:	0020      	movs	r0, r4
    65aa:	4b46      	ldr	r3, [pc, #280]	; (66c4 <HAL_RadioInit+0x174>)
    65ac:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    65ae:	2330      	movs	r3, #48	; 0x30
    65b0:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    65b2:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    65b4:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    65b6:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    65b8:	0021      	movs	r1, r4
    65ba:	2000      	movs	r0, #0
    65bc:	4b42      	ldr	r3, [pc, #264]	; (66c8 <HAL_RadioInit+0x178>)
    65be:	469a      	mov	sl, r3
    65c0:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    65c2:	2200      	movs	r2, #0
    65c4:	2100      	movs	r1, #0
    65c6:	4841      	ldr	r0, [pc, #260]	; (66cc <HAL_RadioInit+0x17c>)
    65c8:	4b41      	ldr	r3, [pc, #260]	; (66d0 <HAL_RadioInit+0x180>)
    65ca:	4699      	mov	r9, r3
    65cc:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    65ce:	2100      	movs	r1, #0
    65d0:	2000      	movs	r0, #0
    65d2:	4b40      	ldr	r3, [pc, #256]	; (66d4 <HAL_RadioInit+0x184>)
    65d4:	4698      	mov	r8, r3
    65d6:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    65d8:	230b      	movs	r3, #11
    65da:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    65dc:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    65de:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    65e0:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    65e2:	0021      	movs	r1, r4
    65e4:	200b      	movs	r0, #11
    65e6:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    65e8:	2200      	movs	r2, #0
    65ea:	210b      	movs	r1, #11
    65ec:	483a      	ldr	r0, [pc, #232]	; (66d8 <HAL_RadioInit+0x188>)
    65ee:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    65f0:	2100      	movs	r1, #0
    65f2:	200b      	movs	r0, #11
    65f4:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    65f6:	230c      	movs	r3, #12
    65f8:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    65fa:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    65fc:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    65fe:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    6600:	0021      	movs	r1, r4
    6602:	200c      	movs	r0, #12
    6604:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    6606:	2200      	movs	r2, #0
    6608:	210c      	movs	r1, #12
    660a:	4834      	ldr	r0, [pc, #208]	; (66dc <HAL_RadioInit+0x18c>)
    660c:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    660e:	2100      	movs	r1, #0
    6610:	200c      	movs	r0, #12
    6612:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    6614:	4b32      	ldr	r3, [pc, #200]	; (66e0 <HAL_RadioInit+0x190>)
    6616:	4698      	mov	r8, r3
    6618:	233f      	movs	r3, #63	; 0x3f
    661a:	4642      	mov	r2, r8
    661c:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    661e:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    6620:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    6622:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    6624:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    6626:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    6628:	0021      	movs	r1, r4
    662a:	203f      	movs	r0, #63	; 0x3f
    662c:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    662e:	4643      	mov	r3, r8
    6630:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    6632:	09d1      	lsrs	r1, r2, #7
		return NULL;
    6634:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    6636:	2900      	cmp	r1, #0
    6638:	d104      	bne.n	6644 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    663a:	0953      	lsrs	r3, r2, #5
    663c:	01db      	lsls	r3, r3, #7
    663e:	4929      	ldr	r1, [pc, #164]	; (66e4 <HAL_RadioInit+0x194>)
    6640:	468c      	mov	ip, r1
    6642:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    6644:	211f      	movs	r1, #31
    6646:	4011      	ands	r1, r2
    6648:	2201      	movs	r2, #1
    664a:	0010      	movs	r0, r2
    664c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    664e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    6650:	ac02      	add	r4, sp, #8
    6652:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    6654:	2300      	movs	r3, #0
    6656:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    6658:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    665a:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    665c:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    665e:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    6660:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    6662:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    6664:	3223      	adds	r2, #35	; 0x23
    6666:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    6668:	3a18      	subs	r2, #24
    666a:	2100      	movs	r1, #0
    666c:	a808      	add	r0, sp, #32
    666e:	4b1e      	ldr	r3, [pc, #120]	; (66e8 <HAL_RadioInit+0x198>)
    6670:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    6672:	4b1e      	ldr	r3, [pc, #120]	; (66ec <HAL_RadioInit+0x19c>)
    6674:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    6676:	2380      	movs	r3, #128	; 0x80
    6678:	025b      	lsls	r3, r3, #9
    667a:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    667c:	4b1c      	ldr	r3, [pc, #112]	; (66f0 <HAL_RadioInit+0x1a0>)
    667e:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    6680:	2301      	movs	r3, #1
    6682:	425b      	negs	r3, r3
    6684:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    6686:	4b1b      	ldr	r3, [pc, #108]	; (66f4 <HAL_RadioInit+0x1a4>)
    6688:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    668a:	4b1b      	ldr	r3, [pc, #108]	; (66f8 <HAL_RadioInit+0x1a8>)
    668c:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    668e:	4d1b      	ldr	r5, [pc, #108]	; (66fc <HAL_RadioInit+0x1ac>)
    6690:	0022      	movs	r2, r4
    6692:	491b      	ldr	r1, [pc, #108]	; (6700 <HAL_RadioInit+0x1b0>)
    6694:	0028      	movs	r0, r5
    6696:	4b1b      	ldr	r3, [pc, #108]	; (6704 <HAL_RadioInit+0x1b4>)
    6698:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    669a:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    669c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    669e:	2b00      	cmp	r3, #0
    66a0:	d1fc      	bne.n	669c <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    66a2:	6813      	ldr	r3, [r2, #0]
    66a4:	2102      	movs	r1, #2
    66a6:	430b      	orrs	r3, r1
    66a8:	6013      	str	r3, [r2, #0]
}
    66aa:	b010      	add	sp, #64	; 0x40
    66ac:	bc1c      	pop	{r2, r3, r4}
    66ae:	4690      	mov	r8, r2
    66b0:	4699      	mov	r9, r3
    66b2:	46a2      	mov	sl, r4
    66b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66b6:	46c0      	nop			; (mov r8, r8)
    66b8:	000036fd 	.word	0x000036fd
    66bc:	40002900 	.word	0x40002900
    66c0:	40002880 	.word	0x40002880
    66c4:	000032e1 	.word	0x000032e1
    66c8:	000032f5 	.word	0x000032f5
    66cc:	000064f9 	.word	0x000064f9
    66d0:	00003181 	.word	0x00003181
    66d4:	000031ad 	.word	0x000031ad
    66d8:	000064d9 	.word	0x000064d9
    66dc:	000064b9 	.word	0x000064b9
    66e0:	200011a4 	.word	0x200011a4
    66e4:	40002800 	.word	0x40002800
    66e8:	00018219 	.word	0x00018219
    66ec:	001e8480 	.word	0x001e8480
    66f0:	00530005 	.word	0x00530005
    66f4:	003e0005 	.word	0x003e0005
    66f8:	00520005 	.word	0x00520005
    66fc:	20000bc4 	.word	0x20000bc4
    6700:	42001000 	.word	0x42001000
    6704:	00004821 	.word	0x00004821

00006708 <HAL_Radio_resources_init>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    6708:	4b07      	ldr	r3, [pc, #28]	; (6728 <HAL_Radio_resources_init+0x20>)
    670a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    670c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    670e:	2b00      	cmp	r3, #0
    6710:	d1fc      	bne.n	670c <HAL_Radio_resources_init+0x4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    6712:	6813      	ldr	r3, [r2, #0]
    6714:	2102      	movs	r1, #2
    6716:	430b      	orrs	r3, r1
    6718:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    671a:	4b03      	ldr	r3, [pc, #12]	; (6728 <HAL_Radio_resources_init+0x20>)
    671c:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    671e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(&master)) {
    6720:	2b00      	cmp	r3, #0
    6722:	d1fc      	bne.n	671e <HAL_Radio_resources_init+0x16>
}
    6724:	4770      	bx	lr
    6726:	46c0      	nop			; (mov r8, r8)
    6728:	20000bc4 	.word	0x20000bc4

0000672c <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    672c:	4b06      	ldr	r3, [pc, #24]	; (6748 <HAL_RadioDeInit+0x1c>)
    672e:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    6730:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    6732:	2b00      	cmp	r3, #0
    6734:	d1fc      	bne.n	6730 <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    6736:	338f      	adds	r3, #143	; 0x8f
    6738:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    673a:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    673c:	6813      	ldr	r3, [r2, #0]
    673e:	2102      	movs	r1, #2
    6740:	438b      	bics	r3, r1
    6742:	6013      	str	r3, [r2, #0]
}
    6744:	4770      	bx	lr
    6746:	46c0      	nop			; (mov r8, r8)
    6748:	20000bc4 	.word	0x20000bc4

0000674c <RADIO_Reset>:
{
    674c:	b570      	push	{r4, r5, r6, lr}
    674e:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    6750:	4c0a      	ldr	r4, [pc, #40]	; (677c <RADIO_Reset+0x30>)
    6752:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    6754:	4d0a      	ldr	r5, [pc, #40]	; (6780 <RADIO_Reset+0x34>)
    6756:	2680      	movs	r6, #128	; 0x80
    6758:	0236      	lsls	r6, r6, #8
    675a:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    675c:	2001      	movs	r0, #1
    675e:	4b09      	ldr	r3, [pc, #36]	; (6784 <RADIO_Reset+0x38>)
    6760:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    6762:	a901      	add	r1, sp, #4
    6764:	2300      	movs	r3, #0
    6766:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    6768:	2201      	movs	r2, #1
    676a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    676c:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    676e:	202f      	movs	r0, #47	; 0x2f
    6770:	4b05      	ldr	r3, [pc, #20]	; (6788 <RADIO_Reset+0x3c>)
    6772:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    6774:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    6776:	47a0      	blx	r4
}
    6778:	b002      	add	sp, #8
    677a:	bd70      	pop	{r4, r5, r6, pc}
    677c:	00006499 	.word	0x00006499
    6780:	40002880 	.word	0x40002880
    6784:	000069d1 	.word	0x000069d1
    6788:	000036fd 	.word	0x000036fd

0000678c <RADIO_RegisterWrite>:
{
    678c:	b570      	push	{r4, r5, r6, lr}
    678e:	0004      	movs	r4, r0
    6790:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    6792:	4b05      	ldr	r3, [pc, #20]	; (67a8 <RADIO_RegisterWrite+0x1c>)
    6794:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    6796:	2080      	movs	r0, #128	; 0x80
    6798:	4320      	orrs	r0, r4
    679a:	4c04      	ldr	r4, [pc, #16]	; (67ac <RADIO_RegisterWrite+0x20>)
    679c:	47a0      	blx	r4
	HAL_SPISend(value);
    679e:	0028      	movs	r0, r5
    67a0:	47a0      	blx	r4
	HAL_SPICSDeassert();
    67a2:	4b03      	ldr	r3, [pc, #12]	; (67b0 <RADIO_RegisterWrite+0x24>)
    67a4:	4798      	blx	r3
}
    67a6:	bd70      	pop	{r4, r5, r6, pc}
    67a8:	00006519 	.word	0x00006519
    67ac:	00006445 	.word	0x00006445
    67b0:	00006535 	.word	0x00006535

000067b4 <RADIO_RegisterRead>:
{
    67b4:	b510      	push	{r4, lr}
    67b6:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    67b8:	4b06      	ldr	r3, [pc, #24]	; (67d4 <RADIO_RegisterRead+0x20>)
    67ba:	4798      	blx	r3
	HAL_SPISend(reg);
    67bc:	207f      	movs	r0, #127	; 0x7f
    67be:	4020      	ands	r0, r4
    67c0:	4c05      	ldr	r4, [pc, #20]	; (67d8 <RADIO_RegisterRead+0x24>)
    67c2:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    67c4:	20ff      	movs	r0, #255	; 0xff
    67c6:	47a0      	blx	r4
    67c8:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    67ca:	4b04      	ldr	r3, [pc, #16]	; (67dc <RADIO_RegisterRead+0x28>)
    67cc:	4798      	blx	r3
}
    67ce:	0020      	movs	r0, r4
    67d0:	bd10      	pop	{r4, pc}
    67d2:	46c0      	nop			; (mov r8, r8)
    67d4:	00006519 	.word	0x00006519
    67d8:	00006445 	.word	0x00006445
    67dc:	00006535 	.word	0x00006535

000067e0 <RADIO_FrameWrite>:
{
    67e0:	b570      	push	{r4, r5, r6, lr}
    67e2:	0004      	movs	r4, r0
    67e4:	000e      	movs	r6, r1
    67e6:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    67e8:	4b0a      	ldr	r3, [pc, #40]	; (6814 <RADIO_FrameWrite+0x34>)
    67ea:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    67ec:	2080      	movs	r0, #128	; 0x80
    67ee:	4320      	orrs	r0, r4
    67f0:	4b09      	ldr	r3, [pc, #36]	; (6818 <RADIO_FrameWrite+0x38>)
    67f2:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    67f4:	2d00      	cmp	r5, #0
    67f6:	d00a      	beq.n	680e <RADIO_FrameWrite+0x2e>
    67f8:	0034      	movs	r4, r6
    67fa:	3d01      	subs	r5, #1
    67fc:	b2ed      	uxtb	r5, r5
    67fe:	3501      	adds	r5, #1
    6800:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    6802:	4e05      	ldr	r6, [pc, #20]	; (6818 <RADIO_FrameWrite+0x38>)
    6804:	7820      	ldrb	r0, [r4, #0]
    6806:	47b0      	blx	r6
    6808:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    680a:	42ac      	cmp	r4, r5
    680c:	d1fa      	bne.n	6804 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    680e:	4b03      	ldr	r3, [pc, #12]	; (681c <RADIO_FrameWrite+0x3c>)
    6810:	4798      	blx	r3
}
    6812:	bd70      	pop	{r4, r5, r6, pc}
    6814:	00006519 	.word	0x00006519
    6818:	00006445 	.word	0x00006445
    681c:	00006535 	.word	0x00006535

00006820 <RADIO_FrameRead>:
{
    6820:	b570      	push	{r4, r5, r6, lr}
    6822:	0004      	movs	r4, r0
    6824:	000e      	movs	r6, r1
    6826:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    6828:	4b0a      	ldr	r3, [pc, #40]	; (6854 <RADIO_FrameRead+0x34>)
    682a:	4798      	blx	r3
    HAL_SPISend(offset);
    682c:	0020      	movs	r0, r4
    682e:	4b0a      	ldr	r3, [pc, #40]	; (6858 <RADIO_FrameRead+0x38>)
    6830:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    6832:	2d00      	cmp	r5, #0
    6834:	d00b      	beq.n	684e <RADIO_FrameRead+0x2e>
    6836:	0034      	movs	r4, r6
    6838:	3d01      	subs	r5, #1
    683a:	b2ed      	uxtb	r5, r5
    683c:	3501      	adds	r5, #1
    683e:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    6840:	4e05      	ldr	r6, [pc, #20]	; (6858 <RADIO_FrameRead+0x38>)
    6842:	20ff      	movs	r0, #255	; 0xff
    6844:	47b0      	blx	r6
    6846:	7020      	strb	r0, [r4, #0]
    6848:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    684a:	42ac      	cmp	r4, r5
    684c:	d1f9      	bne.n	6842 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    684e:	4b03      	ldr	r3, [pc, #12]	; (685c <RADIO_FrameRead+0x3c>)
    6850:	4798      	blx	r3
}
    6852:	bd70      	pop	{r4, r5, r6, pc}
    6854:	00006519 	.word	0x00006519
    6858:	00006445 	.word	0x00006445
    685c:	00006535 	.word	0x00006535

00006860 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    6860:	2802      	cmp	r0, #2
    6862:	d007      	beq.n	6874 <HAL_RegisterDioInterruptHandler+0x14>
    6864:	2804      	cmp	r0, #4
    6866:	d008      	beq.n	687a <HAL_RegisterDioInterruptHandler+0x1a>
    6868:	2801      	cmp	r0, #1
    686a:	d000      	beq.n	686e <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    686c:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    686e:	4b04      	ldr	r3, [pc, #16]	; (6880 <HAL_RegisterDioInterruptHandler+0x20>)
    6870:	6019      	str	r1, [r3, #0]
      break;
    6872:	e7fb      	b.n	686c <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    6874:	4b03      	ldr	r3, [pc, #12]	; (6884 <HAL_RegisterDioInterruptHandler+0x24>)
    6876:	6019      	str	r1, [r3, #0]
      break;
    6878:	e7f8      	b.n	686c <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    687a:	4b03      	ldr	r3, [pc, #12]	; (6888 <HAL_RegisterDioInterruptHandler+0x28>)
    687c:	6019      	str	r1, [r3, #0]
}
    687e:	e7f5      	b.n	686c <HAL_RegisterDioInterruptHandler+0xc>
    6880:	20000bb8 	.word	0x20000bb8
    6884:	20000bbc 	.word	0x20000bbc
    6888:	20000bc0 	.word	0x20000bc0

0000688c <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if (RFCtrl1 == RFO_HF)
    688c:	2801      	cmp	r0, #1
    688e:	d000      	beq.n	6892 <HAL_EnableRFCtrl+0x6>
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
#endif	
}
    6890:	4770      	bx	lr
    6892:	2280      	movs	r2, #128	; 0x80
    6894:	0192      	lsls	r2, r2, #6
    6896:	4b01      	ldr	r3, [pc, #4]	; (689c <HAL_EnableRFCtrl+0x10>)
    6898:	619a      	str	r2, [r3, #24]
    689a:	e7f9      	b.n	6890 <HAL_EnableRFCtrl+0x4>
    689c:	40002800 	.word	0x40002800

000068a0 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if (RFCtrl1 == RFO_HF)
    68a0:	2801      	cmp	r0, #1
    68a2:	d000      	beq.n	68a6 <HAL_DisableRFCtrl+0x6>
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    68a4:	4770      	bx	lr
		port_base->OUTCLR.reg = pin_mask;
    68a6:	2280      	movs	r2, #128	; 0x80
    68a8:	0192      	lsls	r2, r2, #6
    68aa:	4b01      	ldr	r3, [pc, #4]	; (68b0 <HAL_DisableRFCtrl+0x10>)
    68ac:	615a      	str	r2, [r3, #20]
    68ae:	e7f9      	b.n	68a4 <HAL_DisableRFCtrl+0x4>
    68b0:	40002800 	.word	0x40002800

000068b4 <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    68b4:	2002      	movs	r0, #2
    68b6:	4770      	bx	lr

000068b8 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    68b8:	2000      	movs	r0, #0
    68ba:	4770      	bx	lr

000068bc <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    68bc:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    68be:	2280      	movs	r2, #128	; 0x80
    68c0:	0092      	lsls	r2, r2, #2
    68c2:	4b03      	ldr	r3, [pc, #12]	; (68d0 <HAL_TCXOPowerOn+0x14>)
    68c4:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    68c6:	2002      	movs	r0, #2
    68c8:	4b02      	ldr	r3, [pc, #8]	; (68d4 <HAL_TCXOPowerOn+0x18>)
    68ca:	4798      	blx	r3
#endif
}
    68cc:	bd10      	pop	{r4, pc}
    68ce:	46c0      	nop			; (mov r8, r8)
    68d0:	40002800 	.word	0x40002800
    68d4:	000029e1 	.word	0x000029e1

000068d8 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    68d8:	2280      	movs	r2, #128	; 0x80
    68da:	0092      	lsls	r2, r2, #2
    68dc:	4b01      	ldr	r3, [pc, #4]	; (68e4 <HAL_TCXOPowerOff+0xc>)
    68de:	615a      	str	r2, [r3, #20]
void HAL_TCXOPowerOff(void)
{
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
}
    68e0:	4770      	bx	lr
    68e2:	46c0      	nop			; (mov r8, r8)
    68e4:	40002800 	.word	0x40002800

000068e8 <HAL_Sleep>:
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
	switch (mode)
    68e8:	2801      	cmp	r0, #1
    68ea:	d002      	beq.n	68f2 <HAL_Sleep+0xa>
    68ec:	2802      	cmp	r0, #2
    68ee:	d00c      	beq.n	690a <HAL_Sleep+0x22>
		{
			/* other sleep modes are not implemented currently */
			break;
		}
	}
}
    68f0:	4770      	bx	lr
	PM->SLEEPCFG.reg = sleep_mode;
    68f2:	2204      	movs	r2, #4
    68f4:	2380      	movs	r3, #128	; 0x80
    68f6:	05db      	lsls	r3, r3, #23
    68f8:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    68fa:	001a      	movs	r2, r3
    68fc:	7853      	ldrb	r3, [r2, #1]
    68fe:	2b04      	cmp	r3, #4
    6900:	d1fc      	bne.n	68fc <HAL_Sleep+0x14>
  __ASM volatile ("dsb");
    6902:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    6906:	bf30      	wfi
    6908:	e7f2      	b.n	68f0 <HAL_Sleep+0x8>
	PM->SLEEPCFG.reg = sleep_mode;
    690a:	2205      	movs	r2, #5
    690c:	2380      	movs	r3, #128	; 0x80
    690e:	05db      	lsls	r3, r3, #23
    6910:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    6912:	001a      	movs	r2, r3
    6914:	7853      	ldrb	r3, [r2, #1]
    6916:	2b05      	cmp	r3, #5
    6918:	d1fc      	bne.n	6914 <HAL_Sleep+0x2c>
  __ASM volatile ("dsb");
    691a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    691e:	bf30      	wfi
    6920:	e7e6      	b.n	68f0 <HAL_Sleep+0x8>
	...

00006924 <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    6924:	b510      	push	{r4, lr}
    6926:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    6928:	2201      	movs	r2, #1
    692a:	466b      	mov	r3, sp
    692c:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    692e:	2300      	movs	r3, #0
    6930:	4669      	mov	r1, sp
    6932:	70cb      	strb	r3, [r1, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
    6934:	710a      	strb	r2, [r1, #4]
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    6936:	466a      	mov	r2, sp
    6938:	800b      	strh	r3, [r1, #0]
	rtc_config.enable_read_sync = true;
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    693a:	3b01      	subs	r3, #1
    693c:	9302      	str	r3, [sp, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    693e:	9303      	str	r3, [sp, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    6940:	4c04      	ldr	r4, [pc, #16]	; (6954 <SleepTimerInit+0x30>)
    6942:	4905      	ldr	r1, [pc, #20]	; (6958 <SleepTimerInit+0x34>)
    6944:	0020      	movs	r0, r4
    6946:	4b05      	ldr	r3, [pc, #20]	; (695c <SleepTimerInit+0x38>)
    6948:	4798      	blx	r3
	rtc_count_enable(&rtc);
    694a:	0020      	movs	r0, r4
    694c:	4b04      	ldr	r3, [pc, #16]	; (6960 <SleepTimerInit+0x3c>)
    694e:	4798      	blx	r3
}
    6950:	b004      	add	sp, #16
    6952:	bd10      	pop	{r4, pc}
    6954:	200011a8 	.word	0x200011a8
    6958:	40002000 	.word	0x40002000
    695c:	000038ad 	.word	0x000038ad
    6960:	0000372d 	.word	0x0000372d

00006964 <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    6964:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    6966:	4802      	ldr	r0, [pc, #8]	; (6970 <SleepTimerGetElapsedTime+0xc>)
    6968:	4b02      	ldr	r3, [pc, #8]	; (6974 <SleepTimerGetElapsedTime+0x10>)
    696a:	4798      	blx	r3
}
    696c:	bd10      	pop	{r4, pc}
    696e:	46c0      	nop			; (mov r8, r8)
    6970:	200011a8 	.word	0x200011a8
    6974:	0000381d 	.word	0x0000381d

00006978 <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    6978:	b570      	push	{r4, r5, r6, lr}
    697a:	0005      	movs	r5, r0
    697c:	000e      	movs	r6, r1
	rtc_count_set_count(&rtc, 0);
    697e:	4c0a      	ldr	r4, [pc, #40]	; (69a8 <SleepTimerStart+0x30>)
    6980:	2100      	movs	r1, #0
    6982:	0020      	movs	r0, r4
    6984:	4b09      	ldr	r3, [pc, #36]	; (69ac <SleepTimerStart+0x34>)
    6986:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    6988:	2208      	movs	r2, #8
    698a:	0031      	movs	r1, r6
    698c:	0020      	movs	r0, r4
    698e:	4b08      	ldr	r3, [pc, #32]	; (69b0 <SleepTimerStart+0x38>)
    6990:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    6992:	2200      	movs	r2, #0
    6994:	0029      	movs	r1, r5
    6996:	0020      	movs	r0, r4
    6998:	4b06      	ldr	r3, [pc, #24]	; (69b4 <SleepTimerStart+0x3c>)
    699a:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    699c:	2108      	movs	r1, #8
    699e:	0020      	movs	r0, r4
    69a0:	4b05      	ldr	r3, [pc, #20]	; (69b8 <SleepTimerStart+0x40>)
    69a2:	4798      	blx	r3
}
    69a4:	bd70      	pop	{r4, r5, r6, pc}
    69a6:	46c0      	nop			; (mov r8, r8)
    69a8:	200011a8 	.word	0x200011a8
    69ac:	000037d9 	.word	0x000037d9
    69b0:	00003949 	.word	0x00003949
    69b4:	00003849 	.word	0x00003849
    69b8:	00003985 	.word	0x00003985

000069bc <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    69bc:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    69be:	2108      	movs	r1, #8
    69c0:	4801      	ldr	r0, [pc, #4]	; (69c8 <SleepTimerStop+0xc>)
    69c2:	4b02      	ldr	r3, [pc, #8]	; (69cc <SleepTimerStop+0x10>)
    69c4:	4798      	blx	r3
}
    69c6:	bd10      	pop	{r4, pc}
    69c8:	200011a8 	.word	0x200011a8
    69cc:	000039c9 	.word	0x000039c9

000069d0 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    69d0:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    69d2:	2800      	cmp	r0, #0
    69d4:	d103      	bne.n	69de <SystemBlockingWaitMs+0xe>
    69d6:	2001      	movs	r0, #1
    69d8:	4b02      	ldr	r3, [pc, #8]	; (69e4 <SystemBlockingWaitMs+0x14>)
    69da:	4798      	blx	r3
#endif
}
    69dc:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    69de:	4b02      	ldr	r3, [pc, #8]	; (69e8 <SystemBlockingWaitMs+0x18>)
    69e0:	4798      	blx	r3
    69e2:	e7fb      	b.n	69dc <SystemBlockingWaitMs+0xc>
    69e4:	000029b5 	.word	0x000029b5
    69e8:	000029e1 	.word	0x000029e1

000069ec <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    69ec:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    69ee:	4b01      	ldr	r3, [pc, #4]	; (69f4 <system_enter_critical_section+0x8>)
    69f0:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    69f2:	bd10      	pop	{r4, pc}
    69f4:	00002a0d 	.word	0x00002a0d

000069f8 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    69f8:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    69fa:	4b01      	ldr	r3, [pc, #4]	; (6a00 <system_leave_critical_section+0x8>)
    69fc:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    69fe:	bd10      	pop	{r4, pc}
    6a00:	00002a4d 	.word	0x00002a4d

00006a04 <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    6a04:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    6a06:	4b16      	ldr	r3, [pc, #88]	; (6a60 <PMM_Wakeup+0x5c>)
    6a08:	781b      	ldrb	r3, [r3, #0]
    6a0a:	2b01      	cmp	r3, #1
    6a0c:	d000      	beq.n	6a10 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    6a0e:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    6a10:	2200      	movs	r2, #0
    6a12:	4b13      	ldr	r3, [pc, #76]	; (6a60 <PMM_Wakeup+0x5c>)
    6a14:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    6a16:	4b13      	ldr	r3, [pc, #76]	; (6a64 <PMM_Wakeup+0x60>)
    6a18:	4798      	blx	r3
    6a1a:	4b13      	ldr	r3, [pc, #76]	; (6a68 <PMM_Wakeup+0x64>)
    6a1c:	4798      	blx	r3
    6a1e:	4913      	ldr	r1, [pc, #76]	; (6a6c <PMM_Wakeup+0x68>)
    6a20:	4b13      	ldr	r3, [pc, #76]	; (6a70 <PMM_Wakeup+0x6c>)
    6a22:	4798      	blx	r3
    6a24:	4b13      	ldr	r3, [pc, #76]	; (6a74 <PMM_Wakeup+0x70>)
    6a26:	4798      	blx	r3
    6a28:	0004      	movs	r4, r0
    6a2a:	000d      	movs	r5, r1
        SleepTimerStop();
    6a2c:	4b12      	ldr	r3, [pc, #72]	; (6a78 <PMM_Wakeup+0x74>)
    6a2e:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    6a30:	0020      	movs	r0, r4
    6a32:	0029      	movs	r1, r5
    6a34:	4b11      	ldr	r3, [pc, #68]	; (6a7c <PMM_Wakeup+0x78>)
    6a36:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    6a38:	4b11      	ldr	r3, [pc, #68]	; (6a80 <PMM_Wakeup+0x7c>)
    6a3a:	681b      	ldr	r3, [r3, #0]
    6a3c:	2b00      	cmp	r3, #0
    6a3e:	d0e6      	beq.n	6a0e <PMM_Wakeup+0xa>
    6a40:	689e      	ldr	r6, [r3, #8]
    6a42:	2e00      	cmp	r6, #0
    6a44:	d0e3      	beq.n	6a0e <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    6a46:	22fa      	movs	r2, #250	; 0xfa
    6a48:	0092      	lsls	r2, r2, #2
    6a4a:	2300      	movs	r3, #0
    6a4c:	0020      	movs	r0, r4
    6a4e:	0029      	movs	r1, r5
    6a50:	4c0c      	ldr	r4, [pc, #48]	; (6a84 <PMM_Wakeup+0x80>)
    6a52:	47a0      	blx	r4
    6a54:	47b0      	blx	r6
            sleepReq = NULL;
    6a56:	2200      	movs	r2, #0
    6a58:	4b09      	ldr	r3, [pc, #36]	; (6a80 <PMM_Wakeup+0x7c>)
    6a5a:	601a      	str	r2, [r3, #0]
}
    6a5c:	e7d7      	b.n	6a0e <PMM_Wakeup+0xa>
    6a5e:	46c0      	nop			; (mov r8, r8)
    6a60:	20000bd0 	.word	0x20000bd0
    6a64:	00006965 	.word	0x00006965
    6a68:	00015eb1 	.word	0x00015eb1
    6a6c:	41f423d7 	.word	0x41f423d7
    6a70:	00015859 	.word	0x00015859
    6a74:	00014f95 	.word	0x00014f95
    6a78:	000069bd 	.word	0x000069bd
    6a7c:	0000c995 	.word	0x0000c995
    6a80:	20000bd4 	.word	0x20000bd4
    6a84:	00014ed1 	.word	0x00014ed1

00006a88 <PMM_Sleep>:
{
    6a88:	b570      	push	{r4, r5, r6, lr}
    6a8a:	1e05      	subs	r5, r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    6a8c:	d059      	beq.n	6b42 <PMM_Sleep+0xba>
    6a8e:	4b33      	ldr	r3, [pc, #204]	; (6b5c <PMM_Sleep+0xd4>)
    6a90:	781b      	ldrb	r3, [r3, #0]
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    6a92:	2000      	movs	r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    6a94:	2b00      	cmp	r3, #0
    6a96:	d000      	beq.n	6a9a <PMM_Sleep+0x12>
}
    6a98:	bd70      	pop	{r4, r5, r6, pc}
        canSleep = SYSTEM_ReadyToSleep();
    6a9a:	4b31      	ldr	r3, [pc, #196]	; (6b60 <PMM_Sleep+0xd8>)
    6a9c:	4798      	blx	r3
    6a9e:	1e04      	subs	r4, r0, #0
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    6aa0:	d051      	beq.n	6b46 <PMM_Sleep+0xbe>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    6aa2:	682b      	ldr	r3, [r5, #0]
    6aa4:	4a2f      	ldr	r2, [pc, #188]	; (6b64 <PMM_Sleep+0xdc>)
    6aa6:	4694      	mov	ip, r2
    6aa8:	4463      	add	r3, ip
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    6aaa:	2400      	movs	r4, #0
    6aac:	4a2e      	ldr	r2, [pc, #184]	; (6b68 <PMM_Sleep+0xe0>)
    6aae:	429a      	cmp	r2, r3
    6ab0:	4164      	adcs	r4, r4
    6ab2:	b2e4      	uxtb	r4, r4
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    6ab4:	792a      	ldrb	r2, [r5, #4]
    6ab6:	2a02      	cmp	r2, #2
    6ab8:	d01e      	beq.n	6af8 <PMM_Sleep+0x70>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    6aba:	2a01      	cmp	r2, #1
    6abc:	d029      	beq.n	6b12 <PMM_Sleep+0x8a>
    uint32_t sysSleepTime = ~0u; /* 0xffFFffFF is invalid */
    6abe:	2601      	movs	r6, #1
    6ac0:	4276      	negs	r6, r6
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    6ac2:	2000      	movs	r0, #0
        if ( canSleep )
    6ac4:	2c00      	cmp	r4, #0
    6ac6:	d0e7      	beq.n	6a98 <PMM_Sleep+0x10>
            SystemTimerSuspend();
    6ac8:	4b28      	ldr	r3, [pc, #160]	; (6b6c <PMM_Sleep+0xe4>)
    6aca:	4798      	blx	r3
            SleepTimerStart( MS_TO_SLEEP_TICKS( sysSleepTime - PMM_WAKEUPTIME_MS ), PMM_Wakeup );
    6acc:	0030      	movs	r0, r6
    6ace:	380a      	subs	r0, #10
    6ad0:	4b27      	ldr	r3, [pc, #156]	; (6b70 <PMM_Sleep+0xe8>)
    6ad2:	4798      	blx	r3
    6ad4:	4927      	ldr	r1, [pc, #156]	; (6b74 <PMM_Sleep+0xec>)
    6ad6:	4b28      	ldr	r3, [pc, #160]	; (6b78 <PMM_Sleep+0xf0>)
    6ad8:	4798      	blx	r3
    6ada:	4b28      	ldr	r3, [pc, #160]	; (6b7c <PMM_Sleep+0xf4>)
    6adc:	4798      	blx	r3
    6ade:	4928      	ldr	r1, [pc, #160]	; (6b80 <PMM_Sleep+0xf8>)
    6ae0:	4b28      	ldr	r3, [pc, #160]	; (6b84 <PMM_Sleep+0xfc>)
    6ae2:	4798      	blx	r3
            pmmState = PMM_STATE_SLEEP;
    6ae4:	2201      	movs	r2, #1
    6ae6:	4b1d      	ldr	r3, [pc, #116]	; (6b5c <PMM_Sleep+0xd4>)
    6ae8:	701a      	strb	r2, [r3, #0]
            sleepReq = req;
    6aea:	4b27      	ldr	r3, [pc, #156]	; (6b88 <PMM_Sleep+0x100>)
    6aec:	601d      	str	r5, [r3, #0]
            HAL_Sleep(req->sleep_mode);
    6aee:	7928      	ldrb	r0, [r5, #4]
    6af0:	4b26      	ldr	r3, [pc, #152]	; (6b8c <PMM_Sleep+0x104>)
    6af2:	4798      	blx	r3
            status = PMM_SLEEP_REQ_PROCESSED;
    6af4:	2001      	movs	r0, #1
    6af6:	e7cf      	b.n	6a98 <PMM_Sleep+0x10>
            canSleep = canSleep && ( SWTIMER_INVALID_TIMEOUT == SwTimerNextExpiryDuration() );
    6af8:	4a1b      	ldr	r2, [pc, #108]	; (6b68 <PMM_Sleep+0xe0>)
    6afa:	2400      	movs	r4, #0
    6afc:	4293      	cmp	r3, r2
    6afe:	d806      	bhi.n	6b0e <PMM_Sleep+0x86>
    6b00:	4b23      	ldr	r3, [pc, #140]	; (6b90 <PMM_Sleep+0x108>)
    6b02:	4798      	blx	r3
    6b04:	3001      	adds	r0, #1
    6b06:	4244      	negs	r4, r0
    6b08:	4144      	adcs	r4, r0
    6b0a:	e000      	b.n	6b0e <PMM_Sleep+0x86>
    6b0c:	2400      	movs	r4, #0
            sysSleepTime = req->sleepTimeMs;
    6b0e:	682e      	ldr	r6, [r5, #0]
    6b10:	e7d7      	b.n	6ac2 <PMM_Sleep+0x3a>
            sysSleepTime = SwTimerNextExpiryDuration();
    6b12:	4b1f      	ldr	r3, [pc, #124]	; (6b90 <PMM_Sleep+0x108>)
    6b14:	4798      	blx	r3
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    6b16:	1c43      	adds	r3, r0, #1
    6b18:	d01c      	beq.n	6b54 <PMM_Sleep+0xcc>
    6b1a:	21fa      	movs	r1, #250	; 0xfa
    6b1c:	0089      	lsls	r1, r1, #2
    6b1e:	4b1d      	ldr	r3, [pc, #116]	; (6b94 <PMM_Sleep+0x10c>)
    6b20:	4798      	blx	r3
    6b22:	0003      	movs	r3, r0
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    6b24:	2000      	movs	r0, #0
            canSleep = canSleep && validateSleepDuration( sysSleepTime );
    6b26:	2c00      	cmp	r4, #0
    6b28:	d0b6      	beq.n	6a98 <PMM_Sleep+0x10>
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    6b2a:	490f      	ldr	r1, [pc, #60]	; (6b68 <PMM_Sleep+0xe0>)
    6b2c:	4a0d      	ldr	r2, [pc, #52]	; (6b64 <PMM_Sleep+0xdc>)
    6b2e:	189a      	adds	r2, r3, r2
    6b30:	428a      	cmp	r2, r1
    6b32:	d8b1      	bhi.n	6a98 <PMM_Sleep+0x10>
    6b34:	682e      	ldr	r6, [r5, #0]
    6b36:	429e      	cmp	r6, r3
    6b38:	d9c6      	bls.n	6ac8 <PMM_Sleep+0x40>
    6b3a:	001e      	movs	r6, r3
    6b3c:	e7c4      	b.n	6ac8 <PMM_Sleep+0x40>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    6b3e:	4b16      	ldr	r3, [pc, #88]	; (6b98 <PMM_Sleep+0x110>)
    6b40:	e7f8      	b.n	6b34 <PMM_Sleep+0xac>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    6b42:	2000      	movs	r0, #0
    6b44:	e7a8      	b.n	6a98 <PMM_Sleep+0x10>
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    6b46:	792b      	ldrb	r3, [r5, #4]
    6b48:	2b02      	cmp	r3, #2
    6b4a:	d0df      	beq.n	6b0c <PMM_Sleep+0x84>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    6b4c:	2b01      	cmp	r3, #1
    6b4e:	d0e0      	beq.n	6b12 <PMM_Sleep+0x8a>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    6b50:	2000      	movs	r0, #0
    return status;
    6b52:	e7a1      	b.n	6a98 <PMM_Sleep+0x10>
            canSleep = canSleep && validateSleepDuration( sysSleepTime );
    6b54:	2c00      	cmp	r4, #0
    6b56:	d1f2      	bne.n	6b3e <PMM_Sleep+0xb6>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    6b58:	4e0f      	ldr	r6, [pc, #60]	; (6b98 <PMM_Sleep+0x110>)
    6b5a:	e7b2      	b.n	6ac2 <PMM_Sleep+0x3a>
    6b5c:	20000bd0 	.word	0x20000bd0
    6b60:	0000cafd 	.word	0x0000cafd
    6b64:	fffffc18 	.word	0xfffffc18
    6b68:	07cebbc8 	.word	0x07cebbc8
    6b6c:	0000c961 	.word	0x0000c961
    6b70:	00015eb1 	.word	0x00015eb1
    6b74:	42031375 	.word	0x42031375
    6b78:	00015859 	.word	0x00015859
    6b7c:	00014f65 	.word	0x00014f65
    6b80:	00006a05 	.word	0x00006a05
    6b84:	00006979 	.word	0x00006979
    6b88:	20000bd4 	.word	0x20000bd4
    6b8c:	000068e9 	.word	0x000068e9
    6b90:	0000c69d 	.word	0x0000c69d
    6b94:	00014b71 	.word	0x00014b71
    6b98:	07cebfb0 	.word	0x07cebfb0

00006b9c <LorawanReg_AS_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AS_Pds_Cb(void)
{
	; // nothing to do
}
    6b9c:	4770      	bx	lr
	...

00006ba0 <LORAReg_InitAS>:
{
    6ba0:	b530      	push	{r4, r5, lr}
    6ba2:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    6ba4:	4b76      	ldr	r3, [pc, #472]	; (6d80 <LORAReg_InitAS+0x1e0>)
    6ba6:	2203      	movs	r2, #3
    6ba8:	779a      	strb	r2, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    6baa:	2110      	movs	r1, #16
    6bac:	321f      	adds	r2, #31
    6bae:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    6bb0:	3a21      	subs	r2, #33	; 0x21
    6bb2:	2421      	movs	r4, #33	; 0x21
    6bb4:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    6bb6:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    6bb8:	001a      	movs	r2, r3
    6bba:	326c      	adds	r2, #108	; 0x6c
    6bbc:	711a      	strb	r2, [r3, #4]
    6bbe:	0a14      	lsrs	r4, r2, #8
    6bc0:	715c      	strb	r4, [r3, #5]
    6bc2:	0c14      	lsrs	r4, r2, #16
    6bc4:	719c      	strb	r4, [r3, #6]
    6bc6:	0e12      	lsrs	r2, r2, #24
    6bc8:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    6bca:	001a      	movs	r2, r3
    6bcc:	322c      	adds	r2, #44	; 0x2c
    6bce:	701a      	strb	r2, [r3, #0]
    6bd0:	0a14      	lsrs	r4, r2, #8
    6bd2:	705c      	strb	r4, [r3, #1]
    6bd4:	0c14      	lsrs	r4, r2, #16
    6bd6:	709c      	strb	r4, [r3, #2]
    6bd8:	0e12      	lsrs	r2, r2, #24
    6bda:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    6bdc:	001a      	movs	r2, r3
    6bde:	328c      	adds	r2, #140	; 0x8c
    6be0:	721a      	strb	r2, [r3, #8]
    6be2:	0a14      	lsrs	r4, r2, #8
    6be4:	725c      	strb	r4, [r3, #9]
    6be6:	0c14      	lsrs	r4, r2, #16
    6be8:	729c      	strb	r4, [r3, #10]
    6bea:	0e12      	lsrs	r2, r2, #24
    6bec:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    6bee:	001a      	movs	r2, r3
    6bf0:	324d      	adds	r2, #77	; 0x4d
    6bf2:	32ff      	adds	r2, #255	; 0xff
    6bf4:	741a      	strb	r2, [r3, #16]
    6bf6:	0a14      	lsrs	r4, r2, #8
    6bf8:	745c      	strb	r4, [r3, #17]
    6bfa:	0c14      	lsrs	r4, r2, #16
    6bfc:	749c      	strb	r4, [r3, #18]
    6bfe:	0e12      	lsrs	r2, r2, #24
    6c00:	74da      	strb	r2, [r3, #19]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    6c02:	001a      	movs	r2, r3
    6c04:	32ad      	adds	r2, #173	; 0xad
    6c06:	32ff      	adds	r2, #255	; 0xff
    6c08:	731a      	strb	r2, [r3, #12]
    6c0a:	0a14      	lsrs	r4, r2, #8
    6c0c:	735c      	strb	r4, [r3, #13]
    6c0e:	0c14      	lsrs	r4, r2, #16
    6c10:	739c      	strb	r4, [r3, #14]
    6c12:	0e12      	lsrs	r2, r2, #24
    6c14:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    6c16:	2202      	movs	r2, #2
    6c18:	769a      	strb	r2, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    6c1a:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    6c1c:	2400      	movs	r4, #0
    6c1e:	751c      	strb	r4, [r3, #20]
    6c20:	3c16      	subs	r4, #22
    6c22:	755c      	strb	r4, [r3, #21]
    6c24:	341c      	adds	r4, #28
    6c26:	759c      	strb	r4, [r3, #22]
    6c28:	3431      	adds	r4, #49	; 0x31
    6c2a:	75dc      	strb	r4, [r3, #23]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    6c2c:	765a      	strb	r2, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    6c2e:	3c25      	subs	r4, #37	; 0x25
    6c30:	761c      	strb	r4, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    6c32:	3c0b      	subs	r4, #11
    6c34:	771c      	strb	r4, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    6c36:	2500      	movs	r5, #0
    6c38:	775d      	strb	r5, [r3, #29]
	RegParams.Rx1DrOffset = 7;
    6c3a:	3524      	adds	r5, #36	; 0x24
    6c3c:	555c      	strb	r4, [r3, r5]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    6c3e:	3501      	adds	r5, #1
    6c40:	555c      	strb	r4, [r3, r5]
	RegParams.maxTxPwr = 16;
    6c42:	3419      	adds	r4, #25
    6c44:	5519      	strb	r1, [r3, r4]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    6c46:	21aa      	movs	r1, #170	; 0xaa
    6c48:	31ff      	adds	r1, #255	; 0xff
    6c4a:	545a      	strb	r2, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    6c4c:	4a4d      	ldr	r2, [pc, #308]	; (6d84 <LORAReg_InitAS+0x1e4>)
    6c4e:	7811      	ldrb	r1, [r2, #0]
    6c50:	22a8      	movs	r2, #168	; 0xa8
    6c52:	0052      	lsls	r2, r2, #1
    6c54:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    6c56:	3a2b      	subs	r2, #43	; 0x2b
    6c58:	3aff      	subs	r2, #255	; 0xff
    6c5a:	5498      	strb	r0, [r3, r2]
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    6c5c:	3806      	subs	r0, #6
		result =  LORAWAN_INVALID_PARAMETER;
    6c5e:	3c16      	subs	r4, #22
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    6c60:	2808      	cmp	r0, #8
    6c62:	d91c      	bls.n	6c9e <LORAReg_InitAS+0xfe>
	if(!initialized)
    6c64:	4b48      	ldr	r3, [pc, #288]	; (6d88 <LORAReg_InitAS+0x1e8>)
    6c66:	781b      	ldrb	r3, [r3, #0]
    6c68:	2b00      	cmp	r3, #0
    6c6a:	d102      	bne.n	6c72 <LORAReg_InitAS+0xd2>
		initialized = true;
    6c6c:	2201      	movs	r2, #1
    6c6e:	4b46      	ldr	r3, [pc, #280]	; (6d88 <LORAReg_InitAS+0x1e8>)
    6c70:	701a      	strb	r2, [r3, #0]
    LORAREG_InitGetAttrFnPtrsAS();	
    6c72:	4b46      	ldr	r3, [pc, #280]	; (6d8c <LORAReg_InitAS+0x1ec>)
    6c74:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    6c76:	4b46      	ldr	r3, [pc, #280]	; (6d90 <LORAReg_InitAS+0x1f0>)
    6c78:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    6c7a:	4b46      	ldr	r3, [pc, #280]	; (6d94 <LORAReg_InitAS+0x1f4>)
    6c7c:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.band_item_id);
    6c7e:	4b40      	ldr	r3, [pc, #256]	; (6d80 <LORAReg_InitAS+0x1e0>)
    6c80:	22fc      	movs	r2, #252	; 0xfc
    6c82:	32ff      	adds	r2, #255	; 0xff
    6c84:	5c9a      	ldrb	r2, [r3, r2]
    6c86:	21fe      	movs	r1, #254	; 0xfe
    6c88:	0049      	lsls	r1, r1, #1
    6c8a:	5c58      	ldrb	r0, [r3, r1]
    6c8c:	0200      	lsls	r0, r0, #8
    6c8e:	4310      	orrs	r0, r2
    6c90:	b2c1      	uxtb	r1, r0
    6c92:	0a00      	lsrs	r0, r0, #8
    6c94:	4b40      	ldr	r3, [pc, #256]	; (6d98 <LORAReg_InitAS+0x1f8>)
    6c96:	4798      	blx	r3
}
    6c98:	0020      	movs	r0, r4
    6c9a:	b007      	add	sp, #28
    6c9c:	bd30      	pop	{r4, r5, pc}
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    6c9e:	001c      	movs	r4, r3
    6ca0:	0018      	movs	r0, r3
    6ca2:	306c      	adds	r0, #108	; 0x6c
    6ca4:	3a22      	subs	r2, #34	; 0x22
    6ca6:	493d      	ldr	r1, [pc, #244]	; (6d9c <LORAReg_InitAS+0x1fc>)
    6ca8:	4d3d      	ldr	r5, [pc, #244]	; (6da0 <LORAReg_InitAS+0x200>)
    6caa:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    6cac:	0020      	movs	r0, r4
    6cae:	308c      	adds	r0, #140	; 0x8c
    6cb0:	2218      	movs	r2, #24
    6cb2:	493c      	ldr	r1, [pc, #240]	; (6da4 <LORAReg_InitAS+0x204>)
    6cb4:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    6cb6:	0020      	movs	r0, r4
    6cb8:	30ad      	adds	r0, #173	; 0xad
    6cba:	30ff      	adds	r0, #255	; 0xff
    6cbc:	220c      	movs	r2, #12
    6cbe:	493a      	ldr	r1, [pc, #232]	; (6da8 <LORAReg_InitAS+0x208>)
    6cc0:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    6cc2:	0020      	movs	r0, r4
    6cc4:	3097      	adds	r0, #151	; 0x97
    6cc6:	30ff      	adds	r0, #255	; 0xff
    6cc8:	2202      	movs	r2, #2
    6cca:	4938      	ldr	r1, [pc, #224]	; (6dac <LORAReg_InitAS+0x20c>)
    6ccc:	47a8      	blx	r5
    6cce:	2302      	movs	r3, #2
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6cd0:	482b      	ldr	r0, [pc, #172]	; (6d80 <LORAReg_InitAS+0x1e0>)
    6cd2:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    6cd4:	2422      	movs	r4, #34	; 0x22
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6cd6:	7902      	ldrb	r2, [r0, #4]
    6cd8:	7941      	ldrb	r1, [r0, #5]
    6cda:	0209      	lsls	r1, r1, #8
    6cdc:	4311      	orrs	r1, r2
    6cde:	7982      	ldrb	r2, [r0, #6]
    6ce0:	0412      	lsls	r2, r2, #16
    6ce2:	4311      	orrs	r1, r2
    6ce4:	79c2      	ldrb	r2, [r0, #7]
    6ce6:	0612      	lsls	r2, r2, #24
    6ce8:	430a      	orrs	r2, r1
    6cea:	0059      	lsls	r1, r3, #1
    6cec:	188a      	adds	r2, r1, r2
    6cee:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    6cf0:	3301      	adds	r3, #1
    6cf2:	b2db      	uxtb	r3, r3
    6cf4:	5702      	ldrsb	r2, [r0, r4]
    6cf6:	4293      	cmp	r3, r2
    6cf8:	dbed      	blt.n	6cd6 <LORAReg_InitAS+0x136>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    6cfa:	4c21      	ldr	r4, [pc, #132]	; (6d80 <LORAReg_InitAS+0x1e0>)
    6cfc:	2210      	movs	r2, #16
    6cfe:	23d5      	movs	r3, #213	; 0xd5
    6d00:	005b      	lsls	r3, r3, #1
    6d02:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    6d04:	7820      	ldrb	r0, [r4, #0]
    6d06:	7863      	ldrb	r3, [r4, #1]
    6d08:	021b      	lsls	r3, r3, #8
    6d0a:	4303      	orrs	r3, r0
    6d0c:	78a0      	ldrb	r0, [r4, #2]
    6d0e:	0400      	lsls	r0, r0, #16
    6d10:	4303      	orrs	r3, r0
    6d12:	78e0      	ldrb	r0, [r4, #3]
    6d14:	0600      	lsls	r0, r0, #24
    6d16:	4318      	orrs	r0, r3
    6d18:	3230      	adds	r2, #48	; 0x30
    6d1a:	4925      	ldr	r1, [pc, #148]	; (6db0 <LORAReg_InitAS+0x210>)
    6d1c:	4b20      	ldr	r3, [pc, #128]	; (6da0 <LORAReg_InitAS+0x200>)
    6d1e:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_AS_05_IDX;
    6d20:	2304      	movs	r3, #4
    6d22:	2104      	movs	r1, #4
    6d24:	22fa      	movs	r2, #250	; 0xfa
    6d26:	0052      	lsls	r2, r2, #1
    6d28:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    6d2a:	2100      	movs	r1, #0
    6d2c:	22f6      	movs	r2, #246	; 0xf6
    6d2e:	32ff      	adds	r2, #255	; 0xff
    6d30:	54a1      	strb	r1, [r4, r2]
    6d32:	0022      	movs	r2, r4
    6d34:	32f6      	adds	r2, #246	; 0xf6
    6d36:	32ff      	adds	r2, #255	; 0xff
    6d38:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AS_CH_PARAM_1;
    6d3a:	22f8      	movs	r2, #248	; 0xf8
    6d3c:	32ff      	adds	r2, #255	; 0xff
    6d3e:	54a1      	strb	r1, [r4, r2]
    6d40:	0022      	movs	r2, r4
    6d42:	32f8      	adds	r2, #248	; 0xf8
    6d44:	32ff      	adds	r2, #255	; 0xff
    6d46:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_AS_CH_PARAM_2;
    6d48:	3101      	adds	r1, #1
    6d4a:	22fa      	movs	r2, #250	; 0xfa
    6d4c:	32ff      	adds	r2, #255	; 0xff
    6d4e:	54a1      	strb	r1, [r4, r2]
    6d50:	0022      	movs	r2, r4
    6d52:	32fa      	adds	r2, #250	; 0xfa
    6d54:	32ff      	adds	r2, #255	; 0xff
    6d56:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = PDS_REG_AS_BAND;
    6d58:	3101      	adds	r1, #1
    6d5a:	22fc      	movs	r2, #252	; 0xfc
    6d5c:	32ff      	adds	r2, #255	; 0xff
    6d5e:	54a1      	strb	r1, [r4, r2]
    6d60:	18a4      	adds	r4, r4, r2
    6d62:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegAsPdsOps;
    6d64:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_AS_MAX_VALUE & 0x00FF);
    6d66:	3af9      	subs	r2, #249	; 0xf9
    6d68:	3aff      	subs	r2, #255	; 0xff
    6d6a:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_AS_Pds_Cb;
    6d6c:	4a11      	ldr	r2, [pc, #68]	; (6db4 <LORAReg_InitAS+0x214>)
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
    6d6e:	9200      	str	r2, [sp, #0]
    6d70:	4911      	ldr	r1, [pc, #68]	; (6db8 <LORAReg_InitAS+0x218>)
    6d72:	9a03      	ldr	r2, [sp, #12]
    6d74:	4b11      	ldr	r3, [pc, #68]	; (6dbc <LORAReg_InitAS+0x21c>)
    6d76:	2004      	movs	r0, #4
    6d78:	4c11      	ldr	r4, [pc, #68]	; (6dc0 <LORAReg_InitAS+0x220>)
    6d7a:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6d7c:	2408      	movs	r4, #8
    6d7e:	e771      	b.n	6c64 <LORAReg_InitAS+0xc4>
    6d80:	20001404 	.word	0x20001404
    6d84:	20001400 	.word	0x20001400
    6d88:	20000bd8 	.word	0x20000bd8
    6d8c:	0000a881 	.word	0x0000a881
    6d90:	0000af6d 	.word	0x0000af6d
    6d94:	0000b1e5 	.word	0x0000b1e5
    6d98:	0000b745 	.word	0x0000b745
    6d9c:	0001df90 	.word	0x0001df90
    6da0:	00018195 	.word	0x00018195
    6da4:	0001df78 	.word	0x0001df78
    6da8:	0001dfd8 	.word	0x0001dfd8
    6dac:	0001dfd4 	.word	0x0001dfd4
    6db0:	0001df94 	.word	0x0001df94
    6db4:	00006b9d 	.word	0x00006b9d
    6db8:	200011e0 	.word	0x200011e0
    6dbc:	0001dfe4 	.word	0x0001dfe4
    6dc0:	0000b95d 	.word	0x0000b95d

00006dc4 <LorawanReg_AU_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AU_Pds_Cb(void)
{
	
}
    6dc4:	4770      	bx	lr
	...

00006dc8 <LORAReg_InitAU>:
{
    6dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6dca:	46de      	mov	lr, fp
    6dcc:	4657      	mov	r7, sl
    6dce:	464e      	mov	r6, r9
    6dd0:	4645      	mov	r5, r8
    6dd2:	b5e0      	push	{r5, r6, r7, lr}
    6dd4:	b087      	sub	sp, #28
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    6dd6:	4c65      	ldr	r4, [pc, #404]	; (6f6c <LORAReg_InitAU+0x1a4>)
    6dd8:	2303      	movs	r3, #3
    6dda:	77a3      	strb	r3, [r4, #30]
	RegParams.maxChannels = MAX_CHANNELS_AU;
    6ddc:	2248      	movs	r2, #72	; 0x48
    6dde:	331f      	adds	r3, #31
    6de0:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    6de2:	3b1b      	subs	r3, #27
    6de4:	77e3      	strb	r3, [r4, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    6de6:	0023      	movs	r3, r4
    6de8:	339c      	adds	r3, #156	; 0x9c
    6dea:	2200      	movs	r2, #0
    6dec:	4690      	mov	r8, r2
    6dee:	7123      	strb	r3, [r4, #4]
    6df0:	0a1a      	lsrs	r2, r3, #8
    6df2:	7162      	strb	r2, [r4, #5]
    6df4:	0c1a      	lsrs	r2, r3, #16
    6df6:	71a2      	strb	r2, [r4, #6]
    6df8:	0e1a      	lsrs	r2, r3, #24
    6dfa:	71e2      	strb	r2, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    6dfc:	0026      	movs	r6, r4
    6dfe:	362c      	adds	r6, #44	; 0x2c
    6e00:	7026      	strb	r6, [r4, #0]
    6e02:	0a32      	lsrs	r2, r6, #8
    6e04:	7062      	strb	r2, [r4, #1]
    6e06:	0c32      	lsrs	r2, r6, #16
    6e08:	70a2      	strb	r2, [r4, #2]
    6e0a:	0e32      	lsrs	r2, r6, #24
    6e0c:	70e2      	strb	r2, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    6e0e:	22ff      	movs	r2, #255	; 0xff
    6e10:	7662      	strb	r2, [r4, #25]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    6e12:	2508      	movs	r5, #8
    6e14:	2708      	movs	r7, #8
    6e16:	76a5      	strb	r5, [r4, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    6e18:	76e5      	strb	r5, [r4, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    6e1a:	3a60      	subs	r2, #96	; 0x60
    6e1c:	3aff      	subs	r2, #255	; 0xff
    6e1e:	4692      	mov	sl, r2
    6e20:	7522      	strb	r2, [r4, #20]
    6e22:	2270      	movs	r2, #112	; 0x70
    6e24:	7562      	strb	r2, [r4, #21]
    6e26:	75a7      	strb	r7, [r4, #22]
    6e28:	3a39      	subs	r2, #57	; 0x39
    6e2a:	75e2      	strb	r2, [r4, #23]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    6e2c:	3a1f      	subs	r2, #31
    6e2e:	7622      	strb	r2, [r4, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    6e30:	3a12      	subs	r2, #18
    6e32:	4693      	mov	fp, r2
    6e34:	7722      	strb	r2, [r4, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    6e36:	4641      	mov	r1, r8
    6e38:	7761      	strb	r1, [r4, #29]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU;
    6e3a:	2140      	movs	r1, #64	; 0x40
    6e3c:	4689      	mov	r9, r1
    6e3e:	31fc      	adds	r1, #252	; 0xfc
    6e40:	464a      	mov	r2, r9
    6e42:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU;
    6e44:	223e      	movs	r2, #62	; 0x3e
    6e46:	32ff      	adds	r2, #255	; 0xff
    6e48:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    6e4a:	3a05      	subs	r2, #5
    6e4c:	4641      	mov	r1, r8
    6e4e:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    6e50:	223a      	movs	r2, #58	; 0x3a
    6e52:	32ff      	adds	r2, #255	; 0xff
    6e54:	4659      	mov	r1, fp
    6e56:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    6e58:	3201      	adds	r2, #1
    6e5a:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    6e5c:	3a2e      	subs	r2, #46	; 0x2e
    6e5e:	3aff      	subs	r2, #255	; 0xff
    6e60:	4694      	mov	ip, r2
    6e62:	223c      	movs	r2, #60	; 0x3c
    6e64:	32ff      	adds	r2, #255	; 0xff
    6e66:	4661      	mov	r1, ip
    6e68:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    6e6a:	3203      	adds	r2, #3
    6e6c:	54a5      	strb	r5, [r4, r2]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    6e6e:	2200      	movs	r2, #0
    6e70:	4694      	mov	ip, r2
    6e72:	322d      	adds	r2, #45	; 0x2d
    6e74:	32ff      	adds	r2, #255	; 0xff
    6e76:	4661      	mov	r1, ip
    6e78:	54a1      	strb	r1, [r4, r2]
    6e7a:	0022      	movs	r2, r4
    6e7c:	322d      	adds	r2, #45	; 0x2d
    6e7e:	32ff      	adds	r2, #255	; 0xff
    6e80:	2128      	movs	r1, #40	; 0x28
    6e82:	4249      	negs	r1, r1
    6e84:	7051      	strb	r1, [r2, #1]
    6e86:	2174      	movs	r1, #116	; 0x74
    6e88:	4249      	negs	r1, r1
    6e8a:	7091      	strb	r1, [r2, #2]
    6e8c:	2136      	movs	r1, #54	; 0x36
    6e8e:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    6e90:	2260      	movs	r2, #96	; 0x60
    6e92:	4694      	mov	ip, r2
    6e94:	32d0      	adds	r2, #208	; 0xd0
    6e96:	4661      	mov	r1, ip
    6e98:	54a1      	strb	r1, [r4, r2]
    6e9a:	0022      	movs	r2, r4
    6e9c:	3231      	adds	r2, #49	; 0x31
    6e9e:	32ff      	adds	r2, #255	; 0xff
    6ea0:	217a      	movs	r1, #122	; 0x7a
    6ea2:	4249      	negs	r1, r1
    6ea4:	7051      	strb	r1, [r2, #1]
    6ea6:	2169      	movs	r1, #105	; 0x69
    6ea8:	4249      	negs	r1, r1
    6eaa:	7091      	strb	r1, [r2, #2]
    6eac:	2136      	movs	r1, #54	; 0x36
    6eae:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    6eb0:	229a      	movs	r2, #154	; 0x9a
    6eb2:	0052      	lsls	r2, r2, #1
    6eb4:	4651      	mov	r1, sl
    6eb6:	54a1      	strb	r1, [r4, r2]
    6eb8:	0022      	movs	r2, r4
    6eba:	3235      	adds	r2, #53	; 0x35
    6ebc:	32ff      	adds	r2, #255	; 0xff
    6ebe:	2170      	movs	r1, #112	; 0x70
    6ec0:	7051      	strb	r1, [r2, #1]
    6ec2:	7097      	strb	r7, [r2, #2]
    6ec4:	2137      	movs	r1, #55	; 0x37
    6ec6:	70d1      	strb	r1, [r2, #3]
	RegParams.Rx1DrOffset = 5;
    6ec8:	2105      	movs	r1, #5
    6eca:	2224      	movs	r2, #36	; 0x24
    6ecc:	54a1      	strb	r1, [r4, r2]
	RegParams.maxTxPwrIndx = 10;
    6ece:	3105      	adds	r1, #5
    6ed0:	3201      	adds	r2, #1
    6ed2:	54a1      	strb	r1, [r4, r2]
	RegParams.maxTxPwr = 30;
    6ed4:	3114      	adds	r1, #20
    6ed6:	3a05      	subs	r2, #5
    6ed8:	54a1      	strb	r1, [r4, r2]
	RegParams.band = ismBand;
    6eda:	3206      	adds	r2, #6
    6edc:	54a0      	strb	r0, [r4, r2]
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    6ede:	326a      	adds	r2, #106	; 0x6a
    6ee0:	4923      	ldr	r1, [pc, #140]	; (6f70 <LORAReg_InitAU+0x1a8>)
    6ee2:	0018      	movs	r0, r3
    6ee4:	4b23      	ldr	r3, [pc, #140]	; (6f74 <LORAReg_InitAU+0x1ac>)
    6ee6:	4699      	mov	r9, r3
    6ee8:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    6eea:	2270      	movs	r2, #112	; 0x70
    6eec:	4922      	ldr	r1, [pc, #136]	; (6f78 <LORAReg_InitAU+0x1b0>)
    6eee:	0030      	movs	r0, r6
    6ef0:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    6ef2:	2340      	movs	r3, #64	; 0x40
    6ef4:	33ff      	adds	r3, #255	; 0xff
    6ef6:	4642      	mov	r2, r8
    6ef8:	54e2      	strb	r2, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_AU_09_IDX;
    6efa:	33b5      	adds	r3, #181	; 0xb5
    6efc:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.alt_ch_item_id = PDS_REG_AU_ALT_CH;
    6efe:	2200      	movs	r2, #0
    6f00:	23f6      	movs	r3, #246	; 0xf6
    6f02:	33ff      	adds	r3, #255	; 0xff
    6f04:	54e2      	strb	r2, [r4, r3]
    6f06:	0023      	movs	r3, r4
    6f08:	33f6      	adds	r3, #246	; 0xf6
    6f0a:	33ff      	adds	r3, #255	; 0xff
    6f0c:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AU_CH_PARAM;
    6f0e:	3201      	adds	r2, #1
    6f10:	23f8      	movs	r3, #248	; 0xf8
    6f12:	33ff      	adds	r3, #255	; 0xff
    6f14:	54e2      	strb	r2, [r4, r3]
    6f16:	0023      	movs	r3, r4
    6f18:	33f8      	adds	r3, #248	; 0xf8
    6f1a:	33ff      	adds	r3, #255	; 0xff
    6f1c:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    6f1e:	2200      	movs	r2, #0
    6f20:	23fa      	movs	r3, #250	; 0xfa
    6f22:	33ff      	adds	r3, #255	; 0xff
    6f24:	54e2      	strb	r2, [r4, r3]
    6f26:	0023      	movs	r3, r4
    6f28:	33fa      	adds	r3, #250	; 0xfa
    6f2a:	33ff      	adds	r3, #255	; 0xff
    6f2c:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    6f2e:	23fc      	movs	r3, #252	; 0xfc
    6f30:	33ff      	adds	r3, #255	; 0xff
    6f32:	54e2      	strb	r2, [r4, r3]
    6f34:	18e4      	adds	r4, r4, r3
    6f36:	2300      	movs	r3, #0
    6f38:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegAuPdsOps;
    6f3a:	ab02      	add	r3, sp, #8
	filemarks.numItems =  (uint8_t)(PDS_REG_AU_MAX_VALUE & 0x00FF);
    6f3c:	3202      	adds	r2, #2
    6f3e:	711a      	strb	r2, [r3, #4]
	filemarks.fIDcb = LorawanReg_AU_Pds_Cb;
    6f40:	4a0e      	ldr	r2, [pc, #56]	; (6f7c <LORAReg_InitAU+0x1b4>)
	PDS_RegFile(PDS_FILE_REG_AU_09_IDX,filemarks);
    6f42:	9200      	str	r2, [sp, #0]
    6f44:	490e      	ldr	r1, [pc, #56]	; (6f80 <LORAReg_InitAU+0x1b8>)
    6f46:	9a03      	ldr	r2, [sp, #12]
    6f48:	4b0e      	ldr	r3, [pc, #56]	; (6f84 <LORAReg_InitAU+0x1bc>)
    6f4a:	2008      	movs	r0, #8
    6f4c:	4c0e      	ldr	r4, [pc, #56]	; (6f88 <LORAReg_InitAU+0x1c0>)
    6f4e:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsAU();
    6f50:	4b0e      	ldr	r3, [pc, #56]	; (6f8c <LORAReg_InitAU+0x1c4>)
    6f52:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    6f54:	4b0e      	ldr	r3, [pc, #56]	; (6f90 <LORAReg_InitAU+0x1c8>)
    6f56:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    6f58:	4b0e      	ldr	r3, [pc, #56]	; (6f94 <LORAReg_InitAU+0x1cc>)
    6f5a:	4798      	blx	r3
}
    6f5c:	2008      	movs	r0, #8
    6f5e:	b007      	add	sp, #28
    6f60:	bc3c      	pop	{r2, r3, r4, r5}
    6f62:	4690      	mov	r8, r2
    6f64:	4699      	mov	r9, r3
    6f66:	46a2      	mov	sl, r4
    6f68:	46ab      	mov	fp, r5
    6f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6f6c:	20001404 	.word	0x20001404
    6f70:	0001dffc 	.word	0x0001dffc
    6f74:	00018195 	.word	0x00018195
    6f78:	0001e08c 	.word	0x0001e08c
    6f7c:	00006dc5 	.word	0x00006dc5
    6f80:	200011e4 	.word	0x200011e4
    6f84:	0001e0fc 	.word	0x0001e0fc
    6f88:	0000b95d 	.word	0x0000b95d
    6f8c:	0000a9bd 	.word	0x0000a9bd
    6f90:	0000afd9 	.word	0x0000afd9
    6f94:	0000b231 	.word	0x0000b231

00006f98 <LorawanReg_EU868_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_EU868_Pds_Cb(void)
{
	
}
    6f98:	4770      	bx	lr
	...

00006f9c <LORAReg_InitEU>:
{
    6f9c:	b570      	push	{r4, r5, r6, lr}
    6f9e:	b08a      	sub	sp, #40	; 0x28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    6fa0:	4b8d      	ldr	r3, [pc, #564]	; (71d8 <LORAReg_InitEU+0x23c>)
    6fa2:	2103      	movs	r1, #3
    6fa4:	7799      	strb	r1, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    6fa6:	2410      	movs	r4, #16
    6fa8:	2222      	movs	r2, #34	; 0x22
    6faa:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    6fac:	2506      	movs	r5, #6
    6fae:	3a01      	subs	r2, #1
    6fb0:	549d      	strb	r5, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    6fb2:	3a20      	subs	r2, #32
    6fb4:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    6fb6:	001a      	movs	r2, r3
    6fb8:	326c      	adds	r2, #108	; 0x6c
    6fba:	711a      	strb	r2, [r3, #4]
    6fbc:	0a15      	lsrs	r5, r2, #8
    6fbe:	715d      	strb	r5, [r3, #5]
    6fc0:	0c15      	lsrs	r5, r2, #16
    6fc2:	719d      	strb	r5, [r3, #6]
    6fc4:	0e12      	lsrs	r2, r2, #24
    6fc6:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    6fc8:	001a      	movs	r2, r3
    6fca:	322c      	adds	r2, #44	; 0x2c
    6fcc:	701a      	strb	r2, [r3, #0]
    6fce:	0a15      	lsrs	r5, r2, #8
    6fd0:	705d      	strb	r5, [r3, #1]
    6fd2:	0c15      	lsrs	r5, r2, #16
    6fd4:	709d      	strb	r5, [r3, #2]
    6fd6:	0e12      	lsrs	r2, r2, #24
    6fd8:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    6fda:	001a      	movs	r2, r3
    6fdc:	32ad      	adds	r2, #173	; 0xad
    6fde:	32ff      	adds	r2, #255	; 0xff
    6fe0:	731a      	strb	r2, [r3, #12]
    6fe2:	0a15      	lsrs	r5, r2, #8
    6fe4:	735d      	strb	r5, [r3, #13]
    6fe6:	0c15      	lsrs	r5, r2, #16
    6fe8:	739d      	strb	r5, [r3, #14]
    6fea:	0e12      	lsrs	r2, r2, #24
    6fec:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    6fee:	001a      	movs	r2, r3
    6ff0:	328c      	adds	r2, #140	; 0x8c
    6ff2:	721a      	strb	r2, [r3, #8]
    6ff4:	0a15      	lsrs	r5, r2, #8
    6ff6:	725d      	strb	r5, [r3, #9]
    6ff8:	0c15      	lsrs	r5, r2, #16
    6ffa:	729d      	strb	r5, [r3, #10]
    6ffc:	0e12      	lsrs	r2, r2, #24
    6ffe:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    7000:	001a      	movs	r2, r3
    7002:	324d      	adds	r2, #77	; 0x4d
    7004:	32ff      	adds	r2, #255	; 0xff
    7006:	741a      	strb	r2, [r3, #16]
    7008:	0a15      	lsrs	r5, r2, #8
    700a:	745d      	strb	r5, [r3, #17]
    700c:	0c15      	lsrs	r5, r2, #16
    700e:	749d      	strb	r5, [r3, #18]
    7010:	0e12      	lsrs	r2, r2, #24
    7012:	74da      	strb	r2, [r3, #19]
	RegParams.MinNewChIndex = 3;
    7014:	7659      	strb	r1, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    7016:	2202      	movs	r2, #2
    7018:	761a      	strb	r2, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    701a:	3205      	adds	r2, #5
    701c:	771a      	strb	r2, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    701e:	2500      	movs	r5, #0
    7020:	775d      	strb	r5, [r3, #29]
	RegParams.Rx1DrOffset = 5;
    7022:	2605      	movs	r6, #5
    7024:	3524      	adds	r5, #36	; 0x24
    7026:	555e      	strb	r6, [r3, r5]
	RegParams.maxTxPwrIndx = 7;
    7028:	3501      	adds	r5, #1
    702a:	555a      	strb	r2, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    702c:	22aa      	movs	r2, #170	; 0xaa
    702e:	32ff      	adds	r2, #255	; 0xff
    7030:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = 16;
    7032:	3a8a      	subs	r2, #138	; 0x8a
    7034:	3aff      	subs	r2, #255	; 0xff
    7036:	549c      	strb	r4, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    7038:	4a68      	ldr	r2, [pc, #416]	; (71dc <LORAReg_InitEU+0x240>)
    703a:	7811      	ldrb	r1, [r2, #0]
    703c:	22a8      	movs	r2, #168	; 0xa8
    703e:	0052      	lsls	r2, r2, #1
    7040:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    7042:	3a2b      	subs	r2, #43	; 0x2b
    7044:	3aff      	subs	r2, #255	; 0xff
    7046:	5498      	strb	r0, [r3, r2]
	if(ismBand == ISM_EU868)
    7048:	2800      	cmp	r0, #0
    704a:	d006      	beq.n	705a <LORAReg_InitEU+0xbe>
		return UNSUPPORTED_BAND;
    704c:	23c8      	movs	r3, #200	; 0xc8
	else if(ismBand == ISM_EU433)
    704e:	2801      	cmp	r0, #1
    7050:	d100      	bne.n	7054 <LORAReg_InitEU+0xb8>
    7052:	e08a      	b.n	716a <LORAReg_InitEU+0x1ce>
}
    7054:	0018      	movs	r0, r3
    7056:	b00a      	add	sp, #40	; 0x28
    7058:	bd70      	pop	{r4, r5, r6, pc}
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    705a:	001c      	movs	r4, r3
    705c:	0018      	movs	r0, r3
    705e:	306c      	adds	r0, #108	; 0x6c
    7060:	3a20      	subs	r2, #32
    7062:	495f      	ldr	r1, [pc, #380]	; (71e0 <LORAReg_InitEU+0x244>)
    7064:	4d5f      	ldr	r5, [pc, #380]	; (71e4 <LORAReg_InitEU+0x248>)
    7066:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    7068:	0020      	movs	r0, r4
    706a:	308c      	adds	r0, #140	; 0x8c
    706c:	2224      	movs	r2, #36	; 0x24
    706e:	495e      	ldr	r1, [pc, #376]	; (71e8 <LORAReg_InitEU+0x24c>)
    7070:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    7072:	0020      	movs	r0, r4
    7074:	30ad      	adds	r0, #173	; 0xad
    7076:	30ff      	adds	r0, #255	; 0xff
    7078:	2248      	movs	r2, #72	; 0x48
    707a:	495c      	ldr	r1, [pc, #368]	; (71ec <LORAReg_InitEU+0x250>)
    707c:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    707e:	0020      	movs	r0, r4
    7080:	3097      	adds	r0, #151	; 0x97
    7082:	30ff      	adds	r0, #255	; 0xff
    7084:	220c      	movs	r2, #12
    7086:	495a      	ldr	r1, [pc, #360]	; (71f0 <LORAReg_InitEU+0x254>)
    7088:	47a8      	blx	r5
    708a:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    708c:	4852      	ldr	r0, [pc, #328]	; (71d8 <LORAReg_InitEU+0x23c>)
    708e:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    7090:	2422      	movs	r4, #34	; 0x22
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    7092:	7902      	ldrb	r2, [r0, #4]
    7094:	7941      	ldrb	r1, [r0, #5]
    7096:	0209      	lsls	r1, r1, #8
    7098:	4311      	orrs	r1, r2
    709a:	7982      	ldrb	r2, [r0, #6]
    709c:	0412      	lsls	r2, r2, #16
    709e:	4311      	orrs	r1, r2
    70a0:	79c2      	ldrb	r2, [r0, #7]
    70a2:	0612      	lsls	r2, r2, #24
    70a4:	430a      	orrs	r2, r1
    70a6:	0059      	lsls	r1, r3, #1
    70a8:	188a      	adds	r2, r1, r2
    70aa:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    70ac:	3301      	adds	r3, #1
    70ae:	b2db      	uxtb	r3, r3
    70b0:	5702      	ldrsb	r2, [r0, r4]
    70b2:	4293      	cmp	r3, r2
    70b4:	dbed      	blt.n	7092 <LORAReg_InitEU+0xf6>
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    70b6:	4b48      	ldr	r3, [pc, #288]	; (71d8 <LORAReg_InitEU+0x23c>)
    70b8:	2200      	movs	r2, #0
    70ba:	769a      	strb	r2, [r3, #26]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    70bc:	76da      	strb	r2, [r3, #27]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    70be:	3208      	adds	r2, #8
    70c0:	751a      	strb	r2, [r3, #20]
    70c2:	3a22      	subs	r2, #34	; 0x22
    70c4:	755a      	strb	r2, [r3, #21]
    70c6:	3a13      	subs	r2, #19
    70c8:	759a      	strb	r2, [r3, #22]
    70ca:	3260      	adds	r2, #96	; 0x60
    70cc:	75da      	strb	r2, [r3, #23]
		RegParams.regParamItems.fileid = PDS_FILE_REG_EU868_04_IDX;
    70ce:	2103      	movs	r1, #3
    70d0:	32c2      	adds	r2, #194	; 0xc2
    70d2:	32ff      	adds	r2, #255	; 0xff
    70d4:	5499      	strb	r1, [r3, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    70d6:	2100      	movs	r1, #0
    70d8:	22f6      	movs	r2, #246	; 0xf6
    70da:	32ff      	adds	r2, #255	; 0xff
    70dc:	5499      	strb	r1, [r3, r2]
    70de:	001a      	movs	r2, r3
    70e0:	32f6      	adds	r2, #246	; 0xf6
    70e2:	32ff      	adds	r2, #255	; 0xff
    70e4:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_EU868_CH_PARAM_1;
    70e6:	22f8      	movs	r2, #248	; 0xf8
    70e8:	32ff      	adds	r2, #255	; 0xff
    70ea:	5499      	strb	r1, [r3, r2]
    70ec:	001a      	movs	r2, r3
    70ee:	32f8      	adds	r2, #248	; 0xf8
    70f0:	32ff      	adds	r2, #255	; 0xff
    70f2:	2103      	movs	r1, #3
    70f4:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_EU868_CH_PARAM_2;
    70f6:	2100      	movs	r1, #0
    70f8:	22fa      	movs	r2, #250	; 0xfa
    70fa:	32ff      	adds	r2, #255	; 0xff
    70fc:	5499      	strb	r1, [r3, r2]
    70fe:	001a      	movs	r2, r3
    7100:	32fa      	adds	r2, #250	; 0xfa
    7102:	32ff      	adds	r2, #255	; 0xff
    7104:	310b      	adds	r1, #11
    7106:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    7108:	2100      	movs	r1, #0
    710a:	22fc      	movs	r2, #252	; 0xfc
    710c:	32ff      	adds	r2, #255	; 0xff
    710e:	5499      	strb	r1, [r3, r2]
    7110:	189b      	adds	r3, r3, r2
    7112:	2200      	movs	r2, #0
    7114:	705a      	strb	r2, [r3, #1]
		filemarks_fid1.fileMarkListAddr = aRegEu868Fid1PdsOps;
    7116:	ab02      	add	r3, sp, #8
		filemarks_fid1.numItems =  (uint8_t)(PDS_REG_EU868_FID1_MAX_VALUE & 0x00FF);
    7118:	2601      	movs	r6, #1
    711a:	711e      	strb	r6, [r3, #4]
		filemarks_fid1.fIDcb = LorawanReg_EU868_Pds_Cb;
    711c:	4d35      	ldr	r5, [pc, #212]	; (71f4 <LORAReg_InitEU+0x258>)
		PDS_RegFile(PDS_FILE_REG_EU868_04_IDX,filemarks_fid1);
    711e:	9500      	str	r5, [sp, #0]
    7120:	4935      	ldr	r1, [pc, #212]	; (71f8 <LORAReg_InitEU+0x25c>)
    7122:	9a03      	ldr	r2, [sp, #12]
    7124:	4b35      	ldr	r3, [pc, #212]	; (71fc <LORAReg_InitEU+0x260>)
    7126:	2003      	movs	r0, #3
    7128:	4c35      	ldr	r4, [pc, #212]	; (7200 <LORAReg_InitEU+0x264>)
    712a:	47a0      	blx	r4
		filemarks_fid2.fileMarkListAddr = aRegEu868Fid2PdsOps;
    712c:	ab06      	add	r3, sp, #24
		filemarks_fid2.numItems =  (uint8_t)(PDS_REG_EU868_FID2_MAX_VALUE & 0x00FF);
    712e:	711e      	strb	r6, [r3, #4]
		PDS_RegFile(PDS_FILE_REG_EU868_12_IDX,filemarks_fid2);
    7130:	9500      	str	r5, [sp, #0]
    7132:	4934      	ldr	r1, [pc, #208]	; (7204 <LORAReg_InitEU+0x268>)
    7134:	9a07      	ldr	r2, [sp, #28]
    7136:	4b34      	ldr	r3, [pc, #208]	; (7208 <LORAReg_InitEU+0x26c>)
    7138:	200b      	movs	r0, #11
    713a:	47a0      	blx	r4
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    713c:	4a26      	ldr	r2, [pc, #152]	; (71d8 <LORAReg_InitEU+0x23c>)
    713e:	7810      	ldrb	r0, [r2, #0]
    7140:	7853      	ldrb	r3, [r2, #1]
    7142:	021b      	lsls	r3, r3, #8
    7144:	4303      	orrs	r3, r0
    7146:	7890      	ldrb	r0, [r2, #2]
    7148:	0400      	lsls	r0, r0, #16
    714a:	4303      	orrs	r3, r0
    714c:	78d0      	ldrb	r0, [r2, #3]
    714e:	0600      	lsls	r0, r0, #24
    7150:	4318      	orrs	r0, r3
    7152:	2240      	movs	r2, #64	; 0x40
    7154:	492d      	ldr	r1, [pc, #180]	; (720c <LORAReg_InitEU+0x270>)
    7156:	4b23      	ldr	r3, [pc, #140]	; (71e4 <LORAReg_InitEU+0x248>)
    7158:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    715a:	4b2d      	ldr	r3, [pc, #180]	; (7210 <LORAReg_InitEU+0x274>)
    715c:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    715e:	4b2d      	ldr	r3, [pc, #180]	; (7214 <LORAReg_InitEU+0x278>)
    7160:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    7162:	4b2d      	ldr	r3, [pc, #180]	; (7218 <LORAReg_InitEU+0x27c>)
    7164:	4798      	blx	r3
	return status;
    7166:	2308      	movs	r3, #8
    7168:	e774      	b.n	7054 <LORAReg_InitEU+0xb8>
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    716a:	4c1b      	ldr	r4, [pc, #108]	; (71d8 <LORAReg_InitEU+0x23c>)
    716c:	0020      	movs	r0, r4
    716e:	306c      	adds	r0, #108	; 0x6c
    7170:	2206      	movs	r2, #6
    7172:	492a      	ldr	r1, [pc, #168]	; (721c <LORAReg_InitEU+0x280>)
    7174:	4d1b      	ldr	r5, [pc, #108]	; (71e4 <LORAReg_InitEU+0x248>)
    7176:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    7178:	0020      	movs	r0, r4
    717a:	308c      	adds	r0, #140	; 0x8c
    717c:	2224      	movs	r2, #36	; 0x24
    717e:	4928      	ldr	r1, [pc, #160]	; (7220 <LORAReg_InitEU+0x284>)
    7180:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    7182:	0020      	movs	r0, r4
    7184:	30ad      	adds	r0, #173	; 0xad
    7186:	30ff      	adds	r0, #255	; 0xff
    7188:	220c      	movs	r2, #12
    718a:	4926      	ldr	r1, [pc, #152]	; (7224 <LORAReg_InitEU+0x288>)
    718c:	47a8      	blx	r5
    718e:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    7190:	4811      	ldr	r0, [pc, #68]	; (71d8 <LORAReg_InitEU+0x23c>)
    7192:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    7194:	2422      	movs	r4, #34	; 0x22
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    7196:	7902      	ldrb	r2, [r0, #4]
    7198:	7941      	ldrb	r1, [r0, #5]
    719a:	0209      	lsls	r1, r1, #8
    719c:	4311      	orrs	r1, r2
    719e:	7982      	ldrb	r2, [r0, #6]
    71a0:	0412      	lsls	r2, r2, #16
    71a2:	4311      	orrs	r1, r2
    71a4:	79c2      	ldrb	r2, [r0, #7]
    71a6:	0612      	lsls	r2, r2, #24
    71a8:	430a      	orrs	r2, r1
    71aa:	0059      	lsls	r1, r3, #1
    71ac:	188a      	adds	r2, r1, r2
    71ae:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    71b0:	3301      	adds	r3, #1
    71b2:	b2db      	uxtb	r3, r3
    71b4:	5702      	ldrsb	r2, [r0, r4]
    71b6:	4293      	cmp	r3, r2
    71b8:	dbed      	blt.n	7196 <LORAReg_InitEU+0x1fa>
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    71ba:	4b07      	ldr	r3, [pc, #28]	; (71d8 <LORAReg_InitEU+0x23c>)
    71bc:	2205      	movs	r2, #5
    71be:	769a      	strb	r2, [r3, #26]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    71c0:	2200      	movs	r2, #0
    71c2:	76da      	strb	r2, [r3, #27]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    71c4:	3a70      	subs	r2, #112	; 0x70
    71c6:	751a      	strb	r2, [r3, #20]
    71c8:	3241      	adds	r2, #65	; 0x41
    71ca:	755a      	strb	r2, [r3, #21]
    71cc:	3a02      	subs	r2, #2
    71ce:	759a      	strb	r2, [r3, #22]
    71d0:	324a      	adds	r2, #74	; 0x4a
    71d2:	75da      	strb	r2, [r3, #23]
    71d4:	e7b2      	b.n	713c <LORAReg_InitEU+0x1a0>
    71d6:	46c0      	nop			; (mov r8, r8)
    71d8:	20001404 	.word	0x20001404
    71dc:	20001400 	.word	0x20001400
    71e0:	0001e15c 	.word	0x0001e15c
    71e4:	00018195 	.word	0x00018195
    71e8:	0001e130 	.word	0x0001e130
    71ec:	0001e1bc 	.word	0x0001e1bc
    71f0:	0001e1a4 	.word	0x0001e1a4
    71f4:	00006f99 	.word	0x00006f99
    71f8:	200011e8 	.word	0x200011e8
    71fc:	0001e204 	.word	0x0001e204
    7200:	0000b95d 	.word	0x0000b95d
    7204:	200011ec 	.word	0x200011ec
    7208:	0001e20c 	.word	0x0001e20c
    720c:	0001e164 	.word	0x0001e164
    7210:	0000a745 	.word	0x0000a745
    7214:	0000af05 	.word	0x0000af05
    7218:	0000b1a1 	.word	0x0000b1a1
    721c:	0001e154 	.word	0x0001e154
    7220:	0001e10c 	.word	0x0001e10c
    7224:	0001e1b0 	.word	0x0001e1b0

00007228 <LorawanReg_IND_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_IND_Pds_Cb(void)
{
	
}
    7228:	4770      	bx	lr
	...

0000722c <LORAReg_InitIN>:
{
    722c:	b570      	push	{r4, r5, r6, lr}
    722e:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    7230:	4b5d      	ldr	r3, [pc, #372]	; (73a8 <LORAReg_InitIN+0x17c>)
    7232:	2103      	movs	r1, #3
    7234:	7799      	strb	r1, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    7236:	2510      	movs	r5, #16
    7238:	2222      	movs	r2, #34	; 0x22
    723a:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    723c:	3a21      	subs	r2, #33	; 0x21
    723e:	2421      	movs	r4, #33	; 0x21
    7240:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    7242:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    7244:	001a      	movs	r2, r3
    7246:	326c      	adds	r2, #108	; 0x6c
    7248:	2400      	movs	r4, #0
    724a:	711a      	strb	r2, [r3, #4]
    724c:	0a16      	lsrs	r6, r2, #8
    724e:	715e      	strb	r6, [r3, #5]
    7250:	0c16      	lsrs	r6, r2, #16
    7252:	719e      	strb	r6, [r3, #6]
    7254:	0e12      	lsrs	r2, r2, #24
    7256:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    7258:	001a      	movs	r2, r3
    725a:	322c      	adds	r2, #44	; 0x2c
    725c:	701a      	strb	r2, [r3, #0]
    725e:	0a16      	lsrs	r6, r2, #8
    7260:	705e      	strb	r6, [r3, #1]
    7262:	0c16      	lsrs	r6, r2, #16
    7264:	709e      	strb	r6, [r3, #2]
    7266:	0e12      	lsrs	r2, r2, #24
    7268:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    726a:	001a      	movs	r2, r3
    726c:	328c      	adds	r2, #140	; 0x8c
    726e:	721a      	strb	r2, [r3, #8]
    7270:	0a16      	lsrs	r6, r2, #8
    7272:	725e      	strb	r6, [r3, #9]
    7274:	0c16      	lsrs	r6, r2, #16
    7276:	729e      	strb	r6, [r3, #10]
    7278:	0e12      	lsrs	r2, r2, #24
    727a:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    727c:	001a      	movs	r2, r3
    727e:	324d      	adds	r2, #77	; 0x4d
    7280:	32ff      	adds	r2, #255	; 0xff
    7282:	741a      	strb	r2, [r3, #16]
    7284:	0a16      	lsrs	r6, r2, #8
    7286:	745e      	strb	r6, [r3, #17]
    7288:	0c16      	lsrs	r6, r2, #16
    728a:	749e      	strb	r6, [r3, #18]
    728c:	0e12      	lsrs	r2, r2, #24
    728e:	74da      	strb	r2, [r3, #19]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    7290:	769c      	strb	r4, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    7292:	2202      	movs	r2, #2
    7294:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    7296:	3a12      	subs	r2, #18
    7298:	751a      	strb	r2, [r3, #20]
    729a:	3a70      	subs	r2, #112	; 0x70
    729c:	755a      	strb	r2, [r3, #21]
    729e:	3226      	adds	r2, #38	; 0x26
    72a0:	759a      	strb	r2, [r3, #22]
    72a2:	328d      	adds	r2, #141	; 0x8d
    72a4:	75da      	strb	r2, [r3, #23]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    72a6:	7659      	strb	r1, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    72a8:	761d      	strb	r5, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    72aa:	3a2c      	subs	r2, #44	; 0x2c
    72ac:	771a      	strb	r2, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    72ae:	775c      	strb	r4, [r3, #29]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    72b0:	24aa      	movs	r4, #170	; 0xaa
    72b2:	34ff      	adds	r4, #255	; 0xff
    72b4:	5519      	strb	r1, [r3, r4]
	RegParams.Rx1DrOffset = 7;
    72b6:	3121      	adds	r1, #33	; 0x21
    72b8:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 10;
    72ba:	391a      	subs	r1, #26
    72bc:	321e      	adds	r2, #30
    72be:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = 30;
    72c0:	3114      	adds	r1, #20
    72c2:	3a05      	subs	r2, #5
    72c4:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    72c6:	3206      	adds	r2, #6
    72c8:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    72ca:	3ca0      	subs	r4, #160	; 0xa0
    72cc:	3cff      	subs	r4, #255	; 0xff
	if(ismBand == ISM_IND865)
    72ce:	280f      	cmp	r0, #15
    72d0:	d008      	beq.n	72e4 <LORAReg_InitIN+0xb8>
    LORAREG_InitGetAttrFnPtrsIN();
    72d2:	4b36      	ldr	r3, [pc, #216]	; (73ac <LORAReg_InitIN+0x180>)
    72d4:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    72d6:	4b36      	ldr	r3, [pc, #216]	; (73b0 <LORAReg_InitIN+0x184>)
    72d8:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    72da:	4b36      	ldr	r3, [pc, #216]	; (73b4 <LORAReg_InitIN+0x188>)
    72dc:	4798      	blx	r3
}
    72de:	0020      	movs	r0, r4
    72e0:	b006      	add	sp, #24
    72e2:	bd70      	pop	{r4, r5, r6, pc}
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    72e4:	001c      	movs	r4, r3
    72e6:	0018      	movs	r0, r3
    72e8:	306c      	adds	r0, #108	; 0x6c
    72ea:	3a20      	subs	r2, #32
    72ec:	4932      	ldr	r1, [pc, #200]	; (73b8 <LORAReg_InitIN+0x18c>)
    72ee:	4d33      	ldr	r5, [pc, #204]	; (73bc <LORAReg_InitIN+0x190>)
    72f0:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    72f2:	0020      	movs	r0, r4
    72f4:	308c      	adds	r0, #140	; 0x8c
    72f6:	2224      	movs	r2, #36	; 0x24
    72f8:	4931      	ldr	r1, [pc, #196]	; (73c0 <LORAReg_InitIN+0x194>)
    72fa:	47a8      	blx	r5
    72fc:	2006      	movs	r0, #6
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    72fe:	492a      	ldr	r1, [pc, #168]	; (73a8 <LORAReg_InitIN+0x17c>)
    7300:	24ff      	movs	r4, #255	; 0xff
    7302:	790b      	ldrb	r3, [r1, #4]
    7304:	794a      	ldrb	r2, [r1, #5]
    7306:	0212      	lsls	r2, r2, #8
    7308:	431a      	orrs	r2, r3
    730a:	798b      	ldrb	r3, [r1, #6]
    730c:	041b      	lsls	r3, r3, #16
    730e:	431a      	orrs	r2, r3
    7310:	79cb      	ldrb	r3, [r1, #7]
    7312:	061b      	lsls	r3, r3, #24
    7314:	4313      	orrs	r3, r2
    7316:	181b      	adds	r3, r3, r0
    7318:	705c      	strb	r4, [r3, #1]
    731a:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    731c:	2820      	cmp	r0, #32
    731e:	d1f0      	bne.n	7302 <LORAReg_InitIN+0xd6>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = MAX_EIRP_IN;
    7320:	4c21      	ldr	r4, [pc, #132]	; (73a8 <LORAReg_InitIN+0x17c>)
    7322:	221e      	movs	r2, #30
    7324:	23d5      	movs	r3, #213	; 0xd5
    7326:	005b      	lsls	r3, r3, #1
    7328:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    732a:	7820      	ldrb	r0, [r4, #0]
    732c:	7863      	ldrb	r3, [r4, #1]
    732e:	021b      	lsls	r3, r3, #8
    7330:	4303      	orrs	r3, r0
    7332:	78a0      	ldrb	r0, [r4, #2]
    7334:	0400      	lsls	r0, r0, #16
    7336:	4303      	orrs	r3, r0
    7338:	78e0      	ldrb	r0, [r4, #3]
    733a:	0600      	lsls	r0, r0, #24
    733c:	4318      	orrs	r0, r3
    733e:	3222      	adds	r2, #34	; 0x22
    7340:	4920      	ldr	r1, [pc, #128]	; (73c4 <LORAReg_InitIN+0x198>)
    7342:	4b1e      	ldr	r3, [pc, #120]	; (73bc <LORAReg_InitIN+0x190>)
    7344:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_IND_07_IDX;
    7346:	2306      	movs	r3, #6
    7348:	2106      	movs	r1, #6
    734a:	22fa      	movs	r2, #250	; 0xfa
    734c:	0052      	lsls	r2, r2, #1
    734e:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    7350:	2100      	movs	r1, #0
    7352:	22f6      	movs	r2, #246	; 0xf6
    7354:	32ff      	adds	r2, #255	; 0xff
    7356:	54a1      	strb	r1, [r4, r2]
    7358:	0022      	movs	r2, r4
    735a:	32f6      	adds	r2, #246	; 0xf6
    735c:	32ff      	adds	r2, #255	; 0xff
    735e:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_IND_CH_PARAM_1;
    7360:	22f8      	movs	r2, #248	; 0xf8
    7362:	32ff      	adds	r2, #255	; 0xff
    7364:	54a1      	strb	r1, [r4, r2]
    7366:	0022      	movs	r2, r4
    7368:	32f8      	adds	r2, #248	; 0xf8
    736a:	32ff      	adds	r2, #255	; 0xff
    736c:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_IND_CH_PARAM_2;
    736e:	3101      	adds	r1, #1
    7370:	22fa      	movs	r2, #250	; 0xfa
    7372:	32ff      	adds	r2, #255	; 0xff
    7374:	54a1      	strb	r1, [r4, r2]
    7376:	0022      	movs	r2, r4
    7378:	32fa      	adds	r2, #250	; 0xfa
    737a:	32ff      	adds	r2, #255	; 0xff
    737c:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    737e:	2200      	movs	r2, #0
    7380:	23fc      	movs	r3, #252	; 0xfc
    7382:	33ff      	adds	r3, #255	; 0xff
    7384:	54e2      	strb	r2, [r4, r3]
    7386:	18e4      	adds	r4, r4, r3
    7388:	2300      	movs	r3, #0
    738a:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegIndPdsOps;
    738c:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_IND_MAX_VALUE & 0x00FF);
    738e:	3202      	adds	r2, #2
    7390:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_IND_Pds_Cb;
    7392:	4a0d      	ldr	r2, [pc, #52]	; (73c8 <LORAReg_InitIN+0x19c>)
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
    7394:	9200      	str	r2, [sp, #0]
    7396:	490d      	ldr	r1, [pc, #52]	; (73cc <LORAReg_InitIN+0x1a0>)
    7398:	9a03      	ldr	r2, [sp, #12]
    739a:	4b0d      	ldr	r3, [pc, #52]	; (73d0 <LORAReg_InitIN+0x1a4>)
    739c:	2006      	movs	r0, #6
    739e:	4c0d      	ldr	r4, [pc, #52]	; (73d4 <LORAReg_InitIN+0x1a8>)
    73a0:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    73a2:	2408      	movs	r4, #8
    73a4:	e795      	b.n	72d2 <LORAReg_InitIN+0xa6>
    73a6:	46c0      	nop			; (mov r8, r8)
    73a8:	20001404 	.word	0x20001404
    73ac:	0000aaed 	.word	0x0000aaed
    73b0:	0000b045 	.word	0x0000b045
    73b4:	0000b251 	.word	0x0000b251
    73b8:	0001e238 	.word	0x0001e238
    73bc:	00018195 	.word	0x00018195
    73c0:	0001e214 	.word	0x0001e214
    73c4:	0001e240 	.word	0x0001e240
    73c8:	00007229 	.word	0x00007229
    73cc:	200011f0 	.word	0x200011f0
    73d0:	0001e280 	.word	0x0001e280
    73d4:	0000b95d 	.word	0x0000b95d

000073d8 <LorawanReg_JPN_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_JPN_Pds_Cb(void)
{

}
    73d8:	4770      	bx	lr
	...

000073dc <LORAReg_InitJP>:
{
    73dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    73de:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    73e0:	4b7a      	ldr	r3, [pc, #488]	; (75cc <LORAReg_InitJP+0x1f0>)
    73e2:	2203      	movs	r2, #3
    73e4:	779a      	strb	r2, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    73e6:	2110      	movs	r1, #16
    73e8:	321f      	adds	r2, #31
    73ea:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    73ec:	3a21      	subs	r2, #33	; 0x21
    73ee:	2421      	movs	r4, #33	; 0x21
    73f0:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    73f2:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    73f4:	001a      	movs	r2, r3
    73f6:	326c      	adds	r2, #108	; 0x6c
    73f8:	711a      	strb	r2, [r3, #4]
    73fa:	0a14      	lsrs	r4, r2, #8
    73fc:	715c      	strb	r4, [r3, #5]
    73fe:	0c14      	lsrs	r4, r2, #16
    7400:	719c      	strb	r4, [r3, #6]
    7402:	0e12      	lsrs	r2, r2, #24
    7404:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    7406:	001a      	movs	r2, r3
    7408:	322c      	adds	r2, #44	; 0x2c
    740a:	701a      	strb	r2, [r3, #0]
    740c:	0a14      	lsrs	r4, r2, #8
    740e:	705c      	strb	r4, [r3, #1]
    7410:	0c14      	lsrs	r4, r2, #16
    7412:	709c      	strb	r4, [r3, #2]
    7414:	0e12      	lsrs	r2, r2, #24
    7416:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    7418:	001a      	movs	r2, r3
    741a:	32ad      	adds	r2, #173	; 0xad
    741c:	32ff      	adds	r2, #255	; 0xff
    741e:	731a      	strb	r2, [r3, #12]
    7420:	0a14      	lsrs	r4, r2, #8
    7422:	735c      	strb	r4, [r3, #13]
    7424:	0c14      	lsrs	r4, r2, #16
    7426:	739c      	strb	r4, [r3, #14]
    7428:	0e12      	lsrs	r2, r2, #24
    742a:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    742c:	001a      	movs	r2, r3
    742e:	328c      	adds	r2, #140	; 0x8c
    7430:	721a      	strb	r2, [r3, #8]
    7432:	0a14      	lsrs	r4, r2, #8
    7434:	725c      	strb	r4, [r3, #9]
    7436:	0c14      	lsrs	r4, r2, #16
    7438:	729c      	strb	r4, [r3, #10]
    743a:	0e12      	lsrs	r2, r2, #24
    743c:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    743e:	001a      	movs	r2, r3
    7440:	324d      	adds	r2, #77	; 0x4d
    7442:	32ff      	adds	r2, #255	; 0xff
    7444:	741a      	strb	r2, [r3, #16]
    7446:	0a14      	lsrs	r4, r2, #8
    7448:	745c      	strb	r4, [r3, #17]
    744a:	0c14      	lsrs	r4, r2, #16
    744c:	749c      	strb	r4, [r3, #18]
    744e:	0e12      	lsrs	r2, r2, #24
    7450:	74da      	strb	r2, [r3, #19]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    7452:	2202      	movs	r2, #2
    7454:	769a      	strb	r2, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    7456:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    7458:	2400      	movs	r4, #0
    745a:	751c      	strb	r4, [r3, #20]
    745c:	3c16      	subs	r4, #22
    745e:	755c      	strb	r4, [r3, #21]
    7460:	341c      	adds	r4, #28
    7462:	759c      	strb	r4, [r3, #22]
    7464:	3431      	adds	r4, #49	; 0x31
    7466:	75dc      	strb	r4, [r3, #23]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    7468:	765a      	strb	r2, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    746a:	3c23      	subs	r4, #35	; 0x23
    746c:	761c      	strb	r4, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    746e:	3c0d      	subs	r4, #13
    7470:	771c      	strb	r4, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    7472:	2500      	movs	r5, #0
    7474:	775d      	strb	r5, [r3, #29]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    7476:	260a      	movs	r6, #10
    7478:	35a7      	adds	r5, #167	; 0xa7
    747a:	35ff      	adds	r5, #255	; 0xff
    747c:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    747e:	36a6      	adds	r6, #166	; 0xa6
    7480:	25a8      	movs	r5, #168	; 0xa8
    7482:	35ff      	adds	r5, #255	; 0xff
    7484:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    7486:	3eab      	subs	r6, #171	; 0xab
    7488:	3501      	adds	r5, #1
    748a:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    748c:	25aa      	movs	r5, #170	; 0xaa
    748e:	35ff      	adds	r5, #255	; 0xff
    7490:	555a      	strb	r2, [r3, r5]
	RegParams.Rx1DrOffset = 7;
    7492:	3222      	adds	r2, #34	; 0x22
    7494:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwrIndx = 7;
    7496:	3201      	adds	r2, #1
    7498:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = 16;
    749a:	3a05      	subs	r2, #5
    749c:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    749e:	4a4c      	ldr	r2, [pc, #304]	; (75d0 <LORAReg_InitJP+0x1f4>)
    74a0:	7814      	ldrb	r4, [r2, #0]
    74a2:	2196      	movs	r1, #150	; 0x96
    74a4:	31ff      	adds	r1, #255	; 0xff
    74a6:	545c      	strb	r4, [r3, r1]
	RegParams.pDutyCycleTimer->timerId = regTimerId[1];
    74a8:	7851      	ldrb	r1, [r2, #1]
    74aa:	22a8      	movs	r2, #168	; 0xa8
    74ac:	0052      	lsls	r2, r2, #1
    74ae:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    74b0:	3a2b      	subs	r2, #43	; 0x2b
    74b2:	3aff      	subs	r2, #255	; 0xff
    74b4:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    74b6:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    74b8:	2805      	cmp	r0, #5
    74ba:	d008      	beq.n	74ce <LORAReg_InitJP+0xf2>
    LORAREG_InitGetAttrFnPtrsJP();
    74bc:	4b45      	ldr	r3, [pc, #276]	; (75d4 <LORAReg_InitJP+0x1f8>)
    74be:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    74c0:	4b45      	ldr	r3, [pc, #276]	; (75d8 <LORAReg_InitJP+0x1fc>)
    74c2:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    74c4:	4b45      	ldr	r3, [pc, #276]	; (75dc <LORAReg_InitJP+0x200>)
    74c6:	4798      	blx	r3
}
    74c8:	0020      	movs	r0, r4
    74ca:	b007      	add	sp, #28
    74cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    74ce:	001c      	movs	r4, r3
    74d0:	0018      	movs	r0, r3
    74d2:	306c      	adds	r0, #108	; 0x6c
    74d4:	3a22      	subs	r2, #34	; 0x22
    74d6:	4942      	ldr	r1, [pc, #264]	; (75e0 <LORAReg_InitJP+0x204>)
    74d8:	4d42      	ldr	r5, [pc, #264]	; (75e4 <LORAReg_InitJP+0x208>)
    74da:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    74dc:	0020      	movs	r0, r4
    74de:	308c      	adds	r0, #140	; 0x8c
    74e0:	2218      	movs	r2, #24
    74e2:	4941      	ldr	r1, [pc, #260]	; (75e8 <LORAReg_InitJP+0x20c>)
    74e4:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    74e6:	0020      	movs	r0, r4
    74e8:	30ad      	adds	r0, #173	; 0xad
    74ea:	30ff      	adds	r0, #255	; 0xff
    74ec:	220c      	movs	r2, #12
    74ee:	493f      	ldr	r1, [pc, #252]	; (75ec <LORAReg_InitJP+0x210>)
    74f0:	47a8      	blx	r5
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    74f2:	0020      	movs	r0, r4
    74f4:	3097      	adds	r0, #151	; 0x97
    74f6:	30ff      	adds	r0, #255	; 0xff
    74f8:	2202      	movs	r2, #2
    74fa:	493d      	ldr	r1, [pc, #244]	; (75f0 <LORAReg_InitJP+0x214>)
    74fc:	47a8      	blx	r5
    74fe:	2302      	movs	r3, #2
    7500:	2202      	movs	r2, #2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    7502:	4932      	ldr	r1, [pc, #200]	; (75cc <LORAReg_InitJP+0x1f0>)
    7504:	27ff      	movs	r7, #255	; 0xff
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    7506:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    7508:	361d      	adds	r6, #29
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    750a:	7908      	ldrb	r0, [r1, #4]
    750c:	794c      	ldrb	r4, [r1, #5]
    750e:	0224      	lsls	r4, r4, #8
    7510:	4304      	orrs	r4, r0
    7512:	7988      	ldrb	r0, [r1, #6]
    7514:	0400      	lsls	r0, r0, #16
    7516:	4304      	orrs	r4, r0
    7518:	79c8      	ldrb	r0, [r1, #7]
    751a:	0600      	lsls	r0, r0, #24
    751c:	4320      	orrs	r0, r4
    751e:	0054      	lsls	r4, r2, #1
    7520:	1820      	adds	r0, r4, r0
    7522:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    7524:	3352      	adds	r3, #82	; 0x52
    7526:	009b      	lsls	r3, r3, #2
    7528:	18cb      	adds	r3, r1, r3
    752a:	725d      	strb	r5, [r3, #9]
    752c:	729d      	strb	r5, [r3, #10]
    752e:	72dd      	strb	r5, [r3, #11]
    7530:	731d      	strb	r5, [r3, #12]
    for (i = 2; i < RegParams.maxChannels; i++)
    7532:	3201      	adds	r2, #1
    7534:	b2d2      	uxtb	r2, r2
    7536:	0013      	movs	r3, r2
    7538:	5788      	ldrsb	r0, [r1, r6]
    753a:	4282      	cmp	r2, r0
    753c:	dbe5      	blt.n	750a <LORAReg_InitJP+0x12e>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    753e:	4c23      	ldr	r4, [pc, #140]	; (75cc <LORAReg_InitJP+0x1f0>)
    7540:	22ff      	movs	r2, #255	; 0xff
    7542:	2327      	movs	r3, #39	; 0x27
    7544:	54e2      	strb	r2, [r4, r3]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    7546:	3aef      	subs	r2, #239	; 0xef
    7548:	3384      	adds	r3, #132	; 0x84
    754a:	33ff      	adds	r3, #255	; 0xff
    754c:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    754e:	7820      	ldrb	r0, [r4, #0]
    7550:	7863      	ldrb	r3, [r4, #1]
    7552:	021b      	lsls	r3, r3, #8
    7554:	4303      	orrs	r3, r0
    7556:	78a0      	ldrb	r0, [r4, #2]
    7558:	0400      	lsls	r0, r0, #16
    755a:	4303      	orrs	r3, r0
    755c:	78e0      	ldrb	r0, [r4, #3]
    755e:	0600      	lsls	r0, r0, #24
    7560:	4318      	orrs	r0, r3
    7562:	3230      	adds	r2, #48	; 0x30
    7564:	4923      	ldr	r1, [pc, #140]	; (75f4 <LORAReg_InitJP+0x218>)
    7566:	4b1f      	ldr	r3, [pc, #124]	; (75e4 <LORAReg_InitJP+0x208>)
    7568:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_JPN_08_IDX;
    756a:	2307      	movs	r3, #7
    756c:	2107      	movs	r1, #7
    756e:	22fa      	movs	r2, #250	; 0xfa
    7570:	0052      	lsls	r2, r2, #1
    7572:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.alt_ch_item_id = 0;
    7574:	2100      	movs	r1, #0
    7576:	22f6      	movs	r2, #246	; 0xf6
    7578:	32ff      	adds	r2, #255	; 0xff
    757a:	54a1      	strb	r1, [r4, r2]
    757c:	0022      	movs	r2, r4
    757e:	32f6      	adds	r2, #246	; 0xf6
    7580:	32ff      	adds	r2, #255	; 0xff
    7582:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_JPN_CH_PARAM_1;
    7584:	22f8      	movs	r2, #248	; 0xf8
    7586:	32ff      	adds	r2, #255	; 0xff
    7588:	54a1      	strb	r1, [r4, r2]
    758a:	0022      	movs	r2, r4
    758c:	32f8      	adds	r2, #248	; 0xf8
    758e:	32ff      	adds	r2, #255	; 0xff
    7590:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_JPN_CH_PARAM_2;
    7592:	3101      	adds	r1, #1
    7594:	22fa      	movs	r2, #250	; 0xfa
    7596:	32ff      	adds	r2, #255	; 0xff
    7598:	54a1      	strb	r1, [r4, r2]
    759a:	0022      	movs	r2, r4
    759c:	32fa      	adds	r2, #250	; 0xfa
    759e:	32ff      	adds	r2, #255	; 0xff
    75a0:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    75a2:	2200      	movs	r2, #0
    75a4:	23fc      	movs	r3, #252	; 0xfc
    75a6:	33ff      	adds	r3, #255	; 0xff
    75a8:	54e2      	strb	r2, [r4, r3]
    75aa:	18e4      	adds	r4, r4, r3
    75ac:	2300      	movs	r3, #0
    75ae:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegJpnFid1PdsOps;
    75b0:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_JPN_FID1_MAX_VALUE & 0x00FF);
    75b2:	3202      	adds	r2, #2
    75b4:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_JPN_Pds_Cb;
    75b6:	4a10      	ldr	r2, [pc, #64]	; (75f8 <LORAReg_InitJP+0x21c>)
		PDS_RegFile(PDS_FILE_REG_JPN_08_IDX,filemarks);
    75b8:	9200      	str	r2, [sp, #0]
    75ba:	4910      	ldr	r1, [pc, #64]	; (75fc <LORAReg_InitJP+0x220>)
    75bc:	9a03      	ldr	r2, [sp, #12]
    75be:	4b10      	ldr	r3, [pc, #64]	; (7600 <LORAReg_InitJP+0x224>)
    75c0:	2007      	movs	r0, #7
    75c2:	4c10      	ldr	r4, [pc, #64]	; (7604 <LORAReg_InitJP+0x228>)
    75c4:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    75c6:	2408      	movs	r4, #8
    75c8:	e778      	b.n	74bc <LORAReg_InitJP+0xe0>
    75ca:	46c0      	nop			; (mov r8, r8)
    75cc:	20001404 	.word	0x20001404
    75d0:	20001400 	.word	0x20001400
    75d4:	0000ac19 	.word	0x0000ac19
    75d8:	0000b0ad 	.word	0x0000b0ad
    75dc:	0000b28d 	.word	0x0000b28d
    75e0:	0001e2a8 	.word	0x0001e2a8
    75e4:	00018195 	.word	0x00018195
    75e8:	0001e290 	.word	0x0001e290
    75ec:	0001e2f0 	.word	0x0001e2f0
    75f0:	0001e2ec 	.word	0x0001e2ec
    75f4:	0001e2ac 	.word	0x0001e2ac
    75f8:	000073d9 	.word	0x000073d9
    75fc:	200011f4 	.word	0x200011f4
    7600:	0001e2fc 	.word	0x0001e2fc
    7604:	0000b95d 	.word	0x0000b95d

00007608 <LorawanReg_KR_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback */
void LorawanReg_KR_Pds_Cb(void)
{

}
    7608:	4770      	bx	lr
	...

0000760c <LORAReg_InitKR>:
{
    760c:	b5f0      	push	{r4, r5, r6, r7, lr}
    760e:	46d6      	mov	lr, sl
    7610:	464f      	mov	r7, r9
    7612:	4646      	mov	r6, r8
    7614:	b5c0      	push	{r6, r7, lr}
    7616:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    7618:	4b90      	ldr	r3, [pc, #576]	; (785c <LORAReg_InitKR+0x250>)
    761a:	2103      	movs	r1, #3
    761c:	7799      	strb	r1, [r3, #30]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    761e:	2410      	movs	r4, #16
    7620:	2222      	movs	r2, #34	; 0x22
    7622:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    7624:	3a21      	subs	r2, #33	; 0x21
    7626:	3411      	adds	r4, #17
    7628:	551a      	strb	r2, [r3, r4]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    762a:	77da      	strb	r2, [r3, #31]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    762c:	001a      	movs	r2, r3
    762e:	326c      	adds	r2, #108	; 0x6c
    7630:	2400      	movs	r4, #0
    7632:	711a      	strb	r2, [r3, #4]
    7634:	0a15      	lsrs	r5, r2, #8
    7636:	715d      	strb	r5, [r3, #5]
    7638:	0c15      	lsrs	r5, r2, #16
    763a:	719d      	strb	r5, [r3, #6]
    763c:	0e12      	lsrs	r2, r2, #24
    763e:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    7640:	001a      	movs	r2, r3
    7642:	322c      	adds	r2, #44	; 0x2c
    7644:	701a      	strb	r2, [r3, #0]
    7646:	0a15      	lsrs	r5, r2, #8
    7648:	705d      	strb	r5, [r3, #1]
    764a:	0c15      	lsrs	r5, r2, #16
    764c:	709d      	strb	r5, [r3, #2]
    764e:	0e12      	lsrs	r2, r2, #24
    7650:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    7652:	001a      	movs	r2, r3
    7654:	328c      	adds	r2, #140	; 0x8c
    7656:	721a      	strb	r2, [r3, #8]
    7658:	0a15      	lsrs	r5, r2, #8
    765a:	725d      	strb	r5, [r3, #9]
    765c:	0c15      	lsrs	r5, r2, #16
    765e:	729d      	strb	r5, [r3, #10]
    7660:	0e12      	lsrs	r2, r2, #24
    7662:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    7664:	001a      	movs	r2, r3
    7666:	324d      	adds	r2, #77	; 0x4d
    7668:	32ff      	adds	r2, #255	; 0xff
    766a:	741a      	strb	r2, [r3, #16]
    766c:	0a15      	lsrs	r5, r2, #8
    766e:	745d      	strb	r5, [r3, #17]
    7670:	0c15      	lsrs	r5, r2, #16
    7672:	749d      	strb	r5, [r3, #18]
    7674:	0e12      	lsrs	r2, r2, #24
    7676:	74da      	strb	r2, [r3, #19]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    7678:	769c      	strb	r4, [r3, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    767a:	76dc      	strb	r4, [r3, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    767c:	2220      	movs	r2, #32
    767e:	4252      	negs	r2, r2
    7680:	751a      	strb	r2, [r3, #20]
    7682:	3233      	adds	r2, #51	; 0x33
    7684:	755a      	strb	r2, [r3, #21]
    7686:	3a20      	subs	r2, #32
    7688:	759a      	strb	r2, [r3, #22]
    768a:	3243      	adds	r2, #67	; 0x43
    768c:	75da      	strb	r2, [r3, #23]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    768e:	7659      	strb	r1, [r3, #25]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    7690:	3a22      	subs	r2, #34	; 0x22
    7692:	761a      	strb	r2, [r3, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    7694:	3a0f      	subs	r2, #15
    7696:	771a      	strb	r2, [r3, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    7698:	775c      	strb	r4, [r3, #29]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    769a:	340a      	adds	r4, #10
    769c:	25d3      	movs	r5, #211	; 0xd3
    769e:	006d      	lsls	r5, r5, #1
    76a0:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    76a2:	26bf      	movs	r6, #191	; 0xbf
    76a4:	25a8      	movs	r5, #168	; 0xa8
    76a6:	35ff      	adds	r5, #255	; 0xff
    76a8:	555e      	strb	r6, [r3, r5]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    76aa:	3501      	adds	r5, #1
    76ac:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    76ae:	24aa      	movs	r4, #170	; 0xaa
    76b0:	34ff      	adds	r4, #255	; 0xff
    76b2:	5519      	strb	r1, [r3, r4]
	RegParams.Rx1DrOffset = 5;
    76b4:	3121      	adds	r1, #33	; 0x21
    76b6:	545a      	strb	r2, [r3, r1]
	RegParams.maxTxPwrIndx = 7;
    76b8:	391d      	subs	r1, #29
    76ba:	3220      	adds	r2, #32
    76bc:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = 14;
    76be:	3107      	adds	r1, #7
    76c0:	3a05      	subs	r2, #5
    76c2:	5499      	strb	r1, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    76c4:	4a66      	ldr	r2, [pc, #408]	; (7860 <LORAReg_InitKR+0x254>)
    76c6:	7811      	ldrb	r1, [r2, #0]
    76c8:	2296      	movs	r2, #150	; 0x96
    76ca:	32ff      	adds	r2, #255	; 0xff
    76cc:	5499      	strb	r1, [r3, r2]
	RegParams.band = ismBand;
    76ce:	3a70      	subs	r2, #112	; 0x70
    76d0:	3aff      	subs	r2, #255	; 0xff
    76d2:	5498      	strb	r0, [r3, r2]
		result = UNSUPPORTED_BAND;
    76d4:	3ce1      	subs	r4, #225	; 0xe1
	if(ismBand == ISM_KR920)
    76d6:	2804      	cmp	r0, #4
    76d8:	d00c      	beq.n	76f4 <LORAReg_InitKR+0xe8>
    LORAREG_InitGetAttrFnPtrsKR();
    76da:	4b62      	ldr	r3, [pc, #392]	; (7864 <LORAReg_InitKR+0x258>)
    76dc:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    76de:	4b62      	ldr	r3, [pc, #392]	; (7868 <LORAReg_InitKR+0x25c>)
    76e0:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    76e2:	4b62      	ldr	r3, [pc, #392]	; (786c <LORAReg_InitKR+0x260>)
    76e4:	4798      	blx	r3
}
    76e6:	0020      	movs	r0, r4
    76e8:	b006      	add	sp, #24
    76ea:	bc1c      	pop	{r2, r3, r4}
    76ec:	4690      	mov	r8, r2
    76ee:	4699      	mov	r9, r3
    76f0:	46a2      	mov	sl, r4
    76f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    76f4:	001c      	movs	r4, r3
    76f6:	0018      	movs	r0, r3
    76f8:	306c      	adds	r0, #108	; 0x6c
    76fa:	3a20      	subs	r2, #32
    76fc:	495c      	ldr	r1, [pc, #368]	; (7870 <LORAReg_InitKR+0x264>)
    76fe:	4d5d      	ldr	r5, [pc, #372]	; (7874 <LORAReg_InitKR+0x268>)
    7700:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    7702:	0020      	movs	r0, r4
    7704:	308c      	adds	r0, #140	; 0x8c
    7706:	2224      	movs	r2, #36	; 0x24
    7708:	495b      	ldr	r1, [pc, #364]	; (7878 <LORAReg_InitKR+0x26c>)
    770a:	47a8      	blx	r5
    770c:	2103      	movs	r1, #3
    770e:	2003      	movs	r0, #3
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    7710:	4b52      	ldr	r3, [pc, #328]	; (785c <LORAReg_InitKR+0x250>)
    7712:	3640      	adds	r6, #64	; 0x40
		RegParams.pChParams[i].status = DISABLED;
    7714:	2500      	movs	r5, #0
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    7716:	22d5      	movs	r2, #213	; 0xd5
    7718:	0052      	lsls	r2, r2, #1
    771a:	4690      	mov	r8, r2
    771c:	46b4      	mov	ip, r6
    for (i = 3; i < RegParams.maxChannels; i++)
    771e:	3a89      	subs	r2, #137	; 0x89
    7720:	3aff      	subs	r2, #255	; 0xff
    7722:	4692      	mov	sl, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    7724:	0042      	lsls	r2, r0, #1
    7726:	791c      	ldrb	r4, [r3, #4]
    7728:	46a1      	mov	r9, r4
    772a:	795c      	ldrb	r4, [r3, #5]
    772c:	0224      	lsls	r4, r4, #8
    772e:	464f      	mov	r7, r9
    7730:	4327      	orrs	r7, r4
    7732:	799c      	ldrb	r4, [r3, #6]
    7734:	0424      	lsls	r4, r4, #16
    7736:	4327      	orrs	r7, r4
    7738:	79dc      	ldrb	r4, [r3, #7]
    773a:	0624      	lsls	r4, r4, #24
    773c:	433c      	orrs	r4, r7
    773e:	18a4      	adds	r4, r4, r2
    7740:	7066      	strb	r6, [r4, #1]
		RegParams.pChParams[i].status = DISABLED;
    7742:	791c      	ldrb	r4, [r3, #4]
    7744:	46a1      	mov	r9, r4
    7746:	795c      	ldrb	r4, [r3, #5]
    7748:	0224      	lsls	r4, r4, #8
    774a:	464f      	mov	r7, r9
    774c:	4327      	orrs	r7, r4
    774e:	799c      	ldrb	r4, [r3, #6]
    7750:	0424      	lsls	r4, r4, #16
    7752:	4327      	orrs	r7, r4
    7754:	79dc      	ldrb	r4, [r3, #7]
    7756:	0624      	lsls	r4, r4, #24
    7758:	433c      	orrs	r4, r7
    775a:	54a5      	strb	r5, [r4, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    775c:	7a1c      	ldrb	r4, [r3, #8]
    775e:	46a1      	mov	r9, r4
    7760:	7a5c      	ldrb	r4, [r3, #9]
    7762:	0224      	lsls	r4, r4, #8
    7764:	464f      	mov	r7, r9
    7766:	4327      	orrs	r7, r4
    7768:	7a9c      	ldrb	r4, [r3, #10]
    776a:	0424      	lsls	r4, r4, #16
    776c:	4327      	orrs	r7, r4
    776e:	7adc      	ldrb	r4, [r3, #11]
    7770:	0624      	lsls	r4, r4, #24
    7772:	433c      	orrs	r4, r7
    7774:	1812      	adds	r2, r2, r0
    7776:	0092      	lsls	r2, r2, #2
    7778:	1912      	adds	r2, r2, r4
    777a:	7255      	strb	r5, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    777c:	4642      	mov	r2, r8
    777e:	4664      	mov	r4, ip
    7780:	549c      	strb	r4, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    7782:	3152      	adds	r1, #82	; 0x52
    7784:	0089      	lsls	r1, r1, #2
    7786:	1859      	adds	r1, r3, r1
    7788:	724d      	strb	r5, [r1, #9]
    778a:	728d      	strb	r5, [r1, #10]
    778c:	72cd      	strb	r5, [r1, #11]
    778e:	730d      	strb	r5, [r1, #12]
    for (i = 3; i < RegParams.maxChannels; i++)
    7790:	3001      	adds	r0, #1
    7792:	b2c0      	uxtb	r0, r0
    7794:	0001      	movs	r1, r0
    7796:	4652      	mov	r2, sl
    7798:	569a      	ldrsb	r2, [r3, r2]
    779a:	4290      	cmp	r0, r2
    779c:	dbc2      	blt.n	7724 <LORAReg_InitKR+0x118>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    779e:	4c2f      	ldr	r4, [pc, #188]	; (785c <LORAReg_InitKR+0x250>)
    77a0:	22ff      	movs	r2, #255	; 0xff
    77a2:	2327      	movs	r3, #39	; 0x27
    77a4:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    77a6:	7820      	ldrb	r0, [r4, #0]
    77a8:	7863      	ldrb	r3, [r4, #1]
    77aa:	021b      	lsls	r3, r3, #8
    77ac:	4303      	orrs	r3, r0
    77ae:	78a0      	ldrb	r0, [r4, #2]
    77b0:	0400      	lsls	r0, r0, #16
    77b2:	4303      	orrs	r3, r0
    77b4:	78e0      	ldrb	r0, [r4, #3]
    77b6:	0600      	lsls	r0, r0, #24
    77b8:	4318      	orrs	r0, r3
    77ba:	3acf      	subs	r2, #207	; 0xcf
    77bc:	492f      	ldr	r1, [pc, #188]	; (787c <LORAReg_InitKR+0x270>)
    77be:	4b2d      	ldr	r3, [pc, #180]	; (7874 <LORAReg_InitKR+0x268>)
    77c0:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    77c2:	7f63      	ldrb	r3, [r4, #29]
    77c4:	2b00      	cmp	r3, #0
    77c6:	dd17      	ble.n	77f8 <LORAReg_InitKR+0x1ec>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    77c8:	4a24      	ldr	r2, [pc, #144]	; (785c <LORAReg_InitKR+0x250>)
    77ca:	7811      	ldrb	r1, [r2, #0]
    77cc:	7853      	ldrb	r3, [r2, #1]
    77ce:	021b      	lsls	r3, r3, #8
    77d0:	430b      	orrs	r3, r1
    77d2:	7891      	ldrb	r1, [r2, #2]
    77d4:	0409      	lsls	r1, r1, #16
    77d6:	430b      	orrs	r3, r1
    77d8:	78d1      	ldrb	r1, [r2, #3]
    77da:	0609      	lsls	r1, r1, #24
    77dc:	4319      	orrs	r1, r3
    77de:	2300      	movs	r3, #0
    77e0:	2501      	movs	r5, #1
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    77e2:	2407      	movs	r4, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    77e4:	0010      	movs	r0, r2
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    77e6:	00da      	lsls	r2, r3, #3
    77e8:	188a      	adds	r2, r1, r2
    77ea:	71d5      	strb	r5, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    77ec:	7194      	strb	r4, [r2, #6]
    77ee:	3301      	adds	r3, #1
    77f0:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    77f2:	7f42      	ldrb	r2, [r0, #29]
    77f4:	4293      	cmp	r3, r2
    77f6:	dbf6      	blt.n	77e6 <LORAReg_InitKR+0x1da>
		RegParams.regParamItems.fileid = PDS_FILE_REG_KR_06_IDX;
    77f8:	4b18      	ldr	r3, [pc, #96]	; (785c <LORAReg_InitKR+0x250>)
    77fa:	2205      	movs	r2, #5
    77fc:	2005      	movs	r0, #5
    77fe:	21fa      	movs	r1, #250	; 0xfa
    7800:	0049      	lsls	r1, r1, #1
    7802:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.alt_ch_item_id = 0;
    7804:	2000      	movs	r0, #0
    7806:	21f6      	movs	r1, #246	; 0xf6
    7808:	31ff      	adds	r1, #255	; 0xff
    780a:	5458      	strb	r0, [r3, r1]
    780c:	0019      	movs	r1, r3
    780e:	31f6      	adds	r1, #246	; 0xf6
    7810:	31ff      	adds	r1, #255	; 0xff
    7812:	7048      	strb	r0, [r1, #1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_KR_CH_PARAM_1;
    7814:	21f8      	movs	r1, #248	; 0xf8
    7816:	31ff      	adds	r1, #255	; 0xff
    7818:	5458      	strb	r0, [r3, r1]
    781a:	0019      	movs	r1, r3
    781c:	31f8      	adds	r1, #248	; 0xf8
    781e:	31ff      	adds	r1, #255	; 0xff
    7820:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_KR_CH_PARAM_2;
    7822:	3001      	adds	r0, #1
    7824:	21fa      	movs	r1, #250	; 0xfa
    7826:	31ff      	adds	r1, #255	; 0xff
    7828:	5458      	strb	r0, [r3, r1]
    782a:	0019      	movs	r1, r3
    782c:	31fa      	adds	r1, #250	; 0xfa
    782e:	31ff      	adds	r1, #255	; 0xff
    7830:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.band_item_id = 0;
    7832:	2100      	movs	r1, #0
    7834:	22fc      	movs	r2, #252	; 0xfc
    7836:	32ff      	adds	r2, #255	; 0xff
    7838:	5499      	strb	r1, [r3, r2]
    783a:	189b      	adds	r3, r3, r2
    783c:	2200      	movs	r2, #0
    783e:	705a      	strb	r2, [r3, #1]
		filemarks.fileMarkListAddr = aRegKrFid1PdsOps;
    7840:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_KR_FID1_MAX_VALUE & 0x00FF);
    7842:	3202      	adds	r2, #2
    7844:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_KR_Pds_Cb;
    7846:	4a0e      	ldr	r2, [pc, #56]	; (7880 <LORAReg_InitKR+0x274>)
		PDS_RegFile(PDS_FILE_REG_KR_06_IDX,filemarks);
    7848:	9200      	str	r2, [sp, #0]
    784a:	490e      	ldr	r1, [pc, #56]	; (7884 <LORAReg_InitKR+0x278>)
    784c:	9a03      	ldr	r2, [sp, #12]
    784e:	4b0e      	ldr	r3, [pc, #56]	; (7888 <LORAReg_InitKR+0x27c>)
    7850:	3004      	adds	r0, #4
    7852:	4c0e      	ldr	r4, [pc, #56]	; (788c <LORAReg_InitKR+0x280>)
    7854:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7856:	2408      	movs	r4, #8
    7858:	e73f      	b.n	76da <LORAReg_InitKR+0xce>
    785a:	46c0      	nop			; (mov r8, r8)
    785c:	20001404 	.word	0x20001404
    7860:	20001400 	.word	0x20001400
    7864:	0000ad59 	.word	0x0000ad59
    7868:	0000b119 	.word	0x0000b119
    786c:	0000b2d9 	.word	0x0000b2d9
    7870:	0001e330 	.word	0x0001e330
    7874:	00018195 	.word	0x00018195
    7878:	0001e30c 	.word	0x0001e30c
    787c:	0001e338 	.word	0x0001e338
    7880:	00007609 	.word	0x00007609
    7884:	200011f8 	.word	0x200011f8
    7888:	0001e368 	.word	0x0001e368
    788c:	0000b95d 	.word	0x0000b95d

00007890 <LorawanReg_NA_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_NA_Pds_Cb(void)
{
	
}
    7890:	4770      	bx	lr
	...

00007894 <LORAReg_InitNA>:
{
    7894:	b5f0      	push	{r4, r5, r6, r7, lr}
    7896:	46de      	mov	lr, fp
    7898:	4657      	mov	r7, sl
    789a:	464e      	mov	r6, r9
    789c:	4645      	mov	r5, r8
    789e:	b5e0      	push	{r5, r6, r7, lr}
    78a0:	b089      	sub	sp, #36	; 0x24
    78a2:	9003      	str	r0, [sp, #12]
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    78a4:	4c64      	ldr	r4, [pc, #400]	; (7a38 <LORAReg_InitNA+0x1a4>)
    78a6:	2602      	movs	r6, #2
    78a8:	2302      	movs	r3, #2
    78aa:	4698      	mov	r8, r3
    78ac:	77a6      	strb	r6, [r4, #30]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    78ae:	2248      	movs	r2, #72	; 0x48
    78b0:	2322      	movs	r3, #34	; 0x22
    78b2:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    78b4:	3b1b      	subs	r3, #27
    78b6:	77e3      	strb	r3, [r4, #31]
	RegParams.maxTxPwr = MAX_TX_PWR_NA;
    78b8:	3a2a      	subs	r2, #42	; 0x2a
    78ba:	3319      	adds	r3, #25
    78bc:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    78be:	0023      	movs	r3, r4
    78c0:	339c      	adds	r3, #156	; 0x9c
    78c2:	2700      	movs	r7, #0
    78c4:	7123      	strb	r3, [r4, #4]
    78c6:	0a1a      	lsrs	r2, r3, #8
    78c8:	7162      	strb	r2, [r4, #5]
    78ca:	0c1a      	lsrs	r2, r3, #16
    78cc:	71a2      	strb	r2, [r4, #6]
    78ce:	0e1a      	lsrs	r2, r3, #24
    78d0:	71e2      	strb	r2, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    78d2:	0025      	movs	r5, r4
    78d4:	352c      	adds	r5, #44	; 0x2c
    78d6:	7025      	strb	r5, [r4, #0]
    78d8:	0a2a      	lsrs	r2, r5, #8
    78da:	7062      	strb	r2, [r4, #1]
    78dc:	0c2a      	lsrs	r2, r5, #16
    78de:	70a2      	strb	r2, [r4, #2]
    78e0:	0e2a      	lsrs	r2, r5, #24
    78e2:	70e2      	strb	r2, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    78e4:	22ff      	movs	r2, #255	; 0xff
    78e6:	7662      	strb	r2, [r4, #25]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    78e8:	3af5      	subs	r2, #245	; 0xf5
    78ea:	76a2      	strb	r2, [r4, #26]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    78ec:	2008      	movs	r0, #8
    78ee:	2208      	movs	r2, #8
    78f0:	76e2      	strb	r2, [r4, #27]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    78f2:	2260      	movs	r2, #96	; 0x60
    78f4:	4252      	negs	r2, r2
    78f6:	4694      	mov	ip, r2
    78f8:	7522      	strb	r2, [r4, #20]
    78fa:	2270      	movs	r2, #112	; 0x70
    78fc:	7562      	strb	r2, [r4, #21]
    78fe:	75a0      	strb	r0, [r4, #22]
    7900:	2237      	movs	r2, #55	; 0x37
    7902:	75e2      	strb	r2, [r4, #23]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    7904:	2218      	movs	r2, #24
    7906:	7622      	strb	r2, [r4, #24]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    7908:	2204      	movs	r2, #4
    790a:	4691      	mov	r9, r2
    790c:	7722      	strb	r2, [r4, #28]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    790e:	7767      	strb	r7, [r4, #29]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_NA;
    7910:	2240      	movs	r2, #64	; 0x40
    7912:	4692      	mov	sl, r2
    7914:	32fc      	adds	r2, #252	; 0xfc
    7916:	4651      	mov	r1, sl
    7918:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_NA;
    791a:	223e      	movs	r2, #62	; 0x3e
    791c:	32ff      	adds	r2, #255	; 0xff
    791e:	2108      	movs	r1, #8
    7920:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    7922:	3a05      	subs	r2, #5
    7924:	54a7      	strb	r7, [r4, r2]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    7926:	223a      	movs	r2, #58	; 0x3a
    7928:	32ff      	adds	r2, #255	; 0xff
    792a:	4649      	mov	r1, r9
    792c:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    792e:	3201      	adds	r2, #1
    7930:	2108      	movs	r1, #8
    7932:	54a1      	strb	r1, [r4, r2]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    7934:	3a2e      	subs	r2, #46	; 0x2e
    7936:	3aff      	subs	r2, #255	; 0xff
    7938:	213c      	movs	r1, #60	; 0x3c
    793a:	31ff      	adds	r1, #255	; 0xff
    793c:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    793e:	3103      	adds	r1, #3
    7940:	220a      	movs	r2, #10
    7942:	5462      	strb	r2, [r4, r1]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    7944:	2260      	movs	r2, #96	; 0x60
    7946:	3912      	subs	r1, #18
    7948:	5462      	strb	r2, [r4, r1]
    794a:	0021      	movs	r1, r4
    794c:	312d      	adds	r1, #45	; 0x2d
    794e:	31ff      	adds	r1, #255	; 0xff
    7950:	2201      	movs	r2, #1
    7952:	704a      	strb	r2, [r1, #1]
    7954:	2238      	movs	r2, #56	; 0x38
    7956:	4252      	negs	r2, r2
    7958:	708a      	strb	r2, [r1, #2]
    795a:	2235      	movs	r2, #53	; 0x35
    795c:	70ca      	strb	r2, [r1, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    795e:	2240      	movs	r2, #64	; 0x40
    7960:	4252      	negs	r2, r2
    7962:	2198      	movs	r1, #152	; 0x98
    7964:	0049      	lsls	r1, r1, #1
    7966:	5462      	strb	r2, [r4, r1]
    7968:	0021      	movs	r1, r4
    796a:	3131      	adds	r1, #49	; 0x31
    796c:	31ff      	adds	r1, #255	; 0xff
    796e:	2251      	movs	r2, #81	; 0x51
    7970:	4252      	negs	r2, r2
    7972:	704a      	strb	r2, [r1, #1]
    7974:	222e      	movs	r2, #46	; 0x2e
    7976:	4252      	negs	r2, r2
    7978:	708a      	strb	r2, [r1, #2]
    797a:	2235      	movs	r2, #53	; 0x35
    797c:	70ca      	strb	r2, [r1, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    797e:	219a      	movs	r1, #154	; 0x9a
    7980:	0049      	lsls	r1, r1, #1
    7982:	4662      	mov	r2, ip
    7984:	5462      	strb	r2, [r4, r1]
    7986:	0021      	movs	r1, r4
    7988:	3135      	adds	r1, #53	; 0x35
    798a:	31ff      	adds	r1, #255	; 0xff
    798c:	2270      	movs	r2, #112	; 0x70
    798e:	704a      	strb	r2, [r1, #1]
    7990:	7088      	strb	r0, [r1, #2]
    7992:	2037      	movs	r0, #55	; 0x37
    7994:	70c8      	strb	r0, [r1, #3]
	RegParams.Rx1DrOffset = 3;
    7996:	2003      	movs	r0, #3
    7998:	2124      	movs	r1, #36	; 0x24
    799a:	5460      	strb	r0, [r4, r1]
	RegParams.maxTxPwrIndx = 10;
    799c:	3101      	adds	r1, #1
    799e:	220a      	movs	r2, #10
    79a0:	5462      	strb	r2, [r4, r1]
	RegParams.band = ismBand;
    79a2:	2226      	movs	r2, #38	; 0x26
    79a4:	4669      	mov	r1, sp
    79a6:	7b09      	ldrb	r1, [r1, #12]
    79a8:	54a1      	strb	r1, [r4, r2]
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    79aa:	326a      	adds	r2, #106	; 0x6a
    79ac:	4923      	ldr	r1, [pc, #140]	; (7a3c <LORAReg_InitNA+0x1a8>)
    79ae:	0018      	movs	r0, r3
    79b0:	4b23      	ldr	r3, [pc, #140]	; (7a40 <LORAReg_InitNA+0x1ac>)
    79b2:	4699      	mov	r9, r3
    79b4:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    79b6:	2270      	movs	r2, #112	; 0x70
    79b8:	4922      	ldr	r1, [pc, #136]	; (7a44 <LORAReg_InitNA+0x1b0>)
    79ba:	0028      	movs	r0, r5
    79bc:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    79be:	2340      	movs	r3, #64	; 0x40
    79c0:	33ff      	adds	r3, #255	; 0xff
    79c2:	54e7      	strb	r7, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_NA_03_IDX;
    79c4:	33b5      	adds	r3, #181	; 0xb5
    79c6:	54e6      	strb	r6, [r4, r3]
	RegParams.regParamItems.alt_ch_item_id = PDS_REG_NA_ALT_CH;
    79c8:	2200      	movs	r2, #0
    79ca:	23f6      	movs	r3, #246	; 0xf6
    79cc:	33ff      	adds	r3, #255	; 0xff
    79ce:	54e2      	strb	r2, [r4, r3]
    79d0:	0023      	movs	r3, r4
    79d2:	33f6      	adds	r3, #246	; 0xf6
    79d4:	33ff      	adds	r3, #255	; 0xff
    79d6:	4642      	mov	r2, r8
    79d8:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_NA_CH_PARAM;
    79da:	23f8      	movs	r3, #248	; 0xf8
    79dc:	33ff      	adds	r3, #255	; 0xff
    79de:	2201      	movs	r2, #1
    79e0:	54e2      	strb	r2, [r4, r3]
    79e2:	0023      	movs	r3, r4
    79e4:	33f8      	adds	r3, #248	; 0xf8
    79e6:	33ff      	adds	r3, #255	; 0xff
    79e8:	4642      	mov	r2, r8
    79ea:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    79ec:	2200      	movs	r2, #0
    79ee:	23fa      	movs	r3, #250	; 0xfa
    79f0:	33ff      	adds	r3, #255	; 0xff
    79f2:	54e2      	strb	r2, [r4, r3]
    79f4:	0023      	movs	r3, r4
    79f6:	33fa      	adds	r3, #250	; 0xfa
    79f8:	33ff      	adds	r3, #255	; 0xff
    79fa:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    79fc:	23fc      	movs	r3, #252	; 0xfc
    79fe:	33ff      	adds	r3, #255	; 0xff
    7a00:	54e2      	strb	r2, [r4, r3]
    7a02:	18e4      	adds	r4, r4, r3
    7a04:	2300      	movs	r3, #0
    7a06:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegNaPdsOps;
    7a08:	ab04      	add	r3, sp, #16
	filemarks.numItems =  (uint8_t)(PDS_REG_NA_MAX_VALUE & 0x00FF);
    7a0a:	711e      	strb	r6, [r3, #4]
	filemarks.fIDcb = LorawanReg_NA_Pds_Cb;
    7a0c:	4a0e      	ldr	r2, [pc, #56]	; (7a48 <LORAReg_InitNA+0x1b4>)
	PDS_RegFile(PDS_FILE_REG_NA_03_IDX,filemarks);
    7a0e:	9200      	str	r2, [sp, #0]
    7a10:	490e      	ldr	r1, [pc, #56]	; (7a4c <LORAReg_InitNA+0x1b8>)
    7a12:	9a05      	ldr	r2, [sp, #20]
    7a14:	4b0e      	ldr	r3, [pc, #56]	; (7a50 <LORAReg_InitNA+0x1bc>)
    7a16:	2002      	movs	r0, #2
    7a18:	4c0e      	ldr	r4, [pc, #56]	; (7a54 <LORAReg_InitNA+0x1c0>)
    7a1a:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsNA();
    7a1c:	4b0e      	ldr	r3, [pc, #56]	; (7a58 <LORAReg_InitNA+0x1c4>)
    7a1e:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    7a20:	4b0e      	ldr	r3, [pc, #56]	; (7a5c <LORAReg_InitNA+0x1c8>)
    7a22:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    7a24:	4b0e      	ldr	r3, [pc, #56]	; (7a60 <LORAReg_InitNA+0x1cc>)
    7a26:	4798      	blx	r3
}
    7a28:	2008      	movs	r0, #8
    7a2a:	b009      	add	sp, #36	; 0x24
    7a2c:	bc3c      	pop	{r2, r3, r4, r5}
    7a2e:	4690      	mov	r8, r2
    7a30:	4699      	mov	r9, r3
    7a32:	46a2      	mov	sl, r4
    7a34:	46ab      	mov	fp, r5
    7a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a38:	20001404 	.word	0x20001404
    7a3c:	0001e378 	.word	0x0001e378
    7a40:	00018195 	.word	0x00018195
    7a44:	0001e408 	.word	0x0001e408
    7a48:	00007891 	.word	0x00007891
    7a4c:	200011fc 	.word	0x200011fc
    7a50:	0001e478 	.word	0x0001e478
    7a54:	0000b95d 	.word	0x0000b95d
    7a58:	0000a611 	.word	0x0000a611
    7a5c:	0000ae99 	.word	0x0000ae99
    7a60:	0000b181 	.word	0x0000b181

00007a64 <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    7a64:	2015      	movs	r0, #21
    7a66:	4770      	bx	lr

00007a68 <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    7a68:	2015      	movs	r0, #21
    7a6a:	4770      	bx	lr

00007a6c <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    7a6c:	2322      	movs	r3, #34	; 0x22
    7a6e:	4902      	ldr	r1, [pc, #8]	; (7a78 <LORAREG_GetAttr_MaxChannel+0xc>)
    7a70:	5ccb      	ldrb	r3, [r1, r3]
    7a72:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7a74:	2008      	movs	r0, #8
    7a76:	4770      	bx	lr
    7a78:	20001404 	.word	0x20001404

00007a7c <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    7a7c:	4b04      	ldr	r3, [pc, #16]	; (7a90 <LORAREG_GetAttr_MinNewChIndex+0x14>)
    7a7e:	7e59      	ldrb	r1, [r3, #25]
    7a80:	7011      	strb	r1, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    7a82:	7e5b      	ldrb	r3, [r3, #25]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7a84:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    7a86:	2bff      	cmp	r3, #255	; 0xff
    7a88:	d000      	beq.n	7a8c <LORAREG_GetAttr_MinNewChIndex+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    7a8a:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    7a8c:	3002      	adds	r0, #2
    7a8e:	e7fc      	b.n	7a8a <LORAREG_GetAttr_MinNewChIndex+0xe>
    7a90:	20001404 	.word	0x20001404

00007a94 <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    7a94:	4b02      	ldr	r3, [pc, #8]	; (7aa0 <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    7a96:	7e9b      	ldrb	r3, [r3, #26]
    7a98:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7a9a:	2008      	movs	r0, #8
    7a9c:	4770      	bx	lr
    7a9e:	46c0      	nop			; (mov r8, r8)
    7aa0:	20001404 	.word	0x20001404

00007aa4 <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    7aa4:	4b02      	ldr	r3, [pc, #8]	; (7ab0 <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    7aa6:	7edb      	ldrb	r3, [r3, #27]
    7aa8:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7aaa:	2008      	movs	r0, #8
    7aac:	4770      	bx	lr
    7aae:	46c0      	nop			; (mov r8, r8)
    7ab0:	20001404 	.word	0x20001404

00007ab4 <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    7ab4:	4b02      	ldr	r3, [pc, #8]	; (7ac0 <LORAREG_GetAttr_RegFeatures+0xc>)
    7ab6:	7e1b      	ldrb	r3, [r3, #24]
    7ab8:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7aba:	2008      	movs	r0, #8
    7abc:	4770      	bx	lr
    7abe:	46c0      	nop			; (mov r8, r8)
    7ac0:	20001404 	.word	0x20001404

00007ac4 <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    7ac4:	b530      	push	{r4, r5, lr}
    7ac6:	b083      	sub	sp, #12
    7ac8:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    7aca:	780c      	ldrb	r4, [r1, #0]
    7acc:	a901      	add	r1, sp, #4
    7ace:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    7ad0:	2301      	movs	r3, #1
    7ad2:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    7ad4:	4b0d      	ldr	r3, [pc, #52]	; (7b0c <LORAREG_GetAttr_DataRange+0x48>)
    7ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    7ad8:	2015      	movs	r0, #21
    7ada:	4798      	blx	r3
    7adc:	2808      	cmp	r0, #8
    7ade:	d004      	beq.n	7aea <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    7ae0:	23ff      	movs	r3, #255	; 0xff
    7ae2:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    7ae4:	200a      	movs	r0, #10
	}
	return result;
}
    7ae6:	b003      	add	sp, #12
    7ae8:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    7aea:	4909      	ldr	r1, [pc, #36]	; (7b10 <LORAREG_GetAttr_DataRange+0x4c>)
    7aec:	790b      	ldrb	r3, [r1, #4]
    7aee:	794a      	ldrb	r2, [r1, #5]
    7af0:	0212      	lsls	r2, r2, #8
    7af2:	4313      	orrs	r3, r2
    7af4:	798a      	ldrb	r2, [r1, #6]
    7af6:	0412      	lsls	r2, r2, #16
    7af8:	431a      	orrs	r2, r3
    7afa:	79cb      	ldrb	r3, [r1, #7]
    7afc:	061b      	lsls	r3, r3, #24
    7afe:	431a      	orrs	r2, r3
    7b00:	0063      	lsls	r3, r4, #1
    7b02:	189b      	adds	r3, r3, r2
    7b04:	785b      	ldrb	r3, [r3, #1]
    7b06:	702b      	strb	r3, [r5, #0]
    7b08:	e7ed      	b.n	7ae6 <LORAREG_GetAttr_DataRange+0x22>
    7b0a:	46c0      	nop			; (mov r8, r8)
    7b0c:	20000d94 	.word	0x20000d94
    7b10:	20001404 	.word	0x20001404

00007b14 <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    7b14:	b530      	push	{r4, r5, lr}
    7b16:	b083      	sub	sp, #12
    7b18:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    7b1a:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    7b1c:	a901      	add	r1, sp, #4
    7b1e:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    7b20:	2301      	movs	r3, #1
    7b22:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    7b24:	4b0c      	ldr	r3, [pc, #48]	; (7b58 <LORAREG_GetAttr_ChIdStatus+0x44>)
    7b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    7b28:	2015      	movs	r0, #21
    7b2a:	4798      	blx	r3
    7b2c:	2808      	cmp	r0, #8
    7b2e:	d004      	beq.n	7b3a <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    7b30:	2300      	movs	r3, #0
    7b32:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    7b34:	200a      	movs	r0, #10
	}
	return result;
}
    7b36:	b003      	add	sp, #12
    7b38:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    7b3a:	4908      	ldr	r1, [pc, #32]	; (7b5c <LORAREG_GetAttr_ChIdStatus+0x48>)
    7b3c:	790a      	ldrb	r2, [r1, #4]
    7b3e:	794b      	ldrb	r3, [r1, #5]
    7b40:	021b      	lsls	r3, r3, #8
    7b42:	4313      	orrs	r3, r2
    7b44:	798a      	ldrb	r2, [r1, #6]
    7b46:	0412      	lsls	r2, r2, #16
    7b48:	4313      	orrs	r3, r2
    7b4a:	79ca      	ldrb	r2, [r1, #7]
    7b4c:	0612      	lsls	r2, r2, #24
    7b4e:	431a      	orrs	r2, r3
    7b50:	0064      	lsls	r4, r4, #1
    7b52:	5ca3      	ldrb	r3, [r4, r2]
    7b54:	702b      	strb	r3, [r5, #0]
    7b56:	e7ee      	b.n	7b36 <LORAREG_GetAttr_ChIdStatus+0x22>
    7b58:	20000d94 	.word	0x20000d94
    7b5c:	20001404 	.word	0x20001404

00007b60 <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    7b60:	2301      	movs	r3, #1
    7b62:	425b      	negs	r3, r3
    7b64:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    7b66:	200a      	movs	r0, #10
    7b68:	4770      	bx	lr

00007b6a <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    7b6a:	2301      	movs	r3, #1
    7b6c:	425b      	negs	r3, r3
    7b6e:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    7b70:	200a      	movs	r0, #10
    7b72:	4770      	bx	lr

00007b74 <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    7b74:	23fa      	movs	r3, #250	; 0xfa
    7b76:	009b      	lsls	r3, r3, #2
    7b78:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7b7a:	2008      	movs	r0, #8
    7b7c:	4770      	bx	lr

00007b7e <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    7b7e:	23fa      	movs	r3, #250	; 0xfa
    7b80:	00db      	lsls	r3, r3, #3
    7b82:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7b84:	2008      	movs	r0, #8
    7b86:	4770      	bx	lr

00007b88 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    7b88:	4b01      	ldr	r3, [pc, #4]	; (7b90 <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    7b8a:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7b8c:	2008      	movs	r0, #8
    7b8e:	4770      	bx	lr
    7b90:	00001388 	.word	0x00001388

00007b94 <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    7b94:	4b01      	ldr	r3, [pc, #4]	; (7b9c <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    7b96:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7b98:	2008      	movs	r0, #8
    7b9a:	4770      	bx	lr
    7b9c:	00001770 	.word	0x00001770

00007ba0 <LORAREG_GetAttr_MacAckTimeout>:

static StackRetStatus_t LORAREG_GetAttr_MacAckTimeout(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = ACK_TIMEOUT;
    7ba0:	23fa      	movs	r3, #250	; 0xfa
    7ba2:	00db      	lsls	r3, r3, #3
    7ba4:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7ba6:	2008      	movs	r0, #8
    7ba8:	4770      	bx	lr

00007baa <LORAREG_GetAttr_MacAdrAckDelay>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    7baa:	2320      	movs	r3, #32
    7bac:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7bae:	2008      	movs	r0, #8
    7bb0:	4770      	bx	lr

00007bb2 <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    7bb2:	2340      	movs	r3, #64	; 0x40
    7bb4:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7bb6:	2008      	movs	r0, #8
    7bb8:	4770      	bx	lr

00007bba <LORAREG_GetAttr_MacMaxFcntGap>:

static StackRetStatus_t LORAREG_GetAttr_MacMaxFcntGap(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = MAX_FCNT_GAP;
    7bba:	2380      	movs	r3, #128	; 0x80
    7bbc:	01db      	lsls	r3, r3, #7
    7bbe:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7bc0:	2008      	movs	r0, #8
    7bc2:	4770      	bx	lr

00007bc4 <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    7bc4:	4b02      	ldr	r3, [pc, #8]	; (7bd0 <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    7bc6:	7fdb      	ldrb	r3, [r3, #31]
    7bc8:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7bca:	2008      	movs	r0, #8
    7bcc:	4770      	bx	lr
    7bce:	46c0      	nop			; (mov r8, r8)
    7bd0:	20001404 	.word	0x20001404

00007bd4 <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    7bd4:	4b02      	ldr	r3, [pc, #8]	; (7be0 <LORAREG_GetAttr_RegDefTxDR+0xc>)
    7bd6:	7f9b      	ldrb	r3, [r3, #30]
    7bd8:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7bda:	2008      	movs	r0, #8
    7bdc:	4770      	bx	lr
    7bde:	46c0      	nop			; (mov r8, r8)
    7be0:	20001404 	.word	0x20001404

00007be4 <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    7be4:	2327      	movs	r3, #39	; 0x27
    7be6:	4902      	ldr	r1, [pc, #8]	; (7bf0 <LORAREG_GetAttr_CurChIndx+0xc>)
    7be8:	5ccb      	ldrb	r3, [r1, r3]
    7bea:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    7bec:	2008      	movs	r0, #8
    7bee:	4770      	bx	lr
    7bf0:	20001404 	.word	0x20001404

00007bf4 <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    7bf4:	4b09      	ldr	r3, [pc, #36]	; (7c1c <LORAREG_GetAttr_DefLBTParams+0x28>)
    7bf6:	21d4      	movs	r1, #212	; 0xd4
    7bf8:	0049      	lsls	r1, r1, #1
    7bfa:	5c59      	ldrb	r1, [r3, r1]
    7bfc:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    7bfe:	21d3      	movs	r1, #211	; 0xd3
    7c00:	0049      	lsls	r1, r1, #1
    7c02:	5c59      	ldrb	r1, [r3, r1]
    7c04:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    7c06:	21a8      	movs	r1, #168	; 0xa8
    7c08:	31ff      	adds	r1, #255	; 0xff
    7c0a:	565b      	ldrsb	r3, [r3, r1]
    7c0c:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    7c0e:	2301      	movs	r3, #1
    7c10:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    7c12:	3304      	adds	r3, #4
    7c14:	8093      	strh	r3, [r2, #4]
	return 0;
}
    7c16:	2000      	movs	r0, #0
    7c18:	4770      	bx	lr
    7c1a:	46c0      	nop			; (mov r8, r8)
    7c1c:	20001404 	.word	0x20001404

00007c20 <LORAREG_GetAttr_FreqT1>:
{
    7c20:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    7c22:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    7c24:	2122      	movs	r1, #34	; 0x22
    7c26:	4820      	ldr	r0, [pc, #128]	; (7ca8 <LORAREG_GetAttr_FreqT1+0x88>)
    7c28:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    7c2a:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    7c2c:	428b      	cmp	r3, r1
    7c2e:	dc3a      	bgt.n	7ca6 <LORAREG_GetAttr_FreqT1+0x86>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    7c30:	3033      	adds	r0, #51	; 0x33
    7c32:	30ff      	adds	r0, #255	; 0xff
    7c34:	4c1c      	ldr	r4, [pc, #112]	; (7ca8 <LORAREG_GetAttr_FreqT1+0x88>)
    7c36:	5c24      	ldrb	r4, [r4, r0]
    7c38:	42a3      	cmp	r3, r4
    7c3a:	d31c      	bcc.n	7c76 <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    7c3c:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    7c3e:	428b      	cmp	r3, r1
    7c40:	da31      	bge.n	7ca6 <LORAREG_GetAttr_FreqT1+0x86>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    7c42:	1b1b      	subs	r3, r3, r4
    7c44:	4919      	ldr	r1, [pc, #100]	; (7cac <LORAREG_GetAttr_FreqT1+0x8c>)
    7c46:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    7c48:	4c17      	ldr	r4, [pc, #92]	; (7ca8 <LORAREG_GetAttr_FreqT1+0x88>)
    7c4a:	2198      	movs	r1, #152	; 0x98
    7c4c:	0049      	lsls	r1, r1, #1
    7c4e:	5c61      	ldrb	r1, [r4, r1]
    7c50:	2032      	movs	r0, #50	; 0x32
    7c52:	30ff      	adds	r0, #255	; 0xff
    7c54:	5c20      	ldrb	r0, [r4, r0]
    7c56:	0200      	lsls	r0, r0, #8
    7c58:	4301      	orrs	r1, r0
    7c5a:	2099      	movs	r0, #153	; 0x99
    7c5c:	0040      	lsls	r0, r0, #1
    7c5e:	5c20      	ldrb	r0, [r4, r0]
    7c60:	0400      	lsls	r0, r0, #16
    7c62:	4308      	orrs	r0, r1
    7c64:	2134      	movs	r1, #52	; 0x34
    7c66:	31ff      	adds	r1, #255	; 0xff
    7c68:	5c61      	ldrb	r1, [r4, r1]
    7c6a:	0609      	lsls	r1, r1, #24
    7c6c:	4301      	orrs	r1, r0
    7c6e:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    7c70:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7c72:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    7c74:	e017      	b.n	7ca6 <LORAREG_GetAttr_FreqT1+0x86>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    7c76:	4c0c      	ldr	r4, [pc, #48]	; (7ca8 <LORAREG_GetAttr_FreqT1+0x88>)
    7c78:	2196      	movs	r1, #150	; 0x96
    7c7a:	0049      	lsls	r1, r1, #1
    7c7c:	5c61      	ldrb	r1, [r4, r1]
    7c7e:	202e      	movs	r0, #46	; 0x2e
    7c80:	30ff      	adds	r0, #255	; 0xff
    7c82:	5c20      	ldrb	r0, [r4, r0]
    7c84:	0200      	lsls	r0, r0, #8
    7c86:	4308      	orrs	r0, r1
    7c88:	2197      	movs	r1, #151	; 0x97
    7c8a:	0049      	lsls	r1, r1, #1
    7c8c:	5c61      	ldrb	r1, [r4, r1]
    7c8e:	0409      	lsls	r1, r1, #16
    7c90:	4308      	orrs	r0, r1
    7c92:	2130      	movs	r1, #48	; 0x30
    7c94:	31ff      	adds	r1, #255	; 0xff
    7c96:	5c61      	ldrb	r1, [r4, r1]
    7c98:	0609      	lsls	r1, r1, #24
    7c9a:	4301      	orrs	r1, r0
    7c9c:	4804      	ldr	r0, [pc, #16]	; (7cb0 <LORAREG_GetAttr_FreqT1+0x90>)
    7c9e:	4343      	muls	r3, r0
    7ca0:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    7ca2:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7ca4:	2008      	movs	r0, #8
}
    7ca6:	bd30      	pop	{r4, r5, pc}
    7ca8:	20001404 	.word	0x20001404
    7cac:	00186a00 	.word	0x00186a00
    7cb0:	00030d40 	.word	0x00030d40

00007cb4 <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7cb4:	780a      	ldrb	r2, [r1, #0]
    7cb6:	233a      	movs	r3, #58	; 0x3a
    7cb8:	33ff      	adds	r3, #255	; 0xff
    7cba:	4903      	ldr	r1, [pc, #12]	; (7cc8 <ValidateDataRateTxT1+0x14>)
    7cbc:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7cbe:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    7cc0:	429a      	cmp	r2, r3
    7cc2:	d900      	bls.n	7cc6 <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    7cc4:	3002      	adds	r0, #2
	}
	
	return result;
}
    7cc6:	4770      	bx	lr
    7cc8:	20001404 	.word	0x20001404

00007ccc <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    7ccc:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    7cce:	4a08      	ldr	r2, [pc, #32]	; (7cf0 <ValidateDataRateTxT2+0x24>)
    7cd0:	7f12      	ldrb	r2, [r2, #28]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    7cd2:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    7cd4:	429a      	cmp	r2, r3
    7cd6:	d30a      	bcc.n	7cee <ValidateDataRateTxT2+0x22>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    7cd8:	22ac      	movs	r2, #172	; 0xac
    7cda:	32ff      	adds	r2, #255	; 0xff
    7cdc:	4904      	ldr	r1, [pc, #16]	; (7cf0 <ValidateDataRateTxT2+0x24>)
    7cde:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7ce0:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    7ce2:	07d2      	lsls	r2, r2, #31
    7ce4:	d503      	bpl.n	7cee <ValidateDataRateTxT2+0x22>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    7ce6:	7e8a      	ldrb	r2, [r1, #26]
    7ce8:	429a      	cmp	r2, r3
    7cea:	d900      	bls.n	7cee <ValidateDataRateTxT2+0x22>
		result = LORAWAN_INVALID_PARAMETER;
    7cec:	3002      	adds	r0, #2
	}
	
	return result;
}
    7cee:	4770      	bx	lr
    7cf0:	20001404 	.word	0x20001404

00007cf4 <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    7cf4:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    7cf6:	223c      	movs	r2, #60	; 0x3c
    7cf8:	32ff      	adds	r2, #255	; 0xff
    7cfa:	4906      	ldr	r1, [pc, #24]	; (7d14 <ValidateDataRateRxT1+0x20>)
    7cfc:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    7cfe:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    7d00:	429a      	cmp	r2, r3
    7d02:	d306      	bcc.n	7d12 <ValidateDataRateRxT1+0x1e>
    7d04:	229d      	movs	r2, #157	; 0x9d
    7d06:	0052      	lsls	r2, r2, #1
    7d08:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7d0a:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    7d0c:	429a      	cmp	r2, r3
    7d0e:	d900      	bls.n	7d12 <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    7d10:	3002      	adds	r0, #2
	}
	return result;
}
    7d12:	4770      	bx	lr
    7d14:	20001404 	.word	0x20001404

00007d18 <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    7d18:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    7d1a:	4a08      	ldr	r2, [pc, #32]	; (7d3c <ValidateDataRateRxT2+0x24>)
    7d1c:	7f12      	ldrb	r2, [r2, #28]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    7d1e:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    7d20:	429a      	cmp	r2, r3
    7d22:	d30a      	bcc.n	7d3a <ValidateDataRateRxT2+0x22>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    7d24:	22ac      	movs	r2, #172	; 0xac
    7d26:	32ff      	adds	r2, #255	; 0xff
    7d28:	4904      	ldr	r1, [pc, #16]	; (7d3c <ValidateDataRateRxT2+0x24>)
    7d2a:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7d2c:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    7d2e:	0792      	lsls	r2, r2, #30
    7d30:	d503      	bpl.n	7d3a <ValidateDataRateRxT2+0x22>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    7d32:	7e8a      	ldrb	r2, [r1, #26]
    7d34:	429a      	cmp	r2, r3
    7d36:	d900      	bls.n	7d3a <ValidateDataRateRxT2+0x22>
		result = LORAWAN_INVALID_PARAMETER;
    7d38:	3002      	adds	r0, #2
	}

	return result;
}
    7d3a:	4770      	bx	lr
    7d3c:	20001404 	.word	0x20001404

00007d40 <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    7d40:	780a      	ldrb	r2, [r1, #0]
    7d42:	2322      	movs	r3, #34	; 0x22
    7d44:	4903      	ldr	r1, [pc, #12]	; (7d54 <ValidateChannelId+0x14>)
    7d46:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    7d48:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    7d4a:	429a      	cmp	r2, r3
    7d4c:	db00      	blt.n	7d50 <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    7d4e:	3002      	adds	r0, #2
    }
	
    return result;
}
    7d50:	4770      	bx	lr
    7d52:	46c0      	nop			; (mov r8, r8)
    7d54:	20001404 	.word	0x20001404

00007d58 <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    7d58:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    7d5a:	2222      	movs	r2, #34	; 0x22
    7d5c:	4808      	ldr	r0, [pc, #32]	; (7d80 <ValidateChannelIdT2+0x28>)
    7d5e:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    7d60:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    7d62:	4293      	cmp	r3, r2
    7d64:	da0a      	bge.n	7d7c <ValidateChannelIdT2+0x24>
    7d66:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    7d68:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    7d6a:	2a00      	cmp	r2, #0
    7d6c:	d106      	bne.n	7d7c <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    7d6e:	22aa      	movs	r2, #170	; 0xaa
    7d70:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    7d72:	4903      	ldr	r1, [pc, #12]	; (7d80 <ValidateChannelIdT2+0x28>)
    7d74:	5c8a      	ldrb	r2, [r1, r2]
    7d76:	429a      	cmp	r2, r3
    7d78:	d900      	bls.n	7d7c <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    7d7a:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    7d7c:	4770      	bx	lr
    7d7e:	46c0      	nop			; (mov r8, r8)
    7d80:	20001404 	.word	0x20001404

00007d84 <LORAREG_GetAttr_DutyCycleT2>:
{
    7d84:	b530      	push	{r4, r5, lr}
    7d86:	b083      	sub	sp, #12
    7d88:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    7d8a:	780d      	ldrb	r5, [r1, #0]
    7d8c:	a901      	add	r1, sp, #4
    7d8e:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    7d90:	2301      	movs	r3, #1
    7d92:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    7d94:	2015      	movs	r0, #21
    7d96:	4b0b      	ldr	r3, [pc, #44]	; (7dc4 <LORAREG_GetAttr_DutyCycleT2+0x40>)
    7d98:	4798      	blx	r3
    7d9a:	2808      	cmp	r0, #8
    7d9c:	d002      	beq.n	7da4 <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    7d9e:	200a      	movs	r0, #10
}
    7da0:	b003      	add	sp, #12
    7da2:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    7da4:	4a08      	ldr	r2, [pc, #32]	; (7dc8 <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    7da6:	006b      	lsls	r3, r5, #1
    7da8:	195b      	adds	r3, r3, r5
    7daa:	009b      	lsls	r3, r3, #2
    7dac:	18d3      	adds	r3, r2, r3
    7dae:	3394      	adds	r3, #148	; 0x94
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    7db0:	781b      	ldrb	r3, [r3, #0]
    7db2:	33c8      	adds	r3, #200	; 0xc8
    7db4:	005b      	lsls	r3, r3, #1
    7db6:	18d2      	adds	r2, r2, r3
    7db8:	7991      	ldrb	r1, [r2, #6]
    7dba:	79d3      	ldrb	r3, [r2, #7]
    7dbc:	021b      	lsls	r3, r3, #8
    7dbe:	430b      	orrs	r3, r1
    7dc0:	8023      	strh	r3, [r4, #0]
    7dc2:	e7ed      	b.n	7da0 <LORAREG_GetAttr_DutyCycleT2+0x1c>
    7dc4:	00007d59 	.word	0x00007d59
    7dc8:	20001404 	.word	0x20001404

00007dcc <LORAREG_GetAttr_MinMaxDr>:
{
    7dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7dce:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    7dd0:	4b1a      	ldr	r3, [pc, #104]	; (7e3c <LORAREG_GetAttr_MinMaxDr+0x70>)
    7dd2:	7f1c      	ldrb	r4, [r3, #28]
	uint8_t maxDataRate = RegParams.maxDataRate;
    7dd4:	7f5f      	ldrb	r7, [r3, #29]

	for (i = 0; i < RegParams.maxChannels; i++)
    7dd6:	2122      	movs	r1, #34	; 0x22
    7dd8:	565e      	ldrsb	r6, [r3, r1]
    7dda:	2e00      	cmp	r6, #0
    7ddc:	dd28      	ble.n	7e30 <LORAREG_GetAttr_MinMaxDr+0x64>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    7dde:	0019      	movs	r1, r3
    7de0:	791d      	ldrb	r5, [r3, #4]
    7de2:	795b      	ldrb	r3, [r3, #5]
    7de4:	021b      	lsls	r3, r3, #8
    7de6:	432b      	orrs	r3, r5
    7de8:	798d      	ldrb	r5, [r1, #6]
    7dea:	042d      	lsls	r5, r5, #16
    7dec:	432b      	orrs	r3, r5
    7dee:	79cd      	ldrb	r5, [r1, #7]
    7df0:	062d      	lsls	r5, r5, #24
    7df2:	431d      	orrs	r5, r3
    7df4:	2100      	movs	r1, #0
    7df6:	e00b      	b.n	7e10 <LORAREG_GetAttr_MinMaxDr+0x44>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    7df8:	7843      	ldrb	r3, [r0, #1]
    7dfa:	091b      	lsrs	r3, r3, #4
    7dfc:	42bb      	cmp	r3, r7
    7dfe:	dd03      	ble.n	7e08 <LORAREG_GetAttr_MinMaxDr+0x3c>
    7e00:	7800      	ldrb	r0, [r0, #0]
    7e02:	2800      	cmp	r0, #0
    7e04:	d000      	beq.n	7e08 <LORAREG_GetAttr_MinMaxDr+0x3c>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    7e06:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    7e08:	3101      	adds	r1, #1
    7e0a:	b2c9      	uxtb	r1, r1
    7e0c:	42b1      	cmp	r1, r6
    7e0e:	da0f      	bge.n	7e30 <LORAREG_GetAttr_MinMaxDr+0x64>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    7e10:	0048      	lsls	r0, r1, #1
    7e12:	1828      	adds	r0, r5, r0
    7e14:	7843      	ldrb	r3, [r0, #1]
    7e16:	071b      	lsls	r3, r3, #28
    7e18:	0f1b      	lsrs	r3, r3, #28
    7e1a:	42a3      	cmp	r3, r4
    7e1c:	daec      	bge.n	7df8 <LORAREG_GetAttr_MinMaxDr+0x2c>
    7e1e:	7802      	ldrb	r2, [r0, #0]
    7e20:	2a00      	cmp	r2, #0
    7e22:	d0f1      	beq.n	7e08 <LORAREG_GetAttr_MinMaxDr+0x3c>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    7e24:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    7e26:	7843      	ldrb	r3, [r0, #1]
    7e28:	091b      	lsrs	r3, r3, #4
    7e2a:	42bb      	cmp	r3, r7
    7e2c:	dceb      	bgt.n	7e06 <LORAREG_GetAttr_MinMaxDr+0x3a>
    7e2e:	e7eb      	b.n	7e08 <LORAREG_GetAttr_MinMaxDr+0x3c>
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    7e30:	4663      	mov	r3, ip
    7e32:	701c      	strb	r4, [r3, #0]
    7e34:	705f      	strb	r7, [r3, #1]
}
    7e36:	2008      	movs	r0, #8
    7e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e3a:	46c0      	nop			; (mov r8, r8)
    7e3c:	20001404 	.word	0x20001404

00007e40 <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    7e40:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    7e42:	2b05      	cmp	r3, #5
    7e44:	d004      	beq.n	7e50 <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    7e46:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    7e48:	2b07      	cmp	r3, #7
    7e4a:	d900      	bls.n	7e4e <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    7e4c:	3002      	adds	r0, #2
    }

    return result;
}
    7e4e:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    7e50:	200a      	movs	r0, #10
    7e52:	e7fc      	b.n	7e4e <ValidateChannelMaskCntl+0xe>

00007e54 <ValidateTxPower>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7e54:	780a      	ldrb	r2, [r1, #0]
    7e56:	2325      	movs	r3, #37	; 0x25
    7e58:	4903      	ldr	r1, [pc, #12]	; (7e68 <ValidateTxPower+0x14>)
    7e5a:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7e5c:	2008      	movs	r0, #8
	if (txPowerNew > RegParams.maxTxPwrIndx)
    7e5e:	429a      	cmp	r2, r3
    7e60:	dd00      	ble.n	7e64 <ValidateTxPower+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
    7e62:	3002      	adds	r0, #2
	}

	return result;
}
    7e64:	4770      	bx	lr
    7e66:	46c0      	nop			; (mov r8, r8)
    7e68:	20001404 	.word	0x20001404

00007e6c <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    7e6c:	2008      	movs	r0, #8
    7e6e:	4770      	bx	lr

00007e70 <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    7e70:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    7e72:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    7e74:	2900      	cmp	r1, #0
    7e76:	d020      	beq.n	7eba <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    7e78:	2322      	movs	r3, #34	; 0x22
    7e7a:	4a11      	ldr	r2, [pc, #68]	; (7ec0 <ValidateChannelMaskT2+0x50>)
    7e7c:	56d0      	ldrsb	r0, [r2, r3]
    7e7e:	2800      	cmp	r0, #0
    7e80:	dd1b      	ble.n	7eba <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    7e82:	7a14      	ldrb	r4, [r2, #8]
    7e84:	7a53      	ldrb	r3, [r2, #9]
    7e86:	021b      	lsls	r3, r3, #8
    7e88:	4323      	orrs	r3, r4
    7e8a:	7a94      	ldrb	r4, [r2, #10]
    7e8c:	0424      	lsls	r4, r4, #16
    7e8e:	4323      	orrs	r3, r4
    7e90:	7ad4      	ldrb	r4, [r2, #11]
    7e92:	0624      	lsls	r4, r4, #24
    7e94:	431c      	orrs	r4, r3
    7e96:	2300      	movs	r3, #0
    7e98:	2503      	movs	r5, #3
    7e9a:	e004      	b.n	7ea6 <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    7e9c:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    7e9e:	3301      	adds	r3, #1
    7ea0:	b2db      	uxtb	r3, r3
    7ea2:	4283      	cmp	r3, r0
    7ea4:	da09      	bge.n	7eba <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    7ea6:	2900      	cmp	r1, #0
    7ea8:	d0f8      	beq.n	7e9c <ValidateChannelMaskT2+0x2c>
    7eaa:	005a      	lsls	r2, r3, #1
    7eac:	18d2      	adds	r2, r2, r3
    7eae:	0092      	lsls	r2, r2, #2
    7eb0:	18a2      	adds	r2, r4, r2
    7eb2:	7ad2      	ldrb	r2, [r2, #11]
    7eb4:	402a      	ands	r2, r5
    7eb6:	2a03      	cmp	r2, #3
    7eb8:	d0f0      	beq.n	7e9c <ValidateChannelMaskT2+0x2c>
	else
	{
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
}
    7eba:	2008      	movs	r0, #8
    7ebc:	bd30      	pop	{r4, r5, pc}
    7ebe:	46c0      	nop			; (mov r8, r8)
    7ec0:	20001404 	.word	0x20001404

00007ec4 <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    7ec4:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7ec6:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    7ec8:	2b00      	cmp	r3, #0
    7eca:	d002      	beq.n	7ed2 <ValidateChannelMaskCntlT2+0xe>
    7ecc:	2b06      	cmp	r3, #6
    7ece:	d001      	beq.n	7ed4 <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    7ed0:	3002      	adds	r0, #2
    }
	return result;
}
    7ed2:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7ed4:	2008      	movs	r0, #8
    7ed6:	e7fc      	b.n	7ed2 <ValidateChannelMaskCntlT2+0xe>

00007ed8 <ValidateChMaskChCntlT2>:
{
    7ed8:	b510      	push	{r4, lr}
    7eda:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    7edc:	ac01      	add	r4, sp, #4
    7ede:	2204      	movs	r2, #4
    7ee0:	0020      	movs	r0, r4
    7ee2:	4b0f      	ldr	r3, [pc, #60]	; (7f20 <ValidateChMaskChCntlT2+0x48>)
    7ee4:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    7ee6:	8863      	ldrh	r3, [r4, #2]
    7ee8:	2b00      	cmp	r3, #0
    7eea:	d104      	bne.n	7ef6 <ValidateChMaskChCntlT2+0x1e>
    7eec:	ab01      	add	r3, sp, #4
    7eee:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    7ef0:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    7ef2:	2a00      	cmp	r2, #0
    7ef4:	d007      	beq.n	7f06 <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    7ef6:	466b      	mov	r3, sp
    7ef8:	1d99      	adds	r1, r3, #6
    7efa:	201a      	movs	r0, #26
    7efc:	4b09      	ldr	r3, [pc, #36]	; (7f24 <ValidateChMaskChCntlT2+0x4c>)
    7efe:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    7f00:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    7f02:	2808      	cmp	r0, #8
    7f04:	d002      	beq.n	7f0c <ValidateChMaskChCntlT2+0x34>
}
    7f06:	0018      	movs	r0, r3
    7f08:	b002      	add	sp, #8
    7f0a:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    7f0c:	a901      	add	r1, sp, #4
    7f0e:	3013      	adds	r0, #19
    7f10:	4b05      	ldr	r3, [pc, #20]	; (7f28 <ValidateChMaskChCntlT2+0x50>)
    7f12:	4798      	blx	r3
    7f14:	0003      	movs	r3, r0
    7f16:	2808      	cmp	r0, #8
    7f18:	d0f5      	beq.n	7f06 <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    7f1a:	230a      	movs	r3, #10
    7f1c:	e7f3      	b.n	7f06 <ValidateChMaskChCntlT2+0x2e>
    7f1e:	46c0      	nop			; (mov r8, r8)
    7f20:	00018195 	.word	0x00018195
    7f24:	00007e71 	.word	0x00007e71
    7f28:	00007ec5 	.word	0x00007ec5

00007f2c <ValidateDataRate>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

    if ( dataRate > RegParams.minDataRate )
    7f2c:	780a      	ldrb	r2, [r1, #0]
    7f2e:	4b03      	ldr	r3, [pc, #12]	; (7f3c <ValidateDataRate+0x10>)
    7f30:	7f1b      	ldrb	r3, [r3, #28]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    7f32:	2008      	movs	r0, #8
    if ( dataRate > RegParams.minDataRate )
    7f34:	429a      	cmp	r2, r3
    7f36:	d900      	bls.n	7f3a <ValidateDataRate+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    7f38:	3002      	adds	r0, #2
    }

    return result;
}
    7f3a:	4770      	bx	lr
    7f3c:	20001404 	.word	0x20001404

00007f40 <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    7f40:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    7f42:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    7f44:	2322      	movs	r3, #34	; 0x22
    7f46:	4a14      	ldr	r2, [pc, #80]	; (7f98 <ValidateSupportedDr+0x58>)
    7f48:	56d4      	ldrsb	r4, [r2, r3]
    7f4a:	2c00      	cmp	r4, #0
    7f4c:	dd22      	ble.n	7f94 <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    7f4e:	7910      	ldrb	r0, [r2, #4]
    7f50:	7953      	ldrb	r3, [r2, #5]
    7f52:	021b      	lsls	r3, r3, #8
    7f54:	4303      	orrs	r3, r0
    7f56:	7990      	ldrb	r0, [r2, #6]
    7f58:	0400      	lsls	r0, r0, #16
    7f5a:	4303      	orrs	r3, r0
    7f5c:	79d0      	ldrb	r0, [r2, #7]
    7f5e:	0600      	lsls	r0, r0, #24
    7f60:	4318      	orrs	r0, r3
    7f62:	2300      	movs	r3, #0
    7f64:	002e      	movs	r6, r5
    7f66:	e003      	b.n	7f70 <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    7f68:	3301      	adds	r3, #1
    7f6a:	b2db      	uxtb	r3, r3
    7f6c:	42a3      	cmp	r3, r4
    7f6e:	da0f      	bge.n	7f90 <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    7f70:	005a      	lsls	r2, r3, #1
    7f72:	1882      	adds	r2, r0, r2
    7f74:	7811      	ldrb	r1, [r2, #0]
    7f76:	2900      	cmp	r1, #0
    7f78:	d0f6      	beq.n	7f68 <ValidateSupportedDr+0x28>
    7f7a:	7851      	ldrb	r1, [r2, #1]
    7f7c:	0709      	lsls	r1, r1, #28
    7f7e:	0f09      	lsrs	r1, r1, #28
    7f80:	428d      	cmp	r5, r1
    7f82:	dbf1      	blt.n	7f68 <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    7f84:	7852      	ldrb	r2, [r2, #1]
    7f86:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    7f88:	4296      	cmp	r6, r2
    7f8a:	dced      	bgt.n	7f68 <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    7f8c:	2008      	movs	r0, #8
    7f8e:	e000      	b.n	7f92 <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    7f90:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    7f92:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    7f94:	200a      	movs	r0, #10
    7f96:	e7fc      	b.n	7f92 <ValidateSupportedDr+0x52>
    7f98:	20001404 	.word	0x20001404

00007f9c <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    7f9c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    7f9e:	6808      	ldr	r0, [r1, #0]
    7fa0:	4b07      	ldr	r3, [pc, #28]	; (7fc0 <ValidateRxFreqT1+0x24>)
    7fa2:	469c      	mov	ip, r3
    7fa4:	4460      	add	r0, ip
    7fa6:	4a07      	ldr	r2, [pc, #28]	; (7fc4 <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    7fa8:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    7faa:	4290      	cmp	r0, r2
    7fac:	d806      	bhi.n	7fbc <ValidateRxFreqT1+0x20>
    7fae:	4906      	ldr	r1, [pc, #24]	; (7fc8 <ValidateRxFreqT1+0x2c>)
    7fb0:	4b06      	ldr	r3, [pc, #24]	; (7fcc <ValidateRxFreqT1+0x30>)
    7fb2:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7fb4:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    7fb6:	2900      	cmp	r1, #0
    7fb8:	d000      	beq.n	7fbc <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    7fba:	3302      	adds	r3, #2
	}
	return result;
}
    7fbc:	0018      	movs	r0, r3
    7fbe:	bd10      	pop	{r4, pc}
    7fc0:	c8f78f60 	.word	0xc8f78f60
    7fc4:	00401640 	.word	0x00401640
    7fc8:	000927c0 	.word	0x000927c0
    7fcc:	00014c7d 	.word	0x00014c7d

00007fd0 <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    7fd0:	780a      	ldrb	r2, [r1, #0]
    7fd2:	2324      	movs	r3, #36	; 0x24
    7fd4:	4903      	ldr	r1, [pc, #12]	; (7fe4 <ValidateRx1DataRateOffset+0x14>)
    7fd6:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    7fd8:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    7fda:	429a      	cmp	r2, r3
    7fdc:	dc00      	bgt.n	7fe0 <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    7fde:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    7fe0:	4770      	bx	lr
    7fe2:	46c0      	nop			; (mov r8, r8)
    7fe4:	20001404 	.word	0x20001404

00007fe8 <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    7fe8:	b530      	push	{r4, r5, lr}
    7fea:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    7fec:	2321      	movs	r3, #33	; 0x21
    7fee:	4a19      	ldr	r2, [pc, #100]	; (8054 <getSubBandId+0x6c>)
    7ff0:	5cd5      	ldrb	r5, [r2, r3]
    7ff2:	2d00      	cmp	r5, #0
    7ff4:	d02c      	beq.n	8050 <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    7ff6:	0011      	movs	r1, r2
    7ff8:	7b13      	ldrb	r3, [r2, #12]
    7ffa:	7b52      	ldrb	r2, [r2, #13]
    7ffc:	0212      	lsls	r2, r2, #8
    7ffe:	431a      	orrs	r2, r3
    8000:	7b8b      	ldrb	r3, [r1, #14]
    8002:	041b      	lsls	r3, r3, #16
    8004:	431a      	orrs	r2, r3
    8006:	7bcb      	ldrb	r3, [r1, #15]
    8008:	061b      	lsls	r3, r3, #24
    800a:	4313      	orrs	r3, r2
    800c:	2000      	movs	r0, #0
    800e:	e004      	b.n	801a <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    8010:	3001      	adds	r0, #1
    8012:	b2c0      	uxtb	r0, r0
    8014:	330c      	adds	r3, #12
    8016:	42a8      	cmp	r0, r5
    8018:	d018      	beq.n	804c <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    801a:	781a      	ldrb	r2, [r3, #0]
    801c:	7859      	ldrb	r1, [r3, #1]
    801e:	0209      	lsls	r1, r1, #8
    8020:	4311      	orrs	r1, r2
    8022:	789a      	ldrb	r2, [r3, #2]
    8024:	0412      	lsls	r2, r2, #16
    8026:	4311      	orrs	r1, r2
    8028:	78da      	ldrb	r2, [r3, #3]
    802a:	0612      	lsls	r2, r2, #24
    802c:	430a      	orrs	r2, r1
    802e:	42a2      	cmp	r2, r4
    8030:	d8ee      	bhi.n	8010 <getSubBandId+0x28>
    8032:	791a      	ldrb	r2, [r3, #4]
    8034:	7959      	ldrb	r1, [r3, #5]
    8036:	0209      	lsls	r1, r1, #8
    8038:	4311      	orrs	r1, r2
    803a:	799a      	ldrb	r2, [r3, #6]
    803c:	0412      	lsls	r2, r2, #16
    803e:	4311      	orrs	r1, r2
    8040:	79da      	ldrb	r2, [r3, #7]
    8042:	0612      	lsls	r2, r2, #24
    8044:	430a      	orrs	r2, r1
    8046:	4294      	cmp	r4, r2
    8048:	d8e2      	bhi.n	8010 <getSubBandId+0x28>
    804a:	e000      	b.n	804e <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    804c:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    804e:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    8050:	20ff      	movs	r0, #255	; 0xff
    8052:	e7fc      	b.n	804e <getSubBandId+0x66>
    8054:	20001404 	.word	0x20001404

00008058 <ValidateFreq>:
{
    8058:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    805a:	6808      	ldr	r0, [r1, #0]
    805c:	4b04      	ldr	r3, [pc, #16]	; (8070 <ValidateFreq+0x18>)
    805e:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    8060:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    8062:	28ff      	cmp	r0, #255	; 0xff
    8064:	d001      	beq.n	806a <ValidateFreq+0x12>
}
    8066:	0018      	movs	r0, r3
    8068:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    806a:	3302      	adds	r3, #2
    806c:	e7fb      	b.n	8066 <ValidateFreq+0xe>
    806e:	46c0      	nop			; (mov r8, r8)
    8070:	00007fe9 	.word	0x00007fe9

00008074 <ValidateFrequencyAS>:
 */
#if(AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    8074:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    8076:	2226      	movs	r2, #38	; 0x26
    8078:	4919      	ldr	r1, [pc, #100]	; (80e0 <ValidateFrequencyAS+0x6c>)
    807a:	5c8a      	ldrb	r2, [r1, r2]
    807c:	1f91      	subs	r1, r2, #6
    807e:	2903      	cmp	r1, #3
    8080:	d808      	bhi.n	8094 <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    8082:	4a18      	ldr	r2, [pc, #96]	; (80e4 <ValidateFrequencyAS+0x70>)
    8084:	4694      	mov	ip, r2
    8086:	4463      	add	r3, ip
    8088:	4a17      	ldr	r2, [pc, #92]	; (80e8 <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    808a:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    808c:	4293      	cmp	r3, r2
    808e:	d900      	bls.n	8092 <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    8090:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    8092:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    8094:	2a0a      	cmp	r2, #10
    8096:	d011      	beq.n	80bc <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    8098:	2a0b      	cmp	r2, #11
    809a:	d018      	beq.n	80ce <ValidateFrequencyAS+0x5a>
    809c:	0011      	movs	r1, r2
    809e:	390d      	subs	r1, #13
    80a0:	2901      	cmp	r1, #1
    80a2:	d914      	bls.n	80ce <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    80a4:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    80a6:	2a0c      	cmp	r2, #12
    80a8:	d1f3      	bne.n	8092 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    80aa:	4a10      	ldr	r2, [pc, #64]	; (80ec <ValidateFrequencyAS+0x78>)
    80ac:	4694      	mov	ip, r2
    80ae:	4463      	add	r3, ip
    80b0:	4a0f      	ldr	r2, [pc, #60]	; (80f0 <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    80b2:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    80b4:	4293      	cmp	r3, r2
    80b6:	d9ec      	bls.n	8092 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    80b8:	3002      	adds	r0, #2
    80ba:	e7ea      	b.n	8092 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    80bc:	4a0d      	ldr	r2, [pc, #52]	; (80f4 <ValidateFrequencyAS+0x80>)
    80be:	4694      	mov	ip, r2
    80c0:	4463      	add	r3, ip
    80c2:	4a0d      	ldr	r2, [pc, #52]	; (80f8 <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    80c4:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    80c6:	4293      	cmp	r3, r2
    80c8:	d9e3      	bls.n	8092 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    80ca:	3002      	adds	r0, #2
    80cc:	e7e1      	b.n	8092 <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    80ce:	4a0b      	ldr	r2, [pc, #44]	; (80fc <ValidateFrequencyAS+0x88>)
    80d0:	4694      	mov	ip, r2
    80d2:	4463      	add	r3, ip
    80d4:	4a0a      	ldr	r2, [pc, #40]	; (8100 <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    80d6:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    80d8:	4293      	cmp	r3, r2
    80da:	d9da      	bls.n	8092 <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    80dc:	3002      	adds	r0, #2
    80de:	e7d8      	b.n	8092 <ValidateFrequencyAS+0x1e>
    80e0:	20001404 	.word	0x20001404
    80e4:	c8fc2340 	.word	0xc8fc2340
    80e8:	001e8480 	.word	0x001e8480
    80ec:	c90b6580 	.word	0xc90b6580
    80f0:	005b8d80 	.word	0x005b8d80
    80f4:	c9763540 	.word	0xc9763540
    80f8:	00c65d40 	.word	0x00c65d40
    80fc:	c929ea00 	.word	0xc929ea00
    8100:	004c4b40 	.word	0x004c4b40

00008104 <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    8104:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    8106:	780d      	ldrb	r5, [r1, #0]
    8108:	7849      	ldrb	r1, [r1, #1]
    810a:	084a      	lsrs	r2, r1, #1
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    810c:	4809      	ldr	r0, [pc, #36]	; (8134 <setTxParams+0x30>)
    810e:	24ac      	movs	r4, #172	; 0xac
    8110:	34ff      	adds	r4, #255	; 0xff
    8112:	2601      	movs	r6, #1
    8114:	4031      	ands	r1, r6
    8116:	5d03      	ldrb	r3, [r0, r4]
    8118:	2701      	movs	r7, #1
    811a:	43bb      	bics	r3, r7
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    811c:	4032      	ands	r2, r6
    811e:	0052      	lsls	r2, r2, #1
    8120:	430b      	orrs	r3, r1
    8122:	2102      	movs	r1, #2
    8124:	438b      	bics	r3, r1
    8126:	4313      	orrs	r3, r2
    8128:	5503      	strb	r3, [r0, r4]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    812a:	2320      	movs	r3, #32
    812c:	54c5      	strb	r5, [r0, r3]
	
	return LORAWAN_SUCCESS;
}
    812e:	2008      	movs	r0, #8
    8130:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8132:	46c0      	nop			; (mov r8, r8)
    8134:	20001404 	.word	0x20001404

00008138 <SearchAvailableChannel1>:
{
    8138:	b5f0      	push	{r4, r5, r6, r7, lr}
    813a:	46de      	mov	lr, fp
    813c:	464f      	mov	r7, r9
    813e:	4646      	mov	r6, r8
    8140:	b5c0      	push	{r6, r7, lr}
    8142:	b082      	sub	sp, #8
    8144:	9001      	str	r0, [sp, #4]
    8146:	0015      	movs	r5, r2
    8148:	4698      	mov	r8, r3
	uint8_t startingIndex = 0;
    814a:	2300      	movs	r3, #0
    814c:	4699      	mov	r9, r3
	if (maxChannels == 8)
    814e:	0003      	movs	r3, r0
    8150:	2808      	cmp	r0, #8
    8152:	d01d      	beq.n	8190 <SearchAvailableChannel1+0x58>
	randomNumber =  (rand () % maxChannels) + 1; //this is a guard so that randomNumber is not 0 and the search will happen
    8154:	4b2d      	ldr	r3, [pc, #180]	; (820c <SearchAvailableChannel1+0xd4>)
    8156:	4798      	blx	r3
    8158:	9901      	ldr	r1, [sp, #4]
    815a:	000f      	movs	r7, r1
    815c:	4b2c      	ldr	r3, [pc, #176]	; (8210 <SearchAvailableChannel1+0xd8>)
    815e:	4798      	blx	r3
    8160:	3101      	adds	r1, #1
    8162:	b2cb      	uxtb	r3, r1
    8164:	469b      	mov	fp, r3
	while (randomNumber)
    8166:	2b00      	cmp	r3, #0
    8168:	d04e      	beq.n	8208 <SearchAvailableChannel1+0xd0>
			if ( (currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && 
    816a:	492a      	ldr	r1, [pc, #168]	; (8214 <SearchAvailableChannel1+0xdc>)
    816c:	790a      	ldrb	r2, [r1, #4]
    816e:	794b      	ldrb	r3, [r1, #5]
    8170:	021b      	lsls	r3, r3, #8
    8172:	431a      	orrs	r2, r3
    8174:	798b      	ldrb	r3, [r1, #6]
    8176:	041b      	lsls	r3, r3, #16
    8178:	4313      	orrs	r3, r2
    817a:	79ca      	ldrb	r2, [r1, #7]
    817c:	0612      	lsls	r2, r2, #24
    817e:	431a      	orrs	r2, r3
    8180:	0016      	movs	r6, r2
    8182:	465c      	mov	r4, fp
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    8184:	0038      	movs	r0, r7
    8186:	4448      	add	r0, r9
    8188:	464b      	mov	r3, r9
    818a:	9300      	str	r3, [sp, #0]
			if ( (currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && 
    818c:	002f      	movs	r7, r5
    818e:	e021      	b.n	81d4 <SearchAvailableChannel1+0x9c>
		startingIndex = RegParams.cmnParams.paramsType1.Max_125khzChan;
    8190:	3335      	adds	r3, #53	; 0x35
    8192:	33ff      	adds	r3, #255	; 0xff
    8194:	4a1f      	ldr	r2, [pc, #124]	; (8214 <SearchAvailableChannel1+0xdc>)
    8196:	5cd3      	ldrb	r3, [r2, r3]
    8198:	4699      	mov	r9, r3
    819a:	e7db      	b.n	8154 <SearchAvailableChannel1+0x1c>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    819c:	3301      	adds	r3, #1
    819e:	b2db      	uxtb	r3, r3
    81a0:	4283      	cmp	r3, r0
    81a2:	da13      	bge.n	81cc <SearchAvailableChannel1+0x94>
    81a4:	2c00      	cmp	r4, #0
    81a6:	d01c      	beq.n	81e2 <SearchAvailableChannel1+0xaa>
			if ( (currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && 
    81a8:	0059      	lsls	r1, r3, #1
    81aa:	1871      	adds	r1, r6, r1
    81ac:	784a      	ldrb	r2, [r1, #1]
    81ae:	0712      	lsls	r2, r2, #28
    81b0:	0f12      	lsrs	r2, r2, #28
    81b2:	4295      	cmp	r5, r2
    81b4:	dbf2      	blt.n	819c <SearchAvailableChannel1+0x64>
    81b6:	784a      	ldrb	r2, [r1, #1]
    81b8:	0912      	lsrs	r2, r2, #4
    81ba:	4297      	cmp	r7, r2
    81bc:	dcee      	bgt.n	819c <SearchAvailableChannel1+0x64>
    81be:	780a      	ldrb	r2, [r1, #0]
    81c0:	2a00      	cmp	r2, #0
    81c2:	d0eb      	beq.n	819c <SearchAvailableChannel1+0x64>
				randomNumber --;
    81c4:	3c01      	subs	r4, #1
    81c6:	b2e4      	uxtb	r4, r4
    81c8:	e7e8      	b.n	819c <SearchAvailableChannel1+0x64>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    81ca:	9b00      	ldr	r3, [sp, #0]
		if ( randomNumber == randomNumberCopy )
    81cc:	45a3      	cmp	fp, r4
    81ce:	d00a      	beq.n	81e6 <SearchAvailableChannel1+0xae>
	while (randomNumber)
    81d0:	2c00      	cmp	r4, #0
    81d2:	d006      	beq.n	81e2 <SearchAvailableChannel1+0xaa>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    81d4:	4581      	cmp	r9, r0
    81d6:	daf8      	bge.n	81ca <SearchAvailableChannel1+0x92>
    81d8:	2c00      	cmp	r4, #0
    81da:	d001      	beq.n	81e0 <SearchAvailableChannel1+0xa8>
    81dc:	9b00      	ldr	r3, [sp, #0]
    81de:	e7e3      	b.n	81a8 <SearchAvailableChannel1+0x70>
    81e0:	464b      	mov	r3, r9
	StackRetStatus_t result = LORAWAN_SUCCESS;
    81e2:	2008      	movs	r0, #8
    81e4:	e000      	b.n	81e8 <SearchAvailableChannel1+0xb0>
			result = LORAWAN_NO_CHANNELS_FOUND;
    81e6:	2010      	movs	r0, #16
	if (i != 0)
    81e8:	2b00      	cmp	r3, #0
    81ea:	d109      	bne.n	8200 <SearchAvailableChannel1+0xc8>
		*channelIndex = maxChannels - 1;
    81ec:	9c01      	ldr	r4, [sp, #4]
    81ee:	3c01      	subs	r4, #1
    81f0:	4643      	mov	r3, r8
    81f2:	701c      	strb	r4, [r3, #0]
}
    81f4:	b002      	add	sp, #8
    81f6:	bc1c      	pop	{r2, r3, r4}
    81f8:	4690      	mov	r8, r2
    81fa:	4699      	mov	r9, r3
    81fc:	46a3      	mov	fp, r4
    81fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*channelIndex = i - 1;
    8200:	3b01      	subs	r3, #1
    8202:	4642      	mov	r2, r8
    8204:	7013      	strb	r3, [r2, #0]
    8206:	e7f5      	b.n	81f4 <SearchAvailableChannel1+0xbc>
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8208:	2008      	movs	r0, #8
    820a:	e7ef      	b.n	81ec <SearchAvailableChannel1+0xb4>
    820c:	000183cd 	.word	0x000183cd
    8210:	00014e51 	.word	0x00014e51
    8214:	20001404 	.word	0x20001404

00008218 <LORAREG_GetAttr_FreeChannel1>:
{
    8218:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    821a:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    821c:	2022      	movs	r0, #34	; 0x22
    821e:	4d07      	ldr	r5, [pc, #28]	; (823c <LORAREG_GetAttr_FreeChannel1+0x24>)
    8220:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    8222:	3818      	subs	r0, #24
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    8224:	42ac      	cmp	r4, r5
    8226:	dd00      	ble.n	822a <LORAREG_GetAttr_FreeChannel1+0x12>
}
    8228:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    822a:	7888      	ldrb	r0, [r1, #2]
    822c:	7809      	ldrb	r1, [r1, #0]
    822e:	0013      	movs	r3, r2
    8230:	0002      	movs	r2, r0
    8232:	0020      	movs	r0, r4
    8234:	4c02      	ldr	r4, [pc, #8]	; (8240 <LORAREG_GetAttr_FreeChannel1+0x28>)
    8236:	47a0      	blx	r4
	return result;
    8238:	e7f6      	b.n	8228 <LORAREG_GetAttr_FreeChannel1+0x10>
    823a:	46c0      	nop			; (mov r8, r8)
    823c:	20001404 	.word	0x20001404
    8240:	00008139 	.word	0x00008139

00008244 <SearchAvailableChannel2>:
{
    8244:	b5f0      	push	{r4, r5, r6, r7, lr}
    8246:	46de      	mov	lr, fp
    8248:	4657      	mov	r7, sl
    824a:	464e      	mov	r6, r9
    824c:	4645      	mov	r5, r8
    824e:	b5e0      	push	{r5, r6, r7, lr}
    8250:	b087      	sub	sp, #28
    8252:	9003      	str	r0, [sp, #12]
    8254:	9102      	str	r1, [sp, #8]
    8256:	0015      	movs	r5, r2
    8258:	9304      	str	r3, [sp, #16]
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    825a:	4958      	ldr	r1, [pc, #352]	; (83bc <SearchAvailableChannel2+0x178>)
    825c:	23d1      	movs	r3, #209	; 0xd1
    825e:	005b      	lsls	r3, r3, #1
    8260:	5ccb      	ldrb	r3, [r1, r3]
    8262:	22a4      	movs	r2, #164	; 0xa4
    8264:	32ff      	adds	r2, #255	; 0xff
    8266:	5c8a      	ldrb	r2, [r1, r2]
    8268:	0212      	lsls	r2, r2, #8
    826a:	431a      	orrs	r2, r3
    826c:	23d2      	movs	r3, #210	; 0xd2
    826e:	005b      	lsls	r3, r3, #1
    8270:	5ccb      	ldrb	r3, [r1, r3]
    8272:	041b      	lsls	r3, r3, #16
    8274:	431a      	orrs	r2, r3
    8276:	23a6      	movs	r3, #166	; 0xa6
    8278:	33ff      	adds	r3, #255	; 0xff
    827a:	5ccb      	ldrb	r3, [r1, r3]
    827c:	061b      	lsls	r3, r3, #24
    827e:	4313      	orrs	r3, r2
		return LORAWAN_NO_CHANNELS_FOUND;
    8280:	2010      	movs	r0, #16
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    8282:	2b00      	cmp	r3, #0
    8284:	d006      	beq.n	8294 <SearchAvailableChannel2+0x50>
}
    8286:	b007      	add	sp, #28
    8288:	bc3c      	pop	{r2, r3, r4, r5}
    828a:	4690      	mov	r8, r2
    828c:	4699      	mov	r9, r3
    828e:	46a2      	mov	sl, r4
    8290:	46ab      	mov	fp, r5
    8292:	bdf0      	pop	{r4, r5, r6, r7, pc}
	randomNumber = (rand () % maxChannels) + 1; //this is a guard so that randomNumber is not 0 and the search will happen
    8294:	4b4a      	ldr	r3, [pc, #296]	; (83c0 <SearchAvailableChannel2+0x17c>)
    8296:	4798      	blx	r3
    8298:	9903      	ldr	r1, [sp, #12]
    829a:	000c      	movs	r4, r1
    829c:	4b49      	ldr	r3, [pc, #292]	; (83c4 <SearchAvailableChannel2+0x180>)
    829e:	4798      	blx	r3
    82a0:	3101      	adds	r1, #1
    82a2:	b2cb      	uxtb	r3, r1
    82a4:	1e18      	subs	r0, r3, #0
    82a6:	9305      	str	r3, [sp, #20]
	while (randomNumber)
    82a8:	d100      	bne.n	82ac <SearchAvailableChannel2+0x68>
    82aa:	e085      	b.n	83b8 <SearchAvailableChannel2+0x174>
			if ((currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && \
    82ac:	4b43      	ldr	r3, [pc, #268]	; (83bc <SearchAvailableChannel2+0x178>)
    82ae:	791e      	ldrb	r6, [r3, #4]
    82b0:	795a      	ldrb	r2, [r3, #5]
    82b2:	0212      	lsls	r2, r2, #8
    82b4:	4332      	orrs	r2, r6
    82b6:	799e      	ldrb	r6, [r3, #6]
    82b8:	0436      	lsls	r6, r6, #16
    82ba:	4332      	orrs	r2, r6
    82bc:	79de      	ldrb	r6, [r3, #7]
    82be:	0636      	lsls	r6, r6, #24
    82c0:	4316      	orrs	r6, r2
			bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    82c2:	2226      	movs	r2, #38	; 0x26
    82c4:	5c99      	ldrb	r1, [r3, r2]
    82c6:	4a40      	ldr	r2, [pc, #256]	; (83c8 <SearchAvailableChannel2+0x184>)
    82c8:	410a      	asrs	r2, r1
    82ca:	2101      	movs	r1, #1
    82cc:	4011      	ands	r1, r2
    82ce:	468a      	mov	sl, r1
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    82d0:	7b19      	ldrb	r1, [r3, #12]
    82d2:	7b5a      	ldrb	r2, [r3, #13]
    82d4:	0212      	lsls	r2, r2, #8
    82d6:	4311      	orrs	r1, r2
    82d8:	7b9a      	ldrb	r2, [r3, #14]
    82da:	0412      	lsls	r2, r2, #16
    82dc:	430a      	orrs	r2, r1
    82de:	7bd9      	ldrb	r1, [r3, #15]
    82e0:	0609      	lsls	r1, r1, #24
    82e2:	4311      	orrs	r1, r2
    82e4:	4689      	mov	r9, r1
    82e6:	7a19      	ldrb	r1, [r3, #8]
    82e8:	7a5a      	ldrb	r2, [r3, #9]
    82ea:	0212      	lsls	r2, r2, #8
    82ec:	4311      	orrs	r1, r2
    82ee:	7a9a      	ldrb	r2, [r3, #10]
    82f0:	0412      	lsls	r2, r2, #16
    82f2:	430a      	orrs	r2, r1
    82f4:	7adb      	ldrb	r3, [r3, #11]
    82f6:	061b      	lsls	r3, r3, #24
    82f8:	4313      	orrs	r3, r2
    82fa:	469b      	mov	fp, r3
    82fc:	0001      	movs	r1, r0
    82fe:	46a8      	mov	r8, r5
    8300:	e045      	b.n	838e <SearchAvailableChannel2+0x14a>
				    randomNumber --;					
    8302:	3901      	subs	r1, #1
    8304:	b2c9      	uxtb	r1, r1
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    8306:	3301      	adds	r3, #1
    8308:	b2db      	uxtb	r3, r3
    830a:	429c      	cmp	r4, r3
    830c:	dd3a      	ble.n	8384 <SearchAvailableChannel2+0x140>
    830e:	2900      	cmp	r1, #0
    8310:	d044      	beq.n	839c <SearchAvailableChannel2+0x158>
			if ((currDr >= RegParams.pChParams[i].dataRange.min) && (currDr <= RegParams.pChParams[i].dataRange.max) && \
    8312:	001f      	movs	r7, r3
    8314:	0058      	lsls	r0, r3, #1
    8316:	1830      	adds	r0, r6, r0
    8318:	7842      	ldrb	r2, [r0, #1]
    831a:	0712      	lsls	r2, r2, #28
    831c:	0f12      	lsrs	r2, r2, #28
    831e:	4295      	cmp	r5, r2
    8320:	dbf1      	blt.n	8306 <SearchAvailableChannel2+0xc2>
    8322:	7842      	ldrb	r2, [r0, #1]
    8324:	0912      	lsrs	r2, r2, #4
    8326:	4590      	cmp	r8, r2
    8328:	dced      	bgt.n	8306 <SearchAvailableChannel2+0xc2>
    832a:	7802      	ldrb	r2, [r0, #0]
    832c:	2a00      	cmp	r2, #0
    832e:	d0ea      	beq.n	8306 <SearchAvailableChannel2+0xc2>
				(RegParams.pChParams[i].status == ENABLED) && \
    8330:	4652      	mov	r2, sl
    8332:	2a00      	cmp	r2, #0
    8334:	d018      	beq.n	8368 <SearchAvailableChannel2+0x124>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    8336:	005a      	lsls	r2, r3, #1
    8338:	18d2      	adds	r2, r2, r3
    833a:	0092      	lsls	r2, r2, #2
    833c:	445a      	add	r2, fp
    833e:	7a10      	ldrb	r0, [r2, #8]
    8340:	0042      	lsls	r2, r0, #1
    8342:	1812      	adds	r2, r2, r0
    8344:	0092      	lsls	r2, r2, #2
    8346:	444a      	add	r2, r9
    8348:	7a10      	ldrb	r0, [r2, #8]
    834a:	4684      	mov	ip, r0
    834c:	9201      	str	r2, [sp, #4]
    834e:	7a50      	ldrb	r0, [r2, #9]
    8350:	0200      	lsls	r0, r0, #8
    8352:	4662      	mov	r2, ip
    8354:	4310      	orrs	r0, r2
    8356:	9a01      	ldr	r2, [sp, #4]
    8358:	7a92      	ldrb	r2, [r2, #10]
    835a:	0412      	lsls	r2, r2, #16
    835c:	4310      	orrs	r0, r2
    835e:	9a01      	ldr	r2, [sp, #4]
    8360:	7ad2      	ldrb	r2, [r2, #11]
    8362:	0612      	lsls	r2, r2, #24
    8364:	4302      	orrs	r2, r0
    8366:	d1ce      	bne.n	8306 <SearchAvailableChannel2+0xc2>
				if(transmissionType == 0  && RegParams.pOtherChParams[i].joinRequestChannel == 1)
    8368:	9a02      	ldr	r2, [sp, #8]
    836a:	2a00      	cmp	r2, #0
    836c:	d1c9      	bne.n	8302 <SearchAvailableChannel2+0xbe>
    836e:	007a      	lsls	r2, r7, #1
    8370:	19d7      	adds	r7, r2, r7
    8372:	00bf      	lsls	r7, r7, #2
    8374:	445f      	add	r7, fp
    8376:	7a7a      	ldrb	r2, [r7, #9]
    8378:	2a00      	cmp	r2, #0
    837a:	d0c4      	beq.n	8306 <SearchAvailableChannel2+0xc2>
					randomNumber --;
    837c:	3901      	subs	r1, #1
    837e:	b2c9      	uxtb	r1, r1
    8380:	e7c1      	b.n	8306 <SearchAvailableChannel2+0xc2>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    8382:	2300      	movs	r3, #0
		if ( randomNumber == randomNumberCopy )
    8384:	9a05      	ldr	r2, [sp, #20]
    8386:	428a      	cmp	r2, r1
    8388:	d00a      	beq.n	83a0 <SearchAvailableChannel2+0x15c>
	while (randomNumber)
    838a:	2900      	cmp	r1, #0
    838c:	d006      	beq.n	839c <SearchAvailableChannel2+0x158>
		for (i = startingIndex; (i < (startingIndex + maxChannels)) && (randomNumber != 0) ; i++)
    838e:	2c00      	cmp	r4, #0
    8390:	ddf7      	ble.n	8382 <SearchAvailableChannel2+0x13e>
    8392:	2900      	cmp	r1, #0
    8394:	d001      	beq.n	839a <SearchAvailableChannel2+0x156>
    8396:	2300      	movs	r3, #0
    8398:	e7bb      	b.n	8312 <SearchAvailableChannel2+0xce>
    839a:	000b      	movs	r3, r1
	StackRetStatus_t result = LORAWAN_SUCCESS;
    839c:	2008      	movs	r0, #8
    839e:	e000      	b.n	83a2 <SearchAvailableChannel2+0x15e>
			result = LORAWAN_NO_CHANNELS_FOUND;
    83a0:	2010      	movs	r0, #16
	if (i != 0)
    83a2:	2b00      	cmp	r3, #0
    83a4:	d104      	bne.n	83b0 <SearchAvailableChannel2+0x16c>
		*channelIndex = maxChannels - 1;
    83a6:	9b03      	ldr	r3, [sp, #12]
    83a8:	3b01      	subs	r3, #1
    83aa:	9a04      	ldr	r2, [sp, #16]
    83ac:	7013      	strb	r3, [r2, #0]
    83ae:	e76a      	b.n	8286 <SearchAvailableChannel2+0x42>
		*channelIndex = i - 1;
    83b0:	3b01      	subs	r3, #1
    83b2:	9a04      	ldr	r2, [sp, #16]
    83b4:	7013      	strb	r3, [r2, #0]
    83b6:	e766      	b.n	8286 <SearchAvailableChannel2+0x42>
	StackRetStatus_t result = LORAWAN_SUCCESS;
    83b8:	2008      	movs	r0, #8
    83ba:	e7f4      	b.n	83a6 <SearchAvailableChannel2+0x162>
    83bc:	20001404 	.word	0x20001404
    83c0:	000183cd 	.word	0x000183cd
    83c4:	00014e51 	.word	0x00014e51
    83c8:	00007fe3 	.word	0x00007fe3

000083cc <LORAREG_GetAttr_FreeChannel2>:
{
    83cc:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    83ce:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    83d0:	2022      	movs	r0, #34	; 0x22
    83d2:	4d07      	ldr	r5, [pc, #28]	; (83f0 <LORAREG_GetAttr_FreeChannel2+0x24>)
    83d4:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    83d6:	3818      	subs	r0, #24
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    83d8:	42ac      	cmp	r4, r5
    83da:	dd00      	ble.n	83de <LORAREG_GetAttr_FreeChannel2+0x12>
}
    83dc:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    83de:	7888      	ldrb	r0, [r1, #2]
    83e0:	7809      	ldrb	r1, [r1, #0]
    83e2:	0013      	movs	r3, r2
    83e4:	0002      	movs	r2, r0
    83e6:	0020      	movs	r0, r4
    83e8:	4c02      	ldr	r4, [pc, #8]	; (83f4 <LORAREG_GetAttr_FreeChannel2+0x28>)
    83ea:	47a0      	blx	r4
	return result;
    83ec:	e7f6      	b.n	83dc <LORAREG_GetAttr_FreeChannel2+0x10>
    83ee:	46c0      	nop			; (mov r8, r8)
    83f0:	20001404 	.word	0x20001404
    83f4:	00008245 	.word	0x00008245

000083f8 <UpdateChannelIdStatus>:
{
    83f8:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    83fa:	2322      	movs	r3, #34	; 0x22
    83fc:	4a14      	ldr	r2, [pc, #80]	; (8450 <UpdateChannelIdStatus+0x58>)
    83fe:	56d3      	ldrsb	r3, [r2, r3]
    8400:	4298      	cmp	r0, r3
    8402:	db0b      	blt.n	841c <UpdateChannelIdStatus+0x24>
    8404:	2326      	movs	r3, #38	; 0x26
    8406:	5cd2      	ldrb	r2, [r2, r3]
    8408:	3b1a      	subs	r3, #26
    840a:	4113      	asrs	r3, r2
    840c:	07db      	lsls	r3, r3, #31
    840e:	d41e      	bmi.n	844e <UpdateChannelIdStatus+0x56>
    8410:	23aa      	movs	r3, #170	; 0xaa
    8412:	33ff      	adds	r3, #255	; 0xff
    8414:	4a0e      	ldr	r2, [pc, #56]	; (8450 <UpdateChannelIdStatus+0x58>)
    8416:	5cd3      	ldrb	r3, [r2, r3]
    8418:	4283      	cmp	r3, r0
    841a:	d818      	bhi.n	844e <UpdateChannelIdStatus+0x56>
		RegParams.pChParams[chid].status = statusNew;
    841c:	4b0c      	ldr	r3, [pc, #48]	; (8450 <UpdateChannelIdStatus+0x58>)
    841e:	791a      	ldrb	r2, [r3, #4]
    8420:	795c      	ldrb	r4, [r3, #5]
    8422:	0224      	lsls	r4, r4, #8
    8424:	4314      	orrs	r4, r2
    8426:	799a      	ldrb	r2, [r3, #6]
    8428:	0412      	lsls	r2, r2, #16
    842a:	4314      	orrs	r4, r2
    842c:	79da      	ldrb	r2, [r3, #7]
    842e:	0612      	lsls	r2, r2, #24
    8430:	4322      	orrs	r2, r4
    8432:	0040      	lsls	r0, r0, #1
    8434:	5481      	strb	r1, [r0, r2]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    8436:	22f8      	movs	r2, #248	; 0xf8
    8438:	32ff      	adds	r2, #255	; 0xff
    843a:	5c9a      	ldrb	r2, [r3, r2]
    843c:	21fc      	movs	r1, #252	; 0xfc
    843e:	0049      	lsls	r1, r1, #1
    8440:	5c58      	ldrb	r0, [r3, r1]
    8442:	0200      	lsls	r0, r0, #8
    8444:	4310      	orrs	r0, r2
    8446:	b2c1      	uxtb	r1, r0
    8448:	0a00      	lsrs	r0, r0, #8
    844a:	4b02      	ldr	r3, [pc, #8]	; (8454 <UpdateChannelIdStatus+0x5c>)
    844c:	4798      	blx	r3
}
    844e:	bd10      	pop	{r4, pc}
    8450:	20001404 	.word	0x20001404
    8454:	0000b745 	.word	0x0000b745

00008458 <EnableChannels2>:
{
    8458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    845a:	46ce      	mov	lr, r9
    845c:	4647      	mov	r7, r8
    845e:	b580      	push	{r7, lr}
    8460:	0004      	movs	r4, r0
    8462:	000f      	movs	r7, r1
    8464:	0015      	movs	r5, r2
	for(i = startIndx; i <= endIndx; i++)
    8466:	4288      	cmp	r0, r1
    8468:	d812      	bhi.n	8490 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    846a:	2601      	movs	r6, #1
			UpdateChannelIdStatus(i, ENABLED);
    846c:	4b0a      	ldr	r3, [pc, #40]	; (8498 <EnableChannels2+0x40>)
    846e:	4699      	mov	r9, r3
			UpdateChannelIdStatus(i, DISABLED);
    8470:	4698      	mov	r8, r3
    8472:	e007      	b.n	8484 <EnableChannels2+0x2c>
    8474:	2100      	movs	r1, #0
    8476:	0020      	movs	r0, r4
    8478:	47c0      	blx	r8
		chMask = chMask >> SHIFT1;
    847a:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    847c:	3401      	adds	r4, #1
    847e:	b2e4      	uxtb	r4, r4
    8480:	42a7      	cmp	r7, r4
    8482:	d305      	bcc.n	8490 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    8484:	422e      	tst	r6, r5
    8486:	d0f5      	beq.n	8474 <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    8488:	0031      	movs	r1, r6
    848a:	0020      	movs	r0, r4
    848c:	47c8      	blx	r9
    848e:	e7f4      	b.n	847a <EnableChannels2+0x22>
}
    8490:	bc0c      	pop	{r2, r3}
    8492:	4690      	mov	r8, r2
    8494:	4699      	mov	r9, r3
    8496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8498:	000083f9 	.word	0x000083f9

0000849c <UpdateChannelIdStatusT2>:
{
    849c:	b570      	push	{r4, r5, r6, lr}
    849e:	000c      	movs	r4, r1
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    84a0:	2322      	movs	r3, #34	; 0x22
    84a2:	4a40      	ldr	r2, [pc, #256]	; (85a4 <UpdateChannelIdStatusT2+0x108>)
    84a4:	56d3      	ldrsb	r3, [r2, r3]
    84a6:	4298      	cmp	r0, r3
    84a8:	da17      	bge.n	84da <UpdateChannelIdStatusT2+0x3e>
    84aa:	23aa      	movs	r3, #170	; 0xaa
    84ac:	33ff      	adds	r3, #255	; 0xff
    84ae:	5cd3      	ldrb	r3, [r2, r3]
    84b0:	4283      	cmp	r3, r0
    84b2:	d812      	bhi.n	84da <UpdateChannelIdStatusT2+0x3e>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    84b4:	0045      	lsls	r5, r0, #1
    84b6:	182d      	adds	r5, r5, r0
    84b8:	00ad      	lsls	r5, r5, #2
    84ba:	0011      	movs	r1, r2
    84bc:	7a13      	ldrb	r3, [r2, #8]
    84be:	7a52      	ldrb	r2, [r2, #9]
    84c0:	0212      	lsls	r2, r2, #8
    84c2:	431a      	orrs	r2, r3
    84c4:	7a8b      	ldrb	r3, [r1, #10]
    84c6:	041b      	lsls	r3, r3, #16
    84c8:	431a      	orrs	r2, r3
    84ca:	7acb      	ldrb	r3, [r1, #11]
    84cc:	061b      	lsls	r3, r3, #24
    84ce:	4313      	orrs	r3, r2
    84d0:	195b      	adds	r3, r3, r5
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    84d2:	7adb      	ldrb	r3, [r3, #11]
    84d4:	43db      	mvns	r3, r3
    84d6:	079b      	lsls	r3, r3, #30
    84d8:	d000      	beq.n	84dc <UpdateChannelIdStatusT2+0x40>
}
    84da:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pChParams[chid].status = statusNew;
    84dc:	000e      	movs	r6, r1
    84de:	790b      	ldrb	r3, [r1, #4]
    84e0:	794a      	ldrb	r2, [r1, #5]
    84e2:	0212      	lsls	r2, r2, #8
    84e4:	431a      	orrs	r2, r3
    84e6:	798b      	ldrb	r3, [r1, #6]
    84e8:	041b      	lsls	r3, r3, #16
    84ea:	431a      	orrs	r2, r3
    84ec:	79cb      	ldrb	r3, [r1, #7]
    84ee:	061b      	lsls	r3, r3, #24
    84f0:	4313      	orrs	r3, r2
    84f2:	0040      	lsls	r0, r0, #1
    84f4:	54c4      	strb	r4, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    84f6:	23f8      	movs	r3, #248	; 0xf8
    84f8:	33ff      	adds	r3, #255	; 0xff
    84fa:	5ccb      	ldrb	r3, [r1, r3]
    84fc:	22fc      	movs	r2, #252	; 0xfc
    84fe:	0052      	lsls	r2, r2, #1
    8500:	5c88      	ldrb	r0, [r1, r2]
    8502:	0200      	lsls	r0, r0, #8
    8504:	4318      	orrs	r0, r3
    8506:	b2c1      	uxtb	r1, r0
    8508:	0a00      	lsrs	r0, r0, #8
    850a:	4b27      	ldr	r3, [pc, #156]	; (85a8 <UpdateChannelIdStatusT2+0x10c>)
    850c:	4798      	blx	r3
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    850e:	2326      	movs	r3, #38	; 0x26
    8510:	5cf2      	ldrb	r2, [r6, r3]
    8512:	3b23      	subs	r3, #35	; 0x23
    8514:	4113      	asrs	r3, r2
    8516:	07db      	lsls	r3, r3, #31
    8518:	d5df      	bpl.n	84da <UpdateChannelIdStatusT2+0x3e>
    851a:	2c00      	cmp	r4, #0
    851c:	d1dd      	bne.n	84da <UpdateChannelIdStatusT2+0x3e>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    851e:	4b21      	ldr	r3, [pc, #132]	; (85a4 <UpdateChannelIdStatusT2+0x108>)
    8520:	7a18      	ldrb	r0, [r3, #8]
    8522:	7a5a      	ldrb	r2, [r3, #9]
    8524:	0212      	lsls	r2, r2, #8
    8526:	4302      	orrs	r2, r0
    8528:	7a98      	ldrb	r0, [r3, #10]
    852a:	0400      	lsls	r0, r0, #16
    852c:	4302      	orrs	r2, r0
    852e:	7ad8      	ldrb	r0, [r3, #11]
    8530:	0600      	lsls	r0, r0, #24
    8532:	4310      	orrs	r0, r2
    8534:	1945      	adds	r5, r0, r5
    8536:	7a2d      	ldrb	r5, [r5, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    8538:	2222      	movs	r2, #34	; 0x22
    853a:	569c      	ldrsb	r4, [r3, r2]
    853c:	2c00      	cmp	r4, #0
    853e:	dd1c      	ble.n	857a <UpdateChannelIdStatusT2+0xde>
				if(RegParams.pChParams[i].status == ENABLED &&
    8540:	001a      	movs	r2, r3
    8542:	7919      	ldrb	r1, [r3, #4]
    8544:	795b      	ldrb	r3, [r3, #5]
    8546:	021b      	lsls	r3, r3, #8
    8548:	430b      	orrs	r3, r1
    854a:	7991      	ldrb	r1, [r2, #6]
    854c:	0409      	lsls	r1, r1, #16
    854e:	430b      	orrs	r3, r1
    8550:	79d1      	ldrb	r1, [r2, #7]
    8552:	0609      	lsls	r1, r1, #24
    8554:	4319      	orrs	r1, r3
    8556:	2300      	movs	r3, #0
    8558:	e003      	b.n	8562 <UpdateChannelIdStatusT2+0xc6>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    855a:	3301      	adds	r3, #1
    855c:	b2db      	uxtb	r3, r3
    855e:	42a3      	cmp	r3, r4
    8560:	da0b      	bge.n	857a <UpdateChannelIdStatusT2+0xde>
				if(RegParams.pChParams[i].status == ENABLED &&
    8562:	005a      	lsls	r2, r3, #1
    8564:	5c52      	ldrb	r2, [r2, r1]
    8566:	2a00      	cmp	r2, #0
    8568:	d0f7      	beq.n	855a <UpdateChannelIdStatusT2+0xbe>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    856a:	005a      	lsls	r2, r3, #1
    856c:	18d2      	adds	r2, r2, r3
    856e:	0092      	lsls	r2, r2, #2
    8570:	1882      	adds	r2, r0, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    8572:	7a12      	ldrb	r2, [r2, #8]
    8574:	42aa      	cmp	r2, r5
    8576:	d1f0      	bne.n	855a <UpdateChannelIdStatusT2+0xbe>
    8578:	e7af      	b.n	84da <UpdateChannelIdStatusT2+0x3e>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    857a:	490a      	ldr	r1, [pc, #40]	; (85a4 <UpdateChannelIdStatusT2+0x108>)
    857c:	7b0a      	ldrb	r2, [r1, #12]
    857e:	7b4b      	ldrb	r3, [r1, #13]
    8580:	021b      	lsls	r3, r3, #8
    8582:	4313      	orrs	r3, r2
    8584:	7b8a      	ldrb	r2, [r1, #14]
    8586:	0412      	lsls	r2, r2, #16
    8588:	4313      	orrs	r3, r2
    858a:	7bca      	ldrb	r2, [r1, #15]
    858c:	0612      	lsls	r2, r2, #24
    858e:	431a      	orrs	r2, r3
    8590:	006b      	lsls	r3, r5, #1
    8592:	195d      	adds	r5, r3, r5
    8594:	00ad      	lsls	r5, r5, #2
    8596:	18ad      	adds	r5, r5, r2
    8598:	2300      	movs	r3, #0
    859a:	722b      	strb	r3, [r5, #8]
    859c:	726b      	strb	r3, [r5, #9]
    859e:	72ab      	strb	r3, [r5, #10]
    85a0:	72eb      	strb	r3, [r5, #11]
    85a2:	e79a      	b.n	84da <UpdateChannelIdStatusT2+0x3e>
    85a4:	20001404 	.word	0x20001404
    85a8:	0000b745 	.word	0x0000b745

000085ac <setChannelIdStatusT2>:
{
    85ac:	b570      	push	{r4, r5, r6, lr}
    85ae:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    85b0:	780d      	ldrb	r5, [r1, #0]
    85b2:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    85b4:	a901      	add	r1, sp, #4
    85b6:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    85b8:	2300      	movs	r3, #0
    85ba:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    85bc:	2015      	movs	r0, #21
    85be:	4b0c      	ldr	r3, [pc, #48]	; (85f0 <setChannelIdStatusT2+0x44>)
    85c0:	4798      	blx	r3
    85c2:	0004      	movs	r4, r0
    85c4:	2808      	cmp	r0, #8
    85c6:	d003      	beq.n	85d0 <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    85c8:	240a      	movs	r4, #10
}
    85ca:	0020      	movs	r0, r4
    85cc:	b002      	add	sp, #8
    85ce:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    85d0:	2326      	movs	r3, #38	; 0x26
    85d2:	4a08      	ldr	r2, [pc, #32]	; (85f4 <setChannelIdStatusT2+0x48>)
    85d4:	5cd3      	ldrb	r3, [r2, r3]
    85d6:	2b0f      	cmp	r3, #15
    85d8:	d004      	beq.n	85e4 <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    85da:	0031      	movs	r1, r6
    85dc:	0028      	movs	r0, r5
    85de:	4b06      	ldr	r3, [pc, #24]	; (85f8 <setChannelIdStatusT2+0x4c>)
    85e0:	4798      	blx	r3
    85e2:	e7f2      	b.n	85ca <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    85e4:	0031      	movs	r1, r6
    85e6:	0028      	movs	r0, r5
    85e8:	4b04      	ldr	r3, [pc, #16]	; (85fc <setChannelIdStatusT2+0x50>)
    85ea:	4798      	blx	r3
    85ec:	e7ed      	b.n	85ca <setChannelIdStatusT2+0x1e>
    85ee:	46c0      	nop			; (mov r8, r8)
    85f0:	00007d59 	.word	0x00007d59
    85f4:	20001404 	.word	0x20001404
    85f8:	0000849d 	.word	0x0000849d
    85fc:	000083f9 	.word	0x000083f9

00008600 <UpdateChannelIdStatusT4>:
{
    8600:	b570      	push	{r4, r5, r6, lr}
    8602:	0004      	movs	r4, r0
    8604:	000d      	movs	r5, r1
	RegParams.pChParams[chid].status = statusNew;
    8606:	4925      	ldr	r1, [pc, #148]	; (869c <UpdateChannelIdStatusT4+0x9c>)
    8608:	790b      	ldrb	r3, [r1, #4]
    860a:	794a      	ldrb	r2, [r1, #5]
    860c:	0212      	lsls	r2, r2, #8
    860e:	431a      	orrs	r2, r3
    8610:	798b      	ldrb	r3, [r1, #6]
    8612:	041b      	lsls	r3, r3, #16
    8614:	431a      	orrs	r2, r3
    8616:	79cb      	ldrb	r3, [r1, #7]
    8618:	061b      	lsls	r3, r3, #24
    861a:	4313      	orrs	r3, r2
    861c:	0042      	lsls	r2, r0, #1
    861e:	54d5      	strb	r5, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    8620:	23f8      	movs	r3, #248	; 0xf8
    8622:	33ff      	adds	r3, #255	; 0xff
    8624:	5ccb      	ldrb	r3, [r1, r3]
    8626:	22fc      	movs	r2, #252	; 0xfc
    8628:	0052      	lsls	r2, r2, #1
    862a:	5c88      	ldrb	r0, [r1, r2]
    862c:	0200      	lsls	r0, r0, #8
    862e:	4318      	orrs	r0, r3
    8630:	b2c1      	uxtb	r1, r0
    8632:	0a00      	lsrs	r0, r0, #8
    8634:	4b1a      	ldr	r3, [pc, #104]	; (86a0 <UpdateChannelIdStatusT4+0xa0>)
    8636:	4798      	blx	r3
	if(statusNew == ENABLED)
    8638:	2d00      	cmp	r5, #0
    863a:	d02a      	beq.n	8692 <UpdateChannelIdStatusT4+0x92>
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    863c:	4a17      	ldr	r2, [pc, #92]	; (869c <UpdateChannelIdStatusT4+0x9c>)
    863e:	7a10      	ldrb	r0, [r2, #8]
    8640:	7a53      	ldrb	r3, [r2, #9]
    8642:	021b      	lsls	r3, r3, #8
    8644:	4303      	orrs	r3, r0
    8646:	7a90      	ldrb	r0, [r2, #10]
    8648:	0400      	lsls	r0, r0, #16
    864a:	4303      	orrs	r3, r0
    864c:	7ad0      	ldrb	r0, [r2, #11]
    864e:	0600      	lsls	r0, r0, #24
    8650:	4318      	orrs	r0, r3
    8652:	0063      	lsls	r3, r4, #1
    8654:	191c      	adds	r4, r3, r4
    8656:	00a4      	lsls	r4, r4, #2
    8658:	1900      	adds	r0, r0, r4
    865a:	7803      	ldrb	r3, [r0, #0]
    865c:	7842      	ldrb	r2, [r0, #1]
    865e:	0212      	lsls	r2, r2, #8
    8660:	431a      	orrs	r2, r3
    8662:	7883      	ldrb	r3, [r0, #2]
    8664:	041b      	lsls	r3, r3, #16
    8666:	431a      	orrs	r2, r3
    8668:	78c3      	ldrb	r3, [r0, #3]
    866a:	061b      	lsls	r3, r3, #24
    866c:	4313      	orrs	r3, r2
    866e:	4a0d      	ldr	r2, [pc, #52]	; (86a4 <UpdateChannelIdStatusT4+0xa4>)
    8670:	4293      	cmp	r3, r2
    8672:	d80f      	bhi.n	8694 <UpdateChannelIdStatusT4+0x94>
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_LF;
    8674:	230a      	movs	r3, #10
    8676:	7283      	strb	r3, [r0, #10]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    8678:	4b08      	ldr	r3, [pc, #32]	; (869c <UpdateChannelIdStatusT4+0x9c>)
    867a:	22fa      	movs	r2, #250	; 0xfa
    867c:	32ff      	adds	r2, #255	; 0xff
    867e:	5c9a      	ldrb	r2, [r3, r2]
    8680:	21fd      	movs	r1, #253	; 0xfd
    8682:	0049      	lsls	r1, r1, #1
    8684:	5c58      	ldrb	r0, [r3, r1]
    8686:	0200      	lsls	r0, r0, #8
    8688:	4310      	orrs	r0, r2
    868a:	b2c1      	uxtb	r1, r0
    868c:	0a00      	lsrs	r0, r0, #8
    868e:	4b04      	ldr	r3, [pc, #16]	; (86a0 <UpdateChannelIdStatusT4+0xa0>)
    8690:	4798      	blx	r3
}
    8692:	bd70      	pop	{r4, r5, r6, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_HF;
    8694:	230e      	movs	r3, #14
    8696:	7283      	strb	r3, [r0, #10]
    8698:	e7ee      	b.n	8678 <UpdateChannelIdStatusT4+0x78>
    869a:	46c0      	nop			; (mov r8, r8)
    869c:	20001404 	.word	0x20001404
    86a0:	0000b745 	.word	0x0000b745
    86a4:	36f6211f 	.word	0x36f6211f

000086a8 <UpdateChannelIdStatusT3>:
{
    86a8:	b570      	push	{r4, r5, r6, lr}
    86aa:	0005      	movs	r5, r0
	RegParams.pChParams[chid].status = statusNew;
    86ac:	0046      	lsls	r6, r0, #1
    86ae:	4c2a      	ldr	r4, [pc, #168]	; (8758 <UpdateChannelIdStatusT3+0xb0>)
    86b0:	7923      	ldrb	r3, [r4, #4]
    86b2:	7962      	ldrb	r2, [r4, #5]
    86b4:	0212      	lsls	r2, r2, #8
    86b6:	431a      	orrs	r2, r3
    86b8:	79a3      	ldrb	r3, [r4, #6]
    86ba:	041b      	lsls	r3, r3, #16
    86bc:	431a      	orrs	r2, r3
    86be:	79e3      	ldrb	r3, [r4, #7]
    86c0:	061b      	lsls	r3, r3, #24
    86c2:	4313      	orrs	r3, r2
    86c4:	5599      	strb	r1, [r3, r6]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    86c6:	23f8      	movs	r3, #248	; 0xf8
    86c8:	33ff      	adds	r3, #255	; 0xff
    86ca:	5ce3      	ldrb	r3, [r4, r3]
    86cc:	22fc      	movs	r2, #252	; 0xfc
    86ce:	0052      	lsls	r2, r2, #1
    86d0:	5ca0      	ldrb	r0, [r4, r2]
    86d2:	0200      	lsls	r0, r0, #8
    86d4:	4318      	orrs	r0, r3
    86d6:	b2c1      	uxtb	r1, r0
    86d8:	0a00      	lsrs	r0, r0, #8
    86da:	4b20      	ldr	r3, [pc, #128]	; (875c <UpdateChannelIdStatusT3+0xb4>)
    86dc:	4798      	blx	r3
	if(RegParams.pChParams[chid].status == DISABLED)
    86de:	7923      	ldrb	r3, [r4, #4]
    86e0:	7962      	ldrb	r2, [r4, #5]
    86e2:	0212      	lsls	r2, r2, #8
    86e4:	431a      	orrs	r2, r3
    86e6:	79a3      	ldrb	r3, [r4, #6]
    86e8:	041b      	lsls	r3, r3, #16
    86ea:	431a      	orrs	r2, r3
    86ec:	79e3      	ldrb	r3, [r4, #7]
    86ee:	061b      	lsls	r3, r3, #24
    86f0:	4313      	orrs	r3, r2
    86f2:	5d9b      	ldrb	r3, [r3, r6]
    86f4:	2b00      	cmp	r3, #0
    86f6:	d000      	beq.n	86fa <UpdateChannelIdStatusT3+0x52>
}
    86f8:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pOtherChParams[chid].ulfrequency = 0;
    86fa:	4c17      	ldr	r4, [pc, #92]	; (8758 <UpdateChannelIdStatusT3+0xb0>)
    86fc:	7a23      	ldrb	r3, [r4, #8]
    86fe:	7a62      	ldrb	r2, [r4, #9]
    8700:	0212      	lsls	r2, r2, #8
    8702:	4313      	orrs	r3, r2
    8704:	7aa2      	ldrb	r2, [r4, #10]
    8706:	0412      	lsls	r2, r2, #16
    8708:	431a      	orrs	r2, r3
    870a:	7ae3      	ldrb	r3, [r4, #11]
    870c:	061b      	lsls	r3, r3, #24
    870e:	431a      	orrs	r2, r3
    8710:	1973      	adds	r3, r6, r5
    8712:	009b      	lsls	r3, r3, #2
    8714:	2100      	movs	r1, #0
    8716:	5499      	strb	r1, [r3, r2]
    8718:	189b      	adds	r3, r3, r2
    871a:	2200      	movs	r2, #0
    871c:	705a      	strb	r2, [r3, #1]
    871e:	709a      	strb	r2, [r3, #2]
    8720:	70da      	strb	r2, [r3, #3]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    8722:	23fa      	movs	r3, #250	; 0xfa
    8724:	33ff      	adds	r3, #255	; 0xff
    8726:	5ce3      	ldrb	r3, [r4, r3]
    8728:	32fb      	adds	r2, #251	; 0xfb
    872a:	32ff      	adds	r2, #255	; 0xff
    872c:	5ca0      	ldrb	r0, [r4, r2]
    872e:	0200      	lsls	r0, r0, #8
    8730:	4318      	orrs	r0, r3
    8732:	b2c1      	uxtb	r1, r0
    8734:	0a00      	lsrs	r0, r0, #8
    8736:	4b09      	ldr	r3, [pc, #36]	; (875c <UpdateChannelIdStatusT3+0xb4>)
    8738:	4798      	blx	r3
		if( RegParams.band == ISM_JPN923)
    873a:	2326      	movs	r3, #38	; 0x26
    873c:	5ce3      	ldrb	r3, [r4, r3]
    873e:	2b05      	cmp	r3, #5
    8740:	d1da      	bne.n	86f8 <UpdateChannelIdStatusT3+0x50>
			RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    8742:	3552      	adds	r5, #82	; 0x52
    8744:	00ad      	lsls	r5, r5, #2
    8746:	4b04      	ldr	r3, [pc, #16]	; (8758 <UpdateChannelIdStatusT3+0xb0>)
    8748:	195d      	adds	r5, r3, r5
    874a:	2200      	movs	r2, #0
    874c:	726a      	strb	r2, [r5, #9]
    874e:	72aa      	strb	r2, [r5, #10]
    8750:	72ea      	strb	r2, [r5, #11]
    8752:	732a      	strb	r2, [r5, #12]
}
    8754:	e7d0      	b.n	86f8 <UpdateChannelIdStatusT3+0x50>
    8756:	46c0      	nop			; (mov r8, r8)
    8758:	20001404 	.word	0x20001404
    875c:	0000b745 	.word	0x0000b745

00008760 <setChannelIdStatusT3>:
{
    8760:	b570      	push	{r4, r5, r6, lr}
    8762:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    8764:	780d      	ldrb	r5, [r1, #0]
    8766:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    8768:	a901      	add	r1, sp, #4
    876a:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    876c:	2301      	movs	r3, #1
    876e:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    8770:	2015      	movs	r0, #21
    8772:	4b0c      	ldr	r3, [pc, #48]	; (87a4 <setChannelIdStatusT3+0x44>)
    8774:	4798      	blx	r3
    8776:	0004      	movs	r4, r0
    8778:	2808      	cmp	r0, #8
    877a:	d003      	beq.n	8784 <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    877c:	240a      	movs	r4, #10
}
    877e:	0020      	movs	r0, r4
    8780:	b002      	add	sp, #8
    8782:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    8784:	2326      	movs	r3, #38	; 0x26
    8786:	4a08      	ldr	r2, [pc, #32]	; (87a8 <setChannelIdStatusT3+0x48>)
    8788:	5cd3      	ldrb	r3, [r2, r3]
    878a:	2b04      	cmp	r3, #4
    878c:	d004      	beq.n	8798 <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    878e:	0031      	movs	r1, r6
    8790:	0028      	movs	r0, r5
    8792:	4b06      	ldr	r3, [pc, #24]	; (87ac <setChannelIdStatusT3+0x4c>)
    8794:	4798      	blx	r3
    8796:	e7f2      	b.n	877e <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    8798:	0031      	movs	r1, r6
    879a:	0028      	movs	r0, r5
    879c:	4b04      	ldr	r3, [pc, #16]	; (87b0 <setChannelIdStatusT3+0x50>)
    879e:	4798      	blx	r3
    87a0:	e7ed      	b.n	877e <setChannelIdStatusT3+0x1e>
    87a2:	46c0      	nop			; (mov r8, r8)
    87a4:	00007d59 	.word	0x00007d59
    87a8:	20001404 	.word	0x20001404
    87ac:	000086a9 	.word	0x000086a9
    87b0:	00008601 	.word	0x00008601

000087b4 <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    87b4:	b510      	push	{r4, lr}
    87b6:	b082      	sub	sp, #8
    87b8:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    87ba:	784c      	ldrb	r4, [r1, #1]
    87bc:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    87be:	780a      	ldrb	r2, [r1, #0]
    87c0:	2a00      	cmp	r2, #0
    87c2:	d009      	beq.n	87d8 <LORAREG_GetAttr_Rx1WindowparamsType1+0x24>
		if (RegParams.cmnParams.paramsType1.alternativeChannel == 1) 
    87c4:	2340      	movs	r3, #64	; 0x40
    87c6:	33ff      	adds	r3, #255	; 0xff
    87c8:	4a23      	ldr	r2, [pc, #140]	; (8858 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    87ca:	5cd3      	ldrb	r3, [r2, r3]
    87cc:	2b01      	cmp	r3, #1
    87ce:	d01a      	beq.n	8806 <LORAREG_GetAttr_Rx1WindowparamsType1+0x52>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    87d0:	233a      	movs	r3, #58	; 0x3a
    87d2:	33ff      	adds	r3, #255	; 0xff
    87d4:	4a20      	ldr	r2, [pc, #128]	; (8858 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    87d6:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    87d8:	491f      	ldr	r1, [pc, #124]	; (8858 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    87da:	229f      	movs	r2, #159	; 0x9f
    87dc:	0052      	lsls	r2, r2, #1
    87de:	5c8a      	ldrb	r2, [r1, r2]
    87e0:	1b12      	subs	r2, r2, r4
    87e2:	189b      	adds	r3, r3, r2
    87e4:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    87e6:	466a      	mov	r2, sp
    87e8:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    87ea:	223c      	movs	r2, #60	; 0x3c
    87ec:	32ff      	adds	r2, #255	; 0xff
    87ee:	5c8a      	ldrb	r2, [r1, r2]
    87f0:	4293      	cmp	r3, r2
    87f2:	d80c      	bhi.n	880e <LORAREG_GetAttr_Rx1WindowparamsType1+0x5a>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    87f4:	229d      	movs	r2, #157	; 0x9d
    87f6:	0052      	lsls	r2, r2, #1
    87f8:	4917      	ldr	r1, [pc, #92]	; (8858 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    87fa:	5c8a      	ldrb	r2, [r1, r2]
    87fc:	4293      	cmp	r3, r2
    87fe:	d208      	bcs.n	8812 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5e>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    8800:	466b      	mov	r3, sp
    8802:	711a      	strb	r2, [r3, #4]
    8804:	e005      	b.n	8812 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    8806:	3338      	adds	r3, #56	; 0x38
    8808:	33ff      	adds	r3, #255	; 0xff
    880a:	5cd3      	ldrb	r3, [r2, r3]
    880c:	e7e4      	b.n	87d8 <LORAREG_GetAttr_Rx1WindowparamsType1+0x24>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    880e:	466b      	mov	r3, sp
    8810:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    8812:	4911      	ldr	r1, [pc, #68]	; (8858 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    8814:	2327      	movs	r3, #39	; 0x27
    8816:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    8818:	3b20      	subs	r3, #32
    881a:	4023      	ands	r3, r4
    881c:	4c0f      	ldr	r4, [pc, #60]	; (885c <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    881e:	435c      	muls	r4, r3
    8820:	239a      	movs	r3, #154	; 0x9a
    8822:	005b      	lsls	r3, r3, #1
    8824:	5ccb      	ldrb	r3, [r1, r3]
    8826:	2236      	movs	r2, #54	; 0x36
    8828:	32ff      	adds	r2, #255	; 0xff
    882a:	5c8a      	ldrb	r2, [r1, r2]
    882c:	0212      	lsls	r2, r2, #8
    882e:	4313      	orrs	r3, r2
    8830:	229b      	movs	r2, #155	; 0x9b
    8832:	0052      	lsls	r2, r2, #1
    8834:	5c8a      	ldrb	r2, [r1, r2]
    8836:	0412      	lsls	r2, r2, #16
    8838:	431a      	orrs	r2, r3
    883a:	2338      	movs	r3, #56	; 0x38
    883c:	33ff      	adds	r3, #255	; 0xff
    883e:	5ccb      	ldrb	r3, [r1, r3]
    8840:	061b      	lsls	r3, r3, #24
    8842:	4313      	orrs	r3, r2
    8844:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    8846:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    8848:	2208      	movs	r2, #8
    884a:	4669      	mov	r1, sp
    884c:	4b04      	ldr	r3, [pc, #16]	; (8860 <LORAREG_GetAttr_Rx1WindowparamsType1+0xac>)
    884e:	4798      	blx	r3
}
    8850:	2008      	movs	r0, #8
    8852:	b002      	add	sp, #8
    8854:	bd10      	pop	{r4, pc}
    8856:	46c0      	nop			; (mov r8, r8)
    8858:	20001404 	.word	0x20001404
    885c:	000927c0 	.word	0x000927c0
    8860:	00018195 	.word	0x00018195

00008864 <LORAREG_GetAttr_DRangeChBandT1>:
{
    8864:	b5f0      	push	{r4, r5, r6, r7, lr}
    8866:	46c6      	mov	lr, r8
    8868:	b500      	push	{lr}
    886a:	b084      	sub	sp, #16
    886c:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    886e:	2204      	movs	r2, #4
    8870:	a803      	add	r0, sp, #12
    8872:	4b43      	ldr	r3, [pc, #268]	; (8980 <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    8874:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    8876:	a903      	add	r1, sp, #12
    8878:	201b      	movs	r0, #27
    887a:	4b42      	ldr	r3, [pc, #264]	; (8984 <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    887c:	4798      	blx	r3
    887e:	2808      	cmp	r0, #8
    8880:	d004      	beq.n	888c <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    8882:	200a      	movs	r0, #10
}
    8884:	b004      	add	sp, #16
    8886:	bc04      	pop	{r2}
    8888:	4690      	mov	r8, r2
    888a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    888c:	aa03      	add	r2, sp, #12
    888e:	7813      	ldrb	r3, [r2, #0]
    8890:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    8892:	2226      	movs	r2, #38	; 0x26
    8894:	493c      	ldr	r1, [pc, #240]	; (8988 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    8896:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    8898:	3903      	subs	r1, #3
    889a:	1e4a      	subs	r2, r1, #1
    889c:	4191      	sbcs	r1, r2
    889e:	3106      	adds	r1, #6
	switch (chMaskCntl)
    88a0:	2b07      	cmp	r3, #7
    88a2:	d869      	bhi.n	8978 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    88a4:	009a      	lsls	r2, r3, #2
    88a6:	4d39      	ldr	r5, [pc, #228]	; (898c <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    88a8:	58aa      	ldr	r2, [r5, r2]
    88aa:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    88ac:	011b      	lsls	r3, r3, #4
    88ae:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    88b0:	001a      	movs	r2, r3
    88b2:	3210      	adds	r2, #16
    88b4:	b2d2      	uxtb	r2, r2
    88b6:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    88b8:	4293      	cmp	r3, r2
    88ba:	d25f      	bcs.n	897c <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    88bc:	4e32      	ldr	r6, [pc, #200]	; (8988 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    88be:	7935      	ldrb	r5, [r6, #4]
    88c0:	7972      	ldrb	r2, [r6, #5]
    88c2:	0212      	lsls	r2, r2, #8
    88c4:	4315      	orrs	r5, r2
    88c6:	79b2      	ldrb	r2, [r6, #6]
    88c8:	0412      	lsls	r2, r2, #16
    88ca:	432a      	orrs	r2, r5
    88cc:	79f5      	ldrb	r5, [r6, #7]
    88ce:	062d      	lsls	r5, r5, #24
    88d0:	4315      	orrs	r5, r2
    88d2:	46ac      	mov	ip, r5
    88d4:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    88d6:	2401      	movs	r4, #1
    88d8:	e00c      	b.n	88f4 <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    88da:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    88dc:	7872      	ldrb	r2, [r6, #1]
    88de:	0912      	lsrs	r2, r2, #4
    88e0:	42aa      	cmp	r2, r5
    88e2:	dd02      	ble.n	88ea <LORAREG_GetAttr_DRangeChBandT1+0x86>
    88e4:	423c      	tst	r4, r7
    88e6:	d011      	beq.n	890c <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    88e8:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    88ea:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    88ec:	3301      	adds	r3, #1
    88ee:	b2db      	uxtb	r3, r3
    88f0:	4598      	cmp	r8, r3
    88f2:	d013      	beq.n	891c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    88f4:	005e      	lsls	r6, r3, #1
    88f6:	4466      	add	r6, ip
    88f8:	7872      	ldrb	r2, [r6, #1]
    88fa:	0712      	lsls	r2, r2, #28
    88fc:	0f12      	lsrs	r2, r2, #28
    88fe:	428a      	cmp	r2, r1
    8900:	daec      	bge.n	88dc <LORAREG_GetAttr_DRangeChBandT1+0x78>
    8902:	423c      	tst	r4, r7
    8904:	d1e9      	bne.n	88da <LORAREG_GetAttr_DRangeChBandT1+0x76>
    8906:	2f00      	cmp	r7, #0
    8908:	d1ef      	bne.n	88ea <LORAREG_GetAttr_DRangeChBandT1+0x86>
    890a:	e7e6      	b.n	88da <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    890c:	2f00      	cmp	r7, #0
    890e:	d0eb      	beq.n	88e8 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    8910:	e7eb      	b.n	88ea <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    8912:	233a      	movs	r3, #58	; 0x3a
    8914:	33ff      	adds	r3, #255	; 0xff
    8916:	4a1c      	ldr	r2, [pc, #112]	; (8988 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    8918:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    891a:	000d      	movs	r5, r1
    891c:	012d      	lsls	r5, r5, #4
    891e:	230f      	movs	r3, #15
    8920:	4019      	ands	r1, r3
    8922:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    8924:	9b01      	ldr	r3, [sp, #4]
    8926:	701d      	strb	r5, [r3, #0]
    8928:	e7ac      	b.n	8884 <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    892a:	4d17      	ldr	r5, [pc, #92]	; (8988 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    892c:	792b      	ldrb	r3, [r5, #4]
    892e:	796a      	ldrb	r2, [r5, #5]
    8930:	0212      	lsls	r2, r2, #8
    8932:	431a      	orrs	r2, r3
    8934:	79ab      	ldrb	r3, [r5, #6]
    8936:	041b      	lsls	r3, r3, #16
    8938:	431a      	orrs	r2, r3
    893a:	79eb      	ldrb	r3, [r5, #7]
    893c:	061b      	lsls	r3, r3, #24
    893e:	4313      	orrs	r3, r2
    8940:	001a      	movs	r2, r3
    8942:	3380      	adds	r3, #128	; 0x80
    8944:	001c      	movs	r4, r3
    8946:	2500      	movs	r5, #0
    8948:	e002      	b.n	8950 <LORAREG_GetAttr_DRangeChBandT1+0xec>
    894a:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    894c:	42a2      	cmp	r2, r4
    894e:	d00c      	beq.n	896a <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    8950:	0016      	movs	r6, r2
    8952:	7853      	ldrb	r3, [r2, #1]
    8954:	071b      	lsls	r3, r3, #28
    8956:	0f1b      	lsrs	r3, r3, #28
    8958:	428b      	cmp	r3, r1
    895a:	da00      	bge.n	895e <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    895c:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    895e:	7873      	ldrb	r3, [r6, #1]
    8960:	091b      	lsrs	r3, r3, #4
    8962:	42ab      	cmp	r3, r5
    8964:	ddf1      	ble.n	894a <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    8966:	001d      	movs	r5, r3
    8968:	e7ef      	b.n	894a <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    896a:	2f00      	cmp	r7, #0
    896c:	d0d6      	beq.n	891c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    896e:	233a      	movs	r3, #58	; 0x3a
    8970:	33ff      	adds	r3, #255	; 0xff
    8972:	4a05      	ldr	r2, [pc, #20]	; (8988 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    8974:	5cd5      	ldrb	r5, [r2, r3]
    8976:	e7d1      	b.n	891c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    8978:	2500      	movs	r5, #0
    897a:	e7cf      	b.n	891c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    897c:	2500      	movs	r5, #0
    897e:	e7cd      	b.n	891c <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    8980:	00018195 	.word	0x00018195
    8984:	00007e41 	.word	0x00007e41
    8988:	20001404 	.word	0x20001404
    898c:	0001e488 	.word	0x0001e488

00008990 <LORAREG_GetAttr_DefRx2Freq>:
{
    8990:	b510      	push	{r4, lr}
    8992:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    8994:	2204      	movs	r2, #4
    8996:	4902      	ldr	r1, [pc, #8]	; (89a0 <LORAREG_GetAttr_DefRx2Freq+0x10>)
    8998:	4b02      	ldr	r3, [pc, #8]	; (89a4 <LORAREG_GetAttr_DefRx2Freq+0x14>)
    899a:	4798      	blx	r3
}
    899c:	2008      	movs	r0, #8
    899e:	bd10      	pop	{r4, pc}
    89a0:	20001418 	.word	0x20001418
    89a4:	00018195 	.word	0x00018195

000089a8 <LORAREG_GetAttr_DlFrequency>:
{
    89a8:	b510      	push	{r4, lr}
    89aa:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    89ac:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    89ae:	2122      	movs	r1, #34	; 0x22
    89b0:	480d      	ldr	r0, [pc, #52]	; (89e8 <LORAREG_GetAttr_DlFrequency+0x40>)
    89b2:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    89b4:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    89b6:	428a      	cmp	r2, r1
    89b8:	dd00      	ble.n	89bc <LORAREG_GetAttr_DlFrequency+0x14>
}
    89ba:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    89bc:	4c0a      	ldr	r4, [pc, #40]	; (89e8 <LORAREG_GetAttr_DlFrequency+0x40>)
    89be:	7a21      	ldrb	r1, [r4, #8]
    89c0:	7a60      	ldrb	r0, [r4, #9]
    89c2:	0200      	lsls	r0, r0, #8
    89c4:	4308      	orrs	r0, r1
    89c6:	7aa1      	ldrb	r1, [r4, #10]
    89c8:	0409      	lsls	r1, r1, #16
    89ca:	4308      	orrs	r0, r1
    89cc:	7ae1      	ldrb	r1, [r4, #11]
    89ce:	0609      	lsls	r1, r1, #24
    89d0:	4301      	orrs	r1, r0
    89d2:	0050      	lsls	r0, r2, #1
    89d4:	1882      	adds	r2, r0, r2
    89d6:	0092      	lsls	r2, r2, #2
    89d8:	1889      	adds	r1, r1, r2
    89da:	3104      	adds	r1, #4
    89dc:	2204      	movs	r2, #4
    89de:	0018      	movs	r0, r3
    89e0:	4b02      	ldr	r3, [pc, #8]	; (89ec <LORAREG_GetAttr_DlFrequency+0x44>)
    89e2:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    89e4:	2008      	movs	r0, #8
    89e6:	e7e8      	b.n	89ba <LORAREG_GetAttr_DlFrequency+0x12>
    89e8:	20001404 	.word	0x20001404
    89ec:	00018195 	.word	0x00018195

000089f0 <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    89f0:	b500      	push	{lr}
    89f2:	b083      	sub	sp, #12
    89f4:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    89f6:	784a      	ldrb	r2, [r1, #1]
    89f8:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    89fa:	429a      	cmp	r2, r3
    89fc:	d925      	bls.n	8a4a <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    89fe:	2300      	movs	r3, #0
    8a00:	466a      	mov	r2, sp
    8a02:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    8a04:	4913      	ldr	r1, [pc, #76]	; (8a54 <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    8a06:	7a0b      	ldrb	r3, [r1, #8]
    8a08:	7a4a      	ldrb	r2, [r1, #9]
    8a0a:	0212      	lsls	r2, r2, #8
    8a0c:	4313      	orrs	r3, r2
    8a0e:	7a8a      	ldrb	r2, [r1, #10]
    8a10:	0412      	lsls	r2, r2, #16
    8a12:	431a      	orrs	r2, r3
    8a14:	7acb      	ldrb	r3, [r1, #11]
    8a16:	061b      	lsls	r3, r3, #24
    8a18:	431a      	orrs	r2, r3
    8a1a:	2327      	movs	r3, #39	; 0x27
    8a1c:	5cc9      	ldrb	r1, [r1, r3]
    8a1e:	004b      	lsls	r3, r1, #1
    8a20:	185b      	adds	r3, r3, r1
    8a22:	009b      	lsls	r3, r3, #2
    8a24:	189b      	adds	r3, r3, r2
    8a26:	7919      	ldrb	r1, [r3, #4]
    8a28:	795a      	ldrb	r2, [r3, #5]
    8a2a:	0212      	lsls	r2, r2, #8
    8a2c:	4311      	orrs	r1, r2
    8a2e:	799a      	ldrb	r2, [r3, #6]
    8a30:	0412      	lsls	r2, r2, #16
    8a32:	430a      	orrs	r2, r1
    8a34:	79db      	ldrb	r3, [r3, #7]
    8a36:	061b      	lsls	r3, r3, #24
    8a38:	4313      	orrs	r3, r2
    8a3a:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    8a3c:	2208      	movs	r2, #8
    8a3e:	4669      	mov	r1, sp
    8a40:	4b05      	ldr	r3, [pc, #20]	; (8a58 <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    8a42:	4798      	blx	r3
}
    8a44:	2008      	movs	r0, #8
    8a46:	b003      	add	sp, #12
    8a48:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    8a4a:	1a9b      	subs	r3, r3, r2
    8a4c:	466a      	mov	r2, sp
    8a4e:	7113      	strb	r3, [r2, #4]
    8a50:	e7d8      	b.n	8a04 <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    8a52:	46c0      	nop			; (mov r8, r8)
    8a54:	20001404 	.word	0x20001404
    8a58:	00018195 	.word	0x00018195

00008a5c <LORAREG_GetAttr_DRangeChBandT2>:
{
    8a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a5e:	46c6      	mov	lr, r8
    8a60:	b500      	push	{lr}
    8a62:	b082      	sub	sp, #8
    8a64:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    8a66:	ad01      	add	r5, sp, #4
    8a68:	2204      	movs	r2, #4
    8a6a:	0028      	movs	r0, r5
    8a6c:	4b38      	ldr	r3, [pc, #224]	; (8b50 <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    8a6e:	4798      	blx	r3
	switch (chMaskCntl)
    8a70:	782b      	ldrb	r3, [r5, #0]
    8a72:	2b00      	cmp	r3, #0
    8a74:	d017      	beq.n	8aa6 <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    8a76:	2b06      	cmp	r3, #6
    8a78:	d159      	bne.n	8b2e <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    8a7a:	331c      	adds	r3, #28
    8a7c:	4a35      	ldr	r2, [pc, #212]	; (8b54 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    8a7e:	56d7      	ldrsb	r7, [r2, r3]
    8a80:	2000      	movs	r0, #0
    8a82:	2507      	movs	r5, #7
    8a84:	2f00      	cmp	r7, #0
    8a86:	dd54      	ble.n	8b32 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    8a88:	4a32      	ldr	r2, [pc, #200]	; (8b54 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    8a8a:	7916      	ldrb	r6, [r2, #4]
    8a8c:	7953      	ldrb	r3, [r2, #5]
    8a8e:	021b      	lsls	r3, r3, #8
    8a90:	4333      	orrs	r3, r6
    8a92:	7996      	ldrb	r6, [r2, #6]
    8a94:	0436      	lsls	r6, r6, #16
    8a96:	4333      	orrs	r3, r6
    8a98:	79d6      	ldrb	r6, [r2, #7]
    8a9a:	0636      	lsls	r6, r6, #24
    8a9c:	431e      	orrs	r6, r3
    8a9e:	2000      	movs	r0, #0
    8aa0:	2507      	movs	r5, #7
    8aa2:	2200      	movs	r2, #0
    8aa4:	e035      	b.n	8b12 <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    8aa6:	2322      	movs	r3, #34	; 0x22
    8aa8:	4a2a      	ldr	r2, [pc, #168]	; (8b54 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    8aaa:	56d3      	ldrsb	r3, [r2, r3]
    8aac:	469c      	mov	ip, r3
    8aae:	2b00      	cmp	r3, #0
    8ab0:	dd4a      	ble.n	8b48 <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    8ab2:	ab01      	add	r3, sp, #4
    8ab4:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    8ab6:	7917      	ldrb	r7, [r2, #4]
    8ab8:	7953      	ldrb	r3, [r2, #5]
    8aba:	021b      	lsls	r3, r3, #8
    8abc:	433b      	orrs	r3, r7
    8abe:	7997      	ldrb	r7, [r2, #6]
    8ac0:	043f      	lsls	r7, r7, #16
    8ac2:	433b      	orrs	r3, r7
    8ac4:	79d7      	ldrb	r7, [r2, #7]
    8ac6:	063f      	lsls	r7, r7, #24
    8ac8:	431f      	orrs	r7, r3
    8aca:	2000      	movs	r0, #0
    8acc:	2507      	movs	r5, #7
    8ace:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    8ad0:	2401      	movs	r4, #1
    8ad2:	e00b      	b.n	8aec <LORAREG_GetAttr_DRangeChBandT2+0x90>
    8ad4:	784b      	ldrb	r3, [r1, #1]
    8ad6:	091b      	lsrs	r3, r3, #4
    8ad8:	4283      	cmp	r3, r0
    8ada:	dd02      	ble.n	8ae2 <LORAREG_GetAttr_DRangeChBandT2+0x86>
    8adc:	4234      	tst	r4, r6
    8ade:	d000      	beq.n	8ae2 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    8ae0:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    8ae2:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    8ae4:	3201      	adds	r2, #1
    8ae6:	b2d2      	uxtb	r2, r2
    8ae8:	4562      	cmp	r2, ip
    8aea:	da22      	bge.n	8b32 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    8aec:	0051      	lsls	r1, r2, #1
    8aee:	1879      	adds	r1, r7, r1
    8af0:	784b      	ldrb	r3, [r1, #1]
    8af2:	071b      	lsls	r3, r3, #28
    8af4:	0f1b      	lsrs	r3, r3, #28
    8af6:	42ab      	cmp	r3, r5
    8af8:	daec      	bge.n	8ad4 <LORAREG_GetAttr_DRangeChBandT2+0x78>
    8afa:	4234      	tst	r4, r6
    8afc:	d0f1      	beq.n	8ae2 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    8afe:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    8b00:	784b      	ldrb	r3, [r1, #1]
    8b02:	091b      	lsrs	r3, r3, #4
    8b04:	4298      	cmp	r0, r3
    8b06:	dbeb      	blt.n	8ae0 <LORAREG_GetAttr_DRangeChBandT2+0x84>
    8b08:	e7eb      	b.n	8ae2 <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    8b0a:	3201      	adds	r2, #1
    8b0c:	b2d2      	uxtb	r2, r2
    8b0e:	42ba      	cmp	r2, r7
    8b10:	da0f      	bge.n	8b32 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    8b12:	0051      	lsls	r1, r2, #1
    8b14:	1871      	adds	r1, r6, r1
    8b16:	784b      	ldrb	r3, [r1, #1]
    8b18:	071b      	lsls	r3, r3, #28
    8b1a:	0f1b      	lsrs	r3, r3, #28
    8b1c:	42ab      	cmp	r3, r5
    8b1e:	da00      	bge.n	8b22 <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    8b20:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    8b22:	784b      	ldrb	r3, [r1, #1]
    8b24:	091b      	lsrs	r3, r3, #4
    8b26:	4283      	cmp	r3, r0
    8b28:	ddef      	ble.n	8b0a <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    8b2a:	0018      	movs	r0, r3
    8b2c:	e7ed      	b.n	8b0a <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    8b2e:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    8b30:	25ff      	movs	r5, #255	; 0xff
    8b32:	0100      	lsls	r0, r0, #4
    8b34:	230f      	movs	r3, #15
    8b36:	401d      	ands	r5, r3
    8b38:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    8b3a:	4643      	mov	r3, r8
    8b3c:	7018      	strb	r0, [r3, #0]
}
    8b3e:	2008      	movs	r0, #8
    8b40:	b002      	add	sp, #8
    8b42:	bc04      	pop	{r2}
    8b44:	4690      	mov	r8, r2
    8b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    8b48:	2000      	movs	r0, #0
    8b4a:	2507      	movs	r5, #7
    8b4c:	e7f1      	b.n	8b32 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    8b4e:	46c0      	nop			; (mov r8, r8)
    8b50:	00018195 	.word	0x00018195
    8b54:	20001404 	.word	0x20001404

00008b58 <LORAREG_GetAttr_FreqT2>:
{
    8b58:	b510      	push	{r4, lr}
    8b5a:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    8b5c:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    8b5e:	2222      	movs	r2, #34	; 0x22
    8b60:	490d      	ldr	r1, [pc, #52]	; (8b98 <LORAREG_GetAttr_FreqT2+0x40>)
    8b62:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    8b64:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    8b66:	4293      	cmp	r3, r2
    8b68:	dd00      	ble.n	8b6c <LORAREG_GetAttr_FreqT2+0x14>
}
    8b6a:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    8b6c:	0008      	movs	r0, r1
    8b6e:	7a09      	ldrb	r1, [r1, #8]
    8b70:	7a42      	ldrb	r2, [r0, #9]
    8b72:	0212      	lsls	r2, r2, #8
    8b74:	430a      	orrs	r2, r1
    8b76:	7a81      	ldrb	r1, [r0, #10]
    8b78:	0409      	lsls	r1, r1, #16
    8b7a:	430a      	orrs	r2, r1
    8b7c:	7ac1      	ldrb	r1, [r0, #11]
    8b7e:	0609      	lsls	r1, r1, #24
    8b80:	4311      	orrs	r1, r2
    8b82:	005a      	lsls	r2, r3, #1
    8b84:	18d3      	adds	r3, r2, r3
    8b86:	009b      	lsls	r3, r3, #2
    8b88:	18c9      	adds	r1, r1, r3
    8b8a:	2204      	movs	r2, #4
    8b8c:	0020      	movs	r0, r4
    8b8e:	4b03      	ldr	r3, [pc, #12]	; (8b9c <LORAREG_GetAttr_FreqT2+0x44>)
    8b90:	4798      	blx	r3
	return result;
    8b92:	2008      	movs	r0, #8
    8b94:	e7e9      	b.n	8b6a <LORAREG_GetAttr_FreqT2+0x12>
    8b96:	46c0      	nop			; (mov r8, r8)
    8b98:	20001404 	.word	0x20001404
    8b9c:	00018195 	.word	0x00018195

00008ba0 <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    8ba0:	b510      	push	{r4, lr}
    8ba2:	b082      	sub	sp, #8
    8ba4:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    8ba6:	2326      	movs	r3, #38	; 0x26
    8ba8:	4a37      	ldr	r2, [pc, #220]	; (8c88 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    8baa:	5cd2      	ldrb	r2, [r2, r3]
    8bac:	4b37      	ldr	r3, [pc, #220]	; (8c8c <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    8bae:	4113      	asrs	r3, r2
    8bb0:	07db      	lsls	r3, r3, #31
    8bb2:	d502      	bpl.n	8bba <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    8bb4:	780b      	ldrb	r3, [r1, #0]
    8bb6:	2b00      	cmp	r3, #0
    8bb8:	d116      	bne.n	8be8 <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    8bba:	23ac      	movs	r3, #172	; 0xac
    8bbc:	33ff      	adds	r3, #255	; 0xff
    8bbe:	4a32      	ldr	r2, [pc, #200]	; (8c88 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    8bc0:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    8bc2:	3baa      	subs	r3, #170	; 0xaa
    8bc4:	3bff      	subs	r3, #255	; 0xff
    8bc6:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    8bc8:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    8bca:	2b05      	cmp	r3, #5
    8bcc:	d92c      	bls.n	8c28 <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    8bce:	2205      	movs	r2, #5
    8bd0:	1ad3      	subs	r3, r2, r3
    8bd2:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    8bd4:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    8bd6:	429a      	cmp	r2, r3
    8bd8:	db31      	blt.n	8c3e <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    8bda:	1ad3      	subs	r3, r2, r3
    8bdc:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    8bde:	42a3      	cmp	r3, r4
    8be0:	d224      	bcs.n	8c2c <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    8be2:	466b      	mov	r3, sp
    8be4:	711c      	strb	r4, [r3, #4]
    8be6:	e02c      	b.n	8c42 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    8be8:	2302      	movs	r3, #2
    8bea:	466a      	mov	r2, sp
    8bec:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    8bee:	4926      	ldr	r1, [pc, #152]	; (8c88 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    8bf0:	7a0b      	ldrb	r3, [r1, #8]
    8bf2:	7a4a      	ldrb	r2, [r1, #9]
    8bf4:	0212      	lsls	r2, r2, #8
    8bf6:	4313      	orrs	r3, r2
    8bf8:	7a8a      	ldrb	r2, [r1, #10]
    8bfa:	0412      	lsls	r2, r2, #16
    8bfc:	431a      	orrs	r2, r3
    8bfe:	7acb      	ldrb	r3, [r1, #11]
    8c00:	061b      	lsls	r3, r3, #24
    8c02:	431a      	orrs	r2, r3
    8c04:	2327      	movs	r3, #39	; 0x27
    8c06:	5cc9      	ldrb	r1, [r1, r3]
    8c08:	004b      	lsls	r3, r1, #1
    8c0a:	185b      	adds	r3, r3, r1
    8c0c:	009b      	lsls	r3, r3, #2
    8c0e:	189b      	adds	r3, r3, r2
    8c10:	7919      	ldrb	r1, [r3, #4]
    8c12:	795a      	ldrb	r2, [r3, #5]
    8c14:	0212      	lsls	r2, r2, #8
    8c16:	4311      	orrs	r1, r2
    8c18:	799a      	ldrb	r2, [r3, #6]
    8c1a:	0412      	lsls	r2, r2, #16
    8c1c:	430a      	orrs	r2, r1
    8c1e:	79db      	ldrb	r3, [r3, #7]
    8c20:	061b      	lsls	r3, r3, #24
    8c22:	4313      	orrs	r3, r2
    8c24:	9300      	str	r3, [sp, #0]
    8c26:	e028      	b.n	8c7a <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    8c28:	b25b      	sxtb	r3, r3
    8c2a:	e7d3      	b.n	8bd4 <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    8c2c:	2b05      	cmp	r3, #5
    8c2e:	d802      	bhi.n	8c36 <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    8c30:	466a      	mov	r2, sp
    8c32:	7113      	strb	r3, [r2, #4]
    8c34:	e005      	b.n	8c42 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    8c36:	2305      	movs	r3, #5
    8c38:	466a      	mov	r2, sp
    8c3a:	7113      	strb	r3, [r2, #4]
    8c3c:	e001      	b.n	8c42 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    8c3e:	466b      	mov	r3, sp
    8c40:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    8c42:	4911      	ldr	r1, [pc, #68]	; (8c88 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    8c44:	7a0b      	ldrb	r3, [r1, #8]
    8c46:	7a4a      	ldrb	r2, [r1, #9]
    8c48:	0212      	lsls	r2, r2, #8
    8c4a:	4313      	orrs	r3, r2
    8c4c:	7a8a      	ldrb	r2, [r1, #10]
    8c4e:	0412      	lsls	r2, r2, #16
    8c50:	431a      	orrs	r2, r3
    8c52:	7acb      	ldrb	r3, [r1, #11]
    8c54:	061b      	lsls	r3, r3, #24
    8c56:	431a      	orrs	r2, r3
    8c58:	2327      	movs	r3, #39	; 0x27
    8c5a:	5cc9      	ldrb	r1, [r1, r3]
    8c5c:	004b      	lsls	r3, r1, #1
    8c5e:	185b      	adds	r3, r3, r1
    8c60:	009b      	lsls	r3, r3, #2
    8c62:	189b      	adds	r3, r3, r2
    8c64:	7919      	ldrb	r1, [r3, #4]
    8c66:	795a      	ldrb	r2, [r3, #5]
    8c68:	0212      	lsls	r2, r2, #8
    8c6a:	4311      	orrs	r1, r2
    8c6c:	799a      	ldrb	r2, [r3, #6]
    8c6e:	0412      	lsls	r2, r2, #16
    8c70:	430a      	orrs	r2, r1
    8c72:	79db      	ldrb	r3, [r3, #7]
    8c74:	061b      	lsls	r3, r3, #24
    8c76:	4313      	orrs	r3, r2
    8c78:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    8c7a:	2208      	movs	r2, #8
    8c7c:	4669      	mov	r1, sp
    8c7e:	4b04      	ldr	r3, [pc, #16]	; (8c90 <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    8c80:	4798      	blx	r3
}
    8c82:	2008      	movs	r0, #8
    8c84:	b002      	add	sp, #8
    8c86:	bd10      	pop	{r4, pc}
    8c88:	20001404 	.word	0x20001404
    8c8c:	00007fe0 	.word	0x00007fe0
    8c90:	00018195 	.word	0x00018195

00008c94 <LORAREG_GetAttr_FreqT3>:
{
    8c94:	b510      	push	{r4, lr}
    8c96:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    8c98:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    8c9a:	2222      	movs	r2, #34	; 0x22
    8c9c:	490d      	ldr	r1, [pc, #52]	; (8cd4 <LORAREG_GetAttr_FreqT3+0x40>)
    8c9e:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    8ca0:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    8ca2:	4293      	cmp	r3, r2
    8ca4:	dd00      	ble.n	8ca8 <LORAREG_GetAttr_FreqT3+0x14>
}
    8ca6:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    8ca8:	0008      	movs	r0, r1
    8caa:	7a09      	ldrb	r1, [r1, #8]
    8cac:	7a42      	ldrb	r2, [r0, #9]
    8cae:	0212      	lsls	r2, r2, #8
    8cb0:	430a      	orrs	r2, r1
    8cb2:	7a81      	ldrb	r1, [r0, #10]
    8cb4:	0409      	lsls	r1, r1, #16
    8cb6:	430a      	orrs	r2, r1
    8cb8:	7ac1      	ldrb	r1, [r0, #11]
    8cba:	0609      	lsls	r1, r1, #24
    8cbc:	4311      	orrs	r1, r2
    8cbe:	005a      	lsls	r2, r3, #1
    8cc0:	18d3      	adds	r3, r2, r3
    8cc2:	009b      	lsls	r3, r3, #2
    8cc4:	18c9      	adds	r1, r1, r3
    8cc6:	2204      	movs	r2, #4
    8cc8:	0020      	movs	r0, r4
    8cca:	4b03      	ldr	r3, [pc, #12]	; (8cd8 <LORAREG_GetAttr_FreqT3+0x44>)
    8ccc:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8cce:	2008      	movs	r0, #8
    8cd0:	e7e9      	b.n	8ca6 <LORAREG_GetAttr_FreqT3+0x12>
    8cd2:	46c0      	nop			; (mov r8, r8)
    8cd4:	20001404 	.word	0x20001404
    8cd8:	00018195 	.word	0x00018195

00008cdc <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    8cdc:	b500      	push	{lr}
    8cde:	b083      	sub	sp, #12
    8ce0:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    8ce2:	784b      	ldrb	r3, [r1, #1]
    8ce4:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    8ce6:	2b05      	cmp	r3, #5
    8ce8:	d90b      	bls.n	8d02 <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    8cea:	2105      	movs	r1, #5
    8cec:	1acb      	subs	r3, r1, r3
    8cee:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    8cf0:	429a      	cmp	r2, r3
    8cf2:	db0c      	blt.n	8d0e <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    8cf4:	1ad3      	subs	r3, r2, r3
    8cf6:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    8cf8:	2b05      	cmp	r3, #5
    8cfa:	d804      	bhi.n	8d06 <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    8cfc:	466a      	mov	r2, sp
    8cfe:	7113      	strb	r3, [r2, #4]
    8d00:	e008      	b.n	8d14 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    8d02:	b25b      	sxtb	r3, r3
    8d04:	e7f4      	b.n	8cf0 <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    8d06:	2305      	movs	r3, #5
    8d08:	466a      	mov	r2, sp
    8d0a:	7113      	strb	r3, [r2, #4]
    8d0c:	e002      	b.n	8d14 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    8d0e:	2300      	movs	r3, #0
    8d10:	466a      	mov	r2, sp
    8d12:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    8d14:	4911      	ldr	r1, [pc, #68]	; (8d5c <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    8d16:	7a0b      	ldrb	r3, [r1, #8]
    8d18:	7a4a      	ldrb	r2, [r1, #9]
    8d1a:	0212      	lsls	r2, r2, #8
    8d1c:	4313      	orrs	r3, r2
    8d1e:	7a8a      	ldrb	r2, [r1, #10]
    8d20:	0412      	lsls	r2, r2, #16
    8d22:	431a      	orrs	r2, r3
    8d24:	7acb      	ldrb	r3, [r1, #11]
    8d26:	061b      	lsls	r3, r3, #24
    8d28:	431a      	orrs	r2, r3
    8d2a:	2327      	movs	r3, #39	; 0x27
    8d2c:	5cc9      	ldrb	r1, [r1, r3]
    8d2e:	004b      	lsls	r3, r1, #1
    8d30:	185b      	adds	r3, r3, r1
    8d32:	009b      	lsls	r3, r3, #2
    8d34:	189b      	adds	r3, r3, r2
    8d36:	7919      	ldrb	r1, [r3, #4]
    8d38:	795a      	ldrb	r2, [r3, #5]
    8d3a:	0212      	lsls	r2, r2, #8
    8d3c:	4311      	orrs	r1, r2
    8d3e:	799a      	ldrb	r2, [r3, #6]
    8d40:	0412      	lsls	r2, r2, #16
    8d42:	430a      	orrs	r2, r1
    8d44:	79db      	ldrb	r3, [r3, #7]
    8d46:	061b      	lsls	r3, r3, #24
    8d48:	4313      	orrs	r3, r2
    8d4a:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    8d4c:	2208      	movs	r2, #8
    8d4e:	4669      	mov	r1, sp
    8d50:	4b03      	ldr	r3, [pc, #12]	; (8d60 <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    8d52:	4798      	blx	r3
}
    8d54:	2008      	movs	r0, #8
    8d56:	b003      	add	sp, #12
    8d58:	bd00      	pop	{pc}
    8d5a:	46c0      	nop			; (mov r8, r8)
    8d5c:	20001404 	.word	0x20001404
    8d60:	00018195 	.word	0x00018195

00008d64 <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    8d64:	b5f0      	push	{r4, r5, r6, r7, lr}
    8d66:	46de      	mov	lr, fp
    8d68:	4657      	mov	r7, sl
    8d6a:	464e      	mov	r6, r9
    8d6c:	4645      	mov	r5, r8
    8d6e:	b5e0      	push	{r5, r6, r7, lr}
    8d70:	b085      	sub	sp, #20
    8d72:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    8d74:	2301      	movs	r3, #1
    8d76:	425b      	negs	r3, r3
    8d78:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    8d7a:	780b      	ldrb	r3, [r1, #0]
    8d7c:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    8d7e:	2322      	movs	r3, #34	; 0x22
    8d80:	4a2a      	ldr	r2, [pc, #168]	; (8e2c <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    8d82:	56d7      	ldrsb	r7, [r2, r3]
    8d84:	2f00      	cmp	r7, #0
    8d86:	dd40      	ble.n	8e0a <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    8d88:	7916      	ldrb	r6, [r2, #4]
    8d8a:	7953      	ldrb	r3, [r2, #5]
    8d8c:	021b      	lsls	r3, r3, #8
    8d8e:	4333      	orrs	r3, r6
    8d90:	7996      	ldrb	r6, [r2, #6]
    8d92:	0436      	lsls	r6, r6, #16
    8d94:	4333      	orrs	r3, r6
    8d96:	79d6      	ldrb	r6, [r2, #7]
    8d98:	0636      	lsls	r6, r6, #24
    8d9a:	431e      	orrs	r6, r3
    8d9c:	2300      	movs	r3, #0
    8d9e:	469a      	mov	sl, r3
    8da0:	3b01      	subs	r3, #1
    8da2:	4698      	mov	r8, r3
    8da4:	2300      	movs	r3, #0
    8da6:	2100      	movs	r1, #0
    8da8:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    8daa:	464a      	mov	r2, r9
    8dac:	9201      	str	r2, [sp, #4]
    8dae:	46c3      	mov	fp, r8
    8db0:	e004      	b.n	8dbc <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    8db2:	3101      	adds	r1, #1
    8db4:	b2c9      	uxtb	r1, r1
    8db6:	000b      	movs	r3, r1
    8db8:	42b9      	cmp	r1, r7
    8dba:	da23      	bge.n	8e04 <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    8dbc:	004a      	lsls	r2, r1, #1
    8dbe:	18b2      	adds	r2, r6, r2
    8dc0:	7814      	ldrb	r4, [r2, #0]
    8dc2:	2c00      	cmp	r4, #0
    8dc4:	d0f5      	beq.n	8db2 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    8dc6:	3352      	adds	r3, #82	; 0x52
    8dc8:	009b      	lsls	r3, r3, #2
    8dca:	4463      	add	r3, ip
    8dcc:	7a58      	ldrb	r0, [r3, #9]
    8dce:	4680      	mov	r8, r0
    8dd0:	7a98      	ldrb	r0, [r3, #10]
    8dd2:	0200      	lsls	r0, r0, #8
    8dd4:	4645      	mov	r5, r8
    8dd6:	4305      	orrs	r5, r0
    8dd8:	7ad8      	ldrb	r0, [r3, #11]
    8dda:	0400      	lsls	r0, r0, #16
    8ddc:	4328      	orrs	r0, r5
    8dde:	7b1b      	ldrb	r3, [r3, #12]
    8de0:	061b      	lsls	r3, r3, #24
    8de2:	4303      	orrs	r3, r0
    8de4:	d0e5      	beq.n	8db2 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    8de6:	459b      	cmp	fp, r3
    8de8:	d3e3      	bcc.n	8db2 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    8dea:	7850      	ldrb	r0, [r2, #1]
    8dec:	0700      	lsls	r0, r0, #28
    8dee:	0f00      	lsrs	r0, r0, #28
    8df0:	4581      	cmp	r9, r0
    8df2:	dbde      	blt.n	8db2 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    8df4:	7852      	ldrb	r2, [r2, #1]
    8df6:	0912      	lsrs	r2, r2, #4
    8df8:	9801      	ldr	r0, [sp, #4]
    8dfa:	4290      	cmp	r0, r2
    8dfc:	dcd9      	bgt.n	8db2 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    8dfe:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    8e00:	469b      	mov	fp, r3
    8e02:	e7d6      	b.n	8db2 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    8e04:	4653      	mov	r3, sl
    8e06:	2b00      	cmp	r3, #0
    8e08:	d10c      	bne.n	8e24 <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    8e0a:	2204      	movs	r2, #4
    8e0c:	a903      	add	r1, sp, #12
    8e0e:	9800      	ldr	r0, [sp, #0]
    8e10:	4b07      	ldr	r3, [pc, #28]	; (8e30 <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    8e12:	4798      	blx	r3
}
    8e14:	2008      	movs	r0, #8
    8e16:	b005      	add	sp, #20
    8e18:	bc3c      	pop	{r2, r3, r4, r5}
    8e1a:	4690      	mov	r8, r2
    8e1c:	4699      	mov	r9, r3
    8e1e:	46a2      	mov	sl, r4
    8e20:	46ab      	mov	fp, r5
    8e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e24:	465b      	mov	r3, fp
    8e26:	9303      	str	r3, [sp, #12]
    8e28:	e7ef      	b.n	8e0a <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    8e2a:	46c0      	nop			; (mov r8, r8)
    8e2c:	20001404 	.word	0x20001404
    8e30:	00018195 	.word	0x00018195

00008e34 <ValidateTxFreqT2>:
{
    8e34:	b500      	push	{lr}
    8e36:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    8e38:	2208      	movs	r2, #8
    8e3a:	4668      	mov	r0, sp
    8e3c:	4b04      	ldr	r3, [pc, #16]	; (8e50 <ValidateTxFreqT2+0x1c>)
    8e3e:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    8e40:	4b04      	ldr	r3, [pc, #16]	; (8e54 <ValidateTxFreqT2+0x20>)
    8e42:	685b      	ldr	r3, [r3, #4]
    8e44:	4669      	mov	r1, sp
    8e46:	2001      	movs	r0, #1
    8e48:	4798      	blx	r3
}
    8e4a:	b003      	add	sp, #12
    8e4c:	bd00      	pop	{pc}
    8e4e:	46c0      	nop			; (mov r8, r8)
    8e50:	00018195 	.word	0x00018195
    8e54:	20000d94 	.word	0x20000d94

00008e58 <ValidateFreqIN>:
{
    8e58:	b500      	push	{lr}
    8e5a:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    8e5c:	2204      	movs	r2, #4
    8e5e:	a801      	add	r0, sp, #4
    8e60:	4b06      	ldr	r3, [pc, #24]	; (8e7c <ValidateFreqIN+0x24>)
    8e62:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    8e64:	9b01      	ldr	r3, [sp, #4]
    8e66:	4a06      	ldr	r2, [pc, #24]	; (8e80 <ValidateFreqIN+0x28>)
    8e68:	4694      	mov	ip, r2
    8e6a:	4463      	add	r3, ip
    8e6c:	4a05      	ldr	r2, [pc, #20]	; (8e84 <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8e6e:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    8e70:	4293      	cmp	r3, r2
    8e72:	d900      	bls.n	8e76 <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    8e74:	3002      	adds	r0, #2
}
    8e76:	b003      	add	sp, #12
    8e78:	bd00      	pop	{pc}
    8e7a:	46c0      	nop			; (mov r8, r8)
    8e7c:	00018195 	.word	0x00018195
    8e80:	cc7125c0 	.word	0xcc7125c0
    8e84:	001e8480 	.word	0x001e8480

00008e88 <ValidateFreqJP>:
{
    8e88:	b500      	push	{lr}
    8e8a:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    8e8c:	2204      	movs	r2, #4
    8e8e:	a801      	add	r0, sp, #4
    8e90:	4b06      	ldr	r3, [pc, #24]	; (8eac <ValidateFreqJP+0x24>)
    8e92:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    8e94:	9b01      	ldr	r3, [sp, #4]
    8e96:	4a06      	ldr	r2, [pc, #24]	; (8eb0 <ValidateFreqJP+0x28>)
    8e98:	4694      	mov	ip, r2
    8e9a:	4463      	add	r3, ip
    8e9c:	4a05      	ldr	r2, [pc, #20]	; (8eb4 <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8e9e:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    8ea0:	4293      	cmp	r3, r2
    8ea2:	d900      	bls.n	8ea6 <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    8ea4:	3002      	adds	r0, #2
}
    8ea6:	b003      	add	sp, #12
    8ea8:	bd00      	pop	{pc}
    8eaa:	46c0      	nop			; (mov r8, r8)
    8eac:	00018195 	.word	0x00018195
    8eb0:	c929ea00 	.word	0xc929ea00
    8eb4:	007a1200 	.word	0x007a1200

00008eb8 <ValidateFreqKR>:
{
    8eb8:	b500      	push	{lr}
    8eba:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    8ebc:	2204      	movs	r2, #4
    8ebe:	a801      	add	r0, sp, #4
    8ec0:	4b0a      	ldr	r3, [pc, #40]	; (8eec <ValidateFreqKR+0x34>)
    8ec2:	4798      	blx	r3
		if(freq == freqNew)
    8ec4:	9a01      	ldr	r2, [sp, #4]
    8ec6:	4b0a      	ldr	r3, [pc, #40]	; (8ef0 <ValidateFreqKR+0x38>)
    8ec8:	429a      	cmp	r2, r3
    8eca:	d00b      	beq.n	8ee4 <ValidateFreqKR+0x2c>
    8ecc:	4b09      	ldr	r3, [pc, #36]	; (8ef4 <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq < FREQ_923300KHZ; freq += freqwidth)
    8ece:	490a      	ldr	r1, [pc, #40]	; (8ef8 <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    8ed0:	429a      	cmp	r2, r3
    8ed2:	d009      	beq.n	8ee8 <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq < FREQ_923300KHZ; freq += freqwidth)
    8ed4:	4809      	ldr	r0, [pc, #36]	; (8efc <ValidateFreqKR+0x44>)
    8ed6:	4684      	mov	ip, r0
    8ed8:	4463      	add	r3, ip
    8eda:	428b      	cmp	r3, r1
    8edc:	d1f8      	bne.n	8ed0 <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    8ede:	200a      	movs	r0, #10
}
    8ee0:	b003      	add	sp, #12
    8ee2:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    8ee4:	2008      	movs	r0, #8
    8ee6:	e7fb      	b.n	8ee0 <ValidateFreqKR+0x28>
    8ee8:	2008      	movs	r0, #8
    8eea:	e7f9      	b.n	8ee0 <ValidateFreqKR+0x28>
    8eec:	00018195 	.word	0x00018195
    8ef0:	36e3d1a0 	.word	0x36e3d1a0
    8ef4:	36e6dee0 	.word	0x36e6dee0
    8ef8:	370870a0 	.word	0x370870a0
    8efc:	00030d40 	.word	0x00030d40

00008f00 <setNewChannelsT1>:
{
    8f00:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f02:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    8f04:	ac01      	add	r4, sp, #4
    8f06:	2204      	movs	r2, #4
    8f08:	0020      	movs	r0, r4
    8f0a:	4b1f      	ldr	r3, [pc, #124]	; (8f88 <setNewChannelsT1+0x88>)
    8f0c:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    8f0e:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    8f10:	78a6      	ldrb	r6, [r4, #2]
    8f12:	466b      	mov	r3, sp
    8f14:	1cd9      	adds	r1, r3, #3
    8f16:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    8f18:	201b      	movs	r0, #27
    8f1a:	4b1c      	ldr	r3, [pc, #112]	; (8f8c <setNewChannelsT1+0x8c>)
    8f1c:	4798      	blx	r3
    8f1e:	0005      	movs	r5, r0
    8f20:	2808      	cmp	r0, #8
    8f22:	d003      	beq.n	8f2c <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    8f24:	250a      	movs	r5, #10
}
    8f26:	0028      	movs	r0, r5
    8f28:	b003      	add	sp, #12
    8f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    8f2c:	2e06      	cmp	r6, #6
    8f2e:	d01c      	beq.n	8f6a <setNewChannelsT1+0x6a>
    8f30:	d80a      	bhi.n	8f48 <setNewChannelsT1+0x48>
    8f32:	2e04      	cmp	r6, #4
    8f34:	d8f7      	bhi.n	8f26 <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    8f36:	0136      	lsls	r6, r6, #4
    8f38:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    8f3a:	0001      	movs	r1, r0
    8f3c:	310f      	adds	r1, #15
    8f3e:	b2c9      	uxtb	r1, r1
    8f40:	003a      	movs	r2, r7
    8f42:	4b13      	ldr	r3, [pc, #76]	; (8f90 <setNewChannelsT1+0x90>)
    8f44:	4798      	blx	r3
				break;
    8f46:	e7ee      	b.n	8f26 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    8f48:	2400      	movs	r4, #0
    8f4a:	2e07      	cmp	r6, #7
    8f4c:	d1eb      	bne.n	8f26 <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    8f4e:	4e11      	ldr	r6, [pc, #68]	; (8f94 <setNewChannelsT1+0x94>)
    8f50:	2100      	movs	r1, #0
    8f52:	0020      	movs	r0, r4
    8f54:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    8f56:	3401      	adds	r4, #1
    8f58:	b2e4      	uxtb	r4, r4
    8f5a:	2c3f      	cmp	r4, #63	; 0x3f
    8f5c:	d1f8      	bne.n	8f50 <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    8f5e:	003a      	movs	r2, r7
    8f60:	2147      	movs	r1, #71	; 0x47
    8f62:	2040      	movs	r0, #64	; 0x40
    8f64:	4b0a      	ldr	r3, [pc, #40]	; (8f90 <setNewChannelsT1+0x90>)
    8f66:	4798      	blx	r3
				break;
    8f68:	e7dd      	b.n	8f26 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    8f6a:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    8f6c:	4e09      	ldr	r6, [pc, #36]	; (8f94 <setNewChannelsT1+0x94>)
    8f6e:	2101      	movs	r1, #1
    8f70:	0020      	movs	r0, r4
    8f72:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    8f74:	3401      	adds	r4, #1
    8f76:	b2e4      	uxtb	r4, r4
    8f78:	2c3f      	cmp	r4, #63	; 0x3f
    8f7a:	d1f8      	bne.n	8f6e <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    8f7c:	003a      	movs	r2, r7
    8f7e:	2147      	movs	r1, #71	; 0x47
    8f80:	2040      	movs	r0, #64	; 0x40
    8f82:	4b03      	ldr	r3, [pc, #12]	; (8f90 <setNewChannelsT1+0x90>)
    8f84:	4798      	blx	r3
			    break;
    8f86:	e7ce      	b.n	8f26 <setNewChannelsT1+0x26>
    8f88:	00018195 	.word	0x00018195
    8f8c:	00007e41 	.word	0x00007e41
    8f90:	00008459 	.word	0x00008459
    8f94:	000083f9 	.word	0x000083f9

00008f98 <setDlFrequency>:
{
    8f98:	b530      	push	{r4, r5, lr}
    8f9a:	b085      	sub	sp, #20
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    8f9c:	ac02      	add	r4, sp, #8
    8f9e:	2208      	movs	r2, #8
    8fa0:	0020      	movs	r0, r4
    8fa2:	4b20      	ldr	r3, [pc, #128]	; (9024 <setDlFrequency+0x8c>)
    8fa4:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    8fa6:	ab01      	add	r3, sp, #4
    8fa8:	7922      	ldrb	r2, [r4, #4]
    8faa:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    8fac:	2201      	movs	r2, #1
    8fae:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    8fb0:	4b1d      	ldr	r3, [pc, #116]	; (9028 <setDlFrequency+0x90>)
    8fb2:	685b      	ldr	r3, [r3, #4]
    8fb4:	0021      	movs	r1, r4
    8fb6:	2001      	movs	r0, #1
    8fb8:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    8fba:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    8fbc:	2808      	cmp	r0, #8
    8fbe:	d002      	beq.n	8fc6 <setDlFrequency+0x2e>
}
    8fc0:	0020      	movs	r0, r4
    8fc2:	b005      	add	sp, #20
    8fc4:	bd30      	pop	{r4, r5, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    8fc6:	a901      	add	r1, sp, #4
    8fc8:	300d      	adds	r0, #13
    8fca:	4b18      	ldr	r3, [pc, #96]	; (902c <setDlFrequency+0x94>)
    8fcc:	4798      	blx	r3
    8fce:	0004      	movs	r4, r0
    8fd0:	2808      	cmp	r0, #8
    8fd2:	d001      	beq.n	8fd8 <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    8fd4:	240a      	movs	r4, #10
    8fd6:	e7f3      	b.n	8fc0 <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    8fd8:	4a15      	ldr	r2, [pc, #84]	; (9030 <setDlFrequency+0x98>)
    8fda:	7a13      	ldrb	r3, [r2, #8]
    8fdc:	7a50      	ldrb	r0, [r2, #9]
    8fde:	0200      	lsls	r0, r0, #8
    8fe0:	4303      	orrs	r3, r0
    8fe2:	7a90      	ldrb	r0, [r2, #10]
    8fe4:	0400      	lsls	r0, r0, #16
    8fe6:	4318      	orrs	r0, r3
    8fe8:	7ad3      	ldrb	r3, [r2, #11]
    8fea:	061b      	lsls	r3, r3, #24
    8fec:	4318      	orrs	r0, r3
    8fee:	a902      	add	r1, sp, #8
    8ff0:	790d      	ldrb	r5, [r1, #4]
    8ff2:	006b      	lsls	r3, r5, #1
    8ff4:	195b      	adds	r3, r3, r5
    8ff6:	009b      	lsls	r3, r3, #2
    8ff8:	181b      	adds	r3, r3, r0
    8ffa:	7808      	ldrb	r0, [r1, #0]
    8ffc:	7118      	strb	r0, [r3, #4]
    8ffe:	7848      	ldrb	r0, [r1, #1]
    9000:	7158      	strb	r0, [r3, #5]
    9002:	7888      	ldrb	r0, [r1, #2]
    9004:	7198      	strb	r0, [r3, #6]
    9006:	78c9      	ldrb	r1, [r1, #3]
    9008:	71d9      	strb	r1, [r3, #7]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    900a:	23fa      	movs	r3, #250	; 0xfa
    900c:	33ff      	adds	r3, #255	; 0xff
    900e:	5cd3      	ldrb	r3, [r2, r3]
    9010:	21fd      	movs	r1, #253	; 0xfd
    9012:	0049      	lsls	r1, r1, #1
    9014:	5c50      	ldrb	r0, [r2, r1]
    9016:	0200      	lsls	r0, r0, #8
    9018:	4318      	orrs	r0, r3
    901a:	b2c1      	uxtb	r1, r0
    901c:	0a00      	lsrs	r0, r0, #8
    901e:	4b05      	ldr	r3, [pc, #20]	; (9034 <setDlFrequency+0x9c>)
    9020:	4798      	blx	r3
    9022:	e7cd      	b.n	8fc0 <setDlFrequency+0x28>
    9024:	00018195 	.word	0x00018195
    9028:	20000d94 	.word	0x20000d94
    902c:	00007d59 	.word	0x00007d59
    9030:	20001404 	.word	0x20001404
    9034:	0000b745 	.word	0x0000b745

00009038 <setNewChannel>:
{
    9038:	b5f0      	push	{r4, r5, r6, r7, lr}
    903a:	46d6      	mov	lr, sl
    903c:	464f      	mov	r7, r9
    903e:	4646      	mov	r6, r8
    9040:	b5c0      	push	{r6, r7, lr}
    9042:	b082      	sub	sp, #8
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    9044:	2326      	movs	r3, #38	; 0x26
    9046:	4a31      	ldr	r2, [pc, #196]	; (910c <setNewChannel+0xd4>)
    9048:	5cd2      	ldrb	r2, [r2, r3]
    904a:	4b31      	ldr	r3, [pc, #196]	; (9110 <setNewChannel+0xd8>)
    904c:	4113      	asrs	r3, r2
    904e:	07db      	lsls	r3, r3, #31
    9050:	d407      	bmi.n	9062 <setNewChannel+0x2a>
    9052:	2a05      	cmp	r2, #5
    9054:	d01f      	beq.n	9096 <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    9056:	2a04      	cmp	r2, #4
    9058:	d01f      	beq.n	909a <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    905a:	2a0f      	cmp	r2, #15
    905c:	d01f      	beq.n	909e <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    905e:	4f2d      	ldr	r7, [pc, #180]	; (9114 <setNewChannel+0xdc>)
    9060:	e000      	b.n	9064 <setNewChannel+0x2c>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    9062:	4f2d      	ldr	r7, [pc, #180]	; (9118 <setNewChannel+0xe0>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    9064:	ac01      	add	r4, sp, #4
    9066:	2204      	movs	r2, #4
    9068:	0020      	movs	r0, r4
    906a:	4b2c      	ldr	r3, [pc, #176]	; (911c <setNewChannel+0xe4>)
    906c:	4798      	blx	r3
	chMask = newCh.channelMask;
    906e:	8825      	ldrh	r5, [r4, #0]
		result = LORAWAN_INVALID_PARAMETER;
    9070:	260a      	movs	r6, #10
	if(/*ValidateChannelMaskT2(&chMask) != LORAWAN_SUCCESS*/ chMask == 0 || ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, &newCh.channelMaskCntl) != LORAWAN_SUCCESS)
    9072:	2d00      	cmp	r5, #0
    9074:	d008      	beq.n	9088 <setNewChannel+0x50>
    9076:	466b      	mov	r3, sp
    9078:	1d99      	adds	r1, r3, #6
    907a:	201b      	movs	r0, #27
    907c:	4b28      	ldr	r3, [pc, #160]	; (9120 <setNewChannel+0xe8>)
    907e:	4798      	blx	r3
    9080:	0006      	movs	r6, r0
    9082:	2808      	cmp	r0, #8
    9084:	d00d      	beq.n	90a2 <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    9086:	260a      	movs	r6, #10
}
    9088:	0030      	movs	r0, r6
    908a:	b002      	add	sp, #8
    908c:	bc1c      	pop	{r2, r3, r4}
    908e:	4690      	mov	r8, r2
    9090:	4699      	mov	r9, r3
    9092:	46a2      	mov	sl, r4
    9094:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    9096:	4f20      	ldr	r7, [pc, #128]	; (9118 <setNewChannel+0xe0>)
    9098:	e7e4      	b.n	9064 <setNewChannel+0x2c>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    909a:	4f22      	ldr	r7, [pc, #136]	; (9124 <setNewChannel+0xec>)
    909c:	e7e2      	b.n	9064 <setNewChannel+0x2c>
		pUpdateChidStatus = UpdateChannelIdStatus;
    909e:	4f22      	ldr	r7, [pc, #136]	; (9128 <setNewChannel+0xf0>)
    90a0:	e7e0      	b.n	9064 <setNewChannel+0x2c>
		if(newCh.channelMaskCntl == 6)
    90a2:	ab01      	add	r3, sp, #4
    90a4:	789c      	ldrb	r4, [r3, #2]
    90a6:	2c06      	cmp	r4, #6
    90a8:	d00c      	beq.n	90c4 <setNewChannel+0x8c>
		else if(newCh.channelMaskCntl == 0)
    90aa:	2c00      	cmp	r4, #0
    90ac:	d1ec      	bne.n	9088 <setNewChannel+0x50>
			for(i = 0; i < RegParams.maxChannels; i++)
    90ae:	2322      	movs	r3, #34	; 0x22
    90b0:	4a16      	ldr	r2, [pc, #88]	; (910c <setNewChannel+0xd4>)
    90b2:	56d3      	ldrsb	r3, [r2, r3]
    90b4:	2b00      	cmp	r3, #0
    90b6:	dde7      	ble.n	9088 <setNewChannel+0x50>
				if((chMask & BIT0) == BIT0)
    90b8:	2301      	movs	r3, #1
    90ba:	4698      	mov	r8, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    90bc:	4692      	mov	sl, r2
    90be:	2322      	movs	r3, #34	; 0x22
    90c0:	4699      	mov	r9, r3
    90c2:	e01c      	b.n	90fe <setNewChannel+0xc6>
			for(i = 0; i < RegParams.maxChannels; i++)
    90c4:	2322      	movs	r3, #34	; 0x22
    90c6:	4a11      	ldr	r2, [pc, #68]	; (910c <setNewChannel+0xd4>)
    90c8:	56d3      	ldrsb	r3, [r2, r3]
    90ca:	2b00      	cmp	r3, #0
    90cc:	dddc      	ble.n	9088 <setNewChannel+0x50>
    90ce:	2400      	movs	r4, #0
    90d0:	4690      	mov	r8, r2
    90d2:	2522      	movs	r5, #34	; 0x22
				pUpdateChidStatus(i,ENABLED);
    90d4:	2101      	movs	r1, #1
    90d6:	0020      	movs	r0, r4
    90d8:	47b8      	blx	r7
			for(i = 0; i < RegParams.maxChannels; i++)
    90da:	3401      	adds	r4, #1
    90dc:	b2e4      	uxtb	r4, r4
    90de:	4643      	mov	r3, r8
    90e0:	575b      	ldrsb	r3, [r3, r5]
    90e2:	429c      	cmp	r4, r3
    90e4:	dbf6      	blt.n	90d4 <setNewChannel+0x9c>
    90e6:	e7cf      	b.n	9088 <setNewChannel+0x50>
					pUpdateChidStatus(i,DISABLED);
    90e8:	2100      	movs	r1, #0
    90ea:	0020      	movs	r0, r4
    90ec:	47b8      	blx	r7
				chMask = chMask >> SHIFT1;
    90ee:	086d      	lsrs	r5, r5, #1
			for(i = 0; i < RegParams.maxChannels; i++)
    90f0:	3401      	adds	r4, #1
    90f2:	b2e4      	uxtb	r4, r4
    90f4:	4653      	mov	r3, sl
    90f6:	464a      	mov	r2, r9
    90f8:	569b      	ldrsb	r3, [r3, r2]
    90fa:	429c      	cmp	r4, r3
    90fc:	dac4      	bge.n	9088 <setNewChannel+0x50>
				if((chMask & BIT0) == BIT0)
    90fe:	4643      	mov	r3, r8
    9100:	422b      	tst	r3, r5
    9102:	d0f1      	beq.n	90e8 <setNewChannel+0xb0>
					pUpdateChidStatus(i, ENABLED);
    9104:	4641      	mov	r1, r8
    9106:	0020      	movs	r0, r4
    9108:	47b8      	blx	r7
    910a:	e7f0      	b.n	90ee <setNewChannel+0xb6>
    910c:	20001404 	.word	0x20001404
    9110:	00007fc0 	.word	0x00007fc0
    9114:	0000849d 	.word	0x0000849d
    9118:	000086a9 	.word	0x000086a9
    911c:	00018195 	.word	0x00018195
    9120:	00007ec5 	.word	0x00007ec5
    9124:	00008601 	.word	0x00008601
    9128:	000083f9 	.word	0x000083f9

0000912c <setFrequency>:
{
    912c:	b570      	push	{r4, r5, r6, lr}
    912e:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    9130:	ac02      	add	r4, sp, #8
    9132:	2208      	movs	r2, #8
    9134:	0020      	movs	r0, r4
    9136:	4b3f      	ldr	r3, [pc, #252]	; (9234 <setFrequency+0x108>)
    9138:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    913a:	ab01      	add	r3, sp, #4
    913c:	7922      	ldrb	r2, [r4, #4]
    913e:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    9140:	2200      	movs	r2, #0
    9142:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    9144:	4b3c      	ldr	r3, [pc, #240]	; (9238 <setFrequency+0x10c>)
    9146:	685b      	ldr	r3, [r3, #4]
    9148:	0021      	movs	r1, r4
    914a:	2001      	movs	r0, #1
    914c:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    914e:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    9150:	2808      	cmp	r0, #8
    9152:	d002      	beq.n	915a <setFrequency+0x2e>
}
    9154:	0020      	movs	r0, r4
    9156:	b004      	add	sp, #16
    9158:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    915a:	a901      	add	r1, sp, #4
    915c:	300d      	adds	r0, #13
    915e:	4b37      	ldr	r3, [pc, #220]	; (923c <setFrequency+0x110>)
    9160:	4798      	blx	r3
    9162:	0004      	movs	r4, r0
    9164:	2808      	cmp	r0, #8
    9166:	d001      	beq.n	916c <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    9168:	240a      	movs	r4, #10
    916a:	e7f3      	b.n	9154 <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    916c:	ab02      	add	r3, sp, #8
    916e:	791d      	ldrb	r5, [r3, #4]
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0)
    9170:	2326      	movs	r3, #38	; 0x26
    9172:	4a33      	ldr	r2, [pc, #204]	; (9240 <setFrequency+0x114>)
    9174:	5cd2      	ldrb	r2, [r2, r3]
    9176:	3b23      	subs	r3, #35	; 0x23
    9178:	4113      	asrs	r3, r2
    917a:	07db      	lsls	r3, r3, #31
    917c:	d446      	bmi.n	920c <setFrequency+0xe0>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    917e:	006a      	lsls	r2, r5, #1
    9180:	1952      	adds	r2, r2, r5
    9182:	0090      	lsls	r0, r2, #2
    9184:	a902      	add	r1, sp, #8
    9186:	9d02      	ldr	r5, [sp, #8]
    9188:	4b2d      	ldr	r3, [pc, #180]	; (9240 <setFrequency+0x114>)
    918a:	7a1a      	ldrb	r2, [r3, #8]
    918c:	7a5e      	ldrb	r6, [r3, #9]
    918e:	0236      	lsls	r6, r6, #8
    9190:	4316      	orrs	r6, r2
    9192:	7a9a      	ldrb	r2, [r3, #10]
    9194:	0412      	lsls	r2, r2, #16
    9196:	4316      	orrs	r6, r2
    9198:	7ada      	ldrb	r2, [r3, #11]
    919a:	0612      	lsls	r2, r2, #24
    919c:	4332      	orrs	r2, r6
    919e:	5415      	strb	r5, [r2, r0]
    91a0:	0a2e      	lsrs	r6, r5, #8
    91a2:	1812      	adds	r2, r2, r0
    91a4:	7056      	strb	r6, [r2, #1]
    91a6:	0c2e      	lsrs	r6, r5, #16
    91a8:	7096      	strb	r6, [r2, #2]
    91aa:	0e2d      	lsrs	r5, r5, #24
    91ac:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    91ae:	7a1a      	ldrb	r2, [r3, #8]
    91b0:	7a5d      	ldrb	r5, [r3, #9]
    91b2:	022d      	lsls	r5, r5, #8
    91b4:	4315      	orrs	r5, r2
    91b6:	7a9a      	ldrb	r2, [r3, #10]
    91b8:	0412      	lsls	r2, r2, #16
    91ba:	4315      	orrs	r5, r2
    91bc:	7ada      	ldrb	r2, [r3, #11]
    91be:	0612      	lsls	r2, r2, #24
    91c0:	432a      	orrs	r2, r5
    91c2:	1812      	adds	r2, r2, r0
    91c4:	780d      	ldrb	r5, [r1, #0]
    91c6:	7115      	strb	r5, [r2, #4]
    91c8:	784d      	ldrb	r5, [r1, #1]
    91ca:	7155      	strb	r5, [r2, #5]
    91cc:	788d      	ldrb	r5, [r1, #2]
    91ce:	7195      	strb	r5, [r2, #6]
    91d0:	78c9      	ldrb	r1, [r1, #3]
    91d2:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    91d4:	7a1a      	ldrb	r2, [r3, #8]
    91d6:	7a59      	ldrb	r1, [r3, #9]
    91d8:	0209      	lsls	r1, r1, #8
    91da:	4311      	orrs	r1, r2
    91dc:	7a9a      	ldrb	r2, [r3, #10]
    91de:	0412      	lsls	r2, r2, #16
    91e0:	4311      	orrs	r1, r2
    91e2:	7ada      	ldrb	r2, [r3, #11]
    91e4:	0612      	lsls	r2, r2, #24
    91e6:	430a      	orrs	r2, r1
    91e8:	1812      	adds	r2, r2, r0
    91ea:	7ad1      	ldrb	r1, [r2, #11]
    91ec:	2001      	movs	r0, #1
    91ee:	4301      	orrs	r1, r0
    91f0:	72d1      	strb	r1, [r2, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    91f2:	22fa      	movs	r2, #250	; 0xfa
    91f4:	32ff      	adds	r2, #255	; 0xff
    91f6:	5c9a      	ldrb	r2, [r3, r2]
    91f8:	21fd      	movs	r1, #253	; 0xfd
    91fa:	0049      	lsls	r1, r1, #1
    91fc:	5c58      	ldrb	r0, [r3, r1]
    91fe:	0200      	lsls	r0, r0, #8
    9200:	4310      	orrs	r0, r2
    9202:	b2c1      	uxtb	r1, r0
    9204:	0a00      	lsrs	r0, r0, #8
    9206:	4b0f      	ldr	r3, [pc, #60]	; (9244 <setFrequency+0x118>)
    9208:	4798      	blx	r3
    920a:	e7a3      	b.n	9154 <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    920c:	4a0c      	ldr	r2, [pc, #48]	; (9240 <setFrequency+0x114>)
    920e:	7a16      	ldrb	r6, [r2, #8]
    9210:	7a53      	ldrb	r3, [r2, #9]
    9212:	021b      	lsls	r3, r3, #8
    9214:	4333      	orrs	r3, r6
    9216:	7a96      	ldrb	r6, [r2, #10]
    9218:	0436      	lsls	r6, r6, #16
    921a:	4333      	orrs	r3, r6
    921c:	7ad6      	ldrb	r6, [r2, #11]
    921e:	0636      	lsls	r6, r6, #24
    9220:	431e      	orrs	r6, r3
    9222:	006b      	lsls	r3, r5, #1
    9224:	195b      	adds	r3, r3, r5
    9226:	009b      	lsls	r3, r3, #2
    9228:	18f6      	adds	r6, r6, r3
    922a:	9802      	ldr	r0, [sp, #8]
    922c:	4b06      	ldr	r3, [pc, #24]	; (9248 <setFrequency+0x11c>)
    922e:	4798      	blx	r3
    9230:	7230      	strb	r0, [r6, #8]
    9232:	e7a4      	b.n	917e <setFrequency+0x52>
    9234:	00018195 	.word	0x00018195
    9238:	20000d94 	.word	0x20000d94
    923c:	00007d59 	.word	0x00007d59
    9240:	20001404 	.word	0x20001404
    9244:	0000b745 	.word	0x0000b745
    9248:	00007fe9 	.word	0x00007fe9

0000924c <setDutyCycle>:
{
    924c:	b570      	push	{r4, r5, r6, lr}
    924e:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    9250:	ac01      	add	r4, sp, #4
    9252:	2204      	movs	r2, #4
    9254:	0020      	movs	r0, r4
    9256:	4b2d      	ldr	r3, [pc, #180]	; (930c <setDutyCycle+0xc0>)
    9258:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    925a:	78a5      	ldrb	r5, [r4, #2]
    925c:	466b      	mov	r3, sp
    925e:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    9260:	2301      	movs	r3, #1
    9262:	466a      	mov	r2, sp
    9264:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    9266:	4669      	mov	r1, sp
    9268:	2015      	movs	r0, #21
    926a:	4b29      	ldr	r3, [pc, #164]	; (9310 <setDutyCycle+0xc4>)
    926c:	4798      	blx	r3
    926e:	0004      	movs	r4, r0
    9270:	2808      	cmp	r0, #8
    9272:	d003      	beq.n	927c <setDutyCycle+0x30>
		result = LORAWAN_INVALID_PARAMETER;
    9274:	240a      	movs	r4, #10
}
    9276:	0020      	movs	r0, r4
    9278:	b002      	add	sp, #8
    927a:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    927c:	0069      	lsls	r1, r5, #1
    927e:	1949      	adds	r1, r1, r5
    9280:	0089      	lsls	r1, r1, #2
    9282:	4b24      	ldr	r3, [pc, #144]	; (9314 <setDutyCycle+0xc8>)
    9284:	7a1a      	ldrb	r2, [r3, #8]
    9286:	7a58      	ldrb	r0, [r3, #9]
    9288:	0200      	lsls	r0, r0, #8
    928a:	4310      	orrs	r0, r2
    928c:	7a9a      	ldrb	r2, [r3, #10]
    928e:	0412      	lsls	r2, r2, #16
    9290:	4310      	orrs	r0, r2
    9292:	7ada      	ldrb	r2, [r3, #11]
    9294:	0612      	lsls	r2, r2, #24
    9296:	4302      	orrs	r2, r0
    9298:	1852      	adds	r2, r2, r1
    929a:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    929c:	0028      	movs	r0, r5
    929e:	30c8      	adds	r0, #200	; 0xc8
    92a0:	0040      	lsls	r0, r0, #1
    92a2:	aa01      	add	r2, sp, #4
    92a4:	1818      	adds	r0, r3, r0
    92a6:	7816      	ldrb	r6, [r2, #0]
    92a8:	7186      	strb	r6, [r0, #6]
    92aa:	7852      	ldrb	r2, [r2, #1]
    92ac:	71c2      	strb	r2, [r0, #7]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    92ae:	7b18      	ldrb	r0, [r3, #12]
    92b0:	7b5a      	ldrb	r2, [r3, #13]
    92b2:	0212      	lsls	r2, r2, #8
    92b4:	4302      	orrs	r2, r0
    92b6:	7b98      	ldrb	r0, [r3, #14]
    92b8:	0400      	lsls	r0, r0, #16
    92ba:	4302      	orrs	r2, r0
    92bc:	7bd8      	ldrb	r0, [r3, #15]
    92be:	0600      	lsls	r0, r0, #24
    92c0:	4310      	orrs	r0, r2
    92c2:	006a      	lsls	r2, r5, #1
    92c4:	1952      	adds	r2, r2, r5
    92c6:	0092      	lsls	r2, r2, #2
    92c8:	1812      	adds	r2, r2, r0
    92ca:	2000      	movs	r0, #0
    92cc:	7210      	strb	r0, [r2, #8]
    92ce:	7250      	strb	r0, [r2, #9]
    92d0:	7290      	strb	r0, [r2, #10]
    92d2:	72d0      	strb	r0, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    92d4:	7a1d      	ldrb	r5, [r3, #8]
    92d6:	7a5a      	ldrb	r2, [r3, #9]
    92d8:	0212      	lsls	r2, r2, #8
    92da:	432a      	orrs	r2, r5
    92dc:	7a9d      	ldrb	r5, [r3, #10]
    92de:	042d      	lsls	r5, r5, #16
    92e0:	432a      	orrs	r2, r5
    92e2:	7add      	ldrb	r5, [r3, #11]
    92e4:	062d      	lsls	r5, r5, #24
    92e6:	4315      	orrs	r5, r2
    92e8:	186d      	adds	r5, r5, r1
    92ea:	7aea      	ldrb	r2, [r5, #11]
    92ec:	2104      	movs	r1, #4
    92ee:	430a      	orrs	r2, r1
    92f0:	72ea      	strb	r2, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    92f2:	22fa      	movs	r2, #250	; 0xfa
    92f4:	32ff      	adds	r2, #255	; 0xff
    92f6:	5c9a      	ldrb	r2, [r3, r2]
    92f8:	21fd      	movs	r1, #253	; 0xfd
    92fa:	0049      	lsls	r1, r1, #1
    92fc:	5c58      	ldrb	r0, [r3, r1]
    92fe:	0200      	lsls	r0, r0, #8
    9300:	4310      	orrs	r0, r2
    9302:	b2c1      	uxtb	r1, r0
    9304:	0a00      	lsrs	r0, r0, #8
    9306:	4b04      	ldr	r3, [pc, #16]	; (9318 <setDutyCycle+0xcc>)
    9308:	4798      	blx	r3
    930a:	e7b4      	b.n	9276 <setDutyCycle+0x2a>
    930c:	00018195 	.word	0x00018195
    9310:	00007d59 	.word	0x00007d59
    9314:	20001404 	.word	0x20001404
    9318:	0000b745 	.word	0x0000b745

0000931c <LORAREG_GetAttr_DutyCycleTimer>:
{
    931c:	b5f0      	push	{r4, r5, r6, r7, lr}
    931e:	46d6      	mov	lr, sl
    9320:	464f      	mov	r7, r9
    9322:	4646      	mov	r6, r8
    9324:	b5c0      	push	{r6, r7, lr}
    9326:	b084      	sub	sp, #16
    9328:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    932a:	780b      	ldrb	r3, [r1, #0]
    932c:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    932e:	2322      	movs	r3, #34	; 0x22
    9330:	4a5b      	ldr	r2, [pc, #364]	; (94a0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    9332:	56d6      	ldrsb	r6, [r2, r3]
    9334:	2e00      	cmp	r6, #0
    9336:	dd66      	ble.n	9406 <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    9338:	0013      	movs	r3, r2
    933a:	7910      	ldrb	r0, [r2, #4]
    933c:	7952      	ldrb	r2, [r2, #5]
    933e:	0212      	lsls	r2, r2, #8
    9340:	4302      	orrs	r2, r0
    9342:	7998      	ldrb	r0, [r3, #6]
    9344:	0400      	lsls	r0, r0, #16
    9346:	4302      	orrs	r2, r0
    9348:	79d8      	ldrb	r0, [r3, #7]
    934a:	0600      	lsls	r0, r0, #24
    934c:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    934e:	7b1f      	ldrb	r7, [r3, #12]
    9350:	7b5a      	ldrb	r2, [r3, #13]
    9352:	0212      	lsls	r2, r2, #8
    9354:	433a      	orrs	r2, r7
    9356:	7b9f      	ldrb	r7, [r3, #14]
    9358:	043f      	lsls	r7, r7, #16
    935a:	433a      	orrs	r2, r7
    935c:	7bdf      	ldrb	r7, [r3, #15]
    935e:	063f      	lsls	r7, r7, #24
    9360:	4317      	orrs	r7, r2
    9362:	2500      	movs	r5, #0
    9364:	2300      	movs	r3, #0
    9366:	2201      	movs	r2, #1
    9368:	4252      	negs	r2, r2
    936a:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    936c:	4a4c      	ldr	r2, [pc, #304]	; (94a0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    936e:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    9370:	4662      	mov	r2, ip
    9372:	9201      	str	r2, [sp, #4]
    9374:	e004      	b.n	9380 <LORAREG_GetAttr_DutyCycleTimer+0x64>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    9376:	3301      	adds	r3, #1
    9378:	b2db      	uxtb	r3, r3
    937a:	001d      	movs	r5, r3
    937c:	42b3      	cmp	r3, r6
    937e:	da27      	bge.n	93d0 <LORAREG_GetAttr_DutyCycleTimer+0xb4>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    9380:	0059      	lsls	r1, r3, #1
    9382:	1841      	adds	r1, r0, r1
    9384:	780a      	ldrb	r2, [r1, #0]
    9386:	2a00      	cmp	r2, #0
    9388:	d0f5      	beq.n	9376 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    938a:	006a      	lsls	r2, r5, #1
    938c:	1952      	adds	r2, r2, r5
    938e:	0092      	lsls	r2, r2, #2
    9390:	4442      	add	r2, r8
    9392:	3294      	adds	r2, #148	; 0x94
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    9394:	7815      	ldrb	r5, [r2, #0]
    9396:	006a      	lsls	r2, r5, #1
    9398:	1952      	adds	r2, r2, r5
    939a:	0092      	lsls	r2, r2, #2
    939c:	18ba      	adds	r2, r7, r2
    939e:	7a15      	ldrb	r5, [r2, #8]
    93a0:	7a54      	ldrb	r4, [r2, #9]
    93a2:	0224      	lsls	r4, r4, #8
    93a4:	4325      	orrs	r5, r4
    93a6:	7a94      	ldrb	r4, [r2, #10]
    93a8:	0424      	lsls	r4, r4, #16
    93aa:	4325      	orrs	r5, r4
    93ac:	7ad2      	ldrb	r2, [r2, #11]
    93ae:	0612      	lsls	r2, r2, #24
    93b0:	432a      	orrs	r2, r5
    93b2:	d0e0      	beq.n	9376 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    93b4:	454a      	cmp	r2, r9
    93b6:	d8de      	bhi.n	9376 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    93b8:	784d      	ldrb	r5, [r1, #1]
    93ba:	072d      	lsls	r5, r5, #28
    93bc:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    93be:	45ac      	cmp	ip, r5
    93c0:	dbd9      	blt.n	9376 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    93c2:	7849      	ldrb	r1, [r1, #1]
    93c4:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    93c6:	9c01      	ldr	r4, [sp, #4]
    93c8:	428c      	cmp	r4, r1
    93ca:	dcd4      	bgt.n	9376 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    93cc:	4691      	mov	r9, r2
    93ce:	e7d2      	b.n	9376 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    if((UINT32_MAX != minimSubBandTimer) && (minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout))
    93d0:	464b      	mov	r3, r9
    93d2:	3301      	adds	r3, #1
    93d4:	d017      	beq.n	9406 <LORAREG_GetAttr_DutyCycleTimer+0xea>
    93d6:	4932      	ldr	r1, [pc, #200]	; (94a0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    93d8:	23d1      	movs	r3, #209	; 0xd1
    93da:	005b      	lsls	r3, r3, #1
    93dc:	5ccb      	ldrb	r3, [r1, r3]
    93de:	22a4      	movs	r2, #164	; 0xa4
    93e0:	32ff      	adds	r2, #255	; 0xff
    93e2:	5c8a      	ldrb	r2, [r1, r2]
    93e4:	0212      	lsls	r2, r2, #8
    93e6:	431a      	orrs	r2, r3
    93e8:	23d2      	movs	r3, #210	; 0xd2
    93ea:	005b      	lsls	r3, r3, #1
    93ec:	5ccb      	ldrb	r3, [r1, r3]
    93ee:	041b      	lsls	r3, r3, #16
    93f0:	431a      	orrs	r2, r3
    93f2:	23a6      	movs	r3, #166	; 0xa6
    93f4:	33ff      	adds	r3, #255	; 0xff
    93f6:	5ccb      	ldrb	r3, [r1, r3]
    93f8:	061b      	lsls	r3, r3, #24
    93fa:	4313      	orrs	r3, r2
    93fc:	4599      	cmp	r9, r3
    93fe:	d302      	bcc.n	9406 <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    minDutyCycleTimer = minimSubBandTimer;
    9400:	464b      	mov	r3, r9
    9402:	9303      	str	r3, [sp, #12]
    9404:	e013      	b.n	942e <LORAREG_GetAttr_DutyCycleTimer+0x112>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    9406:	4926      	ldr	r1, [pc, #152]	; (94a0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    9408:	23d1      	movs	r3, #209	; 0xd1
    940a:	005b      	lsls	r3, r3, #1
    940c:	5ccb      	ldrb	r3, [r1, r3]
    940e:	22a4      	movs	r2, #164	; 0xa4
    9410:	32ff      	adds	r2, #255	; 0xff
    9412:	5c8a      	ldrb	r2, [r1, r2]
    9414:	0212      	lsls	r2, r2, #8
    9416:	431a      	orrs	r2, r3
    9418:	23d2      	movs	r3, #210	; 0xd2
    941a:	005b      	lsls	r3, r3, #1
    941c:	5ccb      	ldrb	r3, [r1, r3]
    941e:	041b      	lsls	r3, r3, #16
    9420:	431a      	orrs	r2, r3
    9422:	23a6      	movs	r3, #166	; 0xa6
    9424:	33ff      	adds	r3, #255	; 0xff
    9426:	5ccb      	ldrb	r3, [r1, r3]
    9428:	061b      	lsls	r3, r3, #24
    942a:	4313      	orrs	r3, r2
    942c:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    942e:	491c      	ldr	r1, [pc, #112]	; (94a0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    9430:	7c0b      	ldrb	r3, [r1, #16]
    9432:	7c4a      	ldrb	r2, [r1, #17]
    9434:	0212      	lsls	r2, r2, #8
    9436:	431a      	orrs	r2, r3
    9438:	7c8b      	ldrb	r3, [r1, #18]
    943a:	041b      	lsls	r3, r3, #16
    943c:	431a      	orrs	r2, r3
    943e:	7ccb      	ldrb	r3, [r1, #19]
    9440:	061b      	lsls	r3, r3, #24
    9442:	4313      	orrs	r3, r2
    9444:	7918      	ldrb	r0, [r3, #4]
    9446:	4b17      	ldr	r3, [pc, #92]	; (94a4 <LORAREG_GetAttr_DutyCycleTimer+0x188>)
    9448:	4798      	blx	r3
	if( minDutyCycleTimer != 0)
    944a:	9e03      	ldr	r6, [sp, #12]
    944c:	2e00      	cmp	r6, #0
    944e:	d01b      	beq.n	9488 <LORAREG_GetAttr_DutyCycleTimer+0x16c>
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    9450:	4913      	ldr	r1, [pc, #76]	; (94a0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    9452:	7c0b      	ldrb	r3, [r1, #16]
    9454:	7c4a      	ldrb	r2, [r1, #17]
    9456:	0212      	lsls	r2, r2, #8
    9458:	431a      	orrs	r2, r3
    945a:	7c8b      	ldrb	r3, [r1, #18]
    945c:	041b      	lsls	r3, r3, #16
    945e:	431a      	orrs	r2, r3
    9460:	7ccb      	ldrb	r3, [r1, #19]
    9462:	061b      	lsls	r3, r3, #24
    9464:	4313      	orrs	r3, r2
    9466:	781d      	ldrb	r5, [r3, #0]
    9468:	785a      	ldrb	r2, [r3, #1]
    946a:	0212      	lsls	r2, r2, #8
    946c:	432a      	orrs	r2, r5
    946e:	789d      	ldrb	r5, [r3, #2]
    9470:	042d      	lsls	r5, r5, #16
    9472:	432a      	orrs	r2, r5
    9474:	78dd      	ldrb	r5, [r3, #3]
    9476:	062d      	lsls	r5, r5, #24
    9478:	4315      	orrs	r5, r2
    947a:	21fa      	movs	r1, #250	; 0xfa
    947c:	0089      	lsls	r1, r1, #2
    947e:	4b0a      	ldr	r3, [pc, #40]	; (94a8 <LORAREG_GetAttr_DutyCycleTimer+0x18c>)
    9480:	4798      	blx	r3
    9482:	1a2d      	subs	r5, r5, r0
		minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    9484:	1b75      	subs	r5, r6, r5
    9486:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    9488:	2204      	movs	r2, #4
    948a:	a903      	add	r1, sp, #12
    948c:	9800      	ldr	r0, [sp, #0]
    948e:	4b07      	ldr	r3, [pc, #28]	; (94ac <LORAREG_GetAttr_DutyCycleTimer+0x190>)
    9490:	4798      	blx	r3
}
    9492:	2008      	movs	r0, #8
    9494:	b004      	add	sp, #16
    9496:	bc1c      	pop	{r2, r3, r4}
    9498:	4690      	mov	r8, r2
    949a:	4699      	mov	r9, r3
    949c:	46a2      	mov	sl, r4
    949e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94a0:	20001404 	.word	0x20001404
    94a4:	0000c661 	.word	0x0000c661
    94a8:	00014b71 	.word	0x00014b71
    94ac:	00018195 	.word	0x00018195

000094b0 <setDutyCycleTimer>:
{
    94b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    94b2:	46de      	mov	lr, fp
    94b4:	4657      	mov	r7, sl
    94b6:	464e      	mov	r6, r9
    94b8:	4645      	mov	r5, r8
    94ba:	b5e0      	push	{r5, r6, r7, lr}
    94bc:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    94be:	ac04      	add	r4, sp, #16
    94c0:	2206      	movs	r2, #6
    94c2:	0020      	movs	r0, r4
    94c4:	4bbc      	ldr	r3, [pc, #752]	; (97b8 <setDutyCycleTimer+0x308>)
    94c6:	4798      	blx	r3
	if(updateDCTimer.joining != 1)
    94c8:	7923      	ldrb	r3, [r4, #4]
    94ca:	2b00      	cmp	r3, #0
    94cc:	d007      	beq.n	94de <setDutyCycleTimer+0x2e>
}
    94ce:	2008      	movs	r0, #8
    94d0:	b007      	add	sp, #28
    94d2:	bc3c      	pop	{r2, r3, r4, r5}
    94d4:	4690      	mov	r8, r2
    94d6:	4699      	mov	r9, r3
    94d8:	46a2      	mov	sl, r4
    94da:	46ab      	mov	fp, r5
    94dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    94de:	49b7      	ldr	r1, [pc, #732]	; (97bc <setDutyCycleTimer+0x30c>)
    94e0:	7a0b      	ldrb	r3, [r1, #8]
    94e2:	7a4a      	ldrb	r2, [r1, #9]
    94e4:	0212      	lsls	r2, r2, #8
    94e6:	4313      	orrs	r3, r2
    94e8:	7a8a      	ldrb	r2, [r1, #10]
    94ea:	0412      	lsls	r2, r2, #16
    94ec:	431a      	orrs	r2, r3
    94ee:	7acb      	ldrb	r3, [r1, #11]
    94f0:	061b      	lsls	r3, r3, #24
    94f2:	431a      	orrs	r2, r3
    94f4:	2327      	movs	r3, #39	; 0x27
    94f6:	5cc8      	ldrb	r0, [r1, r3]
    94f8:	0043      	lsls	r3, r0, #1
    94fa:	181b      	adds	r3, r3, r0
    94fc:	009b      	lsls	r3, r3, #2
    94fe:	189b      	adds	r3, r3, r2
    9500:	7a1f      	ldrb	r7, [r3, #8]
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    9502:	007c      	lsls	r4, r7, #1
    9504:	19e4      	adds	r4, r4, r7
    9506:	00a4      	lsls	r4, r4, #2
    9508:	aa04      	add	r2, sp, #16
    950a:	8815      	ldrh	r5, [r2, #0]
    950c:	7b08      	ldrb	r0, [r1, #12]
    950e:	7b4b      	ldrb	r3, [r1, #13]
    9510:	021b      	lsls	r3, r3, #8
    9512:	4303      	orrs	r3, r0
    9514:	7b88      	ldrb	r0, [r1, #14]
    9516:	0400      	lsls	r0, r0, #16
    9518:	4303      	orrs	r3, r0
    951a:	7bc8      	ldrb	r0, [r1, #15]
    951c:	0600      	lsls	r0, r0, #24
    951e:	4318      	orrs	r0, r3
    9520:	003e      	movs	r6, r7
    9522:	36c8      	adds	r6, #200	; 0xc8
    9524:	0076      	lsls	r6, r6, #1
    9526:	198e      	adds	r6, r1, r6
    9528:	79b3      	ldrb	r3, [r6, #6]
    952a:	469c      	mov	ip, r3
    952c:	79f3      	ldrb	r3, [r6, #7]
    952e:	021b      	lsls	r3, r3, #8
    9530:	4666      	mov	r6, ip
    9532:	4333      	orrs	r3, r6
    9534:	3b01      	subs	r3, #1
    9536:	436b      	muls	r3, r5
    9538:	1900      	adds	r0, r0, r4
    953a:	7203      	strb	r3, [r0, #8]
    953c:	0a1e      	lsrs	r6, r3, #8
    953e:	7246      	strb	r6, [r0, #9]
    9540:	0c1e      	lsrs	r6, r3, #16
    9542:	7286      	strb	r6, [r0, #10]
    9544:	0e1b      	lsrs	r3, r3, #24
    9546:	72c3      	strb	r3, [r0, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    9548:	8853      	ldrh	r3, [r2, #2]
    954a:	3b01      	subs	r3, #1
    954c:	436b      	muls	r3, r5
    954e:	22d1      	movs	r2, #209	; 0xd1
    9550:	0052      	lsls	r2, r2, #1
    9552:	548b      	strb	r3, [r1, r2]
    9554:	0a18      	lsrs	r0, r3, #8
    9556:	000a      	movs	r2, r1
    9558:	32a3      	adds	r2, #163	; 0xa3
    955a:	32ff      	adds	r2, #255	; 0xff
    955c:	7050      	strb	r0, [r2, #1]
    955e:	0c18      	lsrs	r0, r3, #16
    9560:	7090      	strb	r0, [r2, #2]
    9562:	0e1b      	lsrs	r3, r3, #24
    9564:	70d3      	strb	r3, [r2, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    9566:	7c0b      	ldrb	r3, [r1, #16]
    9568:	7c4a      	ldrb	r2, [r1, #17]
    956a:	0212      	lsls	r2, r2, #8
    956c:	431a      	orrs	r2, r3
    956e:	7c8b      	ldrb	r3, [r1, #18]
    9570:	041b      	lsls	r3, r3, #16
    9572:	431a      	orrs	r2, r3
    9574:	7ccb      	ldrb	r3, [r1, #19]
    9576:	061b      	lsls	r3, r3, #24
    9578:	4313      	orrs	r3, r2
    957a:	7918      	ldrb	r0, [r3, #4]
    957c:	4b90      	ldr	r3, [pc, #576]	; (97c0 <setDutyCycleTimer+0x310>)
    957e:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    9580:	2300      	movs	r3, #0
    9582:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    9584:	2800      	cmp	r0, #0
    9586:	d124      	bne.n	95d2 <setDutyCycleTimer+0x122>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    9588:	4a8c      	ldr	r2, [pc, #560]	; (97bc <setDutyCycleTimer+0x30c>)
    958a:	7b13      	ldrb	r3, [r2, #12]
    958c:	7b51      	ldrb	r1, [r2, #13]
    958e:	0209      	lsls	r1, r1, #8
    9590:	4319      	orrs	r1, r3
    9592:	7b93      	ldrb	r3, [r2, #14]
    9594:	041b      	lsls	r3, r3, #16
    9596:	4319      	orrs	r1, r3
    9598:	7bd3      	ldrb	r3, [r2, #15]
    959a:	061b      	lsls	r3, r3, #24
    959c:	430b      	orrs	r3, r1
    959e:	191c      	adds	r4, r3, r4
    95a0:	7a20      	ldrb	r0, [r4, #8]
    95a2:	7a63      	ldrb	r3, [r4, #9]
    95a4:	021b      	lsls	r3, r3, #8
    95a6:	4303      	orrs	r3, r0
    95a8:	7aa0      	ldrb	r0, [r4, #10]
    95aa:	0400      	lsls	r0, r0, #16
    95ac:	4303      	orrs	r3, r0
    95ae:	7ae0      	ldrb	r0, [r4, #11]
    95b0:	0600      	lsls	r0, r0, #24
    95b2:	4318      	orrs	r0, r3
    95b4:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    95b6:	2321      	movs	r3, #33	; 0x21
    95b8:	5cd3      	ldrb	r3, [r2, r3]
    95ba:	2b00      	cmp	r3, #0
    95bc:	d100      	bne.n	95c0 <setDutyCycleTimer+0x110>
    95be:	e08d      	b.n	96dc <setDutyCycleTimer+0x22c>
    95c0:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    95c2:	4d7e      	ldr	r5, [pc, #504]	; (97bc <setDutyCycleTimer+0x30c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    95c4:	002e      	movs	r6, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    95c6:	2300      	movs	r3, #0
    95c8:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    95ca:	46a8      	mov	r8, r5
    95cc:	2321      	movs	r3, #33	; 0x21
    95ce:	469c      	mov	ip, r3
    95d0:	e042      	b.n	9658 <setDutyCycleTimer+0x1a8>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    95d2:	4d7a      	ldr	r5, [pc, #488]	; (97bc <setDutyCycleTimer+0x30c>)
    95d4:	7c2b      	ldrb	r3, [r5, #16]
    95d6:	7c6a      	ldrb	r2, [r5, #17]
    95d8:	0212      	lsls	r2, r2, #8
    95da:	431a      	orrs	r2, r3
    95dc:	7cab      	ldrb	r3, [r5, #18]
    95de:	041b      	lsls	r3, r3, #16
    95e0:	431a      	orrs	r2, r3
    95e2:	7ceb      	ldrb	r3, [r5, #19]
    95e4:	061b      	lsls	r3, r3, #24
    95e6:	4313      	orrs	r3, r2
    95e8:	7918      	ldrb	r0, [r3, #4]
    95ea:	4b76      	ldr	r3, [pc, #472]	; (97c4 <setDutyCycleTimer+0x314>)
    95ec:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    95ee:	7c2b      	ldrb	r3, [r5, #16]
    95f0:	7c6a      	ldrb	r2, [r5, #17]
    95f2:	0212      	lsls	r2, r2, #8
    95f4:	431a      	orrs	r2, r3
    95f6:	7cab      	ldrb	r3, [r5, #18]
    95f8:	041b      	lsls	r3, r3, #16
    95fa:	431a      	orrs	r2, r3
    95fc:	7ceb      	ldrb	r3, [r5, #19]
    95fe:	061b      	lsls	r3, r3, #24
    9600:	4313      	orrs	r3, r2
    9602:	7918      	ldrb	r0, [r3, #4]
    9604:	4b70      	ldr	r3, [pc, #448]	; (97c8 <setDutyCycleTimer+0x318>)
    9606:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    9608:	7c2b      	ldrb	r3, [r5, #16]
    960a:	7c6a      	ldrb	r2, [r5, #17]
    960c:	0212      	lsls	r2, r2, #8
    960e:	431a      	orrs	r2, r3
    9610:	7cab      	ldrb	r3, [r5, #18]
    9612:	041b      	lsls	r3, r3, #16
    9614:	431a      	orrs	r2, r3
    9616:	7ceb      	ldrb	r3, [r5, #19]
    9618:	061b      	lsls	r3, r3, #24
    961a:	4313      	orrs	r3, r2
    961c:	781d      	ldrb	r5, [r3, #0]
    961e:	785a      	ldrb	r2, [r3, #1]
    9620:	0212      	lsls	r2, r2, #8
    9622:	432a      	orrs	r2, r5
    9624:	789d      	ldrb	r5, [r3, #2]
    9626:	042d      	lsls	r5, r5, #16
    9628:	432a      	orrs	r2, r5
    962a:	78dd      	ldrb	r5, [r3, #3]
    962c:	062d      	lsls	r5, r5, #24
    962e:	4315      	orrs	r5, r2
    9630:	21fa      	movs	r1, #250	; 0xfa
    9632:	0089      	lsls	r1, r1, #2
    9634:	4b65      	ldr	r3, [pc, #404]	; (97cc <setDutyCycleTimer+0x31c>)
    9636:	4798      	blx	r3
    9638:	1a2b      	subs	r3, r5, r0
    963a:	4699      	mov	r9, r3
    963c:	e7a4      	b.n	9588 <setDutyCycleTimer+0xd8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    963e:	4651      	mov	r1, sl
    9640:	7219      	strb	r1, [r3, #8]
    9642:	7259      	strb	r1, [r3, #9]
    9644:	7299      	strb	r1, [r3, #10]
    9646:	72d9      	strb	r1, [r3, #11]
    9648:	e02c      	b.n	96a4 <setDutyCycleTimer+0x1f4>
	for(i = 0; i < RegParams.maxSubBands; i++)
    964a:	3201      	adds	r2, #1
    964c:	b2d2      	uxtb	r2, r2
    964e:	4643      	mov	r3, r8
    9650:	4661      	mov	r1, ip
    9652:	5c5b      	ldrb	r3, [r3, r1]
    9654:	4293      	cmp	r3, r2
    9656:	d941      	bls.n	96dc <setDutyCycleTimer+0x22c>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    9658:	4297      	cmp	r7, r2
    965a:	d0f6      	beq.n	964a <setDutyCycleTimer+0x19a>
    965c:	0054      	lsls	r4, r2, #1
    965e:	18a4      	adds	r4, r4, r2
    9660:	00a4      	lsls	r4, r4, #2
    9662:	7b2b      	ldrb	r3, [r5, #12]
    9664:	7b69      	ldrb	r1, [r5, #13]
    9666:	0209      	lsls	r1, r1, #8
    9668:	4319      	orrs	r1, r3
    966a:	7bab      	ldrb	r3, [r5, #14]
    966c:	041b      	lsls	r3, r3, #16
    966e:	4319      	orrs	r1, r3
    9670:	7beb      	ldrb	r3, [r5, #15]
    9672:	061b      	lsls	r3, r3, #24
    9674:	430b      	orrs	r3, r1
    9676:	191b      	adds	r3, r3, r4
    9678:	7a18      	ldrb	r0, [r3, #8]
    967a:	7a59      	ldrb	r1, [r3, #9]
    967c:	0209      	lsls	r1, r1, #8
    967e:	4301      	orrs	r1, r0
    9680:	7a98      	ldrb	r0, [r3, #10]
    9682:	0400      	lsls	r0, r0, #16
    9684:	4308      	orrs	r0, r1
    9686:	7ad9      	ldrb	r1, [r3, #11]
    9688:	0609      	lsls	r1, r1, #24
    968a:	4301      	orrs	r1, r0
    968c:	d0dd      	beq.n	964a <setDutyCycleTimer+0x19a>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    968e:	4589      	cmp	r9, r1
    9690:	d2d5      	bcs.n	963e <setDutyCycleTimer+0x18e>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    9692:	4648      	mov	r0, r9
    9694:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    9696:	7219      	strb	r1, [r3, #8]
    9698:	0a08      	lsrs	r0, r1, #8
    969a:	7258      	strb	r0, [r3, #9]
    969c:	0c08      	lsrs	r0, r1, #16
    969e:	7298      	strb	r0, [r3, #10]
    96a0:	0e09      	lsrs	r1, r1, #24
    96a2:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    96a4:	7b33      	ldrb	r3, [r6, #12]
    96a6:	7b71      	ldrb	r1, [r6, #13]
    96a8:	0209      	lsls	r1, r1, #8
    96aa:	4319      	orrs	r1, r3
    96ac:	7bb3      	ldrb	r3, [r6, #14]
    96ae:	041b      	lsls	r3, r3, #16
    96b0:	4319      	orrs	r1, r3
    96b2:	7bf3      	ldrb	r3, [r6, #15]
    96b4:	061b      	lsls	r3, r3, #24
    96b6:	430b      	orrs	r3, r1
    96b8:	191c      	adds	r4, r3, r4
    96ba:	7a23      	ldrb	r3, [r4, #8]
    96bc:	7a61      	ldrb	r1, [r4, #9]
    96be:	0209      	lsls	r1, r1, #8
    96c0:	4319      	orrs	r1, r3
    96c2:	7aa3      	ldrb	r3, [r4, #10]
    96c4:	041b      	lsls	r3, r3, #16
    96c6:	4319      	orrs	r1, r3
    96c8:	7ae3      	ldrb	r3, [r4, #11]
    96ca:	061b      	lsls	r3, r3, #24
    96cc:	430b      	orrs	r3, r1
    96ce:	9903      	ldr	r1, [sp, #12]
    96d0:	428b      	cmp	r3, r1
    96d2:	d8ba      	bhi.n	964a <setDutyCycleTimer+0x19a>
    96d4:	2b00      	cmp	r3, #0
    96d6:	d0b8      	beq.n	964a <setDutyCycleTimer+0x19a>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    96d8:	9303      	str	r3, [sp, #12]
    96da:	e7b6      	b.n	964a <setDutyCycleTimer+0x19a>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    96dc:	4937      	ldr	r1, [pc, #220]	; (97bc <setDutyCycleTimer+0x30c>)
    96de:	23d1      	movs	r3, #209	; 0xd1
    96e0:	005b      	lsls	r3, r3, #1
    96e2:	5ccb      	ldrb	r3, [r1, r3]
    96e4:	22a4      	movs	r2, #164	; 0xa4
    96e6:	32ff      	adds	r2, #255	; 0xff
    96e8:	5c8a      	ldrb	r2, [r1, r2]
    96ea:	0212      	lsls	r2, r2, #8
    96ec:	431a      	orrs	r2, r3
    96ee:	23d2      	movs	r3, #210	; 0xd2
    96f0:	005b      	lsls	r3, r3, #1
    96f2:	5ccb      	ldrb	r3, [r1, r3]
    96f4:	041b      	lsls	r3, r3, #16
    96f6:	431a      	orrs	r2, r3
    96f8:	23a6      	movs	r3, #166	; 0xa6
    96fa:	33ff      	adds	r3, #255	; 0xff
    96fc:	5ccb      	ldrb	r3, [r1, r3]
    96fe:	061b      	lsls	r3, r3, #24
    9700:	4313      	orrs	r3, r2
    9702:	d00f      	beq.n	9724 <setDutyCycleTimer+0x274>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    9704:	4599      	cmp	r9, r3
    9706:	d24b      	bcs.n	97a0 <setDutyCycleTimer+0x2f0>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    9708:	000a      	movs	r2, r1
    970a:	4649      	mov	r1, r9
    970c:	1a5b      	subs	r3, r3, r1
    970e:	21d1      	movs	r1, #209	; 0xd1
    9710:	0049      	lsls	r1, r1, #1
    9712:	5453      	strb	r3, [r2, r1]
    9714:	0a19      	lsrs	r1, r3, #8
    9716:	32a3      	adds	r2, #163	; 0xa3
    9718:	32ff      	adds	r2, #255	; 0xff
    971a:	7051      	strb	r1, [r2, #1]
    971c:	0c19      	lsrs	r1, r3, #16
    971e:	7091      	strb	r1, [r2, #2]
    9720:	0e1b      	lsrs	r3, r3, #24
    9722:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    9724:	4a25      	ldr	r2, [pc, #148]	; (97bc <setDutyCycleTimer+0x30c>)
    9726:	23d1      	movs	r3, #209	; 0xd1
    9728:	005b      	lsls	r3, r3, #1
    972a:	5cd1      	ldrb	r1, [r2, r3]
    972c:	23a4      	movs	r3, #164	; 0xa4
    972e:	33ff      	adds	r3, #255	; 0xff
    9730:	5cd3      	ldrb	r3, [r2, r3]
    9732:	021b      	lsls	r3, r3, #8
    9734:	430b      	orrs	r3, r1
    9736:	21d2      	movs	r1, #210	; 0xd2
    9738:	0049      	lsls	r1, r1, #1
    973a:	5c51      	ldrb	r1, [r2, r1]
    973c:	0409      	lsls	r1, r1, #16
    973e:	430b      	orrs	r3, r1
    9740:	21a6      	movs	r1, #166	; 0xa6
    9742:	31ff      	adds	r1, #255	; 0xff
    9744:	5c51      	ldrb	r1, [r2, r1]
    9746:	0609      	lsls	r1, r1, #24
    9748:	4319      	orrs	r1, r3
    974a:	9a03      	ldr	r2, [sp, #12]
    974c:	4291      	cmp	r1, r2
    974e:	d200      	bcs.n	9752 <setDutyCycleTimer+0x2a2>
    9750:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    9752:	4b1a      	ldr	r3, [pc, #104]	; (97bc <setDutyCycleTimer+0x30c>)
    9754:	7c1a      	ldrb	r2, [r3, #16]
    9756:	7c58      	ldrb	r0, [r3, #17]
    9758:	0200      	lsls	r0, r0, #8
    975a:	4310      	orrs	r0, r2
    975c:	7c9a      	ldrb	r2, [r3, #18]
    975e:	0412      	lsls	r2, r2, #16
    9760:	4310      	orrs	r0, r2
    9762:	7cda      	ldrb	r2, [r3, #19]
    9764:	0612      	lsls	r2, r2, #24
    9766:	4302      	orrs	r2, r0
    9768:	7011      	strb	r1, [r2, #0]
    976a:	0a08      	lsrs	r0, r1, #8
    976c:	7050      	strb	r0, [r2, #1]
    976e:	0c08      	lsrs	r0, r1, #16
    9770:	7090      	strb	r0, [r2, #2]
    9772:	0e08      	lsrs	r0, r1, #24
    9774:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    9776:	22fa      	movs	r2, #250	; 0xfa
    9778:	0092      	lsls	r2, r2, #2
    977a:	4351      	muls	r1, r2
    977c:	7c18      	ldrb	r0, [r3, #16]
    977e:	7c5a      	ldrb	r2, [r3, #17]
    9780:	0212      	lsls	r2, r2, #8
    9782:	4310      	orrs	r0, r2
    9784:	7c9a      	ldrb	r2, [r3, #18]
    9786:	0412      	lsls	r2, r2, #16
    9788:	4302      	orrs	r2, r0
    978a:	7cdb      	ldrb	r3, [r3, #19]
    978c:	061b      	lsls	r3, r3, #24
    978e:	4313      	orrs	r3, r2
    9790:	7918      	ldrb	r0, [r3, #4]
    9792:	2300      	movs	r3, #0
    9794:	9300      	str	r3, [sp, #0]
    9796:	4b0e      	ldr	r3, [pc, #56]	; (97d0 <setDutyCycleTimer+0x320>)
    9798:	2200      	movs	r2, #0
    979a:	4c0e      	ldr	r4, [pc, #56]	; (97d4 <setDutyCycleTimer+0x324>)
    979c:	47a0      	blx	r4
	return result;
    979e:	e696      	b.n	94ce <setDutyCycleTimer+0x1e>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    97a0:	4b06      	ldr	r3, [pc, #24]	; (97bc <setDutyCycleTimer+0x30c>)
    97a2:	2100      	movs	r1, #0
    97a4:	22d1      	movs	r2, #209	; 0xd1
    97a6:	0052      	lsls	r2, r2, #1
    97a8:	5499      	strb	r1, [r3, r2]
    97aa:	189b      	adds	r3, r3, r2
    97ac:	2200      	movs	r2, #0
    97ae:	705a      	strb	r2, [r3, #1]
    97b0:	709a      	strb	r2, [r3, #2]
    97b2:	70da      	strb	r2, [r3, #3]
    97b4:	e7b6      	b.n	9724 <setDutyCycleTimer+0x274>
    97b6:	46c0      	nop			; (mov r8, r8)
    97b8:	00018195 	.word	0x00018195
    97bc:	20001404 	.word	0x20001404
    97c0:	0000c64d 	.word	0x0000c64d
    97c4:	0000c7b9 	.word	0x0000c7b9
    97c8:	0000c661 	.word	0x0000c661
    97cc:	00014b71 	.word	0x00014b71
    97d0:	000097d9 	.word	0x000097d9
    97d4:	0000c4b5 	.word	0x0000c4b5

000097d8 <DutyCycleCallback>:
{
    97d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    97da:	46de      	mov	lr, fp
    97dc:	4657      	mov	r7, sl
    97de:	464e      	mov	r6, r9
    97e0:	4645      	mov	r5, r8
    97e2:	b5e0      	push	{r5, r6, r7, lr}
    97e4:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    97e6:	4980      	ldr	r1, [pc, #512]	; (99e8 <DutyCycleCallback+0x210>)
    97e8:	23d1      	movs	r3, #209	; 0xd1
    97ea:	005b      	lsls	r3, r3, #1
    97ec:	5cca      	ldrb	r2, [r1, r3]
    97ee:	23a4      	movs	r3, #164	; 0xa4
    97f0:	33ff      	adds	r3, #255	; 0xff
    97f2:	5ccb      	ldrb	r3, [r1, r3]
    97f4:	021b      	lsls	r3, r3, #8
    97f6:	431a      	orrs	r2, r3
    97f8:	23d2      	movs	r3, #210	; 0xd2
    97fa:	005b      	lsls	r3, r3, #1
    97fc:	5ccb      	ldrb	r3, [r1, r3]
    97fe:	041b      	lsls	r3, r3, #16
    9800:	4313      	orrs	r3, r2
    9802:	22a6      	movs	r2, #166	; 0xa6
    9804:	32ff      	adds	r2, #255	; 0xff
    9806:	5c8a      	ldrb	r2, [r1, r2]
    9808:	0612      	lsls	r2, r2, #24
    980a:	431a      	orrs	r2, r3
    980c:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    980e:	2321      	movs	r3, #33	; 0x21
    9810:	5ccb      	ldrb	r3, [r1, r3]
    9812:	2b00      	cmp	r3, #0
    9814:	d100      	bne.n	9818 <DutyCycleCallback+0x40>
    9816:	e0df      	b.n	99d8 <DutyCycleCallback+0x200>
    9818:	2600      	movs	r6, #0
    981a:	2300      	movs	r3, #0
    981c:	9304      	str	r3, [sp, #16]
    981e:	3b01      	subs	r3, #1
    9820:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    9822:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    9824:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    9826:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    9828:	2300      	movs	r3, #0
    982a:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    982c:	468a      	mov	sl, r1
    982e:	2321      	movs	r3, #33	; 0x21
    9830:	4699      	mov	r9, r3
    9832:	e00c      	b.n	984e <DutyCycleCallback+0x76>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    9834:	465a      	mov	r2, fp
    9836:	721a      	strb	r2, [r3, #8]
    9838:	725a      	strb	r2, [r3, #9]
    983a:	729a      	strb	r2, [r3, #10]
    983c:	72da      	strb	r2, [r3, #11]
    983e:	e03f      	b.n	98c0 <DutyCycleCallback+0xe8>
    for (i=0; i < RegParams.maxSubBands; i++)
    9840:	3601      	adds	r6, #1
    9842:	b2f6      	uxtb	r6, r6
    9844:	4653      	mov	r3, sl
    9846:	464a      	mov	r2, r9
    9848:	5c9b      	ldrb	r3, [r3, r2]
    984a:	42b3      	cmp	r3, r6
    984c:	d95a      	bls.n	9904 <DutyCycleCallback+0x12c>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    984e:	0071      	lsls	r1, r6, #1
    9850:	1989      	adds	r1, r1, r6
    9852:	0089      	lsls	r1, r1, #2
    9854:	7b3b      	ldrb	r3, [r7, #12]
    9856:	7b7a      	ldrb	r2, [r7, #13]
    9858:	0212      	lsls	r2, r2, #8
    985a:	431a      	orrs	r2, r3
    985c:	7bbb      	ldrb	r3, [r7, #14]
    985e:	041b      	lsls	r3, r3, #16
    9860:	431a      	orrs	r2, r3
    9862:	7bfb      	ldrb	r3, [r7, #15]
    9864:	061b      	lsls	r3, r3, #24
    9866:	4313      	orrs	r3, r2
    9868:	185b      	adds	r3, r3, r1
    986a:	7a1a      	ldrb	r2, [r3, #8]
    986c:	7a58      	ldrb	r0, [r3, #9]
    986e:	0200      	lsls	r0, r0, #8
    9870:	4310      	orrs	r0, r2
    9872:	7a9a      	ldrb	r2, [r3, #10]
    9874:	0412      	lsls	r2, r2, #16
    9876:	4310      	orrs	r0, r2
    9878:	7ada      	ldrb	r2, [r3, #11]
    987a:	0612      	lsls	r2, r2, #24
    987c:	4302      	orrs	r2, r0
    987e:	d0df      	beq.n	9840 <DutyCycleCallback+0x68>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    9880:	4640      	mov	r0, r8
    9882:	7c05      	ldrb	r5, [r0, #16]
    9884:	7c44      	ldrb	r4, [r0, #17]
    9886:	0224      	lsls	r4, r4, #8
    9888:	4325      	orrs	r5, r4
    988a:	7c80      	ldrb	r0, [r0, #18]
    988c:	0400      	lsls	r0, r0, #16
    988e:	4305      	orrs	r5, r0
    9890:	4640      	mov	r0, r8
    9892:	7cc0      	ldrb	r0, [r0, #19]
    9894:	0600      	lsls	r0, r0, #24
    9896:	4328      	orrs	r0, r5
    9898:	7804      	ldrb	r4, [r0, #0]
    989a:	7845      	ldrb	r5, [r0, #1]
    989c:	022d      	lsls	r5, r5, #8
    989e:	4325      	orrs	r5, r4
    98a0:	7884      	ldrb	r4, [r0, #2]
    98a2:	0424      	lsls	r4, r4, #16
    98a4:	4325      	orrs	r5, r4
    98a6:	78c4      	ldrb	r4, [r0, #3]
    98a8:	0624      	lsls	r4, r4, #24
    98aa:	432c      	orrs	r4, r5
    98ac:	42a2      	cmp	r2, r4
    98ae:	d9c1      	bls.n	9834 <DutyCycleCallback+0x5c>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    98b0:	1b12      	subs	r2, r2, r4
    98b2:	721a      	strb	r2, [r3, #8]
    98b4:	0a10      	lsrs	r0, r2, #8
    98b6:	7258      	strb	r0, [r3, #9]
    98b8:	0c10      	lsrs	r0, r2, #16
    98ba:	7298      	strb	r0, [r3, #10]
    98bc:	0e12      	lsrs	r2, r2, #24
    98be:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    98c0:	4663      	mov	r3, ip
    98c2:	7b1b      	ldrb	r3, [r3, #12]
    98c4:	4662      	mov	r2, ip
    98c6:	7b52      	ldrb	r2, [r2, #13]
    98c8:	0212      	lsls	r2, r2, #8
    98ca:	431a      	orrs	r2, r3
    98cc:	4663      	mov	r3, ip
    98ce:	7b9b      	ldrb	r3, [r3, #14]
    98d0:	041b      	lsls	r3, r3, #16
    98d2:	431a      	orrs	r2, r3
    98d4:	4663      	mov	r3, ip
    98d6:	7bdb      	ldrb	r3, [r3, #15]
    98d8:	061b      	lsls	r3, r3, #24
    98da:	4313      	orrs	r3, r2
    98dc:	1859      	adds	r1, r3, r1
    98de:	7a0b      	ldrb	r3, [r1, #8]
    98e0:	7a4a      	ldrb	r2, [r1, #9]
    98e2:	0212      	lsls	r2, r2, #8
    98e4:	431a      	orrs	r2, r3
    98e6:	7a8b      	ldrb	r3, [r1, #10]
    98e8:	041b      	lsls	r3, r3, #16
    98ea:	431a      	orrs	r2, r3
    98ec:	7acb      	ldrb	r3, [r1, #11]
    98ee:	061b      	lsls	r3, r3, #24
    98f0:	4313      	orrs	r3, r2
    98f2:	9a03      	ldr	r2, [sp, #12]
    98f4:	4293      	cmp	r3, r2
    98f6:	d8a3      	bhi.n	9840 <DutyCycleCallback+0x68>
    98f8:	2b00      	cmp	r3, #0
    98fa:	d0a1      	beq.n	9840 <DutyCycleCallback+0x68>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    98fc:	9303      	str	r3, [sp, #12]
                found = 1;
    98fe:	2301      	movs	r3, #1
    9900:	9304      	str	r3, [sp, #16]
    9902:	e79d      	b.n	9840 <DutyCycleCallback+0x68>
    if (( DutyCycleTimeout != 0 ))
    9904:	9b05      	ldr	r3, [sp, #20]
    9906:	2b00      	cmp	r3, #0
    9908:	d031      	beq.n	996e <DutyCycleCallback+0x196>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    990a:	4937      	ldr	r1, [pc, #220]	; (99e8 <DutyCycleCallback+0x210>)
    990c:	7c0b      	ldrb	r3, [r1, #16]
    990e:	7c4a      	ldrb	r2, [r1, #17]
    9910:	0212      	lsls	r2, r2, #8
    9912:	431a      	orrs	r2, r3
    9914:	7c8b      	ldrb	r3, [r1, #18]
    9916:	041b      	lsls	r3, r3, #16
    9918:	431a      	orrs	r2, r3
    991a:	7ccb      	ldrb	r3, [r1, #19]
    991c:	061b      	lsls	r3, r3, #24
    991e:	4313      	orrs	r3, r2
    9920:	7819      	ldrb	r1, [r3, #0]
    9922:	785a      	ldrb	r2, [r3, #1]
    9924:	0212      	lsls	r2, r2, #8
    9926:	430a      	orrs	r2, r1
    9928:	7899      	ldrb	r1, [r3, #2]
    992a:	0409      	lsls	r1, r1, #16
    992c:	430a      	orrs	r2, r1
    992e:	78d9      	ldrb	r1, [r3, #3]
    9930:	0609      	lsls	r1, r1, #24
    9932:	4311      	orrs	r1, r2
    9934:	9a05      	ldr	r2, [sp, #20]
    9936:	428a      	cmp	r2, r1
    9938:	d90f      	bls.n	995a <DutyCycleCallback+0x182>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    993a:	1a51      	subs	r1, r2, r1
    993c:	4b2a      	ldr	r3, [pc, #168]	; (99e8 <DutyCycleCallback+0x210>)
    993e:	22d1      	movs	r2, #209	; 0xd1
    9940:	0052      	lsls	r2, r2, #1
    9942:	5499      	strb	r1, [r3, r2]
    9944:	0a0a      	lsrs	r2, r1, #8
    9946:	33a3      	adds	r3, #163	; 0xa3
    9948:	33ff      	adds	r3, #255	; 0xff
    994a:	705a      	strb	r2, [r3, #1]
    994c:	0c0a      	lsrs	r2, r1, #16
    994e:	709a      	strb	r2, [r3, #2]
    9950:	0e0a      	lsrs	r2, r1, #24
    9952:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    9954:	2900      	cmp	r1, #0
    9956:	d10e      	bne.n	9976 <DutyCycleCallback+0x19e>
    9958:	e009      	b.n	996e <DutyCycleCallback+0x196>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    995a:	4b23      	ldr	r3, [pc, #140]	; (99e8 <DutyCycleCallback+0x210>)
    995c:	2100      	movs	r1, #0
    995e:	22d1      	movs	r2, #209	; 0xd1
    9960:	0052      	lsls	r2, r2, #1
    9962:	5499      	strb	r1, [r3, r2]
    9964:	189b      	adds	r3, r3, r2
    9966:	2200      	movs	r2, #0
    9968:	705a      	strb	r2, [r3, #1]
    996a:	709a      	strb	r2, [r3, #2]
    996c:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    996e:	9b04      	ldr	r3, [sp, #16]
    9970:	2b00      	cmp	r3, #0
    9972:	d02a      	beq.n	99ca <DutyCycleCallback+0x1f2>
    9974:	2100      	movs	r1, #0
    9976:	9a03      	ldr	r2, [sp, #12]
    9978:	4291      	cmp	r1, r2
    997a:	d200      	bcs.n	997e <DutyCycleCallback+0x1a6>
    997c:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    997e:	4b1a      	ldr	r3, [pc, #104]	; (99e8 <DutyCycleCallback+0x210>)
    9980:	7c1a      	ldrb	r2, [r3, #16]
    9982:	7c58      	ldrb	r0, [r3, #17]
    9984:	0200      	lsls	r0, r0, #8
    9986:	4310      	orrs	r0, r2
    9988:	7c9a      	ldrb	r2, [r3, #18]
    998a:	0412      	lsls	r2, r2, #16
    998c:	4310      	orrs	r0, r2
    998e:	7cda      	ldrb	r2, [r3, #19]
    9990:	0612      	lsls	r2, r2, #24
    9992:	4302      	orrs	r2, r0
    9994:	7011      	strb	r1, [r2, #0]
    9996:	0a08      	lsrs	r0, r1, #8
    9998:	7050      	strb	r0, [r2, #1]
    999a:	0c08      	lsrs	r0, r1, #16
    999c:	7090      	strb	r0, [r2, #2]
    999e:	0e08      	lsrs	r0, r1, #24
    99a0:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    99a2:	22fa      	movs	r2, #250	; 0xfa
    99a4:	0092      	lsls	r2, r2, #2
    99a6:	4351      	muls	r1, r2
    99a8:	7c18      	ldrb	r0, [r3, #16]
    99aa:	7c5a      	ldrb	r2, [r3, #17]
    99ac:	0212      	lsls	r2, r2, #8
    99ae:	4310      	orrs	r0, r2
    99b0:	7c9a      	ldrb	r2, [r3, #18]
    99b2:	0412      	lsls	r2, r2, #16
    99b4:	4302      	orrs	r2, r0
    99b6:	7cdb      	ldrb	r3, [r3, #19]
    99b8:	061b      	lsls	r3, r3, #24
    99ba:	4313      	orrs	r3, r2
    99bc:	7918      	ldrb	r0, [r3, #4]
    99be:	2300      	movs	r3, #0
    99c0:	9300      	str	r3, [sp, #0]
    99c2:	4b0a      	ldr	r3, [pc, #40]	; (99ec <DutyCycleCallback+0x214>)
    99c4:	2200      	movs	r2, #0
    99c6:	4c0a      	ldr	r4, [pc, #40]	; (99f0 <DutyCycleCallback+0x218>)
    99c8:	47a0      	blx	r4
}
    99ca:	b007      	add	sp, #28
    99cc:	bc3c      	pop	{r2, r3, r4, r5}
    99ce:	4690      	mov	r8, r2
    99d0:	4699      	mov	r9, r3
    99d2:	46a2      	mov	sl, r4
    99d4:	46ab      	mov	fp, r5
    99d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    99d8:	9b05      	ldr	r3, [sp, #20]
    99da:	2b00      	cmp	r3, #0
    99dc:	d0f5      	beq.n	99ca <DutyCycleCallback+0x1f2>
    bool found = 0;
    99de:	2300      	movs	r3, #0
    99e0:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    99e2:	3b01      	subs	r3, #1
    99e4:	9303      	str	r3, [sp, #12]
    99e6:	e790      	b.n	990a <DutyCycleCallback+0x132>
    99e8:	20001404 	.word	0x20001404
    99ec:	000097d9 	.word	0x000097d9
    99f0:	0000c4b5 	.word	0x0000c4b5

000099f4 <setLBTTimer>:
    }
}


static StackRetStatus_t setLBTTimer(LorawanRegionalAttributes_t attr, void *attrInput)
{
    99f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    99f6:	46de      	mov	lr, fp
    99f8:	4657      	mov	r7, sl
    99fa:	464e      	mov	r6, r9
    99fc:	4645      	mov	r5, r8
    99fe:	b5e0      	push	{r5, r6, r7, lr}
    9a00:	b085      	sub	sp, #20
    bool found = 0;
    uint8_t i;
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
	LBTTimer_t *pLBTTimer;

    i = RegParams.lastUsedChannelIndex;
    9a02:	4a71      	ldr	r2, [pc, #452]	; (9bc8 <setLBTTimer+0x1d4>)
    9a04:	2327      	movs	r3, #39	; 0x27
	pLBTTimer = &RegParams.cmnParams.paramsType2.LBTTimer;
	
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    9a06:	5cd4      	ldrb	r4, [r2, r3]
    9a08:	0023      	movs	r3, r4
    9a0a:	3352      	adds	r3, #82	; 0x52
    9a0c:	009b      	lsls	r3, r3, #2
    9a0e:	18d3      	adds	r3, r2, r3
    9a10:	0019      	movs	r1, r3
    9a12:	2032      	movs	r0, #50	; 0x32
    9a14:	7258      	strb	r0, [r3, #9]
    9a16:	2300      	movs	r3, #0
    9a18:	728b      	strb	r3, [r1, #10]
    9a1a:	72cb      	strb	r3, [r1, #11]
    9a1c:	730b      	strb	r3, [r1, #12]
	
	if(SwTimerIsRunning(pLBTTimer->timerId))
    9a1e:	2396      	movs	r3, #150	; 0x96
    9a20:	33ff      	adds	r3, #255	; 0xff
    9a22:	5cd0      	ldrb	r0, [r2, r3]
    9a24:	4b69      	ldr	r3, [pc, #420]	; (9bcc <setLBTTimer+0x1d8>)
    9a26:	4798      	blx	r3
    9a28:	2800      	cmp	r0, #0
    9a2a:	d12f      	bne.n	9a8c <setLBTTimer+0x98>
		ticks = SwTimerReadValue(pLBTTimer->timerId);
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
	}
	else
	{
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    9a2c:	4866      	ldr	r0, [pc, #408]	; (9bc8 <setLBTTimer+0x1d4>)
    9a2e:	0023      	movs	r3, r4
    9a30:	3352      	adds	r3, #82	; 0x52
    9a32:	009b      	lsls	r3, r3, #2
    9a34:	18c3      	adds	r3, r0, r3
    9a36:	7a59      	ldrb	r1, [r3, #9]
    9a38:	7a9a      	ldrb	r2, [r3, #10]
    9a3a:	0212      	lsls	r2, r2, #8
    9a3c:	4311      	orrs	r1, r2
    9a3e:	7ada      	ldrb	r2, [r3, #11]
    9a40:	0412      	lsls	r2, r2, #16
    9a42:	430a      	orrs	r2, r1
    9a44:	7b19      	ldrb	r1, [r3, #12]
    9a46:	0609      	lsls	r1, r1, #24
    9a48:	4311      	orrs	r1, r2
    9a4a:	4689      	mov	r9, r1
		found = 1;
	}
	
	for(i = 0; i < RegParams.maxChannels; i++)
    9a4c:	2322      	movs	r3, #34	; 0x22
    9a4e:	56c3      	ldrsb	r3, [r0, r3]
    9a50:	4698      	mov	r8, r3
    9a52:	2b00      	cmp	r3, #0
    9a54:	dc00      	bgt.n	9a58 <setLBTTimer+0x64>
    9a56:	e08d      	b.n	9b74 <setLBTTimer+0x180>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    9a58:	2300      	movs	r3, #0
    9a5a:	469a      	mov	sl, r3
		found = 1;
    9a5c:	3301      	adds	r3, #1
    9a5e:	9303      	str	r3, [sp, #12]
	{
		if(i != RegParams.lastUsedChannelIndex)
    9a60:	4a59      	ldr	r2, [pc, #356]	; (9bc8 <setLBTTimer+0x1d4>)
    9a62:	2327      	movs	r3, #39	; 0x27
    9a64:	5cd0      	ldrb	r0, [r2, r3]
		{
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    9a66:	7911      	ldrb	r1, [r2, #4]
    9a68:	7953      	ldrb	r3, [r2, #5]
    9a6a:	021b      	lsls	r3, r3, #8
    9a6c:	430b      	orrs	r3, r1
    9a6e:	7991      	ldrb	r1, [r2, #6]
    9a70:	0409      	lsls	r1, r1, #16
    9a72:	430b      	orrs	r3, r1
    9a74:	79d1      	ldrb	r1, [r2, #7]
    9a76:	0609      	lsls	r1, r1, #24
    9a78:	4319      	orrs	r1, r3
    9a7a:	2600      	movs	r6, #0
    9a7c:	2200      	movs	r2, #0
				{
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
				}
				else
				{
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    9a7e:	2300      	movs	r3, #0
    9a80:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    9a82:	4653      	mov	r3, sl
    9a84:	9302      	str	r3, [sp, #8]
    9a86:	468b      	mov	fp, r1
    9a88:	4645      	mov	r5, r8
    9a8a:	e039      	b.n	9b00 <setLBTTimer+0x10c>
		SwTimerStop(pLBTTimer->timerId);
    9a8c:	4c4e      	ldr	r4, [pc, #312]	; (9bc8 <setLBTTimer+0x1d4>)
    9a8e:	2596      	movs	r5, #150	; 0x96
    9a90:	35ff      	adds	r5, #255	; 0xff
    9a92:	5d60      	ldrb	r0, [r4, r5]
    9a94:	4b4e      	ldr	r3, [pc, #312]	; (9bd0 <setLBTTimer+0x1dc>)
    9a96:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    9a98:	5d60      	ldrb	r0, [r4, r5]
    9a9a:	4b4e      	ldr	r3, [pc, #312]	; (9bd4 <setLBTTimer+0x1e0>)
    9a9c:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    9a9e:	2322      	movs	r3, #34	; 0x22
    9aa0:	56e3      	ldrsb	r3, [r4, r3]
    9aa2:	4698      	mov	r8, r3
    9aa4:	2b00      	cmp	r3, #0
    9aa6:	dd68      	ble.n	9b7a <setLBTTimer+0x186>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    9aa8:	4a47      	ldr	r2, [pc, #284]	; (9bc8 <setLBTTimer+0x1d4>)
    9aaa:	2392      	movs	r3, #146	; 0x92
    9aac:	33ff      	adds	r3, #255	; 0xff
    9aae:	5cd4      	ldrb	r4, [r2, r3]
    9ab0:	3301      	adds	r3, #1
    9ab2:	5cd3      	ldrb	r3, [r2, r3]
    9ab4:	021b      	lsls	r3, r3, #8
    9ab6:	4323      	orrs	r3, r4
    9ab8:	2194      	movs	r1, #148	; 0x94
    9aba:	31ff      	adds	r1, #255	; 0xff
    9abc:	5c54      	ldrb	r4, [r2, r1]
    9abe:	0424      	lsls	r4, r4, #16
    9ac0:	4323      	orrs	r3, r4
    9ac2:	3101      	adds	r1, #1
    9ac4:	5c54      	ldrb	r4, [r2, r1]
    9ac6:	0624      	lsls	r4, r4, #24
    9ac8:	431c      	orrs	r4, r3
    9aca:	21fa      	movs	r1, #250	; 0xfa
    9acc:	0089      	lsls	r1, r1, #2
    9ace:	4b42      	ldr	r3, [pc, #264]	; (9bd8 <setLBTTimer+0x1e4>)
    9ad0:	4798      	blx	r3
    9ad2:	1a23      	subs	r3, r4, r0
    9ad4:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    9ad6:	2301      	movs	r3, #1
    9ad8:	425b      	negs	r3, r3
    9ada:	4699      	mov	r9, r3
    bool found = 0;
    9adc:	2300      	movs	r3, #0
    9ade:	9303      	str	r3, [sp, #12]
    9ae0:	e7be      	b.n	9a60 <setLBTTimer+0x6c>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    9ae2:	3652      	adds	r6, #82	; 0x52
    9ae4:	00b6      	lsls	r6, r6, #2
    9ae6:	4b38      	ldr	r3, [pc, #224]	; (9bc8 <setLBTTimer+0x1d4>)
    9ae8:	4698      	mov	r8, r3
    9aea:	4446      	add	r6, r8
    9aec:	4661      	mov	r1, ip
    9aee:	7271      	strb	r1, [r6, #9]
    9af0:	72b1      	strb	r1, [r6, #10]
    9af2:	72f1      	strb	r1, [r6, #11]
    9af4:	7331      	strb	r1, [r6, #12]
	for(i = 0; i < RegParams.maxChannels; i++)
    9af6:	3201      	adds	r2, #1
    9af8:	b2d2      	uxtb	r2, r2
    9afa:	0016      	movs	r6, r2
    9afc:	42aa      	cmp	r2, r5
    9afe:	da36      	bge.n	9b6e <setLBTTimer+0x17a>
		if(i != RegParams.lastUsedChannelIndex)
    9b00:	4290      	cmp	r0, r2
    9b02:	d0f8      	beq.n	9af6 <setLBTTimer+0x102>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    9b04:	0053      	lsls	r3, r2, #1
    9b06:	4659      	mov	r1, fp
    9b08:	5c5c      	ldrb	r4, [r3, r1]
    9b0a:	2c00      	cmp	r4, #0
    9b0c:	d0f3      	beq.n	9af6 <setLBTTimer+0x102>
    9b0e:	0033      	movs	r3, r6
    9b10:	3352      	adds	r3, #82	; 0x52
    9b12:	009b      	lsls	r3, r3, #2
    9b14:	4f2c      	ldr	r7, [pc, #176]	; (9bc8 <setLBTTimer+0x1d4>)
    9b16:	46b8      	mov	r8, r7
    9b18:	4443      	add	r3, r8
    9b1a:	7a5f      	ldrb	r7, [r3, #9]
    9b1c:	46ba      	mov	sl, r7
    9b1e:	7a9f      	ldrb	r7, [r3, #10]
    9b20:	023f      	lsls	r7, r7, #8
    9b22:	46b8      	mov	r8, r7
    9b24:	4657      	mov	r7, sl
    9b26:	4641      	mov	r1, r8
    9b28:	430f      	orrs	r7, r1
    9b2a:	7ad9      	ldrb	r1, [r3, #11]
    9b2c:	0409      	lsls	r1, r1, #16
    9b2e:	430f      	orrs	r7, r1
    9b30:	7b1b      	ldrb	r3, [r3, #12]
    9b32:	061b      	lsls	r3, r3, #24
    9b34:	433b      	orrs	r3, r7
    9b36:	d0de      	beq.n	9af6 <setLBTTimer+0x102>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    9b38:	9f02      	ldr	r7, [sp, #8]
    9b3a:	42bb      	cmp	r3, r7
    9b3c:	d9d1      	bls.n	9ae2 <setLBTTimer+0xee>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    9b3e:	1bdb      	subs	r3, r3, r7
    9b40:	3652      	adds	r6, #82	; 0x52
    9b42:	00b6      	lsls	r6, r6, #2
    9b44:	4920      	ldr	r1, [pc, #128]	; (9bc8 <setLBTTimer+0x1d4>)
    9b46:	4688      	mov	r8, r1
    9b48:	4446      	add	r6, r8
    9b4a:	2109      	movs	r1, #9
    9b4c:	4688      	mov	r8, r1
    9b4e:	44b0      	add	r8, r6
    9b50:	7273      	strb	r3, [r6, #9]
    9b52:	0a1e      	lsrs	r6, r3, #8
    9b54:	4641      	mov	r1, r8
    9b56:	704e      	strb	r6, [r1, #1]
    9b58:	0c1e      	lsrs	r6, r3, #16
    9b5a:	708e      	strb	r6, [r1, #2]
    9b5c:	0e1e      	lsrs	r6, r3, #24
    9b5e:	70ce      	strb	r6, [r1, #3]
				}
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    9b60:	454b      	cmp	r3, r9
    9b62:	d8c8      	bhi.n	9af6 <setLBTTimer+0x102>
    9b64:	2b00      	cmp	r3, #0
    9b66:	d0c6      	beq.n	9af6 <setLBTTimer+0x102>
    9b68:	4699      	mov	r9, r3
				{
					minim = RegParams.cmnParams.paramsType2.channelTimer[i];
					found = 1;
    9b6a:	9403      	str	r4, [sp, #12]
    9b6c:	e7c3      	b.n	9af6 <setLBTTimer+0x102>
				}
			}
		}
	}
	if((found == 1) && minim)
    9b6e:	9b03      	ldr	r3, [sp, #12]
    9b70:	2b00      	cmp	r3, #0
    9b72:	d002      	beq.n	9b7a <setLBTTimer+0x186>
    9b74:	464b      	mov	r3, r9
    9b76:	2b00      	cmp	r3, #0
    9b78:	d107      	bne.n	9b8a <setLBTTimer+0x196>
	{
		pLBTTimer->lastTimerValue = minim;
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
	}
	return LORAWAN_SUCCESS;
}
    9b7a:	2008      	movs	r0, #8
    9b7c:	b005      	add	sp, #20
    9b7e:	bc3c      	pop	{r2, r3, r4, r5}
    9b80:	4690      	mov	r8, r2
    9b82:	4699      	mov	r9, r3
    9b84:	46a2      	mov	sl, r4
    9b86:	46ab      	mov	fp, r5
    9b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    9b8a:	4b0f      	ldr	r3, [pc, #60]	; (9bc8 <setLBTTimer+0x1d4>)
    9b8c:	2292      	movs	r2, #146	; 0x92
    9b8e:	32ff      	adds	r2, #255	; 0xff
    9b90:	4649      	mov	r1, r9
    9b92:	5499      	strb	r1, [r3, r2]
    9b94:	464a      	mov	r2, r9
    9b96:	0a11      	lsrs	r1, r2, #8
    9b98:	001a      	movs	r2, r3
    9b9a:	3292      	adds	r2, #146	; 0x92
    9b9c:	32ff      	adds	r2, #255	; 0xff
    9b9e:	7051      	strb	r1, [r2, #1]
    9ba0:	4649      	mov	r1, r9
    9ba2:	0c09      	lsrs	r1, r1, #16
    9ba4:	7091      	strb	r1, [r2, #2]
    9ba6:	4649      	mov	r1, r9
    9ba8:	0e09      	lsrs	r1, r1, #24
    9baa:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    9bac:	21fa      	movs	r1, #250	; 0xfa
    9bae:	0089      	lsls	r1, r1, #2
    9bb0:	464a      	mov	r2, r9
    9bb2:	4351      	muls	r1, r2
    9bb4:	2296      	movs	r2, #150	; 0x96
    9bb6:	32ff      	adds	r2, #255	; 0xff
    9bb8:	5c98      	ldrb	r0, [r3, r2]
    9bba:	2300      	movs	r3, #0
    9bbc:	9300      	str	r3, [sp, #0]
    9bbe:	4b07      	ldr	r3, [pc, #28]	; (9bdc <setLBTTimer+0x1e8>)
    9bc0:	2200      	movs	r2, #0
    9bc2:	4c07      	ldr	r4, [pc, #28]	; (9be0 <setLBTTimer+0x1ec>)
    9bc4:	47a0      	blx	r4
    9bc6:	e7d8      	b.n	9b7a <setLBTTimer+0x186>
    9bc8:	20001404 	.word	0x20001404
    9bcc:	0000c64d 	.word	0x0000c64d
    9bd0:	0000c7b9 	.word	0x0000c7b9
    9bd4:	0000c661 	.word	0x0000c661
    9bd8:	00014b71 	.word	0x00014b71
    9bdc:	00009be5 	.word	0x00009be5
    9be0:	0000c4b5 	.word	0x0000c4b5

00009be4 <LBTChannelPauseCallback>:
{
    9be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9be6:	46de      	mov	lr, fp
    9be8:	4657      	mov	r7, sl
    9bea:	464e      	mov	r6, r9
    9bec:	4645      	mov	r5, r8
    9bee:	b5e0      	push	{r5, r6, r7, lr}
    9bf0:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    9bf2:	2322      	movs	r3, #34	; 0x22
    9bf4:	4a4a      	ldr	r2, [pc, #296]	; (9d20 <LBTChannelPauseCallback+0x13c>)
    9bf6:	56d6      	ldrsb	r6, [r2, r3]
    9bf8:	2e00      	cmp	r6, #0
    9bfa:	dd6a      	ble.n	9cd2 <LBTChannelPauseCallback+0xee>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    9bfc:	0013      	movs	r3, r2
    9bfe:	7915      	ldrb	r5, [r2, #4]
    9c00:	7952      	ldrb	r2, [r2, #5]
    9c02:	0212      	lsls	r2, r2, #8
    9c04:	432a      	orrs	r2, r5
    9c06:	799d      	ldrb	r5, [r3, #6]
    9c08:	042d      	lsls	r5, r5, #16
    9c0a:	432a      	orrs	r2, r5
    9c0c:	79dd      	ldrb	r5, [r3, #7]
    9c0e:	062d      	lsls	r5, r5, #24
    9c10:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    9c12:	2292      	movs	r2, #146	; 0x92
    9c14:	32ff      	adds	r2, #255	; 0xff
    9c16:	5c9f      	ldrb	r7, [r3, r2]
    9c18:	3201      	adds	r2, #1
    9c1a:	5c9a      	ldrb	r2, [r3, r2]
    9c1c:	0212      	lsls	r2, r2, #8
    9c1e:	433a      	orrs	r2, r7
    9c20:	2194      	movs	r1, #148	; 0x94
    9c22:	31ff      	adds	r1, #255	; 0xff
    9c24:	5c5f      	ldrb	r7, [r3, r1]
    9c26:	043f      	lsls	r7, r7, #16
    9c28:	433a      	orrs	r2, r7
    9c2a:	3101      	adds	r1, #1
    9c2c:	5c5f      	ldrb	r7, [r3, r1]
    9c2e:	063f      	lsls	r7, r7, #24
    9c30:	4317      	orrs	r7, r2
    9c32:	9703      	str	r7, [sp, #12]
    9c34:	2000      	movs	r0, #0
    9c36:	2300      	movs	r3, #0
    9c38:	2200      	movs	r2, #0
    9c3a:	4691      	mov	r9, r2
    9c3c:	3a01      	subs	r2, #1
    9c3e:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    9c40:	2200      	movs	r2, #0
    9c42:	4694      	mov	ip, r2
    9c44:	e00e      	b.n	9c64 <LBTChannelPauseCallback+0x80>
    9c46:	3052      	adds	r0, #82	; 0x52
    9c48:	0080      	lsls	r0, r0, #2
    9c4a:	4a35      	ldr	r2, [pc, #212]	; (9d20 <LBTChannelPauseCallback+0x13c>)
    9c4c:	4692      	mov	sl, r2
    9c4e:	4450      	add	r0, sl
    9c50:	4661      	mov	r1, ip
    9c52:	7241      	strb	r1, [r0, #9]
    9c54:	7281      	strb	r1, [r0, #10]
    9c56:	72c1      	strb	r1, [r0, #11]
    9c58:	7301      	strb	r1, [r0, #12]
    for (i=0; i < RegParams.maxChannels; i++)
    9c5a:	3301      	adds	r3, #1
    9c5c:	b2db      	uxtb	r3, r3
    9c5e:	0018      	movs	r0, r3
    9c60:	42b3      	cmp	r3, r6
    9c62:	da33      	bge.n	9ccc <LBTChannelPauseCallback+0xe8>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    9c64:	005a      	lsls	r2, r3, #1
    9c66:	5d54      	ldrb	r4, [r2, r5]
    9c68:	2c00      	cmp	r4, #0
    9c6a:	d0f6      	beq.n	9c5a <LBTChannelPauseCallback+0x76>
    9c6c:	0002      	movs	r2, r0
    9c6e:	3252      	adds	r2, #82	; 0x52
    9c70:	0092      	lsls	r2, r2, #2
    9c72:	492b      	ldr	r1, [pc, #172]	; (9d20 <LBTChannelPauseCallback+0x13c>)
    9c74:	468a      	mov	sl, r1
    9c76:	4452      	add	r2, sl
    9c78:	7a57      	ldrb	r7, [r2, #9]
    9c7a:	46bb      	mov	fp, r7
    9c7c:	7a97      	ldrb	r7, [r2, #10]
    9c7e:	023f      	lsls	r7, r7, #8
    9c80:	46ba      	mov	sl, r7
    9c82:	465f      	mov	r7, fp
    9c84:	4651      	mov	r1, sl
    9c86:	430f      	orrs	r7, r1
    9c88:	7ad1      	ldrb	r1, [r2, #11]
    9c8a:	0409      	lsls	r1, r1, #16
    9c8c:	430f      	orrs	r7, r1
    9c8e:	7b12      	ldrb	r2, [r2, #12]
    9c90:	0612      	lsls	r2, r2, #24
    9c92:	433a      	orrs	r2, r7
    9c94:	d0e1      	beq.n	9c5a <LBTChannelPauseCallback+0x76>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    9c96:	9f03      	ldr	r7, [sp, #12]
    9c98:	42ba      	cmp	r2, r7
    9c9a:	d9d4      	bls.n	9c46 <LBTChannelPauseCallback+0x62>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    9c9c:	1bd2      	subs	r2, r2, r7
    9c9e:	3052      	adds	r0, #82	; 0x52
    9ca0:	0080      	lsls	r0, r0, #2
    9ca2:	491f      	ldr	r1, [pc, #124]	; (9d20 <LBTChannelPauseCallback+0x13c>)
    9ca4:	468a      	mov	sl, r1
    9ca6:	4450      	add	r0, sl
    9ca8:	2109      	movs	r1, #9
    9caa:	468a      	mov	sl, r1
    9cac:	4482      	add	sl, r0
    9cae:	7242      	strb	r2, [r0, #9]
    9cb0:	0a10      	lsrs	r0, r2, #8
    9cb2:	4651      	mov	r1, sl
    9cb4:	7048      	strb	r0, [r1, #1]
    9cb6:	0c10      	lsrs	r0, r2, #16
    9cb8:	7088      	strb	r0, [r1, #2]
    9cba:	0e10      	lsrs	r0, r2, #24
    9cbc:	70c8      	strb	r0, [r1, #3]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    9cbe:	4542      	cmp	r2, r8
    9cc0:	d8cb      	bhi.n	9c5a <LBTChannelPauseCallback+0x76>
    9cc2:	2a00      	cmp	r2, #0
    9cc4:	d0c9      	beq.n	9c5a <LBTChannelPauseCallback+0x76>
                found = 1;
    9cc6:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    9cc8:	4690      	mov	r8, r2
    9cca:	e7c6      	b.n	9c5a <LBTChannelPauseCallback+0x76>
    if ( found == 1 )
    9ccc:	464b      	mov	r3, r9
    9cce:	2b00      	cmp	r3, #0
    9cd0:	d106      	bne.n	9ce0 <LBTChannelPauseCallback+0xfc>
}
    9cd2:	b005      	add	sp, #20
    9cd4:	bc3c      	pop	{r2, r3, r4, r5}
    9cd6:	4690      	mov	r8, r2
    9cd8:	4699      	mov	r9, r3
    9cda:	46a2      	mov	sl, r4
    9cdc:	46ab      	mov	fp, r5
    9cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    9ce0:	4b0f      	ldr	r3, [pc, #60]	; (9d20 <LBTChannelPauseCallback+0x13c>)
    9ce2:	2292      	movs	r2, #146	; 0x92
    9ce4:	32ff      	adds	r2, #255	; 0xff
    9ce6:	4641      	mov	r1, r8
    9ce8:	5499      	strb	r1, [r3, r2]
    9cea:	4642      	mov	r2, r8
    9cec:	0a11      	lsrs	r1, r2, #8
    9cee:	001a      	movs	r2, r3
    9cf0:	3292      	adds	r2, #146	; 0x92
    9cf2:	32ff      	adds	r2, #255	; 0xff
    9cf4:	7051      	strb	r1, [r2, #1]
    9cf6:	4641      	mov	r1, r8
    9cf8:	0c09      	lsrs	r1, r1, #16
    9cfa:	7091      	strb	r1, [r2, #2]
    9cfc:	4641      	mov	r1, r8
    9cfe:	0e09      	lsrs	r1, r1, #24
    9d00:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    9d02:	21fa      	movs	r1, #250	; 0xfa
    9d04:	0089      	lsls	r1, r1, #2
    9d06:	4642      	mov	r2, r8
    9d08:	4351      	muls	r1, r2
    9d0a:	2296      	movs	r2, #150	; 0x96
    9d0c:	32ff      	adds	r2, #255	; 0xff
    9d0e:	5c98      	ldrb	r0, [r3, r2]
    9d10:	2300      	movs	r3, #0
    9d12:	9300      	str	r3, [sp, #0]
    9d14:	4b03      	ldr	r3, [pc, #12]	; (9d24 <LBTChannelPauseCallback+0x140>)
    9d16:	2200      	movs	r2, #0
    9d18:	4c03      	ldr	r4, [pc, #12]	; (9d28 <LBTChannelPauseCallback+0x144>)
    9d1a:	47a0      	blx	r4
}
    9d1c:	e7d9      	b.n	9cd2 <LBTChannelPauseCallback+0xee>
    9d1e:	46c0      	nop			; (mov r8, r8)
    9d20:	20001404 	.word	0x20001404
    9d24:	00009be5 	.word	0x00009be5
    9d28:	0000c4b5 	.word	0x0000c4b5

00009d2c <ValidateDataRangeT2>:
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    9d2c:	784a      	ldrb	r2, [r1, #1]
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    9d2e:	230f      	movs	r3, #15
    9d30:	4013      	ands	r3, r2
    if ( dataRate > RegParams.minDataRate )
    9d32:	4907      	ldr	r1, [pc, #28]	; (9d50 <ValidateDataRangeT2+0x24>)
    9d34:	7f09      	ldrb	r1, [r1, #28]
		retVal = LORAWAN_INVALID_PARAMETER;
    9d36:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9d38:	428b      	cmp	r3, r1
    9d3a:	d900      	bls.n	9d3e <ValidateDataRangeT2+0x12>
}
    9d3c:	4770      	bx	lr
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    9d3e:	0912      	lsrs	r2, r2, #4
		retVal = LORAWAN_INVALID_PARAMETER;
    9d40:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9d42:	428a      	cmp	r2, r1
    9d44:	d8fa      	bhi.n	9d3c <ValidateDataRangeT2+0x10>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9d46:	3802      	subs	r0, #2
	   || (dataRateMax < dataRateMin) )
    9d48:	4293      	cmp	r3, r2
    9d4a:	d9f7      	bls.n	9d3c <ValidateDataRangeT2+0x10>
		retVal = LORAWAN_INVALID_PARAMETER;
    9d4c:	3002      	adds	r0, #2
	return retVal;
    9d4e:	e7f5      	b.n	9d3c <ValidateDataRangeT2+0x10>
    9d50:	20001404 	.word	0x20001404

00009d54 <setDataRangeT2>:
{
    9d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    9d56:	46c6      	mov	lr, r8
    9d58:	b500      	push	{lr}
    9d5a:	b082      	sub	sp, #8
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    9d5c:	780d      	ldrb	r5, [r1, #0]
    9d5e:	784e      	ldrb	r6, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    9d60:	ab01      	add	r3, sp, #4
    9d62:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    9d64:	2201      	movs	r2, #1
    9d66:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    9d68:	2012      	movs	r0, #18
    9d6a:	4b25      	ldr	r3, [pc, #148]	; (9e00 <setDataRangeT2+0xac>)
    9d6c:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    9d6e:	240a      	movs	r4, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    9d70:	2808      	cmp	r0, #8
    9d72:	d004      	beq.n	9d7e <setDataRangeT2+0x2a>
}
    9d74:	0020      	movs	r0, r4
    9d76:	b002      	add	sp, #8
    9d78:	bc04      	pop	{r2}
    9d7a:	4690      	mov	r8, r2
    9d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    9d7e:	a901      	add	r1, sp, #4
    9d80:	300d      	adds	r0, #13
    9d82:	4b20      	ldr	r3, [pc, #128]	; (9e04 <setDataRangeT2+0xb0>)
    9d84:	4798      	blx	r3
    9d86:	0004      	movs	r4, r0
    9d88:	2808      	cmp	r0, #8
    9d8a:	d001      	beq.n	9d90 <setDataRangeT2+0x3c>
		retVal = LORAWAN_INVALID_PARAMETER;
    9d8c:	240a      	movs	r4, #10
    9d8e:	e7f1      	b.n	9d74 <setDataRangeT2+0x20>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    9d90:	4f1d      	ldr	r7, [pc, #116]	; (9e08 <setDataRangeT2+0xb4>)
    9d92:	793b      	ldrb	r3, [r7, #4]
    9d94:	797a      	ldrb	r2, [r7, #5]
    9d96:	0212      	lsls	r2, r2, #8
    9d98:	431a      	orrs	r2, r3
    9d9a:	79bb      	ldrb	r3, [r7, #6]
    9d9c:	041b      	lsls	r3, r3, #16
    9d9e:	431a      	orrs	r2, r3
    9da0:	79fb      	ldrb	r3, [r7, #7]
    9da2:	061b      	lsls	r3, r3, #24
    9da4:	4313      	orrs	r3, r2
    9da6:	006a      	lsls	r2, r5, #1
    9da8:	4690      	mov	r8, r2
    9daa:	4443      	add	r3, r8
    9dac:	705e      	strb	r6, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    9dae:	23f8      	movs	r3, #248	; 0xf8
    9db0:	33ff      	adds	r3, #255	; 0xff
    9db2:	5cfb      	ldrb	r3, [r7, r3]
    9db4:	22fc      	movs	r2, #252	; 0xfc
    9db6:	0052      	lsls	r2, r2, #1
    9db8:	5cb8      	ldrb	r0, [r7, r2]
    9dba:	0200      	lsls	r0, r0, #8
    9dbc:	4318      	orrs	r0, r3
    9dbe:	b2c1      	uxtb	r1, r0
    9dc0:	0a00      	lsrs	r0, r0, #8
    9dc2:	4e12      	ldr	r6, [pc, #72]	; (9e0c <setDataRangeT2+0xb8>)
    9dc4:	47b0      	blx	r6
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    9dc6:	7a3b      	ldrb	r3, [r7, #8]
    9dc8:	7a7a      	ldrb	r2, [r7, #9]
    9dca:	0212      	lsls	r2, r2, #8
    9dcc:	431a      	orrs	r2, r3
    9dce:	7abb      	ldrb	r3, [r7, #10]
    9dd0:	041b      	lsls	r3, r3, #16
    9dd2:	431a      	orrs	r2, r3
    9dd4:	7afb      	ldrb	r3, [r7, #11]
    9dd6:	061b      	lsls	r3, r3, #24
    9dd8:	4313      	orrs	r3, r2
    9dda:	4445      	add	r5, r8
    9ddc:	00ad      	lsls	r5, r5, #2
    9dde:	195d      	adds	r5, r3, r5
    9de0:	7aeb      	ldrb	r3, [r5, #11]
    9de2:	2202      	movs	r2, #2
    9de4:	4313      	orrs	r3, r2
    9de6:	72eb      	strb	r3, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    9de8:	23fa      	movs	r3, #250	; 0xfa
    9dea:	33ff      	adds	r3, #255	; 0xff
    9dec:	5cfb      	ldrb	r3, [r7, r3]
    9dee:	22fd      	movs	r2, #253	; 0xfd
    9df0:	0052      	lsls	r2, r2, #1
    9df2:	5cb8      	ldrb	r0, [r7, r2]
    9df4:	0200      	lsls	r0, r0, #8
    9df6:	4318      	orrs	r0, r3
    9df8:	b2c1      	uxtb	r1, r0
    9dfa:	0a00      	lsrs	r0, r0, #8
    9dfc:	47b0      	blx	r6
    9dfe:	e7b9      	b.n	9d74 <setDataRangeT2+0x20>
    9e00:	00009d2d 	.word	0x00009d2d
    9e04:	00007d59 	.word	0x00007d59
    9e08:	20001404 	.word	0x20001404
    9e0c:	0000b745 	.word	0x0000b745

00009e10 <LORAREG_GetAttr_MaxPayloadT3>:
{
    9e10:	b530      	push	{r4, r5, lr}
	dataRate = *(uint8_t *)attrInput;
    9e12:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    9e14:	4916      	ldr	r1, [pc, #88]	; (9e70 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    9e16:	7f09      	ldrb	r1, [r1, #28]
		result =  LORAWAN_INVALID_PARAMETER;
    9e18:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9e1a:	4299      	cmp	r1, r3
    9e1c:	d215      	bcs.n	9e4a <LORAREG_GetAttr_MaxPayloadT3+0x3a>
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    9e1e:	21ac      	movs	r1, #172	; 0xac
    9e20:	31ff      	adds	r1, #255	; 0xff
    9e22:	4c13      	ldr	r4, [pc, #76]	; (9e70 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    9e24:	5c61      	ldrb	r1, [r4, r1]
    9e26:	07c9      	lsls	r1, r1, #31
    9e28:	d411      	bmi.n	9e4e <LORAREG_GetAttr_MaxPayloadT3+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    9e2a:	4d11      	ldr	r5, [pc, #68]	; (9e70 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    9e2c:	7829      	ldrb	r1, [r5, #0]
    9e2e:	786c      	ldrb	r4, [r5, #1]
    9e30:	0224      	lsls	r4, r4, #8
    9e32:	430c      	orrs	r4, r1
    9e34:	78a9      	ldrb	r1, [r5, #2]
    9e36:	0409      	lsls	r1, r1, #16
    9e38:	430c      	orrs	r4, r1
    9e3a:	78e9      	ldrb	r1, [r5, #3]
    9e3c:	0609      	lsls	r1, r1, #24
    9e3e:	4321      	orrs	r1, r4
    9e40:	00db      	lsls	r3, r3, #3
    9e42:	185b      	adds	r3, r3, r1
    9e44:	789b      	ldrb	r3, [r3, #2]
    9e46:	7013      	strb	r3, [r2, #0]
}
    9e48:	bd30      	pop	{r4, r5, pc}
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9e4a:	3802      	subs	r0, #2
    9e4c:	e7e7      	b.n	9e1e <LORAREG_GetAttr_MaxPayloadT3+0xe>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    9e4e:	0025      	movs	r5, r4
    9e50:	7821      	ldrb	r1, [r4, #0]
    9e52:	7864      	ldrb	r4, [r4, #1]
    9e54:	0224      	lsls	r4, r4, #8
    9e56:	430c      	orrs	r4, r1
    9e58:	78a9      	ldrb	r1, [r5, #2]
    9e5a:	0409      	lsls	r1, r1, #16
    9e5c:	430c      	orrs	r4, r1
    9e5e:	78e9      	ldrb	r1, [r5, #3]
    9e60:	0609      	lsls	r1, r1, #24
    9e62:	4321      	orrs	r1, r4
    9e64:	00db      	lsls	r3, r3, #3
    9e66:	1859      	adds	r1, r3, r1
    9e68:	78cb      	ldrb	r3, [r1, #3]
    9e6a:	7013      	strb	r3, [r2, #0]
    9e6c:	e7ec      	b.n	9e48 <LORAREG_GetAttr_MaxPayloadT3+0x38>
    9e6e:	46c0      	nop			; (mov r8, r8)
    9e70:	20001404 	.word	0x20001404

00009e74 <LORAREG_GetAttr_RxWindowSizeT2>:
{
    9e74:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    9e76:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    9e78:	490c      	ldr	r1, [pc, #48]	; (9eac <LORAREG_GetAttr_RxWindowSizeT2+0x38>)
    9e7a:	7f09      	ldrb	r1, [r1, #28]
		return LORAWAN_INVALID_PARAMETER;
    9e7c:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9e7e:	4299      	cmp	r1, r3
    9e80:	d200      	bcs.n	9e84 <LORAREG_GetAttr_RxWindowSizeT2+0x10>
}
    9e82:	bd10      	pop	{r4, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    9e84:	4c09      	ldr	r4, [pc, #36]	; (9eac <LORAREG_GetAttr_RxWindowSizeT2+0x38>)
    9e86:	7821      	ldrb	r1, [r4, #0]
    9e88:	7860      	ldrb	r0, [r4, #1]
    9e8a:	0200      	lsls	r0, r0, #8
    9e8c:	4308      	orrs	r0, r1
    9e8e:	78a1      	ldrb	r1, [r4, #2]
    9e90:	0409      	lsls	r1, r1, #16
    9e92:	4308      	orrs	r0, r1
    9e94:	78e1      	ldrb	r1, [r4, #3]
    9e96:	0609      	lsls	r1, r1, #24
    9e98:	4301      	orrs	r1, r0
    9e9a:	00db      	lsls	r3, r3, #3
    9e9c:	5c58      	ldrb	r0, [r3, r1]
    9e9e:	185b      	adds	r3, r3, r1
    9ea0:	785b      	ldrb	r3, [r3, #1]
    9ea2:	021b      	lsls	r3, r3, #8
    9ea4:	4303      	orrs	r3, r0
    9ea6:	8013      	strh	r3, [r2, #0]
	return result;
    9ea8:	2008      	movs	r0, #8
    9eaa:	e7ea      	b.n	9e82 <LORAREG_GetAttr_RxWindowSizeT2+0xe>
    9eac:	20001404 	.word	0x20001404

00009eb0 <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    9eb0:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    9eb2:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    9eb4:	490b      	ldr	r1, [pc, #44]	; (9ee4 <LORAREG_GetAttr_RxWindowOffsetT2+0x34>)
    9eb6:	7f09      	ldrb	r1, [r1, #28]
		return LORAWAN_INVALID_PARAMETER;
    9eb8:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9eba:	4299      	cmp	r1, r3
    9ebc:	d200      	bcs.n	9ec0 <LORAREG_GetAttr_RxWindowOffsetT2+0x10>
}
    9ebe:	bd10      	pop	{r4, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    9ec0:	4c08      	ldr	r4, [pc, #32]	; (9ee4 <LORAREG_GetAttr_RxWindowOffsetT2+0x34>)
    9ec2:	7821      	ldrb	r1, [r4, #0]
    9ec4:	7860      	ldrb	r0, [r4, #1]
    9ec6:	0200      	lsls	r0, r0, #8
    9ec8:	4308      	orrs	r0, r1
    9eca:	78a1      	ldrb	r1, [r4, #2]
    9ecc:	0409      	lsls	r1, r1, #16
    9ece:	4308      	orrs	r0, r1
    9ed0:	78e1      	ldrb	r1, [r4, #3]
    9ed2:	0609      	lsls	r1, r1, #24
    9ed4:	4301      	orrs	r1, r0
    9ed6:	00db      	lsls	r3, r3, #3
    9ed8:	185b      	adds	r3, r3, r1
    9eda:	791b      	ldrb	r3, [r3, #4]
    9edc:	b25b      	sxtb	r3, r3
    9ede:	7013      	strb	r3, [r2, #0]
	return result;
    9ee0:	2008      	movs	r0, #8
    9ee2:	e7ec      	b.n	9ebe <LORAREG_GetAttr_RxWindowOffsetT2+0xe>
    9ee4:	20001404 	.word	0x20001404

00009ee8 <LORAREG_GetAttr_MaxPayloadT2>:
{
    9ee8:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    9eea:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    9eec:	490b      	ldr	r1, [pc, #44]	; (9f1c <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    9eee:	7f09      	ldrb	r1, [r1, #28]
		result =  LORAWAN_INVALID_PARAMETER;
    9ef0:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9ef2:	4299      	cmp	r1, r3
    9ef4:	d200      	bcs.n	9ef8 <LORAREG_GetAttr_MaxPayloadT2+0x10>
}
    9ef6:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    9ef8:	4c08      	ldr	r4, [pc, #32]	; (9f1c <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    9efa:	7821      	ldrb	r1, [r4, #0]
    9efc:	7860      	ldrb	r0, [r4, #1]
    9efe:	0200      	lsls	r0, r0, #8
    9f00:	4308      	orrs	r0, r1
    9f02:	78a1      	ldrb	r1, [r4, #2]
    9f04:	0409      	lsls	r1, r1, #16
    9f06:	4308      	orrs	r0, r1
    9f08:	78e1      	ldrb	r1, [r4, #3]
    9f0a:	0609      	lsls	r1, r1, #24
    9f0c:	4301      	orrs	r1, r0
    9f0e:	00db      	lsls	r3, r3, #3
    9f10:	185b      	adds	r3, r3, r1
    9f12:	789b      	ldrb	r3, [r3, #2]
    9f14:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9f16:	2008      	movs	r0, #8
	return result;
    9f18:	e7ed      	b.n	9ef6 <LORAREG_GetAttr_MaxPayloadT2+0xe>
    9f1a:	46c0      	nop			; (mov r8, r8)
    9f1c:	20001404 	.word	0x20001404

00009f20 <LORAREG_GetAttr_ModulationAttrT2>:
{
    9f20:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    9f22:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    9f24:	490b      	ldr	r1, [pc, #44]	; (9f54 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    9f26:	7f09      	ldrb	r1, [r1, #28]
		result = LORAWAN_INVALID_PARAMETER;
    9f28:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9f2a:	4299      	cmp	r1, r3
    9f2c:	d200      	bcs.n	9f30 <LORAREG_GetAttr_ModulationAttrT2+0x10>
}
    9f2e:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    9f30:	4c08      	ldr	r4, [pc, #32]	; (9f54 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    9f32:	7821      	ldrb	r1, [r4, #0]
    9f34:	7860      	ldrb	r0, [r4, #1]
    9f36:	0200      	lsls	r0, r0, #8
    9f38:	4308      	orrs	r0, r1
    9f3a:	78a1      	ldrb	r1, [r4, #2]
    9f3c:	0409      	lsls	r1, r1, #16
    9f3e:	4308      	orrs	r0, r1
    9f40:	78e1      	ldrb	r1, [r4, #3]
    9f42:	0609      	lsls	r1, r1, #24
    9f44:	4301      	orrs	r1, r0
    9f46:	00db      	lsls	r3, r3, #3
    9f48:	185b      	adds	r3, r3, r1
    9f4a:	79db      	ldrb	r3, [r3, #7]
    9f4c:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9f4e:	2008      	movs	r0, #8
	return result;
    9f50:	e7ed      	b.n	9f2e <LORAREG_GetAttr_ModulationAttrT2+0xe>
    9f52:	46c0      	nop			; (mov r8, r8)
    9f54:	20001404 	.word	0x20001404

00009f58 <LORAREG_GetAttr_BandwidthAttrT2>:
{
    9f58:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    9f5a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    9f5c:	490b      	ldr	r1, [pc, #44]	; (9f8c <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    9f5e:	7f09      	ldrb	r1, [r1, #28]
		result = LORAWAN_INVALID_PARAMETER;
    9f60:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9f62:	4299      	cmp	r1, r3
    9f64:	d200      	bcs.n	9f68 <LORAREG_GetAttr_BandwidthAttrT2+0x10>
}
    9f66:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    9f68:	4c08      	ldr	r4, [pc, #32]	; (9f8c <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    9f6a:	7821      	ldrb	r1, [r4, #0]
    9f6c:	7860      	ldrb	r0, [r4, #1]
    9f6e:	0200      	lsls	r0, r0, #8
    9f70:	4308      	orrs	r0, r1
    9f72:	78a1      	ldrb	r1, [r4, #2]
    9f74:	0409      	lsls	r1, r1, #16
    9f76:	4308      	orrs	r0, r1
    9f78:	78e1      	ldrb	r1, [r4, #3]
    9f7a:	0609      	lsls	r1, r1, #24
    9f7c:	4301      	orrs	r1, r0
    9f7e:	00db      	lsls	r3, r3, #3
    9f80:	185b      	adds	r3, r3, r1
    9f82:	799b      	ldrb	r3, [r3, #6]
    9f84:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9f86:	2008      	movs	r0, #8
	return result;
    9f88:	e7ed      	b.n	9f66 <LORAREG_GetAttr_BandwidthAttrT2+0xe>
    9f8a:	46c0      	nop			; (mov r8, r8)
    9f8c:	20001404 	.word	0x20001404

00009f90 <LORAREG_GetAttr_SpreadFactorT2>:
{
    9f90:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    9f92:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    9f94:	490b      	ldr	r1, [pc, #44]	; (9fc4 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    9f96:	7f09      	ldrb	r1, [r1, #28]
		result =  LORAWAN_INVALID_PARAMETER;
    9f98:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9f9a:	4299      	cmp	r1, r3
    9f9c:	d200      	bcs.n	9fa0 <LORAREG_GetAttr_SpreadFactorT2+0x10>
}
    9f9e:	bd10      	pop	{r4, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    9fa0:	4c08      	ldr	r4, [pc, #32]	; (9fc4 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    9fa2:	7821      	ldrb	r1, [r4, #0]
    9fa4:	7860      	ldrb	r0, [r4, #1]
    9fa6:	0200      	lsls	r0, r0, #8
    9fa8:	4308      	orrs	r0, r1
    9faa:	78a1      	ldrb	r1, [r4, #2]
    9fac:	0409      	lsls	r1, r1, #16
    9fae:	4308      	orrs	r0, r1
    9fb0:	78e1      	ldrb	r1, [r4, #3]
    9fb2:	0609      	lsls	r1, r1, #24
    9fb4:	4301      	orrs	r1, r0
    9fb6:	00db      	lsls	r3, r3, #3
    9fb8:	185b      	adds	r3, r3, r1
    9fba:	795b      	ldrb	r3, [r3, #5]
    9fbc:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9fbe:	2008      	movs	r0, #8
	return result;
    9fc0:	e7ed      	b.n	9f9e <LORAREG_GetAttr_SpreadFactorT2+0xe>
    9fc2:	46c0      	nop			; (mov r8, r8)
    9fc4:	20001404 	.word	0x20001404

00009fc8 <ValidateChMaskChCntl>:
{
    9fc8:	b500      	push	{lr}
    9fca:	b083      	sub	sp, #12
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    9fcc:	2204      	movs	r2, #4
    9fce:	a801      	add	r0, sp, #4
    9fd0:	4b05      	ldr	r3, [pc, #20]	; (9fe8 <ValidateChMaskChCntl+0x20>)
    9fd2:	4798      	blx	r3
	result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));		
    9fd4:	a901      	add	r1, sp, #4
    9fd6:	201b      	movs	r0, #27
    9fd8:	4b04      	ldr	r3, [pc, #16]	; (9fec <ValidateChMaskChCntl+0x24>)
    9fda:	4798      	blx	r3
    9fdc:	2308      	movs	r3, #8
    9fde:	4318      	orrs	r0, r3
    return result;
    9fe0:	b2c0      	uxtb	r0, r0
}
    9fe2:	b003      	add	sp, #12
    9fe4:	bd00      	pop	{pc}
    9fe6:	46c0      	nop			; (mov r8, r8)
    9fe8:	00018195 	.word	0x00018195
    9fec:	00007e41 	.word	0x00007e41

00009ff0 <LORAREG_GetAttr_NewTxChConfigT2>:
{
    9ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ff2:	b083      	sub	sp, #12
    9ff4:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    9ff6:	788c      	ldrb	r4, [r1, #2]
    if ( dataRate > RegParams.minDataRate )
    9ff8:	4b2e      	ldr	r3, [pc, #184]	; (a0b4 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    9ffa:	7f1b      	ldrb	r3, [r3, #28]
		result = LORAWAN_INVALID_PARAMETER;
    9ffc:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9ffe:	42a3      	cmp	r3, r4
    a000:	d205      	bcs.n	a00e <LORAREG_GetAttr_NewTxChConfigT2+0x1e>
}
    a002:	b003      	add	sp, #12
    a004:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    a006:	2900      	cmp	r1, #0
    a008:	d10f      	bne.n	a02a <LORAREG_GetAttr_NewTxChConfigT2+0x3a>
		currDr = DR2;
    a00a:	2402      	movs	r4, #2
    a00c:	e00d      	b.n	a02a <LORAREG_GetAttr_NewTxChConfigT2+0x3a>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    a00e:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    a010:	2325      	movs	r3, #37	; 0x25
    a012:	4a28      	ldr	r2, [pc, #160]	; (a0b4 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    a014:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    a016:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    a018:	429e      	cmp	r6, r3
    a01a:	dcf2      	bgt.n	a002 <LORAREG_GetAttr_NewTxChConfigT2+0x12>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    a01c:	7809      	ldrb	r1, [r1, #0]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    a01e:	2326      	movs	r3, #38	; 0x26
    a020:	5cd2      	ldrb	r2, [r2, r3]
    a022:	4b25      	ldr	r3, [pc, #148]	; (a0b8 <LORAREG_GetAttr_NewTxChConfigT2+0xc8>)
    a024:	4113      	asrs	r3, r2
    a026:	07db      	lsls	r3, r3, #31
    a028:	d4ed      	bmi.n	a006 <LORAREG_GetAttr_NewTxChConfigT2+0x16>
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    a02a:	2322      	movs	r3, #34	; 0x22
    a02c:	4a21      	ldr	r2, [pc, #132]	; (a0b4 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    a02e:	5cd0      	ldrb	r0, [r2, r3]
    a030:	466b      	mov	r3, sp
    a032:	3307      	adds	r3, #7
    a034:	0022      	movs	r2, r4
    a036:	4f21      	ldr	r7, [pc, #132]	; (a0bc <LORAREG_GetAttr_NewTxChConfigT2+0xcc>)
    a038:	47b8      	blx	r7
	if (result == LORAWAN_SUCCESS)
    a03a:	2808      	cmp	r0, #8
    a03c:	d1e1      	bne.n	a002 <LORAREG_GetAttr_NewTxChConfigT2+0x12>
		RegParams.lastUsedChannelIndex = channelIndex;
    a03e:	466b      	mov	r3, sp
    a040:	79df      	ldrb	r7, [r3, #7]
    a042:	4b1c      	ldr	r3, [pc, #112]	; (a0b4 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    a044:	2227      	movs	r2, #39	; 0x27
    a046:	549f      	strb	r7, [r3, r2]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    a048:	7a19      	ldrb	r1, [r3, #8]
    a04a:	7a5a      	ldrb	r2, [r3, #9]
    a04c:	0212      	lsls	r2, r2, #8
    a04e:	430a      	orrs	r2, r1
    a050:	7a99      	ldrb	r1, [r3, #10]
    a052:	0409      	lsls	r1, r1, #16
    a054:	430a      	orrs	r2, r1
    a056:	7ad9      	ldrb	r1, [r3, #11]
    a058:	0609      	lsls	r1, r1, #24
    a05a:	4311      	orrs	r1, r2
    a05c:	007a      	lsls	r2, r7, #1
    a05e:	19d2      	adds	r2, r2, r7
    a060:	0092      	lsls	r2, r2, #2
    a062:	5c57      	ldrb	r7, [r2, r1]
    a064:	1852      	adds	r2, r2, r1
    a066:	7851      	ldrb	r1, [r2, #1]
    a068:	0209      	lsls	r1, r1, #8
    a06a:	430f      	orrs	r7, r1
    a06c:	7891      	ldrb	r1, [r2, #2]
    a06e:	0409      	lsls	r1, r1, #16
    a070:	4339      	orrs	r1, r7
    a072:	78d2      	ldrb	r2, [r2, #3]
    a074:	0612      	lsls	r2, r2, #24
    a076:	430a      	orrs	r2, r1
    a078:	602a      	str	r2, [r5, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    a07a:	0076      	lsls	r6, r6, #1
    a07c:	2220      	movs	r2, #32
    a07e:	5c9a      	ldrb	r2, [r3, r2]
    a080:	1b96      	subs	r6, r2, r6
    a082:	722e      	strb	r6, [r5, #8]
		radioConfig->freq_hop_period = DISABLED ;
    a084:	2200      	movs	r2, #0
    a086:	80aa      	strh	r2, [r5, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    a088:	7819      	ldrb	r1, [r3, #0]
    a08a:	785a      	ldrb	r2, [r3, #1]
    a08c:	0212      	lsls	r2, r2, #8
    a08e:	4311      	orrs	r1, r2
    a090:	789a      	ldrb	r2, [r3, #2]
    a092:	0412      	lsls	r2, r2, #16
    a094:	430a      	orrs	r2, r1
    a096:	78db      	ldrb	r3, [r3, #3]
    a098:	061b      	lsls	r3, r3, #24
    a09a:	4313      	orrs	r3, r2
    a09c:	00e4      	lsls	r4, r4, #3
    a09e:	191c      	adds	r4, r3, r4
    a0a0:	79e3      	ldrb	r3, [r4, #7]
    a0a2:	726b      	strb	r3, [r5, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    a0a4:	79a3      	ldrb	r3, [r4, #6]
    a0a6:	72ab      	strb	r3, [r5, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    a0a8:	7963      	ldrb	r3, [r4, #5]
    a0aa:	72eb      	strb	r3, [r5, #11]
		radioConfig->ecrConfig.override = false;
    a0ac:	2300      	movs	r3, #0
    a0ae:	71eb      	strb	r3, [r5, #7]
    a0b0:	e7a7      	b.n	a002 <LORAREG_GetAttr_NewTxChConfigT2+0x12>
    a0b2:	46c0      	nop			; (mov r8, r8)
    a0b4:	20001404 	.word	0x20001404
    a0b8:	00007fe0 	.word	0x00007fe0
    a0bc:	00008245 	.word	0x00008245

0000a0c0 <setChannelIdStatus>:
{
    a0c0:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    a0c2:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    a0c4:	2322      	movs	r3, #34	; 0x22
    a0c6:	4a05      	ldr	r2, [pc, #20]	; (a0dc <setChannelIdStatus+0x1c>)
    a0c8:	56d3      	ldrsb	r3, [r2, r3]
    a0ca:	4298      	cmp	r0, r3
    a0cc:	db01      	blt.n	a0d2 <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    a0ce:	200a      	movs	r0, #10
}
    a0d0:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    a0d2:	7849      	ldrb	r1, [r1, #1]
    a0d4:	4b02      	ldr	r3, [pc, #8]	; (a0e0 <setChannelIdStatus+0x20>)
    a0d6:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    a0d8:	2008      	movs	r0, #8
	return retVal;
    a0da:	e7f9      	b.n	a0d0 <setChannelIdStatus+0x10>
    a0dc:	20001404 	.word	0x20001404
    a0e0:	000083f9 	.word	0x000083f9

0000a0e4 <ValidateDataRange>:
{
    a0e4:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    a0e6:	233a      	movs	r3, #58	; 0x3a
    a0e8:	33ff      	adds	r3, #255	; 0xff
    a0ea:	4a17      	ldr	r2, [pc, #92]	; (a148 <ValidateDataRange+0x64>)
    a0ec:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    a0ee:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    a0f0:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    a0f2:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a0f4:	42a3      	cmp	r3, r4
    a0f6:	d213      	bcs.n	a120 <ValidateDataRange+0x3c>
}
    a0f8:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    a0fa:	2022      	movs	r0, #34	; 0x22
    a0fc:	4d12      	ldr	r5, [pc, #72]	; (a148 <ValidateDataRange+0x64>)
    a0fe:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    a100:	381a      	subs	r0, #26
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    a102:	42a9      	cmp	r1, r5
    a104:	daf8      	bge.n	a0f8 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    a106:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    a108:	4293      	cmp	r3, r2
    a10a:	d1f5      	bne.n	a0f8 <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    a10c:	42a3      	cmp	r3, r4
    a10e:	d005      	beq.n	a11c <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    a110:	200a      	movs	r0, #10
	return retVal;
    a112:	e7f1      	b.n	a0f8 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    a114:	200a      	movs	r0, #10
    a116:	e7ef      	b.n	a0f8 <ValidateDataRange+0x14>
    a118:	200a      	movs	r0, #10
    a11a:	e7ed      	b.n	a0f8 <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    a11c:	2008      	movs	r0, #8
    a11e:	e7eb      	b.n	a0f8 <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    a120:	200f      	movs	r0, #15
    a122:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    a124:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a126:	4293      	cmp	r3, r2
    a128:	d3e6      	bcc.n	a0f8 <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    a12a:	42a2      	cmp	r2, r4
    a12c:	d8e4      	bhi.n	a0f8 <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    a12e:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    a130:	209e      	movs	r0, #158	; 0x9e
    a132:	0040      	lsls	r0, r0, #1
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    a134:	4d04      	ldr	r5, [pc, #16]	; (a148 <ValidateDataRange+0x64>)
    a136:	5c28      	ldrb	r0, [r5, r0]
    a138:	4288      	cmp	r0, r1
    a13a:	d9de      	bls.n	a0fa <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    a13c:	4293      	cmp	r3, r2
    a13e:	d0e9      	beq.n	a114 <ValidateDataRange+0x30>
    a140:	42a3      	cmp	r3, r4
    a142:	d0e9      	beq.n	a118 <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    a144:	2008      	movs	r0, #8
    a146:	e7d7      	b.n	a0f8 <ValidateDataRange+0x14>
    a148:	20001404 	.word	0x20001404

0000a14c <setDataRange>:
{
    a14c:	b570      	push	{r4, r5, r6, lr}
    a14e:	000d      	movs	r5, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    a150:	2012      	movs	r0, #18
    a152:	4b16      	ldr	r3, [pc, #88]	; (a1ac <setDataRange+0x60>)
    a154:	4798      	blx	r3
    a156:	0004      	movs	r4, r0
    a158:	2808      	cmp	r0, #8
    a15a:	d002      	beq.n	a162 <setDataRange+0x16>
		retVal = LORAWAN_INVALID_PARAMETER;
    a15c:	240a      	movs	r4, #10
}
    a15e:	0020      	movs	r0, r4
    a160:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    a162:	782b      	ldrb	r3, [r5, #0]
    if (channelId >= RegParams.maxChannels)
    a164:	2222      	movs	r2, #34	; 0x22
    a166:	4912      	ldr	r1, [pc, #72]	; (a1b0 <setDataRange+0x64>)
    a168:	568a      	ldrsb	r2, [r1, r2]
    a16a:	4293      	cmp	r3, r2
    a16c:	db01      	blt.n	a172 <setDataRange+0x26>
		retVal = LORAWAN_INVALID_PARAMETER;
    a16e:	3402      	adds	r4, #2
    a170:	e7f5      	b.n	a15e <setDataRange+0x12>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    a172:	786d      	ldrb	r5, [r5, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    a174:	4a0e      	ldr	r2, [pc, #56]	; (a1b0 <setDataRange+0x64>)
    a176:	7911      	ldrb	r1, [r2, #4]
    a178:	7950      	ldrb	r0, [r2, #5]
    a17a:	0200      	lsls	r0, r0, #8
    a17c:	4308      	orrs	r0, r1
    a17e:	7991      	ldrb	r1, [r2, #6]
    a180:	0409      	lsls	r1, r1, #16
    a182:	4308      	orrs	r0, r1
    a184:	79d1      	ldrb	r1, [r2, #7]
    a186:	0609      	lsls	r1, r1, #24
    a188:	4301      	orrs	r1, r0
    a18a:	005b      	lsls	r3, r3, #1
    a18c:	185b      	adds	r3, r3, r1
    a18e:	705d      	strb	r5, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    a190:	23f8      	movs	r3, #248	; 0xf8
    a192:	33ff      	adds	r3, #255	; 0xff
    a194:	5cd3      	ldrb	r3, [r2, r3]
    a196:	21fc      	movs	r1, #252	; 0xfc
    a198:	0049      	lsls	r1, r1, #1
    a19a:	5c50      	ldrb	r0, [r2, r1]
    a19c:	0200      	lsls	r0, r0, #8
    a19e:	4318      	orrs	r0, r3
    a1a0:	b2c1      	uxtb	r1, r0
    a1a2:	0a00      	lsrs	r0, r0, #8
    a1a4:	4b03      	ldr	r3, [pc, #12]	; (a1b4 <setDataRange+0x68>)
    a1a6:	4798      	blx	r3
	return retVal;
    a1a8:	e7d9      	b.n	a15e <setDataRange+0x12>
    a1aa:	46c0      	nop			; (mov r8, r8)
    a1ac:	0000a0e5 	.word	0x0000a0e5
    a1b0:	20001404 	.word	0x20001404
    a1b4:	0000b745 	.word	0x0000b745

0000a1b8 <LORAREG_GetAttr_RxWindowSizeT1>:
{
    a1b8:	b570      	push	{r4, r5, r6, lr}
    a1ba:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    a1bc:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a1be:	233a      	movs	r3, #58	; 0x3a
    a1c0:	33ff      	adds	r3, #255	; 0xff
    a1c2:	4a0f      	ldr	r2, [pc, #60]	; (a200 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    a1c4:	5cd3      	ldrb	r3, [r2, r3]
    a1c6:	42a3      	cmp	r3, r4
    a1c8:	d205      	bcs.n	a1d6 <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a1ca:	200f      	movs	r0, #15
    a1cc:	4b0d      	ldr	r3, [pc, #52]	; (a204 <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    a1ce:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    a1d0:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a1d2:	2808      	cmp	r0, #8
    a1d4:	d112      	bne.n	a1fc <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    a1d6:	490a      	ldr	r1, [pc, #40]	; (a200 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    a1d8:	780b      	ldrb	r3, [r1, #0]
    a1da:	784a      	ldrb	r2, [r1, #1]
    a1dc:	0212      	lsls	r2, r2, #8
    a1de:	431a      	orrs	r2, r3
    a1e0:	788b      	ldrb	r3, [r1, #2]
    a1e2:	041b      	lsls	r3, r3, #16
    a1e4:	431a      	orrs	r2, r3
    a1e6:	78cb      	ldrb	r3, [r1, #3]
    a1e8:	061b      	lsls	r3, r3, #24
    a1ea:	4313      	orrs	r3, r2
    a1ec:	00e4      	lsls	r4, r4, #3
    a1ee:	5ce2      	ldrb	r2, [r4, r3]
    a1f0:	18e4      	adds	r4, r4, r3
    a1f2:	7863      	ldrb	r3, [r4, #1]
    a1f4:	021b      	lsls	r3, r3, #8
    a1f6:	4313      	orrs	r3, r2
    a1f8:	802b      	strh	r3, [r5, #0]
	return result;
    a1fa:	2308      	movs	r3, #8
}
    a1fc:	0018      	movs	r0, r3
    a1fe:	bd70      	pop	{r4, r5, r6, pc}
    a200:	20001404 	.word	0x20001404
    a204:	00007cf5 	.word	0x00007cf5

0000a208 <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    a208:	b570      	push	{r4, r5, r6, lr}
    a20a:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    a20c:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a20e:	233a      	movs	r3, #58	; 0x3a
    a210:	33ff      	adds	r3, #255	; 0xff
    a212:	4a0e      	ldr	r2, [pc, #56]	; (a24c <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    a214:	5cd3      	ldrb	r3, [r2, r3]
    a216:	42a3      	cmp	r3, r4
    a218:	d205      	bcs.n	a226 <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a21a:	200f      	movs	r0, #15
    a21c:	4b0c      	ldr	r3, [pc, #48]	; (a250 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    a21e:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    a220:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a222:	2808      	cmp	r0, #8
    a224:	d110      	bne.n	a248 <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    a226:	4909      	ldr	r1, [pc, #36]	; (a24c <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    a228:	780b      	ldrb	r3, [r1, #0]
    a22a:	784a      	ldrb	r2, [r1, #1]
    a22c:	0212      	lsls	r2, r2, #8
    a22e:	431a      	orrs	r2, r3
    a230:	788b      	ldrb	r3, [r1, #2]
    a232:	041b      	lsls	r3, r3, #16
    a234:	431a      	orrs	r2, r3
    a236:	78cb      	ldrb	r3, [r1, #3]
    a238:	061b      	lsls	r3, r3, #24
    a23a:	4313      	orrs	r3, r2
    a23c:	00e4      	lsls	r4, r4, #3
    a23e:	18e3      	adds	r3, r4, r3
    a240:	791b      	ldrb	r3, [r3, #4]
    a242:	b25b      	sxtb	r3, r3
    a244:	702b      	strb	r3, [r5, #0]
	return result;
    a246:	2308      	movs	r3, #8
}
    a248:	0018      	movs	r0, r3
    a24a:	bd70      	pop	{r4, r5, r6, pc}
    a24c:	20001404 	.word	0x20001404
    a250:	00007cf5 	.word	0x00007cf5

0000a254 <LORAREG_GetAttr_MaxPayloadT1>:
{
    a254:	b570      	push	{r4, r5, r6, lr}
    a256:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    a258:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a25a:	233a      	movs	r3, #58	; 0x3a
    a25c:	33ff      	adds	r3, #255	; 0xff
    a25e:	4a0e      	ldr	r2, [pc, #56]	; (a298 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    a260:	5cd3      	ldrb	r3, [r2, r3]
    a262:	42a3      	cmp	r3, r4
    a264:	d205      	bcs.n	a272 <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a266:	200f      	movs	r0, #15
    a268:	4b0c      	ldr	r3, [pc, #48]	; (a29c <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    a26a:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    a26c:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a26e:	2808      	cmp	r0, #8
    a270:	d10f      	bne.n	a292 <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    a272:	4909      	ldr	r1, [pc, #36]	; (a298 <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    a274:	780b      	ldrb	r3, [r1, #0]
    a276:	784a      	ldrb	r2, [r1, #1]
    a278:	0212      	lsls	r2, r2, #8
    a27a:	431a      	orrs	r2, r3
    a27c:	788b      	ldrb	r3, [r1, #2]
    a27e:	041b      	lsls	r3, r3, #16
    a280:	431a      	orrs	r2, r3
    a282:	78cb      	ldrb	r3, [r1, #3]
    a284:	061b      	lsls	r3, r3, #24
    a286:	4313      	orrs	r3, r2
    a288:	00e4      	lsls	r4, r4, #3
    a28a:	18e3      	adds	r3, r4, r3
    a28c:	789b      	ldrb	r3, [r3, #2]
    a28e:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a290:	2308      	movs	r3, #8
}
    a292:	0018      	movs	r0, r3
    a294:	bd70      	pop	{r4, r5, r6, pc}
    a296:	46c0      	nop			; (mov r8, r8)
    a298:	20001404 	.word	0x20001404
    a29c:	00007cf5 	.word	0x00007cf5

0000a2a0 <LORAREG_GetAttr_ModulationAttrT1>:
{
    a2a0:	b570      	push	{r4, r5, r6, lr}
    a2a2:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    a2a4:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a2a6:	233a      	movs	r3, #58	; 0x3a
    a2a8:	33ff      	adds	r3, #255	; 0xff
    a2aa:	4a0e      	ldr	r2, [pc, #56]	; (a2e4 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    a2ac:	5cd3      	ldrb	r3, [r2, r3]
    a2ae:	42a3      	cmp	r3, r4
    a2b0:	d205      	bcs.n	a2be <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a2b2:	200f      	movs	r0, #15
    a2b4:	4b0c      	ldr	r3, [pc, #48]	; (a2e8 <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    a2b6:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    a2b8:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a2ba:	2808      	cmp	r0, #8
    a2bc:	d10f      	bne.n	a2de <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    a2be:	4909      	ldr	r1, [pc, #36]	; (a2e4 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    a2c0:	780b      	ldrb	r3, [r1, #0]
    a2c2:	784a      	ldrb	r2, [r1, #1]
    a2c4:	0212      	lsls	r2, r2, #8
    a2c6:	431a      	orrs	r2, r3
    a2c8:	788b      	ldrb	r3, [r1, #2]
    a2ca:	041b      	lsls	r3, r3, #16
    a2cc:	431a      	orrs	r2, r3
    a2ce:	78cb      	ldrb	r3, [r1, #3]
    a2d0:	061b      	lsls	r3, r3, #24
    a2d2:	4313      	orrs	r3, r2
    a2d4:	00e4      	lsls	r4, r4, #3
    a2d6:	18e3      	adds	r3, r4, r3
    a2d8:	79db      	ldrb	r3, [r3, #7]
    a2da:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a2dc:	2308      	movs	r3, #8
}
    a2de:	0018      	movs	r0, r3
    a2e0:	bd70      	pop	{r4, r5, r6, pc}
    a2e2:	46c0      	nop			; (mov r8, r8)
    a2e4:	20001404 	.word	0x20001404
    a2e8:	00007cf5 	.word	0x00007cf5

0000a2ec <LORAREG_GetAttr_BandwidthAttrT1>:
{
    a2ec:	b570      	push	{r4, r5, r6, lr}
    a2ee:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    a2f0:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a2f2:	233a      	movs	r3, #58	; 0x3a
    a2f4:	33ff      	adds	r3, #255	; 0xff
    a2f6:	4a0e      	ldr	r2, [pc, #56]	; (a330 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    a2f8:	5cd3      	ldrb	r3, [r2, r3]
    a2fa:	42a3      	cmp	r3, r4
    a2fc:	d205      	bcs.n	a30a <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a2fe:	200f      	movs	r0, #15
    a300:	4b0c      	ldr	r3, [pc, #48]	; (a334 <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    a302:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    a304:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a306:	2808      	cmp	r0, #8
    a308:	d10f      	bne.n	a32a <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    a30a:	4909      	ldr	r1, [pc, #36]	; (a330 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    a30c:	780b      	ldrb	r3, [r1, #0]
    a30e:	784a      	ldrb	r2, [r1, #1]
    a310:	0212      	lsls	r2, r2, #8
    a312:	431a      	orrs	r2, r3
    a314:	788b      	ldrb	r3, [r1, #2]
    a316:	041b      	lsls	r3, r3, #16
    a318:	431a      	orrs	r2, r3
    a31a:	78cb      	ldrb	r3, [r1, #3]
    a31c:	061b      	lsls	r3, r3, #24
    a31e:	4313      	orrs	r3, r2
    a320:	00e4      	lsls	r4, r4, #3
    a322:	18e3      	adds	r3, r4, r3
    a324:	799b      	ldrb	r3, [r3, #6]
    a326:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a328:	2308      	movs	r3, #8
}
    a32a:	0018      	movs	r0, r3
    a32c:	bd70      	pop	{r4, r5, r6, pc}
    a32e:	46c0      	nop			; (mov r8, r8)
    a330:	20001404 	.word	0x20001404
    a334:	00007cf5 	.word	0x00007cf5

0000a338 <LORAREG_GetAttr_SpreadFactorT1>:
{
    a338:	b570      	push	{r4, r5, r6, lr}
    a33a:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    a33c:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a33e:	233a      	movs	r3, #58	; 0x3a
    a340:	33ff      	adds	r3, #255	; 0xff
    a342:	4a0e      	ldr	r2, [pc, #56]	; (a37c <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    a344:	5cd3      	ldrb	r3, [r2, r3]
    a346:	42a3      	cmp	r3, r4
    a348:	d205      	bcs.n	a356 <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a34a:	200f      	movs	r0, #15
    a34c:	4b0c      	ldr	r3, [pc, #48]	; (a380 <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    a34e:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    a350:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    a352:	2808      	cmp	r0, #8
    a354:	d10f      	bne.n	a376 <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    a356:	4909      	ldr	r1, [pc, #36]	; (a37c <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    a358:	780b      	ldrb	r3, [r1, #0]
    a35a:	784a      	ldrb	r2, [r1, #1]
    a35c:	0212      	lsls	r2, r2, #8
    a35e:	431a      	orrs	r2, r3
    a360:	788b      	ldrb	r3, [r1, #2]
    a362:	041b      	lsls	r3, r3, #16
    a364:	431a      	orrs	r2, r3
    a366:	78cb      	ldrb	r3, [r1, #3]
    a368:	061b      	lsls	r3, r3, #24
    a36a:	4313      	orrs	r3, r2
    a36c:	00e4      	lsls	r4, r4, #3
    a36e:	18e3      	adds	r3, r4, r3
    a370:	795b      	ldrb	r3, [r3, #5]
    a372:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a374:	2308      	movs	r3, #8
}
    a376:	0018      	movs	r0, r3
    a378:	bd70      	pop	{r4, r5, r6, pc}
    a37a:	46c0      	nop			; (mov r8, r8)
    a37c:	20001404 	.word	0x20001404
    a380:	00007cf5 	.word	0x00007cf5

0000a384 <ValidateTxFreqT1>:
{
    a384:	b530      	push	{r4, r5, lr}
    a386:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    a388:	2208      	movs	r2, #8
    a38a:	4668      	mov	r0, sp
    a38c:	4b20      	ldr	r3, [pc, #128]	; (a410 <ValidateTxFreqT1+0x8c>)
    a38e:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    a390:	466b      	mov	r3, sp
    a392:	7919      	ldrb	r1, [r3, #4]
    a394:	2322      	movs	r3, #34	; 0x22
    a396:	4a1f      	ldr	r2, [pc, #124]	; (a414 <ValidateTxFreqT1+0x90>)
    a398:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    a39a:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    a39c:	4299      	cmp	r1, r3
    a39e:	dd00      	ble.n	a3a2 <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    a3a0:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    a3a2:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    a3a4:	4d1b      	ldr	r5, [pc, #108]	; (a414 <ValidateTxFreqT1+0x90>)
    a3a6:	2396      	movs	r3, #150	; 0x96
    a3a8:	005b      	lsls	r3, r3, #1
    a3aa:	5ceb      	ldrb	r3, [r5, r3]
    a3ac:	222e      	movs	r2, #46	; 0x2e
    a3ae:	32ff      	adds	r2, #255	; 0xff
    a3b0:	5caa      	ldrb	r2, [r5, r2]
    a3b2:	0212      	lsls	r2, r2, #8
    a3b4:	431a      	orrs	r2, r3
    a3b6:	2397      	movs	r3, #151	; 0x97
    a3b8:	005b      	lsls	r3, r3, #1
    a3ba:	5ceb      	ldrb	r3, [r5, r3]
    a3bc:	041b      	lsls	r3, r3, #16
    a3be:	431a      	orrs	r2, r3
    a3c0:	2330      	movs	r3, #48	; 0x30
    a3c2:	33ff      	adds	r3, #255	; 0xff
    a3c4:	5ceb      	ldrb	r3, [r5, r3]
    a3c6:	061b      	lsls	r3, r3, #24
    a3c8:	4313      	orrs	r3, r2
    a3ca:	4a13      	ldr	r2, [pc, #76]	; (a418 <ValidateTxFreqT1+0x94>)
    a3cc:	434a      	muls	r2, r1
    a3ce:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    a3d0:	429c      	cmp	r4, r3
    a3d2:	d01b      	beq.n	a40c <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    a3d4:	239e      	movs	r3, #158	; 0x9e
    a3d6:	005b      	lsls	r3, r3, #1
    a3d8:	5ceb      	ldrb	r3, [r5, r3]
    a3da:	1ac9      	subs	r1, r1, r3
    a3dc:	4b0f      	ldr	r3, [pc, #60]	; (a41c <ValidateTxFreqT1+0x98>)
    a3de:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    a3e0:	2398      	movs	r3, #152	; 0x98
    a3e2:	005b      	lsls	r3, r3, #1
    a3e4:	5ceb      	ldrb	r3, [r5, r3]
    a3e6:	2232      	movs	r2, #50	; 0x32
    a3e8:	32ff      	adds	r2, #255	; 0xff
    a3ea:	5caa      	ldrb	r2, [r5, r2]
    a3ec:	0212      	lsls	r2, r2, #8
    a3ee:	4313      	orrs	r3, r2
    a3f0:	2299      	movs	r2, #153	; 0x99
    a3f2:	0052      	lsls	r2, r2, #1
    a3f4:	5caa      	ldrb	r2, [r5, r2]
    a3f6:	0412      	lsls	r2, r2, #16
    a3f8:	431a      	orrs	r2, r3
    a3fa:	2334      	movs	r3, #52	; 0x34
    a3fc:	33ff      	adds	r3, #255	; 0xff
    a3fe:	5ceb      	ldrb	r3, [r5, r3]
    a400:	061b      	lsls	r3, r3, #24
    a402:	4313      	orrs	r3, r2
    a404:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    a406:	429c      	cmp	r4, r3
    a408:	d000      	beq.n	a40c <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    a40a:	200a      	movs	r0, #10
}
    a40c:	b003      	add	sp, #12
    a40e:	bd30      	pop	{r4, r5, pc}
    a410:	00018195 	.word	0x00018195
    a414:	20001404 	.word	0x20001404
    a418:	00030d40 	.word	0x00030d40
    a41c:	00186a00 	.word	0x00186a00

0000a420 <LORAREG_GetAttr_NewTxChConfigT1>:
{
    a420:	b5f0      	push	{r4, r5, r6, r7, lr}
    a422:	46ce      	mov	lr, r9
    a424:	4647      	mov	r7, r8
    a426:	b580      	push	{r7, lr}
    a428:	b083      	sub	sp, #12
    a42a:	0016      	movs	r6, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    a42c:	788d      	ldrb	r5, [r1, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a42e:	233a      	movs	r3, #58	; 0x3a
    a430:	33ff      	adds	r3, #255	; 0xff
    a432:	4a72      	ldr	r2, [pc, #456]	; (a5fc <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    a434:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    a436:	240a      	movs	r4, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    a438:	42ab      	cmp	r3, r5
    a43a:	d26d      	bcs.n	a518 <LORAREG_GetAttr_NewTxChConfigT1+0xf8>
}
    a43c:	0020      	movs	r0, r4
    a43e:	b003      	add	sp, #12
    a440:	bc0c      	pop	{r2, r3}
    a442:	4690      	mov	r8, r2
    a444:	4699      	mov	r9, r3
    a446:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    a448:	4b6c      	ldr	r3, [pc, #432]	; (a5fc <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    a44a:	4699      	mov	r9, r3
    a44c:	2322      	movs	r3, #34	; 0x22
    a44e:	464a      	mov	r2, r9
    a450:	5cd0      	ldrb	r0, [r2, r3]
    a452:	466b      	mov	r3, sp
    a454:	3307      	adds	r3, #7
    a456:	002a      	movs	r2, r5
    a458:	2101      	movs	r1, #1
    a45a:	4c69      	ldr	r4, [pc, #420]	; (a600 <LORAREG_GetAttr_NewTxChConfigT1+0x1e0>)
    a45c:	47a0      	blx	r4
    a45e:	0004      	movs	r4, r0
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    a460:	464b      	mov	r3, r9
    a462:	781b      	ldrb	r3, [r3, #0]
    a464:	464a      	mov	r2, r9
    a466:	7852      	ldrb	r2, [r2, #1]
    a468:	0212      	lsls	r2, r2, #8
    a46a:	431a      	orrs	r2, r3
    a46c:	464b      	mov	r3, r9
    a46e:	789b      	ldrb	r3, [r3, #2]
    a470:	041b      	lsls	r3, r3, #16
    a472:	431a      	orrs	r2, r3
    a474:	464b      	mov	r3, r9
    a476:	78db      	ldrb	r3, [r3, #3]
    a478:	061b      	lsls	r3, r3, #24
    a47a:	4313      	orrs	r3, r2
    a47c:	00ed      	lsls	r5, r5, #3
    a47e:	18eb      	adds	r3, r5, r3
    a480:	795b      	ldrb	r3, [r3, #5]
    a482:	72f3      	strb	r3, [r6, #11]
    a484:	e081      	b.n	a58a <LORAREG_GetAttr_NewTxChConfigT1+0x16a>
			    radioConfig->sf = SF_10;				
    a486:	3308      	adds	r3, #8
    a488:	72f3      	strb	r3, [r6, #11]
    a48a:	e05f      	b.n	a54c <LORAREG_GetAttr_NewTxChConfigT1+0x12c>
			radioConfig->sf = SF_8;
    a48c:	2308      	movs	r3, #8
    a48e:	72f3      	strb	r3, [r6, #11]
			radioConfig->bandwidth = BW_500KHZ;
    a490:	3301      	adds	r3, #1
    a492:	72b3      	strb	r3, [r6, #10]
			if( RegParams.band == ISM_NA915)
    a494:	331d      	adds	r3, #29
    a496:	4a59      	ldr	r2, [pc, #356]	; (a5fc <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    a498:	5cd3      	ldrb	r3, [r2, r3]
			uint8_t dr = DR6;
    a49a:	2206      	movs	r2, #6
			if( RegParams.band == ISM_NA915)
    a49c:	2b02      	cmp	r3, #2
    a49e:	d00a      	beq.n	a4b6 <LORAREG_GetAttr_NewTxChConfigT1+0x96>
			result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_500khzChan, transmissionType,dr, &channelIndex);
    a4a0:	233e      	movs	r3, #62	; 0x3e
    a4a2:	33ff      	adds	r3, #255	; 0xff
    a4a4:	4955      	ldr	r1, [pc, #340]	; (a5fc <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    a4a6:	5cc8      	ldrb	r0, [r1, r3]
    a4a8:	466b      	mov	r3, sp
    a4aa:	3307      	adds	r3, #7
    a4ac:	2100      	movs	r1, #0
    a4ae:	4c54      	ldr	r4, [pc, #336]	; (a600 <LORAREG_GetAttr_NewTxChConfigT1+0x1e0>)
    a4b0:	47a0      	blx	r4
    a4b2:	0004      	movs	r4, r0
    a4b4:	e057      	b.n	a566 <LORAREG_GetAttr_NewTxChConfigT1+0x146>
				dr = DR4;
    a4b6:	3a02      	subs	r2, #2
    a4b8:	e7f2      	b.n	a4a0 <LORAREG_GetAttr_NewTxChConfigT1+0x80>
    			radioConfig->ecrConfig.override = true;
    a4ba:	3b01      	subs	r3, #1
    a4bc:	71f3      	strb	r3, [r6, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    a4be:	71b3      	strb	r3, [r6, #6]
    a4c0:	e091      	b.n	a5e6 <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
			radioConfig->bandwidth = BW_500KHZ;
    a4c2:	2109      	movs	r1, #9
    a4c4:	72b1      	strb	r1, [r6, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    a4c6:	494d      	ldr	r1, [pc, #308]	; (a5fc <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    a4c8:	209e      	movs	r0, #158	; 0x9e
    a4ca:	0040      	lsls	r0, r0, #1
    a4cc:	5c08      	ldrb	r0, [r1, r0]
    a4ce:	1a12      	subs	r2, r2, r0
    a4d0:	484c      	ldr	r0, [pc, #304]	; (a604 <LORAREG_GetAttr_NewTxChConfigT1+0x1e4>)
    a4d2:	4342      	muls	r2, r0
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    a4d4:	2098      	movs	r0, #152	; 0x98
    a4d6:	0040      	lsls	r0, r0, #1
    a4d8:	5c08      	ldrb	r0, [r1, r0]
    a4da:	2532      	movs	r5, #50	; 0x32
    a4dc:	35ff      	adds	r5, #255	; 0xff
    a4de:	5d4d      	ldrb	r5, [r1, r5]
    a4e0:	022d      	lsls	r5, r5, #8
    a4e2:	4305      	orrs	r5, r0
    a4e4:	2099      	movs	r0, #153	; 0x99
    a4e6:	0040      	lsls	r0, r0, #1
    a4e8:	5c08      	ldrb	r0, [r1, r0]
    a4ea:	0400      	lsls	r0, r0, #16
    a4ec:	4305      	orrs	r5, r0
    a4ee:	2034      	movs	r0, #52	; 0x34
    a4f0:	30ff      	adds	r0, #255	; 0xff
    a4f2:	5c08      	ldrb	r0, [r1, r0]
    a4f4:	0600      	lsls	r0, r0, #24
    a4f6:	4328      	orrs	r0, r5
    a4f8:	1812      	adds	r2, r2, r0
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    a4fa:	6032      	str	r2, [r6, #0]
			if( RegParams.band == ISM_NA915)
    a4fc:	2226      	movs	r2, #38	; 0x26
    a4fe:	5c8a      	ldrb	r2, [r1, r2]
    a500:	2a02      	cmp	r2, #2
    a502:	d003      	beq.n	a50c <LORAREG_GetAttr_NewTxChConfigT1+0xec>
			if (txPower <= 26)
    a504:	2b1a      	cmp	r3, #26
    a506:	d804      	bhi.n	a512 <LORAREG_GetAttr_NewTxChConfigT1+0xf2>
				radioConfig->txPower = txPower;
    a508:	7233      	strb	r3, [r6, #8]
    a50a:	e06c      	b.n	a5e6 <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
			    radioConfig->ecrConfig.override = false;
    a50c:	2200      	movs	r2, #0
    a50e:	71f2      	strb	r2, [r6, #7]
    a510:	e7f8      	b.n	a504 <LORAREG_GetAttr_NewTxChConfigT1+0xe4>
				radioConfig->txPower = 26;
    a512:	231a      	movs	r3, #26
    a514:	7233      	strb	r3, [r6, #8]
    a516:	e066      	b.n	a5e6 <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    a518:	784f      	ldrb	r7, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    a51a:	2325      	movs	r3, #37	; 0x25
    a51c:	4a37      	ldr	r2, [pc, #220]	; (a5fc <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    a51e:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    a520:	240a      	movs	r4, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    a522:	429f      	cmp	r7, r3
    a524:	dd00      	ble.n	a528 <LORAREG_GetAttr_NewTxChConfigT1+0x108>
    a526:	e789      	b.n	a43c <LORAREG_GetAttr_NewTxChConfigT1+0x1c>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    a528:	2320      	movs	r3, #32
    a52a:	5cd3      	ldrb	r3, [r2, r3]
    a52c:	4698      	mov	r8, r3
	if (transmissionType == 1) // data message (not join request), it should search in all
    a52e:	780b      	ldrb	r3, [r1, #0]
    a530:	2b00      	cmp	r3, #0
    a532:	d189      	bne.n	a448 <LORAREG_GetAttr_NewTxChConfigT1+0x28>
		if (RegParams.cmnParams.paramsType1.alternativeChannel == 0) //TOFO init in reginit
    a534:	2340      	movs	r3, #64	; 0x40
    a536:	33ff      	adds	r3, #255	; 0xff
    a538:	4a30      	ldr	r2, [pc, #192]	; (a5fc <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    a53a:	5cd3      	ldrb	r3, [r2, r3]
    a53c:	2b00      	cmp	r3, #0
    a53e:	d1a5      	bne.n	a48c <LORAREG_GetAttr_NewTxChConfigT1+0x6c>
            if( RegParams.band == ISM_NA915)
    a540:	3326      	adds	r3, #38	; 0x26
    a542:	5cd3      	ldrb	r3, [r2, r3]
    a544:	2b02      	cmp	r3, #2
    a546:	d09e      	beq.n	a486 <LORAREG_GetAttr_NewTxChConfigT1+0x66>
				radioConfig->sf = SF_12;
    a548:	230c      	movs	r3, #12
    a54a:	72f3      	strb	r3, [r6, #11]
			radioConfig->bandwidth = BW_125KHZ;
    a54c:	2307      	movs	r3, #7
    a54e:	72b3      	strb	r3, [r6, #10]
			result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    a550:	3336      	adds	r3, #54	; 0x36
    a552:	33ff      	adds	r3, #255	; 0xff
    a554:	4a29      	ldr	r2, [pc, #164]	; (a5fc <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    a556:	5cd0      	ldrb	r0, [r2, r3]
    a558:	466b      	mov	r3, sp
    a55a:	3307      	adds	r3, #7
    a55c:	2200      	movs	r2, #0
    a55e:	2100      	movs	r1, #0
    a560:	4c27      	ldr	r4, [pc, #156]	; (a600 <LORAREG_GetAttr_NewTxChConfigT1+0x1e0>)
    a562:	47a0      	blx	r4
    a564:	0004      	movs	r4, r0
		RegParams.cmnParams.paramsType1.alternativeChannel = !RegParams.cmnParams.paramsType1.alternativeChannel;
    a566:	4b25      	ldr	r3, [pc, #148]	; (a5fc <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    a568:	2140      	movs	r1, #64	; 0x40
    a56a:	31ff      	adds	r1, #255	; 0xff
    a56c:	5c5a      	ldrb	r2, [r3, r1]
    a56e:	4250      	negs	r0, r2
    a570:	4142      	adcs	r2, r0
    a572:	545a      	strb	r2, [r3, r1]
		PDS_STORE(RegParams.regParamItems.alt_ch_item_id);
    a574:	22f6      	movs	r2, #246	; 0xf6
    a576:	32ff      	adds	r2, #255	; 0xff
    a578:	5c9a      	ldrb	r2, [r3, r2]
    a57a:	31b7      	adds	r1, #183	; 0xb7
    a57c:	5c58      	ldrb	r0, [r3, r1]
    a57e:	0200      	lsls	r0, r0, #8
    a580:	4310      	orrs	r0, r2
    a582:	b2c1      	uxtb	r1, r0
    a584:	0a00      	lsrs	r0, r0, #8
    a586:	4b20      	ldr	r3, [pc, #128]	; (a608 <LORAREG_GetAttr_NewTxChConfigT1+0x1e8>)
    a588:	4798      	blx	r3
	if (result == LORAWAN_SUCCESS)
    a58a:	2c08      	cmp	r4, #8
    a58c:	d000      	beq.n	a590 <LORAREG_GetAttr_NewTxChConfigT1+0x170>
    a58e:	e755      	b.n	a43c <LORAREG_GetAttr_NewTxChConfigT1+0x1c>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    a590:	007f      	lsls	r7, r7, #1
    a592:	4643      	mov	r3, r8
    a594:	1bdb      	subs	r3, r3, r7
    a596:	b2db      	uxtb	r3, r3
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    a598:	466a      	mov	r2, sp
    a59a:	3207      	adds	r2, #7
    a59c:	7812      	ldrb	r2, [r2, #0]
    a59e:	219e      	movs	r1, #158	; 0x9e
    a5a0:	0049      	lsls	r1, r1, #1
    a5a2:	4816      	ldr	r0, [pc, #88]	; (a5fc <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    a5a4:	5c41      	ldrb	r1, [r0, r1]
    a5a6:	4291      	cmp	r1, r2
    a5a8:	d98b      	bls.n	a4c2 <LORAREG_GetAttr_NewTxChConfigT1+0xa2>
			radioConfig->bandwidth = BW_125KHZ;
    a5aa:	2107      	movs	r1, #7
    a5ac:	72b1      	strb	r1, [r6, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    a5ae:	3126      	adds	r1, #38	; 0x26
    a5b0:	31ff      	adds	r1, #255	; 0xff
    a5b2:	5c41      	ldrb	r1, [r0, r1]
    a5b4:	252e      	movs	r5, #46	; 0x2e
    a5b6:	35ff      	adds	r5, #255	; 0xff
    a5b8:	5d45      	ldrb	r5, [r0, r5]
    a5ba:	022d      	lsls	r5, r5, #8
    a5bc:	430d      	orrs	r5, r1
    a5be:	2197      	movs	r1, #151	; 0x97
    a5c0:	0049      	lsls	r1, r1, #1
    a5c2:	5c41      	ldrb	r1, [r0, r1]
    a5c4:	0409      	lsls	r1, r1, #16
    a5c6:	430d      	orrs	r5, r1
    a5c8:	2130      	movs	r1, #48	; 0x30
    a5ca:	31ff      	adds	r1, #255	; 0xff
    a5cc:	5c41      	ldrb	r1, [r0, r1]
    a5ce:	0609      	lsls	r1, r1, #24
    a5d0:	4329      	orrs	r1, r5
    a5d2:	4d0e      	ldr	r5, [pc, #56]	; (a60c <LORAREG_GetAttr_NewTxChConfigT1+0x1ec>)
    a5d4:	436a      	muls	r2, r5
    a5d6:	188a      	adds	r2, r1, r2
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    a5d8:	6032      	str	r2, [r6, #0]
			radioConfig->txPower = txPower;
    a5da:	7233      	strb	r3, [r6, #8]
			if(RegParams.band == ISM_NA915)
    a5dc:	2326      	movs	r3, #38	; 0x26
    a5de:	5cc3      	ldrb	r3, [r0, r3]
    a5e0:	2b02      	cmp	r3, #2
    a5e2:	d100      	bne.n	a5e6 <LORAREG_GetAttr_NewTxChConfigT1+0x1c6>
    a5e4:	e769      	b.n	a4ba <LORAREG_GetAttr_NewTxChConfigT1+0x9a>
		radioConfig->freq_hop_period = DISABLED;
    a5e6:	2300      	movs	r3, #0
    a5e8:	80b3      	strh	r3, [r6, #4]
		radioConfig->modulation = MODULATION_LORA;
    a5ea:	3301      	adds	r3, #1
    a5ec:	7273      	strb	r3, [r6, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    a5ee:	466b      	mov	r3, sp
    a5f0:	79d9      	ldrb	r1, [r3, #7]
    a5f2:	2327      	movs	r3, #39	; 0x27
    a5f4:	4a01      	ldr	r2, [pc, #4]	; (a5fc <LORAREG_GetAttr_NewTxChConfigT1+0x1dc>)
    a5f6:	54d1      	strb	r1, [r2, r3]
    a5f8:	e720      	b.n	a43c <LORAREG_GetAttr_NewTxChConfigT1+0x1c>
    a5fa:	46c0      	nop			; (mov r8, r8)
    a5fc:	20001404 	.word	0x20001404
    a600:	00008139 	.word	0x00008139
    a604:	00186a00 	.word	0x00186a00
    a608:	0000b745 	.word	0x0000b745
    a60c:	00030d40 	.word	0x00030d40

0000a610 <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    a610:	4b2a      	ldr	r3, [pc, #168]	; (a6bc <LORAREG_InitGetAttrFnPtrsNA+0xac>)
    a612:	4a2b      	ldr	r2, [pc, #172]	; (a6c0 <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    a614:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    a616:	4a2b      	ldr	r2, [pc, #172]	; (a6c4 <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    a618:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    a61a:	4a2b      	ldr	r2, [pc, #172]	; (a6c8 <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    a61c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    a61e:	4a2b      	ldr	r2, [pc, #172]	; (a6cc <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    a620:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    a622:	4a2b      	ldr	r2, [pc, #172]	; (a6d0 <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    a624:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    a626:	4a2b      	ldr	r2, [pc, #172]	; (a6d4 <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    a628:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    a62a:	4a2b      	ldr	r2, [pc, #172]	; (a6d8 <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    a62c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    a62e:	4a2b      	ldr	r2, [pc, #172]	; (a6dc <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    a630:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    a632:	4a2b      	ldr	r2, [pc, #172]	; (a6e0 <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    a634:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    a636:	4a2b      	ldr	r2, [pc, #172]	; (a6e4 <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    a638:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    a63a:	4a2b      	ldr	r2, [pc, #172]	; (a6e8 <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    a63c:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    a63e:	4a2b      	ldr	r2, [pc, #172]	; (a6ec <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    a640:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    a642:	4a2b      	ldr	r2, [pc, #172]	; (a6f0 <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    a644:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    a646:	4a2b      	ldr	r2, [pc, #172]	; (a6f4 <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    a648:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    a64a:	4a2b      	ldr	r2, [pc, #172]	; (a6f8 <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    a64c:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    a64e:	4a2b      	ldr	r2, [pc, #172]	; (a6fc <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    a650:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    a652:	492b      	ldr	r1, [pc, #172]	; (a700 <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    a654:	2284      	movs	r2, #132	; 0x84
    a656:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    a658:	492a      	ldr	r1, [pc, #168]	; (a704 <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    a65a:	3204      	adds	r2, #4
    a65c:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    a65e:	492a      	ldr	r1, [pc, #168]	; (a708 <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    a660:	3204      	adds	r2, #4
    a662:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    a664:	4929      	ldr	r1, [pc, #164]	; (a70c <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    a666:	3204      	adds	r2, #4
    a668:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    a66a:	4929      	ldr	r1, [pc, #164]	; (a710 <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    a66c:	3204      	adds	r2, #4
    a66e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    a670:	4928      	ldr	r1, [pc, #160]	; (a714 <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    a672:	3204      	adds	r2, #4
    a674:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    a676:	4928      	ldr	r1, [pc, #160]	; (a718 <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    a678:	3204      	adds	r2, #4
    a67a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    a67c:	4927      	ldr	r1, [pc, #156]	; (a71c <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    a67e:	3204      	adds	r2, #4
    a680:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    a682:	4927      	ldr	r1, [pc, #156]	; (a720 <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    a684:	3204      	adds	r2, #4
    a686:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    a688:	4926      	ldr	r1, [pc, #152]	; (a724 <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    a68a:	3204      	adds	r2, #4
    a68c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    a68e:	4926      	ldr	r1, [pc, #152]	; (a728 <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    a690:	3204      	adds	r2, #4
    a692:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    a694:	4925      	ldr	r1, [pc, #148]	; (a72c <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    a696:	3204      	adds	r2, #4
    a698:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    a69a:	4925      	ldr	r1, [pc, #148]	; (a730 <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    a69c:	3204      	adds	r2, #4
    a69e:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    a6a0:	4924      	ldr	r1, [pc, #144]	; (a734 <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    a6a2:	3204      	adds	r2, #4
    a6a4:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    a6a6:	4924      	ldr	r1, [pc, #144]	; (a738 <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    a6a8:	3204      	adds	r2, #4
    a6aa:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    a6ac:	4923      	ldr	r1, [pc, #140]	; (a73c <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    a6ae:	3214      	adds	r2, #20
    a6b0:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    a6b2:	4923      	ldr	r1, [pc, #140]	; (a740 <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    a6b4:	3204      	adds	r2, #4
    a6b6:	5099      	str	r1, [r3, r2]
}
    a6b8:	4770      	bx	lr
    a6ba:	46c0      	nop			; (mov r8, r8)
    a6bc:	20000bdc 	.word	0x20000bdc
    a6c0:	00007c21 	.word	0x00007c21
    a6c4:	0000a1b9 	.word	0x0000a1b9
    a6c8:	0000a209 	.word	0x0000a209
    a6cc:	0000a255 	.word	0x0000a255
    a6d0:	00007a6d 	.word	0x00007a6d
    a6d4:	00007a7d 	.word	0x00007a7d
    a6d8:	00007a95 	.word	0x00007a95
    a6dc:	00007aa5 	.word	0x00007aa5
    a6e0:	00008991 	.word	0x00008991
    a6e4:	00007ab5 	.word	0x00007ab5
    a6e8:	00007ac5 	.word	0x00007ac5
    a6ec:	00008865 	.word	0x00008865
    a6f0:	00007dcd 	.word	0x00007dcd
    a6f4:	00007b15 	.word	0x00007b15
    a6f8:	000087b5 	.word	0x000087b5
    a6fc:	00007b61 	.word	0x00007b61
    a700:	0000a2a1 	.word	0x0000a2a1
    a704:	0000a2ed 	.word	0x0000a2ed
    a708:	0000a339 	.word	0x0000a339
    a70c:	00007b6b 	.word	0x00007b6b
    a710:	00007b75 	.word	0x00007b75
    a714:	00007b7f 	.word	0x00007b7f
    a718:	00007b89 	.word	0x00007b89
    a71c:	00007b95 	.word	0x00007b95
    a720:	00007ba1 	.word	0x00007ba1
    a724:	00007bab 	.word	0x00007bab
    a728:	00007bb3 	.word	0x00007bb3
    a72c:	00007bbb 	.word	0x00007bbb
    a730:	0000a421 	.word	0x0000a421
    a734:	00008219 	.word	0x00008219
    a738:	00007be5 	.word	0x00007be5
    a73c:	00007bc5 	.word	0x00007bc5
    a740:	00007bd5 	.word	0x00007bd5

0000a744 <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    a744:	4b2b      	ldr	r3, [pc, #172]	; (a7f4 <LORAREG_InitGetAttrFnPtrsEU+0xb0>)
    a746:	4a2c      	ldr	r2, [pc, #176]	; (a7f8 <LORAREG_InitGetAttrFnPtrsEU+0xb4>)
    a748:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    a74a:	4a2c      	ldr	r2, [pc, #176]	; (a7fc <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    a74c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    a74e:	4a2c      	ldr	r2, [pc, #176]	; (a800 <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    a750:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    a752:	4a2c      	ldr	r2, [pc, #176]	; (a804 <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    a754:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    a756:	4a2c      	ldr	r2, [pc, #176]	; (a808 <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    a758:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    a75a:	4a2c      	ldr	r2, [pc, #176]	; (a80c <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    a75c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    a75e:	4a2c      	ldr	r2, [pc, #176]	; (a810 <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    a760:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    a762:	4a2c      	ldr	r2, [pc, #176]	; (a814 <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    a764:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    a766:	4a2c      	ldr	r2, [pc, #176]	; (a818 <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    a768:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    a76a:	4a2c      	ldr	r2, [pc, #176]	; (a81c <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    a76c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    a76e:	4a2c      	ldr	r2, [pc, #176]	; (a820 <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    a770:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    a772:	4a2c      	ldr	r2, [pc, #176]	; (a824 <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    a774:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    a776:	4a2c      	ldr	r2, [pc, #176]	; (a828 <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    a778:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    a77a:	4a2c      	ldr	r2, [pc, #176]	; (a82c <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    a77c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    a77e:	4a2c      	ldr	r2, [pc, #176]	; (a830 <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    a780:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    a782:	4a2c      	ldr	r2, [pc, #176]	; (a834 <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    a784:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    a786:	492c      	ldr	r1, [pc, #176]	; (a838 <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    a788:	2284      	movs	r2, #132	; 0x84
    a78a:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    a78c:	492b      	ldr	r1, [pc, #172]	; (a83c <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    a78e:	3204      	adds	r2, #4
    a790:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    a792:	492b      	ldr	r1, [pc, #172]	; (a840 <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    a794:	3204      	adds	r2, #4
    a796:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    a798:	492a      	ldr	r1, [pc, #168]	; (a844 <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    a79a:	3204      	adds	r2, #4
    a79c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    a79e:	492a      	ldr	r1, [pc, #168]	; (a848 <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    a7a0:	3204      	adds	r2, #4
    a7a2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    a7a4:	4929      	ldr	r1, [pc, #164]	; (a84c <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    a7a6:	3204      	adds	r2, #4
    a7a8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    a7aa:	4929      	ldr	r1, [pc, #164]	; (a850 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    a7ac:	3204      	adds	r2, #4
    a7ae:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    a7b0:	4928      	ldr	r1, [pc, #160]	; (a854 <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    a7b2:	3204      	adds	r2, #4
    a7b4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    a7b6:	4928      	ldr	r1, [pc, #160]	; (a858 <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    a7b8:	3204      	adds	r2, #4
    a7ba:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    a7bc:	4927      	ldr	r1, [pc, #156]	; (a85c <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    a7be:	3204      	adds	r2, #4
    a7c0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    a7c2:	4927      	ldr	r1, [pc, #156]	; (a860 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    a7c4:	3204      	adds	r2, #4
    a7c6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    a7c8:	4926      	ldr	r1, [pc, #152]	; (a864 <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    a7ca:	3204      	adds	r2, #4
    a7cc:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    a7ce:	4926      	ldr	r1, [pc, #152]	; (a868 <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    a7d0:	3204      	adds	r2, #4
    a7d2:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    a7d4:	4925      	ldr	r1, [pc, #148]	; (a86c <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    a7d6:	3204      	adds	r2, #4
    a7d8:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    a7da:	4925      	ldr	r1, [pc, #148]	; (a870 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    a7dc:	3204      	adds	r2, #4
    a7de:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    a7e0:	4924      	ldr	r1, [pc, #144]	; (a874 <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    a7e2:	320c      	adds	r2, #12
    a7e4:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    a7e6:	4924      	ldr	r1, [pc, #144]	; (a878 <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    a7e8:	3208      	adds	r2, #8
    a7ea:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    a7ec:	4923      	ldr	r1, [pc, #140]	; (a87c <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    a7ee:	3204      	adds	r2, #4
    a7f0:	5099      	str	r1, [r3, r2]
}
    a7f2:	4770      	bx	lr
    a7f4:	20000bdc 	.word	0x20000bdc
    a7f8:	00008b59 	.word	0x00008b59
    a7fc:	00009e75 	.word	0x00009e75
    a800:	00009eb1 	.word	0x00009eb1
    a804:	00009ee9 	.word	0x00009ee9
    a808:	00007a6d 	.word	0x00007a6d
    a80c:	00007a7d 	.word	0x00007a7d
    a810:	00007a95 	.word	0x00007a95
    a814:	00007aa5 	.word	0x00007aa5
    a818:	00008991 	.word	0x00008991
    a81c:	00007ab5 	.word	0x00007ab5
    a820:	00007ac5 	.word	0x00007ac5
    a824:	00008a5d 	.word	0x00008a5d
    a828:	00007dcd 	.word	0x00007dcd
    a82c:	00007b15 	.word	0x00007b15
    a830:	000089f1 	.word	0x000089f1
    a834:	00007d85 	.word	0x00007d85
    a838:	00009f21 	.word	0x00009f21
    a83c:	00009f59 	.word	0x00009f59
    a840:	00009f91 	.word	0x00009f91
    a844:	0000931d 	.word	0x0000931d
    a848:	00007b75 	.word	0x00007b75
    a84c:	00007b7f 	.word	0x00007b7f
    a850:	00007b89 	.word	0x00007b89
    a854:	00007b95 	.word	0x00007b95
    a858:	00007ba1 	.word	0x00007ba1
    a85c:	00007bab 	.word	0x00007bab
    a860:	00007bb3 	.word	0x00007bb3
    a864:	00007bbb 	.word	0x00007bbb
    a868:	00009ff1 	.word	0x00009ff1
    a86c:	000083cd 	.word	0x000083cd
    a870:	00007be5 	.word	0x00007be5
    a874:	000089a9 	.word	0x000089a9
    a878:	00007bc5 	.word	0x00007bc5
    a87c:	00007bd5 	.word	0x00007bd5

0000a880 <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    a880:	4b2b      	ldr	r3, [pc, #172]	; (a930 <LORAREG_InitGetAttrFnPtrsAS+0xb0>)
    a882:	4a2c      	ldr	r2, [pc, #176]	; (a934 <LORAREG_InitGetAttrFnPtrsAS+0xb4>)
    a884:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    a886:	4a2c      	ldr	r2, [pc, #176]	; (a938 <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    a888:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    a88a:	4a2c      	ldr	r2, [pc, #176]	; (a93c <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    a88c:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    a88e:	4a2c      	ldr	r2, [pc, #176]	; (a940 <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    a890:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    a892:	4a2c      	ldr	r2, [pc, #176]	; (a944 <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    a894:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    a896:	4a2c      	ldr	r2, [pc, #176]	; (a948 <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    a898:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    a89a:	4a2c      	ldr	r2, [pc, #176]	; (a94c <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    a89c:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    a89e:	4a2c      	ldr	r2, [pc, #176]	; (a950 <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    a8a0:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    a8a2:	4a2c      	ldr	r2, [pc, #176]	; (a954 <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    a8a4:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    a8a6:	4a2c      	ldr	r2, [pc, #176]	; (a958 <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    a8a8:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    a8aa:	4a2c      	ldr	r2, [pc, #176]	; (a95c <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    a8ac:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    a8ae:	4a2c      	ldr	r2, [pc, #176]	; (a960 <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    a8b0:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    a8b2:	4a2c      	ldr	r2, [pc, #176]	; (a964 <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    a8b4:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    a8b6:	4a2c      	ldr	r2, [pc, #176]	; (a968 <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    a8b8:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    a8ba:	4a2c      	ldr	r2, [pc, #176]	; (a96c <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    a8bc:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    a8be:	492c      	ldr	r1, [pc, #176]	; (a970 <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    a8c0:	2284      	movs	r2, #132	; 0x84
    a8c2:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    a8c4:	492b      	ldr	r1, [pc, #172]	; (a974 <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    a8c6:	3204      	adds	r2, #4
    a8c8:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    a8ca:	492b      	ldr	r1, [pc, #172]	; (a978 <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    a8cc:	3204      	adds	r2, #4
    a8ce:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    a8d0:	492a      	ldr	r1, [pc, #168]	; (a97c <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    a8d2:	3208      	adds	r2, #8
    a8d4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    a8d6:	492a      	ldr	r1, [pc, #168]	; (a980 <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    a8d8:	3204      	adds	r2, #4
    a8da:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    a8dc:	4929      	ldr	r1, [pc, #164]	; (a984 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    a8de:	3204      	adds	r2, #4
    a8e0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    a8e2:	4929      	ldr	r1, [pc, #164]	; (a988 <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    a8e4:	3204      	adds	r2, #4
    a8e6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    a8e8:	4928      	ldr	r1, [pc, #160]	; (a98c <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    a8ea:	3204      	adds	r2, #4
    a8ec:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    a8ee:	4928      	ldr	r1, [pc, #160]	; (a990 <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    a8f0:	3204      	adds	r2, #4
    a8f2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    a8f4:	4927      	ldr	r1, [pc, #156]	; (a994 <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    a8f6:	3204      	adds	r2, #4
    a8f8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    a8fa:	4927      	ldr	r1, [pc, #156]	; (a998 <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    a8fc:	3204      	adds	r2, #4
    a8fe:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    a900:	4926      	ldr	r1, [pc, #152]	; (a99c <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    a902:	3204      	adds	r2, #4
    a904:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    a906:	4926      	ldr	r1, [pc, #152]	; (a9a0 <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    a908:	3204      	adds	r2, #4
    a90a:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    a90c:	4925      	ldr	r1, [pc, #148]	; (a9a4 <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    a90e:	3204      	adds	r2, #4
    a910:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    a912:	4925      	ldr	r1, [pc, #148]	; (a9a8 <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    a914:	320c      	adds	r2, #12
    a916:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    a918:	4924      	ldr	r1, [pc, #144]	; (a9ac <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    a91a:	3208      	adds	r2, #8
    a91c:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    a91e:	4924      	ldr	r1, [pc, #144]	; (a9b0 <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    a920:	3204      	adds	r2, #4
    a922:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    a924:	4a23      	ldr	r2, [pc, #140]	; (a9b4 <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    a926:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    a928:	4923      	ldr	r1, [pc, #140]	; (a9b8 <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    a92a:	2290      	movs	r2, #144	; 0x90
    a92c:	5099      	str	r1, [r3, r2]
}
    a92e:	4770      	bx	lr
    a930:	20000bdc 	.word	0x20000bdc
    a934:	00008c95 	.word	0x00008c95
    a938:	00009e75 	.word	0x00009e75
    a93c:	00009eb1 	.word	0x00009eb1
    a940:	00009e11 	.word	0x00009e11
    a944:	00007a6d 	.word	0x00007a6d
    a948:	00007a7d 	.word	0x00007a7d
    a94c:	00007a95 	.word	0x00007a95
    a950:	00007aa5 	.word	0x00007aa5
    a954:	00008991 	.word	0x00008991
    a958:	00007ab5 	.word	0x00007ab5
    a95c:	00007ac5 	.word	0x00007ac5
    a960:	00008a5d 	.word	0x00008a5d
    a964:	00007dcd 	.word	0x00007dcd
    a968:	00007b15 	.word	0x00007b15
    a96c:	00008ba1 	.word	0x00008ba1
    a970:	00009f21 	.word	0x00009f21
    a974:	00009f59 	.word	0x00009f59
    a978:	00009f91 	.word	0x00009f91
    a97c:	00007b75 	.word	0x00007b75
    a980:	00007b7f 	.word	0x00007b7f
    a984:	00007b89 	.word	0x00007b89
    a988:	00007b95 	.word	0x00007b95
    a98c:	00007ba1 	.word	0x00007ba1
    a990:	00007bab 	.word	0x00007bab
    a994:	00007bb3 	.word	0x00007bb3
    a998:	00007bbb 	.word	0x00007bbb
    a99c:	00009ff1 	.word	0x00009ff1
    a9a0:	000083cd 	.word	0x000083cd
    a9a4:	00007be5 	.word	0x00007be5
    a9a8:	000089a9 	.word	0x000089a9
    a9ac:	00007bc5 	.word	0x00007bc5
    a9b0:	00007bd5 	.word	0x00007bd5
    a9b4:	00007d85 	.word	0x00007d85
    a9b8:	0000931d 	.word	0x0000931d

0000a9bc <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    a9bc:	4b29      	ldr	r3, [pc, #164]	; (aa64 <LORAREG_InitGetAttrFnPtrsAU+0xa8>)
    a9be:	4a2a      	ldr	r2, [pc, #168]	; (aa68 <LORAREG_InitGetAttrFnPtrsAU+0xac>)
    a9c0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    a9c2:	4a2a      	ldr	r2, [pc, #168]	; (aa6c <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    a9c4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    a9c6:	4a2a      	ldr	r2, [pc, #168]	; (aa70 <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    a9c8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    a9ca:	4a2a      	ldr	r2, [pc, #168]	; (aa74 <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    a9cc:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    a9ce:	4a2a      	ldr	r2, [pc, #168]	; (aa78 <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    a9d0:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    a9d2:	4a2a      	ldr	r2, [pc, #168]	; (aa7c <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    a9d4:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    a9d6:	4a2a      	ldr	r2, [pc, #168]	; (aa80 <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    a9d8:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    a9da:	4a2a      	ldr	r2, [pc, #168]	; (aa84 <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    a9dc:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    a9de:	4a2a      	ldr	r2, [pc, #168]	; (aa88 <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    a9e0:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    a9e2:	4a2a      	ldr	r2, [pc, #168]	; (aa8c <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    a9e4:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    a9e6:	4a2a      	ldr	r2, [pc, #168]	; (aa90 <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    a9e8:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    a9ea:	4a2a      	ldr	r2, [pc, #168]	; (aa94 <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    a9ec:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    a9ee:	4a2a      	ldr	r2, [pc, #168]	; (aa98 <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    a9f0:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    a9f2:	4a2a      	ldr	r2, [pc, #168]	; (aa9c <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    a9f4:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    a9f6:	4a2a      	ldr	r2, [pc, #168]	; (aaa0 <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    a9f8:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    a9fa:	4a2a      	ldr	r2, [pc, #168]	; (aaa4 <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    a9fc:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    a9fe:	4a2a      	ldr	r2, [pc, #168]	; (aaa8 <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    aa00:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    aa02:	492a      	ldr	r1, [pc, #168]	; (aaac <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    aa04:	2284      	movs	r2, #132	; 0x84
    aa06:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    aa08:	4929      	ldr	r1, [pc, #164]	; (aab0 <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    aa0a:	3204      	adds	r2, #4
    aa0c:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    aa0e:	4929      	ldr	r1, [pc, #164]	; (aab4 <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    aa10:	3204      	adds	r2, #4
    aa12:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    aa14:	4928      	ldr	r1, [pc, #160]	; (aab8 <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    aa16:	3208      	adds	r2, #8
    aa18:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    aa1a:	4928      	ldr	r1, [pc, #160]	; (aabc <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    aa1c:	3204      	adds	r2, #4
    aa1e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    aa20:	4927      	ldr	r1, [pc, #156]	; (aac0 <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    aa22:	3204      	adds	r2, #4
    aa24:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    aa26:	4927      	ldr	r1, [pc, #156]	; (aac4 <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    aa28:	3204      	adds	r2, #4
    aa2a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    aa2c:	4926      	ldr	r1, [pc, #152]	; (aac8 <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    aa2e:	3204      	adds	r2, #4
    aa30:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    aa32:	4926      	ldr	r1, [pc, #152]	; (aacc <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    aa34:	3204      	adds	r2, #4
    aa36:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    aa38:	4925      	ldr	r1, [pc, #148]	; (aad0 <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    aa3a:	3204      	adds	r2, #4
    aa3c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    aa3e:	4925      	ldr	r1, [pc, #148]	; (aad4 <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    aa40:	3204      	adds	r2, #4
    aa42:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    aa44:	4924      	ldr	r1, [pc, #144]	; (aad8 <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    aa46:	3204      	adds	r2, #4
    aa48:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    aa4a:	4924      	ldr	r1, [pc, #144]	; (aadc <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    aa4c:	3204      	adds	r2, #4
    aa4e:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    aa50:	4923      	ldr	r1, [pc, #140]	; (aae0 <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    aa52:	3204      	adds	r2, #4
    aa54:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    aa56:	4923      	ldr	r1, [pc, #140]	; (aae4 <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    aa58:	3214      	adds	r2, #20
    aa5a:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    aa5c:	4922      	ldr	r1, [pc, #136]	; (aae8 <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    aa5e:	3204      	adds	r2, #4
    aa60:	5099      	str	r1, [r3, r2]
}
    aa62:	4770      	bx	lr
    aa64:	20000bdc 	.word	0x20000bdc
    aa68:	00007c21 	.word	0x00007c21
    aa6c:	0000a1b9 	.word	0x0000a1b9
    aa70:	0000a209 	.word	0x0000a209
    aa74:	0000a255 	.word	0x0000a255
    aa78:	00007a6d 	.word	0x00007a6d
    aa7c:	00007a7d 	.word	0x00007a7d
    aa80:	00007a95 	.word	0x00007a95
    aa84:	00007aa5 	.word	0x00007aa5
    aa88:	00008991 	.word	0x00008991
    aa8c:	00007ab5 	.word	0x00007ab5
    aa90:	00007ac5 	.word	0x00007ac5
    aa94:	00008865 	.word	0x00008865
    aa98:	00007dcd 	.word	0x00007dcd
    aa9c:	00007b15 	.word	0x00007b15
    aaa0:	000087b5 	.word	0x000087b5
    aaa4:	00007b61 	.word	0x00007b61
    aaa8:	00007b6b 	.word	0x00007b6b
    aaac:	0000a2a1 	.word	0x0000a2a1
    aab0:	0000a2ed 	.word	0x0000a2ed
    aab4:	0000a339 	.word	0x0000a339
    aab8:	00007b75 	.word	0x00007b75
    aabc:	00007b7f 	.word	0x00007b7f
    aac0:	00007b89 	.word	0x00007b89
    aac4:	00007b95 	.word	0x00007b95
    aac8:	00007ba1 	.word	0x00007ba1
    aacc:	00007bab 	.word	0x00007bab
    aad0:	00007bb3 	.word	0x00007bb3
    aad4:	00007bbb 	.word	0x00007bbb
    aad8:	0000a421 	.word	0x0000a421
    aadc:	00008219 	.word	0x00008219
    aae0:	00007be5 	.word	0x00007be5
    aae4:	00007bc5 	.word	0x00007bc5
    aae8:	00007bd5 	.word	0x00007bd5

0000aaec <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    aaec:	4b29      	ldr	r3, [pc, #164]	; (ab94 <LORAREG_InitGetAttrFnPtrsIN+0xa8>)
    aaee:	4a2a      	ldr	r2, [pc, #168]	; (ab98 <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    aaf0:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    aaf2:	4a2a      	ldr	r2, [pc, #168]	; (ab9c <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    aaf4:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    aaf6:	4a2a      	ldr	r2, [pc, #168]	; (aba0 <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    aaf8:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    aafa:	4a2a      	ldr	r2, [pc, #168]	; (aba4 <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    aafc:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    aafe:	4a2a      	ldr	r2, [pc, #168]	; (aba8 <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    ab00:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ab02:	4a2a      	ldr	r2, [pc, #168]	; (abac <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    ab04:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ab06:	4a2a      	ldr	r2, [pc, #168]	; (abb0 <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    ab08:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ab0a:	4a2a      	ldr	r2, [pc, #168]	; (abb4 <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    ab0c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    ab0e:	4a2a      	ldr	r2, [pc, #168]	; (abb8 <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    ab10:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    ab12:	4a2a      	ldr	r2, [pc, #168]	; (abbc <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    ab14:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    ab16:	4a2a      	ldr	r2, [pc, #168]	; (abc0 <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    ab18:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    ab1a:	4a2a      	ldr	r2, [pc, #168]	; (abc4 <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    ab1c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    ab1e:	4a2a      	ldr	r2, [pc, #168]	; (abc8 <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    ab20:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    ab22:	4a2a      	ldr	r2, [pc, #168]	; (abcc <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    ab24:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    ab26:	4a2a      	ldr	r2, [pc, #168]	; (abd0 <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    ab28:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    ab2a:	492a      	ldr	r1, [pc, #168]	; (abd4 <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    ab2c:	2284      	movs	r2, #132	; 0x84
    ab2e:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    ab30:	4929      	ldr	r1, [pc, #164]	; (abd8 <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    ab32:	3204      	adds	r2, #4
    ab34:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    ab36:	4929      	ldr	r1, [pc, #164]	; (abdc <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    ab38:	3204      	adds	r2, #4
    ab3a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    ab3c:	4928      	ldr	r1, [pc, #160]	; (abe0 <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    ab3e:	3208      	adds	r2, #8
    ab40:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    ab42:	4928      	ldr	r1, [pc, #160]	; (abe4 <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    ab44:	3204      	adds	r2, #4
    ab46:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    ab48:	4927      	ldr	r1, [pc, #156]	; (abe8 <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    ab4a:	3204      	adds	r2, #4
    ab4c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ab4e:	4927      	ldr	r1, [pc, #156]	; (abec <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    ab50:	3204      	adds	r2, #4
    ab52:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    ab54:	4926      	ldr	r1, [pc, #152]	; (abf0 <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    ab56:	3204      	adds	r2, #4
    ab58:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    ab5a:	4926      	ldr	r1, [pc, #152]	; (abf4 <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    ab5c:	3204      	adds	r2, #4
    ab5e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    ab60:	4925      	ldr	r1, [pc, #148]	; (abf8 <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    ab62:	3204      	adds	r2, #4
    ab64:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    ab66:	4925      	ldr	r1, [pc, #148]	; (abfc <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    ab68:	3204      	adds	r2, #4
    ab6a:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    ab6c:	4924      	ldr	r1, [pc, #144]	; (ac00 <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    ab6e:	3204      	adds	r2, #4
    ab70:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    ab72:	4924      	ldr	r1, [pc, #144]	; (ac04 <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    ab74:	3204      	adds	r2, #4
    ab76:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    ab78:	4923      	ldr	r1, [pc, #140]	; (ac08 <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    ab7a:	3204      	adds	r2, #4
    ab7c:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    ab7e:	4923      	ldr	r1, [pc, #140]	; (ac0c <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    ab80:	320c      	adds	r2, #12
    ab82:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    ab84:	4922      	ldr	r1, [pc, #136]	; (ac10 <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    ab86:	3208      	adds	r2, #8
    ab88:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    ab8a:	4922      	ldr	r1, [pc, #136]	; (ac14 <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    ab8c:	3204      	adds	r2, #4
    ab8e:	5099      	str	r1, [r3, r2]
}
    ab90:	4770      	bx	lr
    ab92:	46c0      	nop			; (mov r8, r8)
    ab94:	20000bdc 	.word	0x20000bdc
    ab98:	00008b59 	.word	0x00008b59
    ab9c:	00009e75 	.word	0x00009e75
    aba0:	00009eb1 	.word	0x00009eb1
    aba4:	00009ee9 	.word	0x00009ee9
    aba8:	00007a6d 	.word	0x00007a6d
    abac:	00007a7d 	.word	0x00007a7d
    abb0:	00007a95 	.word	0x00007a95
    abb4:	00007aa5 	.word	0x00007aa5
    abb8:	00008991 	.word	0x00008991
    abbc:	00007ab5 	.word	0x00007ab5
    abc0:	00007ac5 	.word	0x00007ac5
    abc4:	00008a5d 	.word	0x00008a5d
    abc8:	00007dcd 	.word	0x00007dcd
    abcc:	00007b15 	.word	0x00007b15
    abd0:	00008cdd 	.word	0x00008cdd
    abd4:	00009f21 	.word	0x00009f21
    abd8:	00009f59 	.word	0x00009f59
    abdc:	00009f91 	.word	0x00009f91
    abe0:	00007b75 	.word	0x00007b75
    abe4:	00007b7f 	.word	0x00007b7f
    abe8:	00007b89 	.word	0x00007b89
    abec:	00007b95 	.word	0x00007b95
    abf0:	00007ba1 	.word	0x00007ba1
    abf4:	00007bab 	.word	0x00007bab
    abf8:	00007bb3 	.word	0x00007bb3
    abfc:	00007bbb 	.word	0x00007bbb
    ac00:	00009ff1 	.word	0x00009ff1
    ac04:	000083cd 	.word	0x000083cd
    ac08:	00007be5 	.word	0x00007be5
    ac0c:	000089a9 	.word	0x000089a9
    ac10:	00007bc5 	.word	0x00007bc5
    ac14:	00007bd5 	.word	0x00007bd5

0000ac18 <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    ac18:	4b2c      	ldr	r3, [pc, #176]	; (accc <LORAREG_InitGetAttrFnPtrsJP+0xb4>)
    ac1a:	4a2d      	ldr	r2, [pc, #180]	; (acd0 <LORAREG_InitGetAttrFnPtrsJP+0xb8>)
    ac1c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    ac1e:	4a2d      	ldr	r2, [pc, #180]	; (acd4 <LORAREG_InitGetAttrFnPtrsJP+0xbc>)
    ac20:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    ac22:	4a2d      	ldr	r2, [pc, #180]	; (acd8 <LORAREG_InitGetAttrFnPtrsJP+0xc0>)
    ac24:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    ac26:	4a2d      	ldr	r2, [pc, #180]	; (acdc <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    ac28:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    ac2a:	4a2d      	ldr	r2, [pc, #180]	; (ace0 <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    ac2c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ac2e:	4a2d      	ldr	r2, [pc, #180]	; (ace4 <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    ac30:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ac32:	4a2d      	ldr	r2, [pc, #180]	; (ace8 <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    ac34:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ac36:	4a2d      	ldr	r2, [pc, #180]	; (acec <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    ac38:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    ac3a:	4a2d      	ldr	r2, [pc, #180]	; (acf0 <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    ac3c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    ac3e:	4a2d      	ldr	r2, [pc, #180]	; (acf4 <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    ac40:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    ac42:	4a2d      	ldr	r2, [pc, #180]	; (acf8 <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    ac44:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    ac46:	4a2d      	ldr	r2, [pc, #180]	; (acfc <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    ac48:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    ac4a:	4a2d      	ldr	r2, [pc, #180]	; (ad00 <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    ac4c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    ac4e:	4a2d      	ldr	r2, [pc, #180]	; (ad04 <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    ac50:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    ac52:	4a2d      	ldr	r2, [pc, #180]	; (ad08 <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    ac54:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    ac56:	492d      	ldr	r1, [pc, #180]	; (ad0c <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    ac58:	2284      	movs	r2, #132	; 0x84
    ac5a:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    ac5c:	492c      	ldr	r1, [pc, #176]	; (ad10 <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    ac5e:	3204      	adds	r2, #4
    ac60:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    ac62:	492c      	ldr	r1, [pc, #176]	; (ad14 <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    ac64:	3204      	adds	r2, #4
    ac66:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    ac68:	492b      	ldr	r1, [pc, #172]	; (ad18 <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    ac6a:	3208      	adds	r2, #8
    ac6c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    ac6e:	492b      	ldr	r1, [pc, #172]	; (ad1c <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    ac70:	3204      	adds	r2, #4
    ac72:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    ac74:	492a      	ldr	r1, [pc, #168]	; (ad20 <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    ac76:	3204      	adds	r2, #4
    ac78:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    ac7a:	492a      	ldr	r1, [pc, #168]	; (ad24 <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    ac7c:	3204      	adds	r2, #4
    ac7e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    ac80:	4929      	ldr	r1, [pc, #164]	; (ad28 <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    ac82:	3204      	adds	r2, #4
    ac84:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    ac86:	4929      	ldr	r1, [pc, #164]	; (ad2c <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    ac88:	3204      	adds	r2, #4
    ac8a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    ac8c:	4928      	ldr	r1, [pc, #160]	; (ad30 <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    ac8e:	3204      	adds	r2, #4
    ac90:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    ac92:	4928      	ldr	r1, [pc, #160]	; (ad34 <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    ac94:	3204      	adds	r2, #4
    ac96:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    ac98:	4927      	ldr	r1, [pc, #156]	; (ad38 <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    ac9a:	3204      	adds	r2, #4
    ac9c:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    ac9e:	4927      	ldr	r1, [pc, #156]	; (ad3c <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    aca0:	3204      	adds	r2, #4
    aca2:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    aca4:	4926      	ldr	r1, [pc, #152]	; (ad40 <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    aca6:	3204      	adds	r2, #4
    aca8:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    acaa:	4926      	ldr	r1, [pc, #152]	; (ad44 <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    acac:	3204      	adds	r2, #4
    acae:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    acb0:	4925      	ldr	r1, [pc, #148]	; (ad48 <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    acb2:	3204      	adds	r2, #4
    acb4:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    acb6:	4925      	ldr	r1, [pc, #148]	; (ad4c <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    acb8:	3204      	adds	r2, #4
    acba:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    acbc:	4924      	ldr	r1, [pc, #144]	; (ad50 <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    acbe:	3208      	adds	r2, #8
    acc0:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    acc2:	4924      	ldr	r1, [pc, #144]	; (ad54 <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    acc4:	3204      	adds	r2, #4
    acc6:	5099      	str	r1, [r3, r2]
}
    acc8:	4770      	bx	lr
    acca:	46c0      	nop			; (mov r8, r8)
    accc:	20000bdc 	.word	0x20000bdc
    acd0:	00008c95 	.word	0x00008c95
    acd4:	00009e75 	.word	0x00009e75
    acd8:	00009eb1 	.word	0x00009eb1
    acdc:	00009e11 	.word	0x00009e11
    ace0:	00007a6d 	.word	0x00007a6d
    ace4:	00007a7d 	.word	0x00007a7d
    ace8:	00007a95 	.word	0x00007a95
    acec:	00007aa5 	.word	0x00007aa5
    acf0:	00008991 	.word	0x00008991
    acf4:	00007ab5 	.word	0x00007ab5
    acf8:	00007ac5 	.word	0x00007ac5
    acfc:	00008a5d 	.word	0x00008a5d
    ad00:	00007dcd 	.word	0x00007dcd
    ad04:	00007b15 	.word	0x00007b15
    ad08:	00008ba1 	.word	0x00008ba1
    ad0c:	00009f21 	.word	0x00009f21
    ad10:	00009f59 	.word	0x00009f59
    ad14:	00009f91 	.word	0x00009f91
    ad18:	00007b75 	.word	0x00007b75
    ad1c:	00007b7f 	.word	0x00007b7f
    ad20:	00007b89 	.word	0x00007b89
    ad24:	00007b95 	.word	0x00007b95
    ad28:	00007ba1 	.word	0x00007ba1
    ad2c:	00007bab 	.word	0x00007bab
    ad30:	00007bb3 	.word	0x00007bb3
    ad34:	00007bbb 	.word	0x00007bbb
    ad38:	00009ff1 	.word	0x00009ff1
    ad3c:	000083cd 	.word	0x000083cd
    ad40:	00007be5 	.word	0x00007be5
    ad44:	00007bf5 	.word	0x00007bf5
    ad48:	00008d65 	.word	0x00008d65
    ad4c:	000089a9 	.word	0x000089a9
    ad50:	00007bc5 	.word	0x00007bc5
    ad54:	00007bd5 	.word	0x00007bd5

0000ad58 <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    ad58:	4b2c      	ldr	r3, [pc, #176]	; (ae0c <LORAREG_InitGetAttrFnPtrsKR+0xb4>)
    ad5a:	4a2d      	ldr	r2, [pc, #180]	; (ae10 <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    ad5c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    ad5e:	4a2d      	ldr	r2, [pc, #180]	; (ae14 <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    ad60:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    ad62:	4a2d      	ldr	r2, [pc, #180]	; (ae18 <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    ad64:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    ad66:	4a2d      	ldr	r2, [pc, #180]	; (ae1c <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    ad68:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    ad6a:	4a2d      	ldr	r2, [pc, #180]	; (ae20 <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    ad6c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    ad6e:	4a2d      	ldr	r2, [pc, #180]	; (ae24 <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    ad70:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    ad72:	4a2d      	ldr	r2, [pc, #180]	; (ae28 <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    ad74:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    ad76:	4a2d      	ldr	r2, [pc, #180]	; (ae2c <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    ad78:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    ad7a:	4a2d      	ldr	r2, [pc, #180]	; (ae30 <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    ad7c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    ad7e:	4a2d      	ldr	r2, [pc, #180]	; (ae34 <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    ad80:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    ad82:	4a2d      	ldr	r2, [pc, #180]	; (ae38 <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    ad84:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    ad86:	4a2d      	ldr	r2, [pc, #180]	; (ae3c <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    ad88:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    ad8a:	4a2d      	ldr	r2, [pc, #180]	; (ae40 <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    ad8c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    ad8e:	4a2d      	ldr	r2, [pc, #180]	; (ae44 <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    ad90:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    ad92:	4a2d      	ldr	r2, [pc, #180]	; (ae48 <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    ad94:	665a      	str	r2, [r3, #100]	; 0x64
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    ad96:	492d      	ldr	r1, [pc, #180]	; (ae4c <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    ad98:	2284      	movs	r2, #132	; 0x84
    ad9a:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    ad9c:	492c      	ldr	r1, [pc, #176]	; (ae50 <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    ad9e:	3204      	adds	r2, #4
    ada0:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    ada2:	492c      	ldr	r1, [pc, #176]	; (ae54 <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    ada4:	3204      	adds	r2, #4
    ada6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    ada8:	492b      	ldr	r1, [pc, #172]	; (ae58 <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    adaa:	3208      	adds	r2, #8
    adac:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    adae:	492b      	ldr	r1, [pc, #172]	; (ae5c <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    adb0:	3204      	adds	r2, #4
    adb2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    adb4:	492a      	ldr	r1, [pc, #168]	; (ae60 <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    adb6:	3204      	adds	r2, #4
    adb8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    adba:	492a      	ldr	r1, [pc, #168]	; (ae64 <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    adbc:	3204      	adds	r2, #4
    adbe:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    adc0:	4929      	ldr	r1, [pc, #164]	; (ae68 <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    adc2:	3204      	adds	r2, #4
    adc4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    adc6:	4929      	ldr	r1, [pc, #164]	; (ae6c <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    adc8:	3204      	adds	r2, #4
    adca:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    adcc:	4928      	ldr	r1, [pc, #160]	; (ae70 <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    adce:	3204      	adds	r2, #4
    add0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    add2:	4928      	ldr	r1, [pc, #160]	; (ae74 <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    add4:	3204      	adds	r2, #4
    add6:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    add8:	4927      	ldr	r1, [pc, #156]	; (ae78 <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    adda:	3204      	adds	r2, #4
    addc:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    adde:	4927      	ldr	r1, [pc, #156]	; (ae7c <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    ade0:	3204      	adds	r2, #4
    ade2:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    ade4:	4926      	ldr	r1, [pc, #152]	; (ae80 <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    ade6:	3204      	adds	r2, #4
    ade8:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    adea:	4926      	ldr	r1, [pc, #152]	; (ae84 <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    adec:	3204      	adds	r2, #4
    adee:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    adf0:	4925      	ldr	r1, [pc, #148]	; (ae88 <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    adf2:	3204      	adds	r2, #4
    adf4:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    adf6:	4925      	ldr	r1, [pc, #148]	; (ae8c <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    adf8:	3204      	adds	r2, #4
    adfa:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    adfc:	4924      	ldr	r1, [pc, #144]	; (ae90 <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    adfe:	3208      	adds	r2, #8
    ae00:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    ae02:	4924      	ldr	r1, [pc, #144]	; (ae94 <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    ae04:	3204      	adds	r2, #4
    ae06:	5099      	str	r1, [r3, r2]
}
    ae08:	4770      	bx	lr
    ae0a:	46c0      	nop			; (mov r8, r8)
    ae0c:	20000bdc 	.word	0x20000bdc
    ae10:	00008b59 	.word	0x00008b59
    ae14:	00009e75 	.word	0x00009e75
    ae18:	00009eb1 	.word	0x00009eb1
    ae1c:	00009ee9 	.word	0x00009ee9
    ae20:	00007a6d 	.word	0x00007a6d
    ae24:	00007a7d 	.word	0x00007a7d
    ae28:	00007a95 	.word	0x00007a95
    ae2c:	00007aa5 	.word	0x00007aa5
    ae30:	00008991 	.word	0x00008991
    ae34:	00007ab5 	.word	0x00007ab5
    ae38:	00007ac5 	.word	0x00007ac5
    ae3c:	00008a5d 	.word	0x00008a5d
    ae40:	00007dcd 	.word	0x00007dcd
    ae44:	00007b15 	.word	0x00007b15
    ae48:	000089f1 	.word	0x000089f1
    ae4c:	00009f21 	.word	0x00009f21
    ae50:	00009f59 	.word	0x00009f59
    ae54:	00009f91 	.word	0x00009f91
    ae58:	00007b75 	.word	0x00007b75
    ae5c:	00007b7f 	.word	0x00007b7f
    ae60:	00007b89 	.word	0x00007b89
    ae64:	00007b95 	.word	0x00007b95
    ae68:	00007ba1 	.word	0x00007ba1
    ae6c:	00007bab 	.word	0x00007bab
    ae70:	00007bb3 	.word	0x00007bb3
    ae74:	00007bbb 	.word	0x00007bbb
    ae78:	00009ff1 	.word	0x00009ff1
    ae7c:	000083cd 	.word	0x000083cd
    ae80:	00007be5 	.word	0x00007be5
    ae84:	00007bf5 	.word	0x00007bf5
    ae88:	00008d65 	.word	0x00008d65
    ae8c:	000089a9 	.word	0x000089a9
    ae90:	00007bc5 	.word	0x00007bc5
    ae94:	00007bd5 	.word	0x00007bd5

0000ae98 <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    ae98:	4b0d      	ldr	r3, [pc, #52]	; (aed0 <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    ae9a:	4a0e      	ldr	r2, [pc, #56]	; (aed4 <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    ae9c:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    ae9e:	4a0e      	ldr	r2, [pc, #56]	; (aed8 <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    aea0:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    aea2:	4a0e      	ldr	r2, [pc, #56]	; (aedc <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    aea4:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    aea6:	490e      	ldr	r1, [pc, #56]	; (aee0 <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    aea8:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    aeaa:	490e      	ldr	r1, [pc, #56]	; (aee4 <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    aeac:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    aeae:	490e      	ldr	r1, [pc, #56]	; (aee8 <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    aeb0:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    aeb2:	490e      	ldr	r1, [pc, #56]	; (aeec <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    aeb4:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    aeb6:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    aeb8:	4a0d      	ldr	r2, [pc, #52]	; (aef0 <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    aeba:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    aebc:	4a0d      	ldr	r2, [pc, #52]	; (aef4 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    aebe:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    aec0:	4a0d      	ldr	r2, [pc, #52]	; (aef8 <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    aec2:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    aec4:	4a0d      	ldr	r2, [pc, #52]	; (aefc <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    aec6:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    aec8:	490d      	ldr	r1, [pc, #52]	; (af00 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    aeca:	22d8      	movs	r2, #216	; 0xd8
    aecc:	5099      	str	r1, [r3, r2]
}
    aece:	4770      	bx	lr
    aed0:	20000d94 	.word	0x20000d94
    aed4:	00007f9d 	.word	0x00007f9d
    aed8:	0000a385 	.word	0x0000a385
    aedc:	00007cf5 	.word	0x00007cf5
    aee0:	00007cb5 	.word	0x00007cb5
    aee4:	00007f41 	.word	0x00007f41
    aee8:	0000a0e5 	.word	0x0000a0e5
    aeec:	00007d41 	.word	0x00007d41
    aef0:	00007fd1 	.word	0x00007fd1
    aef4:	00007e6d 	.word	0x00007e6d
    aef8:	00007e41 	.word	0x00007e41
    aefc:	00007e55 	.word	0x00007e55
    af00:	00009fc9 	.word	0x00009fc9

0000af04 <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    af04:	4b0d      	ldr	r3, [pc, #52]	; (af3c <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    af06:	4a0e      	ldr	r2, [pc, #56]	; (af40 <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    af08:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    af0a:	4a0e      	ldr	r2, [pc, #56]	; (af44 <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    af0c:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    af0e:	4a0e      	ldr	r2, [pc, #56]	; (af48 <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    af10:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    af12:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    af14:	490d      	ldr	r1, [pc, #52]	; (af4c <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    af16:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    af18:	490d      	ldr	r1, [pc, #52]	; (af50 <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    af1a:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    af1c:	490d      	ldr	r1, [pc, #52]	; (af54 <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    af1e:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    af20:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    af22:	4a0d      	ldr	r2, [pc, #52]	; (af58 <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    af24:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    af26:	4a0d      	ldr	r2, [pc, #52]	; (af5c <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    af28:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    af2a:	4a0d      	ldr	r2, [pc, #52]	; (af60 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    af2c:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    af2e:	4a0d      	ldr	r2, [pc, #52]	; (af64 <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    af30:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    af32:	490d      	ldr	r1, [pc, #52]	; (af68 <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    af34:	22d8      	movs	r2, #216	; 0xd8
    af36:	5099      	str	r1, [r3, r2]
}
    af38:	4770      	bx	lr
    af3a:	46c0      	nop			; (mov r8, r8)
    af3c:	20000d94 	.word	0x20000d94
    af40:	00008059 	.word	0x00008059
    af44:	00008e35 	.word	0x00008e35
    af48:	00007f2d 	.word	0x00007f2d
    af4c:	00007f41 	.word	0x00007f41
    af50:	00009d2d 	.word	0x00009d2d
    af54:	00007d59 	.word	0x00007d59
    af58:	00007fd1 	.word	0x00007fd1
    af5c:	00007e71 	.word	0x00007e71
    af60:	00007ec5 	.word	0x00007ec5
    af64:	00007e55 	.word	0x00007e55
    af68:	00007ed9 	.word	0x00007ed9

0000af6c <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    af6c:	4b0d      	ldr	r3, [pc, #52]	; (afa4 <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    af6e:	4a0e      	ldr	r2, [pc, #56]	; (afa8 <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    af70:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    af72:	4a0e      	ldr	r2, [pc, #56]	; (afac <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    af74:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    af76:	4a0e      	ldr	r2, [pc, #56]	; (afb0 <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    af78:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    af7a:	490e      	ldr	r1, [pc, #56]	; (afb4 <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    af7c:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    af7e:	490e      	ldr	r1, [pc, #56]	; (afb8 <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    af80:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    af82:	490e      	ldr	r1, [pc, #56]	; (afbc <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    af84:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    af86:	490e      	ldr	r1, [pc, #56]	; (afc0 <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    af88:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    af8a:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    af8c:	4a0d      	ldr	r2, [pc, #52]	; (afc4 <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    af8e:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    af90:	4a0d      	ldr	r2, [pc, #52]	; (afc8 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    af92:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    af94:	4a0d      	ldr	r2, [pc, #52]	; (afcc <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    af96:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    af98:	4a0d      	ldr	r2, [pc, #52]	; (afd0 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    af9a:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    af9c:	490d      	ldr	r1, [pc, #52]	; (afd4 <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    af9e:	22d8      	movs	r2, #216	; 0xd8
    afa0:	5099      	str	r1, [r3, r2]
}
    afa2:	4770      	bx	lr
    afa4:	20000d94 	.word	0x20000d94
    afa8:	00008075 	.word	0x00008075
    afac:	00008e35 	.word	0x00008e35
    afb0:	00007d19 	.word	0x00007d19
    afb4:	00007ccd 	.word	0x00007ccd
    afb8:	00007f41 	.word	0x00007f41
    afbc:	00009d2d 	.word	0x00009d2d
    afc0:	00007d59 	.word	0x00007d59
    afc4:	00007fd1 	.word	0x00007fd1
    afc8:	00007e71 	.word	0x00007e71
    afcc:	00007ec5 	.word	0x00007ec5
    afd0:	00007e55 	.word	0x00007e55
    afd4:	00007ed9 	.word	0x00007ed9

0000afd8 <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    afd8:	4b0d      	ldr	r3, [pc, #52]	; (b010 <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    afda:	4a0e      	ldr	r2, [pc, #56]	; (b014 <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    afdc:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    afde:	4a0e      	ldr	r2, [pc, #56]	; (b018 <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    afe0:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    afe2:	4a0e      	ldr	r2, [pc, #56]	; (b01c <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    afe4:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    afe6:	490e      	ldr	r1, [pc, #56]	; (b020 <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    afe8:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    afea:	490e      	ldr	r1, [pc, #56]	; (b024 <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    afec:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    afee:	490e      	ldr	r1, [pc, #56]	; (b028 <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    aff0:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    aff2:	490e      	ldr	r1, [pc, #56]	; (b02c <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    aff4:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    aff6:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    aff8:	4a0d      	ldr	r2, [pc, #52]	; (b030 <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    affa:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    affc:	4a0d      	ldr	r2, [pc, #52]	; (b034 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    affe:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    b000:	4a0d      	ldr	r2, [pc, #52]	; (b038 <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    b002:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    b004:	4a0d      	ldr	r2, [pc, #52]	; (b03c <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    b006:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    b008:	490d      	ldr	r1, [pc, #52]	; (b040 <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    b00a:	22d8      	movs	r2, #216	; 0xd8
    b00c:	5099      	str	r1, [r3, r2]
}
    b00e:	4770      	bx	lr
    b010:	20000d94 	.word	0x20000d94
    b014:	00007f9d 	.word	0x00007f9d
    b018:	0000a385 	.word	0x0000a385
    b01c:	00007cf5 	.word	0x00007cf5
    b020:	00007cb5 	.word	0x00007cb5
    b024:	00007f41 	.word	0x00007f41
    b028:	0000a0e5 	.word	0x0000a0e5
    b02c:	00007d41 	.word	0x00007d41
    b030:	00007fd1 	.word	0x00007fd1
    b034:	00007e6d 	.word	0x00007e6d
    b038:	00007e41 	.word	0x00007e41
    b03c:	00007e55 	.word	0x00007e55
    b040:	00009fc9 	.word	0x00009fc9

0000b044 <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    b044:	4b0d      	ldr	r3, [pc, #52]	; (b07c <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    b046:	4a0e      	ldr	r2, [pc, #56]	; (b080 <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    b048:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    b04a:	4a0e      	ldr	r2, [pc, #56]	; (b084 <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    b04c:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    b04e:	4a0e      	ldr	r2, [pc, #56]	; (b088 <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    b050:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    b052:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    b054:	490d      	ldr	r1, [pc, #52]	; (b08c <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    b056:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    b058:	490d      	ldr	r1, [pc, #52]	; (b090 <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    b05a:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    b05c:	490d      	ldr	r1, [pc, #52]	; (b094 <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    b05e:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    b060:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    b062:	4a0d      	ldr	r2, [pc, #52]	; (b098 <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    b064:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    b066:	4a0d      	ldr	r2, [pc, #52]	; (b09c <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    b068:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    b06a:	4a0d      	ldr	r2, [pc, #52]	; (b0a0 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    b06c:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    b06e:	4a0d      	ldr	r2, [pc, #52]	; (b0a4 <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    b070:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    b072:	490d      	ldr	r1, [pc, #52]	; (b0a8 <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    b074:	22d8      	movs	r2, #216	; 0xd8
    b076:	5099      	str	r1, [r3, r2]
}
    b078:	4770      	bx	lr
    b07a:	46c0      	nop			; (mov r8, r8)
    b07c:	20000d94 	.word	0x20000d94
    b080:	00008e59 	.word	0x00008e59
    b084:	00008e35 	.word	0x00008e35
    b088:	00007f2d 	.word	0x00007f2d
    b08c:	00007f41 	.word	0x00007f41
    b090:	00009d2d 	.word	0x00009d2d
    b094:	00007d59 	.word	0x00007d59
    b098:	00007fd1 	.word	0x00007fd1
    b09c:	00007e71 	.word	0x00007e71
    b0a0:	00007ec5 	.word	0x00007ec5
    b0a4:	00007e55 	.word	0x00007e55
    b0a8:	00007ed9 	.word	0x00007ed9

0000b0ac <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    b0ac:	4b0d      	ldr	r3, [pc, #52]	; (b0e4 <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    b0ae:	4a0e      	ldr	r2, [pc, #56]	; (b0e8 <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    b0b0:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    b0b2:	4a0e      	ldr	r2, [pc, #56]	; (b0ec <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    b0b4:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    b0b6:	4a0e      	ldr	r2, [pc, #56]	; (b0f0 <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    b0b8:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    b0ba:	490e      	ldr	r1, [pc, #56]	; (b0f4 <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    b0bc:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    b0be:	490e      	ldr	r1, [pc, #56]	; (b0f8 <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    b0c0:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    b0c2:	490e      	ldr	r1, [pc, #56]	; (b0fc <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    b0c4:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    b0c6:	490e      	ldr	r1, [pc, #56]	; (b100 <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    b0c8:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    b0ca:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    b0cc:	4a0d      	ldr	r2, [pc, #52]	; (b104 <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    b0ce:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    b0d0:	4a0d      	ldr	r2, [pc, #52]	; (b108 <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    b0d2:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    b0d4:	4a0d      	ldr	r2, [pc, #52]	; (b10c <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    b0d6:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    b0d8:	4a0d      	ldr	r2, [pc, #52]	; (b110 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    b0da:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    b0dc:	490d      	ldr	r1, [pc, #52]	; (b114 <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    b0de:	22d8      	movs	r2, #216	; 0xd8
    b0e0:	5099      	str	r1, [r3, r2]
}
    b0e2:	4770      	bx	lr
    b0e4:	20000d94 	.word	0x20000d94
    b0e8:	00008e89 	.word	0x00008e89
    b0ec:	00008e35 	.word	0x00008e35
    b0f0:	00007d19 	.word	0x00007d19
    b0f4:	00007ccd 	.word	0x00007ccd
    b0f8:	00007f41 	.word	0x00007f41
    b0fc:	00009d2d 	.word	0x00009d2d
    b100:	00007d59 	.word	0x00007d59
    b104:	00007fd1 	.word	0x00007fd1
    b108:	00007e71 	.word	0x00007e71
    b10c:	00007ec5 	.word	0x00007ec5
    b110:	00007e55 	.word	0x00007e55
    b114:	00007ed9 	.word	0x00007ed9

0000b118 <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    b118:	4b0d      	ldr	r3, [pc, #52]	; (b150 <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    b11a:	4a0e      	ldr	r2, [pc, #56]	; (b154 <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    b11c:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    b11e:	4a0e      	ldr	r2, [pc, #56]	; (b158 <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    b120:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    b122:	4a0e      	ldr	r2, [pc, #56]	; (b15c <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    b124:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    b126:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    b128:	490d      	ldr	r1, [pc, #52]	; (b160 <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    b12a:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    b12c:	490d      	ldr	r1, [pc, #52]	; (b164 <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    b12e:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    b130:	490d      	ldr	r1, [pc, #52]	; (b168 <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    b132:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    b134:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    b136:	4a0d      	ldr	r2, [pc, #52]	; (b16c <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    b138:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    b13a:	4a0d      	ldr	r2, [pc, #52]	; (b170 <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    b13c:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    b13e:	4a0d      	ldr	r2, [pc, #52]	; (b174 <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    b140:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    b142:	4a0d      	ldr	r2, [pc, #52]	; (b178 <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    b144:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    b146:	490d      	ldr	r1, [pc, #52]	; (b17c <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    b148:	22d8      	movs	r2, #216	; 0xd8
    b14a:	5099      	str	r1, [r3, r2]
}
    b14c:	4770      	bx	lr
    b14e:	46c0      	nop			; (mov r8, r8)
    b150:	20000d94 	.word	0x20000d94
    b154:	00008eb9 	.word	0x00008eb9
    b158:	00008e35 	.word	0x00008e35
    b15c:	00007f2d 	.word	0x00007f2d
    b160:	00007f41 	.word	0x00007f41
    b164:	00009d2d 	.word	0x00009d2d
    b168:	00007d59 	.word	0x00007d59
    b16c:	00007fd1 	.word	0x00007fd1
    b170:	00007e71 	.word	0x00007e71
    b174:	00007ec5 	.word	0x00007ec5
    b178:	00007e55 	.word	0x00007e55
    b17c:	00007ed9 	.word	0x00007ed9

0000b180 <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    b180:	4b03      	ldr	r3, [pc, #12]	; (b190 <LORAREG_InitSetAttrFnPtrsNA+0x10>)
    b182:	4a04      	ldr	r2, [pc, #16]	; (b194 <LORAREG_InitSetAttrFnPtrsNA+0x14>)
    b184:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    b186:	4a04      	ldr	r2, [pc, #16]	; (b198 <LORAREG_InitSetAttrFnPtrsNA+0x18>)
    b188:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    b18a:	4a04      	ldr	r2, [pc, #16]	; (b19c <LORAREG_InitSetAttrFnPtrsNA+0x1c>)
    b18c:	671a      	str	r2, [r3, #112]	; 0x70
}
    b18e:	4770      	bx	lr
    b190:	20000cb8 	.word	0x20000cb8
    b194:	0000a14d 	.word	0x0000a14d
    b198:	0000a0c1 	.word	0x0000a0c1
    b19c:	00008f01 	.word	0x00008f01

0000b1a0 <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    b1a0:	4b08      	ldr	r3, [pc, #32]	; (b1c4 <LORAREG_InitSetAttrFnPtrsEU+0x24>)
    b1a2:	4a09      	ldr	r2, [pc, #36]	; (b1c8 <LORAREG_InitSetAttrFnPtrsEU+0x28>)
    b1a4:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    b1a6:	4a09      	ldr	r2, [pc, #36]	; (b1cc <LORAREG_InitSetAttrFnPtrsEU+0x2c>)
    b1a8:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    b1aa:	4a09      	ldr	r2, [pc, #36]	; (b1d0 <LORAREG_InitSetAttrFnPtrsEU+0x30>)
    b1ac:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    b1ae:	4a09      	ldr	r2, [pc, #36]	; (b1d4 <LORAREG_InitSetAttrFnPtrsEU+0x34>)
    b1b0:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    b1b2:	4a09      	ldr	r2, [pc, #36]	; (b1d8 <LORAREG_InitSetAttrFnPtrsEU+0x38>)
    b1b4:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    b1b6:	4a09      	ldr	r2, [pc, #36]	; (b1dc <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    b1b8:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    b1ba:	4909      	ldr	r1, [pc, #36]	; (b1e0 <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    b1bc:	22c8      	movs	r2, #200	; 0xc8
    b1be:	5099      	str	r1, [r3, r2]
}
    b1c0:	4770      	bx	lr
    b1c2:	46c0      	nop			; (mov r8, r8)
    b1c4:	20000cb8 	.word	0x20000cb8
    b1c8:	00009d55 	.word	0x00009d55
    b1cc:	000085ad 	.word	0x000085ad
    b1d0:	0000924d 	.word	0x0000924d
    b1d4:	000094b1 	.word	0x000094b1
    b1d8:	0000912d 	.word	0x0000912d
    b1dc:	00009039 	.word	0x00009039
    b1e0:	00008f99 	.word	0x00008f99

0000b1e4 <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    b1e4:	4b09      	ldr	r3, [pc, #36]	; (b20c <LORAREG_InitSetAttrFnPtrsAS+0x28>)
    b1e6:	4a0a      	ldr	r2, [pc, #40]	; (b210 <LORAREG_InitSetAttrFnPtrsAS+0x2c>)
    b1e8:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    b1ea:	4a0a      	ldr	r2, [pc, #40]	; (b214 <LORAREG_InitSetAttrFnPtrsAS+0x30>)
    b1ec:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    b1ee:	4a0a      	ldr	r2, [pc, #40]	; (b218 <LORAREG_InitSetAttrFnPtrsAS+0x34>)
    b1f0:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    b1f2:	490a      	ldr	r1, [pc, #40]	; (b21c <LORAREG_InitSetAttrFnPtrsAS+0x38>)
    b1f4:	22c8      	movs	r2, #200	; 0xc8
    b1f6:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    b1f8:	4a09      	ldr	r2, [pc, #36]	; (b220 <LORAREG_InitSetAttrFnPtrsAS+0x3c>)
    b1fa:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[TX_PARAMS] = setTxParams;
    b1fc:	4909      	ldr	r1, [pc, #36]	; (b224 <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    b1fe:	22cc      	movs	r2, #204	; 0xcc
    b200:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    b202:	4a09      	ldr	r2, [pc, #36]	; (b228 <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    b204:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    b206:	4a09      	ldr	r2, [pc, #36]	; (b22c <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    b208:	67da      	str	r2, [r3, #124]	; 0x7c
}
    b20a:	4770      	bx	lr
    b20c:	20000cb8 	.word	0x20000cb8
    b210:	00009d55 	.word	0x00009d55
    b214:	00008761 	.word	0x00008761
    b218:	0000912d 	.word	0x0000912d
    b21c:	00008f99 	.word	0x00008f99
    b220:	00009039 	.word	0x00009039
    b224:	00008105 	.word	0x00008105
    b228:	0000924d 	.word	0x0000924d
    b22c:	000094b1 	.word	0x000094b1

0000b230 <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    b230:	4b03      	ldr	r3, [pc, #12]	; (b240 <LORAREG_InitSetAttrFnPtrsAU+0x10>)
    b232:	4a04      	ldr	r2, [pc, #16]	; (b244 <LORAREG_InitSetAttrFnPtrsAU+0x14>)
    b234:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    b236:	4a04      	ldr	r2, [pc, #16]	; (b248 <LORAREG_InitSetAttrFnPtrsAU+0x18>)
    b238:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    b23a:	4a04      	ldr	r2, [pc, #16]	; (b24c <LORAREG_InitSetAttrFnPtrsAU+0x1c>)
    b23c:	671a      	str	r2, [r3, #112]	; 0x70
}
    b23e:	4770      	bx	lr
    b240:	20000cb8 	.word	0x20000cb8
    b244:	0000a14d 	.word	0x0000a14d
    b248:	0000a0c1 	.word	0x0000a0c1
    b24c:	00008f01 	.word	0x00008f01

0000b250 <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    b250:	4b07      	ldr	r3, [pc, #28]	; (b270 <LORAREG_InitSetAttrFnPtrsIN+0x20>)
    b252:	4a08      	ldr	r2, [pc, #32]	; (b274 <LORAREG_InitSetAttrFnPtrsIN+0x24>)
    b254:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    b256:	4a08      	ldr	r2, [pc, #32]	; (b278 <LORAREG_InitSetAttrFnPtrsIN+0x28>)
    b258:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    b25a:	4a08      	ldr	r2, [pc, #32]	; (b27c <LORAREG_InitSetAttrFnPtrsIN+0x2c>)
    b25c:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    b25e:	4a08      	ldr	r2, [pc, #32]	; (b280 <LORAREG_InitSetAttrFnPtrsIN+0x30>)
    b260:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    b262:	4908      	ldr	r1, [pc, #32]	; (b284 <LORAREG_InitSetAttrFnPtrsIN+0x34>)
    b264:	22c8      	movs	r2, #200	; 0xc8
    b266:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    b268:	4907      	ldr	r1, [pc, #28]	; (b288 <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    b26a:	3204      	adds	r2, #4
    b26c:	5099      	str	r1, [r3, r2]
}
    b26e:	4770      	bx	lr
    b270:	20000cb8 	.word	0x20000cb8
    b274:	00009d55 	.word	0x00009d55
    b278:	000085ad 	.word	0x000085ad
    b27c:	0000912d 	.word	0x0000912d
    b280:	00009039 	.word	0x00009039
    b284:	00008f99 	.word	0x00008f99
    b288:	00008105 	.word	0x00008105

0000b28c <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    b28c:	4b0a      	ldr	r3, [pc, #40]	; (b2b8 <LORAREG_InitSetAttrFnPtrsJP+0x2c>)
    b28e:	4a0b      	ldr	r2, [pc, #44]	; (b2bc <LORAREG_InitSetAttrFnPtrsJP+0x30>)
    b290:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    b292:	4a0b      	ldr	r2, [pc, #44]	; (b2c0 <LORAREG_InitSetAttrFnPtrsJP+0x34>)
    b294:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    b296:	490b      	ldr	r1, [pc, #44]	; (b2c4 <LORAREG_InitSetAttrFnPtrsJP+0x38>)
    b298:	2280      	movs	r2, #128	; 0x80
    b29a:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    b29c:	4a0a      	ldr	r2, [pc, #40]	; (b2c8 <LORAREG_InitSetAttrFnPtrsJP+0x3c>)
    b29e:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    b2a0:	490a      	ldr	r1, [pc, #40]	; (b2cc <LORAREG_InitSetAttrFnPtrsJP+0x40>)
    b2a2:	22c8      	movs	r2, #200	; 0xc8
    b2a4:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    b2a6:	4a0a      	ldr	r2, [pc, #40]	; (b2d0 <LORAREG_InitSetAttrFnPtrsJP+0x44>)
    b2a8:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[TX_PARAMS] = setTxParams;
    b2aa:	490a      	ldr	r1, [pc, #40]	; (b2d4 <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    b2ac:	22cc      	movs	r2, #204	; 0xcc
    b2ae:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = NULL;
    b2b0:	2200      	movs	r2, #0
    b2b2:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = NULL;
    b2b4:	67da      	str	r2, [r3, #124]	; 0x7c
}
    b2b6:	4770      	bx	lr
    b2b8:	20000cb8 	.word	0x20000cb8
    b2bc:	00009d55 	.word	0x00009d55
    b2c0:	00008761 	.word	0x00008761
    b2c4:	000099f5 	.word	0x000099f5
    b2c8:	0000912d 	.word	0x0000912d
    b2cc:	00008f99 	.word	0x00008f99
    b2d0:	00009039 	.word	0x00009039
    b2d4:	00008105 	.word	0x00008105

0000b2d8 <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    b2d8:	4b09      	ldr	r3, [pc, #36]	; (b300 <LORAREG_InitSetAttrFnPtrsKR+0x28>)
    b2da:	4a0a      	ldr	r2, [pc, #40]	; (b304 <LORAREG_InitSetAttrFnPtrsKR+0x2c>)
    b2dc:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    b2de:	4a0a      	ldr	r2, [pc, #40]	; (b308 <LORAREG_InitSetAttrFnPtrsKR+0x30>)
    b2e0:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    b2e2:	490a      	ldr	r1, [pc, #40]	; (b30c <LORAREG_InitSetAttrFnPtrsKR+0x34>)
    b2e4:	2280      	movs	r2, #128	; 0x80
    b2e6:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    b2e8:	4a09      	ldr	r2, [pc, #36]	; (b310 <LORAREG_InitSetAttrFnPtrsKR+0x38>)
    b2ea:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    b2ec:	4909      	ldr	r1, [pc, #36]	; (b314 <LORAREG_InitSetAttrFnPtrsKR+0x3c>)
    b2ee:	22c8      	movs	r2, #200	; 0xc8
    b2f0:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    b2f2:	4a09      	ldr	r2, [pc, #36]	; (b318 <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    b2f4:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[TX_PARAMS] = setTxParams;
    b2f6:	4909      	ldr	r1, [pc, #36]	; (b31c <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    b2f8:	22cc      	movs	r2, #204	; 0xcc
    b2fa:	5099      	str	r1, [r3, r2]
}
    b2fc:	4770      	bx	lr
    b2fe:	46c0      	nop			; (mov r8, r8)
    b300:	20000cb8 	.word	0x20000cb8
    b304:	00009d55 	.word	0x00009d55
    b308:	00008761 	.word	0x00008761
    b30c:	000099f5 	.word	0x000099f5
    b310:	0000912d 	.word	0x0000912d
    b314:	00008f99 	.word	0x00008f99
    b318:	00009039 	.word	0x00009039
    b31c:	00008105 	.word	0x00008105

0000b320 <LORAREG_GetAttr>:
{
    b320:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    b322:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    b324:	2836      	cmp	r0, #54	; 0x36
    b326:	d901      	bls.n	b32c <LORAREG_GetAttr+0xc>
}
    b328:	0018      	movs	r0, r3
    b32a:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    b32c:	0084      	lsls	r4, r0, #2
    b32e:	4b02      	ldr	r3, [pc, #8]	; (b338 <LORAREG_GetAttr+0x18>)
    b330:	58e3      	ldr	r3, [r4, r3]
    b332:	4798      	blx	r3
    b334:	0003      	movs	r3, r0
    b336:	e7f7      	b.n	b328 <LORAREG_GetAttr+0x8>
    b338:	20000bdc 	.word	0x20000bdc

0000b33c <LORAREG_ValidateAttr>:
{
    b33c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    b33e:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    b340:	2836      	cmp	r0, #54	; 0x36
    b342:	d901      	bls.n	b348 <LORAREG_ValidateAttr+0xc>
}
    b344:	0018      	movs	r0, r3
    b346:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    b348:	0082      	lsls	r2, r0, #2
    b34a:	4b02      	ldr	r3, [pc, #8]	; (b354 <LORAREG_ValidateAttr+0x18>)
    b34c:	58d3      	ldr	r3, [r2, r3]
    b34e:	4798      	blx	r3
    b350:	0003      	movs	r3, r0
    b352:	e7f7      	b.n	b344 <LORAREG_ValidateAttr+0x8>
    b354:	20000d94 	.word	0x20000d94

0000b358 <LORAREG_SetAttr>:
{
    b358:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    b35a:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    b35c:	2836      	cmp	r0, #54	; 0x36
    b35e:	d901      	bls.n	b364 <LORAREG_SetAttr+0xc>
}
    b360:	0018      	movs	r0, r3
    b362:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    b364:	0082      	lsls	r2, r0, #2
    b366:	4b02      	ldr	r3, [pc, #8]	; (b370 <LORAREG_SetAttr+0x18>)
    b368:	58d3      	ldr	r3, [r2, r3]
    b36a:	4798      	blx	r3
    b36c:	0003      	movs	r3, r0
    b36e:	e7f7      	b.n	b360 <LORAREG_SetAttr+0x8>
    b370:	20000cb8 	.word	0x20000cb8

0000b374 <CreateAllRegSoftwareTimers>:
{
    b374:	b510      	push	{r4, lr}
    StackRetStatus_t status = SwTimerCreate(&regTimerId[0]);    
    b376:	4805      	ldr	r0, [pc, #20]	; (b38c <CreateAllRegSoftwareTimers+0x18>)
    b378:	4b05      	ldr	r3, [pc, #20]	; (b390 <CreateAllRegSoftwareTimers+0x1c>)
    b37a:	4798      	blx	r3
    if (LORAWAN_SUCCESS == status)
    b37c:	2808      	cmp	r0, #8
    b37e:	d000      	beq.n	b382 <CreateAllRegSoftwareTimers+0xe>
}
    b380:	bd10      	pop	{r4, pc}
        status = SwTimerCreate(&regTimerId[1]);
    b382:	4804      	ldr	r0, [pc, #16]	; (b394 <CreateAllRegSoftwareTimers+0x20>)
    b384:	4b02      	ldr	r3, [pc, #8]	; (b390 <CreateAllRegSoftwareTimers+0x1c>)
    b386:	4798      	blx	r3
    b388:	e7fa      	b.n	b380 <CreateAllRegSoftwareTimers+0xc>
    b38a:	46c0      	nop			; (mov r8, r8)
    b38c:	20001400 	.word	0x20001400
    b390:	0000c481 	.word	0x0000c481
    b394:	20001401 	.word	0x20001401

0000b398 <StopAllRegSoftwareTimers>:
{
    b398:	b570      	push	{r4, r5, r6, lr}
	SwTimerStop(regTimerId[0]);
    b39a:	4d03      	ldr	r5, [pc, #12]	; (b3a8 <StopAllRegSoftwareTimers+0x10>)
    b39c:	7828      	ldrb	r0, [r5, #0]
    b39e:	4c03      	ldr	r4, [pc, #12]	; (b3ac <StopAllRegSoftwareTimers+0x14>)
    b3a0:	47a0      	blx	r4
	SwTimerStop(regTimerId[1]);
    b3a2:	7868      	ldrb	r0, [r5, #1]
    b3a4:	47a0      	blx	r4
}
    b3a6:	bd70      	pop	{r4, r5, r6, pc}
    b3a8:	20001400 	.word	0x20001400
    b3ac:	0000c7b9 	.word	0x0000c7b9

0000b3b0 <LORAREG_Init>:
{	
    b3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3b2:	0007      	movs	r7, r0
	if(!initialized)
    b3b4:	4b24      	ldr	r3, [pc, #144]	; (b448 <LORAREG_Init+0x98>)
    b3b6:	781b      	ldrb	r3, [r3, #0]
    b3b8:	2b00      	cmp	r3, #0
    b3ba:	d109      	bne.n	b3d0 <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    b3bc:	4b23      	ldr	r3, [pc, #140]	; (b44c <LORAREG_Init+0x9c>)
    b3be:	4798      	blx	r3
    b3c0:	2808      	cmp	r0, #8
    b3c2:	d001      	beq.n	b3c8 <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    b3c4:	2014      	movs	r0, #20
    b3c6:	e006      	b.n	b3d6 <LORAREG_Init+0x26>
			initialized = true;
    b3c8:	2201      	movs	r2, #1
    b3ca:	4b1f      	ldr	r3, [pc, #124]	; (b448 <LORAREG_Init+0x98>)
    b3cc:	701a      	strb	r2, [r3, #0]
    b3ce:	e002      	b.n	b3d6 <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    b3d0:	4b1f      	ldr	r3, [pc, #124]	; (b450 <LORAREG_Init+0xa0>)
    b3d2:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    b3d4:	2008      	movs	r0, #8
    b3d6:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    b3d8:	4e1e      	ldr	r6, [pc, #120]	; (b454 <LORAREG_Init+0xa4>)
    b3da:	4d1f      	ldr	r5, [pc, #124]	; (b458 <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    b3dc:	4c1f      	ldr	r4, [pc, #124]	; (b45c <LORAREG_Init+0xac>)
    b3de:	4a20      	ldr	r2, [pc, #128]	; (b460 <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    b3e0:	4920      	ldr	r1, [pc, #128]	; (b464 <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    b3e2:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    b3e4:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    b3e6:	505a      	str	r2, [r3, r1]
    b3e8:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    b3ea:	2bdc      	cmp	r3, #220	; 0xdc
    b3ec:	d1f9      	bne.n	b3e2 <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    b3ee:	2f02      	cmp	r7, #2
    b3f0:	d00d      	beq.n	b40e <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    b3f2:	2f01      	cmp	r7, #1
    b3f4:	d90f      	bls.n	b416 <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    b3f6:	1fbb      	subs	r3, r7, #6
    b3f8:	2b08      	cmp	r3, #8
    b3fa:	d910      	bls.n	b41e <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    b3fc:	2f03      	cmp	r7, #3
    b3fe:	d012      	beq.n	b426 <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    b400:	2f0f      	cmp	r7, #15
    b402:	d014      	beq.n	b42e <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    b404:	2f05      	cmp	r7, #5
    b406:	d016      	beq.n	b436 <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    b408:	2f04      	cmp	r7, #4
    b40a:	d018      	beq.n	b43e <LORAREG_Init+0x8e>
}
    b40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    b40e:	2002      	movs	r0, #2
    b410:	4b15      	ldr	r3, [pc, #84]	; (b468 <LORAREG_Init+0xb8>)
    b412:	4798      	blx	r3
    b414:	e7fa      	b.n	b40c <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    b416:	0038      	movs	r0, r7
    b418:	4b14      	ldr	r3, [pc, #80]	; (b46c <LORAREG_Init+0xbc>)
    b41a:	4798      	blx	r3
    b41c:	e7f6      	b.n	b40c <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    b41e:	0038      	movs	r0, r7
    b420:	4b13      	ldr	r3, [pc, #76]	; (b470 <LORAREG_Init+0xc0>)
    b422:	4798      	blx	r3
    b424:	e7f2      	b.n	b40c <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    b426:	2003      	movs	r0, #3
    b428:	4b12      	ldr	r3, [pc, #72]	; (b474 <LORAREG_Init+0xc4>)
    b42a:	4798      	blx	r3
    b42c:	e7ee      	b.n	b40c <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    b42e:	200f      	movs	r0, #15
    b430:	4b11      	ldr	r3, [pc, #68]	; (b478 <LORAREG_Init+0xc8>)
    b432:	4798      	blx	r3
    b434:	e7ea      	b.n	b40c <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    b436:	2005      	movs	r0, #5
    b438:	4b10      	ldr	r3, [pc, #64]	; (b47c <LORAREG_Init+0xcc>)
    b43a:	4798      	blx	r3
    b43c:	e7e6      	b.n	b40c <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    b43e:	2004      	movs	r0, #4
    b440:	4b0f      	ldr	r3, [pc, #60]	; (b480 <LORAREG_Init+0xd0>)
    b442:	4798      	blx	r3
    b444:	e7e2      	b.n	b40c <LORAREG_Init+0x5c>
    b446:	46c0      	nop			; (mov r8, r8)
    b448:	20000bd9 	.word	0x20000bd9
    b44c:	0000b375 	.word	0x0000b375
    b450:	0000b399 	.word	0x0000b399
    b454:	20000bdc 	.word	0x20000bdc
    b458:	00007a65 	.word	0x00007a65
    b45c:	20000d94 	.word	0x20000d94
    b460:	00007a69 	.word	0x00007a69
    b464:	20000cb8 	.word	0x20000cb8
    b468:	00007895 	.word	0x00007895
    b46c:	00006f9d 	.word	0x00006f9d
    b470:	00006ba1 	.word	0x00006ba1
    b474:	00006dc9 	.word	0x00006dc9
    b478:	0000722d 	.word	0x0000722d
    b47c:	000073dd 	.word	0x000073dd
    b480:	0000760d 	.word	0x0000760d

0000b484 <LORAREG_SupportedBands>:
	#endif
	#if (NA_BAND == 1)
	    (1 <<(ISM_NA915)) |
	#endif
	    0 ;
	*bands = value;
    b484:	2301      	movs	r3, #1
    b486:	425b      	negs	r3, r3
    b488:	8003      	strh	r3, [r0, #0]
	
	return status;
}
    b48a:	2008      	movs	r0, #8
    b48c:	4770      	bx	lr
	...

0000b490 <LORAREG_UnInit>:

StackRetStatus_t LORAREG_UnInit(void)
{
    b490:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	
	StopAllRegSoftwareTimers();
    b492:	4b0d      	ldr	r3, [pc, #52]	; (b4c8 <LORAREG_UnInit+0x38>)
    b494:	4798      	blx	r3

#if (ENABLE_PDS == 1)
	/* Do not reset the mac fild id1 */
	if(RegParams.regParamItems.fileid)
    b496:	23fa      	movs	r3, #250	; 0xfa
    b498:	005b      	lsls	r3, r3, #1
    b49a:	4a0c      	ldr	r2, [pc, #48]	; (b4cc <LORAREG_UnInit+0x3c>)
    b49c:	5cd0      	ldrb	r0, [r2, r3]
    b49e:	2800      	cmp	r0, #0
    b4a0:	d107      	bne.n	b4b2 <LORAREG_UnInit+0x22>
		{
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
		}
	}
#endif	
	memset(&RegParams,0,sizeof(RegParams_t));
    b4a2:	22fe      	movs	r2, #254	; 0xfe
    b4a4:	32ff      	adds	r2, #255	; 0xff
    b4a6:	2100      	movs	r1, #0
    b4a8:	4808      	ldr	r0, [pc, #32]	; (b4cc <LORAREG_UnInit+0x3c>)
    b4aa:	4b09      	ldr	r3, [pc, #36]	; (b4d0 <LORAREG_UnInit+0x40>)
    b4ac:	4798      	blx	r3
	
	return result;
}
    b4ae:	200a      	movs	r0, #10
    b4b0:	bd10      	pop	{r4, pc}
	    PDS_UnRegFile(RegParams.regParamItems.fileid);
    b4b2:	4b08      	ldr	r3, [pc, #32]	; (b4d4 <LORAREG_UnInit+0x44>)
    b4b4:	4798      	blx	r3
		if(RegParams.band == ISM_EU868)
    b4b6:	2326      	movs	r3, #38	; 0x26
    b4b8:	4a04      	ldr	r2, [pc, #16]	; (b4cc <LORAREG_UnInit+0x3c>)
    b4ba:	5cd3      	ldrb	r3, [r2, r3]
    b4bc:	2b00      	cmp	r3, #0
    b4be:	d1f0      	bne.n	b4a2 <LORAREG_UnInit+0x12>
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
    b4c0:	200b      	movs	r0, #11
    b4c2:	4b04      	ldr	r3, [pc, #16]	; (b4d4 <LORAREG_UnInit+0x44>)
    b4c4:	4798      	blx	r3
    b4c6:	e7ec      	b.n	b4a2 <LORAREG_UnInit+0x12>
    b4c8:	0000b399 	.word	0x0000b399
    b4cc:	20001404 	.word	0x20001404
    b4d0:	00018219 	.word	0x00018219
    b4d4:	0000b99d 	.word	0x0000b99d

0000b4d8 <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    b4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4da:	b083      	sub	sp, #12
    b4dc:	0004      	movs	r4, r0
    b4de:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    b4e0:	4a2b      	ldr	r2, [pc, #172]	; (b590 <AESEncode+0xb8>)
    b4e2:	2101      	movs	r1, #1
    b4e4:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    b4e6:	2300      	movs	r3, #0
    b4e8:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    b4ea:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    b4ec:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    b4ee:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    b4f0:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    b4f2:	4928      	ldr	r1, [pc, #160]	; (b594 <AESEncode+0xbc>)
    b4f4:	4828      	ldr	r0, [pc, #160]	; (b598 <AESEncode+0xc0>)
    b4f6:	4b29      	ldr	r3, [pc, #164]	; (b59c <AESEncode+0xc4>)
    b4f8:	4798      	blx	r3
    b4fa:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    b4fc:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    b4fe:	4f28      	ldr	r7, [pc, #160]	; (b5a0 <AESEncode+0xc8>)
    b500:	1870      	adds	r0, r6, r1
    b502:	2300      	movs	r3, #0
    b504:	5cc2      	ldrb	r2, [r0, r3]
    b506:	555a      	strb	r2, [r3, r5]
    b508:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    b50a:	2b04      	cmp	r3, #4
    b50c:	d1fa      	bne.n	b504 <AESEncode+0x2c>
    b50e:	9b01      	ldr	r3, [sp, #4]
    b510:	51cb      	str	r3, [r1, r7]
    b512:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    b514:	2910      	cmp	r1, #16
    b516:	d1f3      	bne.n	b500 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    b518:	4d1f      	ldr	r5, [pc, #124]	; (b598 <AESEncode+0xc0>)
    b51a:	4921      	ldr	r1, [pc, #132]	; (b5a0 <AESEncode+0xc8>)
    b51c:	0028      	movs	r0, r5
    b51e:	4b21      	ldr	r3, [pc, #132]	; (b5a4 <AESEncode+0xcc>)
    b520:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    b522:	682a      	ldr	r2, [r5, #0]
    b524:	7913      	ldrb	r3, [r2, #4]
    b526:	2102      	movs	r1, #2
    b528:	430b      	orrs	r3, r1
    b52a:	7113      	strb	r3, [r2, #4]
    b52c:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    b52e:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    b530:	4e1b      	ldr	r6, [pc, #108]	; (b5a0 <AESEncode+0xc8>)
    b532:	1860      	adds	r0, r4, r1
    b534:	2300      	movs	r3, #0
    b536:	5cc2      	ldrb	r2, [r0, r3]
    b538:	555a      	strb	r2, [r3, r5]
    b53a:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    b53c:	2b04      	cmp	r3, #4
    b53e:	d1fa      	bne.n	b536 <AESEncode+0x5e>
    b540:	9b01      	ldr	r3, [sp, #4]
    b542:	518b      	str	r3, [r1, r6]
    b544:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    b546:	2910      	cmp	r1, #16
    b548:	d1f3      	bne.n	b532 <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    b54a:	4d13      	ldr	r5, [pc, #76]	; (b598 <AESEncode+0xc0>)
    b54c:	4914      	ldr	r1, [pc, #80]	; (b5a0 <AESEncode+0xc8>)
    b54e:	0028      	movs	r0, r5
    b550:	4b15      	ldr	r3, [pc, #84]	; (b5a8 <AESEncode+0xd0>)
    b552:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    b554:	682d      	ldr	r5, [r5, #0]
    b556:	792b      	ldrb	r3, [r5, #4]
    b558:	2202      	movs	r2, #2
    b55a:	4393      	bics	r3, r2
    b55c:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    b55e:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    b560:	2002      	movs	r0, #2
    b562:	e001      	b.n	b568 <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    b564:	4211      	tst	r1, r2
    b566:	d107      	bne.n	b578 <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    b568:	79eb      	ldrb	r3, [r5, #7]
    b56a:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    b56c:	000a      	movs	r2, r1
    b56e:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    b570:	4218      	tst	r0, r3
    b572:	d0f7      	beq.n	b564 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    b574:	4302      	orrs	r2, r0
    b576:	e7f5      	b.n	b564 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    b578:	4d09      	ldr	r5, [pc, #36]	; (b5a0 <AESEncode+0xc8>)
    b57a:	0029      	movs	r1, r5
    b57c:	4806      	ldr	r0, [pc, #24]	; (b598 <AESEncode+0xc0>)
    b57e:	4b0b      	ldr	r3, [pc, #44]	; (b5ac <AESEncode+0xd4>)
    b580:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    b582:	2210      	movs	r2, #16
    b584:	0029      	movs	r1, r5
    b586:	0020      	movs	r0, r4
    b588:	4b09      	ldr	r3, [pc, #36]	; (b5b0 <AESEncode+0xd8>)
    b58a:	4798      	blx	r3
#endif	
}
    b58c:	b003      	add	sp, #12
    b58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b590:	20001604 	.word	0x20001604
    b594:	42003400 	.word	0x42003400
    b598:	20001610 	.word	0x20001610
    b59c:	00003019 	.word	0x00003019
    b5a0:	20000e70 	.word	0x20000e70
    b5a4:	000030ad 	.word	0x000030ad
    b5a8:	000030e1 	.word	0x000030e1
    b5ac:	00003131 	.word	0x00003131
    b5b0:	00018195 	.word	0x00018195

0000b5b4 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    b5b4:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    b5b6:	4d07      	ldr	r5, [pc, #28]	; (b5d4 <AESInit+0x20>)
    b5b8:	0028      	movs	r0, r5
    b5ba:	4b07      	ldr	r3, [pc, #28]	; (b5d8 <AESInit+0x24>)
    b5bc:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    b5be:	4c07      	ldr	r4, [pc, #28]	; (b5dc <AESInit+0x28>)
    b5c0:	002a      	movs	r2, r5
    b5c2:	4907      	ldr	r1, [pc, #28]	; (b5e0 <AESInit+0x2c>)
    b5c4:	0020      	movs	r0, r4
    b5c6:	4b07      	ldr	r3, [pc, #28]	; (b5e4 <AESInit+0x30>)
    b5c8:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    b5ca:	0020      	movs	r0, r4
    b5cc:	4b06      	ldr	r3, [pc, #24]	; (b5e8 <AESInit+0x34>)
    b5ce:	4798      	blx	r3
#endif	
}
    b5d0:	bd70      	pop	{r4, r5, r6, pc}
    b5d2:	46c0      	nop			; (mov r8, r8)
    b5d4:	20001604 	.word	0x20001604
    b5d8:	00002fdd 	.word	0x00002fdd
    b5dc:	20001610 	.word	0x20001610
    b5e0:	42003400 	.word	0x42003400
    b5e4:	0000308d 	.word	0x0000308d
    b5e8:	00002ff7 	.word	0x00002ff7

0000b5ec <edbg_eui_read_eui64>:
/*********************************************************************//**
\brief		Reads back the device MAC address stored in User page of EDBG
\param[in]  eui - Device EUI read back from EDBG(8 bytes)
*************************************************************************/
 void edbg_eui_read_eui64(uint8_t *eui)
{
    b5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5ee:	b091      	sub	sp, #68	; 0x44
    b5f0:	9001      	str	r0, [sp, #4]
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    b5f2:	aa03      	add	r2, sp, #12
    b5f4:	2364      	movs	r3, #100	; 0x64
    b5f6:	9303      	str	r3, [sp, #12]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    b5f8:	4b39      	ldr	r3, [pc, #228]	; (b6e0 <edbg_eui_read_eui64+0xf4>)
    b5fa:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    b5fc:	2300      	movs	r3, #0
    b5fe:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    b600:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    b602:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    b604:	2180      	movs	r1, #128	; 0x80
    b606:	0389      	lsls	r1, r1, #14
    b608:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    b60a:	2101      	movs	r1, #1
    b60c:	4249      	negs	r1, r1
    b60e:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    b610:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    b612:	3125      	adds	r1, #37	; 0x25
    b614:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    b616:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    b618:	3108      	adds	r1, #8
    b61a:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    b61c:	3101      	adds	r1, #1
    b61e:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    b620:	3101      	adds	r1, #1
    b622:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    b624:	33d7      	adds	r3, #215	; 0xd7
    b626:	8613      	strh	r3, [r2, #48]	; 0x30
	config_i2c.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    b628:	4b2e      	ldr	r3, [pc, #184]	; (b6e4 <edbg_eui_read_eui64+0xf8>)
    b62a:	61d3      	str	r3, [r2, #28]
	config_i2c.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    b62c:	4b2e      	ldr	r3, [pc, #184]	; (b6e8 <edbg_eui_read_eui64+0xfc>)
    b62e:	6213      	str	r3, [r2, #32]
	i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c);
    b630:	4c2e      	ldr	r4, [pc, #184]	; (b6ec <edbg_eui_read_eui64+0x100>)
    b632:	492f      	ldr	r1, [pc, #188]	; (b6f0 <edbg_eui_read_eui64+0x104>)
    b634:	0020      	movs	r0, r4
    b636:	4b2f      	ldr	r3, [pc, #188]	; (b6f4 <edbg_eui_read_eui64+0x108>)
    b638:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    b63a:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    b63c:	2207      	movs	r2, #7
    b63e:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    b640:	421a      	tst	r2, r3
    b642:	d1fc      	bne.n	b63e <edbg_eui_read_eui64+0x52>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    b644:	6823      	ldr	r3, [r4, #0]
    b646:	2202      	movs	r2, #2
    b648:	4313      	orrs	r3, r2
    b64a:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    b64c:	4d27      	ldr	r5, [pc, #156]	; (b6ec <edbg_eui_read_eui64+0x100>)
    b64e:	6828      	ldr	r0, [r5, #0]
    b650:	4b29      	ldr	r3, [pc, #164]	; (b6f8 <edbg_eui_read_eui64+0x10c>)
    b652:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b654:	231f      	movs	r3, #31
    b656:	4018      	ands	r0, r3
    b658:	3b1e      	subs	r3, #30
    b65a:	4083      	lsls	r3, r0
    b65c:	4a27      	ldr	r2, [pc, #156]	; (b6fc <edbg_eui_read_eui64+0x110>)
    b65e:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    b660:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    b662:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    b664:	2110      	movs	r1, #16
    b666:	8b62      	ldrh	r2, [r4, #26]
    b668:	420a      	tst	r2, r1
    b66a:	d104      	bne.n	b676 <edbg_eui_read_eui64+0x8a>
		timeout_counter++;
    b66c:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    b66e:	4283      	cmp	r3, r0
    b670:	d3f9      	bcc.n	b666 <edbg_eui_read_eui64+0x7a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    b672:	2310      	movs	r3, #16
    b674:	8363      	strh	r3, [r4, #26]
	configure_i2c_master();
	uint32_t timeout = 0;
	
	/** Send the request token */
	master_packet.address         = SLAVE_ADDRESS;
    b676:	4b22      	ldr	r3, [pc, #136]	; (b700 <edbg_eui_read_eui64+0x114>)
    b678:	2228      	movs	r2, #40	; 0x28
    b67a:	801a      	strh	r2, [r3, #0]
	master_packet.data_length     = sizeof(write_buffer);
    b67c:	3a26      	subs	r2, #38	; 0x26
    b67e:	805a      	strh	r2, [r3, #2]
	master_packet.data            = write_buffer;
    b680:	4a20      	ldr	r2, [pc, #128]	; (b704 <edbg_eui_read_eui64+0x118>)
    b682:	605a      	str	r2, [r3, #4]
	master_packet.ten_bit_address = false;
    b684:	2200      	movs	r2, #0
    b686:	721a      	strb	r2, [r3, #8]
	master_packet.high_speed      = false;
    b688:	725a      	strb	r2, [r3, #9]
	master_packet.hs_master_code  = 0x0;
    b68a:	729a      	strb	r2, [r3, #10]
	uint32_t timeout = 0;
    b68c:	2400      	movs	r4, #0
	while (i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &master_packet) !=
    b68e:	001e      	movs	r6, r3
    b690:	4d16      	ldr	r5, [pc, #88]	; (b6ec <edbg_eui_read_eui64+0x100>)
    b692:	4f1d      	ldr	r7, [pc, #116]	; (b708 <edbg_eui_read_eui64+0x11c>)
    b694:	0031      	movs	r1, r6
    b696:	0028      	movs	r0, r5
    b698:	47b8      	blx	r7
    b69a:	2800      	cmp	r0, #0
    b69c:	d004      	beq.n	b6a8 <edbg_eui_read_eui64+0xbc>
			STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    b69e:	3401      	adds	r4, #1
    b6a0:	4b1a      	ldr	r3, [pc, #104]	; (b70c <edbg_eui_read_eui64+0x120>)
    b6a2:	429c      	cmp	r4, r3
    b6a4:	d1f6      	bne.n	b694 <edbg_eui_read_eui64+0xa8>
    b6a6:	e019      	b.n	b6dc <edbg_eui_read_eui64+0xf0>
			return;
		}
	}

	/** Get the extension boards info */
	master_packet.data_length     = 256;
    b6a8:	4b15      	ldr	r3, [pc, #84]	; (b700 <edbg_eui_read_eui64+0x114>)
    b6aa:	2280      	movs	r2, #128	; 0x80
    b6ac:	0052      	lsls	r2, r2, #1
    b6ae:	805a      	strh	r2, [r3, #2]
	master_packet.data            = kit_data;
    b6b0:	4a17      	ldr	r2, [pc, #92]	; (b710 <edbg_eui_read_eui64+0x124>)
    b6b2:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &master_packet) !=
    b6b4:	001e      	movs	r6, r3
    b6b6:	4d0d      	ldr	r5, [pc, #52]	; (b6ec <edbg_eui_read_eui64+0x100>)
    b6b8:	4f16      	ldr	r7, [pc, #88]	; (b714 <edbg_eui_read_eui64+0x128>)
    b6ba:	0031      	movs	r1, r6
    b6bc:	0028      	movs	r0, r5
    b6be:	47b8      	blx	r7
    b6c0:	2800      	cmp	r0, #0
    b6c2:	d006      	beq.n	b6d2 <edbg_eui_read_eui64+0xe6>
			STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    b6c4:	1c62      	adds	r2, r4, #1
    b6c6:	23fa      	movs	r3, #250	; 0xfa
    b6c8:	009b      	lsls	r3, r3, #2
    b6ca:	429c      	cmp	r4, r3
    b6cc:	d006      	beq.n	b6dc <edbg_eui_read_eui64+0xf0>
    b6ce:	0014      	movs	r4, r2
    b6d0:	e7f3      	b.n	b6ba <edbg_eui_read_eui64+0xce>
			return;
		}
	}
   
    // First 8bytes value is MAC Address
	memcpy(eui, kit_data, MAC_ADDR_LEN);
    b6d2:	2208      	movs	r2, #8
    b6d4:	490e      	ldr	r1, [pc, #56]	; (b710 <edbg_eui_read_eui64+0x124>)
    b6d6:	9801      	ldr	r0, [sp, #4]
    b6d8:	4b0f      	ldr	r3, [pc, #60]	; (b718 <edbg_eui_read_eui64+0x12c>)
    b6da:	4798      	blx	r3
}
    b6dc:	b011      	add	sp, #68	; 0x44
    b6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6e0:	00000d48 	.word	0x00000d48
    b6e4:	00100002 	.word	0x00100002
    b6e8:	00110002 	.word	0x00110002
    b6ec:	20001824 	.word	0x20001824
    b6f0:	42000400 	.word	0x42000400
    b6f4:	00003ad9 	.word	0x00003ad9
    b6f8:	00004791 	.word	0x00004791
    b6fc:	e000e100 	.word	0xe000e100
    b700:	20001818 	.word	0x20001818
    b704:	20000010 	.word	0x20000010
    b708:	00004119 	.word	0x00004119
    b70c:	000003e9 	.word	0x000003e9
    b710:	20001718 	.word	0x20001718
    b714:	000040f5 	.word	0x000040f5
    b718:	00018195 	.word	0x00018195

0000b71c <PDS_Init>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Init(void)
{
    b71c:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)	
	PdsStatus_t status = pdsWlInit();
    b71e:	4b03      	ldr	r3, [pc, #12]	; (b72c <PDS_Init+0x10>)
    b720:	4798      	blx	r3
	pdsUnInitFlag = false;
    b722:	2200      	movs	r2, #0
    b724:	4b02      	ldr	r3, [pc, #8]	; (b730 <PDS_Init+0x14>)
    b726:	701a      	strb	r2, [r3, #0]
	return status;
#else
	return PDS_OK;
#endif
}
    b728:	bd10      	pop	{r4, pc}
    b72a:	46c0      	nop			; (mov r8, r8)
    b72c:	0000be9d 	.word	0x0000be9d
    b730:	20000e80 	.word	0x20000e80

0000b734 <PDS_UnInit>:
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnInit(void)
{
#if (ENABLE_PDS == 1)
	pdsUnInitFlag = true;
    b734:	2201      	movs	r2, #1
    b736:	4b02      	ldr	r3, [pc, #8]	; (b740 <PDS_UnInit+0xc>)
    b738:	701a      	strb	r2, [r3, #0]
#endif
	return PDS_OK;
}
    b73a:	2000      	movs	r0, #0
    b73c:	4770      	bx	lr
    b73e:	46c0      	nop			; (mov r8, r8)
    b740:	20000e80 	.word	0x20000e80

0000b744 <PDS_Store>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Store(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    b744:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    b746:	4b14      	ldr	r3, [pc, #80]	; (b798 <PDS_Store+0x54>)
    b748:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    b74a:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    b74c:	2a00      	cmp	r2, #0
    b74e:	d106      	bne.n	b75e <PDS_Store+0x1a>
	{
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    b750:	0102      	lsls	r2, r0, #4
    b752:	4b12      	ldr	r3, [pc, #72]	; (b79c <PDS_Store+0x58>)
    b754:	189b      	adds	r3, r3, r2
    b756:	791a      	ldrb	r2, [r3, #4]
				status = PDS_INVLIAD_FILE_IDX;
			}
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    b758:	2305      	movs	r3, #5
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    b75a:	2a00      	cmp	r2, #0
    b75c:	d101      	bne.n	b762 <PDS_Store+0x1e>
		}
	}
#endif	
	return status; 
}
    b75e:	0018      	movs	r0, r3
    b760:	bd10      	pop	{r4, pc}
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    b762:	0103      	lsls	r3, r0, #4
    b764:	4a0d      	ldr	r2, [pc, #52]	; (b79c <PDS_Store+0x58>)
    b766:	589c      	ldr	r4, [r3, r2]
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    b768:	2c00      	cmp	r4, #0
    b76a:	d011      	beq.n	b790 <PDS_Store+0x4c>
				(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    b76c:	001a      	movs	r2, r3
    b76e:	4b0b      	ldr	r3, [pc, #44]	; (b79c <PDS_Store+0x58>)
    b770:	189b      	adds	r3, r3, r2
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    b772:	689b      	ldr	r3, [r3, #8]
    b774:	2b00      	cmp	r3, #0
    b776:	d00d      	beq.n	b794 <PDS_Store+0x50>
				status = PDS_INVLIAD_FILE_IDX;
    b778:	2305      	movs	r3, #5
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    b77a:	280b      	cmp	r0, #11
    b77c:	d8ef      	bhi.n	b75e <PDS_Store+0x1a>
				*((fileMarks[pdsFileItemIdx].fileMarkListAddr) + item) = PDS_OP_STORE;
    b77e:	3b04      	subs	r3, #4
    b780:	5463      	strb	r3, [r4, r1]
				isFileSet[pdsFileItemIdx] = true;
    b782:	4a07      	ldr	r2, [pc, #28]	; (b7a0 <PDS_Store+0x5c>)
    b784:	5413      	strb	r3, [r2, r0]
				pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    b786:	2001      	movs	r0, #1
    b788:	4b06      	ldr	r3, [pc, #24]	; (b7a4 <PDS_Store+0x60>)
    b78a:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    b78c:	2300      	movs	r3, #0
    b78e:	e7e6      	b.n	b75e <PDS_Store+0x1a>
			status = PDS_INVLIAD_FILE_IDX;
    b790:	2305      	movs	r3, #5
    b792:	e7e4      	b.n	b75e <PDS_Store+0x1a>
    b794:	2305      	movs	r3, #5
    b796:	e7e2      	b.n	b75e <PDS_Store+0x1a>
    b798:	20000e80 	.word	0x20000e80
    b79c:	20001858 	.word	0x20001858
    b7a0:	2000184c 	.word	0x2000184c
    b7a4:	0000bb75 	.word	0x0000bb75

0000b7a8 <PDS_IsRestorable>:
\brief	This function checks if all the registered files are restorable.

\param[out] status - The return status of the function's operation.
******************************************************************************/
bool PDS_IsRestorable(void)
{
    b7a8:	b570      	push	{r4, r5, r6, lr}
	bool return_status = false;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    b7aa:	4b0e      	ldr	r3, [pc, #56]	; (b7e4 <PDS_IsRestorable+0x3c>)
    b7ac:	7818      	ldrb	r0, [r3, #0]
    b7ae:	2800      	cmp	r0, #0
    b7b0:	d117      	bne.n	b7e2 <PDS_IsRestorable+0x3a>
    b7b2:	4d0d      	ldr	r5, [pc, #52]	; (b7e8 <PDS_IsRestorable+0x40>)
    b7b4:	2400      	movs	r4, #0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				if ( !(isFileFound(pdsFileItemIdx)) )
    b7b6:	4e0d      	ldr	r6, [pc, #52]	; (b7ec <PDS_IsRestorable+0x44>)
    b7b8:	e004      	b.n	b7c4 <PDS_IsRestorable+0x1c>
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    b7ba:	3401      	adds	r4, #1
    b7bc:	b2e4      	uxtb	r4, r4
    b7be:	3510      	adds	r5, #16
    b7c0:	2c0c      	cmp	r4, #12
    b7c2:	d00d      	beq.n	b7e0 <PDS_IsRestorable+0x38>
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    b7c4:	792b      	ldrb	r3, [r5, #4]
    b7c6:	2b00      	cmp	r3, #0
    b7c8:	d0f7      	beq.n	b7ba <PDS_IsRestorable+0x12>
    b7ca:	682b      	ldr	r3, [r5, #0]
    b7cc:	2b00      	cmp	r3, #0
    b7ce:	d0f4      	beq.n	b7ba <PDS_IsRestorable+0x12>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    b7d0:	68ab      	ldr	r3, [r5, #8]
    b7d2:	2b00      	cmp	r3, #0
    b7d4:	d0f1      	beq.n	b7ba <PDS_IsRestorable+0x12>
				if ( !(isFileFound(pdsFileItemIdx)) )
    b7d6:	0020      	movs	r0, r4
    b7d8:	47b0      	blx	r6
    b7da:	2800      	cmp	r0, #0
    b7dc:	d1ed      	bne.n	b7ba <PDS_IsRestorable+0x12>
    b7de:	e000      	b.n	b7e2 <PDS_IsRestorable+0x3a>
			}
		}
	}
	return_status = true;
#endif
	return return_status;
    b7e0:	2001      	movs	r0, #1
}
    b7e2:	bd70      	pop	{r4, r5, r6, pc}
    b7e4:	20000e80 	.word	0x20000e80
    b7e8:	20001858 	.word	0x20001858
    b7ec:	0000c065 	.word	0x0000c065

0000b7f0 <PDS_DeleteAll>:
\brief This function will erase all the items stored in the PDS.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_DeleteAll(void)
{
    b7f0:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    b7f2:	4b04      	ldr	r3, [pc, #16]	; (b804 <PDS_DeleteAll+0x14>)
    b7f4:	781b      	ldrb	r3, [r3, #0]
    b7f6:	2b00      	cmp	r3, #0
    b7f8:	d001      	beq.n	b7fe <PDS_DeleteAll+0xe>
	{
		pdsWlDeleteAll();
	}
#endif
	return PDS_OK;
}
    b7fa:	2000      	movs	r0, #0
    b7fc:	bd10      	pop	{r4, pc}
		pdsWlDeleteAll();
    b7fe:	4b02      	ldr	r3, [pc, #8]	; (b808 <PDS_DeleteAll+0x18>)
    b800:	4798      	blx	r3
    b802:	e7fa      	b.n	b7fa <PDS_DeleteAll+0xa>
    b804:	20000e80 	.word	0x20000e80
    b808:	0000c081 	.word	0x0000c081

0000b80c <PDS_RestoreAll>:
		from all registered files.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_RestoreAll(void)
{
    b80c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b80e:	46ce      	mov	lr, r9
    b810:	4647      	mov	r7, r8
    b812:	b580      	push	{r7, lr}
    b814:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    b816:	4b32      	ldr	r3, [pc, #200]	; (b8e0 <PDS_RestoreAll+0xd4>)
    b818:	781b      	ldrb	r3, [r3, #0]
	PdsStatus_t status = PDS_OK;
    b81a:	2000      	movs	r0, #0
	if (false == pdsUnInitFlag)
    b81c:	2b00      	cmp	r3, #0
    b81e:	d159      	bne.n	b8d4 <PDS_RestoreAll+0xc8>
    b820:	4e30      	ldr	r6, [pc, #192]	; (b8e4 <PDS_RestoreAll+0xd8>)
    b822:	2700      	movs	r7, #0
					ptr += itemInfo.itemOffset;
					memcpy((void *)(&itemHeader), (void *)(ptr), sizeof(ItemHeader_t));
					ptr += sizeof(ItemHeader_t);
					if (false == itemHeader.delete)
					{
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    b824:	4b30      	ldr	r3, [pc, #192]	; (b8e8 <PDS_RestoreAll+0xdc>)
    b826:	4698      	mov	r8, r3
    b828:	e026      	b.n	b878 <PDS_RestoreAll+0x6c>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    b82a:	3401      	adds	r4, #1
    b82c:	b2e4      	uxtb	r4, r4
    b82e:	792b      	ldrb	r3, [r5, #4]
    b830:	42a3      	cmp	r3, r4
    b832:	d918      	bls.n	b866 <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    b834:	00e1      	lsls	r1, r4, #3
    b836:	68ab      	ldr	r3, [r5, #8]
    b838:	469c      	mov	ip, r3
    b83a:	4461      	add	r1, ip
    b83c:	2208      	movs	r2, #8
    b83e:	a802      	add	r0, sp, #8
    b840:	47c8      	blx	r9
					ptr += itemInfo.itemOffset;
    b842:	ab02      	add	r3, sp, #8
    b844:	79d9      	ldrb	r1, [r3, #7]
    b846:	2315      	movs	r3, #21
    b848:	aa02      	add	r2, sp, #8
    b84a:	4694      	mov	ip, r2
    b84c:	4463      	add	r3, ip
    b84e:	469c      	mov	ip, r3
    b850:	4461      	add	r1, ip
					if (false == itemHeader.delete)
    b852:	790b      	ldrb	r3, [r1, #4]
    b854:	2b00      	cmp	r3, #0
    b856:	d1e8      	bne.n	b82a <PDS_RestoreAll+0x1e>
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    b858:	9b02      	ldr	r3, [sp, #8]
    b85a:	9301      	str	r3, [sp, #4]
    b85c:	788a      	ldrb	r2, [r1, #2]
					ptr += sizeof(ItemHeader_t);
    b85e:	3105      	adds	r1, #5
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    b860:	0018      	movs	r0, r3
    b862:	47c0      	blx	r8
    b864:	e7e1      	b.n	b82a <PDS_RestoreAll+0x1e>
					}
				}
				if(fileMarks[pdsFileItemIdx].fIDcb != NULL)
    b866:	68eb      	ldr	r3, [r5, #12]
    b868:	2b00      	cmp	r3, #0
    b86a:	d000      	beq.n	b86e <PDS_RestoreAll+0x62>
				{
					fileMarks[pdsFileItemIdx].fIDcb();
    b86c:	4798      	blx	r3
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    b86e:	3701      	adds	r7, #1
    b870:	b2ff      	uxtb	r7, r7
    b872:	3610      	adds	r6, #16
    b874:	2f0c      	cmp	r7, #12
    b876:	d02c      	beq.n	b8d2 <PDS_RestoreAll+0xc6>
    b878:	0035      	movs	r5, r6
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    b87a:	7934      	ldrb	r4, [r6, #4]
    b87c:	2c00      	cmp	r4, #0
    b87e:	d0f6      	beq.n	b86e <PDS_RestoreAll+0x62>
    b880:	6833      	ldr	r3, [r6, #0]
    b882:	2b00      	cmp	r3, #0
    b884:	d0f3      	beq.n	b86e <PDS_RestoreAll+0x62>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    b886:	68b3      	ldr	r3, [r6, #8]
    b888:	4699      	mov	r9, r3
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    b88a:	2b00      	cmp	r3, #0
    b88c:	d0ef      	beq.n	b86e <PDS_RestoreAll+0x62>
				memset(&buffer, 0, sizeof(PdsMem_t));
    b88e:	2280      	movs	r2, #128	; 0x80
    b890:	0052      	lsls	r2, r2, #1
    b892:	2100      	movs	r1, #0
    b894:	a804      	add	r0, sp, #16
    b896:	4b15      	ldr	r3, [pc, #84]	; (b8ec <PDS_RestoreAll+0xe0>)
    b898:	4798      	blx	r3
				memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    b89a:	4b15      	ldr	r3, [pc, #84]	; (b8f0 <PDS_RestoreAll+0xe4>)
    b89c:	469c      	mov	ip, r3
    b89e:	4464      	add	r4, ip
    b8a0:	00e4      	lsls	r4, r4, #3
    b8a2:	0021      	movs	r1, r4
    b8a4:	4449      	add	r1, r9
    b8a6:	2208      	movs	r2, #8
    b8a8:	a802      	add	r0, sp, #8
    b8aa:	4b0f      	ldr	r3, [pc, #60]	; (b8e8 <PDS_RestoreAll+0xdc>)
    b8ac:	4798      	blx	r3
				size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    b8ae:	ab02      	add	r3, sp, #8
    b8b0:	79da      	ldrb	r2, [r3, #7]
    b8b2:	799b      	ldrb	r3, [r3, #6]
    b8b4:	18d2      	adds	r2, r2, r3
				status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    b8b6:	3205      	adds	r2, #5
    b8b8:	a904      	add	r1, sp, #16
    b8ba:	0038      	movs	r0, r7
    b8bc:	4b0d      	ldr	r3, [pc, #52]	; (b8f4 <PDS_RestoreAll+0xe8>)
    b8be:	4798      	blx	r3
				if (status != PDS_OK)
    b8c0:	2800      	cmp	r0, #0
    b8c2:	d107      	bne.n	b8d4 <PDS_RestoreAll+0xc8>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    b8c4:	7933      	ldrb	r3, [r6, #4]
    b8c6:	2400      	movs	r4, #0
    b8c8:	2b00      	cmp	r3, #0
    b8ca:	d0cc      	beq.n	b866 <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    b8cc:	4b06      	ldr	r3, [pc, #24]	; (b8e8 <PDS_RestoreAll+0xdc>)
    b8ce:	4699      	mov	r9, r3
    b8d0:	e7b0      	b.n	b834 <PDS_RestoreAll+0x28>
    b8d2:	2000      	movs	r0, #0
			}
		}
	}
#endif	
	return status;
}
    b8d4:	b045      	add	sp, #276	; 0x114
    b8d6:	bc0c      	pop	{r2, r3}
    b8d8:	4690      	mov	r8, r2
    b8da:	4699      	mov	r9, r3
    b8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b8de:	46c0      	nop			; (mov r8, r8)
    b8e0:	20000e80 	.word	0x20000e80
    b8e4:	20001858 	.word	0x20001858
    b8e8:	00018195 	.word	0x00018195
    b8ec:	00018219 	.word	0x00018219
    b8f0:	1fffffff 	.word	0x1fffffff
    b8f4:	0000c039 	.word	0x0000c039

0000b8f8 <PDS_StoreAll>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_StoreAll(void)
{
    b8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    b8fa:	4b14      	ldr	r3, [pc, #80]	; (b94c <PDS_StoreAll+0x54>)
    b8fc:	781b      	ldrb	r3, [r3, #0]
    b8fe:	2b00      	cmp	r3, #0
    b900:	d121      	bne.n	b946 <PDS_StoreAll+0x4e>
    b902:	4813      	ldr	r0, [pc, #76]	; (b950 <PDS_StoreAll+0x58>)
    b904:	4d13      	ldr	r5, [pc, #76]	; (b954 <PDS_StoreAll+0x5c>)
    b906:	0007      	movs	r7, r0
    b908:	37c0      	adds	r7, #192	; 0xc0
    b90a:	2600      	movs	r6, #0
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
				{
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    b90c:	2401      	movs	r4, #1
    b90e:	e004      	b.n	b91a <PDS_StoreAll+0x22>
				}
				isFileSet[pdsFileItemIdx] = true;
    b910:	702c      	strb	r4, [r5, #0]
    b912:	3010      	adds	r0, #16
    b914:	3501      	adds	r5, #1
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    b916:	4287      	cmp	r7, r0
    b918:	d012      	beq.n	b940 <PDS_StoreAll+0x48>
    b91a:	0002      	movs	r2, r0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    b91c:	7903      	ldrb	r3, [r0, #4]
    b91e:	2b00      	cmp	r3, #0
    b920:	d0f7      	beq.n	b912 <PDS_StoreAll+0x1a>
    b922:	6803      	ldr	r3, [r0, #0]
    b924:	2b00      	cmp	r3, #0
    b926:	d0f4      	beq.n	b912 <PDS_StoreAll+0x1a>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    b928:	6883      	ldr	r3, [r0, #8]
    b92a:	2b00      	cmp	r3, #0
    b92c:	d0f1      	beq.n	b912 <PDS_StoreAll+0x1a>
    b92e:	0033      	movs	r3, r6
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    b930:	6811      	ldr	r1, [r2, #0]
    b932:	54cc      	strb	r4, [r1, r3]
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    b934:	3301      	adds	r3, #1
    b936:	b2db      	uxtb	r3, r3
    b938:	7911      	ldrb	r1, [r2, #4]
    b93a:	4299      	cmp	r1, r3
    b93c:	d8f8      	bhi.n	b930 <PDS_StoreAll+0x38>
    b93e:	e7e7      	b.n	b910 <PDS_StoreAll+0x18>
			}
		}
		pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    b940:	2001      	movs	r0, #1
    b942:	4b05      	ldr	r3, [pc, #20]	; (b958 <PDS_StoreAll+0x60>)
    b944:	4798      	blx	r3
	}
#endif	
	return PDS_OK;
}
    b946:	2000      	movs	r0, #0
    b948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b94a:	46c0      	nop			; (mov r8, r8)
    b94c:	20000e80 	.word	0x20000e80
    b950:	20001858 	.word	0x20001858
    b954:	2000184c 	.word	0x2000184c
    b958:	0000bb75 	.word	0x0000bb75

0000b95c <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    b95c:	b084      	sub	sp, #16
    b95e:	b510      	push	{r4, lr}
    b960:	9103      	str	r1, [sp, #12]
    b962:	9204      	str	r2, [sp, #16]
    b964:	9305      	str	r3, [sp, #20]
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    b966:	4b0b      	ldr	r3, [pc, #44]	; (b994 <PDS_RegFile+0x38>)
    b968:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    b96a:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    b96c:	2a00      	cmp	r2, #0
    b96e:	d102      	bne.n	b976 <PDS_RegFile+0x1a>
		{
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    b970:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    b972:	280b      	cmp	r0, #11
    b974:	d904      	bls.n	b980 <PDS_RegFile+0x24>
		}
	}
#endif	
	return status;
}
    b976:	0018      	movs	r0, r3
    b978:	bc10      	pop	{r4}
    b97a:	bc08      	pop	{r3}
    b97c:	b004      	add	sp, #16
    b97e:	4718      	bx	r3
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
    b980:	0100      	lsls	r0, r0, #4
    b982:	aa03      	add	r2, sp, #12
    b984:	4b04      	ldr	r3, [pc, #16]	; (b998 <PDS_RegFile+0x3c>)
    b986:	1818      	adds	r0, r3, r0
    b988:	ca1a      	ldmia	r2!, {r1, r3, r4}
    b98a:	c01a      	stmia	r0!, {r1, r3, r4}
    b98c:	6813      	ldr	r3, [r2, #0]
    b98e:	6003      	str	r3, [r0, #0]
	PdsStatus_t status = PDS_OK;
    b990:	2300      	movs	r3, #0
    b992:	e7f0      	b.n	b976 <PDS_RegFile+0x1a>
    b994:	20000e80 	.word	0x20000e80
    b998:	20001858 	.word	0x20001858

0000b99c <PDS_UnRegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnRegFile(PdsFileItemIdx_t argFileId)
{
    b99c:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    b99e:	4b09      	ldr	r3, [pc, #36]	; (b9c4 <PDS_UnRegFile+0x28>)
    b9a0:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    b9a2:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    b9a4:	2a00      	cmp	r2, #0
    b9a6:	d102      	bne.n	b9ae <PDS_UnRegFile+0x12>
		{
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    b9a8:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    b9aa:	280b      	cmp	r0, #11
    b9ac:	d901      	bls.n	b9b2 <PDS_UnRegFile+0x16>
		}
	}
#endif
	return status;
}
    b9ae:	0018      	movs	r0, r3
    b9b0:	bd10      	pop	{r4, pc}
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
    b9b2:	0100      	lsls	r0, r0, #4
    b9b4:	4b04      	ldr	r3, [pc, #16]	; (b9c8 <PDS_UnRegFile+0x2c>)
    b9b6:	18c0      	adds	r0, r0, r3
    b9b8:	3210      	adds	r2, #16
    b9ba:	2100      	movs	r1, #0
    b9bc:	4b03      	ldr	r3, [pc, #12]	; (b9cc <PDS_UnRegFile+0x30>)
    b9be:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    b9c0:	2300      	movs	r3, #0
    b9c2:	e7f4      	b.n	b9ae <PDS_UnRegFile+0x12>
    b9c4:	20000e80 	.word	0x20000e80
    b9c8:	20001858 	.word	0x20001858
    b9cc:	00018219 	.word	0x00018219

0000b9d0 <pdsNvmInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmInit(void)
{
    b9d0:	b500      	push	{lr}
    b9d2:	b085      	sub	sp, #20
	PdsStatus_t status = PDS_OK;
	status_code_t statusCode;
	struct nvm_parameters parameters;

	nvm_get_parameters(&parameters);
    b9d4:	4668      	mov	r0, sp
    b9d6:	4b0b      	ldr	r3, [pc, #44]	; (ba04 <pdsNvmInit+0x34>)
    b9d8:	4798      	blx	r3
	
	statusCode = nvm_init(INT_FLASH);
    b9da:	2000      	movs	r0, #0
    b9dc:	4b0a      	ldr	r3, [pc, #40]	; (ba08 <pdsNvmInit+0x38>)
    b9de:	4798      	blx	r3
	if (STATUS_OK != (status_code_genare_t) statusCode)
	{
		return PDS_ERROR;
    b9e0:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    b9e2:	2800      	cmp	r0, #0
    b9e4:	d002      	beq.n	b9ec <pdsNvmInit+0x1c>
	{
		return PDS_NOT_ENOUGH_MEMORY;
	}
	
	return status;
}
    b9e6:	0018      	movs	r0, r3
    b9e8:	b005      	add	sp, #20
    b9ea:	bd00      	pop	{pc}
	if (EEPROM_SIZE > ( (parameters.rww_eeprom_number_of_pages/NVMCTRL_ROW_PAGES) * NVMCTRL_ROW_SIZE) )
    b9ec:	466b      	mov	r3, sp
    b9ee:	899a      	ldrh	r2, [r3, #12]
    b9f0:	0892      	lsrs	r2, r2, #2
    b9f2:	0212      	lsls	r2, r2, #8
    b9f4:	4905      	ldr	r1, [pc, #20]	; (ba0c <pdsNvmInit+0x3c>)
	return status;
    b9f6:	0fd3      	lsrs	r3, r2, #31
    b9f8:	17c8      	asrs	r0, r1, #31
    b9fa:	4291      	cmp	r1, r2
    b9fc:	4143      	adcs	r3, r0
    b9fe:	009b      	lsls	r3, r3, #2
    ba00:	e7f1      	b.n	b9e6 <pdsNvmInit+0x16>
    ba02:	46c0      	nop			; (mov r8, r8)
    ba04:	0000369d 	.word	0x0000369d
    ba08:	0000d0b9 	.word	0x0000d0b9
    ba0c:	00001fff 	.word	0x00001fff

0000ba10 <pdsNvmRead>:
\param[in] 	buffer - The buffer containing data to be read.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmRead(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
    ba10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ba12:	000c      	movs	r4, r1
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint32_t nvmLogicalRowToPhysicalAddr(uint16_t logicalRow)
{
	//return (NVMCTRL_RWW_EEPROM_ADDR + (NVMCTRL_ROW_SIZE * logicalRow)); // PRVN
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    ba14:	2380      	movs	r3, #128	; 0x80
    ba16:	01db      	lsls	r3, r3, #7
    ba18:	469c      	mov	ip, r3
    ba1a:	4460      	add	r0, ip
    ba1c:	0205      	lsls	r5, r0, #8
	if (EEPROM_ROW_SIZE == size)
    ba1e:	2380      	movs	r3, #128	; 0x80
    ba20:	005b      	lsls	r3, r3, #1
    ba22:	429a      	cmp	r2, r3
    ba24:	d00e      	beq.n	ba44 <pdsNvmRead+0x34>
		size += sizeof(PdsNvmHeader_t);
    ba26:	3204      	adds	r2, #4
    ba28:	b296      	uxth	r6, r2
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    ba2a:	4f1e      	ldr	r7, [pc, #120]	; (baa4 <pdsNvmRead+0x94>)
    ba2c:	0033      	movs	r3, r6
    ba2e:	0022      	movs	r2, r4
    ba30:	0029      	movs	r1, r5
    ba32:	2000      	movs	r0, #0
    ba34:	47b8      	blx	r7
    ba36:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);		
    ba38:	2b05      	cmp	r3, #5
    ba3a:	d0f7      	beq.n	ba2c <pdsNvmRead+0x1c>
		return PDS_ERROR;
    ba3c:	2002      	movs	r0, #2
	if (STATUS_OK != statusCode)
    ba3e:	2b00      	cmp	r3, #0
    ba40:	d00b      	beq.n	ba5a <pdsNvmRead+0x4a>
}
    ba42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    ba44:	001e      	movs	r6, r3
    ba46:	4f17      	ldr	r7, [pc, #92]	; (baa4 <pdsNvmRead+0x94>)
    ba48:	0033      	movs	r3, r6
    ba4a:	0022      	movs	r2, r4
    ba4c:	0029      	movs	r1, r5
    ba4e:	2000      	movs	r0, #0
    ba50:	47b8      	blx	r7
    ba52:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);
    ba54:	2b05      	cmp	r3, #5
    ba56:	d0f7      	beq.n	ba48 <pdsNvmRead+0x38>
    ba58:	e7f0      	b.n	ba3c <pdsNvmRead+0x2c>
	crc = buffer->NVM_Struct.pdsNvmHeader.crc;
    ba5a:	7823      	ldrb	r3, [r4, #0]
    ba5c:	7860      	ldrb	r0, [r4, #1]
    ba5e:	0200      	lsls	r0, r0, #8
    ba60:	4318      	orrs	r0, r3
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    ba62:	78a6      	ldrb	r6, [r4, #2]
    ba64:	3404      	adds	r4, #4
  for (uint16_t i = 0; i < length; i++)
    ba66:	2e00      	cmp	r6, #0
    ba68:	d017      	beq.n	ba9a <pdsNvmRead+0x8a>
    ba6a:	0025      	movs	r5, r4
    ba6c:	3e01      	subs	r6, #1
    ba6e:	b2b6      	uxth	r6, r6
    ba70:	3601      	adds	r6, #1
    ba72:	19a4      	adds	r4, r4, r6
    ba74:	2600      	movs	r6, #0
  byte ^= initValue & 0xffU;
    ba76:	782b      	ldrb	r3, [r5, #0]
    ba78:	4073      	eors	r3, r6
    ba7a:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    ba7c:	010b      	lsls	r3, r1, #4
    ba7e:	404b      	eors	r3, r1
    ba80:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    ba82:	b29a      	uxth	r2, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    ba84:	091b      	lsrs	r3, r3, #4
    ba86:	00d1      	lsls	r1, r2, #3
    ba88:	404b      	eors	r3, r1
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    ba8a:	0212      	lsls	r2, r2, #8
    ba8c:	0a36      	lsrs	r6, r6, #8
    ba8e:	4332      	orrs	r2, r6
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    ba90:	4053      	eors	r3, r2
    ba92:	b29e      	uxth	r6, r3
    ba94:	3501      	adds	r5, #1
  for (uint16_t i = 0; i < length; i++)
    ba96:	42a5      	cmp	r5, r4
    ba98:	d1ed      	bne.n	ba76 <pdsNvmRead+0x66>
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    ba9a:	1b80      	subs	r0, r0, r6
    ba9c:	1e46      	subs	r6, r0, #1
    ba9e:	41b0      	sbcs	r0, r6
		return PDS_ERROR;
    baa0:	b2c0      	uxtb	r0, r0
    baa2:	e7ce      	b.n	ba42 <pdsNvmRead+0x32>
    baa4:	0000cf49 	.word	0x0000cf49

0000baa8 <pdsNvmWrite>:
{
    baa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    baaa:	46c6      	mov	lr, r8
    baac:	b500      	push	{lr}
    baae:	4680      	mov	r8, r0
    bab0:	000c      	movs	r4, r1
	buffer->NVM_Struct.pdsNvmHeader.version = PDS_NVM_VERSION;
    bab2:	2301      	movs	r3, #1
    bab4:	70cb      	strb	r3, [r1, #3]
	buffer->NVM_Struct.pdsNvmHeader.size = size;
    bab6:	708a      	strb	r2, [r1, #2]
    bab8:	27ff      	movs	r7, #255	; 0xff
    baba:	4017      	ands	r7, r2
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    babc:	1d0e      	adds	r6, r1, #4
  for (uint16_t i = 0; i < length; i++)
    babe:	2f00      	cmp	r7, #0
    bac0:	d017      	beq.n	baf2 <pdsNvmWrite+0x4a>
    bac2:	0030      	movs	r0, r6
    bac4:	3f01      	subs	r7, #1
    bac6:	b2bf      	uxth	r7, r7
    bac8:	3701      	adds	r7, #1
    baca:	19f6      	adds	r6, r6, r7
    bacc:	2700      	movs	r7, #0
  byte ^= initValue & 0xffU;
    bace:	7803      	ldrb	r3, [r0, #0]
    bad0:	407b      	eors	r3, r7
    bad2:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    bad4:	010b      	lsls	r3, r1, #4
    bad6:	404b      	eors	r3, r1
    bad8:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    bada:	b299      	uxth	r1, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    badc:	091b      	lsrs	r3, r3, #4
    bade:	00cd      	lsls	r5, r1, #3
    bae0:	406b      	eors	r3, r5
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    bae2:	0209      	lsls	r1, r1, #8
    bae4:	0a3f      	lsrs	r7, r7, #8
    bae6:	4339      	orrs	r1, r7
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    bae8:	404b      	eors	r3, r1
    baea:	b29f      	uxth	r7, r3
    baec:	3001      	adds	r0, #1
  for (uint16_t i = 0; i < length; i++)
    baee:	42b0      	cmp	r0, r6
    baf0:	d1ed      	bne.n	bace <pdsNvmWrite+0x26>
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    baf2:	7027      	strb	r7, [r4, #0]
    baf4:	0a3f      	lsrs	r7, r7, #8
    baf6:	7067      	strb	r7, [r4, #1]
	size += sizeof(PdsNvmHeader_t);
    baf8:	3204      	adds	r2, #4
    bafa:	b296      	uxth	r6, r2
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    bafc:	2180      	movs	r1, #128	; 0x80
    bafe:	01c9      	lsls	r1, r1, #7
    bb00:	4441      	add	r1, r8
    bb02:	0209      	lsls	r1, r1, #8
	statusCode = nvm_write(INT_FLASH, addr, (uint8_t *const)buffer, size);
    bb04:	0033      	movs	r3, r6
    bb06:	0022      	movs	r2, r4
    bb08:	2000      	movs	r0, #0
    bb0a:	4f08      	ldr	r7, [pc, #32]	; (bb2c <pdsNvmWrite+0x84>)
    bb0c:	47b8      	blx	r7
		return PDS_ERROR;
    bb0e:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    bb10:	2800      	cmp	r0, #0
    bb12:	d003      	beq.n	bb1c <pdsNvmWrite+0x74>
}
    bb14:	0018      	movs	r0, r3
    bb16:	bc04      	pop	{r2}
    bb18:	4690      	mov	r8, r2
    bb1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = pdsNvmRead(rowId, (PdsMem_t *const)buffer, size);
    bb1c:	0032      	movs	r2, r6
    bb1e:	0021      	movs	r1, r4
    bb20:	4640      	mov	r0, r8
    bb22:	4b03      	ldr	r3, [pc, #12]	; (bb30 <pdsNvmWrite+0x88>)
    bb24:	4798      	blx	r3
    bb26:	0003      	movs	r3, r0
	return status;
    bb28:	e7f4      	b.n	bb14 <pdsNvmWrite+0x6c>
    bb2a:	46c0      	nop			; (mov r8, r8)
    bb2c:	0000cfa5 	.word	0x0000cfa5
    bb30:	0000ba11 	.word	0x0000ba11

0000bb34 <pdsNvmErase>:
{
    bb34:	b570      	push	{r4, r5, r6, lr}
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    bb36:	2380      	movs	r3, #128	; 0x80
    bb38:	01db      	lsls	r3, r3, #7
    bb3a:	18c4      	adds	r4, r0, r3
    bb3c:	0224      	lsls	r4, r4, #8
		statusCode = nvm_erase_row(addr);
    bb3e:	4d05      	ldr	r5, [pc, #20]	; (bb54 <pdsNvmErase+0x20>)
    bb40:	0020      	movs	r0, r4
    bb42:	47a8      	blx	r5
    bb44:	b240      	sxtb	r0, r0
	} while (statusCode == ERR_BUSY);
    bb46:	0003      	movs	r3, r0
    bb48:	330a      	adds	r3, #10
    bb4a:	d0f9      	beq.n	bb40 <pdsNvmErase+0xc>
	return status;
    bb4c:	1e43      	subs	r3, r0, #1
    bb4e:	4198      	sbcs	r0, r3
    bb50:	0040      	lsls	r0, r0, #1
}
    bb52:	bd70      	pop	{r4, r5, r6, pc}
    bb54:	00003615 	.word	0x00003615

0000bb58 <pdsNvmEraseAll>:
{
    bb58:	b570      	push	{r4, r5, r6, lr}
    bb5a:	2400      	movs	r4, #0
		statusCode = pdsNvmErase(row_idx);
    bb5c:	4d04      	ldr	r5, [pc, #16]	; (bb70 <pdsNvmEraseAll+0x18>)
    bb5e:	b2a0      	uxth	r0, r4
    bb60:	47a8      	blx	r5
		if (PDS_OK != statusCode)
    bb62:	2800      	cmp	r0, #0
    bb64:	d102      	bne.n	bb6c <pdsNvmEraseAll+0x14>
    bb66:	3401      	adds	r4, #1
	for(uint8_t row_idx = 0; row_idx< EEPROM_NUM_ROWS; row_idx++)
    bb68:	2c20      	cmp	r4, #32
    bb6a:	d1f8      	bne.n	bb5e <pdsNvmEraseAll+0x6>
}
    bb6c:	bd70      	pop	{r4, r5, r6, pc}
    bb6e:	46c0      	nop			; (mov r8, r8)
    bb70:	0000bb35 	.word	0x0000bb35

0000bb74 <pdsPostTask>:
\brief Set task for PDS task manager.

\param[in] id - a single value from the type PdsTaskIds_t
******************************************************************************/
void pdsPostTask(PdsTaskIds_t id)
{
    bb74:	b510      	push	{r4, lr}
    bb76:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    bb78:	4b05      	ldr	r3, [pc, #20]	; (bb90 <pdsPostTask+0x1c>)
    bb7a:	4798      	blx	r3
    pdsTaskFlags |= id;
    bb7c:	4b05      	ldr	r3, [pc, #20]	; (bb94 <pdsPostTask+0x20>)
    bb7e:	7818      	ldrb	r0, [r3, #0]
    bb80:	4320      	orrs	r0, r4
    bb82:	7018      	strb	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    bb84:	4b04      	ldr	r3, [pc, #16]	; (bb98 <pdsPostTask+0x24>)
    bb86:	4798      	blx	r3

    /* Also post a PDS task to the system */
    SYSTEM_PostTask(PDS_TASK_ID);
    bb88:	2008      	movs	r0, #8
    bb8a:	4b04      	ldr	r3, [pc, #16]	; (bb9c <pdsPostTask+0x28>)
    bb8c:	4798      	blx	r3
}
    bb8e:	bd10      	pop	{r4, pc}
    bb90:	000069ed 	.word	0x000069ed
    bb94:	20000e81 	.word	0x20000e81
    bb98:	000069f9 	.word	0x000069f9
    bb9c:	0000cad9 	.word	0x0000cad9

0000bba0 <pdsStoreDeleteHandler>:
		initiate store/delete operation.

\param[out] status - The return status of the function's operation.
******************************************************************************/
static SYSTEM_TaskStatus_t pdsStoreDeleteHandler(void)
{
    bba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bba2:	46de      	mov	lr, fp
    bba4:	4657      	mov	r7, sl
    bba6:	464e      	mov	r6, r9
    bba8:	4645      	mov	r5, r8
    bbaa:	b5e0      	push	{r5, r6, r7, lr}
    bbac:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;

	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
	PdsMem_t buffer;

	memset(&buffer, 0, sizeof(PdsMem_t));
    bbae:	2280      	movs	r2, #128	; 0x80
    bbb0:	0052      	lsls	r2, r2, #1
    bbb2:	2100      	movs	r1, #0
    bbb4:	a804      	add	r0, sp, #16
    bbb6:	4b54      	ldr	r3, [pc, #336]	; (bd08 <pdsStoreDeleteHandler+0x168>)
    bbb8:	4798      	blx	r3
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
	{
		if (true == isFileSet[fileId])
    bbba:	4b54      	ldr	r3, [pc, #336]	; (bd0c <pdsStoreDeleteHandler+0x16c>)
    bbbc:	781b      	ldrb	r3, [r3, #0]
    bbbe:	2b00      	cmp	r3, #0
    bbc0:	d112      	bne.n	bbe8 <pdsStoreDeleteHandler+0x48>
    bbc2:	2401      	movs	r4, #1
    bbc4:	4a51      	ldr	r2, [pc, #324]	; (bd0c <pdsStoreDeleteHandler+0x16c>)
    bbc6:	9400      	str	r4, [sp, #0]
    bbc8:	5d13      	ldrb	r3, [r2, r4]
    bbca:	2b00      	cmp	r3, #0
    bbcc:	d10f      	bne.n	bbee <pdsStoreDeleteHandler+0x4e>
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    bbce:	3401      	adds	r4, #1
    bbd0:	b2e4      	uxtb	r4, r4
    bbd2:	2c0b      	cmp	r4, #11
    bbd4:	d9f7      	bls.n	bbc6 <pdsStoreDeleteHandler+0x26>
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;
    bbd6:	2500      	movs	r5, #0
			break;
		}
	}

	return status;
}
    bbd8:	0028      	movs	r0, r5
    bbda:	b045      	add	sp, #276	; 0x114
    bbdc:	bc3c      	pop	{r2, r3, r4, r5}
    bbde:	4690      	mov	r8, r2
    bbe0:	4699      	mov	r9, r3
    bbe2:	46a2      	mov	sl, r4
    bbe4:	46ab      	mov	fp, r5
    bbe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (true == isFileSet[fileId])
    bbe8:	2300      	movs	r3, #0
    bbea:	9300      	str	r3, [sp, #0]
	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
    bbec:	2400      	movs	r4, #0
	uint8_t *ptr;
	ItemMap_t itemInfo;
	ItemHeader_t itemHeader;
	uint16_t size;

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    bbee:	9b00      	ldr	r3, [sp, #0]
    bbf0:	011a      	lsls	r2, r3, #4
    bbf2:	4b47      	ldr	r3, [pc, #284]	; (bd10 <pdsStoreDeleteHandler+0x170>)
    bbf4:	189b      	adds	r3, r3, r2
    bbf6:	7919      	ldrb	r1, [r3, #4]
    bbf8:	4a46      	ldr	r2, [pc, #280]	; (bd14 <pdsStoreDeleteHandler+0x174>)
    bbfa:	4694      	mov	ip, r2
    bbfc:	4461      	add	r1, ip
    bbfe:	00c9      	lsls	r1, r1, #3
    bc00:	689b      	ldr	r3, [r3, #8]
    bc02:	1859      	adds	r1, r3, r1
    bc04:	2208      	movs	r2, #8
    bc06:	a802      	add	r0, sp, #8
    bc08:	4b43      	ldr	r3, [pc, #268]	; (bd18 <pdsStoreDeleteHandler+0x178>)
    bc0a:	4798      	blx	r3
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    bc0c:	ab02      	add	r3, sp, #8
    bc0e:	79da      	ldrb	r2, [r3, #7]
    bc10:	799b      	ldrb	r3, [r3, #6]
    bc12:	18d2      	adds	r2, r2, r3
	status = pdsWlRead(pdsFileItemIdx, (PdsMem_t *)buffer, size);
    bc14:	3205      	adds	r2, #5
    bc16:	a904      	add	r1, sp, #16
    bc18:	0020      	movs	r0, r4
    bc1a:	4b40      	ldr	r3, [pc, #256]	; (bd1c <pdsStoreDeleteHandler+0x17c>)
    bc1c:	4798      	blx	r3
    bc1e:	1e05      	subs	r5, r0, #0

	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    bc20:	d111      	bne.n	bc46 <pdsStoreDeleteHandler+0xa6>
	}

	itemHeader.magic = PDS_MAGIC;
	itemHeader.version = PDS_FILES_VERSION;

	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    bc22:	9b00      	ldr	r3, [sp, #0]
    bc24:	011a      	lsls	r2, r3, #4
    bc26:	4b3a      	ldr	r3, [pc, #232]	; (bd10 <pdsStoreDeleteHandler+0x170>)
    bc28:	189b      	adds	r3, r3, r2
    bc2a:	791b      	ldrb	r3, [r3, #4]
    bc2c:	2500      	movs	r5, #0
    bc2e:	2b00      	cmp	r3, #0
    bc30:	d04a      	beq.n	bcc8 <pdsStoreDeleteHandler+0x128>
	{

		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    bc32:	4b37      	ldr	r3, [pc, #220]	; (bd10 <pdsStoreDeleteHandler+0x170>)
    bc34:	4699      	mov	r9, r3
    bc36:	9b00      	ldr	r3, [sp, #0]
    bc38:	011e      	lsls	r6, r3, #4
    bc3a:	46b3      	mov	fp, r6
    bc3c:	44cb      	add	fp, r9
    bc3e:	4b36      	ldr	r3, [pc, #216]	; (bd18 <pdsStoreDeleteHandler+0x178>)
    bc40:	469a      	mov	sl, r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    bc42:	465f      	mov	r7, fp
    bc44:	e01b      	b.n	bc7e <pdsStoreDeleteHandler+0xde>
	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    bc46:	2803      	cmp	r0, #3
    bc48:	d144      	bne.n	bcd4 <pdsStoreDeleteHandler+0x134>
    bc4a:	e7ea      	b.n	bc22 <pdsStoreDeleteHandler+0x82>
		ptr = (uint8_t *)(&(((PdsMem_t *)(buffer))->NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
		ptr += itemInfo.itemOffset;

		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    bc4c:	2100      	movs	r1, #0
    bc4e:	7019      	strb	r1, [r3, #0]
			itemHeader.size = itemInfo.size;
    bc50:	ab02      	add	r3, sp, #8
    bc52:	799a      	ldrb	r2, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    bc54:	795b      	ldrb	r3, [r3, #5]
    bc56:	4698      	mov	r8, r3
			itemHeader.delete = false;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    bc58:	23a5      	movs	r3, #165	; 0xa5
    bc5a:	7003      	strb	r3, [r0, #0]
    bc5c:	2301      	movs	r3, #1
    bc5e:	7043      	strb	r3, [r0, #1]
    bc60:	7082      	strb	r2, [r0, #2]
    bc62:	4643      	mov	r3, r8
    bc64:	70c3      	strb	r3, [r0, #3]
    bc66:	7101      	strb	r1, [r0, #4]
			ptr += sizeof(ItemHeader_t);
    bc68:	3005      	adds	r0, #5
			memcpy((void *)(ptr), (void *)itemInfo.ramAddress, itemInfo.size);
    bc6a:	9b02      	ldr	r3, [sp, #8]
    bc6c:	9301      	str	r3, [sp, #4]
    bc6e:	0019      	movs	r1, r3
    bc70:	4b29      	ldr	r3, [pc, #164]	; (bd18 <pdsStoreDeleteHandler+0x178>)
    bc72:	4798      	blx	r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    bc74:	3501      	adds	r5, #1
    bc76:	b2ed      	uxtb	r5, r5
    bc78:	793b      	ldrb	r3, [r7, #4]
    bc7a:	42ab      	cmp	r3, r5
    bc7c:	d924      	bls.n	bcc8 <pdsStoreDeleteHandler+0x128>
		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    bc7e:	00e9      	lsls	r1, r5, #3
    bc80:	465b      	mov	r3, fp
    bc82:	689b      	ldr	r3, [r3, #8]
    bc84:	469c      	mov	ip, r3
    bc86:	4461      	add	r1, ip
    bc88:	2208      	movs	r2, #8
    bc8a:	a802      	add	r0, sp, #8
    bc8c:	47d0      	blx	sl
		ptr += itemInfo.itemOffset;
    bc8e:	ab02      	add	r3, sp, #8
    bc90:	79d8      	ldrb	r0, [r3, #7]
    bc92:	2315      	movs	r3, #21
    bc94:	aa02      	add	r2, sp, #8
    bc96:	4694      	mov	ip, r2
    bc98:	4463      	add	r3, ip
    bc9a:	469c      	mov	ip, r3
    bc9c:	4460      	add	r0, ip
		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    bc9e:	464b      	mov	r3, r9
    bca0:	58f3      	ldr	r3, [r6, r3]
    bca2:	195b      	adds	r3, r3, r5
    bca4:	781a      	ldrb	r2, [r3, #0]
    bca6:	2a01      	cmp	r2, #1
    bca8:	d0d0      	beq.n	bc4c <pdsStoreDeleteHandler+0xac>
		}
		else if (PDS_OP_DELETE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    bcaa:	2a02      	cmp	r2, #2
    bcac:	d1e2      	bne.n	bc74 <pdsStoreDeleteHandler+0xd4>
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    bcae:	2200      	movs	r2, #0
    bcb0:	701a      	strb	r2, [r3, #0]
			itemHeader.size = itemInfo.size;
    bcb2:	ab02      	add	r3, sp, #8
    bcb4:	7999      	ldrb	r1, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    bcb6:	795a      	ldrb	r2, [r3, #5]
			itemHeader.delete = true;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    bcb8:	23a5      	movs	r3, #165	; 0xa5
    bcba:	7003      	strb	r3, [r0, #0]
    bcbc:	3ba4      	subs	r3, #164	; 0xa4
    bcbe:	7043      	strb	r3, [r0, #1]
    bcc0:	7081      	strb	r1, [r0, #2]
    bcc2:	70c2      	strb	r2, [r0, #3]
    bcc4:	7103      	strb	r3, [r0, #4]
    bcc6:	e7d5      	b.n	bc74 <pdsStoreDeleteHandler+0xd4>
		}
	}

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + fileMarks[pdsFileItemIdx].numItems), sizeof(ItemMap_t));
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
	status = pdsWlWrite(pdsFileItemIdx, (PdsMem_t *)buffer, PDS_WL_DATA_SIZE);
    bcc8:	22f3      	movs	r2, #243	; 0xf3
    bcca:	a904      	add	r1, sp, #16
    bccc:	0020      	movs	r0, r4
    bcce:	4b14      	ldr	r3, [pc, #80]	; (bd20 <pdsStoreDeleteHandler+0x180>)
    bcd0:	4798      	blx	r3
    bcd2:	0005      	movs	r5, r0
			isFileSet[fileId] = false;
    bcd4:	2200      	movs	r2, #0
    bcd6:	4b0d      	ldr	r3, [pc, #52]	; (bd0c <pdsStoreDeleteHandler+0x16c>)
    bcd8:	9900      	ldr	r1, [sp, #0]
    bcda:	545a      	strb	r2, [r3, r1]
			fileId++;
    bcdc:	3401      	adds	r4, #1
    bcde:	b2e3      	uxtb	r3, r4
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    bce0:	2b0b      	cmp	r3, #11
    bce2:	d900      	bls.n	bce6 <pdsStoreDeleteHandler+0x146>
    bce4:	e778      	b.n	bbd8 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    bce6:	4a09      	ldr	r2, [pc, #36]	; (bd0c <pdsStoreDeleteHandler+0x16c>)
    bce8:	5cd2      	ldrb	r2, [r2, r3]
    bcea:	2a00      	cmp	r2, #0
    bcec:	d108      	bne.n	bd00 <pdsStoreDeleteHandler+0x160>
    bcee:	4907      	ldr	r1, [pc, #28]	; (bd0c <pdsStoreDeleteHandler+0x16c>)
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    bcf0:	3301      	adds	r3, #1
    bcf2:	b2db      	uxtb	r3, r3
    bcf4:	2b0b      	cmp	r3, #11
    bcf6:	d900      	bls.n	bcfa <pdsStoreDeleteHandler+0x15a>
    bcf8:	e76e      	b.n	bbd8 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    bcfa:	5cca      	ldrb	r2, [r1, r3]
    bcfc:	2a00      	cmp	r2, #0
    bcfe:	d0f7      	beq.n	bcf0 <pdsStoreDeleteHandler+0x150>
			pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    bd00:	2001      	movs	r0, #1
    bd02:	4b08      	ldr	r3, [pc, #32]	; (bd24 <pdsStoreDeleteHandler+0x184>)
    bd04:	4798      	blx	r3
			break;
    bd06:	e767      	b.n	bbd8 <pdsStoreDeleteHandler+0x38>
    bd08:	00018219 	.word	0x00018219
    bd0c:	2000184c 	.word	0x2000184c
    bd10:	20001858 	.word	0x20001858
    bd14:	1fffffff 	.word	0x1fffffff
    bd18:	00018195 	.word	0x00018195
    bd1c:	0000c039 	.word	0x0000c039
    bd20:	0000bf49 	.word	0x0000bf49
    bd24:	0000bb75 	.word	0x0000bb75

0000bd28 <PDS_TaskHandler>:
{
    bd28:	b510      	push	{r4, lr}
    if (pdsTaskFlags)
    bd2a:	4b0e      	ldr	r3, [pc, #56]	; (bd64 <PDS_TaskHandler+0x3c>)
    bd2c:	781b      	ldrb	r3, [r3, #0]
    bd2e:	2b00      	cmp	r3, #0
    bd30:	d003      	beq.n	bd3a <PDS_TaskHandler+0x12>
            if ((1 << taskId) & (pdsTaskFlags))
    bd32:	4b0c      	ldr	r3, [pc, #48]	; (bd64 <PDS_TaskHandler+0x3c>)
    bd34:	781b      	ldrb	r3, [r3, #0]
    bd36:	07db      	lsls	r3, r3, #31
    bd38:	d401      	bmi.n	bd3e <PDS_TaskHandler+0x16>
}
    bd3a:	2000      	movs	r0, #0
    bd3c:	bd10      	pop	{r4, pc}
                ATOMIC_SECTION_ENTER
    bd3e:	4b0a      	ldr	r3, [pc, #40]	; (bd68 <PDS_TaskHandler+0x40>)
    bd40:	4798      	blx	r3
                pdsTaskFlags &= ~(1 << taskId);
    bd42:	4c08      	ldr	r4, [pc, #32]	; (bd64 <PDS_TaskHandler+0x3c>)
    bd44:	7823      	ldrb	r3, [r4, #0]
    bd46:	2201      	movs	r2, #1
    bd48:	4393      	bics	r3, r2
    bd4a:	7023      	strb	r3, [r4, #0]
                ATOMIC_SECTION_EXIT
    bd4c:	4b07      	ldr	r3, [pc, #28]	; (bd6c <PDS_TaskHandler+0x44>)
    bd4e:	4798      	blx	r3
                pdsTaskHandlers[taskId]();
    bd50:	4b07      	ldr	r3, [pc, #28]	; (bd70 <PDS_TaskHandler+0x48>)
    bd52:	4798      	blx	r3
				if (pdsTaskFlags)
    bd54:	7823      	ldrb	r3, [r4, #0]
    bd56:	2b00      	cmp	r3, #0
    bd58:	d0ef      	beq.n	bd3a <PDS_TaskHandler+0x12>
                    SYSTEM_PostTask(PDS_TASK_ID);
    bd5a:	2008      	movs	r0, #8
    bd5c:	4b05      	ldr	r3, [pc, #20]	; (bd74 <PDS_TaskHandler+0x4c>)
    bd5e:	4798      	blx	r3
    bd60:	e7eb      	b.n	bd3a <PDS_TaskHandler+0x12>
    bd62:	46c0      	nop			; (mov r8, r8)
    bd64:	20000e81 	.word	0x20000e81
    bd68:	000069ed 	.word	0x000069ed
    bd6c:	000069f9 	.word	0x000069f9
    bd70:	0000bba1 	.word	0x0000bba1
    bd74:	0000cad9 	.word	0x0000cad9

0000bd78 <pdsUpdateRowMap>:
		in the row map.

\param[in] - return none
******************************************************************************/
static void pdsUpdateRowMap()
{
    bd78:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd7a:	4e12      	ldr	r6, [pc, #72]	; (bdc4 <pdsUpdateRowMap+0x4c>)
    bd7c:	0037      	movs	r7, r6
    bd7e:	3718      	adds	r7, #24
	uint16_t rowIdx = USHRT_MAX;
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    {
		
        // make all the previous indexes of the max_counter_row_idx invalid by writing 0xFF
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    bd80:	4d11      	ldr	r5, [pc, #68]	; (bdc8 <pdsUpdateRowMap+0x50>)
		{
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    bd82:	4b12      	ldr	r3, [pc, #72]	; (bdcc <pdsUpdateRowMap+0x54>)
    bd84:	469c      	mov	ip, r3
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    bd86:	2101      	movs	r1, #1
    bd88:	4249      	negs	r1, r1
			while(rowIdx != USHRT_MAX)
			{
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    bd8a:	0018      	movs	r0, r3
    bd8c:	e002      	b.n	bd94 <pdsUpdateRowMap+0x1c>
    bd8e:	3602      	adds	r6, #2
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    bd90:	42be      	cmp	r6, r7
    bd92:	d015      	beq.n	bdc0 <pdsUpdateRowMap+0x48>
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    bd94:	8833      	ldrh	r3, [r6, #0]
    bd96:	42ab      	cmp	r3, r5
    bd98:	d0f9      	beq.n	bd8e <pdsUpdateRowMap+0x16>
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    bd9a:	00db      	lsls	r3, r3, #3
    bd9c:	4463      	add	r3, ip
    bd9e:	001a      	movs	r2, r3
    bda0:	88db      	ldrh	r3, [r3, #6]
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    bda2:	80d1      	strh	r1, [r2, #6]
			while(rowIdx != USHRT_MAX)
    bda4:	42ab      	cmp	r3, r5
    bda6:	d0f2      	beq.n	bd8e <pdsUpdateRowMap+0x16>
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    bda8:	001a      	movs	r2, r3
    bdaa:	00db      	lsls	r3, r3, #3
    bdac:	18c3      	adds	r3, r0, r3
    bdae:	88db      	ldrh	r3, [r3, #6]
				rowMap[rowIdx].previousIdx = USHRT_MAX;
    bdb0:	00d2      	lsls	r2, r2, #3
    bdb2:	1884      	adds	r4, r0, r2
    bdb4:	80e1      	strh	r1, [r4, #6]
				rowMap[rowIdx].counter = UINT_MAX;
    bdb6:	5011      	str	r1, [r2, r0]
				rowMap[rowIdx].memId = USHRT_MAX;
    bdb8:	80a1      	strh	r1, [r4, #4]
			while(rowIdx != USHRT_MAX)
    bdba:	42ab      	cmp	r3, r5
    bdbc:	d1f4      	bne.n	bda8 <pdsUpdateRowMap+0x30>
    bdbe:	e7e6      	b.n	bd8e <pdsUpdateRowMap+0x16>
				rowIdx = rowIdxLocal;
			}
		}
    }
}
    bdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bdc2:	46c0      	nop			; (mov r8, r8)
    bdc4:	20000e84 	.word	0x20000e84
    bdc8:	0000ffff 	.word	0x0000ffff
    bdcc:	20000e9c 	.word	0x20000e9c

0000bdd0 <pdsUpdateFileMap>:
\brief Updates the file map so that it points to the latest row index for a file id.

\param[out] - returns none
******************************************************************************/
static void pdsUpdateFileMap(UpdateFileMap_t *updateFileMap)
{
    bdd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bdd2:	46c6      	mov	lr, r8
    bdd4:	b500      	push	{lr}
    bdd6:	b082      	sub	sp, #8
    bdd8:	4684      	mov	ip, r0
    uint16_t *presentRowIdx;
    uint16_t *previousRowIdx;
    uint16_t *lastRowIdx;
    uint16_t prevTemp;
    if(USHRT_MAX == fileMap[updateFileMap->memId].maxCounterRowIdx)
    bdda:	8881      	ldrh	r1, [r0, #4]
    bddc:	004a      	lsls	r2, r1, #1
    bdde:	4b2c      	ldr	r3, [pc, #176]	; (be90 <pdsUpdateFileMap+0xc0>)
    bde0:	5ad3      	ldrh	r3, [r2, r3]
    bde2:	4a2c      	ldr	r2, [pc, #176]	; (be94 <pdsUpdateFileMap+0xc4>)
    bde4:	4293      	cmp	r3, r2
    bde6:	d02c      	beq.n	be42 <pdsUpdateFileMap+0x72>
    {   
		/* If there is no entry in filemap update current rowidx as maxcounteridx*/
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
    else if(rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter < rowMap[updateFileMap->rowIdx].counter)
    bde8:	4a2b      	ldr	r2, [pc, #172]	; (be98 <pdsUpdateFileMap+0xc8>)
    bdea:	00d8      	lsls	r0, r3, #3
    bdec:	5880      	ldr	r0, [r0, r2]
    bdee:	4664      	mov	r4, ip
    bdf0:	88e4      	ldrh	r4, [r4, #6]
    bdf2:	46a0      	mov	r8, r4
    bdf4:	00e4      	lsls	r4, r4, #3
    bdf6:	58a6      	ldr	r6, [r4, r2]
    bdf8:	42b0      	cmp	r0, r6
    bdfa:	d327      	bcc.n	be4c <pdsUpdateFileMap+0x7c>
		// update the max counter rowIdx of the memId as previous_idx in the present row
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
	else if (rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter == rowMap[updateFileMap->rowIdx].counter)
    bdfc:	d02f      	beq.n	be5e <pdsUpdateFileMap+0x8e>

		return;
	}
    else
    {
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    bdfe:	4a26      	ldr	r2, [pc, #152]	; (be98 <pdsUpdateFileMap+0xc8>)
    be00:	00dd      	lsls	r5, r3, #3
    be02:	3506      	adds	r5, #6
    be04:	1950      	adds	r0, r2, r5
    be06:	9001      	str	r0, [sp, #4]
    be08:	00db      	lsls	r3, r3, #3
    be0a:	18d3      	adds	r3, r2, r3
    be0c:	88da      	ldrh	r2, [r3, #6]
        presentRowIdx = &updateFileMap->rowIdx;
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
		do
		{
			if (USHRT_MAX == *previousRowIdx)
    be0e:	4b21      	ldr	r3, [pc, #132]	; (be94 <pdsUpdateFileMap+0xc4>)
    be10:	429a      	cmp	r2, r3
    be12:	d028      	beq.n	be66 <pdsUpdateFileMap+0x96>
			{
				*previousRowIdx = *presentRowIdx;
				break;
			}
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    be14:	0013      	movs	r3, r2
    be16:	00d0      	lsls	r0, r2, #3
    be18:	4c1f      	ldr	r4, [pc, #124]	; (be98 <pdsUpdateFileMap+0xc8>)
    be1a:	5900      	ldr	r0, [r0, r4]
    be1c:	4286      	cmp	r6, r0
    be1e:	d226      	bcs.n	be6e <pdsUpdateFileMap+0x9e>
			{
				lastRowIdx = previousRowIdx;
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    be20:	4c1d      	ldr	r4, [pc, #116]	; (be98 <pdsUpdateFileMap+0xc8>)
			if (USHRT_MAX == *previousRowIdx)
    be22:	4f1c      	ldr	r7, [pc, #112]	; (be94 <pdsUpdateFileMap+0xc4>)
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    be24:	0020      	movs	r0, r4
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    be26:	00db      	lsls	r3, r3, #3
    be28:	1d99      	adds	r1, r3, #6
    be2a:	1861      	adds	r1, r4, r1
    be2c:	18e3      	adds	r3, r4, r3
    be2e:	88da      	ldrh	r2, [r3, #6]
			if (USHRT_MAX == *previousRowIdx)
    be30:	42ba      	cmp	r2, r7
    be32:	d019      	beq.n	be68 <pdsUpdateFileMap+0x98>
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    be34:	0013      	movs	r3, r2
    be36:	00d5      	lsls	r5, r2, #3
    be38:	582d      	ldr	r5, [r5, r0]
    be3a:	42ae      	cmp	r6, r5
    be3c:	d21b      	bcs.n	be76 <pdsUpdateFileMap+0xa6>
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    be3e:	9101      	str	r1, [sp, #4]
    be40:	e7f1      	b.n	be26 <pdsUpdateFileMap+0x56>
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    be42:	88c2      	ldrh	r2, [r0, #6]
    be44:	0049      	lsls	r1, r1, #1
    be46:	4b12      	ldr	r3, [pc, #72]	; (be90 <pdsUpdateFileMap+0xc0>)
    be48:	52ca      	strh	r2, [r1, r3]
    be4a:	e008      	b.n	be5e <pdsUpdateFileMap+0x8e>
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
    be4c:	4a12      	ldr	r2, [pc, #72]	; (be98 <pdsUpdateFileMap+0xc8>)
    be4e:	1912      	adds	r2, r2, r4
    be50:	80d3      	strh	r3, [r2, #6]
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    be52:	4663      	mov	r3, ip
    be54:	88d9      	ldrh	r1, [r3, #6]
    be56:	889b      	ldrh	r3, [r3, #4]
    be58:	005b      	lsls	r3, r3, #1
    be5a:	4a0d      	ldr	r2, [pc, #52]	; (be90 <pdsUpdateFileMap+0xc0>)
    be5c:	5299      	strh	r1, [r3, r2]
				break;
			}
		} while(true);

    }
}
    be5e:	b002      	add	sp, #8
    be60:	bc04      	pop	{r2}
    be62:	4690      	mov	r8, r2
    be64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    be66:	9901      	ldr	r1, [sp, #4]
				*previousRowIdx = *presentRowIdx;
    be68:	4643      	mov	r3, r8
    be6a:	800b      	strh	r3, [r1, #0]
				break;
    be6c:	e7f7      	b.n	be5e <pdsUpdateFileMap+0x8e>
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
    be6e:	0049      	lsls	r1, r1, #1
    be70:	4d07      	ldr	r5, [pc, #28]	; (be90 <pdsUpdateFileMap+0xc0>)
    be72:	186b      	adds	r3, r5, r1
    be74:	9301      	str	r3, [sp, #4]
				rowMap[*lastRowIdx].previousIdx = *presentRowIdx;
    be76:	4908      	ldr	r1, [pc, #32]	; (be98 <pdsUpdateFileMap+0xc8>)
    be78:	9b01      	ldr	r3, [sp, #4]
    be7a:	881b      	ldrh	r3, [r3, #0]
    be7c:	00db      	lsls	r3, r3, #3
    be7e:	18cb      	adds	r3, r1, r3
    be80:	4640      	mov	r0, r8
    be82:	80d8      	strh	r0, [r3, #6]
				rowMap[*presentRowIdx].previousIdx = prevTemp;
    be84:	4663      	mov	r3, ip
    be86:	88db      	ldrh	r3, [r3, #6]
    be88:	00db      	lsls	r3, r3, #3
    be8a:	18c9      	adds	r1, r1, r3
    be8c:	80ca      	strh	r2, [r1, #6]
				break;
    be8e:	e7e6      	b.n	be5e <pdsUpdateFileMap+0x8e>
    be90:	20000e84 	.word	0x20000e84
    be94:	0000ffff 	.word	0x0000ffff
    be98:	20000e9c 	.word	0x20000e9c

0000be9c <pdsWlInit>:
{
    be9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    be9e:	46c6      	mov	lr, r8
    bea0:	b500      	push	{lr}
    bea2:	b0c4      	sub	sp, #272	; 0x110
	PdsStatus_t status = pdsNvmInit();
    bea4:	4b21      	ldr	r3, [pc, #132]	; (bf2c <pdsWlInit+0x90>)
    bea6:	4798      	blx	r3
    bea8:	9001      	str	r0, [sp, #4]
	if (PDS_OK != status)
    beaa:	2800      	cmp	r0, #0
    beac:	d004      	beq.n	beb8 <pdsWlInit+0x1c>
}
    beae:	9801      	ldr	r0, [sp, #4]
    beb0:	b044      	add	sp, #272	; 0x110
    beb2:	bc04      	pop	{r2}
    beb4:	4690      	mov	r8, r2
    beb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    beb8:	2680      	movs	r6, #128	; 0x80
    beba:	0076      	lsls	r6, r6, #1
    bebc:	4d1c      	ldr	r5, [pc, #112]	; (bf30 <pdsWlInit+0x94>)
    bebe:	0032      	movs	r2, r6
    bec0:	21ff      	movs	r1, #255	; 0xff
    bec2:	0028      	movs	r0, r5
    bec4:	4c1b      	ldr	r4, [pc, #108]	; (bf34 <pdsWlInit+0x98>)
    bec6:	47a0      	blx	r4
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    bec8:	2218      	movs	r2, #24
    beca:	21ff      	movs	r1, #255	; 0xff
    becc:	481a      	ldr	r0, [pc, #104]	; (bf38 <pdsWlInit+0x9c>)
    bece:	47a0      	blx	r4
	memset(&buffer, 0, sizeof(PdsMem_t));
    bed0:	0032      	movs	r2, r6
    bed2:	2100      	movs	r1, #0
    bed4:	a804      	add	r0, sp, #16
    bed6:	47a0      	blx	r4
    bed8:	2400      	movs	r4, #0
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    beda:	4e18      	ldr	r6, [pc, #96]	; (bf3c <pdsWlInit+0xa0>)
            pdsUpdateFileMap(&updateFileMap);
    bedc:	4b18      	ldr	r3, [pc, #96]	; (bf40 <pdsWlInit+0xa4>)
    bede:	4698      	mov	r8, r3
    bee0:	e003      	b.n	beea <pdsWlInit+0x4e>
    bee2:	3401      	adds	r4, #1
    bee4:	3508      	adds	r5, #8
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
    bee6:	2c20      	cmp	r4, #32
    bee8:	d01d      	beq.n	bf26 <pdsWlInit+0x8a>
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    beea:	b2a7      	uxth	r7, r4
    beec:	2280      	movs	r2, #128	; 0x80
    beee:	0052      	lsls	r2, r2, #1
    bef0:	a904      	add	r1, sp, #16
    bef2:	0038      	movs	r0, r7
    bef4:	47b0      	blx	r6
		if (PDS_OK == status)
    bef6:	2800      	cmp	r0, #0
    bef8:	d1f3      	bne.n	bee2 <pdsWlInit+0x46>
			rowMap[rowIdx].counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    befa:	a904      	add	r1, sp, #16
    befc:	9b06      	ldr	r3, [sp, #24]
    befe:	0a1b      	lsrs	r3, r3, #8
    bf00:	7b0a      	ldrb	r2, [r1, #12]
    bf02:	0612      	lsls	r2, r2, #24
    bf04:	431a      	orrs	r2, r3
    bf06:	602a      	str	r2, [r5, #0]
            rowMap[rowIdx].memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    bf08:	79c8      	ldrb	r0, [r1, #7]
    bf0a:	7a0b      	ldrb	r3, [r1, #8]
    bf0c:	021b      	lsls	r3, r3, #8
    bf0e:	4303      	orrs	r3, r0
    bf10:	80ab      	strh	r3, [r5, #4]
            rowMap[rowIdx].previousIdx = USHRT_MAX;
    bf12:	2101      	movs	r1, #1
    bf14:	4249      	negs	r1, r1
    bf16:	80e9      	strh	r1, [r5, #6]
            updateFileMap.counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    bf18:	9202      	str	r2, [sp, #8]
            updateFileMap.memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    bf1a:	aa02      	add	r2, sp, #8
    bf1c:	8093      	strh	r3, [r2, #4]
            updateFileMap.rowIdx = rowIdx;
    bf1e:	80d7      	strh	r7, [r2, #6]
            pdsUpdateFileMap(&updateFileMap);
    bf20:	0010      	movs	r0, r2
    bf22:	47c0      	blx	r8
    bf24:	e7dd      	b.n	bee2 <pdsWlInit+0x46>
    pdsUpdateRowMap();
    bf26:	4b07      	ldr	r3, [pc, #28]	; (bf44 <pdsWlInit+0xa8>)
    bf28:	4798      	blx	r3
	return PDS_OK;
    bf2a:	e7c0      	b.n	beae <pdsWlInit+0x12>
    bf2c:	0000b9d1 	.word	0x0000b9d1
    bf30:	20000e9c 	.word	0x20000e9c
    bf34:	00018219 	.word	0x00018219
    bf38:	20000e84 	.word	0x20000e84
    bf3c:	0000ba11 	.word	0x0000ba11
    bf40:	0000bdd1 	.word	0x0000bdd1
    bf44:	0000bd79 	.word	0x0000bd79

0000bf48 <pdsWlWrite>:
{
    bf48:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf4a:	46ce      	mov	lr, r9
    bf4c:	4647      	mov	r7, r8
    bf4e:	b580      	push	{r7, lr}
    bf50:	b083      	sub	sp, #12
    bf52:	0005      	movs	r5, r0
    bf54:	000f      	movs	r7, r1
    bf56:	4690      	mov	r8, r2
    bf58:	4e32      	ldr	r6, [pc, #200]	; (c024 <pdsWlWrite+0xdc>)
    bf5a:	0033      	movs	r3, r6
******************************************************************************/
static uint16_t pdsReturnFreeRowIdx(void)
{
    uint8_t rowIdx;
    bool found = 0;
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    bf5c:	2400      	movs	r4, #0
    {
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    bf5e:	4832      	ldr	r0, [pc, #200]	; (c028 <pdsWlWrite+0xe0>)
    bf60:	e004      	b.n	bf6c <pdsWlWrite+0x24>
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    bf62:	3401      	adds	r4, #1
    bf64:	b2e4      	uxtb	r4, r4
    bf66:	3308      	adds	r3, #8
    bf68:	2c20      	cmp	r4, #32
    bf6a:	d055      	beq.n	c018 <pdsWlWrite+0xd0>
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    bf6c:	6819      	ldr	r1, [r3, #0]
    bf6e:	3101      	adds	r1, #1
    bf70:	d1f7      	bne.n	bf62 <pdsWlWrite+0x1a>
    bf72:	88d9      	ldrh	r1, [r3, #6]
    bf74:	4281      	cmp	r1, r0
    bf76:	d1f4      	bne.n	bf62 <pdsWlWrite+0x1a>
            (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    bf78:	889a      	ldrh	r2, [r3, #4]
    bf7a:	4282      	cmp	r2, r0
    bf7c:	d1f1      	bne.n	bf62 <pdsWlWrite+0x1a>
            {
                break;
            }
        }
    }
	return rowIdx;
    bf7e:	b2a3      	uxth	r3, r4
    bf80:	4699      	mov	r9, r3
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter++;
    bf82:	7a7e      	ldrb	r6, [r7, #9]
    bf84:	7abb      	ldrb	r3, [r7, #10]
    bf86:	021b      	lsls	r3, r3, #8
    bf88:	4333      	orrs	r3, r6
    bf8a:	7afe      	ldrb	r6, [r7, #11]
    bf8c:	0436      	lsls	r6, r6, #16
    bf8e:	4333      	orrs	r3, r6
    bf90:	7b3e      	ldrb	r6, [r7, #12]
    bf92:	0636      	lsls	r6, r6, #24
    bf94:	431e      	orrs	r6, r3
    bf96:	3601      	adds	r6, #1
    bf98:	727e      	strb	r6, [r7, #9]
    bf9a:	0a32      	lsrs	r2, r6, #8
    bf9c:	72ba      	strb	r2, [r7, #10]
    bf9e:	0c32      	lsrs	r2, r6, #16
    bfa0:	72fa      	strb	r2, [r7, #11]
    bfa2:	0e32      	lsrs	r2, r6, #24
    bfa4:	733a      	strb	r2, [r7, #12]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId = pdsFileItemIdx;
    bfa6:	b2ad      	uxth	r5, r5
    bfa8:	71fd      	strb	r5, [r7, #7]
    bfaa:	2200      	movs	r2, #0
    bfac:	723a      	strb	r2, [r7, #8]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.magicNo = PDS_MAGIC;
    bfae:	23a5      	movs	r3, #165	; 0xa5
    bfb0:	713b      	strb	r3, [r7, #4]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.version = PDS_WL_VERSION;
    bfb2:	3ba4      	subs	r3, #164	; 0xa4
    bfb4:	717b      	strb	r3, [r7, #5]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.size = size;
    bfb6:	4643      	mov	r3, r8
    bfb8:	71bb      	strb	r3, [r7, #6]
	size += sizeof(PdsWlHeader_t);
    bfba:	4642      	mov	r2, r8
    bfbc:	3209      	adds	r2, #9
	status = pdsNvmWrite(rowIdx, buffer, size);
    bfbe:	b292      	uxth	r2, r2
    bfc0:	0039      	movs	r1, r7
    bfc2:	4648      	mov	r0, r9
    bfc4:	4b19      	ldr	r3, [pc, #100]	; (c02c <pdsWlWrite+0xe4>)
    bfc6:	4798      	blx	r3
    bfc8:	1e07      	subs	r7, r0, #0
	if (PDS_OK == status)
    bfca:	d014      	beq.n	bff6 <pdsWlWrite+0xae>
}
    bfcc:	0038      	movs	r0, r7
    bfce:	b003      	add	sp, #12
    bfd0:	bc0c      	pop	{r2, r3}
    bfd2:	4690      	mov	r8, r2
    bfd4:	4699      	mov	r9, r3
    bfd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    bfd8:	3401      	adds	r4, #1
    bfda:	b2e4      	uxtb	r4, r4
    bfdc:	3608      	adds	r6, #8
    bfde:	2c20      	cmp	r4, #32
    bfe0:	d0cd      	beq.n	bf7e <pdsWlWrite+0x36>
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    bfe2:	6832      	ldr	r2, [r6, #0]
    bfe4:	3201      	adds	r2, #1
    bfe6:	d1f7      	bne.n	bfd8 <pdsWlWrite+0x90>
    bfe8:	88f2      	ldrh	r2, [r6, #6]
    bfea:	428a      	cmp	r2, r1
    bfec:	d1f4      	bne.n	bfd8 <pdsWlWrite+0x90>
                (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    bfee:	88b3      	ldrh	r3, [r6, #4]
    bff0:	428b      	cmp	r3, r1
    bff2:	d1f1      	bne.n	bfd8 <pdsWlWrite+0x90>
    bff4:	e7c3      	b.n	bf7e <pdsWlWrite+0x36>
		rowMap[rowIdx].counter = counter;
    bff6:	4b0b      	ldr	r3, [pc, #44]	; (c024 <pdsWlWrite+0xdc>)
    bff8:	00e4      	lsls	r4, r4, #3
    bffa:	50e6      	str	r6, [r4, r3]
		rowMap[rowIdx].memId = pdsFileItemIdx;
    bffc:	191c      	adds	r4, r3, r4
    bffe:	80a5      	strh	r5, [r4, #4]
		rowMap[rowIdx].previousIdx = USHRT_MAX;
    c000:	2301      	movs	r3, #1
    c002:	425b      	negs	r3, r3
    c004:	80e3      	strh	r3, [r4, #6]
		updateFileMap.counter = rowMap[rowIdx].counter;
    c006:	9600      	str	r6, [sp, #0]
		updateFileMap.memId = rowMap[rowIdx].memId;
    c008:	466b      	mov	r3, sp
    c00a:	809d      	strh	r5, [r3, #4]
		updateFileMap.rowIdx = rowIdx;
    c00c:	464a      	mov	r2, r9
    c00e:	80da      	strh	r2, [r3, #6]
		pdsUpdateFileMap(&updateFileMap);
    c010:	4668      	mov	r0, sp
    c012:	4b07      	ldr	r3, [pc, #28]	; (c030 <pdsWlWrite+0xe8>)
    c014:	4798      	blx	r3
	return status;
    c016:	e7d9      	b.n	bfcc <pdsWlWrite+0x84>
        pdsUpdateRowMap();
    c018:	4b06      	ldr	r3, [pc, #24]	; (c034 <pdsWlWrite+0xec>)
    c01a:	4798      	blx	r3
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    c01c:	2400      	movs	r4, #0
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    c01e:	4902      	ldr	r1, [pc, #8]	; (c028 <pdsWlWrite+0xe0>)
    c020:	e7df      	b.n	bfe2 <pdsWlWrite+0x9a>
    c022:	46c0      	nop			; (mov r8, r8)
    c024:	20000e9c 	.word	0x20000e9c
    c028:	0000ffff 	.word	0x0000ffff
    c02c:	0000baa9 	.word	0x0000baa9
    c030:	0000bdd1 	.word	0x0000bdd1
    c034:	0000bd79 	.word	0x0000bd79

0000c038 <pdsWlRead>:
{
    c038:	b510      	push	{r4, lr}
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    c03a:	0040      	lsls	r0, r0, #1
    c03c:	4b06      	ldr	r3, [pc, #24]	; (c058 <pdsWlRead+0x20>)
    c03e:	5ac3      	ldrh	r3, [r0, r3]
	if (USHRT_MAX == rowIdx)
    c040:	4c06      	ldr	r4, [pc, #24]	; (c05c <pdsWlRead+0x24>)
		return PDS_NOT_FOUND;
    c042:	2003      	movs	r0, #3
	if (USHRT_MAX == rowIdx)
    c044:	42a3      	cmp	r3, r4
    c046:	d100      	bne.n	c04a <pdsWlRead+0x12>
}
    c048:	bd10      	pop	{r4, pc}
	size += sizeof(PdsWlHeader_t);
    c04a:	3209      	adds	r2, #9
	status = pdsNvmRead(rowIdx, buffer, size);
    c04c:	b292      	uxth	r2, r2
    c04e:	0018      	movs	r0, r3
    c050:	4b03      	ldr	r3, [pc, #12]	; (c060 <pdsWlRead+0x28>)
    c052:	4798      	blx	r3
	return status;
    c054:	e7f8      	b.n	c048 <pdsWlRead+0x10>
    c056:	46c0      	nop			; (mov r8, r8)
    c058:	20000e84 	.word	0x20000e84
    c05c:	0000ffff 	.word	0x0000ffff
    c060:	0000ba11 	.word	0x0000ba11

0000c064 <isFileFound>:

\param[out] - return true or false
******************************************************************************/
bool isFileFound(PdsFileItemIdx_t pdsFileItemIdx)
{
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    c064:	0040      	lsls	r0, r0, #1
	if (USHRT_MAX == rowIdx)
    c066:	4b04      	ldr	r3, [pc, #16]	; (c078 <isFileFound+0x14>)
    c068:	5ac0      	ldrh	r0, [r0, r3]
    c06a:	4b04      	ldr	r3, [pc, #16]	; (c07c <isFileFound+0x18>)
    c06c:	469c      	mov	ip, r3
    c06e:	4460      	add	r0, ip
    c070:	1e43      	subs	r3, r0, #1
    c072:	4198      	sbcs	r0, r3
    c074:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return true;
	}
}
    c076:	4770      	bx	lr
    c078:	20000e84 	.word	0x20000e84
    c07c:	ffff0001 	.word	0xffff0001

0000c080 <pdsWlDeleteAll>:

void pdsWlDeleteAll(void)
{
    c080:	b510      	push	{r4, lr}
	/* Clear Filemap array */
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    c082:	2280      	movs	r2, #128	; 0x80
    c084:	0052      	lsls	r2, r2, #1
    c086:	21ff      	movs	r1, #255	; 0xff
    c088:	4804      	ldr	r0, [pc, #16]	; (c09c <pdsWlDeleteAll+0x1c>)
    c08a:	4c05      	ldr	r4, [pc, #20]	; (c0a0 <pdsWlDeleteAll+0x20>)
    c08c:	47a0      	blx	r4
	/* Clear Row Map Array */
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    c08e:	2218      	movs	r2, #24
    c090:	21ff      	movs	r1, #255	; 0xff
    c092:	4804      	ldr	r0, [pc, #16]	; (c0a4 <pdsWlDeleteAll+0x24>)
    c094:	47a0      	blx	r4
	/* Call NVM Erase All */
	pdsNvmEraseAll();
    c096:	4b04      	ldr	r3, [pc, #16]	; (c0a8 <pdsWlDeleteAll+0x28>)
    c098:	4798      	blx	r3
}
    c09a:	bd10      	pop	{r4, pc}
    c09c:	20000e9c 	.word	0x20000e9c
    c0a0:	00018219 	.word	0x00018219
    c0a4:	20000e84 	.word	0x20000e84
    c0a8:	0000bb59 	.word	0x0000bb59

0000c0ac <set_LED_data>:

int32_t set_LED_data(const uint8_t resrc,const uint8_t * data)
{
    int8_t status = 0;
    int8_t ledPin = -1;
    uint8_t value = *data;
    c0ac:	780b      	ldrb	r3, [r1, #0]

#if (AMBER_LED == 1)
    if(resrc == LED_AMBER)
    c0ae:	2802      	cmp	r0, #2
    c0b0:	d020      	beq.n	c0f4 <set_LED_data+0x48>
        ledPin = LED_0_PIN;
    }
    else
#endif
#if (GREEN_LED == 1)
    if(resrc == LED_GREEN)
    c0b2:	2803      	cmp	r0, #3
    c0b4:	d010      	beq.n	c0d8 <set_LED_data+0x2c>
            LED_Toggle(ledPin);
            break;
        }
        default:
        {
            status = UNSUPPORTED_RESOURCE;
    c0b6:	2001      	movs	r0, #1
    c0b8:	4240      	negs	r0, r0
            break;
        }
    }

    return status;
}
    c0ba:	4770      	bx	lr
            LED_Off(ledPin);
    c0bc:	2212      	movs	r2, #18
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c0be:	2301      	movs	r3, #1
    c0c0:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
    c0c2:	4a15      	ldr	r2, [pc, #84]	; (c118 <set_LED_data+0x6c>)
    c0c4:	6193      	str	r3, [r2, #24]
    int8_t status = 0;
    c0c6:	2000      	movs	r0, #0
    c0c8:	e7f7      	b.n	c0ba <set_LED_data+0xe>
            LED_Off(ledPin);
    c0ca:	2213      	movs	r2, #19
    c0cc:	e7f7      	b.n	c0be <set_LED_data+0x12>
            LED_On(ledPin);
    c0ce:	2212      	movs	r2, #18
    c0d0:	e013      	b.n	c0fa <set_LED_data+0x4e>
            status = UNSUPPORTED_RESOURCE;
    c0d2:	2001      	movs	r0, #1
    c0d4:	4240      	negs	r0, r0
    c0d6:	e7f0      	b.n	c0ba <set_LED_data+0xe>
    switch(value)
    c0d8:	2b01      	cmp	r3, #1
    c0da:	d0f8      	beq.n	c0ce <set_LED_data+0x22>
    c0dc:	2b00      	cmp	r3, #0
    c0de:	d0ed      	beq.n	c0bc <set_LED_data+0x10>
        ledPin = LED_1_PIN;
    c0e0:	2112      	movs	r1, #18
    switch(value)
    c0e2:	2b02      	cmp	r3, #2
    c0e4:	d1f5      	bne.n	c0d2 <set_LED_data+0x26>
            LED_Toggle(ledPin);
    c0e6:	b2c9      	uxtb	r1, r1
    c0e8:	4b0b      	ldr	r3, [pc, #44]	; (c118 <set_LED_data+0x6c>)
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c0ea:	2201      	movs	r2, #1
    c0ec:	408a      	lsls	r2, r1

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    c0ee:	61da      	str	r2, [r3, #28]
    int8_t status = 0;
    c0f0:	2000      	movs	r0, #0
    c0f2:	e7e2      	b.n	c0ba <set_LED_data+0xe>
            LED_On(ledPin);
    c0f4:	2213      	movs	r2, #19
    switch(value)
    c0f6:	2b01      	cmp	r3, #1
    c0f8:	d105      	bne.n	c106 <set_LED_data+0x5a>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c0fa:	2301      	movs	r3, #1
    c0fc:	4093      	lsls	r3, r2
		port_base->OUTCLR.reg = pin_mask;
    c0fe:	4a06      	ldr	r2, [pc, #24]	; (c118 <set_LED_data+0x6c>)
    c100:	6153      	str	r3, [r2, #20]
    int8_t status = 0;
    c102:	2000      	movs	r0, #0
    c104:	e7d9      	b.n	c0ba <set_LED_data+0xe>
    switch(value)
    c106:	2b00      	cmp	r3, #0
    c108:	d0df      	beq.n	c0ca <set_LED_data+0x1e>
        ledPin = LED_0_PIN;
    c10a:	2113      	movs	r1, #19
    switch(value)
    c10c:	2b02      	cmp	r3, #2
    c10e:	d0ea      	beq.n	c0e6 <set_LED_data+0x3a>
            status = UNSUPPORTED_RESOURCE;
    c110:	2001      	movs	r0, #1
    c112:	4240      	negs	r0, r0
    return status;
    c114:	e7d1      	b.n	c0ba <set_LED_data+0xe>
    c116:	46c0      	nop			; (mov r8, r8)
    c118:	40002800 	.word	0x40002800

0000c11c <resource_init>:
}
/*********************************************************************//**
 \brief      Function to initialize different resources
*************************************************************************/
void resource_init(void)
{
    c11c:	b510      	push	{r4, lr}
    temp_sensor_init();
    c11e:	4b01      	ldr	r3, [pc, #4]	; (c124 <resource_init+0x8>)
    c120:	4798      	blx	r3
    //LED_init();
}
    c122:	bd10      	pop	{r4, pc}
    c124:	0000c129 	.word	0x0000c129

0000c128 <temp_sensor_init>:
* NEGATIVE INPUT	-> GND
* SAMPLES			-> 4
* SAMPLE_LENGTH		-> 4
*/
void temp_sensor_init(void)
{
    c128:	b5f0      	push	{r4, r5, r6, r7, lr}
    c12a:	b08d      	sub	sp, #52	; 0x34
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
    c12c:	ac01      	add	r4, sp, #4
    c12e:	0020      	movs	r0, r4
    c130:	4b1b      	ldr	r3, [pc, #108]	; (c1a0 <temp_sensor_init+0x78>)
    c132:	4798      	blx	r3
	
	conf_adc.clock_source = GCLK_GENERATOR_2;
    c134:	2602      	movs	r6, #2
    c136:	7026      	strb	r6, [r4, #0]
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV2;
    c138:	2300      	movs	r3, #0
    c13a:	70a3      	strb	r3, [r4, #2]
	conf_adc.reference = ADC_REFCTRL_REFSEL_INTREF;
    c13c:	7063      	strb	r3, [r4, #1]
	conf_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    c13e:	3318      	adds	r3, #24
    c140:	7123      	strb	r3, [r4, #4]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    c142:	23c0      	movs	r3, #192	; 0xc0
    c144:	015b      	lsls	r3, r3, #5
    c146:	80e3      	strh	r3, [r4, #6]
	conf_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
    c148:	233f      	movs	r3, #63	; 0x3f
    c14a:	7563      	strb	r3, [r4, #21]
	
	adc_init(&adc_instance, ADC, &conf_adc);
    c14c:	4f15      	ldr	r7, [pc, #84]	; (c1a4 <temp_sensor_init+0x7c>)
    c14e:	4d16      	ldr	r5, [pc, #88]	; (c1a8 <temp_sensor_init+0x80>)
    c150:	0022      	movs	r2, r4
    c152:	0039      	movs	r1, r7
    c154:	0028      	movs	r0, r5
    c156:	4b15      	ldr	r3, [pc, #84]	; (c1ac <temp_sensor_init+0x84>)
    c158:	4798      	blx	r3
	
	ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
    c15a:	2322      	movs	r3, #34	; 0x22
    c15c:	733b      	strb	r3, [r7, #12]
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
    c15e:	4b14      	ldr	r3, [pc, #80]	; (c1b0 <temp_sensor_init+0x88>)
    c160:	69da      	ldr	r2, [r3, #28]
    c162:	4332      	orrs	r2, r6
    c164:	61da      	str	r2, [r3, #28]
			SUPC->VREF.reg &= ~SUPC_VREF_VREFOE;
    c166:	69da      	ldr	r2, [r3, #28]
    c168:	2104      	movs	r1, #4
    c16a:	438a      	bics	r2, r1
    c16c:	61da      	str	r2, [r3, #28]
	Adc *const adc_module = module_inst->hw;
    c16e:	682a      	ldr	r2, [r5, #0]
    c170:	8c13      	ldrh	r3, [r2, #32]
    c172:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    c174:	2b00      	cmp	r3, #0
    c176:	d1fb      	bne.n	c170 <temp_sensor_init+0x48>
    c178:	2180      	movs	r1, #128	; 0x80
    c17a:	03c9      	lsls	r1, r1, #15
    c17c:	4b0d      	ldr	r3, [pc, #52]	; (c1b4 <temp_sensor_init+0x8c>)
    c17e:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    c180:	2307      	movs	r3, #7
    c182:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    c184:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    c186:	7813      	ldrb	r3, [r2, #0]
    c188:	2102      	movs	r1, #2
    c18a:	430b      	orrs	r3, r1
    c18c:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    c18e:	4b06      	ldr	r3, [pc, #24]	; (c1a8 <temp_sensor_init+0x80>)
    c190:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    c192:	8c13      	ldrh	r3, [r2, #32]
    c194:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    c196:	2b00      	cmp	r3, #0
    c198:	d1fb      	bne.n	c192 <temp_sensor_init+0x6a>
	
	system_voltage_reference_disable(SYSTEM_VOLTAGE_REFERENCE_OUTPUT);
	
	adc_enable(&adc_instance);
	
}
    c19a:	b00d      	add	sp, #52	; 0x34
    c19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c19e:	46c0      	nop			; (mov r8, r8)
    c1a0:	00002aed 	.word	0x00002aed
    c1a4:	43000c00 	.word	0x43000c00
    c1a8:	20001918 	.word	0x20001918
    c1ac:	00002b31 	.word	0x00002b31
    c1b0:	40001400 	.word	0x40001400
    c1b4:	e000e100 	.word	0xe000e100

0000c1b8 <hwTimerExpiryCallback>:
    swtimerProcessOverflow();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    c1b8:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    c1ba:	4b06      	ldr	r3, [pc, #24]	; (c1d4 <hwTimerExpiryCallback+0x1c>)
    c1bc:	781b      	ldrb	r3, [r3, #0]
    c1be:	2b00      	cmp	r3, #0
    c1c0:	d100      	bne.n	c1c4 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    c1c2:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    c1c4:	2201      	movs	r2, #1
    c1c6:	4b04      	ldr	r3, [pc, #16]	; (c1d8 <hwTimerExpiryCallback+0x20>)
    c1c8:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    c1ca:	2001      	movs	r0, #1
    c1cc:	4b03      	ldr	r3, [pc, #12]	; (c1dc <hwTimerExpiryCallback+0x24>)
    c1ce:	4798      	blx	r3
}
    c1d0:	e7f7      	b.n	c1c2 <hwTimerExpiryCallback+0xa>
    c1d2:	46c0      	nop			; (mov r8, r8)
    c1d4:	20000fac 	.word	0x20000fac
    c1d8:	20001aca 	.word	0x20001aca
    c1dc:	0000cad9 	.word	0x0000cad9

0000c1e0 <hwTimerOverflowCallback>:
{
    c1e0:	b510      	push	{r4, lr}
    c1e2:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    c1e4:	4924      	ldr	r1, [pc, #144]	; (c278 <hwTimerOverflowCallback+0x98>)
    c1e6:	880a      	ldrh	r2, [r1, #0]
    c1e8:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    c1ea:	880b      	ldrh	r3, [r1, #0]
    c1ec:	3301      	adds	r3, #1
    c1ee:	b29b      	uxth	r3, r3
    c1f0:	800b      	strh	r3, [r1, #0]
    c1f2:	429a      	cmp	r2, r3
    c1f4:	d903      	bls.n	c1fe <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    c1f6:	4a21      	ldr	r2, [pc, #132]	; (c27c <hwTimerOverflowCallback+0x9c>)
    c1f8:	6813      	ldr	r3, [r2, #0]
    c1fa:	3301      	adds	r3, #1
    c1fc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c1fe:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c202:	425a      	negs	r2, r3
    c204:	4153      	adcs	r3, r2
    c206:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c208:	b672      	cpsid	i
  __ASM volatile ("dmb");
    c20a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c20e:	2200      	movs	r2, #0
    c210:	4b1b      	ldr	r3, [pc, #108]	; (c280 <hwTimerOverflowCallback+0xa0>)
    c212:	701a      	strb	r2, [r3, #0]
	return flags;
    c214:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    c216:	4b1b      	ldr	r3, [pc, #108]	; (c284 <hwTimerOverflowCallback+0xa4>)
    c218:	681b      	ldr	r3, [r3, #0]
    c21a:	2bff      	cmp	r3, #255	; 0xff
    c21c:	d00d      	beq.n	c23a <hwTimerOverflowCallback+0x5a>
    c21e:	0119      	lsls	r1, r3, #4
    c220:	4a19      	ldr	r2, [pc, #100]	; (c288 <hwTimerOverflowCallback+0xa8>)
    c222:	1852      	adds	r2, r2, r1
    c224:	7b52      	ldrb	r2, [r2, #13]
    c226:	2a00      	cmp	r2, #0
    c228:	d107      	bne.n	c23a <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    c22a:	4a17      	ldr	r2, [pc, #92]	; (c288 <hwTimerOverflowCallback+0xa8>)
    c22c:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    c22e:	4b12      	ldr	r3, [pc, #72]	; (c278 <hwTimerOverflowCallback+0x98>)
    c230:	881b      	ldrh	r3, [r3, #0]
    c232:	b29b      	uxth	r3, r3
    c234:	0c02      	lsrs	r2, r0, #16
    c236:	429a      	cmp	r2, r3
    c238:	d00a      	beq.n	c250 <hwTimerOverflowCallback+0x70>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    c23a:	23ff      	movs	r3, #255	; 0xff
    c23c:	4223      	tst	r3, r4
    c23e:	d005      	beq.n	c24c <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    c240:	2201      	movs	r2, #1
    c242:	4b0f      	ldr	r3, [pc, #60]	; (c280 <hwTimerOverflowCallback+0xa0>)
    c244:	701a      	strb	r2, [r3, #0]
    c246:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c24a:	b662      	cpsie	i
}
    c24c:	b002      	add	sp, #8
    c24e:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    c250:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    c252:	28ff      	cmp	r0, #255	; 0xff
    c254:	d909      	bls.n	c26a <hwTimerOverflowCallback+0x8a>
            {
                common_tc_delay(tmoLow16);
    c256:	4b0d      	ldr	r3, [pc, #52]	; (c28c <hwTimerOverflowCallback+0xac>)
    c258:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    c25a:	4b0a      	ldr	r3, [pc, #40]	; (c284 <hwTimerOverflowCallback+0xa4>)
    c25c:	681a      	ldr	r2, [r3, #0]
    c25e:	0112      	lsls	r2, r2, #4
    c260:	4b09      	ldr	r3, [pc, #36]	; (c288 <hwTimerOverflowCallback+0xa8>)
    c262:	189b      	adds	r3, r3, r2
    c264:	2201      	movs	r2, #1
    c266:	735a      	strb	r2, [r3, #13]
    c268:	e7e7      	b.n	c23a <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    c26a:	2201      	movs	r2, #1
    c26c:	4b08      	ldr	r3, [pc, #32]	; (c290 <hwTimerOverflowCallback+0xb0>)
    c26e:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    c270:	2001      	movs	r0, #1
    c272:	4b08      	ldr	r3, [pc, #32]	; (c294 <hwTimerOverflowCallback+0xb4>)
    c274:	4798      	blx	r3
    c276:	e7e0      	b.n	c23a <hwTimerOverflowCallback+0x5a>
    c278:	20001ac8 	.word	0x20001ac8
    c27c:	20001acc 	.word	0x20001acc
    c280:	2000000c 	.word	0x2000000c
    c284:	20000fa8 	.word	0x20000fa8
    c288:	20001938 	.word	0x20001938
    c28c:	0000ee1d 	.word	0x0000ee1d
    c290:	20001aca 	.word	0x20001aca
    c294:	0000cad9 	.word	0x0000cad9

0000c298 <loadHwTimer>:
{
    c298:	b570      	push	{r4, r5, r6, lr}
    c29a:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    c29c:	28ff      	cmp	r0, #255	; 0xff
    c29e:	d030      	beq.n	c302 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    c2a0:	4b19      	ldr	r3, [pc, #100]	; (c308 <loadHwTimer+0x70>)
    c2a2:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c2a4:	4b19      	ldr	r3, [pc, #100]	; (c30c <loadHwTimer+0x74>)
    c2a6:	881d      	ldrh	r5, [r3, #0]
    c2a8:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    c2aa:	4b19      	ldr	r3, [pc, #100]	; (c310 <loadHwTimer+0x78>)
    c2ac:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    c2ae:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    c2b0:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    c2b2:	4a18      	ldr	r2, [pc, #96]	; (c314 <loadHwTimer+0x7c>)
    c2b4:	589b      	ldr	r3, [r3, r2]
    c2b6:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    c2b8:	4b17      	ldr	r3, [pc, #92]	; (c318 <loadHwTimer+0x80>)
    c2ba:	4298      	cmp	r0, r3
    c2bc:	d81a      	bhi.n	c2f4 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    c2be:	0122      	lsls	r2, r4, #4
    c2c0:	4b14      	ldr	r3, [pc, #80]	; (c314 <loadHwTimer+0x7c>)
    c2c2:	189b      	adds	r3, r3, r2
    c2c4:	7b5b      	ldrb	r3, [r3, #13]
    c2c6:	2b00      	cmp	r3, #0
    c2c8:	d11d      	bne.n	c306 <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    c2ca:	28ff      	cmp	r0, #255	; 0xff
    c2cc:	d90b      	bls.n	c2e6 <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    c2ce:	4b13      	ldr	r3, [pc, #76]	; (c31c <loadHwTimer+0x84>)
    c2d0:	4298      	cmp	r0, r3
    c2d2:	d818      	bhi.n	c306 <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    c2d4:	b280      	uxth	r0, r0
    c2d6:	4b12      	ldr	r3, [pc, #72]	; (c320 <loadHwTimer+0x88>)
    c2d8:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    c2da:	0124      	lsls	r4, r4, #4
    c2dc:	4b0d      	ldr	r3, [pc, #52]	; (c314 <loadHwTimer+0x7c>)
    c2de:	191c      	adds	r4, r3, r4
    c2e0:	2301      	movs	r3, #1
    c2e2:	7363      	strb	r3, [r4, #13]
    c2e4:	e00f      	b.n	c306 <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    c2e6:	2201      	movs	r2, #1
    c2e8:	4b0e      	ldr	r3, [pc, #56]	; (c324 <loadHwTimer+0x8c>)
    c2ea:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    c2ec:	2001      	movs	r0, #1
    c2ee:	4b0e      	ldr	r3, [pc, #56]	; (c328 <loadHwTimer+0x90>)
    c2f0:	4798      	blx	r3
    c2f2:	e008      	b.n	c306 <loadHwTimer+0x6e>
            isTimerTriggered = true;
    c2f4:	2201      	movs	r2, #1
    c2f6:	4b0b      	ldr	r3, [pc, #44]	; (c324 <loadHwTimer+0x8c>)
    c2f8:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    c2fa:	2001      	movs	r0, #1
    c2fc:	4b0a      	ldr	r3, [pc, #40]	; (c328 <loadHwTimer+0x90>)
    c2fe:	4798      	blx	r3
    c300:	e001      	b.n	c306 <loadHwTimer+0x6e>
        common_tc_compare_stop();
    c302:	4b0a      	ldr	r3, [pc, #40]	; (c32c <loadHwTimer+0x94>)
    c304:	4798      	blx	r3
}
    c306:	bd70      	pop	{r4, r5, r6, pc}
    c308:	20001acc 	.word	0x20001acc
    c30c:	20001ac8 	.word	0x20001ac8
    c310:	0000ed75 	.word	0x0000ed75
    c314:	20001938 	.word	0x20001938
    c318:	7ffffffe 	.word	0x7ffffffe
    c31c:	0000ffff 	.word	0x0000ffff
    c320:	0000ee1d 	.word	0x0000ee1d
    c324:	20001aca 	.word	0x20001aca
    c328:	0000cad9 	.word	0x0000cad9
    c32c:	0000edc1 	.word	0x0000edc1

0000c330 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    c330:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    c332:	4b1d      	ldr	r3, [pc, #116]	; (c3a8 <swtimerInternalHandler+0x78>)
    c334:	781b      	ldrb	r3, [r3, #0]
    c336:	2b00      	cmp	r3, #0
    c338:	d027      	beq.n	c38a <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    c33a:	2200      	movs	r2, #0
    c33c:	4b1a      	ldr	r3, [pc, #104]	; (c3a8 <swtimerInternalHandler+0x78>)
    c33e:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    c340:	4b1a      	ldr	r3, [pc, #104]	; (c3ac <swtimerInternalHandler+0x7c>)
    c342:	781b      	ldrb	r3, [r3, #0]
    c344:	2b00      	cmp	r3, #0
    c346:	d020      	beq.n	c38a <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    c348:	4b19      	ldr	r3, [pc, #100]	; (c3b0 <swtimerInternalHandler+0x80>)
    c34a:	681b      	ldr	r3, [r3, #0]
    c34c:	2bff      	cmp	r3, #255	; 0xff
    c34e:	d01d      	beq.n	c38c <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    c350:	4b18      	ldr	r3, [pc, #96]	; (c3b4 <swtimerInternalHandler+0x84>)
    c352:	6818      	ldr	r0, [r3, #0]
    c354:	4918      	ldr	r1, [pc, #96]	; (c3b8 <swtimerInternalHandler+0x88>)
    c356:	680b      	ldr	r3, [r1, #0]
    c358:	011a      	lsls	r2, r3, #4
    c35a:	4b18      	ldr	r3, [pc, #96]	; (c3bc <swtimerInternalHandler+0x8c>)
    c35c:	189b      	adds	r3, r3, r2
    c35e:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    c360:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    c362:	4a16      	ldr	r2, [pc, #88]	; (c3bc <swtimerInternalHandler+0x8c>)
    c364:	4913      	ldr	r1, [pc, #76]	; (c3b4 <swtimerInternalHandler+0x84>)
    c366:	680b      	ldr	r3, [r1, #0]
    c368:	011b      	lsls	r3, r3, #4
    c36a:	18d3      	adds	r3, r2, r3
    c36c:	7b18      	ldrb	r0, [r3, #12]
    c36e:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    c370:	4b11      	ldr	r3, [pc, #68]	; (c3b8 <swtimerInternalHandler+0x88>)
    c372:	681b      	ldr	r3, [r3, #0]
    c374:	011b      	lsls	r3, r3, #4
    c376:	18d2      	adds	r2, r2, r3
    c378:	23ff      	movs	r3, #255	; 0xff
    c37a:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    c37c:	4a0b      	ldr	r2, [pc, #44]	; (c3ac <swtimerInternalHandler+0x7c>)
    c37e:	7813      	ldrb	r3, [r2, #0]
    c380:	3b01      	subs	r3, #1
    c382:	b2db      	uxtb	r3, r3
    c384:	7013      	strb	r3, [r2, #0]
    c386:	2b00      	cmp	r3, #0
    c388:	d10b      	bne.n	c3a2 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    c38a:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    c38c:	4b0a      	ldr	r3, [pc, #40]	; (c3b8 <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    c38e:	681b      	ldr	r3, [r3, #0]
    c390:	2bff      	cmp	r3, #255	; 0xff
    c392:	d1dd      	bne.n	c350 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    c394:	4b07      	ldr	r3, [pc, #28]	; (c3b4 <swtimerInternalHandler+0x84>)
    c396:	681b      	ldr	r3, [r3, #0]
    c398:	4a05      	ldr	r2, [pc, #20]	; (c3b0 <swtimerInternalHandler+0x80>)
    c39a:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    c39c:	4a06      	ldr	r2, [pc, #24]	; (c3b8 <swtimerInternalHandler+0x88>)
    c39e:	6013      	str	r3, [r2, #0]
    c3a0:	e7df      	b.n	c362 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    c3a2:	4b07      	ldr	r3, [pc, #28]	; (c3c0 <swtimerInternalHandler+0x90>)
    c3a4:	4798      	blx	r3
}
    c3a6:	e7f0      	b.n	c38a <swtimerInternalHandler+0x5a>
    c3a8:	20001aca 	.word	0x20001aca
    c3ac:	20000fac 	.word	0x20000fac
    c3b0:	20000fa0 	.word	0x20000fa0
    c3b4:	20000fa8 	.word	0x20000fa8
    c3b8:	20000fa4 	.word	0x20000fa4
    c3bc:	20001938 	.word	0x20001938
    c3c0:	0000c299 	.word	0x0000c299

0000c3c4 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    c3c4:	2300      	movs	r3, #0
    c3c6:	4a0d      	ldr	r2, [pc, #52]	; (c3fc <SwTimerReset+0x38>)
    c3c8:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    c3ca:	4a0d      	ldr	r2, [pc, #52]	; (c400 <SwTimerReset+0x3c>)
    c3cc:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    c3ce:	33ff      	adds	r3, #255	; 0xff
    c3d0:	4a0c      	ldr	r2, [pc, #48]	; (c404 <SwTimerReset+0x40>)
    c3d2:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    c3d4:	4a0c      	ldr	r2, [pc, #48]	; (c408 <SwTimerReset+0x44>)
    c3d6:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    c3d8:	4a0c      	ldr	r2, [pc, #48]	; (c40c <SwTimerReset+0x48>)
    c3da:	6013      	str	r3, [r2, #0]
    c3dc:	4b0c      	ldr	r3, [pc, #48]	; (c410 <SwTimerReset+0x4c>)
    c3de:	0018      	movs	r0, r3
    c3e0:	3091      	adds	r0, #145	; 0x91
    c3e2:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    c3e4:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    c3e6:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    c3e8:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    c3ea:	601a      	str	r2, [r3, #0]
    c3ec:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    c3ee:	4283      	cmp	r3, r0
    c3f0:	d1fa      	bne.n	c3e8 <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    c3f2:	2200      	movs	r2, #0
    c3f4:	4b07      	ldr	r3, [pc, #28]	; (c414 <SwTimerReset+0x50>)
    c3f6:	701a      	strb	r2, [r3, #0]
}
    c3f8:	4770      	bx	lr
    c3fa:	46c0      	nop			; (mov r8, r8)
    c3fc:	20000fac 	.word	0x20000fac
    c400:	20001aca 	.word	0x20001aca
    c404:	20000fa8 	.word	0x20000fa8
    c408:	20000fa0 	.word	0x20000fa0
    c40c:	20000fa4 	.word	0x20000fa4
    c410:	2000193c 	.word	0x2000193c
    c414:	20000f9c 	.word	0x20000f9c

0000c418 <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    c418:	b510      	push	{r4, lr}
    SwTimerReset();
    c41a:	4b08      	ldr	r3, [pc, #32]	; (c43c <SystemTimerInit+0x24>)
    c41c:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = sysTime = 0u;
    c41e:	2300      	movs	r3, #0
    c420:	4a07      	ldr	r2, [pc, #28]	; (c440 <SystemTimerInit+0x28>)
    c422:	8013      	strh	r3, [r2, #0]
    c424:	4a07      	ldr	r2, [pc, #28]	; (c444 <SystemTimerInit+0x2c>)
    c426:	6013      	str	r3, [r2, #0]

    common_tc_init();
    c428:	4b07      	ldr	r3, [pc, #28]	; (c448 <SystemTimerInit+0x30>)
    c42a:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    c42c:	4807      	ldr	r0, [pc, #28]	; (c44c <SystemTimerInit+0x34>)
    c42e:	4b08      	ldr	r3, [pc, #32]	; (c450 <SystemTimerInit+0x38>)
    c430:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    c432:	4808      	ldr	r0, [pc, #32]	; (c454 <SystemTimerInit+0x3c>)
    c434:	4b08      	ldr	r3, [pc, #32]	; (c458 <SystemTimerInit+0x40>)
    c436:	4798      	blx	r3
}
    c438:	bd10      	pop	{r4, pc}
    c43a:	46c0      	nop			; (mov r8, r8)
    c43c:	0000c3c5 	.word	0x0000c3c5
    c440:	20001ac8 	.word	0x20001ac8
    c444:	20001acc 	.word	0x20001acc
    c448:	0000ee89 	.word	0x0000ee89
    c44c:	0000c1e1 	.word	0x0000c1e1
    c450:	0000ef0d 	.word	0x0000ef0d
    c454:	0000c1b9 	.word	0x0000c1b9
    c458:	0000ef19 	.word	0x0000ef19

0000c45c <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    c45c:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    c45e:	4b05      	ldr	r3, [pc, #20]	; (c474 <SwTimerGetTime+0x18>)
    c460:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c462:	4b05      	ldr	r3, [pc, #20]	; (c478 <SwTimerGetTime+0x1c>)
    c464:	881d      	ldrh	r5, [r3, #0]
    c466:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    c468:	4b04      	ldr	r3, [pc, #16]	; (c47c <SwTimerGetTime+0x20>)
    c46a:	4798      	blx	r3
    c46c:	4328      	orrs	r0, r5
    return gettime();
}
    c46e:	0021      	movs	r1, r4
    c470:	bd70      	pop	{r4, r5, r6, pc}
    c472:	46c0      	nop			; (mov r8, r8)
    c474:	20001acc 	.word	0x20001acc
    c478:	20001ac8 	.word	0x20001ac8
    c47c:	0000ed75 	.word	0x0000ed75

0000c480 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    c480:	b510      	push	{r4, lr}
    c482:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    c484:	4b08      	ldr	r3, [pc, #32]	; (c4a8 <SwTimerCreate+0x28>)
    c486:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    c488:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    c48a:	2b18      	cmp	r3, #24
    c48c:	d900      	bls.n	c490 <SwTimerCreate+0x10>
    }

    return retVal;
}
    c48e:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    c490:	4b06      	ldr	r3, [pc, #24]	; (c4ac <SwTimerCreate+0x2c>)
    c492:	4798      	blx	r3
        *timerId = allocatedTimerId;
    c494:	4a04      	ldr	r2, [pc, #16]	; (c4a8 <SwTimerCreate+0x28>)
    c496:	7813      	ldrb	r3, [r2, #0]
    c498:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    c49a:	3301      	adds	r3, #1
    c49c:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    c49e:	4b04      	ldr	r3, [pc, #16]	; (c4b0 <SwTimerCreate+0x30>)
    c4a0:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    c4a2:	2008      	movs	r0, #8
    c4a4:	e7f3      	b.n	c48e <SwTimerCreate+0xe>
    c4a6:	46c0      	nop			; (mov r8, r8)
    c4a8:	20000f9c 	.word	0x20000f9c
    c4ac:	000069ed 	.word	0x000069ed
    c4b0:	000069f9 	.word	0x000069f9

0000c4b4 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    c4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4b6:	46d6      	mov	lr, sl
    c4b8:	464f      	mov	r7, r9
    c4ba:	4646      	mov	r6, r8
    c4bc:	b5c0      	push	{r6, r7, lr}
    c4be:	b084      	sub	sp, #16
    c4c0:	0007      	movs	r7, r0
    c4c2:	000d      	movs	r5, r1
    c4c4:	0016      	movs	r6, r2
    c4c6:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    c4c8:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    c4ca:	2f18      	cmp	r7, #24
    c4cc:	d809      	bhi.n	c4e2 <SwTimerStart+0x2e>
    c4ce:	2b00      	cmp	r3, #0
    c4d0:	d100      	bne.n	c4d4 <SwTimerStart+0x20>
    c4d2:	e08c      	b.n	c5ee <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    c4d4:	013a      	lsls	r2, r7, #4
    c4d6:	4b52      	ldr	r3, [pc, #328]	; (c620 <SwTimerStart+0x16c>)
    c4d8:	189b      	adds	r3, r3, r2
    c4da:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    c4dc:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    c4de:	2b00      	cmp	r3, #0
    c4e0:	d005      	beq.n	c4ee <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    c4e2:	b004      	add	sp, #16
    c4e4:	bc1c      	pop	{r2, r3, r4}
    c4e6:	4690      	mov	r8, r2
    c4e8:	4699      	mov	r9, r3
    c4ea:	46a2      	mov	sl, r4
    c4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    c4ee:	4b4d      	ldr	r3, [pc, #308]	; (c624 <SwTimerStart+0x170>)
    c4f0:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c4f2:	4b4d      	ldr	r3, [pc, #308]	; (c628 <SwTimerStart+0x174>)
    c4f4:	8818      	ldrh	r0, [r3, #0]
    c4f6:	0403      	lsls	r3, r0, #16
    c4f8:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    c4fa:	4b4c      	ldr	r3, [pc, #304]	; (c62c <SwTimerStart+0x178>)
    c4fc:	4798      	blx	r3
    c4fe:	4643      	mov	r3, r8
    c500:	4303      	orrs	r3, r0
    switch (timeoutType)
    c502:	2e00      	cmp	r6, #0
    c504:	d003      	beq.n	c50e <SwTimerStart+0x5a>
    c506:	2e01      	cmp	r6, #1
    c508:	d038      	beq.n	c57c <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    c50a:	200a      	movs	r0, #10
    c50c:	e7e9      	b.n	c4e2 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    c50e:	4948      	ldr	r1, [pc, #288]	; (c630 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    c510:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    c512:	002a      	movs	r2, r5
    c514:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    c516:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    c518:	428a      	cmp	r2, r1
    c51a:	d8e2      	bhi.n	c4e2 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c51c:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c520:	425a      	negs	r2, r3
    c522:	4153      	adcs	r3, r2
    c524:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    c526:	b672      	cpsid	i
    c528:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c52c:	2600      	movs	r6, #0
    c52e:	4b41      	ldr	r3, [pc, #260]	; (c634 <SwTimerStart+0x180>)
    c530:	701e      	strb	r6, [r3, #0]
	return flags;
    c532:	9b03      	ldr	r3, [sp, #12]
    c534:	4699      	mov	r9, r3
    swtimerInternalHandler();
    c536:	4b40      	ldr	r3, [pc, #256]	; (c638 <SwTimerStart+0x184>)
    c538:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    c53a:	4b39      	ldr	r3, [pc, #228]	; (c620 <SwTimerStart+0x16c>)
    c53c:	013a      	lsls	r2, r7, #4
    c53e:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    c540:	189b      	adds	r3, r3, r2
    c542:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    c544:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c546:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    c548:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    c54a:	4a3c      	ldr	r2, [pc, #240]	; (c63c <SwTimerStart+0x188>)
    c54c:	7813      	ldrb	r3, [r2, #0]
    c54e:	3301      	adds	r3, #1
    c550:	b2db      	uxtb	r3, r3
    c552:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    c554:	4b3a      	ldr	r3, [pc, #232]	; (c640 <SwTimerStart+0x18c>)
    c556:	681b      	ldr	r3, [r3, #0]
    c558:	469a      	mov	sl, r3
    c55a:	2bff      	cmp	r3, #255	; 0xff
    c55c:	d016      	beq.n	c58c <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    c55e:	466a      	mov	r2, sp
    c560:	7013      	strb	r3, [r2, #0]
    c562:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    c564:	4b35      	ldr	r3, [pc, #212]	; (c63c <SwTimerStart+0x188>)
    c566:	781b      	ldrb	r3, [r3, #0]
    c568:	2b00      	cmp	r3, #0
    c56a:	d042      	beq.n	c5f2 <SwTimerStart+0x13e>
    c56c:	9200      	str	r2, [sp, #0]
    c56e:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    c570:	492b      	ldr	r1, [pc, #172]	; (c620 <SwTimerStart+0x16c>)
    c572:	4688      	mov	r8, r1
    c574:	4833      	ldr	r0, [pc, #204]	; (c644 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    c576:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    c578:	4c30      	ldr	r4, [pc, #192]	; (c63c <SwTimerStart+0x188>)
    c57a:	e02a      	b.n	c5d2 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    c57c:	0028      	movs	r0, r5
    c57e:	38ff      	subs	r0, #255	; 0xff
    c580:	1ac3      	subs	r3, r0, r3
    c582:	4a2b      	ldr	r2, [pc, #172]	; (c630 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    c584:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    c586:	4293      	cmp	r3, r2
    c588:	d9c8      	bls.n	c51c <SwTimerStart+0x68>
    c58a:	e7aa      	b.n	c4e2 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    c58c:	4b2c      	ldr	r3, [pc, #176]	; (c640 <SwTimerStart+0x18c>)
    c58e:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    c590:	0038      	movs	r0, r7
    c592:	4b2d      	ldr	r3, [pc, #180]	; (c648 <SwTimerStart+0x194>)
    c594:	4798      	blx	r3
    c596:	e036      	b.n	c606 <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    c598:	4b21      	ldr	r3, [pc, #132]	; (c620 <SwTimerStart+0x16c>)
    c59a:	013c      	lsls	r4, r7, #4
    c59c:	191c      	adds	r4, r3, r4
    c59e:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    c5a0:	9901      	ldr	r1, [sp, #4]
    c5a2:	0109      	lsls	r1, r1, #4
    c5a4:	1859      	adds	r1, r3, r1
    c5a6:	2300      	movs	r3, #0
    c5a8:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    c5aa:	4592      	cmp	sl, r2
    c5ac:	d005      	beq.n	c5ba <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    c5ae:	9b00      	ldr	r3, [sp, #0]
    c5b0:	0118      	lsls	r0, r3, #4
    c5b2:	4b1b      	ldr	r3, [pc, #108]	; (c620 <SwTimerStart+0x16c>)
    c5b4:	1818      	adds	r0, r3, r0
    c5b6:	7307      	strb	r7, [r0, #12]
    c5b8:	e025      	b.n	c606 <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    c5ba:	4b21      	ldr	r3, [pc, #132]	; (c640 <SwTimerStart+0x18c>)
    c5bc:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    c5be:	0038      	movs	r0, r7
    c5c0:	4b21      	ldr	r3, [pc, #132]	; (c648 <SwTimerStart+0x194>)
    c5c2:	4798      	blx	r3
    c5c4:	e01f      	b.n	c606 <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    c5c6:	3301      	adds	r3, #1
    c5c8:	b2db      	uxtb	r3, r3
    c5ca:	7821      	ldrb	r1, [r4, #0]
    c5cc:	b2c9      	uxtb	r1, r1
    c5ce:	428b      	cmp	r3, r1
    c5d0:	d210      	bcs.n	c5f4 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    c5d2:	2aff      	cmp	r2, #255	; 0xff
    c5d4:	d0f7      	beq.n	c5c6 <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    c5d6:	9201      	str	r2, [sp, #4]
    c5d8:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    c5da:	4646      	mov	r6, r8
    c5dc:	5989      	ldr	r1, [r1, r6]
    c5de:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    c5e0:	4281      	cmp	r1, r0
    c5e2:	d8d9      	bhi.n	c598 <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    c5e4:	0111      	lsls	r1, r2, #4
    c5e6:	4461      	add	r1, ip
    c5e8:	9200      	str	r2, [sp, #0]
    c5ea:	7b0a      	ldrb	r2, [r1, #12]
    c5ec:	e7eb      	b.n	c5c6 <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    c5ee:	200a      	movs	r0, #10
    c5f0:	e777      	b.n	c4e2 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    c5f2:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    c5f4:	4b0a      	ldr	r3, [pc, #40]	; (c620 <SwTimerStart+0x16c>)
    c5f6:	9a00      	ldr	r2, [sp, #0]
    c5f8:	0110      	lsls	r0, r2, #4
    c5fa:	1818      	adds	r0, r3, r0
    c5fc:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    c5fe:	013f      	lsls	r7, r7, #4
    c600:	19df      	adds	r7, r3, r7
    c602:	23ff      	movs	r3, #255	; 0xff
    c604:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    c606:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    c608:	2008      	movs	r0, #8
    c60a:	464a      	mov	r2, r9
    c60c:	4213      	tst	r3, r2
    c60e:	d100      	bne.n	c612 <SwTimerStart+0x15e>
    c610:	e767      	b.n	c4e2 <SwTimerStart+0x2e>
		cpu_irq_enable();
    c612:	2201      	movs	r2, #1
    c614:	4b07      	ldr	r3, [pc, #28]	; (c634 <SwTimerStart+0x180>)
    c616:	701a      	strb	r2, [r3, #0]
    c618:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c61c:	b662      	cpsie	i
    c61e:	e760      	b.n	c4e2 <SwTimerStart+0x2e>
    c620:	20001938 	.word	0x20001938
    c624:	20001acc 	.word	0x20001acc
    c628:	20001ac8 	.word	0x20001ac8
    c62c:	0000ed75 	.word	0x0000ed75
    c630:	7fffff00 	.word	0x7fffff00
    c634:	2000000c 	.word	0x2000000c
    c638:	0000c331 	.word	0x0000c331
    c63c:	20000fac 	.word	0x20000fac
    c640:	20000fa8 	.word	0x20000fa8
    c644:	7ffffffe 	.word	0x7ffffffe
    c648:	0000c299 	.word	0x0000c299

0000c64c <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    c64c:	0103      	lsls	r3, r0, #4
    c64e:	4803      	ldr	r0, [pc, #12]	; (c65c <SwTimerIsRunning+0x10>)
    c650:	18c0      	adds	r0, r0, r3
    c652:	6840      	ldr	r0, [r0, #4]
    c654:	1e43      	subs	r3, r0, #1
    c656:	4198      	sbcs	r0, r3
    c658:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    c65a:	4770      	bx	lr
    c65c:	20001938 	.word	0x20001938

0000c660 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    c660:	b570      	push	{r4, r5, r6, lr}
    c662:	0005      	movs	r5, r0
    time |= ((uint64_t) sysTimeOvf) << 32;
    c664:	4b09      	ldr	r3, [pc, #36]	; (c68c <SwTimerReadValue+0x2c>)
    c666:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c668:	4b09      	ldr	r3, [pc, #36]	; (c690 <SwTimerReadValue+0x30>)
    c66a:	881e      	ldrh	r6, [r3, #0]
    c66c:	0436      	lsls	r6, r6, #16
    time |= (uint64_t) common_tc_read_count();
    c66e:	4b09      	ldr	r3, [pc, #36]	; (c694 <SwTimerReadValue+0x34>)
    c670:	4798      	blx	r3
    c672:	4306      	orrs	r6, r0
    uint32_t tv = 0u;
    uint64_t t1 = gettime();
    uint64_t t2 = (uint64_t)swTimers[timerId].absoluteExpiryTime;
    c674:	012d      	lsls	r5, r5, #4
    c676:	4b08      	ldr	r3, [pc, #32]	; (c698 <SwTimerReadValue+0x38>)
    c678:	58e8      	ldr	r0, [r5, r3]
    c67a:	0002      	movs	r2, r0

    if (t2 > t1)
    c67c:	2c00      	cmp	r4, #0
    c67e:	d102      	bne.n	c686 <SwTimerReadValue+0x26>
    {
        tv = (uint32_t)(t2 - t1);
    c680:	1b80      	subs	r0, r0, r6
    if (t2 > t1)
    c682:	42b2      	cmp	r2, r6
    c684:	d800      	bhi.n	c688 <SwTimerReadValue+0x28>
    uint32_t tv = 0u;
    c686:	2000      	movs	r0, #0
    }

    return tv;
}
    c688:	bd70      	pop	{r4, r5, r6, pc}
    c68a:	46c0      	nop			; (mov r8, r8)
    c68c:	20001acc 	.word	0x20001acc
    c690:	20001ac8 	.word	0x20001ac8
    c694:	0000ed75 	.word	0x0000ed75
    c698:	20001938 	.word	0x20001938

0000c69c <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    c69c:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    c69e:	4b05      	ldr	r3, [pc, #20]	; (c6b4 <SwTimerNextExpiryDuration+0x18>)
    c6a0:	6818      	ldr	r0, [r3, #0]
    c6a2:	28ff      	cmp	r0, #255	; 0xff
    c6a4:	d102      	bne.n	c6ac <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    c6a6:	2001      	movs	r0, #1
    c6a8:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    c6aa:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    c6ac:	b2c0      	uxtb	r0, r0
    c6ae:	4b02      	ldr	r3, [pc, #8]	; (c6b8 <SwTimerNextExpiryDuration+0x1c>)
    c6b0:	4798      	blx	r3
    c6b2:	e7fa      	b.n	c6aa <SwTimerNextExpiryDuration+0xe>
    c6b4:	20000fa8 	.word	0x20000fa8
    c6b8:	0000c661 	.word	0x0000c661

0000c6bc <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    c6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6be:	46de      	mov	lr, fp
    c6c0:	4657      	mov	r7, sl
    c6c2:	464e      	mov	r6, r9
    c6c4:	4645      	mov	r5, r8
    c6c6:	b5e0      	push	{r5, r6, r7, lr}
    c6c8:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    c6ca:	4b2f      	ldr	r3, [pc, #188]	; (c788 <SwTimersExecute+0xcc>)
    c6cc:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c6ce:	4b2f      	ldr	r3, [pc, #188]	; (c78c <SwTimersExecute+0xd0>)
    c6d0:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    c6d2:	4b2f      	ldr	r3, [pc, #188]	; (c790 <SwTimersExecute+0xd4>)
    c6d4:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c6d6:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c6da:	4253      	negs	r3, r2
    c6dc:	4153      	adcs	r3, r2
    c6de:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    c6e0:	b672      	cpsid	i
    c6e2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c6e6:	2200      	movs	r2, #0
    c6e8:	4b2a      	ldr	r3, [pc, #168]	; (c794 <SwTimersExecute+0xd8>)
    c6ea:	701a      	strb	r2, [r3, #0]
	return flags;
    c6ec:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    c6ee:	4b2a      	ldr	r3, [pc, #168]	; (c798 <SwTimersExecute+0xdc>)
    c6f0:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    c6f2:	23ff      	movs	r3, #255	; 0xff
    c6f4:	4223      	tst	r3, r4
    c6f6:	d005      	beq.n	c704 <SwTimersExecute+0x48>
		cpu_irq_enable();
    c6f8:	2201      	movs	r2, #1
    c6fa:	4b26      	ldr	r3, [pc, #152]	; (c794 <SwTimersExecute+0xd8>)
    c6fc:	701a      	strb	r2, [r3, #0]
    c6fe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c702:	b662      	cpsie	i
	cpu_irq_disable();
    c704:	4b23      	ldr	r3, [pc, #140]	; (c794 <SwTimersExecute+0xd8>)
    c706:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    c708:	4c24      	ldr	r4, [pc, #144]	; (c79c <SwTimersExecute+0xe0>)
    c70a:	4b25      	ldr	r3, [pc, #148]	; (c7a0 <SwTimersExecute+0xe4>)
    c70c:	4699      	mov	r9, r3
    c70e:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    c710:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    c712:	4b24      	ldr	r3, [pc, #144]	; (c7a4 <SwTimersExecute+0xe8>)
    c714:	4698      	mov	r8, r3
		cpu_irq_enable();
    c716:	4b1f      	ldr	r3, [pc, #124]	; (c794 <SwTimersExecute+0xd8>)
    c718:	469c      	mov	ip, r3
    c71a:	e004      	b.n	c726 <SwTimersExecute+0x6a>
    c71c:	4643      	mov	r3, r8
    c71e:	6018      	str	r0, [r3, #0]
    c720:	e01e      	b.n	c760 <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    c722:	2e00      	cmp	r6, #0
    c724:	d125      	bne.n	c772 <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    c726:	4b1d      	ldr	r3, [pc, #116]	; (c79c <SwTimersExecute+0xe0>)
    c728:	681b      	ldr	r3, [r3, #0]
    c72a:	2bff      	cmp	r3, #255	; 0xff
    c72c:	d024      	beq.n	c778 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c72e:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c732:	424b      	negs	r3, r1
    c734:	414b      	adcs	r3, r1
    c736:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c738:	b672      	cpsid	i
    c73a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c73e:	4653      	mov	r3, sl
    c740:	701a      	strb	r2, [r3, #0]
	return flags;
    c742:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    c744:	6823      	ldr	r3, [r4, #0]
    c746:	011b      	lsls	r3, r3, #4
    c748:	444b      	add	r3, r9
    c74a:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    c74c:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    c74e:	689d      	ldr	r5, [r3, #8]
    c750:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    c752:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    c754:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    c756:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    c758:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    c75a:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    c75c:	29ff      	cmp	r1, #255	; 0xff
    c75e:	d0dd      	beq.n	c71c <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    c760:	4238      	tst	r0, r7
    c762:	d0de      	beq.n	c722 <SwTimersExecute+0x66>
		cpu_irq_enable();
    c764:	2301      	movs	r3, #1
    c766:	4661      	mov	r1, ip
    c768:	700b      	strb	r3, [r1, #0]
    c76a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c76e:	b662      	cpsie	i
    c770:	e7d7      	b.n	c722 <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    c772:	4658      	mov	r0, fp
    c774:	47b0      	blx	r6
    c776:	e7ca      	b.n	c70e <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    c778:	b003      	add	sp, #12
    c77a:	bc3c      	pop	{r2, r3, r4, r5}
    c77c:	4690      	mov	r8, r2
    c77e:	4699      	mov	r9, r3
    c780:	46a2      	mov	sl, r4
    c782:	46ab      	mov	fp, r5
    c784:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c786:	46c0      	nop			; (mov r8, r8)
    c788:	20001acc 	.word	0x20001acc
    c78c:	20001ac8 	.word	0x20001ac8
    c790:	0000ed75 	.word	0x0000ed75
    c794:	2000000c 	.word	0x2000000c
    c798:	0000c331 	.word	0x0000c331
    c79c:	20000fa0 	.word	0x20000fa0
    c7a0:	20001938 	.word	0x20001938
    c7a4:	20000fa4 	.word	0x20000fa4

0000c7a8 <TIMER_TaskHandler>:
{
    c7a8:	b510      	push	{r4, lr}
    SwTimersExecute();
    c7aa:	4b02      	ldr	r3, [pc, #8]	; (c7b4 <TIMER_TaskHandler+0xc>)
    c7ac:	4798      	blx	r3
}
    c7ae:	2000      	movs	r0, #0
    c7b0:	bd10      	pop	{r4, pc}
    c7b2:	46c0      	nop			; (mov r8, r8)
    c7b4:	0000c6bd 	.word	0x0000c6bd

0000c7b8 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    c7b8:	b570      	push	{r4, r5, r6, lr}
    c7ba:	b082      	sub	sp, #8
    c7bc:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    c7be:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    c7c0:	2c18      	cmp	r4, #24
    c7c2:	d901      	bls.n	c7c8 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    c7c4:	b002      	add	sp, #8
    c7c6:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c7c8:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c7cc:	425a      	negs	r2, r3
    c7ce:	4153      	adcs	r3, r2
    c7d0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c7d2:	b672      	cpsid	i
    c7d4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c7d8:	2200      	movs	r2, #0
    c7da:	4b47      	ldr	r3, [pc, #284]	; (c8f8 <SwTimerStop+0x140>)
    c7dc:	701a      	strb	r2, [r3, #0]
	return flags;
    c7de:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    c7e0:	4b46      	ldr	r3, [pc, #280]	; (c8fc <SwTimerStop+0x144>)
    c7e2:	4798      	blx	r3
    if (runningTimers > 0)
    c7e4:	4b46      	ldr	r3, [pc, #280]	; (c900 <SwTimerStop+0x148>)
    c7e6:	781b      	ldrb	r3, [r3, #0]
    c7e8:	2b00      	cmp	r3, #0
    c7ea:	d040      	beq.n	c86e <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    c7ec:	4b44      	ldr	r3, [pc, #272]	; (c900 <SwTimerStop+0x148>)
    c7ee:	781b      	ldrb	r3, [r3, #0]
    c7f0:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    c7f2:	4a44      	ldr	r2, [pc, #272]	; (c904 <SwTimerStop+0x14c>)
    c7f4:	6816      	ldr	r6, [r2, #0]
    c7f6:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    c7f8:	2b00      	cmp	r3, #0
    c7fa:	d038      	beq.n	c86e <SwTimerStop+0xb6>
            if (timerId == currIndex)
    c7fc:	428c      	cmp	r4, r1
    c7fe:	d00b      	beq.n	c818 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    c800:	4841      	ldr	r0, [pc, #260]	; (c908 <SwTimerStop+0x150>)
    c802:	010a      	lsls	r2, r1, #4
    c804:	1882      	adds	r2, r0, r2
    c806:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    c808:	3b01      	subs	r3, #1
    c80a:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    c80c:	2b00      	cmp	r3, #0
    c80e:	d02e      	beq.n	c86e <SwTimerStop+0xb6>
            if (timerId == currIndex)
    c810:	4294      	cmp	r4, r2
    c812:	d001      	beq.n	c818 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    c814:	0011      	movs	r1, r2
    c816:	e7f4      	b.n	c802 <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    c818:	42a6      	cmp	r6, r4
    c81a:	d01d      	beq.n	c858 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    c81c:	4b3a      	ldr	r3, [pc, #232]	; (c908 <SwTimerStop+0x150>)
    c81e:	0122      	lsls	r2, r4, #4
    c820:	189a      	adds	r2, r3, r2
    c822:	7b12      	ldrb	r2, [r2, #12]
    c824:	0109      	lsls	r1, r1, #4
    c826:	1859      	adds	r1, r3, r1
    c828:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    c82a:	0122      	lsls	r2, r4, #4
    c82c:	4b36      	ldr	r3, [pc, #216]	; (c908 <SwTimerStop+0x150>)
    c82e:	189b      	adds	r3, r3, r2
    c830:	22ff      	movs	r2, #255	; 0xff
    c832:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    c834:	4a32      	ldr	r2, [pc, #200]	; (c900 <SwTimerStop+0x148>)
    c836:	7813      	ldrb	r3, [r2, #0]
    c838:	3b01      	subs	r3, #1
    c83a:	b2db      	uxtb	r3, r3
    c83c:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    c83e:	0124      	lsls	r4, r4, #4
    c840:	4b31      	ldr	r3, [pc, #196]	; (c908 <SwTimerStop+0x150>)
    c842:	191c      	adds	r4, r3, r4
    c844:	2300      	movs	r3, #0
    c846:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    c848:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    c84a:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    c84c:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    c84e:	2008      	movs	r0, #8
    c850:	422b      	tst	r3, r5
    c852:	d0b7      	beq.n	c7c4 <SwTimerStop+0xc>
    c854:	2301      	movs	r3, #1
    c856:	e040      	b.n	c8da <SwTimerStop+0x122>
                    common_tc_compare_stop();
    c858:	4b2c      	ldr	r3, [pc, #176]	; (c90c <SwTimerStop+0x154>)
    c85a:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    c85c:	0122      	lsls	r2, r4, #4
    c85e:	4b2a      	ldr	r3, [pc, #168]	; (c908 <SwTimerStop+0x150>)
    c860:	189b      	adds	r3, r3, r2
    c862:	7b18      	ldrb	r0, [r3, #12]
    c864:	4b27      	ldr	r3, [pc, #156]	; (c904 <SwTimerStop+0x14c>)
    c866:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    c868:	4b29      	ldr	r3, [pc, #164]	; (c910 <SwTimerStop+0x158>)
    c86a:	4798      	blx	r3
    c86c:	e7dd      	b.n	c82a <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    c86e:	4b29      	ldr	r3, [pc, #164]	; (c914 <SwTimerStop+0x15c>)
    c870:	6818      	ldr	r0, [r3, #0]
    c872:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    c874:	2aff      	cmp	r2, #255	; 0xff
    c876:	d02c      	beq.n	c8d2 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    c878:	4294      	cmp	r4, r2
    c87a:	d009      	beq.n	c890 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    c87c:	4922      	ldr	r1, [pc, #136]	; (c908 <SwTimerStop+0x150>)
    c87e:	0113      	lsls	r3, r2, #4
    c880:	18cb      	adds	r3, r1, r3
    c882:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    c884:	2bff      	cmp	r3, #255	; 0xff
    c886:	d024      	beq.n	c8d2 <SwTimerStop+0x11a>
            if (timerId == currIndex)
    c888:	429c      	cmp	r4, r3
    c88a:	d001      	beq.n	c890 <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    c88c:	001a      	movs	r2, r3
    c88e:	e7f6      	b.n	c87e <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    c890:	42a0      	cmp	r0, r4
    c892:	d00d      	beq.n	c8b0 <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    c894:	4b1c      	ldr	r3, [pc, #112]	; (c908 <SwTimerStop+0x150>)
    c896:	0121      	lsls	r1, r4, #4
    c898:	1859      	adds	r1, r3, r1
    c89a:	7b09      	ldrb	r1, [r1, #12]
    c89c:	0110      	lsls	r0, r2, #4
    c89e:	181b      	adds	r3, r3, r0
    c8a0:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    c8a2:	4b1d      	ldr	r3, [pc, #116]	; (c918 <SwTimerStop+0x160>)
    c8a4:	681b      	ldr	r3, [r3, #0]
    c8a6:	429c      	cmp	r4, r3
    c8a8:	d1c9      	bne.n	c83e <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    c8aa:	4b1b      	ldr	r3, [pc, #108]	; (c918 <SwTimerStop+0x160>)
    c8ac:	601a      	str	r2, [r3, #0]
    c8ae:	e7c6      	b.n	c83e <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    c8b0:	4b19      	ldr	r3, [pc, #100]	; (c918 <SwTimerStop+0x160>)
    c8b2:	681b      	ldr	r3, [r3, #0]
    c8b4:	4298      	cmp	r0, r3
    c8b6:	d006      	beq.n	c8c6 <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    c8b8:	0100      	lsls	r0, r0, #4
    c8ba:	4b13      	ldr	r3, [pc, #76]	; (c908 <SwTimerStop+0x150>)
    c8bc:	1818      	adds	r0, r3, r0
    c8be:	7b02      	ldrb	r2, [r0, #12]
    c8c0:	4b14      	ldr	r3, [pc, #80]	; (c914 <SwTimerStop+0x15c>)
    c8c2:	601a      	str	r2, [r3, #0]
    c8c4:	e7bb      	b.n	c83e <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    c8c6:	23ff      	movs	r3, #255	; 0xff
    c8c8:	4a13      	ldr	r2, [pc, #76]	; (c918 <SwTimerStop+0x160>)
    c8ca:	6013      	str	r3, [r2, #0]
    c8cc:	4a11      	ldr	r2, [pc, #68]	; (c914 <SwTimerStop+0x15c>)
    c8ce:	6013      	str	r3, [r2, #0]
    c8d0:	e7b5      	b.n	c83e <SwTimerStop+0x86>
    c8d2:	23ff      	movs	r3, #255	; 0xff
    c8d4:	422b      	tst	r3, r5
    c8d6:	d00a      	beq.n	c8ee <SwTimerStop+0x136>
    c8d8:	2300      	movs	r3, #0
		cpu_irq_enable();
    c8da:	2101      	movs	r1, #1
    c8dc:	4a06      	ldr	r2, [pc, #24]	; (c8f8 <SwTimerStop+0x140>)
    c8de:	7011      	strb	r1, [r2, #0]
    c8e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c8e4:	b662      	cpsie	i
    if (timerStopReqStatus)
    c8e6:	2b00      	cmp	r3, #0
    c8e8:	d103      	bne.n	c8f2 <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    c8ea:	2015      	movs	r0, #21
    c8ec:	e76a      	b.n	c7c4 <SwTimerStop+0xc>
    c8ee:	2015      	movs	r0, #21
    c8f0:	e768      	b.n	c7c4 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    c8f2:	2008      	movs	r0, #8
    c8f4:	e766      	b.n	c7c4 <SwTimerStop+0xc>
    c8f6:	46c0      	nop			; (mov r8, r8)
    c8f8:	2000000c 	.word	0x2000000c
    c8fc:	0000c331 	.word	0x0000c331
    c900:	20000fac 	.word	0x20000fac
    c904:	20000fa8 	.word	0x20000fa8
    c908:	20001938 	.word	0x20001938
    c90c:	0000edc1 	.word	0x0000edc1
    c910:	0000c299 	.word	0x0000c299
    c914:	20000fa0 	.word	0x20000fa0
    c918:	20000fa4 	.word	0x20000fa4

0000c91c <SwTimerRunRemainingTime>:
{
    c91c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c91e:	b083      	sub	sp, #12
    c920:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    c922:	4b0b      	ldr	r3, [pc, #44]	; (c950 <SwTimerRunRemainingTime+0x34>)
    c924:	681c      	ldr	r4, [r3, #0]
    c926:	0122      	lsls	r2, r4, #4
    c928:	4b0a      	ldr	r3, [pc, #40]	; (c954 <SwTimerRunRemainingTime+0x38>)
    c92a:	189b      	adds	r3, r3, r2
    c92c:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    c92e:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    c930:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    c932:	0020      	movs	r0, r4
    c934:	4b08      	ldr	r3, [pc, #32]	; (c958 <SwTimerRunRemainingTime+0x3c>)
    c936:	4798      	blx	r3
    c938:	2808      	cmp	r0, #8
    c93a:	d001      	beq.n	c940 <SwTimerRunRemainingTime+0x24>
}
    c93c:	b003      	add	sp, #12
    c93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    c940:	9700      	str	r7, [sp, #0]
    c942:	0033      	movs	r3, r6
    c944:	2200      	movs	r2, #0
    c946:	0029      	movs	r1, r5
    c948:	0020      	movs	r0, r4
    c94a:	4c04      	ldr	r4, [pc, #16]	; (c95c <SwTimerRunRemainingTime+0x40>)
    c94c:	47a0      	blx	r4
}
    c94e:	e7f5      	b.n	c93c <SwTimerRunRemainingTime+0x20>
    c950:	20000fa8 	.word	0x20000fa8
    c954:	20001938 	.word	0x20001938
    c958:	0000c7b9 	.word	0x0000c7b9
    c95c:	0000c4b5 	.word	0x0000c4b5

0000c960 <SystemTimerSuspend>:

/**************************************************************************//**
\brief Suspends the software timer
******************************************************************************/
void SystemTimerSuspend(void)
{
    c960:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    c962:	4b07      	ldr	r3, [pc, #28]	; (c980 <SystemTimerSuspend+0x20>)
    c964:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c966:	4b07      	ldr	r3, [pc, #28]	; (c984 <SystemTimerSuspend+0x24>)
    c968:	881d      	ldrh	r5, [r3, #0]
    c96a:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    c96c:	4b06      	ldr	r3, [pc, #24]	; (c988 <SystemTimerSuspend+0x28>)
    c96e:	4798      	blx	r3
    sysTimeLastKnown = gettime();
    c970:	4b06      	ldr	r3, [pc, #24]	; (c98c <SystemTimerSuspend+0x2c>)
    time |= (uint64_t) common_tc_read_count();
    c972:	4328      	orrs	r0, r5
    c974:	6018      	str	r0, [r3, #0]
    c976:	605c      	str	r4, [r3, #4]
    common_tc_stop();
    c978:	4b05      	ldr	r3, [pc, #20]	; (c990 <SystemTimerSuspend+0x30>)
    c97a:	4798      	blx	r3
}
    c97c:	bd70      	pop	{r4, r5, r6, pc}
    c97e:	46c0      	nop			; (mov r8, r8)
    c980:	20001acc 	.word	0x20001acc
    c984:	20001ac8 	.word	0x20001ac8
    c988:	0000ed75 	.word	0x0000ed75
    c98c:	20000fb0 	.word	0x20000fb0
    c990:	0000ee01 	.word	0x0000ee01

0000c994 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    c994:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    c996:	4b22      	ldr	r3, [pc, #136]	; (ca20 <SystemTimerSync+0x8c>)
    c998:	681c      	ldr	r4, [r3, #0]
    c99a:	685d      	ldr	r5, [r3, #4]
    c99c:	1900      	adds	r0, r0, r4
    c99e:	4169      	adcs	r1, r5
    c9a0:	6018      	str	r0, [r3, #0]
    c9a2:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    c9a4:	4b1f      	ldr	r3, [pc, #124]	; (ca24 <SystemTimerSync+0x90>)
    c9a6:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    c9a8:	0c02      	lsrs	r2, r0, #16
    c9aa:	4b1f      	ldr	r3, [pc, #124]	; (ca28 <SystemTimerSync+0x94>)
    c9ac:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    c9ae:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    c9b0:	4b1e      	ldr	r3, [pc, #120]	; (ca2c <SystemTimerSync+0x98>)
    c9b2:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    c9b4:	4a1e      	ldr	r2, [pc, #120]	; (ca30 <SystemTimerSync+0x9c>)
    c9b6:	7812      	ldrb	r2, [r2, #0]
    c9b8:	2a00      	cmp	r2, #0
    c9ba:	d012      	beq.n	c9e2 <SystemTimerSync+0x4e>
    c9bc:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    c9be:	4c1d      	ldr	r4, [pc, #116]	; (ca34 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    c9c0:	4d1b      	ldr	r5, [pc, #108]	; (ca30 <SystemTimerSync+0x9c>)
    c9c2:	e005      	b.n	c9d0 <SystemTimerSync+0x3c>
    c9c4:	3201      	adds	r2, #1
    c9c6:	b2d2      	uxtb	r2, r2
    c9c8:	7829      	ldrb	r1, [r5, #0]
    c9ca:	b2c9      	uxtb	r1, r1
    c9cc:	4291      	cmp	r1, r2
    c9ce:	d908      	bls.n	c9e2 <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    c9d0:	2bff      	cmp	r3, #255	; 0xff
    c9d2:	d0f7      	beq.n	c9c4 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    c9d4:	011b      	lsls	r3, r3, #4
    c9d6:	5919      	ldr	r1, [r3, r4]
    c9d8:	1a09      	subs	r1, r1, r0
    c9da:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    c9dc:	18e3      	adds	r3, r4, r3
    c9de:	7b1b      	ldrb	r3, [r3, #12]
    c9e0:	e7f0      	b.n	c9c4 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    c9e2:	4b15      	ldr	r3, [pc, #84]	; (ca38 <SystemTimerSync+0xa4>)
    c9e4:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    c9e6:	4815      	ldr	r0, [pc, #84]	; (ca3c <SystemTimerSync+0xa8>)
    c9e8:	4b15      	ldr	r3, [pc, #84]	; (ca40 <SystemTimerSync+0xac>)
    c9ea:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    c9ec:	4815      	ldr	r0, [pc, #84]	; (ca44 <SystemTimerSync+0xb0>)
    c9ee:	4b16      	ldr	r3, [pc, #88]	; (ca48 <SystemTimerSync+0xb4>)
    c9f0:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    c9f2:	4b0f      	ldr	r3, [pc, #60]	; (ca30 <SystemTimerSync+0x9c>)
    c9f4:	781b      	ldrb	r3, [r3, #0]
    c9f6:	2b00      	cmp	r3, #0
    c9f8:	d009      	beq.n	ca0e <SystemTimerSync+0x7a>
    c9fa:	4b0c      	ldr	r3, [pc, #48]	; (ca2c <SystemTimerSync+0x98>)
    c9fc:	681b      	ldr	r3, [r3, #0]
    c9fe:	2bff      	cmp	r3, #255	; 0xff
    ca00:	d005      	beq.n	ca0e <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    ca02:	4b12      	ldr	r3, [pc, #72]	; (ca4c <SystemTimerSync+0xb8>)
    ca04:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    ca06:	28fe      	cmp	r0, #254	; 0xfe
    ca08:	d902      	bls.n	ca10 <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    ca0a:	4b11      	ldr	r3, [pc, #68]	; (ca50 <SystemTimerSync+0xbc>)
    ca0c:	4798      	blx	r3
        }
    }
}
    ca0e:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    ca10:	2201      	movs	r2, #1
    ca12:	4b10      	ldr	r3, [pc, #64]	; (ca54 <SystemTimerSync+0xc0>)
    ca14:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    ca16:	2001      	movs	r0, #1
    ca18:	4b0f      	ldr	r3, [pc, #60]	; (ca58 <SystemTimerSync+0xc4>)
    ca1a:	4798      	blx	r3
    ca1c:	e7f7      	b.n	ca0e <SystemTimerSync+0x7a>
    ca1e:	46c0      	nop			; (mov r8, r8)
    ca20:	20000fb0 	.word	0x20000fb0
    ca24:	20001acc 	.word	0x20001acc
    ca28:	20001ac8 	.word	0x20001ac8
    ca2c:	20000fa8 	.word	0x20000fa8
    ca30:	20000fac 	.word	0x20000fac
    ca34:	20001938 	.word	0x20001938
    ca38:	0000ee89 	.word	0x0000ee89
    ca3c:	0000c1e1 	.word	0x0000c1e1
    ca40:	0000ef0d 	.word	0x0000ef0d
    ca44:	0000c1b9 	.word	0x0000c1b9
    ca48:	0000ef19 	.word	0x0000ef19
    ca4c:	0000c69d 	.word	0x0000c69d
    ca50:	0000c91d 	.word	0x0000c91d
    ca54:	20001aca 	.word	0x20001aca
    ca58:	0000cad9 	.word	0x0000cad9

0000ca5c <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    ca5c:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    ca5e:	2010      	movs	r0, #16
    ca60:	4b01      	ldr	r3, [pc, #4]	; (ca68 <Stack_Init+0xc>)
    ca62:	4798      	blx	r3
}
    ca64:	bd10      	pop	{r4, pc}
    ca66:	46c0      	nop			; (mov r8, r8)
    ca68:	0000cad9 	.word	0x0000cad9

0000ca6c <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    ca6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    ca6e:	4b16      	ldr	r3, [pc, #88]	; (cac8 <SYSTEM_RunTasks+0x5c>)
    ca70:	881b      	ldrh	r3, [r3, #0]
    ca72:	b29b      	uxth	r3, r3
    ca74:	2b1f      	cmp	r3, #31
    ca76:	d922      	bls.n	cabe <SYSTEM_RunTasks+0x52>
    ca78:	e7fe      	b.n	ca78 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    ca7a:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    ca7c:	4b13      	ldr	r3, [pc, #76]	; (cacc <SYSTEM_RunTasks+0x60>)
    ca7e:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    ca80:	4911      	ldr	r1, [pc, #68]	; (cac8 <SYSTEM_RunTasks+0x5c>)
    ca82:	880b      	ldrh	r3, [r1, #0]
    ca84:	2201      	movs	r2, #1
    ca86:	40aa      	lsls	r2, r5
    ca88:	4393      	bics	r3, r2
    ca8a:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    ca8c:	4b10      	ldr	r3, [pc, #64]	; (cad0 <SYSTEM_RunTasks+0x64>)
    ca8e:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    ca90:	00ad      	lsls	r5, r5, #2
    ca92:	4b10      	ldr	r3, [pc, #64]	; (cad4 <SYSTEM_RunTasks+0x68>)
    ca94:	58eb      	ldr	r3, [r5, r3]
    ca96:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    ca98:	2101      	movs	r1, #1
        while (sysTaskFlag)
    ca9a:	883b      	ldrh	r3, [r7, #0]
    ca9c:	b29b      	uxth	r3, r3
    ca9e:	2b00      	cmp	r3, #0
    caa0:	d011      	beq.n	cac6 <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    caa2:	8823      	ldrh	r3, [r4, #0]
    caa4:	420b      	tst	r3, r1
    caa6:	d1e8      	bne.n	ca7a <SYSTEM_RunTasks+0xe>
    caa8:	2201      	movs	r2, #1
    caaa:	8833      	ldrh	r3, [r6, #0]
    caac:	b29b      	uxth	r3, r3
    caae:	0015      	movs	r5, r2
    cab0:	4113      	asrs	r3, r2
    cab2:	4219      	tst	r1, r3
    cab4:	d1e2      	bne.n	ca7c <SYSTEM_RunTasks+0x10>
    cab6:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    cab8:	2a05      	cmp	r2, #5
    caba:	d1f6      	bne.n	caaa <SYSTEM_RunTasks+0x3e>
    cabc:	e7ed      	b.n	ca9a <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    cabe:	4f02      	ldr	r7, [pc, #8]	; (cac8 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    cac0:	003c      	movs	r4, r7
    cac2:	003e      	movs	r6, r7
    cac4:	e7e8      	b.n	ca98 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    cac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cac8:	20000fb8 	.word	0x20000fb8
    cacc:	000069ed 	.word	0x000069ed
    cad0:	000069f9 	.word	0x000069f9
    cad4:	0001e4a8 	.word	0x0001e4a8

0000cad8 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    cad8:	b510      	push	{r4, lr}
    cada:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    cadc:	4b04      	ldr	r3, [pc, #16]	; (caf0 <SYSTEM_PostTask+0x18>)
    cade:	4798      	blx	r3
    sysTaskFlag |= task;
    cae0:	4b04      	ldr	r3, [pc, #16]	; (caf4 <SYSTEM_PostTask+0x1c>)
    cae2:	8818      	ldrh	r0, [r3, #0]
    cae4:	4320      	orrs	r0, r4
    cae6:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    cae8:	4b03      	ldr	r3, [pc, #12]	; (caf8 <SYSTEM_PostTask+0x20>)
    caea:	4798      	blx	r3
}
    caec:	bd10      	pop	{r4, pc}
    caee:	46c0      	nop			; (mov r8, r8)
    caf0:	000069ed 	.word	0x000069ed
    caf4:	20000fb8 	.word	0x20000fb8
    caf8:	000069f9 	.word	0x000069f9

0000cafc <SYSTEM_ReadyToSleep>:

\return 'true' if the system is ready, 'false' otherwise
*************************************************************************/
bool SYSTEM_ReadyToSleep(void)
{
    return !(sysTaskFlag & 0xffff);
    cafc:	4b03      	ldr	r3, [pc, #12]	; (cb0c <SYSTEM_ReadyToSleep+0x10>)
    cafe:	8818      	ldrh	r0, [r3, #0]
    cb00:	b280      	uxth	r0, r0
    cb02:	4243      	negs	r3, r0
    cb04:	4158      	adcs	r0, r3
    cb06:	b2c0      	uxtb	r0, r0
}
    cb08:	4770      	bx	lr
    cb0a:	46c0      	nop			; (mov r8, r8)
    cb0c:	20000fb8 	.word	0x20000fb8

0000cb10 <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    cb10:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb12:	46d6      	mov	lr, sl
    cb14:	464f      	mov	r7, r9
    cb16:	b580      	push	{r7, lr}
    cb18:	b083      	sub	sp, #12
    cb1a:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    cb1c:	2900      	cmp	r1, #0
    cb1e:	d102      	bne.n	cb26 <Radio_WriteMode+0x16>
    cb20:	1f83      	subs	r3, r0, #6
    cb22:	2b01      	cmp	r3, #1
    cb24:	d92a      	bls.n	cb7c <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    cb26:	2307      	movs	r3, #7
    cb28:	4699      	mov	r9, r3
    cb2a:	001c      	movs	r4, r3
    cb2c:	4004      	ands	r4, r0
    newModulation &= 0x01;
    cb2e:	2601      	movs	r6, #1
    cb30:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    cb32:	2001      	movs	r0, #1
    cb34:	4b2b      	ldr	r3, [pc, #172]	; (cbe4 <Radio_WriteMode+0xd4>)
    cb36:	4798      	blx	r3
    cb38:	0005      	movs	r5, r0
    cb3a:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    cb3c:	b243      	sxtb	r3, r0
    cb3e:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    cb40:	464b      	mov	r3, r9
    cb42:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    cb44:	4652      	mov	r2, sl
    cb46:	0fd2      	lsrs	r2, r2, #31
    cb48:	4296      	cmp	r6, r2
    cb4a:	d00a      	beq.n	cb62 <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    cb4c:	2b00      	cmp	r3, #0
    cb4e:	d11a      	bne.n	cb86 <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    cb50:	2e00      	cmp	r6, #0
    cb52:	d11e      	bne.n	cb92 <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    cb54:	2778      	movs	r7, #120	; 0x78
    cb56:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    cb58:	0039      	movs	r1, r7
    cb5a:	2001      	movs	r0, #1
    cb5c:	4b22      	ldr	r3, [pc, #136]	; (cbe8 <Radio_WriteMode+0xd8>)
    cb5e:	4798      	blx	r3
    cb60:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    cb62:	42a3      	cmp	r3, r4
    cb64:	d00a      	beq.n	cb7c <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    cb66:	2c00      	cmp	r4, #0
    cb68:	d030      	beq.n	cbcc <Radio_WriteMode+0xbc>
    cb6a:	9b01      	ldr	r3, [sp, #4]
    cb6c:	2b01      	cmp	r3, #1
    cb6e:	d016      	beq.n	cb9e <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    cb70:	21f8      	movs	r1, #248	; 0xf8
    cb72:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    cb74:	4321      	orrs	r1, r4
    cb76:	2001      	movs	r0, #1
    cb78:	4b1b      	ldr	r3, [pc, #108]	; (cbe8 <Radio_WriteMode+0xd8>)
    cb7a:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    cb7c:	b003      	add	sp, #12
    cb7e:	bc0c      	pop	{r2, r3}
    cb80:	4691      	mov	r9, r2
    cb82:	469a      	mov	sl, r3
    cb84:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    cb86:	21f8      	movs	r1, #248	; 0xf8
    cb88:	4001      	ands	r1, r0
    cb8a:	2001      	movs	r0, #1
    cb8c:	4b16      	ldr	r3, [pc, #88]	; (cbe8 <Radio_WriteMode+0xd8>)
    cb8e:	4798      	blx	r3
    cb90:	e7de      	b.n	cb50 <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    cb92:	2778      	movs	r7, #120	; 0x78
    cb94:	4653      	mov	r3, sl
    cb96:	401f      	ands	r7, r3
    cb98:	2180      	movs	r1, #128	; 0x80
    cb9a:	430f      	orrs	r7, r1
    cb9c:	e7dc      	b.n	cb58 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    cb9e:	2041      	movs	r0, #65	; 0x41
    cba0:	4b10      	ldr	r3, [pc, #64]	; (cbe4 <Radio_WriteMode+0xd4>)
    cba2:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    cba4:	2e00      	cmp	r6, #0
    cba6:	d10e      	bne.n	cbc6 <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    cba8:	2130      	movs	r1, #48	; 0x30
    cbaa:	4301      	orrs	r1, r0
    cbac:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    cbae:	2041      	movs	r0, #65	; 0x41
    cbb0:	4d0d      	ldr	r5, [pc, #52]	; (cbe8 <Radio_WriteMode+0xd8>)
    cbb2:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    cbb4:	21f8      	movs	r1, #248	; 0xf8
    cbb6:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    cbb8:	4321      	orrs	r1, r4
    cbba:	2001      	movs	r0, #1
    cbbc:	47a8      	blx	r5
			   delay_ms(1);
    cbbe:	2001      	movs	r0, #1
    cbc0:	4b0a      	ldr	r3, [pc, #40]	; (cbec <Radio_WriteMode+0xdc>)
    cbc2:	4798      	blx	r3
    cbc4:	e7da      	b.n	cb7c <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    cbc6:	21cf      	movs	r1, #207	; 0xcf
    cbc8:	4001      	ands	r1, r0
    cbca:	e7f0      	b.n	cbae <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    cbcc:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    cbce:	4039      	ands	r1, r7
    cbd0:	2001      	movs	r0, #1
    cbd2:	4b05      	ldr	r3, [pc, #20]	; (cbe8 <Radio_WriteMode+0xd8>)
    cbd4:	4798      	blx	r3
        if (1 == blocking)
    cbd6:	9b01      	ldr	r3, [sp, #4]
    cbd8:	2b01      	cmp	r3, #1
    cbda:	d1cf      	bne.n	cb7c <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    cbdc:	2001      	movs	r0, #1
    cbde:	4b04      	ldr	r3, [pc, #16]	; (cbf0 <Radio_WriteMode+0xe0>)
    cbe0:	4798      	blx	r3
    cbe2:	e7cb      	b.n	cb7c <Radio_WriteMode+0x6c>
    cbe4:	000067b5 	.word	0x000067b5
    cbe8:	0000678d 	.word	0x0000678d
    cbec:	000029e1 	.word	0x000029e1
    cbf0:	000069d1 	.word	0x000069d1

0000cbf4 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    cbf4:	b500      	push	{lr}
    cbf6:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    cbf8:	2012      	movs	r0, #18
    cbfa:	4b0d      	ldr	r3, [pc, #52]	; (cc30 <RADIO_FHSSChangeChannel+0x3c>)
    cbfc:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    cbfe:	4b0d      	ldr	r3, [pc, #52]	; (cc34 <RADIO_FHSSChangeChannel+0x40>)
    cc00:	8adb      	ldrh	r3, [r3, #22]
    cc02:	2b00      	cmp	r3, #0
    cc04:	d007      	beq.n	cc16 <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    cc06:	4b0b      	ldr	r3, [pc, #44]	; (cc34 <RADIO_FHSSChangeChannel+0x40>)
    cc08:	691b      	ldr	r3, [r3, #16]
    cc0a:	2b00      	cmp	r3, #0
    cc0c:	d003      	beq.n	cc16 <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    cc0e:	4a0a      	ldr	r2, [pc, #40]	; (cc38 <RADIO_FHSSChangeChannel+0x44>)
    cc10:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    cc12:	0692      	lsls	r2, r2, #26
    cc14:	d405      	bmi.n	cc22 <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    cc16:	2102      	movs	r1, #2
    cc18:	2012      	movs	r0, #18
    cc1a:	4b08      	ldr	r3, [pc, #32]	; (cc3c <RADIO_FHSSChangeChannel+0x48>)
    cc1c:	4798      	blx	r3
}
    cc1e:	b003      	add	sp, #12
    cc20:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    cc22:	a901      	add	r1, sp, #4
    cc24:	2020      	movs	r0, #32
    cc26:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    cc28:	9801      	ldr	r0, [sp, #4]
    cc2a:	4b05      	ldr	r3, [pc, #20]	; (cc40 <RADIO_FHSSChangeChannel+0x4c>)
    cc2c:	4798      	blx	r3
    cc2e:	e7f2      	b.n	cc16 <RADIO_FHSSChangeChannel+0x22>
    cc30:	000067b5 	.word	0x000067b5
    cc34:	20001ad0 	.word	0x20001ad0
    cc38:	20001ffe 	.word	0x20001ffe
    cc3c:	0000678d 	.word	0x0000678d
    cc40:	00013449 	.word	0x00013449

0000cc44 <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    cc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    cc46:	2000      	movs	r0, #0
    cc48:	4b1a      	ldr	r3, [pc, #104]	; (ccb4 <RADIO_ReadRandom+0x70>)
    cc4a:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    cc4c:	4b1a      	ldr	r3, [pc, #104]	; (ccb8 <RADIO_ReadRandom+0x74>)
    cc4e:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    cc50:	2201      	movs	r2, #1
    cc52:	2101      	movs	r1, #1
    cc54:	2000      	movs	r0, #0
    cc56:	4c19      	ldr	r4, [pc, #100]	; (ccbc <RADIO_ReadRandom+0x78>)
    cc58:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    cc5a:	21ff      	movs	r1, #255	; 0xff
    cc5c:	2011      	movs	r0, #17
    cc5e:	4b18      	ldr	r3, [pc, #96]	; (ccc0 <RADIO_ReadRandom+0x7c>)
    cc60:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    cc62:	2201      	movs	r2, #1
    cc64:	2101      	movs	r1, #1
    cc66:	2005      	movs	r0, #5
    cc68:	47a0      	blx	r4
    cc6a:	2410      	movs	r4, #16
    retVal = 0;
    cc6c:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    cc6e:	4f15      	ldr	r7, [pc, #84]	; (ccc4 <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    cc70:	4e15      	ldr	r6, [pc, #84]	; (ccc8 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    cc72:	2001      	movs	r0, #1
    cc74:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    cc76:	202c      	movs	r0, #44	; 0x2c
    cc78:	47b0      	blx	r6
    cc7a:	2301      	movs	r3, #1
    cc7c:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    cc7e:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    cc80:	4305      	orrs	r5, r0
    cc82:	b2ad      	uxth	r5, r5
    cc84:	3c01      	subs	r4, #1
    cc86:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    cc88:	2c00      	cmp	r4, #0
    cc8a:	d1f2      	bne.n	cc72 <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    cc8c:	2000      	movs	r0, #0
    cc8e:	4b0f      	ldr	r3, [pc, #60]	; (cccc <RADIO_ReadRandom+0x88>)
    cc90:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    cc92:	2201      	movs	r2, #1
    cc94:	2101      	movs	r1, #1
    cc96:	2000      	movs	r0, #0
    cc98:	4b08      	ldr	r3, [pc, #32]	; (ccbc <RADIO_ReadRandom+0x78>)
    cc9a:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    cc9c:	21ff      	movs	r1, #255	; 0xff
    cc9e:	2012      	movs	r0, #18
    cca0:	4c07      	ldr	r4, [pc, #28]	; (ccc0 <RADIO_ReadRandom+0x7c>)
    cca2:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    cca4:	2100      	movs	r1, #0
    cca6:	2011      	movs	r0, #17
    cca8:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    ccaa:	4b09      	ldr	r3, [pc, #36]	; (ccd0 <RADIO_ReadRandom+0x8c>)
    ccac:	4798      	blx	r3
	
    return retVal;
}
    ccae:	0028      	movs	r0, r5
    ccb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ccb2:	46c0      	nop			; (mov r8, r8)
    ccb4:	00013d0d 	.word	0x00013d0d
    ccb8:	000141b1 	.word	0x000141b1
    ccbc:	0000cb11 	.word	0x0000cb11
    ccc0:	0000678d 	.word	0x0000678d
    ccc4:	000069d1 	.word	0x000069d1
    ccc8:	000067b5 	.word	0x000067b5
    cccc:	00013e35 	.word	0x00013e35
    ccd0:	000142f5 	.word	0x000142f5

0000ccd4 <Radio_ReadRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadRssi(int16_t *rssi)
{
    ccd4:	b510      	push	{r4, lr}
    ccd6:	0004      	movs	r4, r0
	if (MODULATION_LORA == radioConfiguration.modulation)
    ccd8:	2334      	movs	r3, #52	; 0x34
    ccda:	4a11      	ldr	r2, [pc, #68]	; (cd20 <Radio_ReadRssi+0x4c>)
    ccdc:	5cd3      	ldrb	r3, [r2, r3]
    ccde:	2b01      	cmp	r3, #1
    cce0:	d003      	beq.n	ccea <Radio_ReadRssi+0x16>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
#endif // UT
	}
	else
	{
		return ERR_UNSUPPORTED_ATTR;
    cce2:	2006      	movs	r0, #6
	else if (MODULATION_FSK == radioConfiguration.modulation)
    cce4:	2b00      	cmp	r3, #0
    cce6:	d012      	beq.n	cd0e <Radio_ReadRssi+0x3a>
	}

	return ERR_NONE;
}
    cce8:	bd10      	pop	{r4, pc}
		if (radioConfiguration.frequency >= HF_FREQ_HZ)
    ccea:	4b0e      	ldr	r3, [pc, #56]	; (cd24 <Radio_ReadRssi+0x50>)
    ccec:	6812      	ldr	r2, [r2, #0]
    ccee:	429a      	cmp	r2, r3
    ccf0:	d906      	bls.n	cd00 <Radio_ReadRssi+0x2c>
			*rssi = RSSI_HF_OFFSET + RADIO_RegisterRead(REG_LORA_RSSIVALUE);
    ccf2:	201b      	movs	r0, #27
    ccf4:	4b0c      	ldr	r3, [pc, #48]	; (cd28 <Radio_ReadRssi+0x54>)
    ccf6:	4798      	blx	r3
    ccf8:	389d      	subs	r0, #157	; 0x9d
    ccfa:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    ccfc:	2000      	movs	r0, #0
    ccfe:	e7f3      	b.n	cce8 <Radio_ReadRssi+0x14>
			*rssi = RSSI_LF_OFFSET + RADIO_RegisterRead(REG_LORA_RSSIVALUE);
    cd00:	201b      	movs	r0, #27
    cd02:	4b09      	ldr	r3, [pc, #36]	; (cd28 <Radio_ReadRssi+0x54>)
    cd04:	4798      	blx	r3
    cd06:	38a4      	subs	r0, #164	; 0xa4
    cd08:	8020      	strh	r0, [r4, #0]
	return ERR_NONE;
    cd0a:	2000      	movs	r0, #0
    cd0c:	e7ec      	b.n	cce8 <Radio_ReadRssi+0x14>
		*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    cd0e:	300b      	adds	r0, #11
    cd10:	4b05      	ldr	r3, [pc, #20]	; (cd28 <Radio_ReadRssi+0x54>)
    cd12:	4798      	blx	r3
    cd14:	0840      	lsrs	r0, r0, #1
    cd16:	b2c3      	uxtb	r3, r0
    cd18:	425b      	negs	r3, r3
    cd1a:	8023      	strh	r3, [r4, #0]
	return ERR_NONE;
    cd1c:	2000      	movs	r0, #0
    cd1e:	e7e3      	b.n	cce8 <Radio_ReadRssi+0x14>
    cd20:	20001ad0 	.word	0x20001ad0
    cd24:	3361137f 	.word	0x3361137f
    cd28:	000067b5 	.word	0x000067b5

0000cd2c <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    cd2c:	b510      	push	{r4, lr}
	tmr_cca_callback();
    cd2e:	4b01      	ldr	r3, [pc, #4]	; (cd34 <tc_cca_callback+0x8>)
    cd30:	4798      	blx	r3
}
    cd32:	bd10      	pop	{r4, pc}
    cd34:	0000eef1 	.word	0x0000eef1

0000cd38 <tc_ovf_callback>:
{
    cd38:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    cd3a:	4b01      	ldr	r3, [pc, #4]	; (cd40 <tc_ovf_callback+0x8>)
    cd3c:	4798      	blx	r3
}
    cd3e:	bd10      	pop	{r4, pc}
    cd40:	0000eea9 	.word	0x0000eea9

0000cd44 <tmr_read_count>:
{
    cd44:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    cd46:	4802      	ldr	r0, [pc, #8]	; (cd50 <tmr_read_count+0xc>)
    cd48:	4b02      	ldr	r3, [pc, #8]	; (cd54 <tmr_read_count+0x10>)
    cd4a:	4798      	blx	r3
    cd4c:	b280      	uxth	r0, r0
}
    cd4e:	bd10      	pop	{r4, pc}
    cd50:	20001b60 	.word	0x20001b60
    cd54:	00005edd 	.word	0x00005edd

0000cd58 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    cd58:	4b03      	ldr	r3, [pc, #12]	; (cd68 <tmr_disable_cc_interrupt+0x10>)
    cd5a:	2110      	movs	r1, #16
    cd5c:	681a      	ldr	r2, [r3, #0]
    cd5e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    cd60:	7e5a      	ldrb	r2, [r3, #25]
    cd62:	438a      	bics	r2, r1
    cd64:	765a      	strb	r2, [r3, #25]
}
    cd66:	4770      	bx	lr
    cd68:	20001b60 	.word	0x20001b60

0000cd6c <tmr_enable_cc_interrupt>:
{
    cd6c:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    cd6e:	4c0a      	ldr	r4, [pc, #40]	; (cd98 <tmr_enable_cc_interrupt+0x2c>)
    cd70:	6820      	ldr	r0, [r4, #0]
    cd72:	4b0a      	ldr	r3, [pc, #40]	; (cd9c <tmr_enable_cc_interrupt+0x30>)
    cd74:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    cd76:	4b0a      	ldr	r3, [pc, #40]	; (cda0 <tmr_enable_cc_interrupt+0x34>)
    cd78:	5c1b      	ldrb	r3, [r3, r0]
    cd7a:	221f      	movs	r2, #31
    cd7c:	401a      	ands	r2, r3
    cd7e:	2301      	movs	r3, #1
    cd80:	4093      	lsls	r3, r2
    cd82:	4a08      	ldr	r2, [pc, #32]	; (cda4 <tmr_enable_cc_interrupt+0x38>)
    cd84:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    cd86:	7e63      	ldrb	r3, [r4, #25]
    cd88:	2210      	movs	r2, #16
    cd8a:	4313      	orrs	r3, r2
    cd8c:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    cd8e:	6823      	ldr	r3, [r4, #0]
    cd90:	2210      	movs	r2, #16
    cd92:	725a      	strb	r2, [r3, #9]
}
    cd94:	bd10      	pop	{r4, pc}
    cd96:	46c0      	nop			; (mov r8, r8)
    cd98:	20001b60 	.word	0x20001b60
    cd9c:	00005bb1 	.word	0x00005bb1
    cda0:	0001e4bc 	.word	0x0001e4bc
    cda4:	e000e100 	.word	0xe000e100

0000cda8 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    cda8:	4b03      	ldr	r3, [pc, #12]	; (cdb8 <tmr_disable_ovf_interrupt+0x10>)
    cdaa:	2101      	movs	r1, #1
    cdac:	681a      	ldr	r2, [r3, #0]
    cdae:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    cdb0:	7e5a      	ldrb	r2, [r3, #25]
    cdb2:	438a      	bics	r2, r1
    cdb4:	765a      	strb	r2, [r3, #25]
}
    cdb6:	4770      	bx	lr
    cdb8:	20001b60 	.word	0x20001b60

0000cdbc <tmr_stop>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    cdbc:	4b06      	ldr	r3, [pc, #24]	; (cdd8 <tmr_stop+0x1c>)
    cdbe:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    cdc0:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    cdc2:	2b00      	cmp	r3, #0
    cdc4:	d1fc      	bne.n	cdc0 <tmr_stop+0x4>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    cdc6:	3333      	adds	r3, #51	; 0x33
    cdc8:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    cdca:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    cdcc:	6813      	ldr	r3, [r2, #0]
    cdce:	2102      	movs	r1, #2
    cdd0:	438b      	bics	r3, r1
    cdd2:	6013      	str	r3, [r2, #0]
}
    cdd4:	4770      	bx	lr
    cdd6:	46c0      	nop			; (mov r8, r8)
    cdd8:	20001b60 	.word	0x20001b60

0000cddc <tmr_write_cmpreg>:
{
    cddc:	b510      	push	{r4, lr}
    cdde:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    cde0:	2100      	movs	r1, #0
    cde2:	4802      	ldr	r0, [pc, #8]	; (cdec <tmr_write_cmpreg+0x10>)
    cde4:	4b02      	ldr	r3, [pc, #8]	; (cdf0 <tmr_write_cmpreg+0x14>)
    cde6:	4798      	blx	r3
}
    cde8:	bd10      	pop	{r4, pc}
    cdea:	46c0      	nop			; (mov r8, r8)
    cdec:	20001b60 	.word	0x20001b60
    cdf0:	00005f1d 	.word	0x00005f1d

0000cdf4 <save_cpu_interrupt>:
{
    cdf4:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    cdf6:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    cdfa:	425a      	negs	r2, r3
    cdfc:	4153      	adcs	r3, r2
    cdfe:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    ce00:	b672      	cpsid	i
    ce02:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    ce06:	2200      	movs	r2, #0
    ce08:	4b02      	ldr	r3, [pc, #8]	; (ce14 <save_cpu_interrupt+0x20>)
    ce0a:	701a      	strb	r2, [r3, #0]
	return flags;
    ce0c:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    ce0e:	b2c0      	uxtb	r0, r0
}
    ce10:	b002      	add	sp, #8
    ce12:	4770      	bx	lr
    ce14:	2000000c 	.word	0x2000000c

0000ce18 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    ce18:	2800      	cmp	r0, #0
    ce1a:	d005      	beq.n	ce28 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    ce1c:	2201      	movs	r2, #1
    ce1e:	4b03      	ldr	r3, [pc, #12]	; (ce2c <restore_cpu_interrupt+0x14>)
    ce20:	701a      	strb	r2, [r3, #0]
    ce22:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    ce26:	b662      	cpsie	i
}
    ce28:	4770      	bx	lr
    ce2a:	46c0      	nop			; (mov r8, r8)
    ce2c:	2000000c 	.word	0x2000000c

0000ce30 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    ce30:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    ce32:	4a33      	ldr	r2, [pc, #204]	; (cf00 <tmr_init+0xd0>)
    ce34:	2100      	movs	r1, #0
    ce36:	2300      	movs	r3, #0
    ce38:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    ce3a:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    ce3c:	2000      	movs	r0, #0
    ce3e:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    ce40:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    ce42:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    ce44:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    ce46:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    ce48:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    ce4a:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    ce4c:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    ce4e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    ce50:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    ce52:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    ce54:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    ce56:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    ce58:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    ce5a:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    ce5c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    ce5e:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    ce60:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    ce62:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    ce64:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    ce66:	2334      	movs	r3, #52	; 0x34
    ce68:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    ce6a:	3b35      	subs	r3, #53	; 0x35
    ce6c:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    ce6e:	4c25      	ldr	r4, [pc, #148]	; (cf04 <tmr_init+0xd4>)
    ce70:	4925      	ldr	r1, [pc, #148]	; (cf08 <tmr_init+0xd8>)
    ce72:	0020      	movs	r0, r4
    ce74:	4b25      	ldr	r3, [pc, #148]	; (cf0c <tmr_init+0xdc>)
    ce76:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    ce78:	2200      	movs	r2, #0
    ce7a:	4925      	ldr	r1, [pc, #148]	; (cf10 <tmr_init+0xe0>)
    ce7c:	0020      	movs	r0, r4
    ce7e:	4d25      	ldr	r5, [pc, #148]	; (cf14 <tmr_init+0xe4>)
    ce80:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    ce82:	2202      	movs	r2, #2
    ce84:	4924      	ldr	r1, [pc, #144]	; (cf18 <tmr_init+0xe8>)
    ce86:	0020      	movs	r0, r4
    ce88:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    ce8a:	6820      	ldr	r0, [r4, #0]
    ce8c:	4b23      	ldr	r3, [pc, #140]	; (cf1c <tmr_init+0xec>)
    ce8e:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    ce90:	4b23      	ldr	r3, [pc, #140]	; (cf20 <tmr_init+0xf0>)
    ce92:	5c1a      	ldrb	r2, [r3, r0]
    ce94:	231f      	movs	r3, #31
    ce96:	4013      	ands	r3, r2
    ce98:	2101      	movs	r1, #1
    ce9a:	000a      	movs	r2, r1
    ce9c:	409a      	lsls	r2, r3
    ce9e:	4b21      	ldr	r3, [pc, #132]	; (cf24 <tmr_init+0xf4>)
    cea0:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    cea2:	7e63      	ldrb	r3, [r4, #25]
    cea4:	2201      	movs	r2, #1
    cea6:	4313      	orrs	r3, r2
    cea8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    ceaa:	6822      	ldr	r2, [r4, #0]
    ceac:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    ceae:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    ceb0:	2b00      	cmp	r3, #0
    ceb2:	d1fc      	bne.n	ceae <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    ceb4:	6813      	ldr	r3, [r2, #0]
    ceb6:	2102      	movs	r1, #2
    ceb8:	430b      	orrs	r3, r1
    ceba:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    cebc:	2000      	movs	r0, #0
    cebe:	4b1a      	ldr	r3, [pc, #104]	; (cf28 <tmr_init+0xf8>)
    cec0:	4798      	blx	r3
    cec2:	4d1a      	ldr	r5, [pc, #104]	; (cf2c <tmr_init+0xfc>)
    cec4:	47a8      	blx	r5
    cec6:	491a      	ldr	r1, [pc, #104]	; (cf30 <tmr_init+0x100>)
    cec8:	4b1a      	ldr	r3, [pc, #104]	; (cf34 <tmr_init+0x104>)
    ceca:	4798      	blx	r3
    cecc:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    cece:	4b1a      	ldr	r3, [pc, #104]	; (cf38 <tmr_init+0x108>)
    ced0:	4798      	blx	r3
    ced2:	47a8      	blx	r5
    ced4:	1c01      	adds	r1, r0, #0
    ced6:	1c20      	adds	r0, r4, #0
    ced8:	4b18      	ldr	r3, [pc, #96]	; (cf3c <tmr_init+0x10c>)
    ceda:	4798      	blx	r3
    cedc:	21fc      	movs	r1, #252	; 0xfc
    cede:	0589      	lsls	r1, r1, #22
    cee0:	4b17      	ldr	r3, [pc, #92]	; (cf40 <tmr_init+0x110>)
    cee2:	4798      	blx	r3
    cee4:	2800      	cmp	r0, #0
    cee6:	d005      	beq.n	cef4 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    cee8:	21fe      	movs	r1, #254	; 0xfe
    ceea:	0589      	lsls	r1, r1, #22
    ceec:	1c20      	adds	r0, r4, #0
    ceee:	4b15      	ldr	r3, [pc, #84]	; (cf44 <tmr_init+0x114>)
    cef0:	4798      	blx	r3
    cef2:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    cef4:	1c20      	adds	r0, r4, #0
    cef6:	4b10      	ldr	r3, [pc, #64]	; (cf38 <tmr_init+0x108>)
    cef8:	4798      	blx	r3
    cefa:	b2c0      	uxtb	r0, r0
}
    cefc:	bd70      	pop	{r4, r5, r6, pc}
    cefe:	46c0      	nop			; (mov r8, r8)
    cf00:	20001b28 	.word	0x20001b28
    cf04:	20001b60 	.word	0x20001b60
    cf08:	42002000 	.word	0x42002000
    cf0c:	00005bed 	.word	0x00005bed
    cf10:	0000cd39 	.word	0x0000cd39
    cf14:	00005ac9 	.word	0x00005ac9
    cf18:	0000cd2d 	.word	0x0000cd2d
    cf1c:	00005bb1 	.word	0x00005bb1
    cf20:	0001e4bc 	.word	0x0001e4bc
    cf24:	e000e100 	.word	0xe000e100
    cf28:	00005891 	.word	0x00005891
    cf2c:	00015eb1 	.word	0x00015eb1
    cf30:	49742400 	.word	0x49742400
    cf34:	00015479 	.word	0x00015479
    cf38:	00014f65 	.word	0x00014f65
    cf3c:	00015a99 	.word	0x00015a99
    cf40:	00014ebd 	.word	0x00014ebd
    cf44:	00015155 	.word	0x00015155

0000cf48 <nvm_read>:
 * \internal Pointer to the NVM MEMORY region start address
 */
#define NVM_MEMORY        ((volatile uint16_t *)FLASH_ADDR)
status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    cf48:	b570      	push	{r4, r5, r6, lr}

status_code_t nvm_sam0_read(mem_type_t mem, uint32_t address,
		uint8_t *const buffer,
		uint32_t len)
{
	switch (mem) {
    cf4a:	2800      	cmp	r0, #0
    cf4c:	d122      	bne.n	cf94 <nvm_read+0x4c>
    cf4e:	4814      	ldr	r0, [pc, #80]	; (cfa0 <nvm_read+0x58>)
    cf50:	7d04      	ldrb	r4, [r0, #20]
    {
		/* Get a pointer to the module hardware instance */
		Nvmctrl *const nvm_module = NVMCTRL;
		/* Check if the module is busy */
		if (!nvm_is_ready()) {
			return STATUS_BUSY;
    cf52:	2005      	movs	r0, #5
		if (!nvm_is_ready()) {
    cf54:	07e4      	lsls	r4, r4, #31
    cf56:	d400      	bmi.n	cf5a <nvm_read+0x12>
}
    cf58:	bd70      	pop	{r4, r5, r6, pc}
		}

		/* Clear error flags */
		nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    cf5a:	2420      	movs	r4, #32
    cf5c:	34ff      	adds	r4, #255	; 0xff
    cf5e:	4810      	ldr	r0, [pc, #64]	; (cfa0 <nvm_read+0x58>)
    cf60:	8304      	strh	r4, [r0, #24]
		uint32_t page_address = address / 2;

		/* NVM _must_ be accessed as a series of 16-bit words, perform
		 * manual copy
		 * to ensure alignment */
		for (uint16_t i = 0; i < len; i += 2) {
    cf62:	2b00      	cmp	r3, #0
    cf64:	d019      	beq.n	cf9a <nvm_read+0x52>
    cf66:	2001      	movs	r0, #1
    cf68:	4381      	bics	r1, r0
    cf6a:	2000      	movs	r0, #0
    cf6c:	2500      	movs	r5, #0
			buffer[i] = (data & 0xFF);

			/* If we are not at the end of a read request with an
			 * odd byte count,
			 * store the next byte of data as well */
			if (i < (len - 1)) {
    cf6e:	1e5e      	subs	r6, r3, #1
    cf70:	e005      	b.n	cf7e <nvm_read+0x36>
		for (uint16_t i = 0; i < len; i += 2) {
    cf72:	3002      	adds	r0, #2
    cf74:	b280      	uxth	r0, r0
    cf76:	0005      	movs	r5, r0
    cf78:	3102      	adds	r1, #2
    cf7a:	4283      	cmp	r3, r0
    cf7c:	d908      	bls.n	cf90 <nvm_read+0x48>
			uint16_t data = NVM_MEMORY[page_address++];
    cf7e:	880c      	ldrh	r4, [r1, #0]
    cf80:	b2a4      	uxth	r4, r4
			buffer[i] = (data & 0xFF);
    cf82:	5554      	strb	r4, [r2, r5]
			if (i < (len - 1)) {
    cf84:	42ae      	cmp	r6, r5
    cf86:	d9f4      	bls.n	cf72 <nvm_read+0x2a>
				buffer[i + 1] = (data >> 8);
    cf88:	1955      	adds	r5, r2, r5
    cf8a:	0a24      	lsrs	r4, r4, #8
    cf8c:	706c      	strb	r4, [r5, #1]
    cf8e:	e7f0      	b.n	cf72 <nvm_read+0x2a>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    cf90:	2000      	movs	r0, #0
    cf92:	e7e1      	b.n	cf58 <nvm_read+0x10>
		return ERR_INVALID_ARG;
    cf94:	2008      	movs	r0, #8
    cf96:	4240      	negs	r0, r0
    cf98:	e7de      	b.n	cf58 <nvm_read+0x10>
	return STATUS_OK;
    cf9a:	2000      	movs	r0, #0
    cf9c:	e7dc      	b.n	cf58 <nvm_read+0x10>
    cf9e:	46c0      	nop			; (mov r8, r8)
    cfa0:	41004000 	.word	0x41004000

0000cfa4 <nvm_write>:
	return error_code;
}

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    cfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cfa6:	46de      	mov	lr, fp
    cfa8:	4657      	mov	r7, sl
    cfaa:	464e      	mov	r6, r9
    cfac:	4645      	mov	r5, r8
    cfae:	b5e0      	push	{r5, r6, r7, lr}
    cfb0:	b0c5      	sub	sp, #276	; 0x114
	switch (mem) {
    cfb2:	2800      	cmp	r0, #0
    cfb4:	d168      	bne.n	d088 <nvm_write+0xe4>
	case INT_FLASH:

		if (STATUS_OK != nvm_memcpy(address, buffer, len, true))
    cfb6:	b29b      	uxth	r3, r3
    cfb8:	469a      	mov	sl, r3
	volatile uint8_t *dest_add = (uint8_t *)destination_address;
    cfba:	4688      	mov	r8, r1
	uint32_t row_start_address
    cfbc:	23ff      	movs	r3, #255	; 0xff
    cfbe:	4399      	bics	r1, r3
    cfc0:	9100      	str	r1, [sp, #0]
	while (length) {
    cfc2:	4653      	mov	r3, sl
    cfc4:	2b00      	cmp	r3, #0
    cfc6:	d06b      	beq.n	d0a0 <nvm_write+0xfc>
    cfc8:	ab04      	add	r3, sp, #16
    cfca:	1a5b      	subs	r3, r3, r1
    cfcc:	9302      	str	r3, [sp, #8]
				error_code = nvm_read_buffer(
    cfce:	4e35      	ldr	r6, [pc, #212]	; (d0a4 <nvm_write+0x100>)
				error_code = nvm_erase_row(row_start_address);
    cfd0:	4b35      	ldr	r3, [pc, #212]	; (d0a8 <nvm_write+0x104>)
    cfd2:	469b      	mov	fp, r3
    cfd4:	9203      	str	r2, [sp, #12]
    cfd6:	e03a      	b.n	d04e <nvm_write+0xaa>
				(FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES); i++) {
    cfd8:	3301      	adds	r3, #1
		for (i = row_start_address;
    cfda:	42bb      	cmp	r3, r7
    cfdc:	d20e      	bcs.n	cffc <nvm_write+0x58>
			if (length && ((uint8_t *)i == dest_add)) {
    cfde:	2a00      	cmp	r2, #0
    cfe0:	d0fa      	beq.n	cfd8 <nvm_write+0x34>
    cfe2:	4299      	cmp	r1, r3
    cfe4:	d1f8      	bne.n	cfd8 <nvm_write+0x34>
				row_buffer[i - row_start_address] = *src_buf++;
    cfe6:	9d03      	ldr	r5, [sp, #12]
    cfe8:	7828      	ldrb	r0, [r5, #0]
    cfea:	9c02      	ldr	r4, [sp, #8]
    cfec:	54e0      	strb	r0, [r4, r3]
				dest_add++;
    cfee:	3101      	adds	r1, #1
				length--;
    cff0:	3a01      	subs	r2, #1
    cff2:	b292      	uxth	r2, r2
				row_buffer[i - row_start_address] = *src_buf++;
    cff4:	0028      	movs	r0, r5
    cff6:	3001      	adds	r0, #1
    cff8:	9003      	str	r0, [sp, #12]
    cffa:	e7ed      	b.n	cfd8 <nvm_write+0x34>
    cffc:	4692      	mov	sl, r2
    cffe:	4688      	mov	r8, r1
    d000:	9c01      	ldr	r4, [sp, #4]
	cpu_irq_enter_critical();
    d002:	4b2a      	ldr	r3, [pc, #168]	; (d0ac <nvm_write+0x108>)
    d004:	4798      	blx	r3
				error_code = nvm_erase_row(row_start_address);
    d006:	9800      	ldr	r0, [sp, #0]
    d008:	47d8      	blx	fp
			} while (error_code == STATUS_BUSY);
    d00a:	2805      	cmp	r0, #5
    d00c:	d0fb      	beq.n	d006 <nvm_write+0x62>
			if (error_code != STATUS_OK) {
    d00e:	2800      	cmp	r0, #0
    d010:	d13d      	bne.n	d08e <nvm_write+0xea>
    d012:	9d00      	ldr	r5, [sp, #0]
				error_code = nvm_write_buffer(
    d014:	4f26      	ldr	r7, [pc, #152]	; (d0b0 <nvm_write+0x10c>)
    d016:	9401      	str	r4, [sp, #4]
    d018:	9b00      	ldr	r3, [sp, #0]
    d01a:	1aec      	subs	r4, r5, r3
    d01c:	ab04      	add	r3, sp, #16
    d01e:	469c      	mov	ip, r3
    d020:	4464      	add	r4, ip
    d022:	2240      	movs	r2, #64	; 0x40
    d024:	0021      	movs	r1, r4
    d026:	0028      	movs	r0, r5
    d028:	47b8      	blx	r7
			} while (error_code == STATUS_BUSY);
    d02a:	2805      	cmp	r0, #5
    d02c:	d0f9      	beq.n	d022 <nvm_write+0x7e>
			if (error_code != STATUS_OK) {
    d02e:	2800      	cmp	r0, #0
    d030:	d12d      	bne.n	d08e <nvm_write+0xea>
    d032:	3540      	adds	r5, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    d034:	9b01      	ldr	r3, [sp, #4]
    d036:	42ab      	cmp	r3, r5
    d038:	d1ee      	bne.n	d018 <nvm_write+0x74>
	cpu_irq_leave_critical();
    d03a:	4b1e      	ldr	r3, [pc, #120]	; (d0b4 <nvm_write+0x110>)
    d03c:	4798      	blx	r3
    d03e:	9b02      	ldr	r3, [sp, #8]
    d040:	3b01      	subs	r3, #1
    d042:	3bff      	subs	r3, #255	; 0xff
    d044:	9302      	str	r3, [sp, #8]
    d046:	9500      	str	r5, [sp, #0]
	while (length) {
    d048:	4653      	mov	r3, sl
    d04a:	2b00      	cmp	r3, #0
    d04c:	d028      	beq.n	d0a0 <nvm_write+0xfc>
    d04e:	9b00      	ldr	r3, [sp, #0]
    d050:	1c5f      	adds	r7, r3, #1
    d052:	37ff      	adds	r7, #255	; 0xff
{
    d054:	001c      	movs	r4, r3
    d056:	46b9      	mov	r9, r7
    d058:	001f      	movs	r7, r3
    d05a:	1be5      	subs	r5, r4, r7
    d05c:	ab04      	add	r3, sp, #16
    d05e:	469c      	mov	ip, r3
    d060:	4465      	add	r5, ip
				error_code = nvm_read_buffer(
    d062:	2240      	movs	r2, #64	; 0x40
    d064:	0029      	movs	r1, r5
    d066:	0020      	movs	r0, r4
    d068:	47b0      	blx	r6
			} while (error_code == STATUS_BUSY);
    d06a:	2805      	cmp	r0, #5
    d06c:	d0f9      	beq.n	d062 <nvm_write+0xbe>
			if (error_code != STATUS_OK) {
    d06e:	2800      	cmp	r0, #0
    d070:	d10d      	bne.n	d08e <nvm_write+0xea>
    d072:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    d074:	454c      	cmp	r4, r9
    d076:	d1f0      	bne.n	d05a <nvm_write+0xb6>
    d078:	464f      	mov	r7, r9
		for (i = row_start_address;
    d07a:	9b00      	ldr	r3, [sp, #0]
    d07c:	429f      	cmp	r7, r3
    d07e:	d9c0      	bls.n	d002 <nvm_write+0x5e>
    d080:	4652      	mov	r2, sl
    d082:	4641      	mov	r1, r8
    d084:	9401      	str	r4, [sp, #4]
    d086:	e7aa      	b.n	cfde <nvm_write+0x3a>
			return ERR_INVALID_ARG;
		}
		break;

	default:
		return ERR_INVALID_ARG;
    d088:	2008      	movs	r0, #8
    d08a:	4240      	negs	r0, r0
    d08c:	e001      	b.n	d092 <nvm_write+0xee>
			return ERR_INVALID_ARG;
    d08e:	2008      	movs	r0, #8
    d090:	4240      	negs	r0, r0
	}

	return STATUS_OK;
}
    d092:	b045      	add	sp, #276	; 0x114
    d094:	bc3c      	pop	{r2, r3, r4, r5}
    d096:	4690      	mov	r8, r2
    d098:	4699      	mov	r9, r3
    d09a:	46a2      	mov	sl, r4
    d09c:	46ab      	mov	fp, r5
    d09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    d0a0:	2000      	movs	r0, #0
    d0a2:	e7f6      	b.n	d092 <nvm_write+0xee>
    d0a4:	00003595 	.word	0x00003595
    d0a8:	00003615 	.word	0x00003615
    d0ac:	00002a0d 	.word	0x00002a0d
    d0b0:	000034bd 	.word	0x000034bd
    d0b4:	00002a4d 	.word	0x00002a4d

0000d0b8 <nvm_init>:

status_code_t nvm_init(mem_type_t mem)
{
    d0b8:	b500      	push	{lr}
    d0ba:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    d0bc:	2800      	cmp	r0, #0
    d0be:	d110      	bne.n	d0e2 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    d0c0:	2300      	movs	r3, #0
    d0c2:	466a      	mov	r2, sp
    d0c4:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    d0c6:	4a08      	ldr	r2, [pc, #32]	; (d0e8 <nvm_init+0x30>)
    d0c8:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    d0ca:	466a      	mov	r2, sp
    d0cc:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    d0ce:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    d0d0:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    d0d2:	3302      	adds	r3, #2
    d0d4:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    d0d6:	4668      	mov	r0, sp
    d0d8:	4b04      	ldr	r3, [pc, #16]	; (d0ec <nvm_init+0x34>)
    d0da:	4798      	blx	r3

		return STATUS_OK;
    d0dc:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    d0de:	b003      	add	sp, #12
    d0e0:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    d0e2:	2008      	movs	r0, #8
    d0e4:	4240      	negs	r0, r0
    d0e6:	e7fa      	b.n	d0de <nvm_init+0x26>
    d0e8:	41004000 	.word	0x41004000
    d0ec:	00003381 	.word	0x00003381

0000d0f0 <print_array>:
 \brief      Function to Print array of characters
 \param[in]  *array  - Pointer of the array to be printed
 \param[in]   length - Length of the array
 ************************************************************************/
static void print_array (uint8_t *array, uint8_t length)
{
    d0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d0f2:	0004      	movs	r4, r0
    d0f4:	000d      	movs	r5, r1
    printf("0x");
    d0f6:	480a      	ldr	r0, [pc, #40]	; (d120 <print_array+0x30>)
    d0f8:	4b0a      	ldr	r3, [pc, #40]	; (d124 <print_array+0x34>)
    d0fa:	4798      	blx	r3
    for (uint8_t i =0; i < length; i++)
    d0fc:	2d00      	cmp	r5, #0
    d0fe:	d00b      	beq.n	d118 <print_array+0x28>
    d100:	3d01      	subs	r5, #1
    d102:	b2ed      	uxtb	r5, r5
    d104:	3501      	adds	r5, #1
    d106:	1965      	adds	r5, r4, r5
    {
        printf("%02x", *array);
    d108:	4e07      	ldr	r6, [pc, #28]	; (d128 <print_array+0x38>)
    d10a:	4f06      	ldr	r7, [pc, #24]	; (d124 <print_array+0x34>)
    d10c:	7821      	ldrb	r1, [r4, #0]
    d10e:	0030      	movs	r0, r6
    d110:	47b8      	blx	r7
        array++;
    d112:	3401      	adds	r4, #1
    for (uint8_t i =0; i < length; i++)
    d114:	42ac      	cmp	r4, r5
    d116:	d1f9      	bne.n	d10c <print_array+0x1c>
    }
    printf("\n\r");
    d118:	4804      	ldr	r0, [pc, #16]	; (d12c <print_array+0x3c>)
    d11a:	4b02      	ldr	r3, [pc, #8]	; (d124 <print_array+0x34>)
    d11c:	4798      	blx	r3
}
    d11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d120:	0001e948 	.word	0x0001e948
    d124:	000182cd 	.word	0x000182cd
    d128:	0001e94c 	.word	0x0001e94c
    d12c:	0001ec24 	.word	0x0001ec24

0000d130 <print_stack_status>:
{
    d130:	b510      	push	{r4, lr}
    switch(status)
    d132:	0003      	movs	r3, r0
    d134:	3b08      	subs	r3, #8
    d136:	b2da      	uxtb	r2, r3
    d138:	2a0d      	cmp	r2, #13
    d13a:	d833      	bhi.n	d1a4 <print_stack_status+0x74>
    d13c:	0093      	lsls	r3, r2, #2
    d13e:	4a1c      	ldr	r2, [pc, #112]	; (d1b0 <print_stack_status+0x80>)
    d140:	58d3      	ldr	r3, [r2, r3]
    d142:	469f      	mov	pc, r3
             printf("\nlorawan_success\n\r");
    d144:	481b      	ldr	r0, [pc, #108]	; (d1b4 <print_stack_status+0x84>)
    d146:	4b1c      	ldr	r3, [pc, #112]	; (d1b8 <print_stack_status+0x88>)
    d148:	4798      	blx	r3
}
    d14a:	bd10      	pop	{r4, pc}
             printf("\nlorawan_state : stack_Busy\n\r");
    d14c:	481b      	ldr	r0, [pc, #108]	; (d1bc <print_stack_status+0x8c>)
    d14e:	4b1a      	ldr	r3, [pc, #104]	; (d1b8 <print_stack_status+0x88>)
    d150:	4798      	blx	r3
        break;
    d152:	e7fa      	b.n	d14a <print_stack_status+0x1a>
            printf("\ndevice_not_joined_to_network\n\r");
    d154:	481a      	ldr	r0, [pc, #104]	; (d1c0 <print_stack_status+0x90>)
    d156:	4b18      	ldr	r3, [pc, #96]	; (d1b8 <print_stack_status+0x88>)
    d158:	4798      	blx	r3
        break;
    d15a:	e7f6      	b.n	d14a <print_stack_status+0x1a>
            printf("\ninvalid_parameter\n\r");
    d15c:	4819      	ldr	r0, [pc, #100]	; (d1c4 <print_stack_status+0x94>)
    d15e:	4b16      	ldr	r3, [pc, #88]	; (d1b8 <print_stack_status+0x88>)
    d160:	4798      	blx	r3
        break;
    d162:	e7f2      	b.n	d14a <print_stack_status+0x1a>
            printf("\nkeys_not_initialized\n\r");
    d164:	4818      	ldr	r0, [pc, #96]	; (d1c8 <print_stack_status+0x98>)
    d166:	4b14      	ldr	r3, [pc, #80]	; (d1b8 <print_stack_status+0x88>)
    d168:	4798      	blx	r3
        break;
    d16a:	e7ee      	b.n	d14a <print_stack_status+0x1a>
            printf("\nsilent_immediately_active\n\r");
    d16c:	4817      	ldr	r0, [pc, #92]	; (d1cc <print_stack_status+0x9c>)
    d16e:	4b12      	ldr	r3, [pc, #72]	; (d1b8 <print_stack_status+0x88>)
    d170:	4798      	blx	r3
        break;
    d172:	e7ea      	b.n	d14a <print_stack_status+0x1a>
            printf("\nframecounter_error_rejoin_needed\n\r");
    d174:	4816      	ldr	r0, [pc, #88]	; (d1d0 <print_stack_status+0xa0>)
    d176:	4b10      	ldr	r3, [pc, #64]	; (d1b8 <print_stack_status+0x88>)
    d178:	4798      	blx	r3
        break;
    d17a:	e7e6      	b.n	d14a <print_stack_status+0x1a>
            printf("\ninvalid_buffer_length\n\r");
    d17c:	4815      	ldr	r0, [pc, #84]	; (d1d4 <print_stack_status+0xa4>)
    d17e:	4b0e      	ldr	r3, [pc, #56]	; (d1b8 <print_stack_status+0x88>)
    d180:	4798      	blx	r3
        break;
    d182:	e7e2      	b.n	d14a <print_stack_status+0x1a>
            printf("\nMAC_paused\n\r");
    d184:	4814      	ldr	r0, [pc, #80]	; (d1d8 <print_stack_status+0xa8>)
    d186:	4b0c      	ldr	r3, [pc, #48]	; (d1b8 <print_stack_status+0x88>)
    d188:	4798      	blx	r3
        break;
    d18a:	e7de      	b.n	d14a <print_stack_status+0x1a>
            printf("\nno_free_channels_found\n\r");
    d18c:	4813      	ldr	r0, [pc, #76]	; (d1dc <print_stack_status+0xac>)
    d18e:	4b0a      	ldr	r3, [pc, #40]	; (d1b8 <print_stack_status+0x88>)
    d190:	4798      	blx	r3
        break;
    d192:	e7da      	b.n	d14a <print_stack_status+0x1a>
            printf("\nrequest_invalid\n\r");
    d194:	4812      	ldr	r0, [pc, #72]	; (d1e0 <print_stack_status+0xb0>)
    d196:	4b08      	ldr	r3, [pc, #32]	; (d1b8 <print_stack_status+0x88>)
    d198:	4798      	blx	r3
        break;
    d19a:	e7d6      	b.n	d14a <print_stack_status+0x1a>
            printf("\nprev_join_request_in_progress\n\r");
    d19c:	4811      	ldr	r0, [pc, #68]	; (d1e4 <print_stack_status+0xb4>)
    d19e:	4b06      	ldr	r3, [pc, #24]	; (d1b8 <print_stack_status+0x88>)
    d1a0:	4798      	blx	r3
        break;
    d1a2:	e7d2      	b.n	d14a <print_stack_status+0x1a>
           printf("\nrequest_failed %d\n\r",status);
    d1a4:	0001      	movs	r1, r0
    d1a6:	4810      	ldr	r0, [pc, #64]	; (d1e8 <print_stack_status+0xb8>)
    d1a8:	4b03      	ldr	r3, [pc, #12]	; (d1b8 <print_stack_status+0x88>)
    d1aa:	4798      	blx	r3
}
    d1ac:	e7cd      	b.n	d14a <print_stack_status+0x1a>
    d1ae:	46c0      	nop			; (mov r8, r8)
    d1b0:	0001e4c4 	.word	0x0001e4c4
    d1b4:	0001e954 	.word	0x0001e954
    d1b8:	000182cd 	.word	0x000182cd
    d1bc:	0001e968 	.word	0x0001e968
    d1c0:	0001e988 	.word	0x0001e988
    d1c4:	0001e9a8 	.word	0x0001e9a8
    d1c8:	0001e9c0 	.word	0x0001e9c0
    d1cc:	0001e9d8 	.word	0x0001e9d8
    d1d0:	0001e9f8 	.word	0x0001e9f8
    d1d4:	0001ea1c 	.word	0x0001ea1c
    d1d8:	0001ea38 	.word	0x0001ea38
    d1dc:	0001ea48 	.word	0x0001ea48
    d1e0:	0001ea64 	.word	0x0001ea64
    d1e4:	0001ea78 	.word	0x0001ea78
    d1e8:	0001ea9c 	.word	0x0001ea9c

0000d1ec <cert_joindata_callback>:
{
    d1ec:	b510      	push	{r4, lr}
    d1ee:	b082      	sub	sp, #8
    if(true == status)
    d1f0:	2800      	cmp	r0, #0
    d1f2:	d011      	beq.n	d218 <cert_joindata_callback+0x2c>
        printf("\nJoining Successful\n\r");
    d1f4:	4810      	ldr	r0, [pc, #64]	; (d238 <cert_joindata_callback+0x4c>)
    d1f6:	4b11      	ldr	r3, [pc, #68]	; (d23c <cert_joindata_callback+0x50>)
    d1f8:	4798      	blx	r3
        stackRetStatus = SwTimerStart(certAppTimerId, MS_TO_US(CERT_APP_TIMEOUT), SW_TIMEOUT_RELATIVE, (void*)cert_app_timer_callback, NULL);
    d1fa:	4b11      	ldr	r3, [pc, #68]	; (d240 <cert_joindata_callback+0x54>)
    d1fc:	7818      	ldrb	r0, [r3, #0]
    d1fe:	2300      	movs	r3, #0
    d200:	9300      	str	r3, [sp, #0]
    d202:	4b10      	ldr	r3, [pc, #64]	; (d244 <cert_joindata_callback+0x58>)
    d204:	2200      	movs	r2, #0
    d206:	4910      	ldr	r1, [pc, #64]	; (d248 <cert_joindata_callback+0x5c>)
    d208:	4c10      	ldr	r4, [pc, #64]	; (d24c <cert_joindata_callback+0x60>)
    d20a:	47a0      	blx	r4
        if(stackRetStatus != LORAWAN_SUCCESS)
    d20c:	2808      	cmp	r0, #8
    d20e:	d00a      	beq.n	d226 <cert_joindata_callback+0x3a>
            printf("ERROR : Unable to start Certification Timer\r\n");
    d210:	480f      	ldr	r0, [pc, #60]	; (d250 <cert_joindata_callback+0x64>)
    d212:	4b10      	ldr	r3, [pc, #64]	; (d254 <cert_joindata_callback+0x68>)
    d214:	4798      	blx	r3
    d216:	e006      	b.n	d226 <cert_joindata_callback+0x3a>
        stackRetStatus = LORAWAN_Join(LORAWAN_OTAA);
    d218:	2000      	movs	r0, #0
    d21a:	4b0f      	ldr	r3, [pc, #60]	; (d258 <cert_joindata_callback+0x6c>)
    d21c:	4798      	blx	r3
        if (stackRetStatus == LORAWAN_SUCCESS)
    d21e:	2808      	cmp	r0, #8
    d220:	d006      	beq.n	d230 <cert_joindata_callback+0x44>
            print_stack_status(stackRetStatus);
    d222:	4b0e      	ldr	r3, [pc, #56]	; (d25c <cert_joindata_callback+0x70>)
    d224:	4798      	blx	r3
    printf("\n\r*******************************************************\n\r");
    d226:	480e      	ldr	r0, [pc, #56]	; (d260 <cert_joindata_callback+0x74>)
    d228:	4b04      	ldr	r3, [pc, #16]	; (d23c <cert_joindata_callback+0x50>)
    d22a:	4798      	blx	r3
}
    d22c:	b002      	add	sp, #8
    d22e:	bd10      	pop	{r4, pc}
            printf("\nOTAA Join Request Sent\n\r");
    d230:	480c      	ldr	r0, [pc, #48]	; (d264 <cert_joindata_callback+0x78>)
    d232:	4b02      	ldr	r3, [pc, #8]	; (d23c <cert_joindata_callback+0x50>)
    d234:	4798      	blx	r3
    d236:	e7f6      	b.n	d226 <cert_joindata_callback+0x3a>
    d238:	0001e8a8 	.word	0x0001e8a8
    d23c:	000182cd 	.word	0x000182cd
    d240:	20000fbb 	.word	0x20000fbb
    d244:	0000d269 	.word	0x0000d269
    d248:	004c4b40 	.word	0x004c4b40
    d24c:	0000c4b5 	.word	0x0000c4b5
    d250:	0001e8c0 	.word	0x0001e8c0
    d254:	000183a5 	.word	0x000183a5
    d258:	000101c5 	.word	0x000101c5
    d25c:	0000d131 	.word	0x0000d131
    d260:	0001e90c 	.word	0x0001e90c
    d264:	0001e8f0 	.word	0x0001e8f0

0000d268 <cert_app_timer_callback>:

/*********************************************************************//*
 \brief    Certification Timer Callback
 ************************************************************************/
static void cert_app_timer_callback(uint8_t param)
{
    d268:	b510      	push	{r4, lr}
    d26a:	b082      	sub	sp, #8
    StackRetStatus_t status;
    SwTimerStart(certAppTimerId, MS_TO_US(CERT_APP_TIMEOUT), SW_TIMEOUT_RELATIVE, (void *)cert_app_timer_callback, NULL);
    d26c:	4b1c      	ldr	r3, [pc, #112]	; (d2e0 <cert_app_timer_callback+0x78>)
    d26e:	7818      	ldrb	r0, [r3, #0]
    d270:	2300      	movs	r3, #0
    d272:	9300      	str	r3, [sp, #0]
    d274:	4b1b      	ldr	r3, [pc, #108]	; (d2e4 <cert_app_timer_callback+0x7c>)
    d276:	2200      	movs	r2, #0
    d278:	491b      	ldr	r1, [pc, #108]	; (d2e8 <cert_app_timer_callback+0x80>)
    d27a:	4c1c      	ldr	r4, [pc, #112]	; (d2ec <cert_app_timer_callback+0x84>)
    d27c:	47a0      	blx	r4

    if(testMode == OFF)
    d27e:	4b1c      	ldr	r3, [pc, #112]	; (d2f0 <cert_app_timer_callback+0x88>)
    d280:	781b      	ldrb	r3, [r3, #0]
    d282:	2b00      	cmp	r3, #0
    d284:	d111      	bne.n	d2aa <cert_app_timer_callback+0x42>
    {
        lorawanSendReq.buffer = sendData;
    d286:	481b      	ldr	r0, [pc, #108]	; (d2f4 <cert_app_timer_callback+0x8c>)
    d288:	4b1b      	ldr	r3, [pc, #108]	; (d2f8 <cert_app_timer_callback+0x90>)
    d28a:	6043      	str	r3, [r0, #4]
        lorawanSendReq.bufferLength = sendDataLen;
    d28c:	4b1b      	ldr	r3, [pc, #108]	; (d2fc <cert_app_timer_callback+0x94>)
    d28e:	881b      	ldrh	r3, [r3, #0]
    d290:	7203      	strb	r3, [r0, #8]
        lorawanSendReq.confirmed = CERT_APP_TRANSMISSION_TYPE;
    d292:	2300      	movs	r3, #0
    d294:	7003      	strb	r3, [r0, #0]
        lorawanSendReq.port = CERT_APP_FPORT;
    d296:	3301      	adds	r3, #1
    d298:	7043      	strb	r3, [r0, #1]
        status = LORAWAN_Send(&lorawanSendReq);
    d29a:	4b19      	ldr	r3, [pc, #100]	; (d300 <cert_app_timer_callback+0x98>)
    d29c:	4798      	blx	r3
        lorawanSendReq.confirmed = bTxCnf;
        lorawanSendReq.port = TEST_PORT_NB;
        status = LORAWAN_Send(&lorawanSendReq);
    }

    if (LORAWAN_SUCCESS == status)
    d29e:	2808      	cmp	r0, #8
    d2a0:	d011      	beq.n	d2c6 <cert_app_timer_callback+0x5e>
        printf("\nFrame Sent:");
        print_array(lorawanSendReq.buffer,lorawanSendReq.bufferLength);
    }
    else
    {
        print_stack_status(status);
    d2a2:	4b18      	ldr	r3, [pc, #96]	; (d304 <cert_app_timer_callback+0x9c>)
    d2a4:	4798      	blx	r3
    }
}
    d2a6:	b002      	add	sp, #8
    d2a8:	bd10      	pop	{r4, pc}
        lorawanSendReq.buffer = sendData;
    d2aa:	4812      	ldr	r0, [pc, #72]	; (d2f4 <cert_app_timer_callback+0x8c>)
    d2ac:	4b12      	ldr	r3, [pc, #72]	; (d2f8 <cert_app_timer_callback+0x90>)
    d2ae:	6043      	str	r3, [r0, #4]
        lorawanSendReq.bufferLength = sendDataLen;
    d2b0:	4b12      	ldr	r3, [pc, #72]	; (d2fc <cert_app_timer_callback+0x94>)
    d2b2:	881b      	ldrh	r3, [r3, #0]
    d2b4:	7203      	strb	r3, [r0, #8]
        lorawanSendReq.confirmed = bTxCnf;
    d2b6:	4b14      	ldr	r3, [pc, #80]	; (d308 <cert_app_timer_callback+0xa0>)
    d2b8:	781b      	ldrb	r3, [r3, #0]
    d2ba:	7003      	strb	r3, [r0, #0]
        lorawanSendReq.port = TEST_PORT_NB;
    d2bc:	23e0      	movs	r3, #224	; 0xe0
    d2be:	7043      	strb	r3, [r0, #1]
        status = LORAWAN_Send(&lorawanSendReq);
    d2c0:	4b0f      	ldr	r3, [pc, #60]	; (d300 <cert_app_timer_callback+0x98>)
    d2c2:	4798      	blx	r3
    d2c4:	e7eb      	b.n	d29e <cert_app_timer_callback+0x36>
        pktRxd = false;
    d2c6:	2200      	movs	r2, #0
    d2c8:	4b10      	ldr	r3, [pc, #64]	; (d30c <cert_app_timer_callback+0xa4>)
    d2ca:	701a      	strb	r2, [r3, #0]
        printf("\nFrame Sent:");
    d2cc:	4810      	ldr	r0, [pc, #64]	; (d310 <cert_app_timer_callback+0xa8>)
    d2ce:	4b11      	ldr	r3, [pc, #68]	; (d314 <cert_app_timer_callback+0xac>)
    d2d0:	4798      	blx	r3
        print_array(lorawanSendReq.buffer,lorawanSendReq.bufferLength);
    d2d2:	4b08      	ldr	r3, [pc, #32]	; (d2f4 <cert_app_timer_callback+0x8c>)
    d2d4:	7a19      	ldrb	r1, [r3, #8]
    d2d6:	6858      	ldr	r0, [r3, #4]
    d2d8:	4b0f      	ldr	r3, [pc, #60]	; (d318 <cert_app_timer_callback+0xb0>)
    d2da:	4798      	blx	r3
    d2dc:	e7e3      	b.n	d2a6 <cert_app_timer_callback+0x3e>
    d2de:	46c0      	nop			; (mov r8, r8)
    d2e0:	20000fbb 	.word	0x20000fbb
    d2e4:	0000d269 	.word	0x0000d269
    d2e8:	004c4b40 	.word	0x004c4b40
    d2ec:	0000c4b5 	.word	0x0000c4b5
    d2f0:	20001036 	.word	0x20001036
    d2f4:	20000fc0 	.word	0x20000fc0
    d2f8:	20000fd0 	.word	0x20000fd0
    d2fc:	20001034 	.word	0x20001034
    d300:	0000f5a9 	.word	0x0000f5a9
    d304:	0000d131 	.word	0x0000d131
    d308:	20000fba 	.word	0x20000fba
    d30c:	20000fcc 	.word	0x20000fcc
    d310:	0001e764 	.word	0x0001e764
    d314:	000182cd 	.word	0x000182cd
    d318:	0000d0f1 	.word	0x0000d0f1

0000d31c <cert_appdata_callback>:
{
    d31c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d31e:	46c6      	mov	lr, r8
    d320:	b500      	push	{lr}
    if (LORAWAN_EVT_RX_DATA_AVAILABLE == appdata->evt)
    d322:	780b      	ldrb	r3, [r1, #0]
    d324:	2b02      	cmp	r3, #2
    d326:	d005      	beq.n	d334 <cert_appdata_callback+0x18>
    else if(LORAWAN_EVT_TRANSACTION_COMPLETE == appdata->evt)
    d328:	2b04      	cmp	r3, #4
    d32a:	d100      	bne.n	d32e <cert_appdata_callback+0x12>
    d32c:	e0b8      	b.n	d4a0 <cert_appdata_callback+0x184>
}
    d32e:	bc04      	pop	{r2}
    d330:	4690      	mov	r8, r2
    d332:	bdf0      	pop	{r4, r5, r6, r7, pc}
        StackRetStatus_t status = appdata->param.rxData.status;
    d334:	7b4b      	ldrb	r3, [r1, #13]
        switch(status)
    d336:	2b08      	cmp	r3, #8
    d338:	d000      	beq.n	d33c <cert_appdata_callback+0x20>
    d33a:	e0ac      	b.n	d496 <cert_appdata_callback+0x17a>
        uint8_t *pData = appdata->param.rxData.pData;
    d33c:	688e      	ldr	r6, [r1, #8]
        uint8_t dataLength = appdata->param.rxData.dataLength;
    d33e:	7b0b      	ldrb	r3, [r1, #12]
    d340:	4698      	mov	r8, r3
        uint32_t devAddress = appdata->param.rxData.devAddr;
    d342:	684d      	ldr	r5, [r1, #4]
                 pktRxd = true;
    d344:	2201      	movs	r2, #1
    d346:	4b66      	ldr	r3, [pc, #408]	; (d4e0 <cert_appdata_callback+0x1c4>)
    d348:	701a      	strb	r2, [r3, #0]
                 if((dataLength > 0U) && (NULL != pData))
    d34a:	4643      	mov	r3, r8
    d34c:	2b00      	cmp	r3, #0
    d34e:	d100      	bne.n	d352 <cert_appdata_callback+0x36>
    d350:	e096      	b.n	d480 <cert_appdata_callback+0x164>
    d352:	2e00      	cmp	r6, #0
    d354:	d100      	bne.n	d358 <cert_appdata_callback+0x3c>
    d356:	e093      	b.n	d480 <cert_appdata_callback+0x164>
                     printf("*** Received DL Data ***\n\r");
    d358:	4862      	ldr	r0, [pc, #392]	; (d4e4 <cert_appdata_callback+0x1c8>)
    d35a:	4c63      	ldr	r4, [pc, #396]	; (d4e8 <cert_appdata_callback+0x1cc>)
    d35c:	47a0      	blx	r4
                     printf("\nFrame Received at port %d\n\r",pData[0]);
    d35e:	7831      	ldrb	r1, [r6, #0]
    d360:	4862      	ldr	r0, [pc, #392]	; (d4ec <cert_appdata_callback+0x1d0>)
    d362:	47a0      	blx	r4
                     printf("\nFrame Length - %d\n\r",dataLength);
    d364:	4641      	mov	r1, r8
    d366:	4862      	ldr	r0, [pc, #392]	; (d4f0 <cert_appdata_callback+0x1d4>)
    d368:	47a0      	blx	r4
                     printf("\nAddress - 0x%lx\n\r", devAddress);
    d36a:	0029      	movs	r1, r5
    d36c:	4861      	ldr	r0, [pc, #388]	; (d4f4 <cert_appdata_callback+0x1d8>)
    d36e:	47a0      	blx	r4
                     printf ("\nPayload: ");
    d370:	4861      	ldr	r0, [pc, #388]	; (d4f8 <cert_appdata_callback+0x1dc>)
    d372:	47a0      	blx	r4
                     for (uint8_t i =0; i<dataLength - 1; i++)
    d374:	4643      	mov	r3, r8
    d376:	1e5f      	subs	r7, r3, #1
    d378:	2f00      	cmp	r7, #0
    d37a:	dd09      	ble.n	d390 <cert_appdata_callback+0x74>
    d37c:	2400      	movs	r4, #0
                         printf("%x",pData[i+1]);
    d37e:	4d5a      	ldr	r5, [pc, #360]	; (d4e8 <cert_appdata_callback+0x1cc>)
    d380:	1933      	adds	r3, r6, r4
    d382:	7859      	ldrb	r1, [r3, #1]
    d384:	485d      	ldr	r0, [pc, #372]	; (d4fc <cert_appdata_callback+0x1e0>)
    d386:	47a8      	blx	r5
                     for (uint8_t i =0; i<dataLength - 1; i++)
    d388:	3401      	adds	r4, #1
    d38a:	b2e4      	uxtb	r4, r4
    d38c:	42bc      	cmp	r4, r7
    d38e:	dbf7      	blt.n	d380 <cert_appdata_callback+0x64>
                     printf("\r\n*************************\r\n");
    d390:	485b      	ldr	r0, [pc, #364]	; (d500 <cert_appdata_callback+0x1e4>)
    d392:	4b5c      	ldr	r3, [pc, #368]	; (d504 <cert_appdata_callback+0x1e8>)
    d394:	4798      	blx	r3
                     if(pData[0] == TEST_PORT_NB)
    d396:	7833      	ldrb	r3, [r6, #0]
    d398:	2be0      	cmp	r3, #224	; 0xe0
    d39a:	d178      	bne.n	d48e <cert_appdata_callback+0x172>
                       cert_handle_cert_rx_data(pData+1,dataLength-1);
    d39c:	4643      	mov	r3, r8
    d39e:	1e58      	subs	r0, r3, #1
    d3a0:	b2c0      	uxtb	r0, r0
 ************************************************************************/
static void cert_handle_cert_rx_data(uint8_t* data,uint8_t dataLen)
{
    StackRetStatus_t status;

    if (dataLen > 0)
    d3a2:	2800      	cmp	r0, #0
    d3a4:	d073      	beq.n	d48e <cert_appdata_callback+0x172>
    {
        downlinkCtr++;
    d3a6:	4a58      	ldr	r2, [pc, #352]	; (d508 <cert_appdata_callback+0x1ec>)
    d3a8:	8813      	ldrh	r3, [r2, #0]
    d3aa:	3301      	adds	r3, #1
    d3ac:	b29b      	uxth	r3, r3
    d3ae:	8013      	strh	r3, [r2, #0]
        uplinkTestNoResp = 0;
    d3b0:	2100      	movs	r1, #0
    d3b2:	4a56      	ldr	r2, [pc, #344]	; (d50c <cert_appdata_callback+0x1f0>)
    d3b4:	7011      	strb	r1, [r2, #0]

        //prepare the next data
        sendData[0] = (uint8_t) (downlinkCtr >> 8);
    d3b6:	4a56      	ldr	r2, [pc, #344]	; (d510 <cert_appdata_callback+0x1f4>)
    d3b8:	0a19      	lsrs	r1, r3, #8
    d3ba:	7011      	strb	r1, [r2, #0]
        sendData[1] = (uint8_t) (downlinkCtr);
    d3bc:	7053      	strb	r3, [r2, #1]
        sendDataLen = 2;
    d3be:	2202      	movs	r2, #2
    d3c0:	4b54      	ldr	r3, [pc, #336]	; (d514 <cert_appdata_callback+0x1f8>)
    d3c2:	801a      	strh	r2, [r3, #0]

        switch (data[0])
    d3c4:	7873      	ldrb	r3, [r6, #1]
    d3c6:	2b06      	cmp	r3, #6
    d3c8:	d861      	bhi.n	d48e <cert_appdata_callback+0x172>
    d3ca:	009b      	lsls	r3, r3, #2
    d3cc:	4a52      	ldr	r2, [pc, #328]	; (d518 <cert_appdata_callback+0x1fc>)
    d3ce:	58d3      	ldr	r3, [r2, r3]
    d3d0:	469f      	mov	pc, r3
        {
            case DEACTIVATE_MODE:
            {
                if (dataLen == 1) {
    d3d2:	2801      	cmp	r0, #1
    d3d4:	d15b      	bne.n	d48e <cert_appdata_callback+0x172>
                    //Deactivated test mode
                    testMode = OFF;
    d3d6:	2200      	movs	r2, #0
    d3d8:	4b50      	ldr	r3, [pc, #320]	; (d51c <cert_appdata_callback+0x200>)
    d3da:	701a      	strb	r2, [r3, #0]
    d3dc:	e057      	b.n	d48e <cert_appdata_callback+0x172>
            break;

            case ACTIVATE_MODE:
            {
                bool bPayloadValid = false;
                if (dataLen == 4)
    d3de:	2804      	cmp	r0, #4
    d3e0:	d155      	bne.n	d48e <cert_appdata_callback+0x172>
    d3e2:	1cb3      	adds	r3, r6, #2
    d3e4:	3605      	adds	r6, #5
                {
                    for (uint8_t i = 0; i < 4; i++)
                    {
                        if (data[i] == 1)
    d3e6:	781a      	ldrb	r2, [r3, #0]
    d3e8:	2a01      	cmp	r2, #1
    d3ea:	d150      	bne.n	d48e <cert_appdata_callback+0x172>
    d3ec:	3301      	adds	r3, #1
                    for (uint8_t i = 0; i < 4; i++)
    d3ee:	42b3      	cmp	r3, r6
    d3f0:	d1f9      	bne.n	d3e6 <cert_appdata_callback+0xca>
    testMode = ON;
    d3f2:	2201      	movs	r2, #1
    d3f4:	4b49      	ldr	r3, [pc, #292]	; (d51c <cert_appdata_callback+0x200>)
    d3f6:	701a      	strb	r2, [r3, #0]
    downlinkCtr = 0;
    d3f8:	2300      	movs	r3, #0
    d3fa:	4a43      	ldr	r2, [pc, #268]	; (d508 <cert_appdata_callback+0x1ec>)
    d3fc:	8013      	strh	r3, [r2, #0]
    sendData[0] = (uint8_t) (downlinkCtr >> 8);
    d3fe:	4a44      	ldr	r2, [pc, #272]	; (d510 <cert_appdata_callback+0x1f4>)
    d400:	7013      	strb	r3, [r2, #0]
    sendData[1] = (uint8_t) (downlinkCtr);
    d402:	7053      	strb	r3, [r2, #1]
    printf("\r\nTest Mode Activated\r\n");
    d404:	4846      	ldr	r0, [pc, #280]	; (d520 <cert_appdata_callback+0x204>)
    d406:	4b3f      	ldr	r3, [pc, #252]	; (d504 <cert_appdata_callback+0x1e8>)
    d408:	4798      	blx	r3
    d40a:	e040      	b.n	d48e <cert_appdata_callback+0x172>
            }
            break;

            case CNF_MODE:
            {
                if (dataLen == 1)
    d40c:	2801      	cmp	r0, #1
    d40e:	d13e      	bne.n	d48e <cert_appdata_callback+0x172>
                {
                    //Confirmed frames
                    bTxCnf = true;
    d410:	2201      	movs	r2, #1
    d412:	4b44      	ldr	r3, [pc, #272]	; (d524 <cert_appdata_callback+0x208>)
    d414:	701a      	strb	r2, [r3, #0]
    d416:	e03a      	b.n	d48e <cert_appdata_callback+0x172>
            }
            break;

            case UNCNF_MODE:
            {
                if (dataLen == 1)
    d418:	2801      	cmp	r0, #1
    d41a:	d138      	bne.n	d48e <cert_appdata_callback+0x172>
                {
                    //Unconfirmed frames
                    bTxCnf = false;
    d41c:	2200      	movs	r2, #0
    d41e:	4b41      	ldr	r3, [pc, #260]	; (d524 <cert_appdata_callback+0x208>)
    d420:	701a      	strb	r2, [r3, #0]
    d422:	e034      	b.n	d48e <cert_appdata_callback+0x172>
            }
            break;

            case CRYPTO_MODE:
            {
                if (dataLen <= 33) {
    d424:	2821      	cmp	r0, #33	; 0x21
    d426:	d832      	bhi.n	d48e <cert_appdata_callback+0x172>
                    //Cryptography tests
                    sendData[0] = 0x04;
    d428:	2204      	movs	r2, #4
    d42a:	4b39      	ldr	r3, [pc, #228]	; (d510 <cert_appdata_callback+0x1f4>)
    d42c:	701a      	strb	r2, [r3, #0]

                    for (uint8_t i = 1; i < dataLen; i++)
    d42e:	2801      	cmp	r0, #1
    d430:	d910      	bls.n	d454 <cert_appdata_callback+0x138>
    d432:	1cb2      	adds	r2, r6, #2
    d434:	0019      	movs	r1, r3
    d436:	3101      	adds	r1, #1
    d438:	4643      	mov	r3, r8
    d43a:	3b03      	subs	r3, #3
    d43c:	b2db      	uxtb	r3, r3
    d43e:	3303      	adds	r3, #3
    d440:	18f6      	adds	r6, r6, r3
                    {
                        sendData[i] = (((uint16_t) data[i]) + 1) % 256;
    d442:	24ff      	movs	r4, #255	; 0xff
    d444:	7813      	ldrb	r3, [r2, #0]
    d446:	3301      	adds	r3, #1
    d448:	4023      	ands	r3, r4
    d44a:	700b      	strb	r3, [r1, #0]
    d44c:	3201      	adds	r2, #1
    d44e:	3101      	adds	r1, #1
                    for (uint8_t i = 1; i < dataLen; i++)
    d450:	42b2      	cmp	r2, r6
    d452:	d1f7      	bne.n	d444 <cert_appdata_callback+0x128>
                    }
                    sendDataLen = dataLen;
    d454:	4b2f      	ldr	r3, [pc, #188]	; (d514 <cert_appdata_callback+0x1f8>)
    d456:	8018      	strh	r0, [r3, #0]
    d458:	e019      	b.n	d48e <cert_appdata_callback+0x172>
            }
            break;

            case OTAA_TRIGGER_MODE:
            {
                status = LORAWAN_Join(LORAWAN_OTAA);
    d45a:	2000      	movs	r0, #0
    d45c:	4b32      	ldr	r3, [pc, #200]	; (d528 <cert_appdata_callback+0x20c>)
    d45e:	4798      	blx	r3
                if (status == LORAWAN_SUCCESS)
    d460:	2808      	cmp	r0, #8
    d462:	d002      	beq.n	d46a <cert_appdata_callback+0x14e>
                    SwTimerStop(certAppTimerId);
                    printf("\nOTAA Join Request Sent\n\r");
                }
                else
                {
                    print_stack_status(status);
    d464:	4b31      	ldr	r3, [pc, #196]	; (d52c <cert_appdata_callback+0x210>)
    d466:	4798      	blx	r3
    d468:	e011      	b.n	d48e <cert_appdata_callback+0x172>
                    testMode = OFF;
    d46a:	2200      	movs	r2, #0
    d46c:	4b2b      	ldr	r3, [pc, #172]	; (d51c <cert_appdata_callback+0x200>)
    d46e:	701a      	strb	r2, [r3, #0]
                    SwTimerStop(certAppTimerId);
    d470:	4b2f      	ldr	r3, [pc, #188]	; (d530 <cert_appdata_callback+0x214>)
    d472:	7818      	ldrb	r0, [r3, #0]
    d474:	4b2f      	ldr	r3, [pc, #188]	; (d534 <cert_appdata_callback+0x218>)
    d476:	4798      	blx	r3
                    printf("\nOTAA Join Request Sent\n\r");
    d478:	482f      	ldr	r0, [pc, #188]	; (d538 <cert_appdata_callback+0x21c>)
    d47a:	4b1b      	ldr	r3, [pc, #108]	; (d4e8 <cert_appdata_callback+0x1cc>)
    d47c:	4798      	blx	r3
    d47e:	e006      	b.n	d48e <cert_appdata_callback+0x172>
                     uplinkTestNoResp++;
    d480:	4a22      	ldr	r2, [pc, #136]	; (d50c <cert_appdata_callback+0x1f0>)
    d482:	7813      	ldrb	r3, [r2, #0]
    d484:	3301      	adds	r3, #1
    d486:	7013      	strb	r3, [r2, #0]
                     printf("Received ACK for Confirmed data\r\n");
    d488:	482c      	ldr	r0, [pc, #176]	; (d53c <cert_appdata_callback+0x220>)
    d48a:	4b1e      	ldr	r3, [pc, #120]	; (d504 <cert_appdata_callback+0x1e8>)
    d48c:	4798      	blx	r3
                 uplinkTestNoResp = 0;
    d48e:	2200      	movs	r2, #0
    d490:	4b1e      	ldr	r3, [pc, #120]	; (d50c <cert_appdata_callback+0x1f0>)
    d492:	701a      	strb	r2, [r3, #0]
            break;
    d494:	e74b      	b.n	d32e <cert_appdata_callback+0x12>
                printf("\r\nMAC NOK! - %d", status);
    d496:	0019      	movs	r1, r3
    d498:	4829      	ldr	r0, [pc, #164]	; (d540 <cert_appdata_callback+0x224>)
    d49a:	4b13      	ldr	r3, [pc, #76]	; (d4e8 <cert_appdata_callback+0x1cc>)
    d49c:	4798      	blx	r3
            break;
    d49e:	e746      	b.n	d32e <cert_appdata_callback+0x12>
        switch(appdata->param.transCmpl.status)
    d4a0:	7909      	ldrb	r1, [r1, #4]
    d4a2:	2908      	cmp	r1, #8
    d4a4:	d118      	bne.n	d4d8 <cert_appdata_callback+0x1bc>
                if(pktRxd == false)
    d4a6:	4b0e      	ldr	r3, [pc, #56]	; (d4e0 <cert_appdata_callback+0x1c4>)
    d4a8:	781b      	ldrb	r3, [r3, #0]
    d4aa:	2b00      	cmp	r3, #0
    d4ac:	d003      	beq.n	d4b6 <cert_appdata_callback+0x19a>
        printf("\n\r*************************************************\n\r");
    d4ae:	4825      	ldr	r0, [pc, #148]	; (d544 <cert_appdata_callback+0x228>)
    d4b0:	4b0d      	ldr	r3, [pc, #52]	; (d4e8 <cert_appdata_callback+0x1cc>)
    d4b2:	4798      	blx	r3
}
    d4b4:	e73b      	b.n	d32e <cert_appdata_callback+0x12>
                    printf("Transmission Success\r\n");
    d4b6:	4824      	ldr	r0, [pc, #144]	; (d548 <cert_appdata_callback+0x22c>)
    d4b8:	4b12      	ldr	r3, [pc, #72]	; (d504 <cert_appdata_callback+0x1e8>)
    d4ba:	4798      	blx	r3
                    uplinkTestNoResp++;
    d4bc:	4a13      	ldr	r2, [pc, #76]	; (d50c <cert_appdata_callback+0x1f0>)
    d4be:	7813      	ldrb	r3, [r2, #0]
    d4c0:	3301      	adds	r3, #1
    d4c2:	7013      	strb	r3, [r2, #0]
                    sendData[0] = (uint8_t) (downlinkCtr >> 8);
    d4c4:	4b10      	ldr	r3, [pc, #64]	; (d508 <cert_appdata_callback+0x1ec>)
    d4c6:	881a      	ldrh	r2, [r3, #0]
    d4c8:	4b11      	ldr	r3, [pc, #68]	; (d510 <cert_appdata_callback+0x1f4>)
    d4ca:	0a11      	lsrs	r1, r2, #8
    d4cc:	7019      	strb	r1, [r3, #0]
                    sendData[1] = (uint8_t) (downlinkCtr);
    d4ce:	705a      	strb	r2, [r3, #1]
                    sendDataLen = 2;
    d4d0:	2202      	movs	r2, #2
    d4d2:	4b10      	ldr	r3, [pc, #64]	; (d514 <cert_appdata_callback+0x1f8>)
    d4d4:	801a      	strh	r2, [r3, #0]
    d4d6:	e7ea      	b.n	d4ae <cert_appdata_callback+0x192>
                printf("\r\nMAC NOK! - %d", appdata->param.transCmpl.status );
    d4d8:	4819      	ldr	r0, [pc, #100]	; (d540 <cert_appdata_callback+0x224>)
    d4da:	4b03      	ldr	r3, [pc, #12]	; (d4e8 <cert_appdata_callback+0x1cc>)
    d4dc:	4798      	blx	r3
            break;
    d4de:	e7e6      	b.n	d4ae <cert_appdata_callback+0x192>
    d4e0:	20000fcc 	.word	0x20000fcc
    d4e4:	0001e774 	.word	0x0001e774
    d4e8:	000182cd 	.word	0x000182cd
    d4ec:	0001e790 	.word	0x0001e790
    d4f0:	0001e7b0 	.word	0x0001e7b0
    d4f4:	0001e7c8 	.word	0x0001e7c8
    d4f8:	0001e7dc 	.word	0x0001e7dc
    d4fc:	0001e7e8 	.word	0x0001e7e8
    d500:	0001e7ec 	.word	0x0001e7ec
    d504:	000183a5 	.word	0x000183a5
    d508:	20000fbc 	.word	0x20000fbc
    d50c:	20001037 	.word	0x20001037
    d510:	20000fd0 	.word	0x20000fd0
    d514:	20001034 	.word	0x20001034
    d518:	0001e4fc 	.word	0x0001e4fc
    d51c:	20001036 	.word	0x20001036
    d520:	0001e890 	.word	0x0001e890
    d524:	20000fba 	.word	0x20000fba
    d528:	000101c5 	.word	0x000101c5
    d52c:	0000d131 	.word	0x0000d131
    d530:	20000fbb 	.word	0x20000fbb
    d534:	0000c7b9 	.word	0x0000c7b9
    d538:	0001e8f0 	.word	0x0001e8f0
    d53c:	0001e80c 	.word	0x0001e80c
    d540:	0001e830 	.word	0x0001e830
    d544:	0001e858 	.word	0x0001e858
    d548:	0001e840 	.word	0x0001e840

0000d54c <cert_app_init>:
{
    d54c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d54e:	b083      	sub	sp, #12
    PDS_DeleteAll();
    d550:	4b63      	ldr	r3, [pc, #396]	; (d6e0 <cert_app_init+0x194>)
    d552:	4798      	blx	r3
    PDS_UnInit();
    d554:	4b63      	ldr	r3, [pc, #396]	; (d6e4 <cert_app_init+0x198>)
    d556:	4798      	blx	r3
    status = SwTimerCreate(&certAppTimerId);
    d558:	4863      	ldr	r0, [pc, #396]	; (d6e8 <cert_app_init+0x19c>)
    d55a:	4b64      	ldr	r3, [pc, #400]	; (d6ec <cert_app_init+0x1a0>)
    d55c:	4798      	blx	r3
    if(status!=LORAWAN_SUCCESS)
    d55e:	2808      	cmp	r0, #8
    d560:	d003      	beq.n	d56a <cert_app_init+0x1e>
        printf("\r\nUnable to start certification timer. Pls check");
    d562:	4863      	ldr	r0, [pc, #396]	; (d6f0 <cert_app_init+0x1a4>)
    d564:	4b63      	ldr	r3, [pc, #396]	; (d6f4 <cert_app_init+0x1a8>)
    d566:	4798      	blx	r3
    d568:	e7fe      	b.n	d568 <cert_app_init+0x1c>
    LORAWAN_Init(cert_appdata_callback, cert_joindata_callback);
    d56a:	4963      	ldr	r1, [pc, #396]	; (d6f8 <cert_app_init+0x1ac>)
    d56c:	4863      	ldr	r0, [pc, #396]	; (d6fc <cert_app_init+0x1b0>)
    d56e:	4b64      	ldr	r3, [pc, #400]	; (d700 <cert_app_init+0x1b4>)
    d570:	4798      	blx	r3
    printf("\r\nPlease select one of the band given below\r\n");
    d572:	4f64      	ldr	r7, [pc, #400]	; (d704 <cert_app_init+0x1b8>)
    d574:	4e64      	ldr	r6, [pc, #400]	; (d708 <cert_app_init+0x1bc>)
        printf("%d. %s\r\n",i,bandStrings[i]);
    d576:	4d65      	ldr	r5, [pc, #404]	; (d70c <cert_app_init+0x1c0>)
    printf("\r\nPlease select one of the band given below\r\n");
    d578:	0038      	movs	r0, r7
    d57a:	47b0      	blx	r6
        printf("%d. %s\r\n",i,bandStrings[i]);
    d57c:	002a      	movs	r2, r5
    d57e:	2101      	movs	r1, #1
    d580:	4863      	ldr	r0, [pc, #396]	; (d710 <cert_app_init+0x1c4>)
    d582:	4c5c      	ldr	r4, [pc, #368]	; (d6f4 <cert_app_init+0x1a8>)
    d584:	47a0      	blx	r4
    printf("Select Regional Band : ");
    d586:	4863      	ldr	r0, [pc, #396]	; (d714 <cert_app_init+0x1c8>)
    d588:	47a0      	blx	r4
    rxChar = sio2host_getchar();
    d58a:	4b63      	ldr	r3, [pc, #396]	; (d718 <cert_app_init+0x1cc>)
    d58c:	4798      	blx	r3
    d58e:	466b      	mov	r3, sp
    d590:	71d8      	strb	r0, [r3, #7]
    d592:	3307      	adds	r3, #7
    choice = atoi(charPtr);
    d594:	0018      	movs	r0, r3
    d596:	4b61      	ldr	r3, [pc, #388]	; (d71c <cert_app_init+0x1d0>)
    d598:	4798      	blx	r3
    d59a:	0003      	movs	r3, r0
    if ( (choice >= sizeof(bandTable)) || (choice == 0) )
    d59c:	b2c2      	uxtb	r2, r0
    d59e:	2a01      	cmp	r2, #1
    d5a0:	d1ea      	bne.n	d578 <cert_app_init+0x2c>
        LORAWAN_Reset(bandTable[choice]);
    d5a2:	20ff      	movs	r0, #255	; 0xff
    d5a4:	4018      	ands	r0, r3
    d5a6:	4b5e      	ldr	r3, [pc, #376]	; (d720 <cert_app_init+0x1d4>)
    d5a8:	5c18      	ldrb	r0, [r3, r0]
    d5aa:	4b5e      	ldr	r3, [pc, #376]	; (d724 <cert_app_init+0x1d8>)
    d5ac:	4798      	blx	r3
    printf("\n\n\r*******************************************************\n\r");
    d5ae:	485e      	ldr	r0, [pc, #376]	; (d728 <cert_app_init+0x1dc>)
    d5b0:	4b50      	ldr	r3, [pc, #320]	; (d6f4 <cert_app_init+0x1a8>)
    d5b2:	4798      	blx	r3
    printf("\r\nInit - Successful\r\n");
    d5b4:	485d      	ldr	r0, [pc, #372]	; (d72c <cert_app_init+0x1e0>)
    d5b6:	4b54      	ldr	r3, [pc, #336]	; (d708 <cert_app_init+0x1bc>)
    d5b8:	4798      	blx	r3
    bool adrValue = true ;
    d5ba:	2301      	movs	r3, #1
    d5bc:	466a      	mov	r2, sp
    d5be:	7193      	strb	r3, [r2, #6]
    bool testModeEnable = true;
    d5c0:	466a      	mov	r2, sp
    d5c2:	1dd1      	adds	r1, r2, #7
    d5c4:	700b      	strb	r3, [r1, #0]
    status = LORAWAN_SetAttr(TEST_MODE_ENABLE,&testModeEnable);
    d5c6:	202d      	movs	r0, #45	; 0x2d
    d5c8:	4b59      	ldr	r3, [pc, #356]	; (d730 <cert_app_init+0x1e4>)
    d5ca:	4798      	blx	r3
    if(status == LORAWAN_SUCCESS)
    d5cc:	2808      	cmp	r0, #8
    d5ce:	d003      	beq.n	d5d8 <cert_app_init+0x8c>
        printf("\nMAC parameters initialization failed\n\r");
    d5d0:	4858      	ldr	r0, [pc, #352]	; (d734 <cert_app_init+0x1e8>)
    d5d2:	4b48      	ldr	r3, [pc, #288]	; (d6f4 <cert_app_init+0x1a8>)
    d5d4:	4798      	blx	r3
    d5d6:	e006      	b.n	d5e6 <cert_app_init+0x9a>
        status = LORAWAN_SetAttr(ADR,&adrValue);
    d5d8:	466b      	mov	r3, sp
    d5da:	1d99      	adds	r1, r3, #6
    d5dc:	3802      	subs	r0, #2
    d5de:	4b54      	ldr	r3, [pc, #336]	; (d730 <cert_app_init+0x1e4>)
    d5e0:	4798      	blx	r3
    if (LORAWAN_SUCCESS != status)
    d5e2:	2808      	cmp	r0, #8
    d5e4:	d1f4      	bne.n	d5d0 <cert_app_init+0x84>
	uint8_t dataRate = DR0;
    d5e6:	466b      	mov	r3, sp
    d5e8:	1dd9      	adds	r1, r3, #7
    d5ea:	2300      	movs	r3, #0
    d5ec:	700b      	strb	r3, [r1, #0]
	status = LORAWAN_SetAttr (CURRENT_DATARATE, &dataRate);
    d5ee:	2007      	movs	r0, #7
    d5f0:	4b4f      	ldr	r3, [pc, #316]	; (d730 <cert_app_init+0x1e4>)
    d5f2:	4798      	blx	r3
    d5f4:	0004      	movs	r4, r0
    printf("\n********************Join Parameters********************\n\r");
    d5f6:	4850      	ldr	r0, [pc, #320]	; (d738 <cert_app_init+0x1ec>)
    d5f8:	4b3e      	ldr	r3, [pc, #248]	; (d6f4 <cert_app_init+0x1a8>)
    d5fa:	4798      	blx	r3
		if (LORAWAN_SUCCESS == status)
    d5fc:	2c08      	cmp	r4, #8
    d5fe:	d164      	bne.n	d6ca <cert_app_init+0x17e>
			status = LORAWAN_SetAttr (DEV_ADDR, &devAddr);
    d600:	494e      	ldr	r1, [pc, #312]	; (d73c <cert_app_init+0x1f0>)
    d602:	2002      	movs	r0, #2
    d604:	4b4a      	ldr	r3, [pc, #296]	; (d730 <cert_app_init+0x1e4>)
    d606:	4798      	blx	r3
        if (LORAWAN_SUCCESS == status)
    d608:	2808      	cmp	r0, #8
    d60a:	d15e      	bne.n	d6ca <cert_app_init+0x17e>
            printf("\nDevice Addr - ");
    d60c:	484c      	ldr	r0, [pc, #304]	; (d740 <cert_app_init+0x1f4>)
    d60e:	4c39      	ldr	r4, [pc, #228]	; (d6f4 <cert_app_init+0x1a8>)
    d610:	47a0      	blx	r4
            printf("0x%lx \n\r", devAddr);
    d612:	4b4a      	ldr	r3, [pc, #296]	; (d73c <cert_app_init+0x1f0>)
    d614:	6819      	ldr	r1, [r3, #0]
    d616:	484b      	ldr	r0, [pc, #300]	; (d744 <cert_app_init+0x1f8>)
    d618:	47a0      	blx	r4
            status = LORAWAN_SetAttr (APPS_KEY, appsKey);
    d61a:	494b      	ldr	r1, [pc, #300]	; (d748 <cert_app_init+0x1fc>)
    d61c:	2005      	movs	r0, #5
    d61e:	4b44      	ldr	r3, [pc, #272]	; (d730 <cert_app_init+0x1e4>)
    d620:	4798      	blx	r3
        if (LORAWAN_SUCCESS == status)
    d622:	2808      	cmp	r0, #8
    d624:	d151      	bne.n	d6ca <cert_app_init+0x17e>
            printf("\nApplication Session Key - ");
    d626:	4849      	ldr	r0, [pc, #292]	; (d74c <cert_app_init+0x200>)
    d628:	4b32      	ldr	r3, [pc, #200]	; (d6f4 <cert_app_init+0x1a8>)
    d62a:	4798      	blx	r3
            print_array((uint8_t *)&appsKey, sizeof(appsKey));
    d62c:	2110      	movs	r1, #16
    d62e:	4846      	ldr	r0, [pc, #280]	; (d748 <cert_app_init+0x1fc>)
    d630:	4b47      	ldr	r3, [pc, #284]	; (d750 <cert_app_init+0x204>)
    d632:	4798      	blx	r3
            status = LORAWAN_SetAttr (NWKS_KEY, nwksKey);
    d634:	4947      	ldr	r1, [pc, #284]	; (d754 <cert_app_init+0x208>)
    d636:	2004      	movs	r0, #4
    d638:	4b3d      	ldr	r3, [pc, #244]	; (d730 <cert_app_init+0x1e4>)
    d63a:	4798      	blx	r3
        if (LORAWAN_SUCCESS == status)
    d63c:	2808      	cmp	r0, #8
    d63e:	d144      	bne.n	d6ca <cert_app_init+0x17e>
            printf("\nNetwork Session Key - ");
    d640:	4845      	ldr	r0, [pc, #276]	; (d758 <cert_app_init+0x20c>)
    d642:	4b2c      	ldr	r3, [pc, #176]	; (d6f4 <cert_app_init+0x1a8>)
    d644:	4798      	blx	r3
            print_array((uint8_t *)&nwksKey, sizeof(nwksKey));
    d646:	2110      	movs	r1, #16
    d648:	4842      	ldr	r0, [pc, #264]	; (d754 <cert_app_init+0x208>)
    d64a:	4b41      	ldr	r3, [pc, #260]	; (d750 <cert_app_init+0x204>)
    d64c:	4798      	blx	r3
	uint8_t dataRate = DR0;
    d64e:	466b      	mov	r3, sp
    d650:	1dd9      	adds	r1, r3, #7
    d652:	2300      	movs	r3, #0
    d654:	700b      	strb	r3, [r1, #0]
	status = LORAWAN_SetAttr (CURRENT_DATARATE, &dataRate);
    d656:	2007      	movs	r0, #7
    d658:	4b35      	ldr	r3, [pc, #212]	; (d730 <cert_app_init+0x1e4>)
    d65a:	4798      	blx	r3
    d65c:	0004      	movs	r4, r0
    printf("\n********************Join Parameters********************\n\r");
    d65e:	4836      	ldr	r0, [pc, #216]	; (d738 <cert_app_init+0x1ec>)
    d660:	4b24      	ldr	r3, [pc, #144]	; (d6f4 <cert_app_init+0x1a8>)
    d662:	4798      	blx	r3
		if (LORAWAN_SUCCESS == status)
    d664:	2c08      	cmp	r4, #8
    d666:	d134      	bne.n	d6d2 <cert_app_init+0x186>
			status = LORAWAN_SetAttr (DEV_EUI, devEui);
    d668:	493c      	ldr	r1, [pc, #240]	; (d75c <cert_app_init+0x210>)
    d66a:	2000      	movs	r0, #0
    d66c:	4b30      	ldr	r3, [pc, #192]	; (d730 <cert_app_init+0x1e4>)
    d66e:	4798      	blx	r3
        if (LORAWAN_SUCCESS == status)
    d670:	2808      	cmp	r0, #8
    d672:	d12e      	bne.n	d6d2 <cert_app_init+0x186>
            printf("\nDevice EUI - ");
    d674:	483a      	ldr	r0, [pc, #232]	; (d760 <cert_app_init+0x214>)
    d676:	4b1f      	ldr	r3, [pc, #124]	; (d6f4 <cert_app_init+0x1a8>)
    d678:	4798      	blx	r3
            print_array((uint8_t *)&devEui, sizeof(devEui));
    d67a:	2108      	movs	r1, #8
    d67c:	4837      	ldr	r0, [pc, #220]	; (d75c <cert_app_init+0x210>)
    d67e:	4b34      	ldr	r3, [pc, #208]	; (d750 <cert_app_init+0x204>)
    d680:	4798      	blx	r3
            status = LORAWAN_SetAttr (APP_EUI, appEui);
    d682:	4938      	ldr	r1, [pc, #224]	; (d764 <cert_app_init+0x218>)
    d684:	2001      	movs	r0, #1
    d686:	4b2a      	ldr	r3, [pc, #168]	; (d730 <cert_app_init+0x1e4>)
    d688:	4798      	blx	r3
        if (LORAWAN_SUCCESS == status)
    d68a:	2808      	cmp	r0, #8
    d68c:	d121      	bne.n	d6d2 <cert_app_init+0x186>
            printf("\nApplication EUI - ");
    d68e:	4836      	ldr	r0, [pc, #216]	; (d768 <cert_app_init+0x21c>)
    d690:	4b18      	ldr	r3, [pc, #96]	; (d6f4 <cert_app_init+0x1a8>)
    d692:	4798      	blx	r3
            print_array((uint8_t *)&appEui, sizeof(appEui));
    d694:	2108      	movs	r1, #8
    d696:	4833      	ldr	r0, [pc, #204]	; (d764 <cert_app_init+0x218>)
    d698:	4b2d      	ldr	r3, [pc, #180]	; (d750 <cert_app_init+0x204>)
    d69a:	4798      	blx	r3
            status = LORAWAN_SetAttr (APP_KEY, appKey);
    d69c:	4933      	ldr	r1, [pc, #204]	; (d76c <cert_app_init+0x220>)
    d69e:	2003      	movs	r0, #3
    d6a0:	4b23      	ldr	r3, [pc, #140]	; (d730 <cert_app_init+0x1e4>)
    d6a2:	4798      	blx	r3
        if (LORAWAN_SUCCESS == status)
    d6a4:	2808      	cmp	r0, #8
    d6a6:	d114      	bne.n	d6d2 <cert_app_init+0x186>
            printf("\nApplication Key - ");
    d6a8:	4831      	ldr	r0, [pc, #196]	; (d770 <cert_app_init+0x224>)
    d6aa:	4b12      	ldr	r3, [pc, #72]	; (d6f4 <cert_app_init+0x1a8>)
    d6ac:	4798      	blx	r3
            print_array((uint8_t *)&appKey, sizeof(appKey));
    d6ae:	2110      	movs	r1, #16
    d6b0:	482e      	ldr	r0, [pc, #184]	; (d76c <cert_app_init+0x220>)
    d6b2:	4b27      	ldr	r3, [pc, #156]	; (d750 <cert_app_init+0x204>)
    d6b4:	4798      	blx	r3
    status = LORAWAN_Join(CERT_APP_ACTIVATION_TYPE);
    d6b6:	2001      	movs	r0, #1
    d6b8:	4b2e      	ldr	r3, [pc, #184]	; (d774 <cert_app_init+0x228>)
    d6ba:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    d6bc:	2808      	cmp	r0, #8
    d6be:	d10c      	bne.n	d6da <cert_app_init+0x18e>
        printf("\nJoin Request Sent\n\r");
    d6c0:	482d      	ldr	r0, [pc, #180]	; (d778 <cert_app_init+0x22c>)
    d6c2:	4b0c      	ldr	r3, [pc, #48]	; (d6f4 <cert_app_init+0x1a8>)
    d6c4:	4798      	blx	r3
}
    d6c6:	b003      	add	sp, #12
    d6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf("\nJoin parameters initialization failed\n\r");
    d6ca:	482c      	ldr	r0, [pc, #176]	; (d77c <cert_app_init+0x230>)
    d6cc:	4b09      	ldr	r3, [pc, #36]	; (d6f4 <cert_app_init+0x1a8>)
    d6ce:	4798      	blx	r3
    d6d0:	e7bd      	b.n	d64e <cert_app_init+0x102>
        printf("\nOTAA Join parameters initialization failed\n\r");
    d6d2:	482b      	ldr	r0, [pc, #172]	; (d780 <cert_app_init+0x234>)
    d6d4:	4b07      	ldr	r3, [pc, #28]	; (d6f4 <cert_app_init+0x1a8>)
    d6d6:	4798      	blx	r3
    d6d8:	e7ed      	b.n	d6b6 <cert_app_init+0x16a>
        print_stack_status(status);
    d6da:	4b2a      	ldr	r3, [pc, #168]	; (d784 <cert_app_init+0x238>)
    d6dc:	4798      	blx	r3
}
    d6de:	e7f2      	b.n	d6c6 <cert_app_init+0x17a>
    d6e0:	0000b7f1 	.word	0x0000b7f1
    d6e4:	0000b735 	.word	0x0000b735
    d6e8:	20000fbb 	.word	0x20000fbb
    d6ec:	0000c481 	.word	0x0000c481
    d6f0:	0001e51c 	.word	0x0001e51c
    d6f4:	000182cd 	.word	0x000182cd
    d6f8:	0000d1ed 	.word	0x0000d1ed
    d6fc:	0000d31d 	.word	0x0000d31d
    d700:	0000f431 	.word	0x0000f431
    d704:	0001e550 	.word	0x0001e550
    d708:	000183a5 	.word	0x000183a5
    d70c:	0001e580 	.word	0x0001e580
    d710:	0001e588 	.word	0x0001e588
    d714:	0001e594 	.word	0x0001e594
    d718:	00006401 	.word	0x00006401
    d71c:	00017b79 	.word	0x00017b79
    d720:	0001e518 	.word	0x0001e518
    d724:	0001265d 	.word	0x0001265d
    d728:	0001e5ac 	.word	0x0001e5ac
    d72c:	0001e5ec 	.word	0x0001e5ec
    d730:	000121c1 	.word	0x000121c1
    d734:	0001e604 	.word	0x0001e604
    d738:	0001e62c 	.word	0x0001e62c
    d73c:	2000003c 	.word	0x2000003c
    d740:	0001e668 	.word	0x0001e668
    d744:	0001e678 	.word	0x0001e678
    d748:	2000002c 	.word	0x2000002c
    d74c:	0001e684 	.word	0x0001e684
    d750:	0000d0f1 	.word	0x0000d0f1
    d754:	20000048 	.word	0x20000048
    d758:	0001e6a0 	.word	0x0001e6a0
    d75c:	20000040 	.word	0x20000040
    d760:	0001e6e4 	.word	0x0001e6e4
    d764:	20000014 	.word	0x20000014
    d768:	0001e6f4 	.word	0x0001e6f4
    d76c:	2000001c 	.word	0x2000001c
    d770:	0001e708 	.word	0x0001e708
    d774:	000101c5 	.word	0x000101c5
    d778:	0001e74c 	.word	0x0001e74c
    d77c:	0001e6b8 	.word	0x0001e6b8
    d780:	0001e71c 	.word	0x0001e71c
    d784:	0000d131 	.word	0x0000d131

0000d788 <appPostTask>:
 \brief      App Post Task
 \param[in]  Id of the application to be posted
 ************************************************************************/

void appPostTask(AppTaskIds_t id)
{
    d788:	b510      	push	{r4, lr}
    d78a:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    d78c:	4b07      	ldr	r3, [pc, #28]	; (d7ac <appPostTask+0x24>)
    d78e:	4798      	blx	r3
    appTaskFlags |= (1 << id);
    d790:	4907      	ldr	r1, [pc, #28]	; (d7b0 <appPostTask+0x28>)
    d792:	780b      	ldrb	r3, [r1, #0]
    d794:	2201      	movs	r2, #1
    d796:	40a2      	lsls	r2, r4
    d798:	4313      	orrs	r3, r2
    d79a:	b2db      	uxtb	r3, r3
    d79c:	700b      	strb	r3, [r1, #0]
    ATOMIC_SECTION_EXIT
    d79e:	4b05      	ldr	r3, [pc, #20]	; (d7b4 <appPostTask+0x2c>)
    d7a0:	4798      	blx	r3

    /* Also post a APP task to the system */
    SYSTEM_PostTask(APP_TASK_ID);
    d7a2:	2010      	movs	r0, #16
    d7a4:	4b04      	ldr	r3, [pc, #16]	; (d7b8 <appPostTask+0x30>)
    d7a6:	4798      	blx	r3
}
    d7a8:	bd10      	pop	{r4, pc}
    d7aa:	46c0      	nop			; (mov r8, r8)
    d7ac:	000069ed 	.word	0x000069ed
    d7b0:	20001038 	.word	0x20001038
    d7b4:	000069f9 	.word	0x000069f9
    d7b8:	0000cad9 	.word	0x0000cad9

0000d7bc <demoTimerCb>:
{
    d7bc:	b510      	push	{r4, lr}
    d7be:	b082      	sub	sp, #8
    printf("%d..",count);
    d7c0:	4c2b      	ldr	r4, [pc, #172]	; (d870 <demoTimerCb+0xb4>)
    d7c2:	7821      	ldrb	r1, [r4, #0]
    d7c4:	b2c9      	uxtb	r1, r1
    d7c6:	482b      	ldr	r0, [pc, #172]	; (d874 <demoTimerCb+0xb8>)
    d7c8:	4b2b      	ldr	r3, [pc, #172]	; (d878 <demoTimerCb+0xbc>)
    d7ca:	4798      	blx	r3
    count--;
    d7cc:	7823      	ldrb	r3, [r4, #0]
    d7ce:	3b01      	subs	r3, #1
    d7d0:	b2db      	uxtb	r3, r3
    d7d2:	7023      	strb	r3, [r4, #0]
	startReceiving = false;
    d7d4:	2200      	movs	r2, #0
    d7d6:	4b29      	ldr	r3, [pc, #164]	; (d87c <demoTimerCb+0xc0>)
    d7d8:	701a      	strb	r2, [r3, #0]
    sio2host_rx(rxchar,10);
    d7da:	4c29      	ldr	r4, [pc, #164]	; (d880 <demoTimerCb+0xc4>)
    d7dc:	210a      	movs	r1, #10
    d7de:	0020      	movs	r0, r4
    d7e0:	4b28      	ldr	r3, [pc, #160]	; (d884 <demoTimerCb+0xc8>)
    d7e2:	4798      	blx	r3
    d7e4:	0023      	movs	r3, r4
    d7e6:	0020      	movs	r0, r4
    d7e8:	300b      	adds	r0, #11
    d7ea:	e002      	b.n	d7f2 <demoTimerCb+0x36>
    d7ec:	3301      	adds	r3, #1
    for(i = 0;i<=10;i++)
    d7ee:	4283      	cmp	r3, r0
    d7f0:	d006      	beq.n	d800 <demoTimerCb+0x44>
        if(rxchar[i] != 13 && rxchar[i] != 10)
    d7f2:	781c      	ldrb	r4, [r3, #0]
    d7f4:	2c0d      	cmp	r4, #13
    d7f6:	d0f9      	beq.n	d7ec <demoTimerCb+0x30>
    d7f8:	2c0a      	cmp	r4, #10
    d7fa:	d0f7      	beq.n	d7ec <demoTimerCb+0x30>
            rxdata = rxchar[i];
    d7fc:	b264      	sxtb	r4, r4
            break;
    d7fe:	e000      	b.n	d802 <demoTimerCb+0x46>
    int8_t rxdata = 0;
    d800:	2400      	movs	r4, #0
    if(!count)
    d802:	4b1b      	ldr	r3, [pc, #108]	; (d870 <demoTimerCb+0xb4>)
    d804:	781b      	ldrb	r3, [r3, #0]
    d806:	2b00      	cmp	r3, #0
    d808:	d00d      	beq.n	d826 <demoTimerCb+0x6a>
    if(count > 0 && (!rxdata))
    d80a:	4b19      	ldr	r3, [pc, #100]	; (d870 <demoTimerCb+0xb4>)
    d80c:	781b      	ldrb	r3, [r3, #0]
    d80e:	2b00      	cmp	r3, #0
    d810:	d017      	beq.n	d842 <demoTimerCb+0x86>
    d812:	2c00      	cmp	r4, #0
    d814:	d00b      	beq.n	d82e <demoTimerCb+0x72>
    else if(count == 0 && (!rxdata))
    d816:	4b16      	ldr	r3, [pc, #88]	; (d870 <demoTimerCb+0xb4>)
    d818:	781b      	ldrb	r3, [r3, #0]
    d81a:	2b00      	cmp	r3, #0
    d81c:	d017      	beq.n	d84e <demoTimerCb+0x92>
    else if(rxdata)
    d81e:	2c00      	cmp	r4, #0
    d820:	d115      	bne.n	d84e <demoTimerCb+0x92>
}
    d822:	b002      	add	sp, #8
    d824:	bd10      	pop	{r4, pc}
        printf("\r\n");
    d826:	4818      	ldr	r0, [pc, #96]	; (d888 <demoTimerCb+0xcc>)
    d828:	4b18      	ldr	r3, [pc, #96]	; (d88c <demoTimerCb+0xd0>)
    d82a:	4798      	blx	r3
    d82c:	e7ed      	b.n	d80a <demoTimerCb+0x4e>
        SwTimerStart(demoTimerId,MS_TO_US(1000),SW_TIMEOUT_RELATIVE,(void *)demoTimerCb,NULL);
    d82e:	4b18      	ldr	r3, [pc, #96]	; (d890 <demoTimerCb+0xd4>)
    d830:	7818      	ldrb	r0, [r3, #0]
    d832:	2300      	movs	r3, #0
    d834:	9300      	str	r3, [sp, #0]
    d836:	4b17      	ldr	r3, [pc, #92]	; (d894 <demoTimerCb+0xd8>)
    d838:	2200      	movs	r2, #0
    d83a:	4917      	ldr	r1, [pc, #92]	; (d898 <demoTimerCb+0xdc>)
    d83c:	4c17      	ldr	r4, [pc, #92]	; (d89c <demoTimerCb+0xe0>)
    d83e:	47a0      	blx	r4
    d840:	e7ef      	b.n	d822 <demoTimerCb+0x66>
    else if(count == 0 && (!rxdata))
    d842:	4b0b      	ldr	r3, [pc, #44]	; (d870 <demoTimerCb+0xb4>)
    d844:	781b      	ldrb	r3, [r3, #0]
    d846:	2b00      	cmp	r3, #0
    d848:	d1e9      	bne.n	d81e <demoTimerCb+0x62>
    d84a:	2c00      	cmp	r4, #0
    d84c:	d009      	beq.n	d862 <demoTimerCb+0xa6>
        printf("\r\n");
    d84e:	480e      	ldr	r0, [pc, #56]	; (d888 <demoTimerCb+0xcc>)
    d850:	4b0e      	ldr	r3, [pc, #56]	; (d88c <demoTimerCb+0xd0>)
    d852:	4798      	blx	r3
		appTaskState = DEMO_CERT_APP_STATE;
    d854:	2201      	movs	r2, #1
    d856:	4b12      	ldr	r3, [pc, #72]	; (d8a0 <demoTimerCb+0xe4>)
    d858:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    d85a:	2000      	movs	r0, #0
    d85c:	4b11      	ldr	r3, [pc, #68]	; (d8a4 <demoTimerCb+0xe8>)
    d85e:	4798      	blx	r3
}
    d860:	e7df      	b.n	d822 <demoTimerCb+0x66>
		appTaskState = RESTORE_BAND_STATE;
    d862:	2200      	movs	r2, #0
    d864:	4b0e      	ldr	r3, [pc, #56]	; (d8a0 <demoTimerCb+0xe4>)
    d866:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    d868:	2000      	movs	r0, #0
    d86a:	4b0e      	ldr	r3, [pc, #56]	; (d8a4 <demoTimerCb+0xe8>)
    d86c:	4798      	blx	r3
    d86e:	e7d8      	b.n	d822 <demoTimerCb+0x66>
    d870:	20000062 	.word	0x20000062
    d874:	0001ec0c 	.word	0x0001ec0c
    d878:	000182cd 	.word	0x000182cd
    d87c:	2000105a 	.word	0x2000105a
    d880:	2000104c 	.word	0x2000104c
    d884:	0000636d 	.word	0x0000636d
    d888:	0001ecf8 	.word	0x0001ecf8
    d88c:	000183a5 	.word	0x000183a5
    d890:	200000d3 	.word	0x200000d3
    d894:	0000d7bd 	.word	0x0000d7bd
    d898:	000f4240 	.word	0x000f4240
    d89c:	0000c4b5 	.word	0x0000c4b5
    d8a0:	20001039 	.word	0x20001039
    d8a4:	0000d789 	.word	0x0000d789

0000d8a8 <lTimerCb>:
{
    d8a8:	b510      	push	{r4, lr}
    d8aa:	b082      	sub	sp, #8
    SwTimerStart(lTimerId,MS_TO_US(100),SW_TIMEOUT_RELATIVE,(void *)lTimerCb,NULL);
    d8ac:	4b07      	ldr	r3, [pc, #28]	; (d8cc <lTimerCb+0x24>)
    d8ae:	7818      	ldrb	r0, [r3, #0]
    d8b0:	2300      	movs	r3, #0
    d8b2:	9300      	str	r3, [sp, #0]
    d8b4:	4b06      	ldr	r3, [pc, #24]	; (d8d0 <lTimerCb+0x28>)
    d8b6:	2200      	movs	r2, #0
    d8b8:	4906      	ldr	r1, [pc, #24]	; (d8d4 <lTimerCb+0x2c>)
    d8ba:	4c07      	ldr	r4, [pc, #28]	; (d8d8 <lTimerCb+0x30>)
    d8bc:	47a0      	blx	r4
    set_LED_data(LED_GREEN,&toggle);
    d8be:	4907      	ldr	r1, [pc, #28]	; (d8dc <lTimerCb+0x34>)
    d8c0:	2003      	movs	r0, #3
    d8c2:	4b07      	ldr	r3, [pc, #28]	; (d8e0 <lTimerCb+0x38>)
    d8c4:	4798      	blx	r3
}
    d8c6:	b002      	add	sp, #8
    d8c8:	bd10      	pop	{r4, pc}
    d8ca:	46c0      	nop			; (mov r8, r8)
    d8cc:	200000d4 	.word	0x200000d4
    d8d0:	0000d8a9 	.word	0x0000d8a9
    d8d4:	000186a0 	.word	0x000186a0
    d8d8:	0000c4b5 	.word	0x0000c4b5
    d8dc:	200000d2 	.word	0x200000d2
    d8e0:	0000c0ad 	.word	0x0000c0ad

0000d8e4 <displayTask>:
{
    d8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(appTaskState)
    d8e6:	4b32      	ldr	r3, [pc, #200]	; (d9b0 <displayTask+0xcc>)
    d8e8:	781b      	ldrb	r3, [r3, #0]
    d8ea:	2b01      	cmp	r3, #1
    d8ec:	d016      	beq.n	d91c <displayTask+0x38>
    d8ee:	2b00      	cmp	r3, #0
    d8f0:	d007      	beq.n	d902 <displayTask+0x1e>
    d8f2:	2b02      	cmp	r3, #2
    d8f4:	d026      	beq.n	d944 <displayTask+0x60>
    d8f6:	2b03      	cmp	r3, #3
    d8f8:	d042      	beq.n	d980 <displayTask+0x9c>
			printf("Error STATE Entered\r\n");
    d8fa:	482e      	ldr	r0, [pc, #184]	; (d9b4 <displayTask+0xd0>)
    d8fc:	4b2e      	ldr	r3, [pc, #184]	; (d9b8 <displayTask+0xd4>)
    d8fe:	4798      	blx	r3
			break;
    d900:	e00a      	b.n	d918 <displayTask+0x34>
	set_LED_data(LED_AMBER,&off);
    d902:	4d2e      	ldr	r5, [pc, #184]	; (d9bc <displayTask+0xd8>)
    d904:	0029      	movs	r1, r5
    d906:	2002      	movs	r0, #2
    d908:	4c2d      	ldr	r4, [pc, #180]	; (d9c0 <displayTask+0xdc>)
    d90a:	47a0      	blx	r4
	set_LED_data(LED_GREEN,&off);
    d90c:	0029      	movs	r1, r5
    d90e:	2003      	movs	r0, #3
    d910:	47a0      	blx	r4
	appPostTask(PROCESS_TASK_HANDLER);
    d912:	2001      	movs	r0, #1
    d914:	4b2b      	ldr	r3, [pc, #172]	; (d9c4 <displayTask+0xe0>)
    d916:	4798      	blx	r3
}
    d918:	2000      	movs	r0, #0
    d91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	set_LED_data(LED_AMBER,&off);
    d91c:	4d27      	ldr	r5, [pc, #156]	; (d9bc <displayTask+0xd8>)
    d91e:	0029      	movs	r1, r5
    d920:	2002      	movs	r0, #2
    d922:	4c27      	ldr	r4, [pc, #156]	; (d9c0 <displayTask+0xdc>)
    d924:	47a0      	blx	r4
	set_LED_data(LED_GREEN,&off);
    d926:	0029      	movs	r1, r5
    d928:	2003      	movs	r0, #3
    d92a:	47a0      	blx	r4
	printf("1. Demo application\r\n");
    d92c:	4826      	ldr	r0, [pc, #152]	; (d9c8 <displayTask+0xe4>)
    d92e:	4c22      	ldr	r4, [pc, #136]	; (d9b8 <displayTask+0xd4>)
    d930:	47a0      	blx	r4
	printf("2. Certification application\r\n");
    d932:	4826      	ldr	r0, [pc, #152]	; (d9cc <displayTask+0xe8>)
    d934:	47a0      	blx	r4
	printf("\r\n Select Application : ");
    d936:	4826      	ldr	r0, [pc, #152]	; (d9d0 <displayTask+0xec>)
    d938:	4b26      	ldr	r3, [pc, #152]	; (d9d4 <displayTask+0xf0>)
    d93a:	4798      	blx	r3
	startReceiving = true;
    d93c:	2201      	movs	r2, #1
    d93e:	4b26      	ldr	r3, [pc, #152]	; (d9d8 <displayTask+0xf4>)
    d940:	701a      	strb	r2, [r3, #0]
    d942:	e7e9      	b.n	d918 <displayTask+0x34>
    set_LED_data(LED_AMBER,&off);
    d944:	4d1d      	ldr	r5, [pc, #116]	; (d9bc <displayTask+0xd8>)
    d946:	0029      	movs	r1, r5
    d948:	2002      	movs	r0, #2
    d94a:	4c1d      	ldr	r4, [pc, #116]	; (d9c0 <displayTask+0xdc>)
    d94c:	47a0      	blx	r4
    set_LED_data(LED_GREEN,&off);
    d94e:	0029      	movs	r1, r5
    d950:	2003      	movs	r0, #3
    d952:	47a0      	blx	r4
    printf("\r\nPlease select one of the band given below\r\n");
    d954:	4821      	ldr	r0, [pc, #132]	; (d9dc <displayTask+0xf8>)
    d956:	4b18      	ldr	r3, [pc, #96]	; (d9b8 <displayTask+0xd4>)
    d958:	4798      	blx	r3
    d95a:	2401      	movs	r4, #1
	    printf("%d. %s\r\n",i,bandStrings[i]);
    d95c:	4f20      	ldr	r7, [pc, #128]	; (d9e0 <displayTask+0xfc>)
    d95e:	4d21      	ldr	r5, [pc, #132]	; (d9e4 <displayTask+0x100>)
    d960:	4e1c      	ldr	r6, [pc, #112]	; (d9d4 <displayTask+0xf0>)
    d962:	00a3      	lsls	r3, r4, #2
    d964:	59da      	ldr	r2, [r3, r7]
    d966:	0021      	movs	r1, r4
    d968:	0028      	movs	r0, r5
    d96a:	47b0      	blx	r6
    d96c:	3401      	adds	r4, #1
    for(i = 1;i < sizeof(bandTable); i++)
    d96e:	2c0a      	cmp	r4, #10
    d970:	d1f7      	bne.n	d962 <displayTask+0x7e>
    printf("Select Regional Band : ");
    d972:	481d      	ldr	r0, [pc, #116]	; (d9e8 <displayTask+0x104>)
    d974:	4b17      	ldr	r3, [pc, #92]	; (d9d4 <displayTask+0xf0>)
    d976:	4798      	blx	r3
	startReceiving = true;
    d978:	2201      	movs	r2, #1
    d97a:	4b17      	ldr	r3, [pc, #92]	; (d9d8 <displayTask+0xf4>)
    d97c:	701a      	strb	r2, [r3, #0]
    d97e:	e7cb      	b.n	d918 <displayTask+0x34>
    printf("\r\n1. Send Join Request\r\n");
    d980:	481a      	ldr	r0, [pc, #104]	; (d9ec <displayTask+0x108>)
    d982:	4c0d      	ldr	r4, [pc, #52]	; (d9b8 <displayTask+0xd4>)
    d984:	47a0      	blx	r4
    printf("2. Scan AP and send Data\r\n");
    d986:	481a      	ldr	r0, [pc, #104]	; (d9f0 <displayTask+0x10c>)
    d988:	47a0      	blx	r4
    printf("3. Sleep\r\n");
    d98a:	481a      	ldr	r0, [pc, #104]	; (d9f4 <displayTask+0x110>)
    d98c:	47a0      	blx	r4
    printf("4. Main Menu\r\n");
    d98e:	481a      	ldr	r0, [pc, #104]	; (d9f8 <displayTask+0x114>)
    d990:	47a0      	blx	r4
    printf("\r\nEnter your choice: ");
    d992:	481a      	ldr	r0, [pc, #104]	; (d9fc <displayTask+0x118>)
    d994:	4b0f      	ldr	r3, [pc, #60]	; (d9d4 <displayTask+0xf0>)
    d996:	4798      	blx	r3
    set_LED_data(LED_AMBER,&off);
    d998:	4d08      	ldr	r5, [pc, #32]	; (d9bc <displayTask+0xd8>)
    d99a:	0029      	movs	r1, r5
    d99c:	2002      	movs	r0, #2
    d99e:	4c08      	ldr	r4, [pc, #32]	; (d9c0 <displayTask+0xdc>)
    d9a0:	47a0      	blx	r4
    set_LED_data(LED_GREEN,&off);	
    d9a2:	0029      	movs	r1, r5
    d9a4:	2003      	movs	r0, #3
    d9a6:	47a0      	blx	r4
	startReceiving = true;
    d9a8:	2201      	movs	r2, #1
    d9aa:	4b0b      	ldr	r3, [pc, #44]	; (d9d8 <displayTask+0xf4>)
    d9ac:	701a      	strb	r2, [r3, #0]
    d9ae:	e7b3      	b.n	d918 <displayTask+0x34>
    d9b0:	20001039 	.word	0x20001039
    d9b4:	0001efa4 	.word	0x0001efa4
    d9b8:	000183a5 	.word	0x000183a5
    d9bc:	20001048 	.word	0x20001048
    d9c0:	0000c0ad 	.word	0x0000c0ad
    d9c4:	0000d789 	.word	0x0000d789
    d9c8:	0001eee8 	.word	0x0001eee8
    d9cc:	0001ef00 	.word	0x0001ef00
    d9d0:	0001ef20 	.word	0x0001ef20
    d9d4:	000182cd 	.word	0x000182cd
    d9d8:	2000105a 	.word	0x2000105a
    d9dc:	0001e550 	.word	0x0001e550
    d9e0:	0001ebe4 	.word	0x0001ebe4
    d9e4:	0001e588 	.word	0x0001e588
    d9e8:	0001e594 	.word	0x0001e594
    d9ec:	0001ef3c 	.word	0x0001ef3c
    d9f0:	0001ef54 	.word	0x0001ef54
    d9f4:	0001ef70 	.word	0x0001ef70
    d9f8:	0001ef7c 	.word	0x0001ef7c
    d9fc:	0001ef8c 	.word	0x0001ef8c

0000da00 <demo_appdata_callback>:
{
    da00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (LORAWAN_EVT_RX_DATA_AVAILABLE == appdata->evt)
    da02:	780b      	ldrb	r3, [r1, #0]
    da04:	2b02      	cmp	r3, #2
    da06:	d015      	beq.n	da34 <demo_appdata_callback+0x34>
    else if(LORAWAN_EVT_TRANSACTION_COMPLETE == appdata->evt)
    da08:	2b04      	cmp	r3, #4
    da0a:	d100      	bne.n	da0e <demo_appdata_callback+0xe>
    da0c:	e0b0      	b.n	db70 <demo_appdata_callback+0x170>
    SwTimerStop(lTimerId);
    da0e:	4b9b      	ldr	r3, [pc, #620]	; (dc7c <demo_appdata_callback+0x27c>)
    da10:	7818      	ldrb	r0, [r3, #0]
    da12:	4b9b      	ldr	r3, [pc, #620]	; (dc80 <demo_appdata_callback+0x280>)
    da14:	4798      	blx	r3
    set_LED_data(LED_GREEN,&off);
    da16:	499b      	ldr	r1, [pc, #620]	; (dc84 <demo_appdata_callback+0x284>)
    da18:	2003      	movs	r0, #3
    da1a:	4b9b      	ldr	r3, [pc, #620]	; (dc88 <demo_appdata_callback+0x288>)
    da1c:	4798      	blx	r3
        set_LED_data(LED_AMBER,&on);
    da1e:	499b      	ldr	r1, [pc, #620]	; (dc8c <demo_appdata_callback+0x28c>)
    da20:	2002      	movs	r0, #2
    da22:	4b99      	ldr	r3, [pc, #612]	; (dc88 <demo_appdata_callback+0x288>)
    da24:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    da26:	2203      	movs	r2, #3
    da28:	4b99      	ldr	r3, [pc, #612]	; (dc90 <demo_appdata_callback+0x290>)
    da2a:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
    da2c:	2000      	movs	r0, #0
    da2e:	4b99      	ldr	r3, [pc, #612]	; (dc94 <demo_appdata_callback+0x294>)
    da30:	4798      	blx	r3
}
    da32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = appdata->param.rxData.status;
    da34:	7b4c      	ldrb	r4, [r1, #13]
        switch(status)
    da36:	2c1a      	cmp	r4, #26
    da38:	d900      	bls.n	da3c <demo_appdata_callback+0x3c>
    da3a:	e095      	b.n	db68 <demo_appdata_callback+0x168>
    da3c:	00a3      	lsls	r3, r4, #2
    da3e:	4a96      	ldr	r2, [pc, #600]	; (dc98 <demo_appdata_callback+0x298>)
    da40:	58d3      	ldr	r3, [r2, r3]
    da42:	469f      	mov	pc, r3
    uint8_t dataLength = appdata->param.rxData.dataLength;
    da44:	7b0e      	ldrb	r6, [r1, #12]
    if((dataLength > 0U) && (NULL != pData))
    da46:	2e00      	cmp	r6, #0
    da48:	d022      	beq.n	da90 <demo_appdata_callback+0x90>
    uint8_t *pData = appdata->param.rxData.pData;
    da4a:	688f      	ldr	r7, [r1, #8]
    if((dataLength > 0U) && (NULL != pData))
    da4c:	2f00      	cmp	r7, #0
    da4e:	d01f      	beq.n	da90 <demo_appdata_callback+0x90>
    uint32_t devAddress = appdata->param.rxData.devAddr;
    da50:	684d      	ldr	r5, [r1, #4]
        printf("*** Received DL Data ***\n\r");
    da52:	4892      	ldr	r0, [pc, #584]	; (dc9c <demo_appdata_callback+0x29c>)
    da54:	4c92      	ldr	r4, [pc, #584]	; (dca0 <demo_appdata_callback+0x2a0>)
    da56:	47a0      	blx	r4
        printf("\nFrame Received at port %d\n\r",pData[0]);
    da58:	7839      	ldrb	r1, [r7, #0]
    da5a:	4892      	ldr	r0, [pc, #584]	; (dca4 <demo_appdata_callback+0x2a4>)
    da5c:	47a0      	blx	r4
        printf("\nFrame Length - %d\n\r",dataLength);
    da5e:	0031      	movs	r1, r6
    da60:	4891      	ldr	r0, [pc, #580]	; (dca8 <demo_appdata_callback+0x2a8>)
    da62:	47a0      	blx	r4
        printf("\nAddress - 0x%lx\n\r", devAddress);
    da64:	0029      	movs	r1, r5
    da66:	4891      	ldr	r0, [pc, #580]	; (dcac <demo_appdata_callback+0x2ac>)
    da68:	47a0      	blx	r4
        printf ("\nPayload: ");
    da6a:	4891      	ldr	r0, [pc, #580]	; (dcb0 <demo_appdata_callback+0x2b0>)
    da6c:	47a0      	blx	r4
        for (uint8_t i =0; i<dataLength - 1; i++)
    da6e:	3e01      	subs	r6, #1
    da70:	2e00      	cmp	r6, #0
    da72:	dd09      	ble.n	da88 <demo_appdata_callback+0x88>
    da74:	2400      	movs	r4, #0
            printf("%x",pData[i+1]);
    da76:	4d8a      	ldr	r5, [pc, #552]	; (dca0 <demo_appdata_callback+0x2a0>)
    da78:	193b      	adds	r3, r7, r4
    da7a:	7859      	ldrb	r1, [r3, #1]
    da7c:	488d      	ldr	r0, [pc, #564]	; (dcb4 <demo_appdata_callback+0x2b4>)
    da7e:	47a8      	blx	r5
        for (uint8_t i =0; i<dataLength - 1; i++)
    da80:	3401      	adds	r4, #1
    da82:	b2e4      	uxtb	r4, r4
    da84:	42b4      	cmp	r4, r6
    da86:	dbf7      	blt.n	da78 <demo_appdata_callback+0x78>
        printf("\r\n*************************\r\n");
    da88:	488b      	ldr	r0, [pc, #556]	; (dcb8 <demo_appdata_callback+0x2b8>)
    da8a:	4b8c      	ldr	r3, [pc, #560]	; (dcbc <demo_appdata_callback+0x2bc>)
    da8c:	4798      	blx	r3
    da8e:	e002      	b.n	da96 <demo_appdata_callback+0x96>
        printf("Received ACK for Confirmed data\r\n");
    da90:	488b      	ldr	r0, [pc, #556]	; (dcc0 <demo_appdata_callback+0x2c0>)
    da92:	4b8a      	ldr	r3, [pc, #552]	; (dcbc <demo_appdata_callback+0x2bc>)
    da94:	4798      	blx	r3
    SwTimerStop(lTimerId);
    da96:	4b79      	ldr	r3, [pc, #484]	; (dc7c <demo_appdata_callback+0x27c>)
    da98:	7818      	ldrb	r0, [r3, #0]
    da9a:	4b79      	ldr	r3, [pc, #484]	; (dc80 <demo_appdata_callback+0x280>)
    da9c:	4798      	blx	r3
    set_LED_data(LED_GREEN,&off);
    da9e:	4979      	ldr	r1, [pc, #484]	; (dc84 <demo_appdata_callback+0x284>)
    daa0:	2003      	movs	r0, #3
    daa2:	4b79      	ldr	r3, [pc, #484]	; (dc88 <demo_appdata_callback+0x288>)
    daa4:	4798      	blx	r3
    daa6:	e7be      	b.n	da26 <demo_appdata_callback+0x26>
                printf("\n\rRADIO_NO_DATA \n\r");
    daa8:	4886      	ldr	r0, [pc, #536]	; (dcc4 <demo_appdata_callback+0x2c4>)
    daaa:	4b7d      	ldr	r3, [pc, #500]	; (dca0 <demo_appdata_callback+0x2a0>)
    daac:	4798      	blx	r3
            break;
    daae:	e7ae      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rRADIO_DATA_SIZE \n\r");
    dab0:	4885      	ldr	r0, [pc, #532]	; (dcc8 <demo_appdata_callback+0x2c8>)
    dab2:	4b7b      	ldr	r3, [pc, #492]	; (dca0 <demo_appdata_callback+0x2a0>)
    dab4:	4798      	blx	r3
            break;
    dab6:	e7aa      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rRADIO_INVALID_REQ \n\r");
    dab8:	4884      	ldr	r0, [pc, #528]	; (dccc <demo_appdata_callback+0x2cc>)
    daba:	4b79      	ldr	r3, [pc, #484]	; (dca0 <demo_appdata_callback+0x2a0>)
    dabc:	4798      	blx	r3
            break;
    dabe:	e7a6      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rRADIO_BUSY \n\r");
    dac0:	4883      	ldr	r0, [pc, #524]	; (dcd0 <demo_appdata_callback+0x2d0>)
    dac2:	4b77      	ldr	r3, [pc, #476]	; (dca0 <demo_appdata_callback+0x2a0>)
    dac4:	4798      	blx	r3
            break;
    dac6:	e7a2      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
    dac8:	4882      	ldr	r0, [pc, #520]	; (dcd4 <demo_appdata_callback+0x2d4>)
    daca:	4b75      	ldr	r3, [pc, #468]	; (dca0 <demo_appdata_callback+0x2a0>)
    dacc:	4798      	blx	r3
            break;
    dace:	e79e      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
    dad0:	4881      	ldr	r0, [pc, #516]	; (dcd8 <demo_appdata_callback+0x2d8>)
    dad2:	4b73      	ldr	r3, [pc, #460]	; (dca0 <demo_appdata_callback+0x2a0>)
    dad4:	4798      	blx	r3
            break;
    dad6:	e79a      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
    dad8:	4880      	ldr	r0, [pc, #512]	; (dcdc <demo_appdata_callback+0x2dc>)
    dada:	4b71      	ldr	r3, [pc, #452]	; (dca0 <demo_appdata_callback+0x2a0>)
    dadc:	4798      	blx	r3
            break;
    dade:	e796      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rNWK_NOT_JOINED \n\r");
    dae0:	487f      	ldr	r0, [pc, #508]	; (dce0 <demo_appdata_callback+0x2e0>)
    dae2:	4b6f      	ldr	r3, [pc, #444]	; (dca0 <demo_appdata_callback+0x2a0>)
    dae4:	4798      	blx	r3
            break;
    dae6:	e792      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rINVALID_PARAMETER \n\r");
    dae8:	487e      	ldr	r0, [pc, #504]	; (dce4 <demo_appdata_callback+0x2e4>)
    daea:	4b6d      	ldr	r3, [pc, #436]	; (dca0 <demo_appdata_callback+0x2a0>)
    daec:	4798      	blx	r3
            break;
    daee:	e78e      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
    daf0:	487d      	ldr	r0, [pc, #500]	; (dce8 <demo_appdata_callback+0x2e8>)
    daf2:	4b6b      	ldr	r3, [pc, #428]	; (dca0 <demo_appdata_callback+0x2a0>)
    daf4:	4798      	blx	r3
            break;
    daf6:	e78a      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
    daf8:	487c      	ldr	r0, [pc, #496]	; (dcec <demo_appdata_callback+0x2ec>)
    dafa:	4b69      	ldr	r3, [pc, #420]	; (dca0 <demo_appdata_callback+0x2a0>)
    dafc:	4798      	blx	r3
            break;
    dafe:	e786      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
    db00:	487b      	ldr	r0, [pc, #492]	; (dcf0 <demo_appdata_callback+0x2f0>)
    db02:	4b67      	ldr	r3, [pc, #412]	; (dca0 <demo_appdata_callback+0x2a0>)
    db04:	4798      	blx	r3
            break;
    db06:	e782      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
    db08:	487a      	ldr	r0, [pc, #488]	; (dcf4 <demo_appdata_callback+0x2f4>)
    db0a:	4b65      	ldr	r3, [pc, #404]	; (dca0 <demo_appdata_callback+0x2a0>)
    db0c:	4798      	blx	r3
            break;
    db0e:	e77e      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rMAC_PAUSED  \n\r");
    db10:	4879      	ldr	r0, [pc, #484]	; (dcf8 <demo_appdata_callback+0x2f8>)
    db12:	4b63      	ldr	r3, [pc, #396]	; (dca0 <demo_appdata_callback+0x2a0>)
    db14:	4798      	blx	r3
            break;
    db16:	e77a      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rNO_CHANNELS_FOUND \n\r");
    db18:	4878      	ldr	r0, [pc, #480]	; (dcfc <demo_appdata_callback+0x2fc>)
    db1a:	4b61      	ldr	r3, [pc, #388]	; (dca0 <demo_appdata_callback+0x2a0>)
    db1c:	4798      	blx	r3
            break;
    db1e:	e776      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rBUSY\n\r");
    db20:	4877      	ldr	r0, [pc, #476]	; (dd00 <demo_appdata_callback+0x300>)
    db22:	4b5f      	ldr	r3, [pc, #380]	; (dca0 <demo_appdata_callback+0x2a0>)
    db24:	4798      	blx	r3
            break;
    db26:	e772      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rNO_ACK \n\r");
    db28:	4876      	ldr	r0, [pc, #472]	; (dd04 <demo_appdata_callback+0x304>)
    db2a:	4b5d      	ldr	r3, [pc, #372]	; (dca0 <demo_appdata_callback+0x2a0>)
    db2c:	4798      	blx	r3
            break;
    db2e:	e76e      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
    db30:	4875      	ldr	r0, [pc, #468]	; (dd08 <demo_appdata_callback+0x308>)
    db32:	4b5b      	ldr	r3, [pc, #364]	; (dca0 <demo_appdata_callback+0x2a0>)
    db34:	4798      	blx	r3
            break;
    db36:	e76a      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
    db38:	4874      	ldr	r0, [pc, #464]	; (dd0c <demo_appdata_callback+0x30c>)
    db3a:	4b59      	ldr	r3, [pc, #356]	; (dca0 <demo_appdata_callback+0x2a0>)
    db3c:	4798      	blx	r3
            break;
    db3e:	e766      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rINVALID_REQUEST \n\r");
    db40:	4873      	ldr	r0, [pc, #460]	; (dd10 <demo_appdata_callback+0x310>)
    db42:	4b57      	ldr	r3, [pc, #348]	; (dca0 <demo_appdata_callback+0x2a0>)
    db44:	4798      	blx	r3
            break;
    db46:	e762      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rFCNTR_ERROR \n\r");
    db48:	4872      	ldr	r0, [pc, #456]	; (dd14 <demo_appdata_callback+0x314>)
    db4a:	4b55      	ldr	r3, [pc, #340]	; (dca0 <demo_appdata_callback+0x2a0>)
    db4c:	4798      	blx	r3
            break;
    db4e:	e75e      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rMIC_ERROR \n\r");
    db50:	4871      	ldr	r0, [pc, #452]	; (dd18 <demo_appdata_callback+0x318>)
    db52:	4b53      	ldr	r3, [pc, #332]	; (dca0 <demo_appdata_callback+0x2a0>)
    db54:	4798      	blx	r3
            break;
    db56:	e75a      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rINVALID_MTYPE \n\r");
    db58:	4870      	ldr	r0, [pc, #448]	; (dd1c <demo_appdata_callback+0x31c>)
    db5a:	4b51      	ldr	r3, [pc, #324]	; (dca0 <demo_appdata_callback+0x2a0>)
    db5c:	4798      	blx	r3
            break;
    db5e:	e756      	b.n	da0e <demo_appdata_callback+0xe>
                printf("\n\rMCAST_HDR_INVALID \n\r");
    db60:	486f      	ldr	r0, [pc, #444]	; (dd20 <demo_appdata_callback+0x320>)
    db62:	4b4f      	ldr	r3, [pc, #316]	; (dca0 <demo_appdata_callback+0x2a0>)
    db64:	4798      	blx	r3
            break;
    db66:	e752      	b.n	da0e <demo_appdata_callback+0xe>
                printf("UNKNOWN ERROR\n\r");
    db68:	486e      	ldr	r0, [pc, #440]	; (dd24 <demo_appdata_callback+0x324>)
    db6a:	4b4d      	ldr	r3, [pc, #308]	; (dca0 <demo_appdata_callback+0x2a0>)
    db6c:	4798      	blx	r3
            break;
    db6e:	e00c      	b.n	db8a <demo_appdata_callback+0x18a>
        switch(status = appdata->param.transCmpl.status)
    db70:	790c      	ldrb	r4, [r1, #4]
    db72:	2c1b      	cmp	r4, #27
    db74:	d87d      	bhi.n	dc72 <demo_appdata_callback+0x272>
    db76:	00a3      	lsls	r3, r4, #2
    db78:	4a6b      	ldr	r2, [pc, #428]	; (dd28 <demo_appdata_callback+0x328>)
    db7a:	58d3      	ldr	r3, [r2, r3]
    db7c:	469f      	mov	pc, r3
                printf("Transmission Success\r\n");
    db7e:	486b      	ldr	r0, [pc, #428]	; (dd2c <demo_appdata_callback+0x32c>)
    db80:	4b4e      	ldr	r3, [pc, #312]	; (dcbc <demo_appdata_callback+0x2bc>)
    db82:	4798      	blx	r3
        printf("\n\r*************************************************\n\r");
    db84:	486a      	ldr	r0, [pc, #424]	; (dd30 <demo_appdata_callback+0x330>)
    db86:	4b46      	ldr	r3, [pc, #280]	; (dca0 <demo_appdata_callback+0x2a0>)
    db88:	4798      	blx	r3
    SwTimerStop(lTimerId);
    db8a:	4b3c      	ldr	r3, [pc, #240]	; (dc7c <demo_appdata_callback+0x27c>)
    db8c:	7818      	ldrb	r0, [r3, #0]
    db8e:	4b3c      	ldr	r3, [pc, #240]	; (dc80 <demo_appdata_callback+0x280>)
    db90:	4798      	blx	r3
    set_LED_data(LED_GREEN,&off);
    db92:	493c      	ldr	r1, [pc, #240]	; (dc84 <demo_appdata_callback+0x284>)
    db94:	2003      	movs	r0, #3
    db96:	4b3c      	ldr	r3, [pc, #240]	; (dc88 <demo_appdata_callback+0x288>)
    db98:	4798      	blx	r3
    if(status != LORAWAN_SUCCESS)
    db9a:	2c08      	cmp	r4, #8
    db9c:	d100      	bne.n	dba0 <demo_appdata_callback+0x1a0>
    db9e:	e742      	b.n	da26 <demo_appdata_callback+0x26>
    dba0:	e73d      	b.n	da1e <demo_appdata_callback+0x1e>
                printf("Transmission Success\r\n");
    dba2:	4862      	ldr	r0, [pc, #392]	; (dd2c <demo_appdata_callback+0x32c>)
    dba4:	4b45      	ldr	r3, [pc, #276]	; (dcbc <demo_appdata_callback+0x2bc>)
    dba6:	4798      	blx	r3
            break;
    dba8:	e7ec      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rRADIO_NO_DATA \n\r");
    dbaa:	4846      	ldr	r0, [pc, #280]	; (dcc4 <demo_appdata_callback+0x2c4>)
    dbac:	4b3c      	ldr	r3, [pc, #240]	; (dca0 <demo_appdata_callback+0x2a0>)
    dbae:	4798      	blx	r3
            break;
    dbb0:	e7e8      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rRADIO_DATA_SIZE \n\r");
    dbb2:	4845      	ldr	r0, [pc, #276]	; (dcc8 <demo_appdata_callback+0x2c8>)
    dbb4:	4b3a      	ldr	r3, [pc, #232]	; (dca0 <demo_appdata_callback+0x2a0>)
    dbb6:	4798      	blx	r3
            break;
    dbb8:	e7e4      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rRADIO_INVALID_REQ \n\r");
    dbba:	4844      	ldr	r0, [pc, #272]	; (dccc <demo_appdata_callback+0x2cc>)
    dbbc:	4b38      	ldr	r3, [pc, #224]	; (dca0 <demo_appdata_callback+0x2a0>)
    dbbe:	4798      	blx	r3
            break;
    dbc0:	e7e0      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rRADIO_BUSY \n\r");
    dbc2:	4843      	ldr	r0, [pc, #268]	; (dcd0 <demo_appdata_callback+0x2d0>)
    dbc4:	4b36      	ldr	r3, [pc, #216]	; (dca0 <demo_appdata_callback+0x2a0>)
    dbc6:	4798      	blx	r3
            break;
    dbc8:	e7dc      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\nTx Timeout\n\r");
    dbca:	485a      	ldr	r0, [pc, #360]	; (dd34 <demo_appdata_callback+0x334>)
    dbcc:	4b34      	ldr	r3, [pc, #208]	; (dca0 <demo_appdata_callback+0x2a0>)
    dbce:	4798      	blx	r3
            break;
    dbd0:	e7d8      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
    dbd2:	4840      	ldr	r0, [pc, #256]	; (dcd4 <demo_appdata_callback+0x2d4>)
    dbd4:	4b32      	ldr	r3, [pc, #200]	; (dca0 <demo_appdata_callback+0x2a0>)
    dbd6:	4798      	blx	r3
            break;
    dbd8:	e7d4      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
    dbda:	483f      	ldr	r0, [pc, #252]	; (dcd8 <demo_appdata_callback+0x2d8>)
    dbdc:	4b30      	ldr	r3, [pc, #192]	; (dca0 <demo_appdata_callback+0x2a0>)
    dbde:	4798      	blx	r3
            break;
    dbe0:	e7d0      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
    dbe2:	483e      	ldr	r0, [pc, #248]	; (dcdc <demo_appdata_callback+0x2dc>)
    dbe4:	4b2e      	ldr	r3, [pc, #184]	; (dca0 <demo_appdata_callback+0x2a0>)
    dbe6:	4798      	blx	r3
            break;
    dbe8:	e7cc      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rNWK_NOT_JOINED \n\r");
    dbea:	483d      	ldr	r0, [pc, #244]	; (dce0 <demo_appdata_callback+0x2e0>)
    dbec:	4b2c      	ldr	r3, [pc, #176]	; (dca0 <demo_appdata_callback+0x2a0>)
    dbee:	4798      	blx	r3
            break;
    dbf0:	e7c8      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rINVALID_PARAMETER \n\r");
    dbf2:	483c      	ldr	r0, [pc, #240]	; (dce4 <demo_appdata_callback+0x2e4>)
    dbf4:	4b2a      	ldr	r3, [pc, #168]	; (dca0 <demo_appdata_callback+0x2a0>)
    dbf6:	4798      	blx	r3
            break;
    dbf8:	e7c4      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
    dbfa:	483b      	ldr	r0, [pc, #236]	; (dce8 <demo_appdata_callback+0x2e8>)
    dbfc:	4b28      	ldr	r3, [pc, #160]	; (dca0 <demo_appdata_callback+0x2a0>)
    dbfe:	4798      	blx	r3
            break;
    dc00:	e7c0      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
    dc02:	483a      	ldr	r0, [pc, #232]	; (dcec <demo_appdata_callback+0x2ec>)
    dc04:	4b26      	ldr	r3, [pc, #152]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc06:	4798      	blx	r3
            break;
    dc08:	e7bc      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
    dc0a:	4839      	ldr	r0, [pc, #228]	; (dcf0 <demo_appdata_callback+0x2f0>)
    dc0c:	4b24      	ldr	r3, [pc, #144]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc0e:	4798      	blx	r3
            break;
    dc10:	e7b8      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
    dc12:	4838      	ldr	r0, [pc, #224]	; (dcf4 <demo_appdata_callback+0x2f4>)
    dc14:	4b22      	ldr	r3, [pc, #136]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc16:	4798      	blx	r3
            break;
    dc18:	e7b4      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rMAC_PAUSED  \n\r");
    dc1a:	4837      	ldr	r0, [pc, #220]	; (dcf8 <demo_appdata_callback+0x2f8>)
    dc1c:	4b20      	ldr	r3, [pc, #128]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc1e:	4798      	blx	r3
            break;
    dc20:	e7b0      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rNO_CHANNELS_FOUND \n\r");
    dc22:	4836      	ldr	r0, [pc, #216]	; (dcfc <demo_appdata_callback+0x2fc>)
    dc24:	4b1e      	ldr	r3, [pc, #120]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc26:	4798      	blx	r3
            break;
    dc28:	e7ac      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rBUSY\n\r");
    dc2a:	4835      	ldr	r0, [pc, #212]	; (dd00 <demo_appdata_callback+0x300>)
    dc2c:	4b1c      	ldr	r3, [pc, #112]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc2e:	4798      	blx	r3
            break;
    dc30:	e7a8      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rNO_ACK \n\r");
    dc32:	4834      	ldr	r0, [pc, #208]	; (dd04 <demo_appdata_callback+0x304>)
    dc34:	4b1a      	ldr	r3, [pc, #104]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc36:	4798      	blx	r3
            break;
    dc38:	e7a4      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
    dc3a:	4833      	ldr	r0, [pc, #204]	; (dd08 <demo_appdata_callback+0x308>)
    dc3c:	4b18      	ldr	r3, [pc, #96]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc3e:	4798      	blx	r3
            break;
    dc40:	e7a0      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
    dc42:	4832      	ldr	r0, [pc, #200]	; (dd0c <demo_appdata_callback+0x30c>)
    dc44:	4b16      	ldr	r3, [pc, #88]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc46:	4798      	blx	r3
            break;
    dc48:	e79c      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rINVALID_REQUEST \n\r");
    dc4a:	4831      	ldr	r0, [pc, #196]	; (dd10 <demo_appdata_callback+0x310>)
    dc4c:	4b14      	ldr	r3, [pc, #80]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc4e:	4798      	blx	r3
            break;
    dc50:	e798      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rFCNTR_ERROR \n\r");
    dc52:	4830      	ldr	r0, [pc, #192]	; (dd14 <demo_appdata_callback+0x314>)
    dc54:	4b12      	ldr	r3, [pc, #72]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc56:	4798      	blx	r3
            break;
    dc58:	e794      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rMIC_ERROR \n\r");
    dc5a:	482f      	ldr	r0, [pc, #188]	; (dd18 <demo_appdata_callback+0x318>)
    dc5c:	4b10      	ldr	r3, [pc, #64]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc5e:	4798      	blx	r3
            break;
    dc60:	e790      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rINVALID_MTYPE \n\r");
    dc62:	482e      	ldr	r0, [pc, #184]	; (dd1c <demo_appdata_callback+0x31c>)
    dc64:	4b0e      	ldr	r3, [pc, #56]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc66:	4798      	blx	r3
            break;
    dc68:	e78c      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rMCAST_HDR_INVALID \n\r");
    dc6a:	482d      	ldr	r0, [pc, #180]	; (dd20 <demo_appdata_callback+0x320>)
    dc6c:	4b0c      	ldr	r3, [pc, #48]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc6e:	4798      	blx	r3
            break;
    dc70:	e788      	b.n	db84 <demo_appdata_callback+0x184>
                printf("\n\rUNKNOWN ERROR\n\r");
    dc72:	4831      	ldr	r0, [pc, #196]	; (dd38 <demo_appdata_callback+0x338>)
    dc74:	4b0a      	ldr	r3, [pc, #40]	; (dca0 <demo_appdata_callback+0x2a0>)
    dc76:	4798      	blx	r3
            break;
    dc78:	e784      	b.n	db84 <demo_appdata_callback+0x184>
    dc7a:	46c0      	nop			; (mov r8, r8)
    dc7c:	200000d4 	.word	0x200000d4
    dc80:	0000c7b9 	.word	0x0000c7b9
    dc84:	20001048 	.word	0x20001048
    dc88:	0000c0ad 	.word	0x0000c0ad
    dc8c:	200000d0 	.word	0x200000d0
    dc90:	20001039 	.word	0x20001039
    dc94:	0000d789 	.word	0x0000d789
    dc98:	0001eab4 	.word	0x0001eab4
    dc9c:	0001e774 	.word	0x0001e774
    dca0:	000182cd 	.word	0x000182cd
    dca4:	0001e790 	.word	0x0001e790
    dca8:	0001e7b0 	.word	0x0001e7b0
    dcac:	0001e7c8 	.word	0x0001e7c8
    dcb0:	0001e7dc 	.word	0x0001e7dc
    dcb4:	0001e7e8 	.word	0x0001e7e8
    dcb8:	0001e7ec 	.word	0x0001e7ec
    dcbc:	000183a5 	.word	0x000183a5
    dcc0:	0001e80c 	.word	0x0001e80c
    dcc4:	0001ec14 	.word	0x0001ec14
    dcc8:	0001ec28 	.word	0x0001ec28
    dccc:	0001ec40 	.word	0x0001ec40
    dcd0:	0001ec58 	.word	0x0001ec58
    dcd4:	0001ec68 	.word	0x0001ec68
    dcd8:	0001ec80 	.word	0x0001ec80
    dcdc:	0001ec9c 	.word	0x0001ec9c
    dce0:	0001ecb4 	.word	0x0001ecb4
    dce4:	0001ecc8 	.word	0x0001ecc8
    dce8:	0001ece0 	.word	0x0001ece0
    dcec:	0001ecfc 	.word	0x0001ecfc
    dcf0:	0001ed1c 	.word	0x0001ed1c
    dcf4:	0001ed3c 	.word	0x0001ed3c
    dcf8:	0001ed58 	.word	0x0001ed58
    dcfc:	0001ed6c 	.word	0x0001ed6c
    dd00:	0001ed84 	.word	0x0001ed84
    dd04:	0001ed90 	.word	0x0001ed90
    dd08:	0001ed9c 	.word	0x0001ed9c
    dd0c:	0001edc0 	.word	0x0001edc0
    dd10:	0001eddc 	.word	0x0001eddc
    dd14:	0001edf4 	.word	0x0001edf4
    dd18:	0001ee08 	.word	0x0001ee08
    dd1c:	0001ee18 	.word	0x0001ee18
    dd20:	0001ee2c 	.word	0x0001ee2c
    dd24:	0001ee44 	.word	0x0001ee44
    dd28:	0001eb20 	.word	0x0001eb20
    dd2c:	0001e840 	.word	0x0001e840
    dd30:	0001e858 	.word	0x0001e858
    dd34:	0001ee54 	.word	0x0001ee54
    dd38:	0001ee64 	.word	0x0001ee64

0000dd3c <appWakeup>:
{
    dd3c:	b510      	push	{r4, lr}
    dd3e:	0004      	movs	r4, r0
    HAL_Radio_resources_init();
    dd40:	4b07      	ldr	r3, [pc, #28]	; (dd60 <appWakeup+0x24>)
    dd42:	4798      	blx	r3
    sio2host_init();
    dd44:	4b07      	ldr	r3, [pc, #28]	; (dd64 <appWakeup+0x28>)
    dd46:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    dd48:	2203      	movs	r2, #3
    dd4a:	4b07      	ldr	r3, [pc, #28]	; (dd68 <appWakeup+0x2c>)
    dd4c:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
    dd4e:	2000      	movs	r0, #0
    dd50:	4b06      	ldr	r3, [pc, #24]	; (dd6c <appWakeup+0x30>)
    dd52:	4798      	blx	r3
    printf("\r\nsleep_ok %ld ms\r\n", sleptDuration);
    dd54:	0021      	movs	r1, r4
    dd56:	4806      	ldr	r0, [pc, #24]	; (dd70 <appWakeup+0x34>)
    dd58:	4b06      	ldr	r3, [pc, #24]	; (dd74 <appWakeup+0x38>)
    dd5a:	4798      	blx	r3
}
    dd5c:	bd10      	pop	{r4, pc}
    dd5e:	46c0      	nop			; (mov r8, r8)
    dd60:	00006709 	.word	0x00006709
    dd64:	000061b5 	.word	0x000061b5
    dd68:	20001039 	.word	0x20001039
    dd6c:	0000d789 	.word	0x0000d789
    dd70:	0001ebd0 	.word	0x0001ebd0
    dd74:	000182cd 	.word	0x000182cd

0000dd78 <serial_data_handler>:
{
    dd78:	b510      	push	{r4, lr}
	if (startReceiving == true)
    dd7a:	4b0e      	ldr	r3, [pc, #56]	; (ddb4 <serial_data_handler+0x3c>)
    dd7c:	781b      	ldrb	r3, [r3, #0]
    dd7e:	2b00      	cmp	r3, #0
    dd80:	d100      	bne.n	dd84 <serial_data_handler+0xc>
}
    dd82:	bd10      	pop	{r4, pc}
		if((-1) != (rxChar = sio2host_getchar_nowait()))
    dd84:	4b0c      	ldr	r3, [pc, #48]	; (ddb8 <serial_data_handler+0x40>)
    dd86:	4798      	blx	r3
    dd88:	1c43      	adds	r3, r0, #1
    dd8a:	d0fa      	beq.n	dd82 <serial_data_handler+0xa>
			serialData = (char)rxChar;
    dd8c:	b2c0      	uxtb	r0, r0
			if((serialData != '\r') && (serialData != '\n') && (serialData != '\b'))
    dd8e:	280d      	cmp	r0, #13
    dd90:	d0f7      	beq.n	dd82 <serial_data_handler+0xa>
    dd92:	2302      	movs	r3, #2
    dd94:	0002      	movs	r2, r0
    dd96:	439a      	bics	r2, r3
    dd98:	2a08      	cmp	r2, #8
    dd9a:	d0f2      	beq.n	dd82 <serial_data_handler+0xa>
				startReceiving = false;
    dd9c:	2200      	movs	r2, #0
    dd9e:	4b05      	ldr	r3, [pc, #20]	; (ddb4 <serial_data_handler+0x3c>)
    dda0:	701a      	strb	r2, [r3, #0]
  			    serialBuffer = rxChar;
    dda2:	4b06      	ldr	r3, [pc, #24]	; (ddbc <serial_data_handler+0x44>)
    dda4:	7018      	strb	r0, [r3, #0]
			    appPostTask(PROCESS_TASK_HANDLER);
    dda6:	2001      	movs	r0, #1
    dda8:	4b05      	ldr	r3, [pc, #20]	; (ddc0 <serial_data_handler+0x48>)
    ddaa:	4798      	blx	r3
				printf("\r\n");			
    ddac:	4805      	ldr	r0, [pc, #20]	; (ddc4 <serial_data_handler+0x4c>)
    ddae:	4b06      	ldr	r3, [pc, #24]	; (ddc8 <serial_data_handler+0x50>)
    ddb0:	4798      	blx	r3
}
    ddb2:	e7e6      	b.n	dd82 <serial_data_handler+0xa>
    ddb4:	2000105a 	.word	0x2000105a
    ddb8:	00006421 	.word	0x00006421
    ddbc:	20001059 	.word	0x20001059
    ddc0:	0000d789 	.word	0x0000d789
    ddc4:	0001ecf8 	.word	0x0001ecf8
    ddc8:	000183a5 	.word	0x000183a5

0000ddcc <mote_demo_init>:
{
    ddcc:	b530      	push	{r4, r5, lr}
    ddce:	b087      	sub	sp, #28
    resource_init();
    ddd0:	4b33      	ldr	r3, [pc, #204]	; (dea0 <mote_demo_init+0xd4>)
    ddd2:	4798      	blx	r3
static void dev_eui_read(void)
{
#if (EDBG_EUI_READ == 1)
	uint8_t invalidEDBGDevEui[8];
	uint8_t EDBGDevEUI[8];
	edbg_eui_read_eui64((uint8_t *)&EDBGDevEUI);
    ddd4:	a804      	add	r0, sp, #16
    ddd6:	4b33      	ldr	r3, [pc, #204]	; (dea4 <mote_demo_init+0xd8>)
    ddd8:	4798      	blx	r3
	memset(&invalidEDBGDevEui, 0xFF, sizeof(invalidEDBGDevEui));
    ddda:	2208      	movs	r2, #8
    dddc:	21ff      	movs	r1, #255	; 0xff
    ddde:	a802      	add	r0, sp, #8
    dde0:	4b31      	ldr	r3, [pc, #196]	; (dea8 <mote_demo_init+0xdc>)
    dde2:	4798      	blx	r3
	/* If EDBG doesnot have DEV EUI, the read value will be of all 0xFF, 
	   Set devEUI in conf_app.h in that case */
	if(0 != memcmp(&EDBGDevEUI, &invalidEDBGDevEui, sizeof(demoDevEui)))
    dde4:	2208      	movs	r2, #8
    dde6:	a902      	add	r1, sp, #8
    dde8:	a804      	add	r0, sp, #16
    ddea:	4b30      	ldr	r3, [pc, #192]	; (deac <mote_demo_init+0xe0>)
    ddec:	4798      	blx	r3
    ddee:	2800      	cmp	r0, #0
    ddf0:	d003      	beq.n	ddfa <mote_demo_init+0x2e>
	{
		/* Set EUI addr in EDBG if there */
		memcpy(demoDevEui, EDBGDevEUI, sizeof(demoDevEui));
    ddf2:	4a2f      	ldr	r2, [pc, #188]	; (deb0 <mote_demo_init+0xe4>)
    ddf4:	ab04      	add	r3, sp, #16
    ddf6:	cb03      	ldmia	r3!, {r0, r1}
    ddf8:	c203      	stmia	r2!, {r0, r1}
	startReceiving = false;
    ddfa:	2200      	movs	r2, #0
    ddfc:	4b2d      	ldr	r3, [pc, #180]	; (deb4 <mote_demo_init+0xe8>)
    ddfe:	701a      	strb	r2, [r3, #0]
    LORAWAN_Init(demo_appdata_callback, demo_joindata_callback);
    de00:	492d      	ldr	r1, [pc, #180]	; (deb8 <mote_demo_init+0xec>)
    de02:	482e      	ldr	r0, [pc, #184]	; (debc <mote_demo_init+0xf0>)
    de04:	4b2e      	ldr	r3, [pc, #184]	; (dec0 <mote_demo_init+0xf4>)
    de06:	4798      	blx	r3
    printf("\n\n\r*******************************************************\n\r");
    de08:	482e      	ldr	r0, [pc, #184]	; (dec4 <mote_demo_init+0xf8>)
    de0a:	4c2f      	ldr	r4, [pc, #188]	; (dec8 <mote_demo_init+0xfc>)
    de0c:	47a0      	blx	r4
    printf("\n\rMicrochip LoRaWAN Stack %s\r\n",STACK_VER);
    de0e:	492f      	ldr	r1, [pc, #188]	; (decc <mote_demo_init+0x100>)
    de10:	482f      	ldr	r0, [pc, #188]	; (ded0 <mote_demo_init+0x104>)
    de12:	47a0      	blx	r4
    printf("\r\nInit - Successful\r\n");
    de14:	482f      	ldr	r0, [pc, #188]	; (ded4 <mote_demo_init+0x108>)
    de16:	4b30      	ldr	r3, [pc, #192]	; (ded8 <mote_demo_init+0x10c>)
    de18:	4798      	blx	r3
    status = PDS_IsRestorable();
    de1a:	4b30      	ldr	r3, [pc, #192]	; (dedc <mote_demo_init+0x110>)
    de1c:	4798      	blx	r3
    if(status)
    de1e:	2800      	cmp	r0, #0
    de20:	d037      	beq.n	de92 <mote_demo_init+0xc6>
        PDS_RestoreAll();
    de22:	4b2f      	ldr	r3, [pc, #188]	; (dee0 <mote_demo_init+0x114>)
    de24:	4798      	blx	r3
        LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
    de26:	4c2f      	ldr	r4, [pc, #188]	; (dee4 <mote_demo_init+0x118>)
    de28:	0022      	movs	r2, r4
    de2a:	2100      	movs	r1, #0
    de2c:	2023      	movs	r0, #35	; 0x23
    de2e:	4b2e      	ldr	r3, [pc, #184]	; (dee8 <mote_demo_init+0x11c>)
    de30:	4798      	blx	r3
            if(bandTable[i] == prevBand)
    de32:	7821      	ldrb	r1, [r4, #0]
    de34:	4b2d      	ldr	r3, [pc, #180]	; (deec <mote_demo_init+0x120>)
    de36:	781b      	ldrb	r3, [r3, #0]
    de38:	428b      	cmp	r3, r1
    de3a:	d027      	beq.n	de8c <mote_demo_init+0xc0>
    de3c:	2401      	movs	r4, #1
    de3e:	482b      	ldr	r0, [pc, #172]	; (deec <mote_demo_init+0x120>)
    de40:	5c22      	ldrb	r2, [r4, r0]
    de42:	428a      	cmp	r2, r1
    de44:	d023      	beq.n	de8e <mote_demo_init+0xc2>
        for (uint32_t i = 0; i < sizeof(bandTable) -1; i++)
    de46:	3401      	adds	r4, #1
    de48:	2c09      	cmp	r4, #9
    de4a:	d1f9      	bne.n	de40 <mote_demo_init+0x74>
        uint8_t prevChoice = 0xFF;
    de4c:	34f6      	adds	r4, #246	; 0xf6
        memset(rxchar,0,sizeof(rxchar));
    de4e:	4d28      	ldr	r5, [pc, #160]	; (def0 <mote_demo_init+0x124>)
    de50:	220b      	movs	r2, #11
    de52:	2100      	movs	r1, #0
    de54:	0028      	movs	r0, r5
    de56:	4b14      	ldr	r3, [pc, #80]	; (dea8 <mote_demo_init+0xdc>)
    de58:	4798      	blx	r3
        sio2host_rx(rxchar,10);
    de5a:	210a      	movs	r1, #10
    de5c:	0028      	movs	r0, r5
    de5e:	4b25      	ldr	r3, [pc, #148]	; (def4 <mote_demo_init+0x128>)
    de60:	4798      	blx	r3
        printf ("Last configured Regional band %s\r\n",bandStrings[prevChoice]);
    de62:	00a4      	lsls	r4, r4, #2
    de64:	4a24      	ldr	r2, [pc, #144]	; (def8 <mote_demo_init+0x12c>)
    de66:	58a5      	ldr	r5, [r4, r2]
    de68:	0029      	movs	r1, r5
    de6a:	4824      	ldr	r0, [pc, #144]	; (defc <mote_demo_init+0x130>)
    de6c:	4c16      	ldr	r4, [pc, #88]	; (dec8 <mote_demo_init+0xfc>)
    de6e:	47a0      	blx	r4
        printf("Press any key to change band\r\n Continuing in %s in ", bandStrings[prevChoice]);
    de70:	0029      	movs	r1, r5
    de72:	4823      	ldr	r0, [pc, #140]	; (df00 <mote_demo_init+0x134>)
    de74:	47a0      	blx	r4
        SwTimerStart(demoTimerId,MS_TO_US(1000),SW_TIMEOUT_RELATIVE,(void *)demoTimerCb,NULL);
    de76:	4b23      	ldr	r3, [pc, #140]	; (df04 <mote_demo_init+0x138>)
    de78:	7818      	ldrb	r0, [r3, #0]
    de7a:	2300      	movs	r3, #0
    de7c:	9300      	str	r3, [sp, #0]
    de7e:	4b22      	ldr	r3, [pc, #136]	; (df08 <mote_demo_init+0x13c>)
    de80:	2200      	movs	r2, #0
    de82:	4922      	ldr	r1, [pc, #136]	; (df0c <mote_demo_init+0x140>)
    de84:	4c22      	ldr	r4, [pc, #136]	; (df10 <mote_demo_init+0x144>)
    de86:	47a0      	blx	r4
}
    de88:	b007      	add	sp, #28
    de8a:	bd30      	pop	{r4, r5, pc}
        for (uint32_t i = 0; i < sizeof(bandTable) -1; i++)
    de8c:	2400      	movs	r4, #0
                prevChoice = i;
    de8e:	b2e4      	uxtb	r4, r4
                break;
    de90:	e7dd      	b.n	de4e <mote_demo_init+0x82>
		appTaskState = DEMO_CERT_APP_STATE;
    de92:	2201      	movs	r2, #1
    de94:	4b1f      	ldr	r3, [pc, #124]	; (df14 <mote_demo_init+0x148>)
    de96:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    de98:	2000      	movs	r0, #0
    de9a:	4b1f      	ldr	r3, [pc, #124]	; (df18 <mote_demo_init+0x14c>)
    de9c:	4798      	blx	r3
}
    de9e:	e7f3      	b.n	de88 <mote_demo_init+0xbc>
    dea0:	0000c11d 	.word	0x0000c11d
    dea4:	0000b5ed 	.word	0x0000b5ed
    dea8:	00018219 	.word	0x00018219
    deac:	00018149 	.word	0x00018149
    deb0:	20000090 	.word	0x20000090
    deb4:	2000105a 	.word	0x2000105a
    deb8:	0000e27d 	.word	0x0000e27d
    debc:	0000da01 	.word	0x0000da01
    dec0:	0000f431 	.word	0x0000f431
    dec4:	0001e5ac 	.word	0x0001e5ac
    dec8:	000182cd 	.word	0x000182cd
    decc:	0001efbc 	.word	0x0001efbc
    ded0:	0001efcc 	.word	0x0001efcc
    ded4:	0001e5ec 	.word	0x0001e5ec
    ded8:	000183a5 	.word	0x000183a5
    dedc:	0000b7a9 	.word	0x0000b7a9
    dee0:	0000b80d 	.word	0x0000b80d
    dee4:	200000d1 	.word	0x200000d1
    dee8:	00010819 	.word	0x00010819
    deec:	20000058 	.word	0x20000058
    def0:	2000104c 	.word	0x2000104c
    def4:	0000636d 	.word	0x0000636d
    def8:	0001ebe4 	.word	0x0001ebe4
    defc:	0001efec 	.word	0x0001efec
    df00:	0001f010 	.word	0x0001f010
    df04:	200000d3 	.word	0x200000d3
    df08:	0000d7bd 	.word	0x0000d7bd
    df0c:	000f4240 	.word	0x000f4240
    df10:	0000c4b5 	.word	0x0000c4b5
    df14:	20001039 	.word	0x20001039
    df18:	0000d789 	.word	0x0000d789

0000df1c <power_down_wifi>:
{
    df1c:	b510      	push	{r4, lr}
	printf("\n> Powering Down WINC1500\r\n") ;
    df1e:	4804      	ldr	r0, [pc, #16]	; (df30 <power_down_wifi+0x14>)
    df20:	4b04      	ldr	r3, [pc, #16]	; (df34 <power_down_wifi+0x18>)
    df22:	4798      	blx	r3
	m2m_wifi_deinit(NULL) ;
    df24:	2000      	movs	r0, #0
    df26:	4b04      	ldr	r3, [pc, #16]	; (df38 <power_down_wifi+0x1c>)
    df28:	4798      	blx	r3
	nm_bsp_deinit() ;
    df2a:	4b04      	ldr	r3, [pc, #16]	; (df3c <power_down_wifi+0x20>)
    df2c:	4798      	blx	r3
}
    df2e:	bd10      	pop	{r4, pc}
    df30:	0001f07c 	.word	0x0001f07c
    df34:	000183a5 	.word	0x000183a5
    df38:	00001289 	.word	0x00001289
    df3c:	00000129 	.word	0x00000129

0000df40 <wifi_init>:
{
    df40:	b500      	push	{lr}
    df42:	b087      	sub	sp, #28
	nm_bsp_init();
    df44:	4b09      	ldr	r3, [pc, #36]	; (df6c <wifi_init+0x2c>)
    df46:	4798      	blx	r3
	memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
    df48:	2218      	movs	r2, #24
    df4a:	2100      	movs	r1, #0
    df4c:	4668      	mov	r0, sp
    df4e:	4b08      	ldr	r3, [pc, #32]	; (df70 <wifi_init+0x30>)
    df50:	4798      	blx	r3
	param.pfAppWifiCb = wifi_event_cb ;
    df52:	4b08      	ldr	r3, [pc, #32]	; (df74 <wifi_init+0x34>)
    df54:	9300      	str	r3, [sp, #0]
	ret = m2m_wifi_init(&param);
    df56:	4668      	mov	r0, sp
    df58:	4b07      	ldr	r3, [pc, #28]	; (df78 <wifi_init+0x38>)
    df5a:	4798      	blx	r3
    df5c:	1e01      	subs	r1, r0, #0
	if (M2M_SUCCESS != ret)
    df5e:	d101      	bne.n	df64 <wifi_init+0x24>
}
    df60:	b007      	add	sp, #28
    df62:	bd00      	pop	{pc}
		printf("main: m2m_wifi_init call error!(%d)\r\n", ret) ;
    df64:	4805      	ldr	r0, [pc, #20]	; (df7c <wifi_init+0x3c>)
    df66:	4b06      	ldr	r3, [pc, #24]	; (df80 <wifi_init+0x40>)
    df68:	4798      	blx	r3
    df6a:	e7fe      	b.n	df6a <wifi_init+0x2a>
    df6c:	00000181 	.word	0x00000181
    df70:	00018219 	.word	0x00018219
    df74:	0000e4c1 	.word	0x0000e4c1
    df78:	00001269 	.word	0x00001269
    df7c:	0001f544 	.word	0x0001f544
    df80:	000182cd 	.word	0x000182cd

0000df84 <APP_TaskHandler>:
{
    df84:	b570      	push	{r4, r5, r6, lr}
    if (appTaskFlags)
    df86:	4b12      	ldr	r3, [pc, #72]	; (dfd0 <APP_TaskHandler+0x4c>)
    df88:	781b      	ldrb	r3, [r3, #0]
    df8a:	2b00      	cmp	r3, #0
    df8c:	d008      	beq.n	dfa0 <APP_TaskHandler+0x1c>
            if ((1 << taskId) & (appTaskFlags))
    df8e:	4b10      	ldr	r3, [pc, #64]	; (dfd0 <APP_TaskHandler+0x4c>)
    df90:	781b      	ldrb	r3, [r3, #0]
    df92:	07db      	lsls	r3, r3, #31
    df94:	d406      	bmi.n	dfa4 <APP_TaskHandler+0x20>
    df96:	4b0e      	ldr	r3, [pc, #56]	; (dfd0 <APP_TaskHandler+0x4c>)
    df98:	781c      	ldrb	r4, [r3, #0]
    df9a:	07a4      	lsls	r4, r4, #30
    df9c:	0fe4      	lsrs	r4, r4, #31
    df9e:	d102      	bne.n	dfa6 <APP_TaskHandler+0x22>
}
    dfa0:	2000      	movs	r0, #0
    dfa2:	bd70      	pop	{r4, r5, r6, pc}
            if ((1 << taskId) & (appTaskFlags))
    dfa4:	2400      	movs	r4, #0
                ATOMIC_SECTION_ENTER
    dfa6:	4b0b      	ldr	r3, [pc, #44]	; (dfd4 <APP_TaskHandler+0x50>)
    dfa8:	4798      	blx	r3
                appTaskFlags &= ~(1 << taskId);
    dfaa:	4d09      	ldr	r5, [pc, #36]	; (dfd0 <APP_TaskHandler+0x4c>)
    dfac:	782b      	ldrb	r3, [r5, #0]
    dfae:	2201      	movs	r2, #1
    dfb0:	40a2      	lsls	r2, r4
    dfb2:	4393      	bics	r3, r2
    dfb4:	702b      	strb	r3, [r5, #0]
                ATOMIC_SECTION_EXIT
    dfb6:	4b08      	ldr	r3, [pc, #32]	; (dfd8 <APP_TaskHandler+0x54>)
    dfb8:	4798      	blx	r3
                appTaskHandlers[taskId]();
    dfba:	00a4      	lsls	r4, r4, #2
    dfbc:	4b07      	ldr	r3, [pc, #28]	; (dfdc <APP_TaskHandler+0x58>)
    dfbe:	58e3      	ldr	r3, [r4, r3]
    dfc0:	4798      	blx	r3
                if (appTaskFlags)
    dfc2:	782b      	ldrb	r3, [r5, #0]
    dfc4:	2b00      	cmp	r3, #0
    dfc6:	d0eb      	beq.n	dfa0 <APP_TaskHandler+0x1c>
                    SYSTEM_PostTask(APP_TASK_ID);
    dfc8:	2010      	movs	r0, #16
    dfca:	4b05      	ldr	r3, [pc, #20]	; (dfe0 <APP_TaskHandler+0x5c>)
    dfcc:	4798      	blx	r3
    dfce:	e7e7      	b.n	dfa0 <APP_TaskHandler+0x1c>
    dfd0:	20001038 	.word	0x20001038
    dfd4:	000069ed 	.word	0x000069ed
    dfd8:	000069f9 	.word	0x000069f9
    dfdc:	0001ebc8 	.word	0x0001ebc8
    dfe0:	0000cad9 	.word	0x0000cad9

0000dfe4 <print_array>:
{
    dfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dfe6:	0004      	movs	r4, r0
    dfe8:	000d      	movs	r5, r1
    printf("0x");
    dfea:	480a      	ldr	r0, [pc, #40]	; (e014 <print_array+0x30>)
    dfec:	4b0a      	ldr	r3, [pc, #40]	; (e018 <print_array+0x34>)
    dfee:	4798      	blx	r3
    for (uint8_t i =0; i < length; i++)
    dff0:	2d00      	cmp	r5, #0
    dff2:	d00b      	beq.n	e00c <print_array+0x28>
    dff4:	3d01      	subs	r5, #1
    dff6:	b2ed      	uxtb	r5, r5
    dff8:	3501      	adds	r5, #1
    dffa:	1965      	adds	r5, r4, r5
        printf("%02x", *array);
    dffc:	4e07      	ldr	r6, [pc, #28]	; (e01c <print_array+0x38>)
    dffe:	4f06      	ldr	r7, [pc, #24]	; (e018 <print_array+0x34>)
    e000:	7821      	ldrb	r1, [r4, #0]
    e002:	0030      	movs	r0, r6
    e004:	47b8      	blx	r7
        array++;
    e006:	3401      	adds	r4, #1
    for (uint8_t i =0; i < length; i++)
    e008:	42ac      	cmp	r4, r5
    e00a:	d1f9      	bne.n	e000 <print_array+0x1c>
    printf("\n\r");
    e00c:	4804      	ldr	r0, [pc, #16]	; (e020 <print_array+0x3c>)
    e00e:	4b02      	ldr	r3, [pc, #8]	; (e018 <print_array+0x34>)
    e010:	4798      	blx	r3
}
    e012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e014:	0001e948 	.word	0x0001e948
    e018:	000182cd 	.word	0x000182cd
    e01c:	0001e94c 	.word	0x0001e94c
    e020:	0001ec24 	.word	0x0001ec24

0000e024 <set_join_parameters>:
{
    e024:	b510      	push	{r4, lr}
    e026:	0004      	movs	r4, r0
    printf("\n********************Join Parameters********************\n\r");
    e028:	482a      	ldr	r0, [pc, #168]	; (e0d4 <set_join_parameters+0xb0>)
    e02a:	4b2b      	ldr	r3, [pc, #172]	; (e0d8 <set_join_parameters+0xb4>)
    e02c:	4798      	blx	r3
    if(ACTIVATION_BY_PERSONALIZATION == activation_type)
    e02e:	2c01      	cmp	r4, #1
    e030:	d008      	beq.n	e044 <set_join_parameters+0x20>
        status = LORAWAN_SetAttr (DEV_EUI, demoDevEui);
    e032:	492a      	ldr	r1, [pc, #168]	; (e0dc <set_join_parameters+0xb8>)
    e034:	2000      	movs	r0, #0
    e036:	4b2a      	ldr	r3, [pc, #168]	; (e0e0 <set_join_parameters+0xbc>)
    e038:	4798      	blx	r3
    e03a:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    e03c:	2808      	cmp	r0, #8
    e03e:	d025      	beq.n	e08c <set_join_parameters+0x68>
}
    e040:	0020      	movs	r0, r4
    e042:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr (DEV_ADDR, &demoDevAddr);
    e044:	4927      	ldr	r1, [pc, #156]	; (e0e4 <set_join_parameters+0xc0>)
    e046:	2002      	movs	r0, #2
    e048:	4b25      	ldr	r3, [pc, #148]	; (e0e0 <set_join_parameters+0xbc>)
    e04a:	4798      	blx	r3
    e04c:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    e04e:	2808      	cmp	r0, #8
    e050:	d1f6      	bne.n	e040 <set_join_parameters+0x1c>
            status = LORAWAN_SetAttr (APPS_KEY, demoAppsKey);
    e052:	4925      	ldr	r1, [pc, #148]	; (e0e8 <set_join_parameters+0xc4>)
    e054:	2005      	movs	r0, #5
    e056:	4b22      	ldr	r3, [pc, #136]	; (e0e0 <set_join_parameters+0xbc>)
    e058:	4798      	blx	r3
    e05a:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    e05c:	2808      	cmp	r0, #8
    e05e:	d1ef      	bne.n	e040 <set_join_parameters+0x1c>
            printf("\nAppSessionKey : ");
    e060:	4822      	ldr	r0, [pc, #136]	; (e0ec <set_join_parameters+0xc8>)
    e062:	4b1d      	ldr	r3, [pc, #116]	; (e0d8 <set_join_parameters+0xb4>)
    e064:	4798      	blx	r3
            print_array((uint8_t *)&demoAppsKey, sizeof(demoAppsKey));
    e066:	2110      	movs	r1, #16
    e068:	481f      	ldr	r0, [pc, #124]	; (e0e8 <set_join_parameters+0xc4>)
    e06a:	4b21      	ldr	r3, [pc, #132]	; (e0f0 <set_join_parameters+0xcc>)
    e06c:	4798      	blx	r3
            status = LORAWAN_SetAttr (NWKS_KEY, demoNwksKey);
    e06e:	4921      	ldr	r1, [pc, #132]	; (e0f4 <set_join_parameters+0xd0>)
    e070:	2004      	movs	r0, #4
    e072:	4b1b      	ldr	r3, [pc, #108]	; (e0e0 <set_join_parameters+0xbc>)
    e074:	4798      	blx	r3
    e076:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    e078:	2808      	cmp	r0, #8
    e07a:	d1e1      	bne.n	e040 <set_join_parameters+0x1c>
            printf("\nNwkSessionKey : ");
    e07c:	481e      	ldr	r0, [pc, #120]	; (e0f8 <set_join_parameters+0xd4>)
    e07e:	4b16      	ldr	r3, [pc, #88]	; (e0d8 <set_join_parameters+0xb4>)
    e080:	4798      	blx	r3
            print_array((uint8_t *)&demoNwksKey, sizeof(demoNwksKey));
    e082:	2110      	movs	r1, #16
    e084:	481b      	ldr	r0, [pc, #108]	; (e0f4 <set_join_parameters+0xd0>)
    e086:	4b1a      	ldr	r3, [pc, #104]	; (e0f0 <set_join_parameters+0xcc>)
    e088:	4798      	blx	r3
    e08a:	e7d9      	b.n	e040 <set_join_parameters+0x1c>
            printf("\nDevEUI : ");
    e08c:	481b      	ldr	r0, [pc, #108]	; (e0fc <set_join_parameters+0xd8>)
    e08e:	4b12      	ldr	r3, [pc, #72]	; (e0d8 <set_join_parameters+0xb4>)
    e090:	4798      	blx	r3
            print_array((uint8_t *)&demoDevEui, sizeof(demoDevEui));
    e092:	2108      	movs	r1, #8
    e094:	4811      	ldr	r0, [pc, #68]	; (e0dc <set_join_parameters+0xb8>)
    e096:	4b16      	ldr	r3, [pc, #88]	; (e0f0 <set_join_parameters+0xcc>)
    e098:	4798      	blx	r3
            status = LORAWAN_SetAttr (APP_EUI, demoAppEui);
    e09a:	4919      	ldr	r1, [pc, #100]	; (e100 <set_join_parameters+0xdc>)
    e09c:	2001      	movs	r0, #1
    e09e:	4b10      	ldr	r3, [pc, #64]	; (e0e0 <set_join_parameters+0xbc>)
    e0a0:	4798      	blx	r3
    e0a2:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    e0a4:	2808      	cmp	r0, #8
    e0a6:	d1cb      	bne.n	e040 <set_join_parameters+0x1c>
            printf("\nAppEUI : ");
    e0a8:	4816      	ldr	r0, [pc, #88]	; (e104 <set_join_parameters+0xe0>)
    e0aa:	4b0b      	ldr	r3, [pc, #44]	; (e0d8 <set_join_parameters+0xb4>)
    e0ac:	4798      	blx	r3
            print_array((uint8_t *)&demoAppEui, sizeof(demoAppEui));
    e0ae:	2108      	movs	r1, #8
    e0b0:	4813      	ldr	r0, [pc, #76]	; (e100 <set_join_parameters+0xdc>)
    e0b2:	4b0f      	ldr	r3, [pc, #60]	; (e0f0 <set_join_parameters+0xcc>)
    e0b4:	4798      	blx	r3
            status = LORAWAN_SetAttr (APP_KEY, demoAppKey);
    e0b6:	4914      	ldr	r1, [pc, #80]	; (e108 <set_join_parameters+0xe4>)
    e0b8:	2003      	movs	r0, #3
    e0ba:	4b09      	ldr	r3, [pc, #36]	; (e0e0 <set_join_parameters+0xbc>)
    e0bc:	4798      	blx	r3
    e0be:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    e0c0:	2808      	cmp	r0, #8
    e0c2:	d1bd      	bne.n	e040 <set_join_parameters+0x1c>
            printf("\nAppKey : ");
    e0c4:	4811      	ldr	r0, [pc, #68]	; (e10c <set_join_parameters+0xe8>)
    e0c6:	4b04      	ldr	r3, [pc, #16]	; (e0d8 <set_join_parameters+0xb4>)
    e0c8:	4798      	blx	r3
            print_array((uint8_t *)&demoAppKey, sizeof(demoAppKey));
    e0ca:	2110      	movs	r1, #16
    e0cc:	480e      	ldr	r0, [pc, #56]	; (e108 <set_join_parameters+0xe4>)
    e0ce:	4b08      	ldr	r3, [pc, #32]	; (e0f0 <set_join_parameters+0xcc>)
    e0d0:	4798      	blx	r3
    e0d2:	e7b5      	b.n	e040 <set_join_parameters+0x1c>
    e0d4:	0001e62c 	.word	0x0001e62c
    e0d8:	000182cd 	.word	0x000182cd
    e0dc:	20000090 	.word	0x20000090
    e0e0:	000121c1 	.word	0x000121c1
    e0e4:	2000008c 	.word	0x2000008c
    e0e8:	2000007c 	.word	0x2000007c
    e0ec:	0001f2e4 	.word	0x0001f2e4
    e0f0:	0000dfe5 	.word	0x0000dfe5
    e0f4:	200000c0 	.word	0x200000c0
    e0f8:	0001f2f8 	.word	0x0001f2f8
    e0fc:	0001f30c 	.word	0x0001f30c
    e100:	20000064 	.word	0x20000064
    e104:	0001f318 	.word	0x0001f318
    e108:	2000006c 	.word	0x2000006c
    e10c:	0001f324 	.word	0x0001f324

0000e110 <set_multicast_params>:
{
    e110:	b510      	push	{r4, lr}
    printf("\n***************Multicast Parameters********************\n\r");
    e112:	481c      	ldr	r0, [pc, #112]	; (e184 <set_multicast_params+0x74>)
    e114:	4b1c      	ldr	r3, [pc, #112]	; (e188 <set_multicast_params+0x78>)
    e116:	4798      	blx	r3
    status = LORAWAN_SetAttr(MCAST_APPS_KEY, &demoMcastAppsKey);
    e118:	491c      	ldr	r1, [pc, #112]	; (e18c <set_multicast_params+0x7c>)
    e11a:	202b      	movs	r0, #43	; 0x2b
    e11c:	4b1c      	ldr	r3, [pc, #112]	; (e190 <set_multicast_params+0x80>)
    e11e:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    e120:	2808      	cmp	r0, #8
    e122:	d006      	beq.n	e132 <set_multicast_params+0x22>
        printf("\nMcastGroupAddrStatus : Failed\n\r");
    e124:	481b      	ldr	r0, [pc, #108]	; (e194 <set_multicast_params+0x84>)
    e126:	4b18      	ldr	r3, [pc, #96]	; (e188 <set_multicast_params+0x78>)
    e128:	4798      	blx	r3
        printf("\nMulticastStatus : Failed\n\r");
    e12a:	481b      	ldr	r0, [pc, #108]	; (e198 <set_multicast_params+0x88>)
    e12c:	4b16      	ldr	r3, [pc, #88]	; (e188 <set_multicast_params+0x78>)
    e12e:	4798      	blx	r3
}
    e130:	bd10      	pop	{r4, pc}
        printf("\nMcastAppSessionKey : ");
    e132:	481a      	ldr	r0, [pc, #104]	; (e19c <set_multicast_params+0x8c>)
    e134:	4b14      	ldr	r3, [pc, #80]	; (e188 <set_multicast_params+0x78>)
    e136:	4798      	blx	r3
        print_array((uint8_t *)&demoMcastAppsKey, sizeof(demoMcastAppsKey));
    e138:	2110      	movs	r1, #16
    e13a:	4814      	ldr	r0, [pc, #80]	; (e18c <set_multicast_params+0x7c>)
    e13c:	4b18      	ldr	r3, [pc, #96]	; (e1a0 <set_multicast_params+0x90>)
    e13e:	4798      	blx	r3
        status = LORAWAN_SetAttr(MCAST_NWKS_KEY, &demoMcastNwksKey);
    e140:	4918      	ldr	r1, [pc, #96]	; (e1a4 <set_multicast_params+0x94>)
    e142:	202a      	movs	r0, #42	; 0x2a
    e144:	4b12      	ldr	r3, [pc, #72]	; (e190 <set_multicast_params+0x80>)
    e146:	4798      	blx	r3
    if(status == LORAWAN_SUCCESS)
    e148:	2808      	cmp	r0, #8
    e14a:	d1eb      	bne.n	e124 <set_multicast_params+0x14>
        printf("\nMcastNwkSessionKey : ");
    e14c:	4816      	ldr	r0, [pc, #88]	; (e1a8 <set_multicast_params+0x98>)
    e14e:	4b0e      	ldr	r3, [pc, #56]	; (e188 <set_multicast_params+0x78>)
    e150:	4798      	blx	r3
        print_array((uint8_t *)&demoMcastNwksKey, sizeof(demoMcastNwksKey));
    e152:	2110      	movs	r1, #16
    e154:	4813      	ldr	r0, [pc, #76]	; (e1a4 <set_multicast_params+0x94>)
    e156:	4b12      	ldr	r3, [pc, #72]	; (e1a0 <set_multicast_params+0x90>)
    e158:	4798      	blx	r3
        status = LORAWAN_SetAttr(MCAST_GROUP_ADDR, &demoMcastDevAddr);
    e15a:	4914      	ldr	r1, [pc, #80]	; (e1ac <set_multicast_params+0x9c>)
    e15c:	2029      	movs	r0, #41	; 0x29
    e15e:	4b0c      	ldr	r3, [pc, #48]	; (e190 <set_multicast_params+0x80>)
    e160:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    e162:	2808      	cmp	r0, #8
    e164:	d1de      	bne.n	e124 <set_multicast_params+0x14>
        printf("\nMcastGroupAddr : 0x%lx\n\r", demoMcastDevAddr);
    e166:	4b11      	ldr	r3, [pc, #68]	; (e1ac <set_multicast_params+0x9c>)
    e168:	6819      	ldr	r1, [r3, #0]
    e16a:	4811      	ldr	r0, [pc, #68]	; (e1b0 <set_multicast_params+0xa0>)
    e16c:	4b06      	ldr	r3, [pc, #24]	; (e188 <set_multicast_params+0x78>)
    e16e:	4798      	blx	r3
        status = LORAWAN_SetAttr(MCAST_ENABLE, &demoMcastEnable);
    e170:	4910      	ldr	r1, [pc, #64]	; (e1b4 <set_multicast_params+0xa4>)
    e172:	2028      	movs	r0, #40	; 0x28
    e174:	4b06      	ldr	r3, [pc, #24]	; (e190 <set_multicast_params+0x80>)
    e176:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    e178:	2808      	cmp	r0, #8
    e17a:	d1d6      	bne.n	e12a <set_multicast_params+0x1a>
        printf("\nMulticastStatus : Enabled\n\r");
    e17c:	480e      	ldr	r0, [pc, #56]	; (e1b8 <set_multicast_params+0xa8>)
    e17e:	4b02      	ldr	r3, [pc, #8]	; (e188 <set_multicast_params+0x78>)
    e180:	4798      	blx	r3
    e182:	e7d5      	b.n	e130 <set_multicast_params+0x20>
    e184:	0001f330 	.word	0x0001f330
    e188:	000182cd 	.word	0x000182cd
    e18c:	20000098 	.word	0x20000098
    e190:	000121c1 	.word	0x000121c1
    e194:	0001f3b8 	.word	0x0001f3b8
    e198:	0001f3fc 	.word	0x0001f3fc
    e19c:	0001f36c 	.word	0x0001f36c
    e1a0:	0000dfe5 	.word	0x0000dfe5
    e1a4:	200000b0 	.word	0x200000b0
    e1a8:	0001f384 	.word	0x0001f384
    e1ac:	200000a8 	.word	0x200000a8
    e1b0:	0001f39c 	.word	0x0001f39c
    e1b4:	200000ac 	.word	0x200000ac
    e1b8:	0001f3dc 	.word	0x0001f3dc

0000e1bc <set_device_type>:
{
    e1bc:	b510      	push	{r4, lr}
    e1be:	b082      	sub	sp, #8
    e1c0:	466b      	mov	r3, sp
    e1c2:	1dd9      	adds	r1, r3, #7
    e1c4:	7008      	strb	r0, [r1, #0]
    status = LORAWAN_SetAttr(EDCLASS, &ed_class);
    e1c6:	2019      	movs	r0, #25
    e1c8:	4b08      	ldr	r3, [pc, #32]	; (e1ec <set_device_type+0x30>)
    e1ca:	4798      	blx	r3
    e1cc:	0004      	movs	r4, r0
    if((LORAWAN_SUCCESS == status) && ((CLASS_C | CLASS_B) & ed_class) && (true == DEMO_APP_MCAST_ENABLE))
    e1ce:	2808      	cmp	r0, #8
    e1d0:	d002      	beq.n	e1d8 <set_device_type+0x1c>
}
    e1d2:	0020      	movs	r0, r4
    e1d4:	b002      	add	sp, #8
    e1d6:	bd10      	pop	{r4, pc}
    if((LORAWAN_SUCCESS == status) && ((CLASS_C | CLASS_B) & ed_class) && (true == DEMO_APP_MCAST_ENABLE))
    e1d8:	466b      	mov	r3, sp
    e1da:	3307      	adds	r3, #7
    e1dc:	781b      	ldrb	r3, [r3, #0]
    e1de:	2206      	movs	r2, #6
    e1e0:	421a      	tst	r2, r3
    e1e2:	d0f6      	beq.n	e1d2 <set_device_type+0x16>
        set_multicast_params();
    e1e4:	4b02      	ldr	r3, [pc, #8]	; (e1f0 <set_device_type+0x34>)
    e1e6:	4798      	blx	r3
    e1e8:	e7f3      	b.n	e1d2 <set_device_type+0x16>
    e1ea:	46c0      	nop			; (mov r8, r8)
    e1ec:	000121c1 	.word	0x000121c1
    e1f0:	0000e111 	.word	0x0000e111

0000e1f4 <print_application_config>:
{
    e1f4:	b530      	push	{r4, r5, lr}
    e1f6:	b083      	sub	sp, #12
    printf("\n***************Application Configuration***************\n\r");
    e1f8:	4814      	ldr	r0, [pc, #80]	; (e24c <print_application_config+0x58>)
    e1fa:	4d15      	ldr	r5, [pc, #84]	; (e250 <print_application_config+0x5c>)
    e1fc:	47a8      	blx	r5
    LORAWAN_GetAttr(EDCLASS, NULL, &edClass);
    e1fe:	466b      	mov	r3, sp
    e200:	1ddc      	adds	r4, r3, #7
    e202:	0022      	movs	r2, r4
    e204:	2100      	movs	r1, #0
    e206:	2019      	movs	r0, #25
    e208:	4b12      	ldr	r3, [pc, #72]	; (e254 <print_application_config+0x60>)
    e20a:	4798      	blx	r3
    printf("\nDevType : ");
    e20c:	4812      	ldr	r0, [pc, #72]	; (e258 <print_application_config+0x64>)
    e20e:	47a8      	blx	r5
    if(edClass == CLASS_A)
    e210:	7823      	ldrb	r3, [r4, #0]
    e212:	2b01      	cmp	r3, #1
    e214:	d011      	beq.n	e23a <print_application_config+0x46>
    else if(edClass == CLASS_C)
    e216:	2b04      	cmp	r3, #4
    e218:	d013      	beq.n	e242 <print_application_config+0x4e>
    printf("\nActivationType : ");
    e21a:	4810      	ldr	r0, [pc, #64]	; (e25c <print_application_config+0x68>)
    e21c:	4c0c      	ldr	r4, [pc, #48]	; (e250 <print_application_config+0x5c>)
    e21e:	47a0      	blx	r4
        printf("OTAA\n\r");
    e220:	480f      	ldr	r0, [pc, #60]	; (e260 <print_application_config+0x6c>)
    e222:	47a0      	blx	r4
    printf("\nTransmission Type - ");
    e224:	480f      	ldr	r0, [pc, #60]	; (e264 <print_application_config+0x70>)
    e226:	47a0      	blx	r4
        printf("UNCONFIRMED\n\r");
    e228:	480f      	ldr	r0, [pc, #60]	; (e268 <print_application_config+0x74>)
    e22a:	47a0      	blx	r4
    printf("\nFPort - %d\n\r", DEMO_APP_FPORT);
    e22c:	2101      	movs	r1, #1
    e22e:	480f      	ldr	r0, [pc, #60]	; (e26c <print_application_config+0x78>)
    e230:	47a0      	blx	r4
    printf("\n*******************************************************\n\r");
    e232:	480f      	ldr	r0, [pc, #60]	; (e270 <print_application_config+0x7c>)
    e234:	47a0      	blx	r4
}
    e236:	b003      	add	sp, #12
    e238:	bd30      	pop	{r4, r5, pc}
        printf("CLASS A\n\r");
    e23a:	480e      	ldr	r0, [pc, #56]	; (e274 <print_application_config+0x80>)
    e23c:	4b04      	ldr	r3, [pc, #16]	; (e250 <print_application_config+0x5c>)
    e23e:	4798      	blx	r3
    e240:	e7eb      	b.n	e21a <print_application_config+0x26>
        printf("CLASS C\n\r");
    e242:	480d      	ldr	r0, [pc, #52]	; (e278 <print_application_config+0x84>)
    e244:	4b02      	ldr	r3, [pc, #8]	; (e250 <print_application_config+0x5c>)
    e246:	4798      	blx	r3
    e248:	e7e7      	b.n	e21a <print_application_config+0x26>
    e24a:	46c0      	nop			; (mov r8, r8)
    e24c:	0001f098 	.word	0x0001f098
    e250:	000182cd 	.word	0x000182cd
    e254:	00010819 	.word	0x00010819
    e258:	0001f0d4 	.word	0x0001f0d4
    e25c:	0001f0f8 	.word	0x0001f0f8
    e260:	0001f10c 	.word	0x0001f10c
    e264:	0001f114 	.word	0x0001f114
    e268:	0001f12c 	.word	0x0001f12c
    e26c:	0001f13c 	.word	0x0001f13c
    e270:	0001f14c 	.word	0x0001f14c
    e274:	0001f0e0 	.word	0x0001f0e0
    e278:	0001f0ec 	.word	0x0001f0ec

0000e27c <demo_joindata_callback>:
{
    e27c:	b510      	push	{r4, lr}
    e27e:	b082      	sub	sp, #8
    e280:	0004      	movs	r4, r0
    set_LED_data(LED_GREEN,&off);
    e282:	4922      	ldr	r1, [pc, #136]	; (e30c <demo_joindata_callback+0x90>)
    e284:	2003      	movs	r0, #3
    e286:	4b22      	ldr	r3, [pc, #136]	; (e310 <demo_joindata_callback+0x94>)
    e288:	4798      	blx	r3
    if(true == status)
    e28a:	2c00      	cmp	r4, #0
    e28c:	d032      	beq.n	e2f4 <demo_joindata_callback+0x78>
        joined = true;
    e28e:	2201      	movs	r2, #1
    e290:	4b20      	ldr	r3, [pc, #128]	; (e314 <demo_joindata_callback+0x98>)
    e292:	701a      	strb	r2, [r3, #0]
        printf("\nJoining Successful\n\r");
    e294:	4820      	ldr	r0, [pc, #128]	; (e318 <demo_joindata_callback+0x9c>)
    e296:	4b21      	ldr	r3, [pc, #132]	; (e31c <demo_joindata_callback+0xa0>)
    e298:	4798      	blx	r3
        LORAWAN_GetAttr(DEV_ADDR, NULL, &devAddress);
    e29a:	aa01      	add	r2, sp, #4
    e29c:	2100      	movs	r1, #0
    e29e:	2002      	movs	r0, #2
    e2a0:	4c1f      	ldr	r4, [pc, #124]	; (e320 <demo_joindata_callback+0xa4>)
    e2a2:	47a0      	blx	r4
        LORAWAN_GetAttr(MCAST_ENABLE, NULL, &mcastEnabled);
    e2a4:	466b      	mov	r3, sp
    e2a6:	1cda      	adds	r2, r3, #3
    e2a8:	2100      	movs	r1, #0
    e2aa:	2028      	movs	r0, #40	; 0x28
    e2ac:	47a0      	blx	r4
        if (devAddress != DEMO_APP_MCAST_GROUP_ADDRESS)
    e2ae:	9901      	ldr	r1, [sp, #4]
    e2b0:	4b1c      	ldr	r3, [pc, #112]	; (e324 <demo_joindata_callback+0xa8>)
    e2b2:	4299      	cmp	r1, r3
    e2b4:	d015      	beq.n	e2e2 <demo_joindata_callback+0x66>
            printf("\nDevAddr: 0x%lx\n\r", devAddress);
    e2b6:	481c      	ldr	r0, [pc, #112]	; (e328 <demo_joindata_callback+0xac>)
    e2b8:	4b18      	ldr	r3, [pc, #96]	; (e31c <demo_joindata_callback+0xa0>)
    e2ba:	4798      	blx	r3
        print_application_config();
    e2bc:	4b1b      	ldr	r3, [pc, #108]	; (e32c <demo_joindata_callback+0xb0>)
    e2be:	4798      	blx	r3
        set_LED_data(LED_GREEN,&on);
    e2c0:	491b      	ldr	r1, [pc, #108]	; (e330 <demo_joindata_callback+0xb4>)
    e2c2:	2003      	movs	r0, #3
    e2c4:	4b12      	ldr	r3, [pc, #72]	; (e310 <demo_joindata_callback+0x94>)
    e2c6:	4798      	blx	r3
    printf("\n\r*******************************************************\n\r");
    e2c8:	481a      	ldr	r0, [pc, #104]	; (e334 <demo_joindata_callback+0xb8>)
    e2ca:	4b14      	ldr	r3, [pc, #80]	; (e31c <demo_joindata_callback+0xa0>)
    e2cc:	4798      	blx	r3
    PDS_StoreAll();
    e2ce:	4b1a      	ldr	r3, [pc, #104]	; (e338 <demo_joindata_callback+0xbc>)
    e2d0:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    e2d2:	2203      	movs	r2, #3
    e2d4:	4b19      	ldr	r3, [pc, #100]	; (e33c <demo_joindata_callback+0xc0>)
    e2d6:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
    e2d8:	2000      	movs	r0, #0
    e2da:	4b19      	ldr	r3, [pc, #100]	; (e340 <demo_joindata_callback+0xc4>)
    e2dc:	4798      	blx	r3
}
    e2de:	b002      	add	sp, #8
    e2e0:	bd10      	pop	{r4, pc}
        else if ((devAddress == DEMO_APP_MCAST_GROUP_ADDRESS) && (true == mcastEnabled))
    e2e2:	466b      	mov	r3, sp
    e2e4:	3303      	adds	r3, #3
    e2e6:	781b      	ldrb	r3, [r3, #0]
    e2e8:	2b00      	cmp	r3, #0
    e2ea:	d0e7      	beq.n	e2bc <demo_joindata_callback+0x40>
            printf("\nAddress conflict between Device Address and Multicast group address\n\r");
    e2ec:	4815      	ldr	r0, [pc, #84]	; (e344 <demo_joindata_callback+0xc8>)
    e2ee:	4b0b      	ldr	r3, [pc, #44]	; (e31c <demo_joindata_callback+0xa0>)
    e2f0:	4798      	blx	r3
    e2f2:	e7e3      	b.n	e2bc <demo_joindata_callback+0x40>
        joined = false;
    e2f4:	2200      	movs	r2, #0
    e2f6:	4b07      	ldr	r3, [pc, #28]	; (e314 <demo_joindata_callback+0x98>)
    e2f8:	701a      	strb	r2, [r3, #0]
        set_LED_data(LED_AMBER,&on);
    e2fa:	490d      	ldr	r1, [pc, #52]	; (e330 <demo_joindata_callback+0xb4>)
    e2fc:	2002      	movs	r0, #2
    e2fe:	4b04      	ldr	r3, [pc, #16]	; (e310 <demo_joindata_callback+0x94>)
    e300:	4798      	blx	r3
        printf("\nJoining Denied\n\r");
    e302:	4811      	ldr	r0, [pc, #68]	; (e348 <demo_joindata_callback+0xcc>)
    e304:	4b05      	ldr	r3, [pc, #20]	; (e31c <demo_joindata_callback+0xa0>)
    e306:	4798      	blx	r3
    e308:	e7de      	b.n	e2c8 <demo_joindata_callback+0x4c>
    e30a:	46c0      	nop			; (mov r8, r8)
    e30c:	20001048 	.word	0x20001048
    e310:	0000c0ad 	.word	0x0000c0ad
    e314:	2000103b 	.word	0x2000103b
    e318:	0001e8a8 	.word	0x0001e8a8
    e31c:	000182cd 	.word	0x000182cd
    e320:	00010819 	.word	0x00010819
    e324:	0037cc56 	.word	0x0037cc56
    e328:	0001ee78 	.word	0x0001ee78
    e32c:	0000e1f5 	.word	0x0000e1f5
    e330:	200000d0 	.word	0x200000d0
    e334:	0001e90c 	.word	0x0001e90c
    e338:	0000b8f9 	.word	0x0000b8f9
    e33c:	20001039 	.word	0x20001039
    e340:	0000d789 	.word	0x0000d789
    e344:	0001ee8c 	.word	0x0001ee8c
    e348:	0001eed4 	.word	0x0001eed4

0000e34c <print_stack_status>:
{
    e34c:	b510      	push	{r4, lr}
    switch(status)
    e34e:	0003      	movs	r3, r0
    e350:	3b08      	subs	r3, #8
    e352:	b2da      	uxtb	r2, r3
    e354:	2a0d      	cmp	r2, #13
    e356:	d833      	bhi.n	e3c0 <print_stack_status+0x74>
    e358:	0093      	lsls	r3, r2, #2
    e35a:	4a1c      	ldr	r2, [pc, #112]	; (e3cc <print_stack_status+0x80>)
    e35c:	58d3      	ldr	r3, [r2, r3]
    e35e:	469f      	mov	pc, r3
             printf("\nlorawan_success\n\r");
    e360:	481b      	ldr	r0, [pc, #108]	; (e3d0 <print_stack_status+0x84>)
    e362:	4b1c      	ldr	r3, [pc, #112]	; (e3d4 <print_stack_status+0x88>)
    e364:	4798      	blx	r3
}
    e366:	bd10      	pop	{r4, pc}
             printf("\nlorawan_state : stack_Busy\n\r");
    e368:	481b      	ldr	r0, [pc, #108]	; (e3d8 <print_stack_status+0x8c>)
    e36a:	4b1a      	ldr	r3, [pc, #104]	; (e3d4 <print_stack_status+0x88>)
    e36c:	4798      	blx	r3
        break;
    e36e:	e7fa      	b.n	e366 <print_stack_status+0x1a>
            printf("\ndevice_not_joined_to_network\n\r");
    e370:	481a      	ldr	r0, [pc, #104]	; (e3dc <print_stack_status+0x90>)
    e372:	4b18      	ldr	r3, [pc, #96]	; (e3d4 <print_stack_status+0x88>)
    e374:	4798      	blx	r3
        break;
    e376:	e7f6      	b.n	e366 <print_stack_status+0x1a>
            printf("\ninvalid_parameter\n\r");
    e378:	4819      	ldr	r0, [pc, #100]	; (e3e0 <print_stack_status+0x94>)
    e37a:	4b16      	ldr	r3, [pc, #88]	; (e3d4 <print_stack_status+0x88>)
    e37c:	4798      	blx	r3
        break;
    e37e:	e7f2      	b.n	e366 <print_stack_status+0x1a>
            printf("\nkeys_not_initialized\n\r");
    e380:	4818      	ldr	r0, [pc, #96]	; (e3e4 <print_stack_status+0x98>)
    e382:	4b14      	ldr	r3, [pc, #80]	; (e3d4 <print_stack_status+0x88>)
    e384:	4798      	blx	r3
        break;
    e386:	e7ee      	b.n	e366 <print_stack_status+0x1a>
            printf("\nsilent_immediately_active\n\r");
    e388:	4817      	ldr	r0, [pc, #92]	; (e3e8 <print_stack_status+0x9c>)
    e38a:	4b12      	ldr	r3, [pc, #72]	; (e3d4 <print_stack_status+0x88>)
    e38c:	4798      	blx	r3
        break;
    e38e:	e7ea      	b.n	e366 <print_stack_status+0x1a>
            printf("\nframecounter_error_rejoin_needed\n\r");
    e390:	4816      	ldr	r0, [pc, #88]	; (e3ec <print_stack_status+0xa0>)
    e392:	4b10      	ldr	r3, [pc, #64]	; (e3d4 <print_stack_status+0x88>)
    e394:	4798      	blx	r3
        break;
    e396:	e7e6      	b.n	e366 <print_stack_status+0x1a>
            printf("\ninvalid_buffer_length\n\r");
    e398:	4815      	ldr	r0, [pc, #84]	; (e3f0 <print_stack_status+0xa4>)
    e39a:	4b0e      	ldr	r3, [pc, #56]	; (e3d4 <print_stack_status+0x88>)
    e39c:	4798      	blx	r3
        break;
    e39e:	e7e2      	b.n	e366 <print_stack_status+0x1a>
            printf("\nMAC_paused\n\r");
    e3a0:	4814      	ldr	r0, [pc, #80]	; (e3f4 <print_stack_status+0xa8>)
    e3a2:	4b0c      	ldr	r3, [pc, #48]	; (e3d4 <print_stack_status+0x88>)
    e3a4:	4798      	blx	r3
        break;
    e3a6:	e7de      	b.n	e366 <print_stack_status+0x1a>
            printf("\nno_free_channels_found\n\r");
    e3a8:	4813      	ldr	r0, [pc, #76]	; (e3f8 <print_stack_status+0xac>)
    e3aa:	4b0a      	ldr	r3, [pc, #40]	; (e3d4 <print_stack_status+0x88>)
    e3ac:	4798      	blx	r3
        break;
    e3ae:	e7da      	b.n	e366 <print_stack_status+0x1a>
            printf("\nrequest_invalid\n\r");
    e3b0:	4812      	ldr	r0, [pc, #72]	; (e3fc <print_stack_status+0xb0>)
    e3b2:	4b08      	ldr	r3, [pc, #32]	; (e3d4 <print_stack_status+0x88>)
    e3b4:	4798      	blx	r3
        break;
    e3b6:	e7d6      	b.n	e366 <print_stack_status+0x1a>
            printf("\nprev_join_request_in_progress\n\r");
    e3b8:	4811      	ldr	r0, [pc, #68]	; (e400 <print_stack_status+0xb4>)
    e3ba:	4b06      	ldr	r3, [pc, #24]	; (e3d4 <print_stack_status+0x88>)
    e3bc:	4798      	blx	r3
        break;
    e3be:	e7d2      	b.n	e366 <print_stack_status+0x1a>
           printf("\nrequest_failed %d\n\r",status);
    e3c0:	0001      	movs	r1, r0
    e3c2:	4810      	ldr	r0, [pc, #64]	; (e404 <print_stack_status+0xb8>)
    e3c4:	4b03      	ldr	r3, [pc, #12]	; (e3d4 <print_stack_status+0x88>)
    e3c6:	4798      	blx	r3
}
    e3c8:	e7cd      	b.n	e366 <print_stack_status+0x1a>
    e3ca:	46c0      	nop			; (mov r8, r8)
    e3cc:	0001eb90 	.word	0x0001eb90
    e3d0:	0001e954 	.word	0x0001e954
    e3d4:	000182cd 	.word	0x000182cd
    e3d8:	0001e968 	.word	0x0001e968
    e3dc:	0001e988 	.word	0x0001e988
    e3e0:	0001e9a8 	.word	0x0001e9a8
    e3e4:	0001e9c0 	.word	0x0001e9c0
    e3e8:	0001e9d8 	.word	0x0001e9d8
    e3ec:	0001e9f8 	.word	0x0001e9f8
    e3f0:	0001ea1c 	.word	0x0001ea1c
    e3f4:	0001ea38 	.word	0x0001ea38
    e3f8:	0001ea48 	.word	0x0001ea48
    e3fc:	0001ea64 	.word	0x0001ea64
    e400:	0001ea78 	.word	0x0001ea78
    e404:	0001ea9c 	.word	0x0001ea9c

0000e408 <sendData>:
{
    e408:	b530      	push	{r4, r5, lr}
    e40a:	b083      	sub	sp, #12
	printf("\nPayload length: %d", u8bufferIdx) ;
    e40c:	4c19      	ldr	r4, [pc, #100]	; (e474 <sendData+0x6c>)
    e40e:	7821      	ldrb	r1, [r4, #0]
    e410:	4819      	ldr	r0, [pc, #100]	; (e478 <sendData+0x70>)
    e412:	4d1a      	ldr	r5, [pc, #104]	; (e47c <sendData+0x74>)
    e414:	47a8      	blx	r5
	printf("\nPayload: ") ;
    e416:	481a      	ldr	r0, [pc, #104]	; (e480 <sendData+0x78>)
    e418:	47a8      	blx	r5
	print_array(u8buffer, u8bufferIdx) ;
    e41a:	7821      	ldrb	r1, [r4, #0]
    e41c:	4d19      	ldr	r5, [pc, #100]	; (e484 <sendData+0x7c>)
    e41e:	0028      	movs	r0, r5
    e420:	4b19      	ldr	r3, [pc, #100]	; (e488 <sendData+0x80>)
    e422:	4798      	blx	r3
	lorawanSendReq.buffer = &u8buffer ;
    e424:	4819      	ldr	r0, [pc, #100]	; (e48c <sendData+0x84>)
    e426:	6045      	str	r5, [r0, #4]
    lorawanSendReq.bufferLength = u8bufferIdx ;
    e428:	7823      	ldrb	r3, [r4, #0]
    e42a:	7203      	strb	r3, [r0, #8]
    lorawanSendReq.confirmed = DEMO_APP_TRANSMISSION_TYPE ;
    e42c:	2300      	movs	r3, #0
    e42e:	7003      	strb	r3, [r0, #0]
    lorawanSendReq.port = DEMO_APP_FPORT ;
    e430:	3301      	adds	r3, #1
    e432:	7043      	strb	r3, [r0, #1]
    status = LORAWAN_Send(&lorawanSendReq) ;
    e434:	4b16      	ldr	r3, [pc, #88]	; (e490 <sendData+0x88>)
    e436:	4798      	blx	r3
    if (LORAWAN_SUCCESS == status)
    e438:	2808      	cmp	r0, #8
    e43a:	d009      	beq.n	e450 <sendData+0x48>
	    print_stack_status(status) ;
    e43c:	4b15      	ldr	r3, [pc, #84]	; (e494 <sendData+0x8c>)
    e43e:	4798      	blx	r3
	    appTaskState = JOIN_SEND_STATE ;
    e440:	2203      	movs	r2, #3
    e442:	4b15      	ldr	r3, [pc, #84]	; (e498 <sendData+0x90>)
    e444:	701a      	strb	r2, [r3, #0]
	    appPostTask(DISPLAY_TASK_HANDLER) ;
    e446:	2000      	movs	r0, #0
    e448:	4b14      	ldr	r3, [pc, #80]	; (e49c <sendData+0x94>)
    e44a:	4798      	blx	r3
}
    e44c:	b003      	add	sp, #12
    e44e:	bd30      	pop	{r4, r5, pc}
	    printf("\nTx Data Sent \r\n") ;
    e450:	4813      	ldr	r0, [pc, #76]	; (e4a0 <sendData+0x98>)
    e452:	4b14      	ldr	r3, [pc, #80]	; (e4a4 <sendData+0x9c>)
    e454:	4798      	blx	r3
	    set_LED_data(LED_GREEN,&on) ;
    e456:	4914      	ldr	r1, [pc, #80]	; (e4a8 <sendData+0xa0>)
    e458:	2003      	movs	r0, #3
    e45a:	4b14      	ldr	r3, [pc, #80]	; (e4ac <sendData+0xa4>)
    e45c:	4798      	blx	r3
		SwTimerStart(lTimerId,MS_TO_US(100),SW_TIMEOUT_RELATIVE,(void *)lTimerCb,NULL) ;
    e45e:	4b14      	ldr	r3, [pc, #80]	; (e4b0 <sendData+0xa8>)
    e460:	7818      	ldrb	r0, [r3, #0]
    e462:	2300      	movs	r3, #0
    e464:	9300      	str	r3, [sp, #0]
    e466:	4b13      	ldr	r3, [pc, #76]	; (e4b4 <sendData+0xac>)
    e468:	2200      	movs	r2, #0
    e46a:	4913      	ldr	r1, [pc, #76]	; (e4b8 <sendData+0xb0>)
    e46c:	4c13      	ldr	r4, [pc, #76]	; (e4bc <sendData+0xb4>)
    e46e:	47a0      	blx	r4
    e470:	e7ec      	b.n	e44c <sendData+0x44>
    e472:	46c0      	nop			; (mov r8, r8)
    e474:	20001071 	.word	0x20001071
    e478:	0001f2c0 	.word	0x0001f2c0
    e47c:	000182cd 	.word	0x000182cd
    e480:	0001e7dc 	.word	0x0001e7dc
    e484:	2000105c 	.word	0x2000105c
    e488:	0000dfe5 	.word	0x0000dfe5
    e48c:	2000103c 	.word	0x2000103c
    e490:	0000f5a9 	.word	0x0000f5a9
    e494:	0000e34d 	.word	0x0000e34d
    e498:	20001039 	.word	0x20001039
    e49c:	0000d789 	.word	0x0000d789
    e4a0:	0001f2d4 	.word	0x0001f2d4
    e4a4:	000183a5 	.word	0x000183a5
    e4a8:	200000d0 	.word	0x200000d0
    e4ac:	0000c0ad 	.word	0x0000c0ad
    e4b0:	200000d4 	.word	0x200000d4
    e4b4:	0000d8a9 	.word	0x0000d8a9
    e4b8:	000186a0 	.word	0x000186a0
    e4bc:	0000c4b5 	.word	0x0000c4b5

0000e4c0 <wifi_event_cb>:
{
    e4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4c2:	b089      	sub	sp, #36	; 0x24
    e4c4:	000c      	movs	r4, r1
	switch (u8MsgType) 
    e4c6:	2811      	cmp	r0, #17
    e4c8:	d003      	beq.n	e4d2 <wifi_event_cb+0x12>
    e4ca:	2813      	cmp	r0, #19
    e4cc:	d042      	beq.n	e554 <wifi_event_cb+0x94>
}
    e4ce:	b009      	add	sp, #36	; 0x24
    e4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(pstrInfo->s8ScanState == M2M_SUCCESS)
    e4d2:	2101      	movs	r1, #1
    e4d4:	5661      	ldrsb	r1, [r4, r1]
    e4d6:	2900      	cmp	r1, #0
    e4d8:	d138      	bne.n	e54c <wifi_event_cb+0x8c>
				memset(u8buffer, 0, sizeof(u8buffer)) ;
    e4da:	2214      	movs	r2, #20
    e4dc:	4881      	ldr	r0, [pc, #516]	; (e6e4 <wifi_event_cb+0x224>)
    e4de:	4b82      	ldr	r3, [pc, #520]	; (e6e8 <wifi_event_cb+0x228>)
    e4e0:	4798      	blx	r3
				u8bufferIdx = 0 ;
    e4e2:	2300      	movs	r3, #0
    e4e4:	4a81      	ldr	r2, [pc, #516]	; (e6ec <wifi_event_cb+0x22c>)
    e4e6:	7013      	strb	r3, [r2, #0]
				u8bufferEntry = 0 ;
    e4e8:	4a81      	ldr	r2, [pc, #516]	; (e6f0 <wifi_event_cb+0x230>)
    e4ea:	7013      	strb	r3, [r2, #0]
				u8ScanResultIdx = 0 ;
    e4ec:	4a81      	ldr	r2, [pc, #516]	; (e6f4 <wifi_event_cb+0x234>)
    e4ee:	7013      	strb	r3, [r2, #0]
				if (pstrInfo->u8NumofCh >= 1)
    e4f0:	7821      	ldrb	r1, [r4, #0]
    e4f2:	2900      	cmp	r1, #0
    e4f4:	d01b      	beq.n	e52e <wifi_event_cb+0x6e>
					printf("Number of AP found %d\r\n", pstrInfo->u8NumofCh) ;
    e4f6:	4880      	ldr	r0, [pc, #512]	; (e6f8 <wifi_event_cb+0x238>)
    e4f8:	4b80      	ldr	r3, [pc, #512]	; (e6fc <wifi_event_cb+0x23c>)
    e4fa:	4798      	blx	r3
					if (pstrInfo->u8NumofCh > 1)
    e4fc:	7823      	ldrb	r3, [r4, #0]
    e4fe:	2b01      	cmp	r3, #1
    e500:	d90e      	bls.n	e520 <wifi_event_cb+0x60>
						u8buffer[u8bufferIdx++] = 2 ;
    e502:	4a7a      	ldr	r2, [pc, #488]	; (e6ec <wifi_event_cb+0x22c>)
    e504:	7813      	ldrb	r3, [r2, #0]
    e506:	1c59      	adds	r1, r3, #1
    e508:	7011      	strb	r1, [r2, #0]
    e50a:	2102      	movs	r1, #2
    e50c:	4a75      	ldr	r2, [pc, #468]	; (e6e4 <wifi_event_cb+0x224>)
    e50e:	54d1      	strb	r1, [r2, r3]
					m2m_wifi_req_scan_result(u8ScanResultIdx) ;
    e510:	4c78      	ldr	r4, [pc, #480]	; (e6f4 <wifi_event_cb+0x234>)
    e512:	7820      	ldrb	r0, [r4, #0]
    e514:	4b7a      	ldr	r3, [pc, #488]	; (e700 <wifi_event_cb+0x240>)
    e516:	4798      	blx	r3
					u8ScanResultIdx ++ ;
    e518:	7823      	ldrb	r3, [r4, #0]
    e51a:	3301      	adds	r3, #1
    e51c:	7023      	strb	r3, [r4, #0]
    e51e:	e7d6      	b.n	e4ce <wifi_event_cb+0xe>
						u8buffer[u8bufferIdx++] = pstrInfo->u8NumofCh ;
    e520:	4972      	ldr	r1, [pc, #456]	; (e6ec <wifi_event_cb+0x22c>)
    e522:	780a      	ldrb	r2, [r1, #0]
    e524:	1c50      	adds	r0, r2, #1
    e526:	7008      	strb	r0, [r1, #0]
    e528:	496e      	ldr	r1, [pc, #440]	; (e6e4 <wifi_event_cb+0x224>)
    e52a:	548b      	strb	r3, [r1, r2]
    e52c:	e7f0      	b.n	e510 <wifi_event_cb+0x50>
					printf("No AP Found") ;
    e52e:	4875      	ldr	r0, [pc, #468]	; (e704 <wifi_event_cb+0x244>)
    e530:	4b72      	ldr	r3, [pc, #456]	; (e6fc <wifi_event_cb+0x23c>)
    e532:	4798      	blx	r3
					power_down_wifi() ;
    e534:	4b74      	ldr	r3, [pc, #464]	; (e708 <wifi_event_cb+0x248>)
    e536:	4798      	blx	r3
					u8buffer[u8bufferIdx++] = pstrInfo->u8NumofCh ;
    e538:	4a6c      	ldr	r2, [pc, #432]	; (e6ec <wifi_event_cb+0x22c>)
    e53a:	7813      	ldrb	r3, [r2, #0]
    e53c:	1c59      	adds	r1, r3, #1
    e53e:	7011      	strb	r1, [r2, #0]
    e540:	7821      	ldrb	r1, [r4, #0]
    e542:	4a68      	ldr	r2, [pc, #416]	; (e6e4 <wifi_event_cb+0x224>)
    e544:	54d1      	strb	r1, [r2, r3]
					sendData() ;
    e546:	4b71      	ldr	r3, [pc, #452]	; (e70c <wifi_event_cb+0x24c>)
    e548:	4798      	blx	r3
    e54a:	e7c0      	b.n	e4ce <wifi_event_cb+0xe>
				printf("(ERR) Scan fail with error <%d>\n",pstrInfo->s8ScanState) ;
    e54c:	4870      	ldr	r0, [pc, #448]	; (e710 <wifi_event_cb+0x250>)
    e54e:	4b6b      	ldr	r3, [pc, #428]	; (e6fc <wifi_event_cb+0x23c>)
    e550:	4798      	blx	r3
    e552:	e7bc      	b.n	e4ce <wifi_event_cb+0xe>
			uint8 u8NumFoundAPs = m2m_wifi_get_num_ap_found() ;
    e554:	4b6f      	ldr	r3, [pc, #444]	; (e714 <wifi_event_cb+0x254>)
    e556:	4798      	blx	r3
    e558:	0005      	movs	r5, r0
			printf("%02d RSSI:%d AUTHTYPE:%d CHANNEL:%02d BSSID:%02X:%02X:%02X:%02X:%02X:%02X SSID:%s\n",
    e55a:	78a3      	ldrb	r3, [r4, #2]
    e55c:	2201      	movs	r2, #1
    e55e:	56a2      	ldrsb	r2, [r4, r2]
    e560:	7821      	ldrb	r1, [r4, #0]
    e562:	0020      	movs	r0, r4
    e564:	300a      	adds	r0, #10
    e566:	9007      	str	r0, [sp, #28]
    e568:	7a60      	ldrb	r0, [r4, #9]
    e56a:	9006      	str	r0, [sp, #24]
    e56c:	7a20      	ldrb	r0, [r4, #8]
    e56e:	9005      	str	r0, [sp, #20]
    e570:	79e0      	ldrb	r0, [r4, #7]
    e572:	9004      	str	r0, [sp, #16]
    e574:	79a0      	ldrb	r0, [r4, #6]
    e576:	9003      	str	r0, [sp, #12]
    e578:	7960      	ldrb	r0, [r4, #5]
    e57a:	9002      	str	r0, [sp, #8]
    e57c:	7920      	ldrb	r0, [r4, #4]
    e57e:	9001      	str	r0, [sp, #4]
    e580:	78e0      	ldrb	r0, [r4, #3]
    e582:	9000      	str	r0, [sp, #0]
    e584:	4864      	ldr	r0, [pc, #400]	; (e718 <wifi_event_cb+0x258>)
    e586:	4e5d      	ldr	r6, [pc, #372]	; (e6fc <wifi_event_cb+0x23c>)
    e588:	47b0      	blx	r6
			u8bufferEntry++ ;
    e58a:	4a59      	ldr	r2, [pc, #356]	; (e6f0 <wifi_event_cb+0x230>)
    e58c:	7813      	ldrb	r3, [r2, #0]
    e58e:	3301      	adds	r3, #1
    e590:	b2db      	uxtb	r3, r3
    e592:	7013      	strb	r3, [r2, #0]
			if (u8bufferEntry <= 2)
    e594:	2b02      	cmp	r3, #2
    e596:	d83a      	bhi.n	e60e <wifi_event_cb+0x14e>
				u8buffer[u8bufferIdx++] = pstrScanResult->s8rssi ;
    e598:	4e54      	ldr	r6, [pc, #336]	; (e6ec <wifi_event_cb+0x22c>)
    e59a:	7832      	ldrb	r2, [r6, #0]
    e59c:	4951      	ldr	r1, [pc, #324]	; (e6e4 <wifi_event_cb+0x224>)
    e59e:	7860      	ldrb	r0, [r4, #1]
    e5a0:	5488      	strb	r0, [r1, r2]
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[0] ;
    e5a2:	7927      	ldrb	r7, [r4, #4]
				u8buffer[u8bufferIdx++] = pstrScanResult->s8rssi ;
    e5a4:	1c50      	adds	r0, r2, #1
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[0] ;
    e5a6:	b2c0      	uxtb	r0, r0
    e5a8:	540f      	strb	r7, [r1, r0]
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[1] ;
    e5aa:	7967      	ldrb	r7, [r4, #5]
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[0] ;
    e5ac:	1c90      	adds	r0, r2, #2
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[1] ;
    e5ae:	b2c0      	uxtb	r0, r0
    e5b0:	540f      	strb	r7, [r1, r0]
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[2] ;
    e5b2:	79a7      	ldrb	r7, [r4, #6]
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[1] ;
    e5b4:	1cd0      	adds	r0, r2, #3
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[2] ;
    e5b6:	b2c0      	uxtb	r0, r0
    e5b8:	540f      	strb	r7, [r1, r0]
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[3] ;
    e5ba:	79e7      	ldrb	r7, [r4, #7]
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[2] ;
    e5bc:	1d10      	adds	r0, r2, #4
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[3] ;
    e5be:	b2c0      	uxtb	r0, r0
    e5c0:	540f      	strb	r7, [r1, r0]
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[4] ;
    e5c2:	7a27      	ldrb	r7, [r4, #8]
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[3] ;
    e5c4:	1d50      	adds	r0, r2, #5
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[4] ;
    e5c6:	b2c0      	uxtb	r0, r0
    e5c8:	540f      	strb	r7, [r1, r0]
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[5] ;
    e5ca:	1dd0      	adds	r0, r2, #7
    e5cc:	7030      	strb	r0, [r6, #0]
    e5ce:	7a60      	ldrb	r0, [r4, #9]
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[4] ;
    e5d0:	3206      	adds	r2, #6
				u8buffer[u8bufferIdx++] = pstrScanResult->au8BSSID[5] ;
    e5d2:	b2d2      	uxtb	r2, r2
    e5d4:	5488      	strb	r0, [r1, r2]
				if (u8bufferEntry == 1)	s8rssi_0 = pstrScanResult->s8rssi ;
    e5d6:	2b01      	cmp	r3, #1
    e5d8:	d011      	beq.n	e5fe <wifi_event_cb+0x13e>
				if (u8bufferEntry == 2) s8rssi_1 = pstrScanResult->s8rssi ;
    e5da:	2b02      	cmp	r3, #2
    e5dc:	d013      	beq.n	e606 <wifi_event_cb+0x146>
			if(u8ScanResultIdx < u8NumFoundAPs)
    e5de:	4b45      	ldr	r3, [pc, #276]	; (e6f4 <wifi_event_cb+0x234>)
    e5e0:	7818      	ldrb	r0, [r3, #0]
    e5e2:	4285      	cmp	r5, r0
    e5e4:	d877      	bhi.n	e6d6 <wifi_event_cb+0x216>
				printf(">End of scan") ;
    e5e6:	484d      	ldr	r0, [pc, #308]	; (e71c <wifi_event_cb+0x25c>)
    e5e8:	4c44      	ldr	r4, [pc, #272]	; (e6fc <wifi_event_cb+0x23c>)
    e5ea:	47a0      	blx	r4
				power_down_wifi() ;
    e5ec:	4b46      	ldr	r3, [pc, #280]	; (e708 <wifi_event_cb+0x248>)
    e5ee:	4798      	blx	r3
				printf("\n%d AP data loaded in the payload", u8buffer[0]) ;
    e5f0:	4b3c      	ldr	r3, [pc, #240]	; (e6e4 <wifi_event_cb+0x224>)
    e5f2:	7819      	ldrb	r1, [r3, #0]
    e5f4:	484a      	ldr	r0, [pc, #296]	; (e720 <wifi_event_cb+0x260>)
    e5f6:	47a0      	blx	r4
				sendData() ;
    e5f8:	4b44      	ldr	r3, [pc, #272]	; (e70c <wifi_event_cb+0x24c>)
    e5fa:	4798      	blx	r3
}
    e5fc:	e767      	b.n	e4ce <wifi_event_cb+0xe>
				if (u8bufferEntry == 1)	s8rssi_0 = pstrScanResult->s8rssi ;
    e5fe:	7862      	ldrb	r2, [r4, #1]
    e600:	4b48      	ldr	r3, [pc, #288]	; (e724 <wifi_event_cb+0x264>)
    e602:	701a      	strb	r2, [r3, #0]
    e604:	e7eb      	b.n	e5de <wifi_event_cb+0x11e>
				if (u8bufferEntry == 2) s8rssi_1 = pstrScanResult->s8rssi ;
    e606:	7862      	ldrb	r2, [r4, #1]
    e608:	4b47      	ldr	r3, [pc, #284]	; (e728 <wifi_event_cb+0x268>)
    e60a:	701a      	strb	r2, [r3, #0]
    e60c:	e7e7      	b.n	e5de <wifi_event_cb+0x11e>
				sint8 s8new_rssi = pstrScanResult->s8rssi ;
    e60e:	2301      	movs	r3, #1
    e610:	56e3      	ldrsb	r3, [r4, r3]
				if ((s8new_rssi > s8rssi_0) && (s8new_rssi > s8rssi_1))
    e612:	4a44      	ldr	r2, [pc, #272]	; (e724 <wifi_event_cb+0x264>)
    e614:	7812      	ldrb	r2, [r2, #0]
    e616:	b252      	sxtb	r2, r2
    e618:	4293      	cmp	r3, r2
    e61a:	dd43      	ble.n	e6a4 <wifi_event_cb+0x1e4>
    e61c:	4942      	ldr	r1, [pc, #264]	; (e728 <wifi_event_cb+0x268>)
    e61e:	7809      	ldrb	r1, [r1, #0]
    e620:	b249      	sxtb	r1, r1
    e622:	428b      	cmp	r3, r1
    e624:	dd2a      	ble.n	e67c <wifi_event_cb+0x1bc>
					diff_0 = (s8rssi_0 - s8new_rssi) ;
    e626:	b2db      	uxtb	r3, r3
    e628:	1ad2      	subs	r2, r2, r3
					diff_1 = (s8rssi_1 - s8new_rssi) ;
    e62a:	1ac9      	subs	r1, r1, r3
					if (diff_0 < diff_1)
    e62c:	b252      	sxtb	r2, r2
    e62e:	b249      	sxtb	r1, r1
    e630:	428a      	cmp	r2, r1
    e632:	da11      	bge.n	e658 <wifi_event_cb+0x198>
						u8buffer[1] = pstrScanResult->s8rssi ;
    e634:	4a2b      	ldr	r2, [pc, #172]	; (e6e4 <wifi_event_cb+0x224>)
    e636:	7053      	strb	r3, [r2, #1]
						u8buffer[2] = pstrScanResult->au8BSSID[0] ;
    e638:	7923      	ldrb	r3, [r4, #4]
    e63a:	7093      	strb	r3, [r2, #2]
						u8buffer[3] = pstrScanResult->au8BSSID[1] ;
    e63c:	7963      	ldrb	r3, [r4, #5]
    e63e:	70d3      	strb	r3, [r2, #3]
						u8buffer[4] = pstrScanResult->au8BSSID[2] ;
    e640:	79a3      	ldrb	r3, [r4, #6]
    e642:	7113      	strb	r3, [r2, #4]
						u8buffer[5] = pstrScanResult->au8BSSID[3] ;
    e644:	79e3      	ldrb	r3, [r4, #7]
    e646:	7153      	strb	r3, [r2, #5]
						u8buffer[6] = pstrScanResult->au8BSSID[4] ;
    e648:	7a23      	ldrb	r3, [r4, #8]
    e64a:	7193      	strb	r3, [r2, #6]
						u8buffer[7] = pstrScanResult->au8BSSID[5] ;
    e64c:	7a63      	ldrb	r3, [r4, #9]
    e64e:	71d3      	strb	r3, [r2, #7]
						s8rssi_0 = pstrScanResult->s8rssi ;
    e650:	7862      	ldrb	r2, [r4, #1]
    e652:	4b34      	ldr	r3, [pc, #208]	; (e724 <wifi_event_cb+0x264>)
    e654:	701a      	strb	r2, [r3, #0]
    e656:	e7c2      	b.n	e5de <wifi_event_cb+0x11e>
						u8buffer[8] = pstrScanResult->s8rssi ;
    e658:	4a22      	ldr	r2, [pc, #136]	; (e6e4 <wifi_event_cb+0x224>)
    e65a:	7213      	strb	r3, [r2, #8]
						u8buffer[9] = pstrScanResult->au8BSSID[0] ;
    e65c:	7923      	ldrb	r3, [r4, #4]
    e65e:	7253      	strb	r3, [r2, #9]
						u8buffer[10] = pstrScanResult->au8BSSID[1] ;
    e660:	7963      	ldrb	r3, [r4, #5]
    e662:	7293      	strb	r3, [r2, #10]
						u8buffer[11] = pstrScanResult->au8BSSID[2] ;
    e664:	79a3      	ldrb	r3, [r4, #6]
    e666:	72d3      	strb	r3, [r2, #11]
						u8buffer[12] = pstrScanResult->au8BSSID[3] ;
    e668:	79e3      	ldrb	r3, [r4, #7]
    e66a:	7313      	strb	r3, [r2, #12]
						u8buffer[13] = pstrScanResult->au8BSSID[4] ;
    e66c:	7a23      	ldrb	r3, [r4, #8]
    e66e:	7353      	strb	r3, [r2, #13]
						u8buffer[14] = pstrScanResult->au8BSSID[5] ;
    e670:	7a63      	ldrb	r3, [r4, #9]
    e672:	7393      	strb	r3, [r2, #14]
						s8rssi_1 = pstrScanResult->s8rssi ;
    e674:	7862      	ldrb	r2, [r4, #1]
    e676:	4b2c      	ldr	r3, [pc, #176]	; (e728 <wifi_event_cb+0x268>)
    e678:	701a      	strb	r2, [r3, #0]
    e67a:	e7b0      	b.n	e5de <wifi_event_cb+0x11e>
				else if ((s8new_rssi > s8rssi_0) && (s8new_rssi < s8rssi_1))
    e67c:	428b      	cmp	r3, r1
    e67e:	daae      	bge.n	e5de <wifi_event_cb+0x11e>
					u8buffer[1] = pstrScanResult->s8rssi ;
    e680:	4a18      	ldr	r2, [pc, #96]	; (e6e4 <wifi_event_cb+0x224>)
    e682:	7053      	strb	r3, [r2, #1]
					u8buffer[2] = pstrScanResult->au8BSSID[0] ;
    e684:	7923      	ldrb	r3, [r4, #4]
    e686:	7093      	strb	r3, [r2, #2]
					u8buffer[3] = pstrScanResult->au8BSSID[1] ;
    e688:	7963      	ldrb	r3, [r4, #5]
    e68a:	70d3      	strb	r3, [r2, #3]
					u8buffer[4] = pstrScanResult->au8BSSID[2] ;
    e68c:	79a3      	ldrb	r3, [r4, #6]
    e68e:	7113      	strb	r3, [r2, #4]
					u8buffer[5] = pstrScanResult->au8BSSID[3] ;
    e690:	79e3      	ldrb	r3, [r4, #7]
    e692:	7153      	strb	r3, [r2, #5]
					u8buffer[6] = pstrScanResult->au8BSSID[4] ;
    e694:	7a23      	ldrb	r3, [r4, #8]
    e696:	7193      	strb	r3, [r2, #6]
					u8buffer[7] = pstrScanResult->au8BSSID[5] ;
    e698:	7a63      	ldrb	r3, [r4, #9]
    e69a:	71d3      	strb	r3, [r2, #7]
					s8rssi_0 = pstrScanResult->s8rssi ;
    e69c:	7862      	ldrb	r2, [r4, #1]
    e69e:	4b21      	ldr	r3, [pc, #132]	; (e724 <wifi_event_cb+0x264>)
    e6a0:	701a      	strb	r2, [r3, #0]
    e6a2:	e79c      	b.n	e5de <wifi_event_cb+0x11e>
				else if ((s8new_rssi < s8rssi_0) && (s8new_rssi > s8rssi_1))
    e6a4:	4293      	cmp	r3, r2
    e6a6:	da9a      	bge.n	e5de <wifi_event_cb+0x11e>
    e6a8:	4a1f      	ldr	r2, [pc, #124]	; (e728 <wifi_event_cb+0x268>)
    e6aa:	7812      	ldrb	r2, [r2, #0]
    e6ac:	b252      	sxtb	r2, r2
    e6ae:	429a      	cmp	r2, r3
    e6b0:	da95      	bge.n	e5de <wifi_event_cb+0x11e>
					u8buffer[8] = pstrScanResult->s8rssi ;
    e6b2:	4a0c      	ldr	r2, [pc, #48]	; (e6e4 <wifi_event_cb+0x224>)
    e6b4:	7213      	strb	r3, [r2, #8]
					u8buffer[9] = pstrScanResult->au8BSSID[0] ;
    e6b6:	7923      	ldrb	r3, [r4, #4]
    e6b8:	7253      	strb	r3, [r2, #9]
					u8buffer[10] = pstrScanResult->au8BSSID[1] ;
    e6ba:	7963      	ldrb	r3, [r4, #5]
    e6bc:	7293      	strb	r3, [r2, #10]
					u8buffer[11] = pstrScanResult->au8BSSID[2] ;
    e6be:	79a3      	ldrb	r3, [r4, #6]
    e6c0:	72d3      	strb	r3, [r2, #11]
					u8buffer[12] = pstrScanResult->au8BSSID[3] ;
    e6c2:	79e3      	ldrb	r3, [r4, #7]
    e6c4:	7313      	strb	r3, [r2, #12]
					u8buffer[13] = pstrScanResult->au8BSSID[4] ;
    e6c6:	7a23      	ldrb	r3, [r4, #8]
    e6c8:	7353      	strb	r3, [r2, #13]
					u8buffer[14] = pstrScanResult->au8BSSID[5] ;
    e6ca:	7a63      	ldrb	r3, [r4, #9]
    e6cc:	7393      	strb	r3, [r2, #14]
					s8rssi_1 = pstrScanResult->s8rssi ;
    e6ce:	7862      	ldrb	r2, [r4, #1]
    e6d0:	4b15      	ldr	r3, [pc, #84]	; (e728 <wifi_event_cb+0x268>)
    e6d2:	701a      	strb	r2, [r3, #0]
    e6d4:	e783      	b.n	e5de <wifi_event_cb+0x11e>
				m2m_wifi_req_scan_result(u8ScanResultIdx) ;
    e6d6:	4b0a      	ldr	r3, [pc, #40]	; (e700 <wifi_event_cb+0x240>)
    e6d8:	4798      	blx	r3
				u8ScanResultIdx ++ ;
    e6da:	4a06      	ldr	r2, [pc, #24]	; (e6f4 <wifi_event_cb+0x234>)
    e6dc:	7813      	ldrb	r3, [r2, #0]
    e6de:	3301      	adds	r3, #1
    e6e0:	7013      	strb	r3, [r2, #0]
    e6e2:	e6f4      	b.n	e4ce <wifi_event_cb+0xe>
    e6e4:	2000105c 	.word	0x2000105c
    e6e8:	00018219 	.word	0x00018219
    e6ec:	20001071 	.word	0x20001071
    e6f0:	20001070 	.word	0x20001070
    e6f4:	2000105b 	.word	0x2000105b
    e6f8:	0001f474 	.word	0x0001f474
    e6fc:	000182cd 	.word	0x000182cd
    e700:	000013fd 	.word	0x000013fd
    e704:	0001f48c 	.word	0x0001f48c
    e708:	0000df1d 	.word	0x0000df1d
    e70c:	0000e409 	.word	0x0000e409
    e710:	0001f498 	.word	0x0001f498
    e714:	00001421 	.word	0x00001421
    e718:	0001f4bc 	.word	0x0001f4bc
    e71c:	0001f510 	.word	0x0001f510
    e720:	0001f520 	.word	0x0001f520
    e724:	20001057 	.word	0x20001057
    e728:	20001058 	.word	0x20001058

0000e72c <mote_set_parameters>:
{
    e72c:	b570      	push	{r4, r5, r6, lr}
    e72e:	b082      	sub	sp, #8
    e730:	0005      	movs	r5, r0
    e732:	000c      	movs	r4, r1
    LORAWAN_Reset(ismBand);
    e734:	4b28      	ldr	r3, [pc, #160]	; (e7d8 <mote_set_parameters+0xac>)
    e736:	4798      	blx	r3
    if ((ismBand == ISM_NA915) || (ismBand == ISM_AU915))
    e738:	3d02      	subs	r5, #2
    e73a:	2d01      	cmp	r5, #1
    e73c:	d90b      	bls.n	e756 <mote_set_parameters+0x2a>
    status = set_join_parameters(DEMO_APP_ACTIVATION_TYPE);
    e73e:	2000      	movs	r0, #0
    e740:	4b26      	ldr	r3, [pc, #152]	; (e7dc <mote_set_parameters+0xb0>)
    e742:	4798      	blx	r3
    e744:	0005      	movs	r5, r0
    if (LORAWAN_SUCCESS != status)
    e746:	2808      	cmp	r0, #8
    e748:	d024      	beq.n	e794 <mote_set_parameters+0x68>
        printf("\nJoin parameters initialization failed\n\r");
    e74a:	4825      	ldr	r0, [pc, #148]	; (e7e0 <mote_set_parameters+0xb4>)
    e74c:	4b25      	ldr	r3, [pc, #148]	; (e7e4 <mote_set_parameters+0xb8>)
    e74e:	4798      	blx	r3
}
    e750:	0028      	movs	r0, r5
    e752:	b002      	add	sp, #8
    e754:	bd70      	pop	{r4, r5, r6, pc}
        for (ch_params.channelId = 0; ch_params.channelId < MAX_NA_CHANNELS; ch_params.channelId++)
    e756:	2300      	movs	r3, #0
    e758:	466a      	mov	r2, sp
    e75a:	7013      	strb	r3, [r2, #0]
                ch_params.channelAttr.status = false;
    e75c:	2600      	movs	r6, #0
            LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    e75e:	4d22      	ldr	r5, [pc, #136]	; (e7e8 <mote_set_parameters+0xbc>)
    e760:	e00e      	b.n	e780 <mote_set_parameters+0x54>
            else if(ch_params.channelId == allowed_500khz_channel)
    e762:	2b40      	cmp	r3, #64	; 0x40
    e764:	d012      	beq.n	e78c <mote_set_parameters+0x60>
                ch_params.channelAttr.status = false;
    e766:	466b      	mov	r3, sp
    e768:	711e      	strb	r6, [r3, #4]
            LORAWAN_SetAttr(CH_PARAM_STATUS, &ch_params);
    e76a:	4669      	mov	r1, sp
    e76c:	201c      	movs	r0, #28
    e76e:	47a8      	blx	r5
        for (ch_params.channelId = 0; ch_params.channelId < MAX_NA_CHANNELS; ch_params.channelId++)
    e770:	466b      	mov	r3, sp
    e772:	781b      	ldrb	r3, [r3, #0]
    e774:	3301      	adds	r3, #1
    e776:	b2db      	uxtb	r3, r3
    e778:	466a      	mov	r2, sp
    e77a:	7013      	strb	r3, [r2, #0]
    e77c:	2b47      	cmp	r3, #71	; 0x47
    e77e:	d8de      	bhi.n	e73e <mote_set_parameters+0x12>
            if((ch_params.channelId >= allowed_min_125khz_ch) && (ch_params.channelId <= allowed_max_125khz_ch))
    e780:	2b07      	cmp	r3, #7
    e782:	d8ee      	bhi.n	e762 <mote_set_parameters+0x36>
                ch_params.channelAttr.status = true;
    e784:	2301      	movs	r3, #1
    e786:	466a      	mov	r2, sp
    e788:	7113      	strb	r3, [r2, #4]
    e78a:	e7ee      	b.n	e76a <mote_set_parameters+0x3e>
                ch_params.channelAttr.status = true;
    e78c:	3b3f      	subs	r3, #63	; 0x3f
    e78e:	466a      	mov	r2, sp
    e790:	7113      	strb	r3, [r2, #4]
    e792:	e7ea      	b.n	e76a <mote_set_parameters+0x3e>
    status = set_device_type(DEMO_APP_ENDDEVICE_CLASS);
    e794:	2001      	movs	r0, #1
    e796:	4b15      	ldr	r3, [pc, #84]	; (e7ec <mote_set_parameters+0xc0>)
    e798:	4798      	blx	r3
    e79a:	0005      	movs	r5, r0
    if (LORAWAN_SUCCESS != status)
    e79c:	2808      	cmp	r0, #8
    e79e:	d003      	beq.n	e7a8 <mote_set_parameters+0x7c>
        printf("\nUnsupported Device Type\n\r");
    e7a0:	4813      	ldr	r0, [pc, #76]	; (e7f0 <mote_set_parameters+0xc4>)
    e7a2:	4b10      	ldr	r3, [pc, #64]	; (e7e4 <mote_set_parameters+0xb8>)
    e7a4:	4798      	blx	r3
        return status;
    e7a6:	e7d3      	b.n	e750 <mote_set_parameters+0x24>
    status = LORAWAN_Join(DEMO_APP_ACTIVATION_TYPE);
    e7a8:	2000      	movs	r0, #0
    e7aa:	4b12      	ldr	r3, [pc, #72]	; (e7f4 <mote_set_parameters+0xc8>)
    e7ac:	4798      	blx	r3
    e7ae:	0005      	movs	r5, r0
    if (LORAWAN_SUCCESS == status && index < sizeof(bandTable))
    e7b0:	2808      	cmp	r0, #8
    e7b2:	d008      	beq.n	e7c6 <mote_set_parameters+0x9a>
        print_stack_status(status);
    e7b4:	4b10      	ldr	r3, [pc, #64]	; (e7f8 <mote_set_parameters+0xcc>)
    e7b6:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    e7b8:	2203      	movs	r2, #3
    e7ba:	4b10      	ldr	r3, [pc, #64]	; (e7fc <mote_set_parameters+0xd0>)
    e7bc:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    e7be:	2000      	movs	r0, #0
    e7c0:	4b0f      	ldr	r3, [pc, #60]	; (e800 <mote_set_parameters+0xd4>)
    e7c2:	4798      	blx	r3
    e7c4:	e7c4      	b.n	e750 <mote_set_parameters+0x24>
    if (LORAWAN_SUCCESS == status && index < sizeof(bandTable))
    e7c6:	2c09      	cmp	r4, #9
    e7c8:	d8f4      	bhi.n	e7b4 <mote_set_parameters+0x88>
        printf("\nJoin Request Sent for %s\n\r",bandStrings[index]);
    e7ca:	00a4      	lsls	r4, r4, #2
    e7cc:	4b0d      	ldr	r3, [pc, #52]	; (e804 <mote_set_parameters+0xd8>)
    e7ce:	58e1      	ldr	r1, [r4, r3]
    e7d0:	480d      	ldr	r0, [pc, #52]	; (e808 <mote_set_parameters+0xdc>)
    e7d2:	4b04      	ldr	r3, [pc, #16]	; (e7e4 <mote_set_parameters+0xb8>)
    e7d4:	4798      	blx	r3
    e7d6:	e7bb      	b.n	e750 <mote_set_parameters+0x24>
    e7d8:	0001265d 	.word	0x0001265d
    e7dc:	0000e025 	.word	0x0000e025
    e7e0:	0001e6b8 	.word	0x0001e6b8
    e7e4:	000182cd 	.word	0x000182cd
    e7e8:	000121c1 	.word	0x000121c1
    e7ec:	0000e1bd 	.word	0x0000e1bd
    e7f0:	0001f044 	.word	0x0001f044
    e7f4:	000101c5 	.word	0x000101c5
    e7f8:	0000e34d 	.word	0x0000e34d
    e7fc:	20001039 	.word	0x20001039
    e800:	0000d789 	.word	0x0000d789
    e804:	0001ebe4 	.word	0x0001ebe4
    e808:	0001f060 	.word	0x0001f060

0000e80c <processTask>:
{
    e80c:	b530      	push	{r4, r5, lr}
    e80e:	b085      	sub	sp, #20
	switch(appTaskState)
    e810:	4bb4      	ldr	r3, [pc, #720]	; (eae4 <processTask+0x2d8>)
    e812:	781b      	ldrb	r3, [r3, #0]
    e814:	2b01      	cmp	r3, #1
    e816:	d100      	bne.n	e81a <processTask+0xe>
    e818:	e073      	b.n	e902 <processTask+0xf6>
    e81a:	2b00      	cmp	r3, #0
    e81c:	d00b      	beq.n	e836 <processTask+0x2a>
    e81e:	2b02      	cmp	r3, #2
    e820:	d100      	bne.n	e824 <processTask+0x18>
    e822:	e08b      	b.n	e93c <processTask+0x130>
    e824:	2b03      	cmp	r3, #3
    e826:	d100      	bne.n	e82a <processTask+0x1e>
    e828:	e0bc      	b.n	e9a4 <processTask+0x198>
			printf("Error STATE Entered\r\n");
    e82a:	48af      	ldr	r0, [pc, #700]	; (eae8 <processTask+0x2dc>)
    e82c:	4baf      	ldr	r3, [pc, #700]	; (eaec <processTask+0x2e0>)
    e82e:	4798      	blx	r3
}
    e830:	2000      	movs	r0, #0
    e832:	b005      	add	sp, #20
    e834:	bd30      	pop	{r4, r5, pc}
	uint8_t prevBand = 0xff;
    e836:	23ff      	movs	r3, #255	; 0xff
    e838:	466a      	mov	r2, sp
    e83a:	7013      	strb	r3, [r2, #0]
	PDS_RestoreAll();
    e83c:	4bac      	ldr	r3, [pc, #688]	; (eaf0 <processTask+0x2e4>)
    e83e:	4798      	blx	r3
	LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
    e840:	466a      	mov	r2, sp
    e842:	2100      	movs	r1, #0
    e844:	2023      	movs	r0, #35	; 0x23
    e846:	4bab      	ldr	r3, [pc, #684]	; (eaf4 <processTask+0x2e8>)
    e848:	4798      	blx	r3
		if(bandTable[i] == prevBand)
    e84a:	466b      	mov	r3, sp
    e84c:	7819      	ldrb	r1, [r3, #0]
    e84e:	4baa      	ldr	r3, [pc, #680]	; (eaf8 <processTask+0x2ec>)
    e850:	781b      	ldrb	r3, [r3, #0]
    e852:	428b      	cmp	r3, r1
    e854:	d021      	beq.n	e89a <processTask+0x8e>
    e856:	2301      	movs	r3, #1
    e858:	48a7      	ldr	r0, [pc, #668]	; (eaf8 <processTask+0x2ec>)
    e85a:	5c1a      	ldrb	r2, [r3, r0]
    e85c:	428a      	cmp	r2, r1
    e85e:	d00f      	beq.n	e880 <processTask+0x74>
	for (uint32_t i = 0; i < sizeof(bandTable)-1; i++)
    e860:	3301      	adds	r3, #1
    e862:	2b09      	cmp	r3, #9
    e864:	d1f9      	bne.n	e85a <processTask+0x4e>
	uint8_t choice = 0xff;
    e866:	24ff      	movs	r4, #255	; 0xff
	if(status == LORAWAN_SUCCESS && choice < sizeof(bandTable)-1)
    e868:	2c08      	cmp	r4, #8
    e86a:	d918      	bls.n	e89e <processTask+0x92>
		printf("Restoration failed\r\n");
    e86c:	48a3      	ldr	r0, [pc, #652]	; (eafc <processTask+0x2f0>)
    e86e:	4b9f      	ldr	r3, [pc, #636]	; (eaec <processTask+0x2e0>)
    e870:	4798      	blx	r3
		appTaskState = DEMO_APP_STATE;
    e872:	2202      	movs	r2, #2
    e874:	4b9b      	ldr	r3, [pc, #620]	; (eae4 <processTask+0x2d8>)
    e876:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    e878:	2000      	movs	r0, #0
    e87a:	4ba1      	ldr	r3, [pc, #644]	; (eb00 <processTask+0x2f4>)
    e87c:	4798      	blx	r3
    e87e:	e7d7      	b.n	e830 <processTask+0x24>
			choice = i;
    e880:	b2dc      	uxtb	r4, r3
	if(choice >0 && choice < sizeof(bandTable)-1)
    e882:	1e62      	subs	r2, r4, #1
    e884:	2a07      	cmp	r2, #7
    e886:	d8ef      	bhi.n	e868 <processTask+0x5c>
		status = LORAWAN_Reset(bandTable[choice]);
    e888:	22ff      	movs	r2, #255	; 0xff
    e88a:	4013      	ands	r3, r2
    e88c:	4a9a      	ldr	r2, [pc, #616]	; (eaf8 <processTask+0x2ec>)
    e88e:	5cd0      	ldrb	r0, [r2, r3]
    e890:	4b9c      	ldr	r3, [pc, #624]	; (eb04 <processTask+0x2f8>)
    e892:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS && choice < sizeof(bandTable)-1)
    e894:	2808      	cmp	r0, #8
    e896:	d1e9      	bne.n	e86c <processTask+0x60>
    e898:	e7e6      	b.n	e868 <processTask+0x5c>
			choice = i;
    e89a:	2400      	movs	r4, #0
    e89c:	e7e4      	b.n	e868 <processTask+0x5c>
		uint32_t joinStatus = 0;
    e89e:	2300      	movs	r3, #0
    e8a0:	9301      	str	r3, [sp, #4]
		PDS_RestoreAll();
    e8a2:	4b93      	ldr	r3, [pc, #588]	; (eaf0 <processTask+0x2e4>)
    e8a4:	4798      	blx	r3
		LORAWAN_GetAttr(LORAWAN_STATUS,NULL, &joinStatus);
    e8a6:	aa01      	add	r2, sp, #4
    e8a8:	2100      	movs	r1, #0
    e8aa:	2020      	movs	r0, #32
    e8ac:	4b91      	ldr	r3, [pc, #580]	; (eaf4 <processTask+0x2e8>)
    e8ae:	4798      	blx	r3
		printf("\r\nPDS_RestorationStatus: Success\r\n" );
    e8b0:	4895      	ldr	r0, [pc, #596]	; (eb08 <processTask+0x2fc>)
    e8b2:	4b8e      	ldr	r3, [pc, #568]	; (eaec <processTask+0x2e0>)
    e8b4:	4798      	blx	r3
		if(joinStatus & LORAWAN_NW_JOINED)
    e8b6:	9b01      	ldr	r3, [sp, #4]
    e8b8:	07db      	lsls	r3, r3, #31
    e8ba:	d514      	bpl.n	e8e6 <processTask+0xda>
			joined = true;
    e8bc:	2201      	movs	r2, #1
    e8be:	4b93      	ldr	r3, [pc, #588]	; (eb0c <processTask+0x300>)
    e8c0:	701a      	strb	r2, [r3, #0]
			printf("joinStatus: Joined\r\n");
    e8c2:	4893      	ldr	r0, [pc, #588]	; (eb10 <processTask+0x304>)
    e8c4:	4b89      	ldr	r3, [pc, #548]	; (eaec <processTask+0x2e0>)
    e8c6:	4798      	blx	r3
		printf("Band: %s\r\n",bandStrings[choice]);
    e8c8:	00a4      	lsls	r4, r4, #2
    e8ca:	4b92      	ldr	r3, [pc, #584]	; (eb14 <processTask+0x308>)
    e8cc:	58e1      	ldr	r1, [r4, r3]
    e8ce:	4892      	ldr	r0, [pc, #584]	; (eb18 <processTask+0x30c>)
    e8d0:	4b92      	ldr	r3, [pc, #584]	; (eb1c <processTask+0x310>)
    e8d2:	4798      	blx	r3
		print_application_config();
    e8d4:	4b92      	ldr	r3, [pc, #584]	; (eb20 <processTask+0x314>)
    e8d6:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    e8d8:	2203      	movs	r2, #3
    e8da:	4b82      	ldr	r3, [pc, #520]	; (eae4 <processTask+0x2d8>)
    e8dc:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    e8de:	2000      	movs	r0, #0
    e8e0:	4b87      	ldr	r3, [pc, #540]	; (eb00 <processTask+0x2f4>)
    e8e2:	4798      	blx	r3
    e8e4:	e7a4      	b.n	e830 <processTask+0x24>
			joined = false;
    e8e6:	2200      	movs	r2, #0
    e8e8:	4b88      	ldr	r3, [pc, #544]	; (eb0c <processTask+0x300>)
    e8ea:	701a      	strb	r2, [r3, #0]
			printf("JoinStatus : Denied\r\n");
    e8ec:	488d      	ldr	r0, [pc, #564]	; (eb24 <processTask+0x318>)
    e8ee:	4b7f      	ldr	r3, [pc, #508]	; (eaec <processTask+0x2e0>)
    e8f0:	4798      	blx	r3
			set_LED_data(LED_AMBER,&on);
    e8f2:	498d      	ldr	r1, [pc, #564]	; (eb28 <processTask+0x31c>)
    e8f4:	2002      	movs	r0, #2
    e8f6:	4b8d      	ldr	r3, [pc, #564]	; (eb2c <processTask+0x320>)
    e8f8:	4798      	blx	r3
			SYSTEM_PostTask(APP_TASK_ID);
    e8fa:	2010      	movs	r0, #16
    e8fc:	4b8c      	ldr	r3, [pc, #560]	; (eb30 <processTask+0x324>)
    e8fe:	4798      	blx	r3
    e900:	e7e2      	b.n	e8c8 <processTask+0xbc>
	if(serialBuffer == '1')
    e902:	4b8c      	ldr	r3, [pc, #560]	; (eb34 <processTask+0x328>)
    e904:	781b      	ldrb	r3, [r3, #0]
    e906:	2b31      	cmp	r3, #49	; 0x31
    e908:	d00b      	beq.n	e922 <processTask+0x116>
	else if(serialBuffer == '2')
    e90a:	2b32      	cmp	r3, #50	; 0x32
    e90c:	d010      	beq.n	e930 <processTask+0x124>
		printf("Please enter a valid choice\r\n");
    e90e:	488a      	ldr	r0, [pc, #552]	; (eb38 <processTask+0x32c>)
    e910:	4b76      	ldr	r3, [pc, #472]	; (eaec <processTask+0x2e0>)
    e912:	4798      	blx	r3
		appTaskState = DEMO_CERT_APP_STATE;
    e914:	2201      	movs	r2, #1
    e916:	4b73      	ldr	r3, [pc, #460]	; (eae4 <processTask+0x2d8>)
    e918:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    e91a:	2000      	movs	r0, #0
    e91c:	4b78      	ldr	r3, [pc, #480]	; (eb00 <processTask+0x2f4>)
    e91e:	4798      	blx	r3
    e920:	e786      	b.n	e830 <processTask+0x24>
		appTaskState = DEMO_APP_STATE;
    e922:	2202      	movs	r2, #2
    e924:	4b6f      	ldr	r3, [pc, #444]	; (eae4 <processTask+0x2d8>)
    e926:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    e928:	2000      	movs	r0, #0
    e92a:	4b75      	ldr	r3, [pc, #468]	; (eb00 <processTask+0x2f4>)
    e92c:	4798      	blx	r3
    e92e:	e77f      	b.n	e830 <processTask+0x24>
    certAppEnabled = true;
    e930:	2201      	movs	r2, #1
    e932:	4b82      	ldr	r3, [pc, #520]	; (eb3c <processTask+0x330>)
    e934:	701a      	strb	r2, [r3, #0]
    cert_app_init();
    e936:	4b82      	ldr	r3, [pc, #520]	; (eb40 <processTask+0x334>)
    e938:	4798      	blx	r3
    e93a:	e779      	b.n	e830 <processTask+0x24>
	uint8_t num = serialBuffer - '0';
    e93c:	4b7d      	ldr	r3, [pc, #500]	; (eb34 <processTask+0x328>)
    e93e:	781b      	ldrb	r3, [r3, #0]
    e940:	001c      	movs	r4, r3
    e942:	3c30      	subs	r4, #48	; 0x30
    e944:	b2e4      	uxtb	r4, r4
	if(num == sizeof(bandTable)-1)
    e946:	2c09      	cmp	r4, #9
    e948:	d00e      	beq.n	e968 <processTask+0x15c>
	else if(num == sizeof(bandTable)-2)
    e94a:	2c08      	cmp	r4, #8
    e94c:	d014      	beq.n	e978 <processTask+0x16c>
	else if(num >0 && num < sizeof(bandTable) -2)
    e94e:	3b31      	subs	r3, #49	; 0x31
    e950:	2b06      	cmp	r3, #6
    e952:	d91a      	bls.n	e98a <processTask+0x17e>
		printf("Not a valid regional band choice\r\n");
    e954:	487b      	ldr	r0, [pc, #492]	; (eb44 <processTask+0x338>)
    e956:	4b65      	ldr	r3, [pc, #404]	; (eaec <processTask+0x2e0>)
    e958:	4798      	blx	r3
		appTaskState = DEMO_APP_STATE;
    e95a:	2202      	movs	r2, #2
    e95c:	4b61      	ldr	r3, [pc, #388]	; (eae4 <processTask+0x2d8>)
    e95e:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    e960:	2000      	movs	r0, #0
    e962:	4b67      	ldr	r3, [pc, #412]	; (eb00 <processTask+0x2f4>)
    e964:	4798      	blx	r3
    e966:	e763      	b.n	e830 <processTask+0x24>
  __ASM volatile ("dsb");
    e968:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    e96c:	4a76      	ldr	r2, [pc, #472]	; (eb48 <processTask+0x33c>)
    e96e:	4b77      	ldr	r3, [pc, #476]	; (eb4c <processTask+0x340>)
    e970:	60da      	str	r2, [r3, #12]
    e972:	f3bf 8f4f 	dsb	sy
    e976:	e7fe      	b.n	e976 <processTask+0x16a>
		PDS_DeleteAll();
    e978:	4b75      	ldr	r3, [pc, #468]	; (eb50 <processTask+0x344>)
    e97a:	4798      	blx	r3
		appTaskState = DEMO_APP_STATE;
    e97c:	2202      	movs	r2, #2
    e97e:	4b59      	ldr	r3, [pc, #356]	; (eae4 <processTask+0x2d8>)
    e980:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    e982:	2000      	movs	r0, #0
    e984:	4b5e      	ldr	r3, [pc, #376]	; (eb00 <processTask+0x2f4>)
    e986:	4798      	blx	r3
    e988:	e752      	b.n	e830 <processTask+0x24>
		LORAWAN_Reset(bandTable[num]);
    e98a:	4d5b      	ldr	r5, [pc, #364]	; (eaf8 <processTask+0x2ec>)
    e98c:	5d28      	ldrb	r0, [r5, r4]
    e98e:	4b5d      	ldr	r3, [pc, #372]	; (eb04 <processTask+0x2f8>)
    e990:	4798      	blx	r3
		mote_set_parameters(bandTable[num],num);
    e992:	b2a1      	uxth	r1, r4
    e994:	5d28      	ldrb	r0, [r5, r4]
    e996:	4b6f      	ldr	r3, [pc, #444]	; (eb54 <processTask+0x348>)
    e998:	4798      	blx	r3
		set_LED_data(LED_GREEN,&on);
    e99a:	4963      	ldr	r1, [pc, #396]	; (eb28 <processTask+0x31c>)
    e99c:	2003      	movs	r0, #3
    e99e:	4b63      	ldr	r3, [pc, #396]	; (eb2c <processTask+0x320>)
    e9a0:	4798      	blx	r3
    e9a2:	e745      	b.n	e830 <processTask+0x24>
	if(serialBuffer == '1')
    e9a4:	4b63      	ldr	r3, [pc, #396]	; (eb34 <processTask+0x328>)
    e9a6:	781b      	ldrb	r3, [r3, #0]
    e9a8:	2b31      	cmp	r3, #49	; 0x31
    e9aa:	d014      	beq.n	e9d6 <processTask+0x1ca>
	else if(serialBuffer == '2' && joined == true)
    e9ac:	2b32      	cmp	r3, #50	; 0x32
    e9ae:	d02e      	beq.n	ea0e <processTask+0x202>
	else if(serialBuffer == '3')
    e9b0:	2b33      	cmp	r3, #51	; 0x33
    e9b2:	d054      	beq.n	ea5e <processTask+0x252>
	else if(serialBuffer == '4')
    e9b4:	2b34      	cmp	r3, #52	; 0x34
    e9b6:	d100      	bne.n	e9ba <processTask+0x1ae>
    e9b8:	e08d      	b.n	ead6 <processTask+0x2ca>
		set_LED_data(LED_AMBER,&on);
    e9ba:	495b      	ldr	r1, [pc, #364]	; (eb28 <processTask+0x31c>)
    e9bc:	2002      	movs	r0, #2
    e9be:	4b5b      	ldr	r3, [pc, #364]	; (eb2c <processTask+0x320>)
    e9c0:	4798      	blx	r3
		printf("Invalid choice entered\r\n");
    e9c2:	4865      	ldr	r0, [pc, #404]	; (eb58 <processTask+0x34c>)
    e9c4:	4b49      	ldr	r3, [pc, #292]	; (eaec <processTask+0x2e0>)
    e9c6:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    e9c8:	2203      	movs	r2, #3
    e9ca:	4b46      	ldr	r3, [pc, #280]	; (eae4 <processTask+0x2d8>)
    e9cc:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    e9ce:	2000      	movs	r0, #0
    e9d0:	4b4b      	ldr	r3, [pc, #300]	; (eb00 <processTask+0x2f4>)
    e9d2:	4798      	blx	r3
    e9d4:	e72c      	b.n	e830 <processTask+0x24>
		status = LORAWAN_Join(DEMO_APP_ACTIVATION_TYPE);
    e9d6:	2000      	movs	r0, #0
    e9d8:	4b60      	ldr	r3, [pc, #384]	; (eb5c <processTask+0x350>)
    e9da:	4798      	blx	r3
    e9dc:	0004      	movs	r4, r0
		if (LORAWAN_SUCCESS == (StackRetStatus_t)status)
    e9de:	2808      	cmp	r0, #8
    e9e0:	d00d      	beq.n	e9fe <processTask+0x1f2>
			set_LED_data(LED_AMBER,&on);
    e9e2:	4951      	ldr	r1, [pc, #324]	; (eb28 <processTask+0x31c>)
    e9e4:	2002      	movs	r0, #2
    e9e6:	4b51      	ldr	r3, [pc, #324]	; (eb2c <processTask+0x320>)
    e9e8:	4798      	blx	r3
			print_stack_status(status);
    e9ea:	0020      	movs	r0, r4
    e9ec:	4b5c      	ldr	r3, [pc, #368]	; (eb60 <processTask+0x354>)
    e9ee:	4798      	blx	r3
			appTaskState = JOIN_SEND_STATE;
    e9f0:	2203      	movs	r2, #3
    e9f2:	4b3c      	ldr	r3, [pc, #240]	; (eae4 <processTask+0x2d8>)
    e9f4:	701a      	strb	r2, [r3, #0]
			appPostTask(DISPLAY_TASK_HANDLER);
    e9f6:	2000      	movs	r0, #0
    e9f8:	4b41      	ldr	r3, [pc, #260]	; (eb00 <processTask+0x2f4>)
    e9fa:	4798      	blx	r3
    e9fc:	e718      	b.n	e830 <processTask+0x24>
			set_LED_data(LED_GREEN,&on);
    e9fe:	494a      	ldr	r1, [pc, #296]	; (eb28 <processTask+0x31c>)
    ea00:	2003      	movs	r0, #3
    ea02:	4b4a      	ldr	r3, [pc, #296]	; (eb2c <processTask+0x320>)
    ea04:	4798      	blx	r3
			printf("\nJoin Request Sent\n\r");
    ea06:	4857      	ldr	r0, [pc, #348]	; (eb64 <processTask+0x358>)
    ea08:	4b44      	ldr	r3, [pc, #272]	; (eb1c <processTask+0x310>)
    ea0a:	4798      	blx	r3
    ea0c:	e710      	b.n	e830 <processTask+0x24>
	else if(serialBuffer == '2' && joined == true)
    ea0e:	4b3f      	ldr	r3, [pc, #252]	; (eb0c <processTask+0x300>)
    ea10:	781b      	ldrb	r3, [r3, #0]
    ea12:	2b00      	cmp	r3, #0
    ea14:	d10d      	bne.n	ea32 <processTask+0x226>
		set_LED_data(LED_AMBER,&on);
    ea16:	4944      	ldr	r1, [pc, #272]	; (eb28 <processTask+0x31c>)
    ea18:	2002      	movs	r0, #2
    ea1a:	4b44      	ldr	r3, [pc, #272]	; (eb2c <processTask+0x320>)
    ea1c:	4798      	blx	r3
		printf("Device not joined to the network\r\n");
    ea1e:	4852      	ldr	r0, [pc, #328]	; (eb68 <processTask+0x35c>)
    ea20:	4b32      	ldr	r3, [pc, #200]	; (eaec <processTask+0x2e0>)
    ea22:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    ea24:	2203      	movs	r2, #3
    ea26:	4b2f      	ldr	r3, [pc, #188]	; (eae4 <processTask+0x2d8>)
    ea28:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    ea2a:	2000      	movs	r0, #0
    ea2c:	4b34      	ldr	r3, [pc, #208]	; (eb00 <processTask+0x2f4>)
    ea2e:	4798      	blx	r3
    ea30:	e6fe      	b.n	e830 <processTask+0x24>
		printf("\n> Powering Up WINC1500\r\n") ;
    ea32:	484e      	ldr	r0, [pc, #312]	; (eb6c <processTask+0x360>)
    ea34:	4c2d      	ldr	r4, [pc, #180]	; (eaec <processTask+0x2e0>)
    ea36:	47a0      	blx	r4
		wifi_init() ;
    ea38:	4b4d      	ldr	r3, [pc, #308]	; (eb70 <processTask+0x364>)
    ea3a:	4798      	blx	r3
		strScanOptions.u8NumOfSlot = 1 ; //M2M_SCAN_DEFAULT_NUM_SLOTS;
    ea3c:	a801      	add	r0, sp, #4
    ea3e:	2301      	movs	r3, #1
    ea40:	7003      	strb	r3, [r0, #0]
		strScanOptions.u8ProbesPerSlot = M2M_SCAN_DEFAULT_NUM_PROBE ;
    ea42:	3301      	adds	r3, #1
    ea44:	7083      	strb	r3, [r0, #2]
		strScanOptions.u8SlotTime = M2M_SCAN_DEFAULT_SLOT_TIME ;
    ea46:	331c      	adds	r3, #28
    ea48:	7043      	strb	r3, [r0, #1]
		strScanOptions.s8RssiThresh = -60 ;
    ea4a:	33a6      	adds	r3, #166	; 0xa6
    ea4c:	70c3      	strb	r3, [r0, #3]
		m2m_wifi_set_scan_options(&strScanOptions) ;
    ea4e:	4b49      	ldr	r3, [pc, #292]	; (eb74 <processTask+0x368>)
    ea50:	4798      	blx	r3
		printf("\n>Starting active scan ...\r\n") ;
    ea52:	4849      	ldr	r0, [pc, #292]	; (eb78 <processTask+0x36c>)
    ea54:	47a0      	blx	r4
		m2m_wifi_request_scan(DEMO_CHANNEL_TO_SCAN) ;
    ea56:	20ff      	movs	r0, #255	; 0xff
    ea58:	4b48      	ldr	r3, [pc, #288]	; (eb7c <processTask+0x370>)
    ea5a:	4798      	blx	r3
    ea5c:	e6e8      	b.n	e830 <processTask+0x24>
		sleepReq.sleepTimeMs = DEMO_CONF_DEFAULT_APP_SLEEP_TIME_MS;
    ea5e:	ab01      	add	r3, sp, #4
    ea60:	22fa      	movs	r2, #250	; 0xfa
    ea62:	0092      	lsls	r2, r2, #2
    ea64:	9201      	str	r2, [sp, #4]
		sleepReq.pmmWakeupCallback = appWakeup;
    ea66:	4a46      	ldr	r2, [pc, #280]	; (eb80 <processTask+0x374>)
    ea68:	9203      	str	r2, [sp, #12]
		sleepReq.sleep_mode = CONF_PMM_SLEEPMODE_WHEN_IDLE;
    ea6a:	2201      	movs	r2, #1
    ea6c:	711a      	strb	r2, [r3, #4]
		if (true == LORAWAN_ReadyToSleep(deviceResetsForWakeup))
    ea6e:	2000      	movs	r0, #0
    ea70:	4b44      	ldr	r3, [pc, #272]	; (eb84 <processTask+0x378>)
    ea72:	4798      	blx	r3
    ea74:	2800      	cmp	r0, #0
    ea76:	d024      	beq.n	eac2 <processTask+0x2b6>
	config->direction  = PORT_PIN_DIR_INPUT;
    ea78:	2300      	movs	r3, #0
    ea7a:	466a      	mov	r2, sp
    ea7c:	7013      	strb	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    ea7e:	3301      	adds	r3, #1
    ea80:	7053      	strb	r3, [r2, #1]
    pin_conf.powersave  = true;
    ea82:	7093      	strb	r3, [r2, #2]
    port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
    ea84:	4669      	mov	r1, sp
    ea86:	2004      	movs	r0, #4
    ea88:	4c3f      	ldr	r4, [pc, #252]	; (eb88 <processTask+0x37c>)
    ea8a:	47a0      	blx	r4
    port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
    ea8c:	4669      	mov	r1, sp
    ea8e:	2005      	movs	r0, #5
    ea90:	47a0      	blx	r4
    sio2host_deinit();
    ea92:	4b3e      	ldr	r3, [pc, #248]	; (eb8c <processTask+0x380>)
    ea94:	4798      	blx	r3
    HAL_RadioDeInit();
    ea96:	4b3e      	ldr	r3, [pc, #248]	; (eb90 <processTask+0x384>)
    ea98:	4798      	blx	r3
			if (PMM_SLEEP_REQ_DENIED == PMM_Sleep(&sleepReq))
    ea9a:	a801      	add	r0, sp, #4
    ea9c:	4b3d      	ldr	r3, [pc, #244]	; (eb94 <processTask+0x388>)
    ea9e:	4798      	blx	r3
    eaa0:	2800      	cmp	r0, #0
    eaa2:	d000      	beq.n	eaa6 <processTask+0x29a>
    eaa4:	e6c4      	b.n	e830 <processTask+0x24>
				HAL_Radio_resources_init();
    eaa6:	4b3c      	ldr	r3, [pc, #240]	; (eb98 <processTask+0x38c>)
    eaa8:	4798      	blx	r3
				sio2host_init();
    eaaa:	4b3c      	ldr	r3, [pc, #240]	; (eb9c <processTask+0x390>)
    eaac:	4798      	blx	r3
				appTaskState = JOIN_SEND_STATE;
    eaae:	2203      	movs	r2, #3
    eab0:	4b0c      	ldr	r3, [pc, #48]	; (eae4 <processTask+0x2d8>)
    eab2:	701a      	strb	r2, [r3, #0]
				appPostTask(DISPLAY_TASK_HANDLER);
    eab4:	2000      	movs	r0, #0
    eab6:	4b12      	ldr	r3, [pc, #72]	; (eb00 <processTask+0x2f4>)
    eab8:	4798      	blx	r3
				printf("\r\nsleep_not_ok\r\n");	
    eaba:	4839      	ldr	r0, [pc, #228]	; (eba0 <processTask+0x394>)
    eabc:	4b0b      	ldr	r3, [pc, #44]	; (eaec <processTask+0x2e0>)
    eabe:	4798      	blx	r3
    eac0:	e6b6      	b.n	e830 <processTask+0x24>
			printf("\r\nsleep_not_ok\r\n");
    eac2:	4837      	ldr	r0, [pc, #220]	; (eba0 <processTask+0x394>)
    eac4:	4b09      	ldr	r3, [pc, #36]	; (eaec <processTask+0x2e0>)
    eac6:	4798      	blx	r3
			appTaskState = JOIN_SEND_STATE;
    eac8:	2203      	movs	r2, #3
    eaca:	4b06      	ldr	r3, [pc, #24]	; (eae4 <processTask+0x2d8>)
    eacc:	701a      	strb	r2, [r3, #0]
			appPostTask(DISPLAY_TASK_HANDLER);
    eace:	2000      	movs	r0, #0
    ead0:	4b0b      	ldr	r3, [pc, #44]	; (eb00 <processTask+0x2f4>)
    ead2:	4798      	blx	r3
    ead4:	e6ac      	b.n	e830 <processTask+0x24>
		appTaskState = DEMO_APP_STATE;
    ead6:	2202      	movs	r2, #2
    ead8:	4b02      	ldr	r3, [pc, #8]	; (eae4 <processTask+0x2d8>)
    eada:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    eadc:	2000      	movs	r0, #0
    eade:	4b08      	ldr	r3, [pc, #32]	; (eb00 <processTask+0x2f4>)
    eae0:	4798      	blx	r3
    eae2:	e6a5      	b.n	e830 <processTask+0x24>
    eae4:	20001039 	.word	0x20001039
    eae8:	0001efa4 	.word	0x0001efa4
    eaec:	000183a5 	.word	0x000183a5
    eaf0:	0000b80d 	.word	0x0000b80d
    eaf4:	00010819 	.word	0x00010819
    eaf8:	20000058 	.word	0x20000058
    eafc:	0001f1e4 	.word	0x0001f1e4
    eb00:	0000d789 	.word	0x0000d789
    eb04:	0001265d 	.word	0x0001265d
    eb08:	0001f188 	.word	0x0001f188
    eb0c:	2000103b 	.word	0x2000103b
    eb10:	0001f1ac 	.word	0x0001f1ac
    eb14:	0001ebe4 	.word	0x0001ebe4
    eb18:	0001f1d8 	.word	0x0001f1d8
    eb1c:	000182cd 	.word	0x000182cd
    eb20:	0000e1f5 	.word	0x0000e1f5
    eb24:	0001f1c0 	.word	0x0001f1c0
    eb28:	200000d0 	.word	0x200000d0
    eb2c:	0000c0ad 	.word	0x0000c0ad
    eb30:	0000cad9 	.word	0x0000cad9
    eb34:	20001059 	.word	0x20001059
    eb38:	0001f1f8 	.word	0x0001f1f8
    eb3c:	2000103a 	.word	0x2000103a
    eb40:	0000d54d 	.word	0x0000d54d
    eb44:	0001f218 	.word	0x0001f218
    eb48:	05fa0004 	.word	0x05fa0004
    eb4c:	e000ed00 	.word	0xe000ed00
    eb50:	0000b7f1 	.word	0x0000b7f1
    eb54:	0000e72d 	.word	0x0000e72d
    eb58:	0001f2a8 	.word	0x0001f2a8
    eb5c:	000101c5 	.word	0x000101c5
    eb60:	0000e34d 	.word	0x0000e34d
    eb64:	0001e74c 	.word	0x0001e74c
    eb68:	0001f274 	.word	0x0001f274
    eb6c:	0001f23c 	.word	0x0001f23c
    eb70:	0000df41 	.word	0x0000df41
    eb74:	000012b9 	.word	0x000012b9
    eb78:	0001f258 	.word	0x0001f258
    eb7c:	000013ad 	.word	0x000013ad
    eb80:	0000dd3d 	.word	0x0000dd3d
    eb84:	000128c5 	.word	0x000128c5
    eb88:	000036fd 	.word	0x000036fd
    eb8c:	00006301 	.word	0x00006301
    eb90:	0000672d 	.word	0x0000672d
    eb94:	00006a89 	.word	0x00006a89
    eb98:	00006709 	.word	0x00006709
    eb9c:	000061b5 	.word	0x000061b5
    eba0:	0001f298 	.word	0x0001f298

0000eba4 <appWakeup>:
    }
}

#ifdef CONF_PMM_ENABLE
static void appWakeup(uint32_t sleptDuration)
{
    eba4:	b510      	push	{r4, lr}
    eba6:	0004      	movs	r4, r0
    HAL_Radio_resources_init();
    eba8:	4b04      	ldr	r3, [pc, #16]	; (ebbc <appWakeup+0x18>)
    ebaa:	4798      	blx	r3
    sio2host_init();
    ebac:	4b04      	ldr	r3, [pc, #16]	; (ebc0 <appWakeup+0x1c>)
    ebae:	4798      	blx	r3
    printf("\r\nsleep_ok %ld ms\r\n", sleptDuration);
    ebb0:	0021      	movs	r1, r4
    ebb2:	4804      	ldr	r0, [pc, #16]	; (ebc4 <appWakeup+0x20>)
    ebb4:	4b04      	ldr	r3, [pc, #16]	; (ebc8 <appWakeup+0x24>)
    ebb6:	4798      	blx	r3

}
    ebb8:	bd10      	pop	{r4, pc}
    ebba:	46c0      	nop			; (mov r8, r8)
    ebbc:	00006709 	.word	0x00006709
    ebc0:	000061b5 	.word	0x000061b5
    ebc4:	0001ebd0 	.word	0x0001ebd0
    ebc8:	000182cd 	.word	0x000182cd

0000ebcc <main>:
 * \mainpage
 * \section preface Preface
 * This is the reference manual for the LORAWAN Demo Application of EU Band
 */
int main(void)
{
    ebcc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ebce:	b085      	sub	sp, #20
    /* System Initialization */
    system_init();
    ebd0:	4b42      	ldr	r3, [pc, #264]	; (ecdc <main+0x110>)
    ebd2:	4798      	blx	r3
    /* Initialize the delay driver */
    delay_init();
    ebd4:	4b42      	ldr	r3, [pc, #264]	; (ece0 <main+0x114>)
    ebd6:	4798      	blx	r3
    /* Initialize the board target resources */
    board_init();
    ebd8:	4b42      	ldr	r3, [pc, #264]	; (ece4 <main+0x118>)
    ebda:	4798      	blx	r3

    INTERRUPT_GlobalInterruptEnable();
    ebdc:	2201      	movs	r2, #1
    ebde:	4b42      	ldr	r3, [pc, #264]	; (ece8 <main+0x11c>)
    ebe0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    ebe2:	f3bf 8f5f 	dmb	sy
    ebe6:	b662      	cpsie	i

/* Initializes all the hardware and software modules used for Stack operation */
static void driver_init(void)
{
    /* Initialize the Radio Hardware */
    HAL_RadioInit();
    ebe8:	4b40      	ldr	r3, [pc, #256]	; (ecec <main+0x120>)
    ebea:	4798      	blx	r3
    /* Initialize the AES Hardware Engine */
    AESInit();
    ebec:	4b40      	ldr	r3, [pc, #256]	; (ecf0 <main+0x124>)
    ebee:	4798      	blx	r3
    /* Initialize the Software Timer Module */
    SystemTimerInit();
    ebf0:	4b40      	ldr	r3, [pc, #256]	; (ecf4 <main+0x128>)
    ebf2:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
    /* Initialize the Sleep Timer Module */
    SleepTimerInit();
    ebf4:	4b40      	ldr	r3, [pc, #256]	; (ecf8 <main+0x12c>)
    ebf6:	4798      	blx	r3
#endif
#if (ENABLE_PDS == 1)
    /* PDS Module Init */
    PDS_Init();
    ebf8:	4b40      	ldr	r3, [pc, #256]	; (ecfc <main+0x130>)
    ebfa:	4798      	blx	r3
    sio2host_init();
    ebfc:	4b40      	ldr	r3, [pc, #256]	; (ed00 <main+0x134>)
    ebfe:	4798      	blx	r3
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    ec00:	4b40      	ldr	r3, [pc, #256]	; (ed04 <main+0x138>)
    ec02:	781c      	ldrb	r4, [r3, #0]
    ec04:	b2e4      	uxtb	r4, r4
    printf("Last reset cause: ");
    ec06:	4840      	ldr	r0, [pc, #256]	; (ed08 <main+0x13c>)
    ec08:	4b40      	ldr	r3, [pc, #256]	; (ed0c <main+0x140>)
    ec0a:	4798      	blx	r3
    if(rcause & (1 << 6)) {
    ec0c:	0663      	lsls	r3, r4, #25
    ec0e:	d44c      	bmi.n	ecaa <main+0xde>
    if(rcause & (1 << 5)) {
    ec10:	06a3      	lsls	r3, r4, #26
    ec12:	d44e      	bmi.n	ecb2 <main+0xe6>
    if(rcause & (1 << 4)) {
    ec14:	06e3      	lsls	r3, r4, #27
    ec16:	d450      	bmi.n	ecba <main+0xee>
    if(rcause & (1 << 2)) {
    ec18:	0763      	lsls	r3, r4, #29
    ec1a:	d452      	bmi.n	ecc2 <main+0xf6>
    if(rcause & (1 << 1)) {
    ec1c:	07a3      	lsls	r3, r4, #30
    ec1e:	d454      	bmi.n	ecca <main+0xfe>
    if(rcause & (1 << 0)) {
    ec20:	07e3      	lsls	r3, r4, #31
    ec22:	d456      	bmi.n	ecd2 <main+0x106>
    Stack_Init();
    ec24:	4b3a      	ldr	r3, [pc, #232]	; (ed10 <main+0x144>)
    ec26:	4798      	blx	r3
    SwTimerCreate(&demoTimerId);
    ec28:	483a      	ldr	r0, [pc, #232]	; (ed14 <main+0x148>)
    ec2a:	4c3b      	ldr	r4, [pc, #236]	; (ed18 <main+0x14c>)
    ec2c:	47a0      	blx	r4
    SwTimerCreate(&lTimerId);
    ec2e:	483b      	ldr	r0, [pc, #236]	; (ed1c <main+0x150>)
    ec30:	47a0      	blx	r4
    mote_demo_init();
    ec32:	4b3b      	ldr	r3, [pc, #236]	; (ed20 <main+0x154>)
    ec34:	4798      	blx	r3
		m2m_wifi_handle_events(NULL) ;
    ec36:	4e3b      	ldr	r6, [pc, #236]	; (ed24 <main+0x158>)
		serial_data_handler();
    ec38:	4d3b      	ldr	r5, [pc, #236]	; (ed28 <main+0x15c>)
        SYSTEM_RunTasks();
    ec3a:	4c3c      	ldr	r4, [pc, #240]	; (ed2c <main+0x160>)
		m2m_wifi_handle_events(NULL) ;
    ec3c:	2000      	movs	r0, #0
    ec3e:	47b0      	blx	r6
		serial_data_handler();
    ec40:	47a8      	blx	r5
        SYSTEM_RunTasks();
    ec42:	47a0      	blx	r4
        if (false == certAppEnabled)
    ec44:	4b3a      	ldr	r3, [pc, #232]	; (ed30 <main+0x164>)
    ec46:	781b      	ldrb	r3, [r3, #0]
    ec48:	2b00      	cmp	r3, #0
    ec4a:	d1f7      	bne.n	ec3c <main+0x70>
            if(bandSelected == true)
    ec4c:	4b39      	ldr	r3, [pc, #228]	; (ed34 <main+0x168>)
    ec4e:	781b      	ldrb	r3, [r3, #0]
    ec50:	2b00      	cmp	r3, #0
    ec52:	d0f3      	beq.n	ec3c <main+0x70>
                sleepReq.sleepTimeMs = DEMO_CONF_DEFAULT_APP_SLEEP_TIME_MS;
    ec54:	ab01      	add	r3, sp, #4
    ec56:	22fa      	movs	r2, #250	; 0xfa
    ec58:	0092      	lsls	r2, r2, #2
    ec5a:	9201      	str	r2, [sp, #4]
                sleepReq.pmmWakeupCallback = appWakeup;
    ec5c:	4a36      	ldr	r2, [pc, #216]	; (ed38 <main+0x16c>)
    ec5e:	9203      	str	r2, [sp, #12]
                sleepReq.sleep_mode = CONF_PMM_SLEEPMODE_WHEN_IDLE;
    ec60:	2201      	movs	r2, #1
    ec62:	711a      	strb	r2, [r3, #4]
                    deviceResetsForWakeup = false;
    ec64:	2200      	movs	r2, #0
    ec66:	4b35      	ldr	r3, [pc, #212]	; (ed3c <main+0x170>)
    ec68:	701a      	strb	r2, [r3, #0]
                if (true == LORAWAN_ReadyToSleep(deviceResetsForWakeup))
    ec6a:	2000      	movs	r0, #0
    ec6c:	4b34      	ldr	r3, [pc, #208]	; (ed40 <main+0x174>)
    ec6e:	4798      	blx	r3
    ec70:	2800      	cmp	r0, #0
    ec72:	d0e3      	beq.n	ec3c <main+0x70>
	config->direction  = PORT_PIN_DIR_INPUT;
    ec74:	2300      	movs	r3, #0
    ec76:	466a      	mov	r2, sp
    ec78:	7013      	strb	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    ec7a:	3301      	adds	r3, #1
    ec7c:	7053      	strb	r3, [r2, #1]
static void app_resources_uninit(void)
{
    /* Disable USART TX and RX Pins */
    struct port_config pin_conf;
    port_get_config_defaults(&pin_conf);
    pin_conf.powersave  = true;
    ec7e:	7093      	strb	r3, [r2, #2]
    port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
    ec80:	4669      	mov	r1, sp
    ec82:	2004      	movs	r0, #4
    ec84:	4f2f      	ldr	r7, [pc, #188]	; (ed44 <main+0x178>)
    ec86:	47b8      	blx	r7
    port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
    ec88:	4669      	mov	r1, sp
    ec8a:	2005      	movs	r0, #5
    ec8c:	47b8      	blx	r7
    /* Disable UART module */
    sio2host_deinit();
    ec8e:	4b2e      	ldr	r3, [pc, #184]	; (ed48 <main+0x17c>)
    ec90:	4798      	blx	r3
    /* Disable Transceiver SPI Module */
    HAL_RadioDeInit();
    ec92:	4b2e      	ldr	r3, [pc, #184]	; (ed4c <main+0x180>)
    ec94:	4798      	blx	r3
                    if (PMM_SLEEP_REQ_DENIED == PMM_Sleep(&sleepReq))
    ec96:	a801      	add	r0, sp, #4
    ec98:	4b2d      	ldr	r3, [pc, #180]	; (ed50 <main+0x184>)
    ec9a:	4798      	blx	r3
    ec9c:	2800      	cmp	r0, #0
    ec9e:	d1cd      	bne.n	ec3c <main+0x70>
                        HAL_Radio_resources_init();
    eca0:	4b2c      	ldr	r3, [pc, #176]	; (ed54 <main+0x188>)
    eca2:	4798      	blx	r3
                        sio2host_init();
    eca4:	4b16      	ldr	r3, [pc, #88]	; (ed00 <main+0x134>)
    eca6:	4798      	blx	r3
    eca8:	e7c8      	b.n	ec3c <main+0x70>
        printf("System Reset Request\r\n");
    ecaa:	482b      	ldr	r0, [pc, #172]	; (ed58 <main+0x18c>)
    ecac:	4b2b      	ldr	r3, [pc, #172]	; (ed5c <main+0x190>)
    ecae:	4798      	blx	r3
    ecb0:	e7ae      	b.n	ec10 <main+0x44>
        printf("Watchdog Reset\r\n");
    ecb2:	482b      	ldr	r0, [pc, #172]	; (ed60 <main+0x194>)
    ecb4:	4b29      	ldr	r3, [pc, #164]	; (ed5c <main+0x190>)
    ecb6:	4798      	blx	r3
    ecb8:	e7ac      	b.n	ec14 <main+0x48>
        printf("External Reset\r\n");
    ecba:	482a      	ldr	r0, [pc, #168]	; (ed64 <main+0x198>)
    ecbc:	4b27      	ldr	r3, [pc, #156]	; (ed5c <main+0x190>)
    ecbe:	4798      	blx	r3
    ecc0:	e7aa      	b.n	ec18 <main+0x4c>
        printf("Brown Out 33 Detector Reset\r\n");
    ecc2:	4829      	ldr	r0, [pc, #164]	; (ed68 <main+0x19c>)
    ecc4:	4b25      	ldr	r3, [pc, #148]	; (ed5c <main+0x190>)
    ecc6:	4798      	blx	r3
    ecc8:	e7a8      	b.n	ec1c <main+0x50>
        printf("Brown Out 12 Detector Reset\r\n");
    ecca:	4828      	ldr	r0, [pc, #160]	; (ed6c <main+0x1a0>)
    eccc:	4b23      	ldr	r3, [pc, #140]	; (ed5c <main+0x190>)
    ecce:	4798      	blx	r3
    ecd0:	e7a6      	b.n	ec20 <main+0x54>
        printf("Power-On Reset\r\n");
    ecd2:	4827      	ldr	r0, [pc, #156]	; (ed70 <main+0x1a4>)
    ecd4:	4b21      	ldr	r3, [pc, #132]	; (ed5c <main+0x190>)
    ecd6:	4798      	blx	r3
    ecd8:	e7a4      	b.n	ec24 <main+0x58>
    ecda:	46c0      	nop			; (mov r8, r8)
    ecdc:	00005a9d 	.word	0x00005a9d
    ece0:	00002975 	.word	0x00002975
    ece4:	00002a7d 	.word	0x00002a7d
    ece8:	2000000c 	.word	0x2000000c
    ecec:	00006551 	.word	0x00006551
    ecf0:	0000b5b5 	.word	0x0000b5b5
    ecf4:	0000c419 	.word	0x0000c419
    ecf8:	00006925 	.word	0x00006925
    ecfc:	0000b71d 	.word	0x0000b71d
    ed00:	000061b5 	.word	0x000061b5
    ed04:	40000800 	.word	0x40000800
    ed08:	0001f56c 	.word	0x0001f56c
    ed0c:	000182cd 	.word	0x000182cd
    ed10:	0000ca5d 	.word	0x0000ca5d
    ed14:	200000d3 	.word	0x200000d3
    ed18:	0000c481 	.word	0x0000c481
    ed1c:	200000d4 	.word	0x200000d4
    ed20:	0000ddcd 	.word	0x0000ddcd
    ed24:	000012ad 	.word	0x000012ad
    ed28:	0000dd79 	.word	0x0000dd79
    ed2c:	0000ca6d 	.word	0x0000ca6d
    ed30:	2000103a 	.word	0x2000103a
    ed34:	20001072 	.word	0x20001072
    ed38:	0000eba5 	.word	0x0000eba5
    ed3c:	20001073 	.word	0x20001073
    ed40:	000128c5 	.word	0x000128c5
    ed44:	000036fd 	.word	0x000036fd
    ed48:	00006301 	.word	0x00006301
    ed4c:	0000672d 	.word	0x0000672d
    ed50:	00006a89 	.word	0x00006a89
    ed54:	00006709 	.word	0x00006709
    ed58:	0001f580 	.word	0x0001f580
    ed5c:	000183a5 	.word	0x000183a5
    ed60:	0001f598 	.word	0x0001f598
    ed64:	0001f5a8 	.word	0x0001f5a8
    ed68:	0001f5b8 	.word	0x0001f5b8
    ed6c:	0001f5d8 	.word	0x0001f5d8
    ed70:	0001f5f8 	.word	0x0001f5f8

0000ed74 <common_tc_read_count>:
    ed74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed76:	4b0d      	ldr	r3, [pc, #52]	; (edac <common_tc_read_count+0x38>)
    ed78:	4798      	blx	r3
    ed7a:	4b0d      	ldr	r3, [pc, #52]	; (edb0 <common_tc_read_count+0x3c>)
    ed7c:	781b      	ldrb	r3, [r3, #0]
    ed7e:	2b00      	cmp	r3, #0
    ed80:	d00e      	beq.n	eda0 <common_tc_read_count+0x2c>
    ed82:	4b0c      	ldr	r3, [pc, #48]	; (edb4 <common_tc_read_count+0x40>)
    ed84:	781d      	ldrb	r5, [r3, #0]
    ed86:	4b0a      	ldr	r3, [pc, #40]	; (edb0 <common_tc_read_count+0x3c>)
    ed88:	781f      	ldrb	r7, [r3, #0]
    ed8a:	4c0b      	ldr	r4, [pc, #44]	; (edb8 <common_tc_read_count+0x44>)
    ed8c:	1c29      	adds	r1, r5, #0
    ed8e:	47a0      	blx	r4
    ed90:	1c06      	adds	r6, r0, #0
    ed92:	480a      	ldr	r0, [pc, #40]	; (edbc <common_tc_read_count+0x48>)
    ed94:	1c29      	adds	r1, r5, #0
    ed96:	47a0      	blx	r4
    ed98:	4378      	muls	r0, r7
    ed9a:	1830      	adds	r0, r6, r0
    ed9c:	b280      	uxth	r0, r0
    ed9e:	e004      	b.n	edaa <common_tc_read_count+0x36>
    eda0:	4b04      	ldr	r3, [pc, #16]	; (edb4 <common_tc_read_count+0x40>)
    eda2:	7819      	ldrb	r1, [r3, #0]
    eda4:	4b04      	ldr	r3, [pc, #16]	; (edb8 <common_tc_read_count+0x44>)
    eda6:	4798      	blx	r3
    eda8:	b280      	uxth	r0, r0
    edaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    edac:	0000cd45 	.word	0x0000cd45
    edb0:	20001074 	.word	0x20001074
    edb4:	20001b7c 	.word	0x20001b7c
    edb8:	00014c85 	.word	0x00014c85
    edbc:	0000ffff 	.word	0x0000ffff

0000edc0 <common_tc_compare_stop>:
    edc0:	b508      	push	{r3, lr}
    edc2:	4b05      	ldr	r3, [pc, #20]	; (edd8 <common_tc_compare_stop+0x18>)
    edc4:	4798      	blx	r3
    edc6:	4b05      	ldr	r3, [pc, #20]	; (eddc <common_tc_compare_stop+0x1c>)
    edc8:	4798      	blx	r3
    edca:	4b05      	ldr	r3, [pc, #20]	; (ede0 <common_tc_compare_stop+0x20>)
    edcc:	2200      	movs	r2, #0
    edce:	605a      	str	r2, [r3, #4]
    edd0:	811a      	strh	r2, [r3, #8]
    edd2:	4b04      	ldr	r3, [pc, #16]	; (ede4 <common_tc_compare_stop+0x24>)
    edd4:	4798      	blx	r3
    edd6:	bd08      	pop	{r3, pc}
    edd8:	0000cd59 	.word	0x0000cd59
    eddc:	0000cdf5 	.word	0x0000cdf5
    ede0:	20001074 	.word	0x20001074
    ede4:	0000ce19 	.word	0x0000ce19

0000ede8 <common_tc_overflow_stop>:
    ede8:	b508      	push	{r3, lr}
    edea:	4b03      	ldr	r3, [pc, #12]	; (edf8 <common_tc_overflow_stop+0x10>)
    edec:	4798      	blx	r3
    edee:	2200      	movs	r2, #0
    edf0:	4b02      	ldr	r3, [pc, #8]	; (edfc <common_tc_overflow_stop+0x14>)
    edf2:	701a      	strb	r2, [r3, #0]
    edf4:	bd08      	pop	{r3, pc}
    edf6:	46c0      	nop			; (mov r8, r8)
    edf8:	0000cda9 	.word	0x0000cda9
    edfc:	20001074 	.word	0x20001074

0000ee00 <common_tc_stop>:
    ee00:	b508      	push	{r3, lr}
    ee02:	4b03      	ldr	r3, [pc, #12]	; (ee10 <common_tc_stop+0x10>)
    ee04:	4798      	blx	r3
    ee06:	4b03      	ldr	r3, [pc, #12]	; (ee14 <common_tc_stop+0x14>)
    ee08:	4798      	blx	r3
    ee0a:	4b03      	ldr	r3, [pc, #12]	; (ee18 <common_tc_stop+0x18>)
    ee0c:	4798      	blx	r3
    ee0e:	bd08      	pop	{r3, pc}
    ee10:	0000edc1 	.word	0x0000edc1
    ee14:	0000ede9 	.word	0x0000ede9
    ee18:	0000cdbd 	.word	0x0000cdbd

0000ee1c <common_tc_delay>:
    ee1c:	b510      	push	{r4, lr}
    ee1e:	1c04      	adds	r4, r0, #0
    ee20:	4b13      	ldr	r3, [pc, #76]	; (ee70 <common_tc_delay+0x54>)
    ee22:	4798      	blx	r3
    ee24:	4b13      	ldr	r3, [pc, #76]	; (ee74 <common_tc_delay+0x58>)
    ee26:	781a      	ldrb	r2, [r3, #0]
    ee28:	4362      	muls	r2, r4
    ee2a:	1881      	adds	r1, r0, r2
    ee2c:	4b12      	ldr	r3, [pc, #72]	; (ee78 <common_tc_delay+0x5c>)
    ee2e:	6059      	str	r1, [r3, #4]
    ee30:	6859      	ldr	r1, [r3, #4]
    ee32:	0c09      	lsrs	r1, r1, #16
    ee34:	6059      	str	r1, [r3, #4]
    ee36:	685b      	ldr	r3, [r3, #4]
    ee38:	2b00      	cmp	r3, #0
    ee3a:	d007      	beq.n	ee4c <common_tc_delay+0x30>
    ee3c:	4b0e      	ldr	r3, [pc, #56]	; (ee78 <common_tc_delay+0x5c>)
    ee3e:	6859      	ldr	r1, [r3, #4]
    ee40:	3201      	adds	r2, #1
    ee42:	1880      	adds	r0, r0, r2
    ee44:	8118      	strh	r0, [r3, #8]
    ee46:	4b0d      	ldr	r3, [pc, #52]	; (ee7c <common_tc_delay+0x60>)
    ee48:	4798      	blx	r3
    ee4a:	e004      	b.n	ee56 <common_tc_delay+0x3a>
    ee4c:	1882      	adds	r2, r0, r2
    ee4e:	4b0a      	ldr	r3, [pc, #40]	; (ee78 <common_tc_delay+0x5c>)
    ee50:	811a      	strh	r2, [r3, #8]
    ee52:	4b0b      	ldr	r3, [pc, #44]	; (ee80 <common_tc_delay+0x64>)
    ee54:	4798      	blx	r3
    ee56:	4b08      	ldr	r3, [pc, #32]	; (ee78 <common_tc_delay+0x5c>)
    ee58:	891b      	ldrh	r3, [r3, #8]
    ee5a:	2b63      	cmp	r3, #99	; 0x63
    ee5c:	d802      	bhi.n	ee64 <common_tc_delay+0x48>
    ee5e:	3364      	adds	r3, #100	; 0x64
    ee60:	4a05      	ldr	r2, [pc, #20]	; (ee78 <common_tc_delay+0x5c>)
    ee62:	8113      	strh	r3, [r2, #8]
    ee64:	4b04      	ldr	r3, [pc, #16]	; (ee78 <common_tc_delay+0x5c>)
    ee66:	8918      	ldrh	r0, [r3, #8]
    ee68:	4b06      	ldr	r3, [pc, #24]	; (ee84 <common_tc_delay+0x68>)
    ee6a:	4798      	blx	r3
    ee6c:	bd10      	pop	{r4, pc}
    ee6e:	46c0      	nop			; (mov r8, r8)
    ee70:	0000cd45 	.word	0x0000cd45
    ee74:	20001b7c 	.word	0x20001b7c
    ee78:	20001074 	.word	0x20001074
    ee7c:	0000cd59 	.word	0x0000cd59
    ee80:	0000cd6d 	.word	0x0000cd6d
    ee84:	0000cddd 	.word	0x0000cddd

0000ee88 <common_tc_init>:
    ee88:	b508      	push	{r3, lr}
    ee8a:	2200      	movs	r2, #0
    ee8c:	4b03      	ldr	r3, [pc, #12]	; (ee9c <common_tc_init+0x14>)
    ee8e:	701a      	strb	r2, [r3, #0]
    ee90:	4b03      	ldr	r3, [pc, #12]	; (eea0 <common_tc_init+0x18>)
    ee92:	4798      	blx	r3
    ee94:	4b03      	ldr	r3, [pc, #12]	; (eea4 <common_tc_init+0x1c>)
    ee96:	7018      	strb	r0, [r3, #0]
    ee98:	bd08      	pop	{r3, pc}
    ee9a:	46c0      	nop			; (mov r8, r8)
    ee9c:	20001074 	.word	0x20001074
    eea0:	0000ce31 	.word	0x0000ce31
    eea4:	20001b7c 	.word	0x20001b7c

0000eea8 <tmr_ovf_callback>:
    eea8:	b508      	push	{r3, lr}
    eeaa:	4b0e      	ldr	r3, [pc, #56]	; (eee4 <tmr_ovf_callback+0x3c>)
    eeac:	685b      	ldr	r3, [r3, #4]
    eeae:	2b00      	cmp	r3, #0
    eeb0:	d007      	beq.n	eec2 <tmr_ovf_callback+0x1a>
    eeb2:	4a0c      	ldr	r2, [pc, #48]	; (eee4 <tmr_ovf_callback+0x3c>)
    eeb4:	6853      	ldr	r3, [r2, #4]
    eeb6:	3b01      	subs	r3, #1
    eeb8:	6053      	str	r3, [r2, #4]
    eeba:	2b00      	cmp	r3, #0
    eebc:	d101      	bne.n	eec2 <tmr_ovf_callback+0x1a>
    eebe:	4b0a      	ldr	r3, [pc, #40]	; (eee8 <tmr_ovf_callback+0x40>)
    eec0:	4798      	blx	r3
    eec2:	4a08      	ldr	r2, [pc, #32]	; (eee4 <tmr_ovf_callback+0x3c>)
    eec4:	7813      	ldrb	r3, [r2, #0]
    eec6:	3301      	adds	r3, #1
    eec8:	b2db      	uxtb	r3, r3
    eeca:	7013      	strb	r3, [r2, #0]
    eecc:	4a07      	ldr	r2, [pc, #28]	; (eeec <tmr_ovf_callback+0x44>)
    eece:	7812      	ldrb	r2, [r2, #0]
    eed0:	429a      	cmp	r2, r3
    eed2:	d806      	bhi.n	eee2 <tmr_ovf_callback+0x3a>
    eed4:	4b03      	ldr	r3, [pc, #12]	; (eee4 <tmr_ovf_callback+0x3c>)
    eed6:	2200      	movs	r2, #0
    eed8:	701a      	strb	r2, [r3, #0]
    eeda:	68db      	ldr	r3, [r3, #12]
    eedc:	2b00      	cmp	r3, #0
    eede:	d000      	beq.n	eee2 <tmr_ovf_callback+0x3a>
    eee0:	4798      	blx	r3
    eee2:	bd08      	pop	{r3, pc}
    eee4:	20001074 	.word	0x20001074
    eee8:	0000cd6d 	.word	0x0000cd6d
    eeec:	20001b7c 	.word	0x20001b7c

0000eef0 <tmr_cca_callback>:
    eef0:	b508      	push	{r3, lr}
    eef2:	4b04      	ldr	r3, [pc, #16]	; (ef04 <tmr_cca_callback+0x14>)
    eef4:	4798      	blx	r3
    eef6:	4b04      	ldr	r3, [pc, #16]	; (ef08 <tmr_cca_callback+0x18>)
    eef8:	691b      	ldr	r3, [r3, #16]
    eefa:	2b00      	cmp	r3, #0
    eefc:	d000      	beq.n	ef00 <tmr_cca_callback+0x10>
    eefe:	4798      	blx	r3
    ef00:	bd08      	pop	{r3, pc}
    ef02:	46c0      	nop			; (mov r8, r8)
    ef04:	0000cd59 	.word	0x0000cd59
    ef08:	20001074 	.word	0x20001074

0000ef0c <set_common_tc_overflow_callback>:
    ef0c:	4b01      	ldr	r3, [pc, #4]	; (ef14 <set_common_tc_overflow_callback+0x8>)
    ef0e:	60d8      	str	r0, [r3, #12]
    ef10:	4770      	bx	lr
    ef12:	46c0      	nop			; (mov r8, r8)
    ef14:	20001074 	.word	0x20001074

0000ef18 <set_common_tc_expiry_callback>:
    ef18:	4b01      	ldr	r3, [pc, #4]	; (ef20 <set_common_tc_expiry_callback+0x8>)
    ef1a:	6118      	str	r0, [r3, #16]
    ef1c:	4770      	bx	lr
    ef1e:	46c0      	nop			; (mov r8, r8)
    ef20:	20001074 	.word	0x20001074

0000ef24 <MacClearCommands>:
    ef24:	490e      	ldr	r1, [pc, #56]	; (ef60 <MacClearCommands+0x3c>)
    ef26:	b570      	push	{r4, r5, r6, lr}
    ef28:	000b      	movs	r3, r1
    ef2a:	33ac      	adds	r3, #172	; 0xac
    ef2c:	7818      	ldrb	r0, [r3, #0]
    ef2e:	2303      	movs	r3, #3
    ef30:	25a4      	movs	r5, #164	; 0xa4
    ef32:	4343      	muls	r3, r0
    ef34:	2401      	movs	r4, #1
    ef36:	20ff      	movs	r0, #255	; 0xff
    ef38:	3365      	adds	r3, #101	; 0x65
    ef3a:	4a0a      	ldr	r2, [pc, #40]	; (ef64 <MacClearCommands+0x40>)
    ef3c:	185b      	adds	r3, r3, r1
    ef3e:	00ed      	lsls	r5, r5, #3
    ef40:	429a      	cmp	r2, r3
    ef42:	d100      	bne.n	ef46 <MacClearCommands+0x22>
    ef44:	bd70      	pop	{r4, r5, r6, pc}
    ef46:	7811      	ldrb	r1, [r2, #0]
    ef48:	29ff      	cmp	r1, #255	; 0xff
    ef4a:	d006      	beq.n	ef5a <MacClearCommands+0x36>
    ef4c:	290a      	cmp	r1, #10
    ef4e:	d803      	bhi.n	ef58 <MacClearCommands+0x34>
    ef50:	0026      	movs	r6, r4
    ef52:	408e      	lsls	r6, r1
    ef54:	422e      	tst	r6, r5
    ef56:	d100      	bne.n	ef5a <MacClearCommands+0x36>
    ef58:	7010      	strb	r0, [r2, #0]
    ef5a:	3203      	adds	r2, #3
    ef5c:	e7f0      	b.n	ef40 <MacClearCommands+0x1c>
    ef5e:	46c0      	nop			; (mov r8, r8)
    ef60:	20001ca4 	.word	0x20001ca4
    ef64:	20001d09 	.word	0x20001d09

0000ef68 <CountfOptsLength>:
    ef68:	2200      	movs	r2, #0
    ef6a:	490d      	ldr	r1, [pc, #52]	; (efa0 <CountfOptsLength+0x38>)
    ef6c:	b570      	push	{r4, r5, r6, lr}
    ef6e:	000b      	movs	r3, r1
    ef70:	0010      	movs	r0, r2
    ef72:	2503      	movs	r5, #3
    ef74:	33ac      	adds	r3, #172	; 0xac
    ef76:	781c      	ldrb	r4, [r3, #0]
    ef78:	4e0a      	ldr	r6, [pc, #40]	; (efa4 <CountfOptsLength+0x3c>)
    ef7a:	b2d3      	uxtb	r3, r2
    ef7c:	429c      	cmp	r4, r3
    ef7e:	d800      	bhi.n	ef82 <CountfOptsLength+0x1a>
    ef80:	bd70      	pop	{r4, r5, r6, pc}
    ef82:	002b      	movs	r3, r5
    ef84:	4353      	muls	r3, r2
    ef86:	3365      	adds	r3, #101	; 0x65
    ef88:	5ccb      	ldrb	r3, [r1, r3]
    ef8a:	2bff      	cmp	r3, #255	; 0xff
    ef8c:	d006      	beq.n	ef9c <CountfOptsLength+0x34>
    ef8e:	18f3      	adds	r3, r6, r3
    ef90:	3b02      	subs	r3, #2
    ef92:	781b      	ldrb	r3, [r3, #0]
    ef94:	18c3      	adds	r3, r0, r3
    ef96:	2b0f      	cmp	r3, #15
    ef98:	dcf2      	bgt.n	ef80 <CountfOptsLength+0x18>
    ef9a:	b2d8      	uxtb	r0, r3
    ef9c:	3201      	adds	r2, #1
    ef9e:	e7ec      	b.n	ef7a <CountfOptsLength+0x12>
    efa0:	20001ca4 	.word	0x20001ca4
    efa4:	0001f60b 	.word	0x0001f60b

0000efa8 <StopAllSoftwareTimers>:
    efa8:	b570      	push	{r4, r5, r6, lr}
    efaa:	4c17      	ldr	r4, [pc, #92]	; (f008 <StopAllSoftwareTimers+0x60>)
    efac:	4d17      	ldr	r5, [pc, #92]	; (f00c <StopAllSoftwareTimers+0x64>)
    efae:	0023      	movs	r3, r4
    efb0:	33b6      	adds	r3, #182	; 0xb6
    efb2:	7818      	ldrb	r0, [r3, #0]
    efb4:	47a8      	blx	r5
    efb6:	0023      	movs	r3, r4
    efb8:	33b7      	adds	r3, #183	; 0xb7
    efba:	7818      	ldrb	r0, [r3, #0]
    efbc:	47a8      	blx	r5
    efbe:	0023      	movs	r3, r4
    efc0:	33bb      	adds	r3, #187	; 0xbb
    efc2:	7818      	ldrb	r0, [r3, #0]
    efc4:	47a8      	blx	r5
    efc6:	0023      	movs	r3, r4
    efc8:	33b8      	adds	r3, #184	; 0xb8
    efca:	7818      	ldrb	r0, [r3, #0]
    efcc:	47a8      	blx	r5
    efce:	0023      	movs	r3, r4
    efd0:	33b9      	adds	r3, #185	; 0xb9
    efd2:	7818      	ldrb	r0, [r3, #0]
    efd4:	47a8      	blx	r5
    efd6:	0023      	movs	r3, r4
    efd8:	33bc      	adds	r3, #188	; 0xbc
    efda:	7818      	ldrb	r0, [r3, #0]
    efdc:	47a8      	blx	r5
    efde:	0023      	movs	r3, r4
    efe0:	33ba      	adds	r3, #186	; 0xba
    efe2:	7818      	ldrb	r0, [r3, #0]
    efe4:	47a8      	blx	r5
    efe6:	0023      	movs	r3, r4
    efe8:	33bd      	adds	r3, #189	; 0xbd
    efea:	7818      	ldrb	r0, [r3, #0]
    efec:	47a8      	blx	r5
    efee:	0023      	movs	r3, r4
    eff0:	33c6      	adds	r3, #198	; 0xc6
    eff2:	7818      	ldrb	r0, [r3, #0]
    eff4:	47a8      	blx	r5
    eff6:	0023      	movs	r3, r4
    eff8:	33c7      	adds	r3, #199	; 0xc7
    effa:	7818      	ldrb	r0, [r3, #0]
    effc:	34f0      	adds	r4, #240	; 0xf0
    effe:	47a8      	blx	r5
    f000:	7820      	ldrb	r0, [r4, #0]
    f002:	47a8      	blx	r5
    f004:	bd70      	pop	{r4, r5, r6, pc}
    f006:	46c0      	nop			; (mov r8, r8)
    f008:	20001ca4 	.word	0x20001ca4
    f00c:	0000c7b9 	.word	0x0000c7b9

0000f010 <LorawanGetMaxPayloadSize>:
    f010:	b513      	push	{r0, r1, r4, lr}
    f012:	466b      	mov	r3, sp
    f014:	1ddc      	adds	r4, r3, #7
    f016:	2300      	movs	r3, #0
    f018:	0022      	movs	r2, r4
    f01a:	7023      	strb	r3, [r4, #0]
    f01c:	4902      	ldr	r1, [pc, #8]	; (f028 <LorawanGetMaxPayloadSize+0x18>)
    f01e:	4b03      	ldr	r3, [pc, #12]	; (f02c <LorawanGetMaxPayloadSize+0x1c>)
    f020:	2005      	movs	r0, #5
    f022:	4798      	blx	r3
    f024:	7820      	ldrb	r0, [r4, #0]
    f026:	bd16      	pop	{r1, r2, r4, pc}
    f028:	20001d57 	.word	0x20001d57
    f02c:	0000b321 	.word	0x0000b321

0000f030 <UpdateReceiveDelays>:
    f030:	23fa      	movs	r3, #250	; 0xfa
    f032:	b570      	push	{r4, r5, r6, lr}
    f034:	009b      	lsls	r3, r3, #2
    f036:	4c0b      	ldr	r4, [pc, #44]	; (f064 <UpdateReceiveDelays+0x34>)
    f038:	2800      	cmp	r0, #0
    f03a:	d000      	beq.n	f03e <UpdateReceiveDelays+0xe>
    f03c:	4343      	muls	r3, r0
    f03e:	0022      	movs	r2, r4
    f040:	4d09      	ldr	r5, [pc, #36]	; (f068 <UpdateReceiveDelays+0x38>)
    f042:	329c      	adds	r2, #156	; 0x9c
    f044:	210c      	movs	r1, #12
    f046:	2000      	movs	r0, #0
    f048:	8013      	strh	r3, [r2, #0]
    f04a:	47a8      	blx	r5
    f04c:	0023      	movs	r3, r4
    f04e:	22fa      	movs	r2, #250	; 0xfa
    f050:	339c      	adds	r3, #156	; 0x9c
    f052:	881b      	ldrh	r3, [r3, #0]
    f054:	0092      	lsls	r2, r2, #2
    f056:	189b      	adds	r3, r3, r2
    f058:	349e      	adds	r4, #158	; 0x9e
    f05a:	210d      	movs	r1, #13
    f05c:	2000      	movs	r0, #0
    f05e:	8023      	strh	r3, [r4, #0]
    f060:	47a8      	blx	r5
    f062:	bd70      	pop	{r4, r5, r6, pc}
    f064:	20001ca4 	.word	0x20001ca4
    f068:	0000b745 	.word	0x0000b745

0000f06c <IncludeMacCommandsResponse>:
    f06c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f06e:	0005      	movs	r5, r0
    f070:	2600      	movs	r6, #0
    f072:	b087      	sub	sp, #28
    f074:	880c      	ldrh	r4, [r1, #0]
    f076:	9101      	str	r1, [sp, #4]
    f078:	9203      	str	r2, [sp, #12]
    f07a:	4a67      	ldr	r2, [pc, #412]	; (f218 <IncludeMacCommandsResponse+0x1ac>)
    f07c:	0013      	movs	r3, r2
    f07e:	33ac      	adds	r3, #172	; 0xac
    f080:	781b      	ldrb	r3, [r3, #0]
    f082:	42b3      	cmp	r3, r6
    f084:	d913      	bls.n	f0ae <IncludeMacCommandsResponse+0x42>
    f086:	9b03      	ldr	r3, [sp, #12]
    f088:	2b00      	cmp	r3, #0
    f08a:	d019      	beq.n	f0c0 <IncludeMacCommandsResponse+0x54>
    f08c:	2303      	movs	r3, #3
    f08e:	4373      	muls	r3, r6
    f090:	18d3      	adds	r3, r2, r3
    f092:	3365      	adds	r3, #101	; 0x65
    f094:	7818      	ldrb	r0, [r3, #0]
    f096:	28ff      	cmp	r0, #255	; 0xff
    f098:	d012      	beq.n	f0c0 <IncludeMacCommandsResponse+0x54>
    f09a:	9b01      	ldr	r3, [sp, #4]
    f09c:	8819      	ldrh	r1, [r3, #0]
    f09e:	4b5f      	ldr	r3, [pc, #380]	; (f21c <IncludeMacCommandsResponse+0x1b0>)
    f0a0:	1a61      	subs	r1, r4, r1
    f0a2:	181b      	adds	r3, r3, r0
    f0a4:	3b02      	subs	r3, #2
    f0a6:	781b      	ldrb	r3, [r3, #0]
    f0a8:	18cb      	adds	r3, r1, r3
    f0aa:	2b0f      	cmp	r3, #15
    f0ac:	dd08      	ble.n	f0c0 <IncludeMacCommandsResponse+0x54>
    f0ae:	2207      	movs	r2, #7
    f0b0:	2100      	movs	r1, #0
    f0b2:	4b5b      	ldr	r3, [pc, #364]	; (f220 <IncludeMacCommandsResponse+0x1b4>)
    f0b4:	485b      	ldr	r0, [pc, #364]	; (f224 <IncludeMacCommandsResponse+0x1b8>)
    f0b6:	4798      	blx	r3
    f0b8:	9b01      	ldr	r3, [sp, #4]
    f0ba:	801c      	strh	r4, [r3, #0]
    f0bc:	b007      	add	sp, #28
    f0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f0c0:	2303      	movs	r3, #3
    f0c2:	4373      	muls	r3, r6
    f0c4:	18d3      	adds	r3, r2, r3
    f0c6:	3365      	adds	r3, #101	; 0x65
    f0c8:	7819      	ldrb	r1, [r3, #0]
    f0ca:	1e88      	subs	r0, r1, #2
    f0cc:	2808      	cmp	r0, #8
    f0ce:	d862      	bhi.n	f196 <IncludeMacCommandsResponse+0x12a>
    f0d0:	1c63      	adds	r3, r4, #1
    f0d2:	f005 fd39 	bl	14b48 <__gnu_thumb1_case_uqi>
    f0d6:	0594      	.short	0x0594
    f0d8:	6646269e 	.word	0x6646269e
    f0dc:	7b9e      	.short	0x7b9e
    f0de:	7f          	.byte	0x7f
    f0df:	00          	.byte	0x00
    f0e0:	2203      	movs	r2, #3
    f0e2:	2024      	movs	r0, #36	; 0x24
    f0e4:	552a      	strb	r2, [r5, r4]
    f0e6:	2200      	movs	r2, #0
    f0e8:	b29b      	uxth	r3, r3
    f0ea:	18eb      	adds	r3, r5, r3
    f0ec:	4f4a      	ldr	r7, [pc, #296]	; (f218 <IncludeMacCommandsResponse+0x1ac>)
    f0ee:	701a      	strb	r2, [r3, #0]
    f0f0:	30ff      	adds	r0, #255	; 0xff
    f0f2:	5c39      	ldrb	r1, [r7, r0]
    f0f4:	3201      	adds	r2, #1
    f0f6:	4011      	ands	r1, r2
    f0f8:	466a      	mov	r2, sp
    f0fa:	9102      	str	r1, [sp, #8]
    f0fc:	7a12      	ldrb	r2, [r2, #8]
    f0fe:	701a      	strb	r2, [r3, #0]
    f100:	5c3a      	ldrb	r2, [r7, r0]
    f102:	4694      	mov	ip, r2
    f104:	2202      	movs	r2, #2
    f106:	4661      	mov	r1, ip
    f108:	4211      	tst	r1, r2
    f10a:	d002      	beq.n	f112 <IncludeMacCommandsResponse+0xa6>
    f10c:	9902      	ldr	r1, [sp, #8]
    f10e:	430a      	orrs	r2, r1
    f110:	701a      	strb	r2, [r3, #0]
    f112:	2204      	movs	r2, #4
    f114:	5c39      	ldrb	r1, [r7, r0]
    f116:	4211      	tst	r1, r2
    f118:	d06e      	beq.n	f1f8 <IncludeMacCommandsResponse+0x18c>
    f11a:	7819      	ldrb	r1, [r3, #0]
    f11c:	430a      	orrs	r2, r1
    f11e:	701a      	strb	r2, [r3, #0]
    f120:	e06a      	b.n	f1f8 <IncludeMacCommandsResponse+0x18c>
    f122:	2205      	movs	r2, #5
    f124:	2103      	movs	r1, #3
    f126:	552a      	strb	r2, [r5, r4]
    f128:	2200      	movs	r2, #0
    f12a:	b29b      	uxth	r3, r3
    f12c:	4371      	muls	r1, r6
    f12e:	18eb      	adds	r3, r5, r3
    f130:	701a      	strb	r2, [r3, #0]
    f132:	4a39      	ldr	r2, [pc, #228]	; (f218 <IncludeMacCommandsResponse+0x1ac>)
    f134:	1851      	adds	r1, r2, r1
    f136:	3160      	adds	r1, #96	; 0x60
    f138:	7988      	ldrb	r0, [r1, #6]
    f13a:	0700      	lsls	r0, r0, #28
    f13c:	0fc0      	lsrs	r0, r0, #31
    f13e:	7018      	strb	r0, [r3, #0]
    f140:	7989      	ldrb	r1, [r1, #6]
    f142:	b2c7      	uxtb	r7, r0
    f144:	06c9      	lsls	r1, r1, #27
    f146:	d502      	bpl.n	f14e <IncludeMacCommandsResponse+0xe2>
    f148:	2102      	movs	r1, #2
    f14a:	4339      	orrs	r1, r7
    f14c:	7019      	strb	r1, [r3, #0]
    f14e:	2103      	movs	r1, #3
    f150:	4371      	muls	r1, r6
    f152:	1852      	adds	r2, r2, r1
    f154:	3260      	adds	r2, #96	; 0x60
    f156:	7992      	ldrb	r2, [r2, #6]
    f158:	0692      	lsls	r2, r2, #26
    f15a:	d54d      	bpl.n	f1f8 <IncludeMacCommandsResponse+0x18c>
    f15c:	7819      	ldrb	r1, [r3, #0]
    f15e:	2204      	movs	r2, #4
    f160:	e7dc      	b.n	f11c <IncludeMacCommandsResponse+0xb0>
    f162:	ab04      	add	r3, sp, #16
    f164:	1ddf      	adds	r7, r3, #7
    f166:	0039      	movs	r1, r7
    f168:	4b2f      	ldr	r3, [pc, #188]	; (f228 <IncludeMacCommandsResponse+0x1bc>)
    f16a:	200e      	movs	r0, #14
    f16c:	4798      	blx	r3
    f16e:	2306      	movs	r3, #6
    f170:	4a29      	ldr	r2, [pc, #164]	; (f218 <IncludeMacCommandsResponse+0x1ac>)
    f172:	552b      	strb	r3, [r5, r4]
    f174:	32b4      	adds	r2, #180	; 0xb4
    f176:	7811      	ldrb	r1, [r2, #0]
    f178:	1c62      	adds	r2, r4, #1
    f17a:	b292      	uxth	r2, r2
    f17c:	54a9      	strb	r1, [r5, r2]
    f17e:	783a      	ldrb	r2, [r7, #0]
    f180:	1ca3      	adds	r3, r4, #2
    f182:	0011      	movs	r1, r2
    f184:	3120      	adds	r1, #32
    f186:	3403      	adds	r4, #3
    f188:	b2c9      	uxtb	r1, r1
    f18a:	b29b      	uxth	r3, r3
    f18c:	b2a4      	uxth	r4, r4
    f18e:	293f      	cmp	r1, #63	; 0x3f
    f190:	d904      	bls.n	f19c <IncludeMacCommandsResponse+0x130>
    f192:	2220      	movs	r2, #32
    f194:	54ea      	strb	r2, [r5, r3]
    f196:	3601      	adds	r6, #1
    f198:	b2f6      	uxtb	r6, r6
    f19a:	e76e      	b.n	f07a <IncludeMacCommandsResponse+0xe>
    f19c:	213f      	movs	r1, #63	; 0x3f
    f19e:	400a      	ands	r2, r1
    f1a0:	e7f8      	b.n	f194 <IncludeMacCommandsResponse+0x128>
    f1a2:	2207      	movs	r2, #7
    f1a4:	2103      	movs	r1, #3
    f1a6:	552a      	strb	r2, [r5, r4]
    f1a8:	2200      	movs	r2, #0
    f1aa:	4371      	muls	r1, r6
    f1ac:	b29b      	uxth	r3, r3
    f1ae:	18eb      	adds	r3, r5, r3
    f1b0:	701a      	strb	r2, [r3, #0]
    f1b2:	4a19      	ldr	r2, [pc, #100]	; (f218 <IncludeMacCommandsResponse+0x1ac>)
    f1b4:	1852      	adds	r2, r2, r1
    f1b6:	3260      	adds	r2, #96	; 0x60
    f1b8:	7991      	ldrb	r1, [r2, #6]
    f1ba:	09c9      	lsrs	r1, r1, #7
    f1bc:	7019      	strb	r1, [r3, #0]
    f1be:	7992      	ldrb	r2, [r2, #6]
    f1c0:	b2c8      	uxtb	r0, r1
    f1c2:	0652      	lsls	r2, r2, #25
    f1c4:	d518      	bpl.n	f1f8 <IncludeMacCommandsResponse+0x18c>
    f1c6:	2202      	movs	r2, #2
    f1c8:	4302      	orrs	r2, r0
    f1ca:	e7a8      	b.n	f11e <IncludeMacCommandsResponse+0xb2>
    f1cc:	2209      	movs	r2, #9
    f1ce:	552a      	strb	r2, [r5, r4]
    f1d0:	b29c      	uxth	r4, r3
    f1d2:	e7e0      	b.n	f196 <IncludeMacCommandsResponse+0x12a>
    f1d4:	220a      	movs	r2, #10
    f1d6:	2103      	movs	r1, #3
    f1d8:	552a      	strb	r2, [r5, r4]
    f1da:	2200      	movs	r2, #0
    f1dc:	4371      	muls	r1, r6
    f1de:	b29b      	uxth	r3, r3
    f1e0:	18eb      	adds	r3, r5, r3
    f1e2:	701a      	strb	r2, [r3, #0]
    f1e4:	4a0c      	ldr	r2, [pc, #48]	; (f218 <IncludeMacCommandsResponse+0x1ac>)
    f1e6:	1852      	adds	r2, r2, r1
    f1e8:	3260      	adds	r2, #96	; 0x60
    f1ea:	7991      	ldrb	r1, [r2, #6]
    f1ec:	09c9      	lsrs	r1, r1, #7
    f1ee:	7019      	strb	r1, [r3, #0]
    f1f0:	79d2      	ldrb	r2, [r2, #7]
    f1f2:	b2c8      	uxtb	r0, r1
    f1f4:	07d2      	lsls	r2, r2, #31
    f1f6:	d4e6      	bmi.n	f1c6 <IncludeMacCommandsResponse+0x15a>
    f1f8:	3402      	adds	r4, #2
    f1fa:	b2a4      	uxth	r4, r4
    f1fc:	e7cb      	b.n	f196 <IncludeMacCommandsResponse+0x12a>
    f1fe:	0013      	movs	r3, r2
    f200:	21ff      	movs	r1, #255	; 0xff
    f202:	33b1      	adds	r3, #177	; 0xb1
    f204:	7019      	strb	r1, [r3, #0]
    f206:	2300      	movs	r3, #0
    f208:	32b2      	adds	r2, #178	; 0xb2
    f20a:	7013      	strb	r3, [r2, #0]
    f20c:	1c63      	adds	r3, r4, #1
    f20e:	2202      	movs	r2, #2
    f210:	e7dd      	b.n	f1ce <IncludeMacCommandsResponse+0x162>
    f212:	5529      	strb	r1, [r5, r4]
    f214:	e7dc      	b.n	f1d0 <IncludeMacCommandsResponse+0x164>
    f216:	46c0      	nop			; (mov r8, r8)
    f218:	20001ca4 	.word	0x20001ca4
    f21c:	0001f60b 	.word	0x0001f60b
    f220:	00018219 	.word	0x00018219
    f224:	20001dc7 	.word	0x20001dc7
    f228:	000130e9 	.word	0x000130e9

0000f22c <UpdateJoinSuccessState>:
    f22c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f22e:	4c22      	ldr	r4, [pc, #136]	; (f2b8 <UpdateJoinSuccessState+0x8c>)
    f230:	2104      	movs	r1, #4
    f232:	0022      	movs	r2, r4
    f234:	0026      	movs	r6, r4
    f236:	2701      	movs	r7, #1
    f238:	2500      	movs	r5, #0
    f23a:	3260      	adds	r2, #96	; 0x60
    f23c:	7813      	ldrb	r3, [r2, #0]
    f23e:	3650      	adds	r6, #80	; 0x50
    f240:	438b      	bics	r3, r1
    f242:	7013      	strb	r3, [r2, #0]
    f244:	7833      	ldrb	r3, [r6, #0]
    f246:	3107      	adds	r1, #7
    f248:	433b      	orrs	r3, r7
    f24a:	7033      	strb	r3, [r6, #0]
    f24c:	0038      	movs	r0, r7
    f24e:	4b1b      	ldr	r3, [pc, #108]	; (f2bc <UpdateJoinSuccessState+0x90>)
    f250:	4798      	blx	r3
    f252:	2116      	movs	r1, #22
    f254:	4b19      	ldr	r3, [pc, #100]	; (f2bc <UpdateJoinSuccessState+0x90>)
    f256:	0028      	movs	r0, r5
    f258:	6565      	str	r5, [r4, #84]	; 0x54
    f25a:	4798      	blx	r3
    f25c:	4b17      	ldr	r3, [pc, #92]	; (f2bc <UpdateJoinSuccessState+0x90>)
    f25e:	210a      	movs	r1, #10
    f260:	0038      	movs	r0, r7
    f262:	65a5      	str	r5, [r4, #88]	; 0x58
    f264:	4798      	blx	r3
    f266:	0023      	movs	r3, r4
    f268:	3396      	adds	r3, #150	; 0x96
    f26a:	801d      	strh	r5, [r3, #0]
    f26c:	0023      	movs	r3, r4
    f26e:	220e      	movs	r2, #14
    f270:	33c1      	adds	r3, #193	; 0xc1
    f272:	701d      	strb	r5, [r3, #0]
    f274:	7833      	ldrb	r3, [r6, #0]
    f276:	4393      	bics	r3, r2
    f278:	7033      	strb	r3, [r6, #0]
    f27a:	0023      	movs	r3, r4
    f27c:	3351      	adds	r3, #81	; 0x51
    f27e:	781b      	ldrb	r3, [r3, #0]
    f280:	079b      	lsls	r3, r3, #30
    f282:	d50a      	bpl.n	f29a <UpdateJoinSuccessState+0x6e>
    f284:	21fa      	movs	r1, #250	; 0xfa
    f286:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    f288:	0089      	lsls	r1, r1, #2
    f28a:	34bb      	adds	r4, #187	; 0xbb
    f28c:	7820      	ldrb	r0, [r4, #0]
    f28e:	4359      	muls	r1, r3
    f290:	9500      	str	r5, [sp, #0]
    f292:	4b0b      	ldr	r3, [pc, #44]	; (f2c0 <UpdateJoinSuccessState+0x94>)
    f294:	002a      	movs	r2, r5
    f296:	4c0b      	ldr	r4, [pc, #44]	; (f2c4 <UpdateJoinSuccessState+0x98>)
    f298:	47a0      	blx	r4
    f29a:	490b      	ldr	r1, [pc, #44]	; (f2c8 <UpdateJoinSuccessState+0x9c>)
    f29c:	794a      	ldrb	r2, [r1, #5]
    f29e:	790b      	ldrb	r3, [r1, #4]
    f2a0:	0212      	lsls	r2, r2, #8
    f2a2:	431a      	orrs	r2, r3
    f2a4:	798b      	ldrb	r3, [r1, #6]
    f2a6:	041b      	lsls	r3, r3, #16
    f2a8:	431a      	orrs	r2, r3
    f2aa:	79cb      	ldrb	r3, [r1, #7]
    f2ac:	061b      	lsls	r3, r3, #24
    f2ae:	4313      	orrs	r3, r2
    f2b0:	d001      	beq.n	f2b6 <UpdateJoinSuccessState+0x8a>
    f2b2:	2001      	movs	r0, #1
    f2b4:	4798      	blx	r3
    f2b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    f2b8:	20001ca4 	.word	0x20001ca4
    f2bc:	0000b745 	.word	0x0000b745
    f2c0:	0000f3c9 	.word	0x0000f3c9
    f2c4:	0000c4b5 	.word	0x0000c4b5
    f2c8:	20001ee4 	.word	0x20001ee4

0000f2cc <PrepareSessionKeys>:
    f2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f2ce:	0004      	movs	r4, r0
    f2d0:	2603      	movs	r6, #3
    f2d2:	000d      	movs	r5, r1
    f2d4:	0017      	movs	r7, r2
    f2d6:	4b09      	ldr	r3, [pc, #36]	; (f2fc <PrepareSessionKeys+0x30>)
    f2d8:	2210      	movs	r2, #16
    f2da:	2100      	movs	r1, #0
    f2dc:	4798      	blx	r3
    f2de:	0032      	movs	r2, r6
    f2e0:	0029      	movs	r1, r5
    f2e2:	1c60      	adds	r0, r4, #1
    f2e4:	4d06      	ldr	r5, [pc, #24]	; (f300 <PrepareSessionKeys+0x34>)
    f2e6:	47a8      	blx	r5
    f2e8:	0032      	movs	r2, r6
    f2ea:	0039      	movs	r1, r7
    f2ec:	1d20      	adds	r0, r4, #4
    f2ee:	47a8      	blx	r5
    f2f0:	1de0      	adds	r0, r4, #7
    f2f2:	2202      	movs	r2, #2
    f2f4:	4903      	ldr	r1, [pc, #12]	; (f304 <PrepareSessionKeys+0x38>)
    f2f6:	47a8      	blx	r5
    f2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f2fa:	46c0      	nop			; (mov r8, r8)
    f2fc:	00018219 	.word	0x00018219
    f300:	00018195 	.word	0x00018195
    f304:	20001d3c 	.word	0x20001d3c

0000f308 <AssembleEncryptionBlock>:
    f308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f30a:	001e      	movs	r6, r3
    f30c:	4c0b      	ldr	r4, [pc, #44]	; (f33c <AssembleEncryptionBlock+0x34>)
    f30e:	0017      	movs	r7, r2
    f310:	4b0b      	ldr	r3, [pc, #44]	; (f340 <AssembleEncryptionBlock+0x38>)
    f312:	0005      	movs	r5, r0
    f314:	9101      	str	r1, [sp, #4]
    f316:	2210      	movs	r2, #16
    f318:	2100      	movs	r1, #0
    f31a:	0020      	movs	r0, r4
    f31c:	4798      	blx	r3
    f31e:	7026      	strb	r6, [r4, #0]
    f320:	2604      	movs	r6, #4
    f322:	7165      	strb	r5, [r4, #5]
    f324:	0032      	movs	r2, r6
    f326:	4d07      	ldr	r5, [pc, #28]	; (f344 <AssembleEncryptionBlock+0x3c>)
    f328:	a908      	add	r1, sp, #32
    f32a:	1da0      	adds	r0, r4, #6
    f32c:	47a8      	blx	r5
    f32e:	0020      	movs	r0, r4
    f330:	0032      	movs	r2, r6
    f332:	a901      	add	r1, sp, #4
    f334:	300a      	adds	r0, #10
    f336:	47a8      	blx	r5
    f338:	73e7      	strb	r7, [r4, #15]
    f33a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    f33c:	20001088 	.word	0x20001088
    f340:	00018219 	.word	0x00018219
    f344:	00018195 	.word	0x00018195

0000f348 <ConfigureRadio>:
    f348:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f34a:	0001      	movs	r1, r0
    f34c:	0005      	movs	r5, r0
    f34e:	4c11      	ldr	r4, [pc, #68]	; (f394 <ConfigureRadio+0x4c>)
    f350:	3109      	adds	r1, #9
    f352:	2009      	movs	r0, #9
    f354:	47a0      	blx	r4
    f356:	0029      	movs	r1, r5
    f358:	2001      	movs	r0, #1
    f35a:	47a0      	blx	r4
    f35c:	1d29      	adds	r1, r5, #4
    f35e:	200a      	movs	r0, #10
    f360:	47a0      	blx	r4
    f362:	7a6b      	ldrb	r3, [r5, #9]
    f364:	2b01      	cmp	r3, #1
    f366:	d10b      	bne.n	f380 <ConfigureRadio+0x38>
    f368:	0029      	movs	r1, r5
    f36a:	2016      	movs	r0, #22
    f36c:	310b      	adds	r1, #11
    f36e:	47a0      	blx	r4
    f370:	0029      	movs	r1, r5
    f372:	2007      	movs	r0, #7
    f374:	310a      	adds	r1, #10
    f376:	47a0      	blx	r4
    f378:	2000      	movs	r0, #0
    f37a:	4907      	ldr	r1, [pc, #28]	; (f398 <ConfigureRadio+0x50>)
    f37c:	47a0      	blx	r4
    f37e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    f380:	466b      	mov	r3, sp
    f382:	1dd9      	adds	r1, r3, #7
    f384:	2303      	movs	r3, #3
    f386:	2013      	movs	r0, #19
    f388:	700b      	strb	r3, [r1, #0]
    f38a:	47a0      	blx	r4
    f38c:	4903      	ldr	r1, [pc, #12]	; (f39c <ConfigureRadio+0x54>)
    f38e:	2012      	movs	r0, #18
    f390:	e7f4      	b.n	f37c <ConfigureRadio+0x34>
    f392:	46c0      	nop			; (mov r8, r8)
    f394:	000131d5 	.word	0x000131d5
    f398:	20001d6f 	.word	0x20001d6f
    f39c:	0001f608 	.word	0x0001f608

0000f3a0 <LorawanLinkCheckCallback.part.1>:
    f3a0:	b513      	push	{r0, r1, r4, lr}
    f3a2:	21fa      	movs	r1, #250	; 0xfa
    f3a4:	4b05      	ldr	r3, [pc, #20]	; (f3bc <LorawanLinkCheckCallback.part.1+0x1c>)
    f3a6:	0089      	lsls	r1, r1, #2
    f3a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    f3aa:	33bb      	adds	r3, #187	; 0xbb
    f3ac:	4351      	muls	r1, r2
    f3ae:	2200      	movs	r2, #0
    f3b0:	7818      	ldrb	r0, [r3, #0]
    f3b2:	4c03      	ldr	r4, [pc, #12]	; (f3c0 <LorawanLinkCheckCallback.part.1+0x20>)
    f3b4:	9200      	str	r2, [sp, #0]
    f3b6:	4b03      	ldr	r3, [pc, #12]	; (f3c4 <LorawanLinkCheckCallback.part.1+0x24>)
    f3b8:	47a0      	blx	r4
    f3ba:	bd13      	pop	{r0, r1, r4, pc}
    f3bc:	20001ca4 	.word	0x20001ca4
    f3c0:	0000c4b5 	.word	0x0000c4b5
    f3c4:	0000f3c9 	.word	0x0000f3c9

0000f3c8 <LorawanLinkCheckCallback>:
    f3c8:	4b17      	ldr	r3, [pc, #92]	; (f428 <LorawanLinkCheckCallback+0x60>)
    f3ca:	20a0      	movs	r0, #160	; 0xa0
    f3cc:	001a      	movs	r2, r3
    f3ce:	2180      	movs	r1, #128	; 0x80
    f3d0:	b510      	push	{r4, lr}
    f3d2:	3250      	adds	r2, #80	; 0x50
    f3d4:	8812      	ldrh	r2, [r2, #0]
    f3d6:	0080      	lsls	r0, r0, #2
    f3d8:	0089      	lsls	r1, r1, #2
    f3da:	4002      	ands	r2, r0
    f3dc:	428a      	cmp	r2, r1
    f3de:	d11c      	bne.n	f41a <LorawanLinkCheckCallback+0x52>
    f3e0:	001a      	movs	r2, r3
    f3e2:	32ac      	adds	r2, #172	; 0xac
    f3e4:	7810      	ldrb	r0, [r2, #0]
    f3e6:	2403      	movs	r4, #3
    f3e8:	2200      	movs	r2, #0
    f3ea:	b2d1      	uxtb	r1, r2
    f3ec:	4281      	cmp	r1, r0
    f3ee:	d30d      	bcc.n	f40c <LorawanLinkCheckCallback+0x44>
    f3f0:	d113      	bne.n	f41a <LorawanLinkCheckCallback+0x52>
    f3f2:	2203      	movs	r2, #3
    f3f4:	434a      	muls	r2, r1
    f3f6:	2102      	movs	r1, #2
    f3f8:	189a      	adds	r2, r3, r2
    f3fa:	3265      	adds	r2, #101	; 0x65
    f3fc:	7011      	strb	r1, [r2, #0]
    f3fe:	280f      	cmp	r0, #15
    f400:	d80b      	bhi.n	f41a <LorawanLinkCheckCallback+0x52>
    f402:	001a      	movs	r2, r3
    f404:	3001      	adds	r0, #1
    f406:	32ac      	adds	r2, #172	; 0xac
    f408:	7010      	strb	r0, [r2, #0]
    f40a:	e006      	b.n	f41a <LorawanLinkCheckCallback+0x52>
    f40c:	0021      	movs	r1, r4
    f40e:	3201      	adds	r2, #1
    f410:	4351      	muls	r1, r2
    f412:	3162      	adds	r1, #98	; 0x62
    f414:	5c59      	ldrb	r1, [r3, r1]
    f416:	2902      	cmp	r1, #2
    f418:	d1e7      	bne.n	f3ea <LorawanLinkCheckCallback+0x22>
    f41a:	3351      	adds	r3, #81	; 0x51
    f41c:	781b      	ldrb	r3, [r3, #0]
    f41e:	079b      	lsls	r3, r3, #30
    f420:	d501      	bpl.n	f426 <LorawanLinkCheckCallback+0x5e>
    f422:	4b02      	ldr	r3, [pc, #8]	; (f42c <LorawanLinkCheckCallback+0x64>)
    f424:	4798      	blx	r3
    f426:	bd10      	pop	{r4, pc}
    f428:	20001ca4 	.word	0x20001ca4
    f42c:	0000f3a1 	.word	0x0000f3a1

0000f430 <LORAWAN_Init>:
    f430:	2270      	movs	r2, #112	; 0x70
    f432:	b5f0      	push	{r4, r5, r6, r7, lr}
    f434:	4b3e      	ldr	r3, [pc, #248]	; (f530 <LORAWAN_Init+0x100>)
    f436:	b087      	sub	sp, #28
    f438:	781b      	ldrb	r3, [r3, #0]
    f43a:	0005      	movs	r5, r0
    f43c:	011b      	lsls	r3, r3, #4
    f43e:	4013      	ands	r3, r2
    f440:	4a3c      	ldr	r2, [pc, #240]	; (f534 <LORAWAN_Init+0x104>)
    f442:	000e      	movs	r6, r1
    f444:	7812      	ldrb	r2, [r2, #0]
    f446:	0912      	lsrs	r2, r2, #4
    f448:	4313      	orrs	r3, r2
    f44a:	2b1f      	cmp	r3, #31
    f44c:	d000      	beq.n	f450 <LORAWAN_Init+0x20>
    f44e:	e7fe      	b.n	f44e <LORAWAN_Init+0x1e>
    f450:	4f39      	ldr	r7, [pc, #228]	; (f538 <LORAWAN_Init+0x108>)
    f452:	003b      	movs	r3, r7
    f454:	33c3      	adds	r3, #195	; 0xc3
    f456:	781b      	ldrb	r3, [r3, #0]
    f458:	2b00      	cmp	r3, #0
    f45a:	d166      	bne.n	f52a <LORAWAN_Init+0xfa>
    f45c:	4837      	ldr	r0, [pc, #220]	; (f53c <LORAWAN_Init+0x10c>)
    f45e:	4c38      	ldr	r4, [pc, #224]	; (f540 <LORAWAN_Init+0x110>)
    f460:	47a0      	blx	r4
    f462:	2808      	cmp	r0, #8
    f464:	d034      	beq.n	f4d0 <LORAWAN_Init+0xa0>
    f466:	4b37      	ldr	r3, [pc, #220]	; (f544 <LORAWAN_Init+0x114>)
    f468:	4798      	blx	r3
    f46a:	37c3      	adds	r7, #195	; 0xc3
    f46c:	783b      	ldrb	r3, [r7, #0]
    f46e:	2b00      	cmp	r3, #0
    f470:	d018      	beq.n	f4a4 <LORAWAN_Init+0x74>
    f472:	4b35      	ldr	r3, [pc, #212]	; (f548 <LORAWAN_Init+0x118>)
    f474:	0a2a      	lsrs	r2, r5, #8
    f476:	705a      	strb	r2, [r3, #1]
    f478:	0c2a      	lsrs	r2, r5, #16
    f47a:	709a      	strb	r2, [r3, #2]
    f47c:	0a32      	lsrs	r2, r6, #8
    f47e:	701d      	strb	r5, [r3, #0]
    f480:	711e      	strb	r6, [r3, #4]
    f482:	715a      	strb	r2, [r3, #5]
    f484:	0e2d      	lsrs	r5, r5, #24
    f486:	0c32      	lsrs	r2, r6, #16
    f488:	0e36      	lsrs	r6, r6, #24
    f48a:	719a      	strb	r2, [r3, #6]
    f48c:	70dd      	strb	r5, [r3, #3]
    f48e:	71de      	strb	r6, [r3, #7]
    f490:	4b2e      	ldr	r3, [pc, #184]	; (f54c <LORAWAN_Init+0x11c>)
    f492:	4798      	blx	r3
    f494:	492e      	ldr	r1, [pc, #184]	; (f550 <LORAWAN_Init+0x120>)
    f496:	4b2f      	ldr	r3, [pc, #188]	; (f554 <LORAWAN_Init+0x124>)
    f498:	201a      	movs	r0, #26
    f49a:	4798      	blx	r3
    f49c:	4b2e      	ldr	r3, [pc, #184]	; (f558 <LORAWAN_Init+0x128>)
    f49e:	4798      	blx	r3
    f4a0:	4b2e      	ldr	r3, [pc, #184]	; (f55c <LORAWAN_Init+0x12c>)
    f4a2:	4798      	blx	r3
    f4a4:	2317      	movs	r3, #23
    f4a6:	ac02      	add	r4, sp, #8
    f4a8:	7123      	strb	r3, [r4, #4]
    f4aa:	4b2d      	ldr	r3, [pc, #180]	; (f560 <LORAWAN_Init+0x130>)
    f4ac:	9a03      	ldr	r2, [sp, #12]
    f4ae:	9300      	str	r3, [sp, #0]
    f4b0:	4d2c      	ldr	r5, [pc, #176]	; (f564 <LORAWAN_Init+0x134>)
    f4b2:	492d      	ldr	r1, [pc, #180]	; (f568 <LORAWAN_Init+0x138>)
    f4b4:	4b2d      	ldr	r3, [pc, #180]	; (f56c <LORAWAN_Init+0x13c>)
    f4b6:	2000      	movs	r0, #0
    f4b8:	47a8      	blx	r5
    f4ba:	230d      	movs	r3, #13
    f4bc:	7123      	strb	r3, [r4, #4]
    f4be:	4b2c      	ldr	r3, [pc, #176]	; (f570 <LORAWAN_Init+0x140>)
    f4c0:	492c      	ldr	r1, [pc, #176]	; (f574 <LORAWAN_Init+0x144>)
    f4c2:	9300      	str	r3, [sp, #0]
    f4c4:	6862      	ldr	r2, [r4, #4]
    f4c6:	4b2c      	ldr	r3, [pc, #176]	; (f578 <LORAWAN_Init+0x148>)
    f4c8:	2001      	movs	r0, #1
    f4ca:	47a8      	blx	r5
    f4cc:	b007      	add	sp, #28
    f4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4d0:	482a      	ldr	r0, [pc, #168]	; (f57c <LORAWAN_Init+0x14c>)
    f4d2:	47a0      	blx	r4
    f4d4:	2808      	cmp	r0, #8
    f4d6:	d1c6      	bne.n	f466 <LORAWAN_Init+0x36>
    f4d8:	4829      	ldr	r0, [pc, #164]	; (f580 <LORAWAN_Init+0x150>)
    f4da:	47a0      	blx	r4
    f4dc:	2808      	cmp	r0, #8
    f4de:	d1c2      	bne.n	f466 <LORAWAN_Init+0x36>
    f4e0:	4828      	ldr	r0, [pc, #160]	; (f584 <LORAWAN_Init+0x154>)
    f4e2:	47a0      	blx	r4
    f4e4:	2808      	cmp	r0, #8
    f4e6:	d1be      	bne.n	f466 <LORAWAN_Init+0x36>
    f4e8:	4827      	ldr	r0, [pc, #156]	; (f588 <LORAWAN_Init+0x158>)
    f4ea:	47a0      	blx	r4
    f4ec:	2808      	cmp	r0, #8
    f4ee:	d1ba      	bne.n	f466 <LORAWAN_Init+0x36>
    f4f0:	4826      	ldr	r0, [pc, #152]	; (f58c <LORAWAN_Init+0x15c>)
    f4f2:	47a0      	blx	r4
    f4f4:	2808      	cmp	r0, #8
    f4f6:	d1b6      	bne.n	f466 <LORAWAN_Init+0x36>
    f4f8:	4825      	ldr	r0, [pc, #148]	; (f590 <LORAWAN_Init+0x160>)
    f4fa:	47a0      	blx	r4
    f4fc:	2808      	cmp	r0, #8
    f4fe:	d1b2      	bne.n	f466 <LORAWAN_Init+0x36>
    f500:	4824      	ldr	r0, [pc, #144]	; (f594 <LORAWAN_Init+0x164>)
    f502:	47a0      	blx	r4
    f504:	2808      	cmp	r0, #8
    f506:	d1ae      	bne.n	f466 <LORAWAN_Init+0x36>
    f508:	4823      	ldr	r0, [pc, #140]	; (f598 <LORAWAN_Init+0x168>)
    f50a:	47a0      	blx	r4
    f50c:	2808      	cmp	r0, #8
    f50e:	d1aa      	bne.n	f466 <LORAWAN_Init+0x36>
    f510:	4822      	ldr	r0, [pc, #136]	; (f59c <LORAWAN_Init+0x16c>)
    f512:	47a0      	blx	r4
    f514:	2808      	cmp	r0, #8
    f516:	d1a6      	bne.n	f466 <LORAWAN_Init+0x36>
    f518:	4821      	ldr	r0, [pc, #132]	; (f5a0 <LORAWAN_Init+0x170>)
    f51a:	47a0      	blx	r4
    f51c:	2808      	cmp	r0, #8
    f51e:	d1a2      	bne.n	f466 <LORAWAN_Init+0x36>
    f520:	003b      	movs	r3, r7
    f522:	2201      	movs	r2, #1
    f524:	33c3      	adds	r3, #195	; 0xc3
    f526:	701a      	strb	r2, [r3, #0]
    f528:	e79f      	b.n	f46a <LORAWAN_Init+0x3a>
    f52a:	4b1e      	ldr	r3, [pc, #120]	; (f5a4 <LORAWAN_Init+0x174>)
    f52c:	4798      	blx	r3
    f52e:	e79c      	b.n	f46a <LORAWAN_Init+0x3a>
    f530:	41003fe8 	.word	0x41003fe8
    f534:	41003fe4 	.word	0x41003fe4
    f538:	20001ca4 	.word	0x20001ca4
    f53c:	20001d5a 	.word	0x20001d5a
    f540:	0000c481 	.word	0x0000c481
    f544:	0000c3c5 	.word	0x0000c3c5
    f548:	20001ee4 	.word	0x20001ee4
    f54c:	000133f1 	.word	0x000133f1
    f550:	00010f19 	.word	0x00010f19
    f554:	000131d5 	.word	0x000131d5
    f558:	0000cc45 	.word	0x0000cc45
    f55c:	000183b9 	.word	0x000183b9
    f560:	00012e59 	.word	0x00012e59
    f564:	0000b95d 	.word	0x0000b95d
    f568:	20001c8d 	.word	0x20001c8d
    f56c:	0001f624 	.word	0x0001f624
    f570:	00012e71 	.word	0x00012e71
    f574:	20001b80 	.word	0x20001b80
    f578:	0001f6dc 	.word	0x0001f6dc
    f57c:	20001d5b 	.word	0x20001d5b
    f580:	20001d5c 	.word	0x20001d5c
    f584:	20001d5d 	.word	0x20001d5d
    f588:	20001d5f 	.word	0x20001d5f
    f58c:	20001d60 	.word	0x20001d60
    f590:	20001d5e 	.word	0x20001d5e
    f594:	20001d61 	.word	0x20001d61
    f598:	20001d6a 	.word	0x20001d6a
    f59c:	20001d6b 	.word	0x20001d6b
    f5a0:	20001d94 	.word	0x20001d94
    f5a4:	0000efa9 	.word	0x0000efa9

0000f5a8 <LORAWAN_Send>:
    f5a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f5aa:	4c36      	ldr	r4, [pc, #216]	; (f684 <LORAWAN_Send+0xdc>)
    f5ac:	0006      	movs	r6, r0
    f5ae:	0023      	movs	r3, r4
    f5b0:	3350      	adds	r3, #80	; 0x50
    f5b2:	781b      	ldrb	r3, [r3, #0]
    f5b4:	250f      	movs	r5, #15
    f5b6:	b25a      	sxtb	r2, r3
    f5b8:	2a00      	cmp	r2, #0
    f5ba:	db0b      	blt.n	f5d4 <LORAWAN_Send+0x2c>
    f5bc:	3d03      	subs	r5, #3
    f5be:	065a      	lsls	r2, r3, #25
    f5c0:	d408      	bmi.n	f5d4 <LORAWAN_Send+0x2c>
    f5c2:	3d03      	subs	r5, #3
    f5c4:	07db      	lsls	r3, r3, #31
    f5c6:	d505      	bpl.n	f5d4 <LORAWAN_Send+0x2c>
    f5c8:	2390      	movs	r3, #144	; 0x90
    f5ca:	005b      	lsls	r3, r3, #1
    f5cc:	5ce7      	ldrb	r7, [r4, r3]
    f5ce:	2f00      	cmp	r7, #0
    f5d0:	d102      	bne.n	f5d8 <LORAWAN_Send+0x30>
    f5d2:	2511      	movs	r5, #17
    f5d4:	0028      	movs	r0, r5
    f5d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f5d8:	2800      	cmp	r0, #0
    f5da:	d10d      	bne.n	f5f8 <LORAWAN_Send+0x50>
    f5dc:	2700      	movs	r7, #0
    f5de:	6d63      	ldr	r3, [r4, #84]	; 0x54
    f5e0:	3301      	adds	r3, #1
    f5e2:	d123      	bne.n	f62c <LORAWAN_Send+0x84>
    f5e4:	2001      	movs	r0, #1
    f5e6:	3450      	adds	r4, #80	; 0x50
    f5e8:	78a3      	ldrb	r3, [r4, #2]
    f5ea:	210b      	movs	r1, #11
    f5ec:	4303      	orrs	r3, r0
    f5ee:	70a3      	strb	r3, [r4, #2]
    f5f0:	4b25      	ldr	r3, [pc, #148]	; (f688 <LORAWAN_Send+0xe0>)
    f5f2:	4798      	blx	r3
    f5f4:	250d      	movs	r5, #13
    f5f6:	e7ed      	b.n	f5d4 <LORAWAN_Send+0x2c>
    f5f8:	7843      	ldrb	r3, [r0, #1]
    f5fa:	7a02      	ldrb	r2, [r0, #8]
    f5fc:	3b01      	subs	r3, #1
    f5fe:	b2db      	uxtb	r3, r3
    f600:	9201      	str	r2, [sp, #4]
    f602:	2bdf      	cmp	r3, #223	; 0xdf
    f604:	d902      	bls.n	f60c <LORAWAN_Send+0x64>
    f606:	250a      	movs	r5, #10
    f608:	2a00      	cmp	r2, #0
    f60a:	d1e3      	bne.n	f5d4 <LORAWAN_Send+0x2c>
    f60c:	4b1f      	ldr	r3, [pc, #124]	; (f68c <LORAWAN_Send+0xe4>)
    f60e:	4798      	blx	r3
    f610:	4684      	mov	ip, r0
    f612:	9b01      	ldr	r3, [sp, #4]
    f614:	9000      	str	r0, [sp, #0]
    f616:	4463      	add	r3, ip
    f618:	001d      	movs	r5, r3
    f61a:	4b1d      	ldr	r3, [pc, #116]	; (f690 <LORAWAN_Send+0xe8>)
    f61c:	4798      	blx	r3
    f61e:	4285      	cmp	r5, r0
    f620:	dddc      	ble.n	f5dc <LORAWAN_Send+0x34>
    f622:	9b00      	ldr	r3, [sp, #0]
    f624:	250e      	movs	r5, #14
    f626:	2b00      	cmp	r3, #0
    f628:	d0d4      	beq.n	f5d4 <LORAWAN_Send+0x2c>
    f62a:	e7d8      	b.n	f5de <LORAWAN_Send+0x36>
    f62c:	0023      	movs	r3, r4
    f62e:	33c8      	adds	r3, #200	; 0xc8
    f630:	781b      	ldrb	r3, [r3, #0]
    f632:	2b04      	cmp	r3, #4
    f634:	d01d      	beq.n	f672 <LORAWAN_Send+0xca>
    f636:	0023      	movs	r3, r4
    f638:	33c8      	adds	r3, #200	; 0xc8
    f63a:	781b      	ldrb	r3, [r3, #0]
    f63c:	2b01      	cmp	r3, #1
    f63e:	d105      	bne.n	f64c <LORAWAN_Send+0xa4>
    f640:	0023      	movs	r3, r4
    f642:	3350      	adds	r3, #80	; 0x50
    f644:	781a      	ldrb	r2, [r3, #0]
    f646:	230e      	movs	r3, #14
    f648:	421a      	tst	r2, r3
    f64a:	d1c2      	bne.n	f5d2 <LORAWAN_Send+0x2a>
    f64c:	0023      	movs	r3, r4
    f64e:	33d0      	adds	r3, #208	; 0xd0
    f650:	2f00      	cmp	r7, #0
    f652:	d113      	bne.n	f67c <LORAWAN_Send+0xd4>
    f654:	2508      	movs	r5, #8
    f656:	601e      	str	r6, [r3, #0]
    f658:	2390      	movs	r3, #144	; 0x90
    f65a:	2200      	movs	r2, #0
    f65c:	005b      	lsls	r3, r3, #1
    f65e:	54e2      	strb	r2, [r4, r3]
    f660:	2001      	movs	r0, #1
    f662:	4b0c      	ldr	r3, [pc, #48]	; (f694 <LORAWAN_Send+0xec>)
    f664:	4798      	blx	r3
    f666:	2320      	movs	r3, #32
    f668:	3460      	adds	r4, #96	; 0x60
    f66a:	7822      	ldrb	r2, [r4, #0]
    f66c:	4313      	orrs	r3, r2
    f66e:	7023      	strb	r3, [r4, #0]
    f670:	e7b0      	b.n	f5d4 <LORAWAN_Send+0x2c>
    f672:	4b09      	ldr	r3, [pc, #36]	; (f698 <LORAWAN_Send+0xf0>)
    f674:	4798      	blx	r3
    f676:	2808      	cmp	r0, #8
    f678:	d1ab      	bne.n	f5d2 <LORAWAN_Send+0x2a>
    f67a:	e7dc      	b.n	f636 <LORAWAN_Send+0x8e>
    f67c:	2200      	movs	r2, #0
    f67e:	2511      	movs	r5, #17
    f680:	601a      	str	r2, [r3, #0]
    f682:	e7e9      	b.n	f658 <LORAWAN_Send+0xb0>
    f684:	20001ca4 	.word	0x20001ca4
    f688:	0000b745 	.word	0x0000b745
    f68c:	0000ef69 	.word	0x0000ef69
    f690:	0000f011 	.word	0x0000f011
    f694:	00013065 	.word	0x00013065
    f698:	00012abd 	.word	0x00012abd

0000f69c <AutomaticReplyCallback>:
    f69c:	b510      	push	{r4, lr}
    f69e:	4c0d      	ldr	r4, [pc, #52]	; (f6d4 <AutomaticReplyCallback+0x38>)
    f6a0:	0023      	movs	r3, r4
    f6a2:	33c8      	adds	r3, #200	; 0xc8
    f6a4:	781b      	ldrb	r3, [r3, #0]
    f6a6:	2b01      	cmp	r3, #1
    f6a8:	d10e      	bne.n	f6c8 <AutomaticReplyCallback+0x2c>
    f6aa:	0022      	movs	r2, r4
    f6ac:	210e      	movs	r1, #14
    f6ae:	3250      	adds	r2, #80	; 0x50
    f6b0:	7813      	ldrb	r3, [r2, #0]
    f6b2:	438b      	bics	r3, r1
    f6b4:	7013      	strb	r3, [r2, #0]
    f6b6:	4b08      	ldr	r3, [pc, #32]	; (f6d8 <AutomaticReplyCallback+0x3c>)
    f6b8:	2000      	movs	r0, #0
    f6ba:	4798      	blx	r3
    f6bc:	2208      	movs	r2, #8
    f6be:	3460      	adds	r4, #96	; 0x60
    f6c0:	7823      	ldrb	r3, [r4, #0]
    f6c2:	4393      	bics	r3, r2
    f6c4:	7023      	strb	r3, [r4, #0]
    f6c6:	bd10      	pop	{r4, pc}
    f6c8:	2b04      	cmp	r3, #4
    f6ca:	d1f4      	bne.n	f6b6 <AutomaticReplyCallback+0x1a>
    f6cc:	4b03      	ldr	r3, [pc, #12]	; (f6dc <AutomaticReplyCallback+0x40>)
    f6ce:	4798      	blx	r3
    f6d0:	e7f1      	b.n	f6b6 <AutomaticReplyCallback+0x1a>
    f6d2:	46c0      	nop			; (mov r8, r8)
    f6d4:	20001ca4 	.word	0x20001ca4
    f6d8:	0000f5a9 	.word	0x0000f5a9
    f6dc:	00013b09 	.word	0x00013b09

0000f6e0 <LorawanLinkCheckConfigure>:
    f6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f6e2:	23fa      	movs	r3, #250	; 0xfa
    f6e4:	4c20      	ldr	r4, [pc, #128]	; (f768 <LorawanLinkCheckConfigure+0x88>)
    f6e6:	009b      	lsls	r3, r3, #2
    f6e8:	0025      	movs	r5, r4
    f6ea:	4343      	muls	r3, r0
    f6ec:	0006      	movs	r6, r0
    f6ee:	2102      	movs	r1, #2
    f6f0:	2000      	movs	r0, #0
    f6f2:	4f1e      	ldr	r7, [pc, #120]	; (f76c <LorawanLinkCheckConfigure+0x8c>)
    f6f4:	65e3      	str	r3, [r4, #92]	; 0x5c
    f6f6:	3550      	adds	r5, #80	; 0x50
    f6f8:	47b8      	blx	r7
    f6fa:	2e00      	cmp	r6, #0
    f6fc:	d127      	bne.n	f74e <LorawanLinkCheckConfigure+0x6e>
    f6fe:	0023      	movs	r3, r4
    f700:	33bb      	adds	r3, #187	; 0xbb
    f702:	7818      	ldrb	r0, [r3, #0]
    f704:	4b1a      	ldr	r3, [pc, #104]	; (f770 <LorawanLinkCheckConfigure+0x90>)
    f706:	4798      	blx	r3
    f708:	2202      	movs	r2, #2
    f70a:	786b      	ldrb	r3, [r5, #1]
    f70c:	210b      	movs	r1, #11
    f70e:	4393      	bics	r3, r2
    f710:	706b      	strb	r3, [r5, #1]
    f712:	2001      	movs	r0, #1
    f714:	47b8      	blx	r7
    f716:	0023      	movs	r3, r4
    f718:	2701      	movs	r7, #1
    f71a:	33ac      	adds	r3, #172	; 0xac
    f71c:	781b      	ldrb	r3, [r3, #0]
    f71e:	0030      	movs	r0, r6
    f720:	0032      	movs	r2, r6
    f722:	36ff      	adds	r6, #255	; 0xff
    f724:	429a      	cmp	r2, r3
    f726:	d304      	bcc.n	f732 <LorawanLinkCheckConfigure+0x52>
    f728:	2800      	cmp	r0, #0
    f72a:	d001      	beq.n	f730 <LorawanLinkCheckConfigure+0x50>
    f72c:	34ac      	adds	r4, #172	; 0xac
    f72e:	7023      	strb	r3, [r4, #0]
    f730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f732:	2103      	movs	r1, #3
    f734:	4351      	muls	r1, r2
    f736:	1861      	adds	r1, r4, r1
    f738:	3165      	adds	r1, #101	; 0x65
    f73a:	780d      	ldrb	r5, [r1, #0]
    f73c:	2d02      	cmp	r5, #2
    f73e:	d103      	bne.n	f748 <LorawanLinkCheckConfigure+0x68>
    f740:	0038      	movs	r0, r7
    f742:	3b01      	subs	r3, #1
    f744:	700e      	strb	r6, [r1, #0]
    f746:	b2db      	uxtb	r3, r3
    f748:	3201      	adds	r2, #1
    f74a:	b2d2      	uxtb	r2, r2
    f74c:	e7ea      	b.n	f724 <LorawanLinkCheckConfigure+0x44>
    f74e:	2302      	movs	r3, #2
    f750:	786a      	ldrb	r2, [r5, #1]
    f752:	210b      	movs	r1, #11
    f754:	4313      	orrs	r3, r2
    f756:	706b      	strb	r3, [r5, #1]
    f758:	2001      	movs	r0, #1
    f75a:	47b8      	blx	r7
    f75c:	782b      	ldrb	r3, [r5, #0]
    f75e:	07db      	lsls	r3, r3, #31
    f760:	d5e6      	bpl.n	f730 <LorawanLinkCheckConfigure+0x50>
    f762:	4b04      	ldr	r3, [pc, #16]	; (f774 <LorawanLinkCheckConfigure+0x94>)
    f764:	4798      	blx	r3
    f766:	e7e3      	b.n	f730 <LorawanLinkCheckConfigure+0x50>
    f768:	20001ca4 	.word	0x20001ca4
    f76c:	0000b745 	.word	0x0000b745
    f770:	0000c7b9 	.word	0x0000c7b9
    f774:	0000f3a1 	.word	0x0000f3a1

0000f778 <UpdateCurrentDataRate>:
    f778:	b510      	push	{r4, lr}
    f77a:	4b04      	ldr	r3, [pc, #16]	; (f78c <UpdateCurrentDataRate+0x14>)
    f77c:	210c      	movs	r1, #12
    f77e:	33b3      	adds	r3, #179	; 0xb3
    f780:	7018      	strb	r0, [r3, #0]
    f782:	2001      	movs	r0, #1
    f784:	4b02      	ldr	r3, [pc, #8]	; (f790 <UpdateCurrentDataRate+0x18>)
    f786:	4798      	blx	r3
    f788:	bd10      	pop	{r4, pc}
    f78a:	46c0      	nop			; (mov r8, r8)
    f78c:	20001ca4 	.word	0x20001ca4
    f790:	0000b745 	.word	0x0000b745

0000f794 <UpdateDLSettings>:
    f794:	b573      	push	{r0, r1, r4, r5, r6, lr}
    f796:	466b      	mov	r3, sp
    f798:	1dde      	adds	r6, r3, #7
    f79a:	1d9c      	adds	r4, r3, #6
    f79c:	71d8      	strb	r0, [r3, #7]
    f79e:	7021      	strb	r1, [r4, #0]
    f7a0:	2017      	movs	r0, #23
    f7a2:	0031      	movs	r1, r6
    f7a4:	4d0c      	ldr	r5, [pc, #48]	; (f7d8 <UpdateDLSettings+0x44>)
    f7a6:	47a8      	blx	r5
    f7a8:	2808      	cmp	r0, #8
    f7aa:	d107      	bne.n	f7bc <UpdateDLSettings+0x28>
    f7ac:	4b0b      	ldr	r3, [pc, #44]	; (f7dc <UpdateDLSettings+0x48>)
    f7ae:	7832      	ldrb	r2, [r6, #0]
    f7b0:	334e      	adds	r3, #78	; 0x4e
    f7b2:	701a      	strb	r2, [r3, #0]
    f7b4:	2100      	movs	r1, #0
    f7b6:	3807      	subs	r0, #7
    f7b8:	4b09      	ldr	r3, [pc, #36]	; (f7e0 <UpdateDLSettings+0x4c>)
    f7ba:	4798      	blx	r3
    f7bc:	0021      	movs	r1, r4
    f7be:	2018      	movs	r0, #24
    f7c0:	47a8      	blx	r5
    f7c2:	2808      	cmp	r0, #8
    f7c4:	d107      	bne.n	f7d6 <UpdateDLSettings+0x42>
    f7c6:	2101      	movs	r1, #1
    f7c8:	4b04      	ldr	r3, [pc, #16]	; (f7dc <UpdateDLSettings+0x48>)
    f7ca:	7822      	ldrb	r2, [r4, #0]
    f7cc:	33c2      	adds	r3, #194	; 0xc2
    f7ce:	701a      	strb	r2, [r3, #0]
    f7d0:	0008      	movs	r0, r1
    f7d2:	4b03      	ldr	r3, [pc, #12]	; (f7e0 <UpdateDLSettings+0x4c>)
    f7d4:	4798      	blx	r3
    f7d6:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    f7d8:	0000b33d 	.word	0x0000b33d
    f7dc:	20001ca4 	.word	0x20001ca4
    f7e0:	0000b745 	.word	0x0000b745

0000f7e4 <UpdateTxPower>:
    f7e4:	b510      	push	{r4, lr}
    f7e6:	4b04      	ldr	r3, [pc, #16]	; (f7f8 <UpdateTxPower+0x14>)
    f7e8:	210a      	movs	r1, #10
    f7ea:	33b5      	adds	r3, #181	; 0xb5
    f7ec:	7018      	strb	r0, [r3, #0]
    f7ee:	2000      	movs	r0, #0
    f7f0:	4b02      	ldr	r3, [pc, #8]	; (f7fc <UpdateTxPower+0x18>)
    f7f2:	4798      	blx	r3
    f7f4:	bd10      	pop	{r4, pc}
    f7f6:	46c0      	nop			; (mov r8, r8)
    f7f8:	20001ca4 	.word	0x20001ca4
    f7fc:	0000b745 	.word	0x0000b745

0000f800 <UpdateRetransmissionAckTimeoutState>:
    f800:	4b10      	ldr	r3, [pc, #64]	; (f844 <UpdateRetransmissionAckTimeoutState+0x44>)
    f802:	b513      	push	{r0, r1, r4, lr}
    f804:	001a      	movs	r2, r3
    f806:	32c8      	adds	r2, #200	; 0xc8
    f808:	7812      	ldrb	r2, [r2, #0]
    f80a:	2a01      	cmp	r2, #1
    f80c:	d108      	bne.n	f820 <UpdateRetransmissionAckTimeoutState+0x20>
    f80e:	0018      	movs	r0, r3
    f810:	210e      	movs	r1, #14
    f812:	3050      	adds	r0, #80	; 0x50
    f814:	7802      	ldrb	r2, [r0, #0]
    f816:	438a      	bics	r2, r1
    f818:	0011      	movs	r1, r2
    f81a:	220c      	movs	r2, #12
    f81c:	430a      	orrs	r2, r1
    f81e:	7002      	strb	r2, [r0, #0]
    f820:	001a      	movs	r2, r3
    f822:	32a6      	adds	r2, #166	; 0xa6
    f824:	8811      	ldrh	r1, [r2, #0]
    f826:	222c      	movs	r2, #44	; 0x2c
    f828:	32ff      	adds	r2, #255	; 0xff
    f82a:	5c9a      	ldrb	r2, [r3, r2]
    f82c:	33bc      	adds	r3, #188	; 0xbc
    f82e:	1a8a      	subs	r2, r1, r2
    f830:	21fa      	movs	r1, #250	; 0xfa
    f832:	0089      	lsls	r1, r1, #2
    f834:	4351      	muls	r1, r2
    f836:	2200      	movs	r2, #0
    f838:	7818      	ldrb	r0, [r3, #0]
    f83a:	4c03      	ldr	r4, [pc, #12]	; (f848 <UpdateRetransmissionAckTimeoutState+0x48>)
    f83c:	9200      	str	r2, [sp, #0]
    f83e:	4b03      	ldr	r3, [pc, #12]	; (f84c <UpdateRetransmissionAckTimeoutState+0x4c>)
    f840:	47a0      	blx	r4
    f842:	bd13      	pop	{r0, r1, r4, pc}
    f844:	20001ca4 	.word	0x20001ca4
    f848:	0000c4b5 	.word	0x0000c4b5
    f84c:	0001106d 	.word	0x0001106d

0000f850 <UpdateReceiveWindow2Parameters>:
    f850:	4b06      	ldr	r3, [pc, #24]	; (f86c <UpdateReceiveWindow2Parameters+0x1c>)
    f852:	b510      	push	{r4, lr}
    f854:	001a      	movs	r2, r3
    f856:	334a      	adds	r3, #74	; 0x4a
    f858:	8018      	strh	r0, [r3, #0]
    f85a:	324e      	adds	r2, #78	; 0x4e
    f85c:	0c00      	lsrs	r0, r0, #16
    f85e:	8058      	strh	r0, [r3, #2]
    f860:	7011      	strb	r1, [r2, #0]
    f862:	2001      	movs	r0, #1
    f864:	2100      	movs	r1, #0
    f866:	4b02      	ldr	r3, [pc, #8]	; (f870 <UpdateReceiveWindow2Parameters+0x20>)
    f868:	4798      	blx	r3
    f86a:	bd10      	pop	{r4, pc}
    f86c:	20001ca4 	.word	0x20001ca4
    f870:	0000b745 	.word	0x0000b745

0000f874 <ResetParametersForConfirmedTransmission>:
    f874:	4b0a      	ldr	r3, [pc, #40]	; (f8a0 <ResetParametersForConfirmedTransmission+0x2c>)
    f876:	001a      	movs	r2, r3
    f878:	32c8      	adds	r2, #200	; 0xc8
    f87a:	7812      	ldrb	r2, [r2, #0]
    f87c:	2a01      	cmp	r2, #1
    f87e:	d105      	bne.n	f88c <ResetParametersForConfirmedTransmission+0x18>
    f880:	0019      	movs	r1, r3
    f882:	200e      	movs	r0, #14
    f884:	3150      	adds	r1, #80	; 0x50
    f886:	780a      	ldrb	r2, [r1, #0]
    f888:	4382      	bics	r2, r0
    f88a:	700a      	strb	r2, [r1, #0]
    f88c:	001a      	movs	r2, r3
    f88e:	2100      	movs	r1, #0
    f890:	3360      	adds	r3, #96	; 0x60
    f892:	32b0      	adds	r2, #176	; 0xb0
    f894:	7011      	strb	r1, [r2, #0]
    f896:	781a      	ldrb	r2, [r3, #0]
    f898:	3101      	adds	r1, #1
    f89a:	438a      	bics	r2, r1
    f89c:	701a      	strb	r2, [r3, #0]
    f89e:	4770      	bx	lr
    f8a0:	20001ca4 	.word	0x20001ca4

0000f8a4 <ResetParametersForUnconfirmedTransmission>:
    f8a4:	4b07      	ldr	r3, [pc, #28]	; (f8c4 <ResetParametersForUnconfirmedTransmission+0x20>)
    f8a6:	001a      	movs	r2, r3
    f8a8:	32c8      	adds	r2, #200	; 0xc8
    f8aa:	7812      	ldrb	r2, [r2, #0]
    f8ac:	2a01      	cmp	r2, #1
    f8ae:	d105      	bne.n	f8bc <ResetParametersForUnconfirmedTransmission+0x18>
    f8b0:	0019      	movs	r1, r3
    f8b2:	200e      	movs	r0, #14
    f8b4:	3150      	adds	r1, #80	; 0x50
    f8b6:	780a      	ldrb	r2, [r1, #0]
    f8b8:	4382      	bics	r2, r0
    f8ba:	700a      	strb	r2, [r1, #0]
    f8bc:	2200      	movs	r2, #0
    f8be:	33af      	adds	r3, #175	; 0xaf
    f8c0:	701a      	strb	r2, [r3, #0]
    f8c2:	4770      	bx	lr
    f8c4:	20001ca4 	.word	0x20001ca4

0000f8c8 <SetJoinFailState>:
    f8c8:	b570      	push	{r4, r5, r6, lr}
    f8ca:	4c11      	ldr	r4, [pc, #68]	; (f910 <SetJoinFailState+0x48>)
    f8cc:	2504      	movs	r5, #4
    f8ce:	0020      	movs	r0, r4
    f8d0:	3060      	adds	r0, #96	; 0x60
    f8d2:	7802      	ldrb	r2, [r0, #0]
    f8d4:	0021      	movs	r1, r4
    f8d6:	43aa      	bics	r2, r5
    f8d8:	7002      	strb	r2, [r0, #0]
    f8da:	22f0      	movs	r2, #240	; 0xf0
    f8dc:	3150      	adds	r1, #80	; 0x50
    f8de:	780b      	ldrb	r3, [r1, #0]
    f8e0:	4013      	ands	r3, r2
    f8e2:	700b      	strb	r3, [r1, #0]
    f8e4:	490b      	ldr	r1, [pc, #44]	; (f914 <SetJoinFailState+0x4c>)
    f8e6:	794a      	ldrb	r2, [r1, #5]
    f8e8:	790b      	ldrb	r3, [r1, #4]
    f8ea:	0212      	lsls	r2, r2, #8
    f8ec:	431a      	orrs	r2, r3
    f8ee:	798b      	ldrb	r3, [r1, #6]
    f8f0:	041b      	lsls	r3, r3, #16
    f8f2:	431a      	orrs	r2, r3
    f8f4:	79cb      	ldrb	r3, [r1, #7]
    f8f6:	061b      	lsls	r3, r3, #24
    f8f8:	4313      	orrs	r3, r2
    f8fa:	d001      	beq.n	f900 <SetJoinFailState+0x38>
    f8fc:	2000      	movs	r0, #0
    f8fe:	4798      	blx	r3
    f900:	2300      	movs	r3, #0
    f902:	34c4      	adds	r4, #196	; 0xc4
    f904:	7023      	strb	r3, [r4, #0]
    f906:	210b      	movs	r1, #11
    f908:	4b03      	ldr	r3, [pc, #12]	; (f918 <SetJoinFailState+0x50>)
    f90a:	2001      	movs	r0, #1
    f90c:	4798      	blx	r3
    f90e:	bd70      	pop	{r4, r5, r6, pc}
    f910:	20001ca4 	.word	0x20001ca4
    f914:	20001ee4 	.word	0x20001ee4
    f918:	0000b745 	.word	0x0000b745

0000f91c <ExecuteRxParamSetupReq>:
    f91c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f91e:	b085      	sub	sp, #20
    f920:	7805      	ldrb	r5, [r0, #0]
    f922:	0004      	movs	r4, r0
    f924:	1c41      	adds	r1, r0, #1
    f926:	2204      	movs	r2, #4
    f928:	4b36      	ldr	r3, [pc, #216]	; (fa04 <ExecuteRxParamSetupReq+0xe8>)
    f92a:	a803      	add	r0, sp, #12
    f92c:	4798      	blx	r3
    f92e:	2264      	movs	r2, #100	; 0x64
    f930:	9b03      	ldr	r3, [sp, #12]
    f932:	a903      	add	r1, sp, #12
    f934:	021b      	lsls	r3, r3, #8
    f936:	0a1b      	lsrs	r3, r3, #8
    f938:	4353      	muls	r3, r2
    f93a:	9303      	str	r3, [sp, #12]
    f93c:	1d23      	adds	r3, r4, #4
    f93e:	9301      	str	r3, [sp, #4]
    f940:	072b      	lsls	r3, r5, #28
    f942:	0f1b      	lsrs	r3, r3, #28
    f944:	b2da      	uxtb	r2, r3
    f946:	9200      	str	r2, [sp, #0]
    f948:	aa02      	add	r2, sp, #8
    f94a:	1c96      	adds	r6, r2, #2
    f94c:	066d      	lsls	r5, r5, #25
    f94e:	7033      	strb	r3, [r6, #0]
    f950:	1cd7      	adds	r7, r2, #3
    f952:	0f6d      	lsrs	r5, r5, #29
    f954:	2001      	movs	r0, #1
    f956:	4b2c      	ldr	r3, [pc, #176]	; (fa08 <ExecuteRxParamSetupReq+0xec>)
    f958:	703d      	strb	r5, [r7, #0]
    f95a:	4798      	blx	r3
    f95c:	4c2b      	ldr	r4, [pc, #172]	; (fa0c <ExecuteRxParamSetupReq+0xf0>)
    f95e:	2808      	cmp	r0, #8
    f960:	d109      	bne.n	f976 <ExecuteRxParamSetupReq+0x5a>
    f962:	0023      	movs	r3, r4
    f964:	33ac      	adds	r3, #172	; 0xac
    f966:	781a      	ldrb	r2, [r3, #0]
    f968:	2303      	movs	r3, #3
    f96a:	4353      	muls	r3, r2
    f96c:	18e3      	adds	r3, r4, r3
    f96e:	3360      	adds	r3, #96	; 0x60
    f970:	799a      	ldrb	r2, [r3, #6]
    f972:	4310      	orrs	r0, r2
    f974:	7198      	strb	r0, [r3, #6]
    f976:	0031      	movs	r1, r6
    f978:	200f      	movs	r0, #15
    f97a:	4e23      	ldr	r6, [pc, #140]	; (fa08 <ExecuteRxParamSetupReq+0xec>)
    f97c:	47b0      	blx	r6
    f97e:	2808      	cmp	r0, #8
    f980:	d10a      	bne.n	f998 <ExecuteRxParamSetupReq+0x7c>
    f982:	0023      	movs	r3, r4
    f984:	33ac      	adds	r3, #172	; 0xac
    f986:	781a      	ldrb	r2, [r3, #0]
    f988:	2303      	movs	r3, #3
    f98a:	4353      	muls	r3, r2
    f98c:	2210      	movs	r2, #16
    f98e:	18e3      	adds	r3, r4, r3
    f990:	3360      	adds	r3, #96	; 0x60
    f992:	7999      	ldrb	r1, [r3, #6]
    f994:	430a      	orrs	r2, r1
    f996:	719a      	strb	r2, [r3, #6]
    f998:	0039      	movs	r1, r7
    f99a:	2018      	movs	r0, #24
    f99c:	47b0      	blx	r6
    f99e:	2808      	cmp	r0, #8
    f9a0:	d10a      	bne.n	f9b8 <ExecuteRxParamSetupReq+0x9c>
    f9a2:	0023      	movs	r3, r4
    f9a4:	33ac      	adds	r3, #172	; 0xac
    f9a6:	781a      	ldrb	r2, [r3, #0]
    f9a8:	2303      	movs	r3, #3
    f9aa:	4353      	muls	r3, r2
    f9ac:	2220      	movs	r2, #32
    f9ae:	18e3      	adds	r3, r4, r3
    f9b0:	3360      	adds	r3, #96	; 0x60
    f9b2:	7999      	ldrb	r1, [r3, #6]
    f9b4:	430a      	orrs	r2, r1
    f9b6:	719a      	strb	r2, [r3, #6]
    f9b8:	0023      	movs	r3, r4
    f9ba:	33ac      	adds	r3, #172	; 0xac
    f9bc:	781a      	ldrb	r2, [r3, #0]
    f9be:	2303      	movs	r3, #3
    f9c0:	4353      	muls	r3, r2
    f9c2:	18e3      	adds	r3, r4, r3
    f9c4:	3360      	adds	r3, #96	; 0x60
    f9c6:	799e      	ldrb	r6, [r3, #6]
    f9c8:	06f3      	lsls	r3, r6, #27
    f9ca:	d518      	bpl.n	f9fe <ExecuteRxParamSetupReq+0xe2>
    f9cc:	0733      	lsls	r3, r6, #28
    f9ce:	d516      	bpl.n	f9fe <ExecuteRxParamSetupReq+0xe2>
    f9d0:	06b6      	lsls	r6, r6, #26
    f9d2:	0ff6      	lsrs	r6, r6, #31
    f9d4:	2e01      	cmp	r6, #1
    f9d6:	d112      	bne.n	f9fe <ExecuteRxParamSetupReq+0xe2>
    f9d8:	0023      	movs	r3, r4
    f9da:	33c2      	adds	r3, #194	; 0xc2
    f9dc:	701d      	strb	r5, [r3, #0]
    f9de:	0031      	movs	r1, r6
    f9e0:	0030      	movs	r0, r6
    f9e2:	4d0b      	ldr	r5, [pc, #44]	; (fa10 <ExecuteRxParamSetupReq+0xf4>)
    f9e4:	47a8      	blx	r5
    f9e6:	9900      	ldr	r1, [sp, #0]
    f9e8:	9803      	ldr	r0, [sp, #12]
    f9ea:	4b0a      	ldr	r3, [pc, #40]	; (fa14 <ExecuteRxParamSetupReq+0xf8>)
    f9ec:	4798      	blx	r3
    f9ee:	2340      	movs	r3, #64	; 0x40
    f9f0:	3450      	adds	r4, #80	; 0x50
    f9f2:	7862      	ldrb	r2, [r4, #1]
    f9f4:	210b      	movs	r1, #11
    f9f6:	4313      	orrs	r3, r2
    f9f8:	7063      	strb	r3, [r4, #1]
    f9fa:	0030      	movs	r0, r6
    f9fc:	47a8      	blx	r5
    f9fe:	9801      	ldr	r0, [sp, #4]
    fa00:	b005      	add	sp, #20
    fa02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fa04:	00018195 	.word	0x00018195
    fa08:	0000b33d 	.word	0x0000b33d
    fa0c:	20001ca4 	.word	0x20001ca4
    fa10:	0000b745 	.word	0x0000b745
    fa14:	0000f851 	.word	0x0000f851

0000fa18 <ExecuteDutyCycle>:
    fa18:	b570      	push	{r4, r5, r6, lr}
    fa1a:	7803      	ldrb	r3, [r0, #0]
    fa1c:	1c46      	adds	r6, r0, #1
    fa1e:	2b0f      	cmp	r3, #15
    fa20:	d80f      	bhi.n	fa42 <ExecuteDutyCycle+0x2a>
    fa22:	4c09      	ldr	r4, [pc, #36]	; (fa48 <ExecuteDutyCycle+0x30>)
    fa24:	210b      	movs	r1, #11
    fa26:	0022      	movs	r2, r4
    fa28:	2000      	movs	r0, #0
    fa2a:	3264      	adds	r2, #100	; 0x64
    fa2c:	4d07      	ldr	r5, [pc, #28]	; (fa4c <ExecuteDutyCycle+0x34>)
    fa2e:	7013      	strb	r3, [r2, #0]
    fa30:	47a8      	blx	r5
    fa32:	2320      	movs	r3, #32
    fa34:	3450      	adds	r4, #80	; 0x50
    fa36:	7862      	ldrb	r2, [r4, #1]
    fa38:	210b      	movs	r1, #11
    fa3a:	4313      	orrs	r3, r2
    fa3c:	7063      	strb	r3, [r4, #1]
    fa3e:	2001      	movs	r0, #1
    fa40:	47a8      	blx	r5
    fa42:	0030      	movs	r0, r6
    fa44:	bd70      	pop	{r4, r5, r6, pc}
    fa46:	46c0      	nop			; (mov r8, r8)
    fa48:	20001ca4 	.word	0x20001ca4
    fa4c:	0000b745 	.word	0x0000b745

0000fa50 <ExecuteDlChannel>:
    fa50:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa52:	b089      	sub	sp, #36	; 0x24
    fa54:	7805      	ldrb	r5, [r0, #0]
    fa56:	ab02      	add	r3, sp, #8
    fa58:	1c41      	adds	r1, r0, #1
    fa5a:	0007      	movs	r7, r0
    fa5c:	719d      	strb	r5, [r3, #6]
    fa5e:	1d9e      	adds	r6, r3, #6
    fa60:	2204      	movs	r2, #4
    fa62:	4b23      	ldr	r3, [pc, #140]	; (faf0 <ExecuteDlChannel+0xa0>)
    fa64:	a805      	add	r0, sp, #20
    fa66:	4798      	blx	r3
    fa68:	9b05      	ldr	r3, [sp, #20]
    fa6a:	a904      	add	r1, sp, #16
    fa6c:	021c      	lsls	r4, r3, #8
    fa6e:	2364      	movs	r3, #100	; 0x64
    fa70:	0a24      	lsrs	r4, r4, #8
    fa72:	435c      	muls	r4, r3
    fa74:	1d3b      	adds	r3, r7, #4
    fa76:	9301      	str	r3, [sp, #4]
    fa78:	2301      	movs	r3, #1
    fa7a:	2015      	movs	r0, #21
    fa7c:	704b      	strb	r3, [r1, #1]
    fa7e:	4b1d      	ldr	r3, [pc, #116]	; (faf4 <ExecuteDlChannel+0xa4>)
    fa80:	9405      	str	r4, [sp, #20]
    fa82:	700d      	strb	r5, [r1, #0]
    fa84:	4798      	blx	r3
    fa86:	2808      	cmp	r0, #8
    fa88:	d12f      	bne.n	faea <ExecuteDlChannel+0x9a>
    fa8a:	ab02      	add	r3, sp, #8
    fa8c:	1ddd      	adds	r5, r3, #7
    fa8e:	2300      	movs	r3, #0
    fa90:	702b      	strb	r3, [r5, #0]
    fa92:	7833      	ldrb	r3, [r6, #0]
    fa94:	af06      	add	r7, sp, #24
    fa96:	713b      	strb	r3, [r7, #4]
    fa98:	002a      	movs	r2, r5
    fa9a:	0031      	movs	r1, r6
    fa9c:	300e      	adds	r0, #14
    fa9e:	4b16      	ldr	r3, [pc, #88]	; (faf8 <ExecuteDlChannel+0xa8>)
    faa0:	9406      	str	r4, [sp, #24]
    faa2:	4798      	blx	r3
    faa4:	280a      	cmp	r0, #10
    faa6:	d00d      	beq.n	fac4 <ExecuteDlChannel+0x74>
    faa8:	782a      	ldrb	r2, [r5, #0]
    faaa:	2a01      	cmp	r2, #1
    faac:	d10a      	bne.n	fac4 <ExecuteDlChannel+0x74>
    faae:	4b13      	ldr	r3, [pc, #76]	; (fafc <ExecuteDlChannel+0xac>)
    fab0:	0019      	movs	r1, r3
    fab2:	31ac      	adds	r1, #172	; 0xac
    fab4:	7808      	ldrb	r0, [r1, #0]
    fab6:	2103      	movs	r1, #3
    fab8:	4341      	muls	r1, r0
    faba:	185b      	adds	r3, r3, r1
    fabc:	3360      	adds	r3, #96	; 0x60
    fabe:	79d9      	ldrb	r1, [r3, #7]
    fac0:	430a      	orrs	r2, r1
    fac2:	71da      	strb	r2, [r3, #7]
    fac4:	0039      	movs	r1, r7
    fac6:	2032      	movs	r0, #50	; 0x32
    fac8:	4b0d      	ldr	r3, [pc, #52]	; (fb00 <ExecuteDlChannel+0xb0>)
    faca:	4798      	blx	r3
    facc:	2808      	cmp	r0, #8
    face:	d10c      	bne.n	faea <ExecuteDlChannel+0x9a>
    fad0:	4b0a      	ldr	r3, [pc, #40]	; (fafc <ExecuteDlChannel+0xac>)
    fad2:	001a      	movs	r2, r3
    fad4:	32ac      	adds	r2, #172	; 0xac
    fad6:	7811      	ldrb	r1, [r2, #0]
    fad8:	2203      	movs	r2, #3
    fada:	434a      	muls	r2, r1
    fadc:	189b      	adds	r3, r3, r2
    fade:	2280      	movs	r2, #128	; 0x80
    fae0:	3360      	adds	r3, #96	; 0x60
    fae2:	7999      	ldrb	r1, [r3, #6]
    fae4:	4252      	negs	r2, r2
    fae6:	430a      	orrs	r2, r1
    fae8:	719a      	strb	r2, [r3, #6]
    faea:	9801      	ldr	r0, [sp, #4]
    faec:	b009      	add	sp, #36	; 0x24
    faee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    faf0:	00018195 	.word	0x00018195
    faf4:	0000b33d 	.word	0x0000b33d
    faf8:	0000b321 	.word	0x0000b321
    fafc:	20001ca4 	.word	0x20001ca4
    fb00:	0000b359 	.word	0x0000b359

0000fb04 <ExecuteTxParamSetup>:
    fb04:	220f      	movs	r2, #15
    fb06:	b513      	push	{r0, r1, r4, lr}
    fb08:	7803      	ldrb	r3, [r0, #0]
    fb0a:	4c0f      	ldr	r4, [pc, #60]	; (fb48 <ExecuteTxParamSetup+0x44>)
    fb0c:	401a      	ands	r2, r3
    fb0e:	5ca2      	ldrb	r2, [r4, r2]
    fb10:	2401      	movs	r4, #1
    fb12:	a901      	add	r1, sp, #4
    fb14:	700a      	strb	r2, [r1, #0]
    fb16:	111a      	asrs	r2, r3, #4
    fb18:	115b      	asrs	r3, r3, #5
    fb1a:	4023      	ands	r3, r4
    fb1c:	40a3      	lsls	r3, r4
    fb1e:	4022      	ands	r2, r4
    fb20:	4313      	orrs	r3, r2
    fb22:	704b      	strb	r3, [r1, #1]
    fb24:	1904      	adds	r4, r0, r4
    fb26:	4b09      	ldr	r3, [pc, #36]	; (fb4c <ExecuteTxParamSetup+0x48>)
    fb28:	2033      	movs	r0, #51	; 0x33
    fb2a:	4798      	blx	r3
    fb2c:	2808      	cmp	r0, #8
    fb2e:	d009      	beq.n	fb44 <ExecuteTxParamSetup+0x40>
    fb30:	4b07      	ldr	r3, [pc, #28]	; (fb50 <ExecuteTxParamSetup+0x4c>)
    fb32:	001a      	movs	r2, r3
    fb34:	32ac      	adds	r2, #172	; 0xac
    fb36:	7811      	ldrb	r1, [r2, #0]
    fb38:	2203      	movs	r2, #3
    fb3a:	434a      	muls	r2, r1
    fb3c:	189b      	adds	r3, r3, r2
    fb3e:	22ff      	movs	r2, #255	; 0xff
    fb40:	3365      	adds	r3, #101	; 0x65
    fb42:	701a      	strb	r2, [r3, #0]
    fb44:	0020      	movs	r0, r4
    fb46:	bd16      	pop	{r1, r2, r4, pc}
    fb48:	0001f614 	.word	0x0001f614
    fb4c:	0000b359 	.word	0x0000b359
    fb50:	20001ca4 	.word	0x20001ca4

0000fb54 <ExecuteLinkAdr>:
    fb54:	220f      	movs	r2, #15
    fb56:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb58:	0005      	movs	r5, r0
    fb5a:	7803      	ldrb	r3, [r0, #0]
    fb5c:	b087      	sub	sp, #28
    fb5e:	401a      	ands	r2, r3
    fb60:	a903      	add	r1, sp, #12
    fb62:	700a      	strb	r2, [r1, #0]
    fb64:	aa02      	add	r2, sp, #8
    fb66:	1d94      	adds	r4, r2, #6
    fb68:	1d57      	adds	r7, r2, #5
    fb6a:	091b      	lsrs	r3, r3, #4
    fb6c:	1c41      	adds	r1, r0, #1
    fb6e:	703b      	strb	r3, [r7, #0]
    fb70:	2202      	movs	r2, #2
    fb72:	0020      	movs	r0, r4
    fb74:	4b3e      	ldr	r3, [pc, #248]	; (fc70 <ExecuteLinkAdr+0x11c>)
    fb76:	4798      	blx	r3
    fb78:	466a      	mov	r2, sp
    fb7a:	1d2b      	adds	r3, r5, #4
    fb7c:	9301      	str	r3, [sp, #4]
    fb7e:	8823      	ldrh	r3, [r4, #0]
    fb80:	2424      	movs	r4, #36	; 0x24
    fb82:	2101      	movs	r1, #1
    fb84:	9300      	str	r3, [sp, #0]
    fb86:	8812      	ldrh	r2, [r2, #0]
    fb88:	ab02      	add	r3, sp, #8
    fb8a:	815a      	strh	r2, [r3, #10]
    fb8c:	78ea      	ldrb	r2, [r5, #3]
    fb8e:	4e39      	ldr	r6, [pc, #228]	; (fc74 <ExecuteLinkAdr+0x120>)
    fb90:	0652      	lsls	r2, r2, #25
    fb92:	0f52      	lsrs	r2, r2, #29
    fb94:	34ff      	adds	r4, #255	; 0xff
    fb96:	721a      	strb	r2, [r3, #8]
    fb98:	5d33      	ldrb	r3, [r6, r4]
    fb9a:	2036      	movs	r0, #54	; 0x36
    fb9c:	438b      	bics	r3, r1
    fb9e:	1849      	adds	r1, r1, r1
    fba0:	438b      	bics	r3, r1
    fba2:	3102      	adds	r1, #2
    fba4:	438b      	bics	r3, r1
    fba6:	5533      	strb	r3, [r6, r4]
    fba8:	466b      	mov	r3, sp
    fbaa:	881b      	ldrh	r3, [r3, #0]
    fbac:	a905      	add	r1, sp, #20
    fbae:	804b      	strh	r3, [r1, #2]
    fbb0:	4b31      	ldr	r3, [pc, #196]	; (fc78 <ExecuteLinkAdr+0x124>)
    fbb2:	700a      	strb	r2, [r1, #0]
    fbb4:	4798      	blx	r3
    fbb6:	2808      	cmp	r0, #8
    fbb8:	d11c      	bne.n	fbf4 <ExecuteLinkAdr+0xa0>
    fbba:	2201      	movs	r2, #1
    fbbc:	5d33      	ldrb	r3, [r6, r4]
    fbbe:	a904      	add	r1, sp, #16
    fbc0:	4313      	orrs	r3, r2
    fbc2:	5533      	strb	r3, [r6, r4]
    fbc4:	aa02      	add	r2, sp, #8
    fbc6:	4b2d      	ldr	r3, [pc, #180]	; (fc7c <ExecuteLinkAdr+0x128>)
    fbc8:	300b      	adds	r0, #11
    fbca:	4798      	blx	r3
    fbcc:	0039      	movs	r1, r7
    fbce:	2010      	movs	r0, #16
    fbd0:	4b29      	ldr	r3, [pc, #164]	; (fc78 <ExecuteLinkAdr+0x124>)
    fbd2:	4798      	blx	r3
    fbd4:	2808      	cmp	r0, #8
    fbd6:	d10d      	bne.n	fbf4 <ExecuteLinkAdr+0xa0>
    fbd8:	ab02      	add	r3, sp, #8
    fbda:	781b      	ldrb	r3, [r3, #0]
    fbdc:	7839      	ldrb	r1, [r7, #0]
    fbde:	071a      	lsls	r2, r3, #28
    fbe0:	0f12      	lsrs	r2, r2, #28
    fbe2:	4291      	cmp	r1, r2
    fbe4:	db06      	blt.n	fbf4 <ExecuteLinkAdr+0xa0>
    fbe6:	091b      	lsrs	r3, r3, #4
    fbe8:	4299      	cmp	r1, r3
    fbea:	dc03      	bgt.n	fbf4 <ExecuteLinkAdr+0xa0>
    fbec:	2202      	movs	r2, #2
    fbee:	5d33      	ldrb	r3, [r6, r4]
    fbf0:	4313      	orrs	r3, r2
    fbf2:	5533      	strb	r3, [r6, r4]
    fbf4:	ae03      	add	r6, sp, #12
    fbf6:	4b20      	ldr	r3, [pc, #128]	; (fc78 <ExecuteLinkAdr+0x124>)
    fbf8:	0031      	movs	r1, r6
    fbfa:	201d      	movs	r0, #29
    fbfc:	4798      	blx	r3
    fbfe:	4b1d      	ldr	r3, [pc, #116]	; (fc74 <ExecuteLinkAdr+0x120>)
    fc00:	2808      	cmp	r0, #8
    fc02:	d103      	bne.n	fc0c <ExecuteLinkAdr+0xb8>
    fc04:	2204      	movs	r2, #4
    fc06:	5d19      	ldrb	r1, [r3, r4]
    fc08:	430a      	orrs	r2, r1
    fc0a:	551a      	strb	r2, [r3, r4]
    fc0c:	2207      	movs	r2, #7
    fc0e:	5d18      	ldrb	r0, [r3, r4]
    fc10:	4010      	ands	r0, r2
    fc12:	4290      	cmp	r0, r2
    fc14:	d122      	bne.n	fc5c <ExecuteLinkAdr+0x108>
    fc16:	001a      	movs	r2, r3
    fc18:	4669      	mov	r1, sp
    fc1a:	3228      	adds	r2, #40	; 0x28
    fc1c:	7809      	ldrb	r1, [r1, #0]
    fc1e:	32ff      	adds	r2, #255	; 0xff
    fc20:	7011      	strb	r1, [r2, #0]
    fc22:	9900      	ldr	r1, [sp, #0]
    fc24:	2470      	movs	r4, #112	; 0x70
    fc26:	0a09      	lsrs	r1, r1, #8
    fc28:	7051      	strb	r1, [r2, #1]
    fc2a:	2292      	movs	r2, #146	; 0x92
    fc2c:	7839      	ldrb	r1, [r7, #0]
    fc2e:	0052      	lsls	r2, r2, #1
    fc30:	5499      	strb	r1, [r3, r2]
    fc32:	212a      	movs	r1, #42	; 0x2a
    fc34:	78ea      	ldrb	r2, [r5, #3]
    fc36:	31ff      	adds	r1, #255	; 0xff
    fc38:	0912      	lsrs	r2, r2, #4
    fc3a:	4002      	ands	r2, r0
    fc3c:	5c58      	ldrb	r0, [r3, r1]
    fc3e:	0112      	lsls	r2, r2, #4
    fc40:	43a0      	bics	r0, r4
    fc42:	4302      	orrs	r2, r0
    fc44:	545a      	strb	r2, [r3, r1]
    fc46:	78e8      	ldrb	r0, [r5, #3]
    fc48:	3c61      	subs	r4, #97	; 0x61
    fc4a:	b2d2      	uxtb	r2, r2
    fc4c:	4020      	ands	r0, r4
    fc4e:	43a2      	bics	r2, r4
    fc50:	4302      	orrs	r2, r0
    fc52:	545a      	strb	r2, [r3, r1]
    fc54:	2226      	movs	r2, #38	; 0x26
    fc56:	7831      	ldrb	r1, [r6, #0]
    fc58:	32ff      	adds	r2, #255	; 0xff
    fc5a:	5499      	strb	r1, [r3, r2]
    fc5c:	2293      	movs	r2, #147	; 0x93
    fc5e:	4905      	ldr	r1, [pc, #20]	; (fc74 <ExecuteLinkAdr+0x120>)
    fc60:	0052      	lsls	r2, r2, #1
    fc62:	5c8b      	ldrb	r3, [r1, r2]
    fc64:	9801      	ldr	r0, [sp, #4]
    fc66:	3301      	adds	r3, #1
    fc68:	548b      	strb	r3, [r1, r2]
    fc6a:	b007      	add	sp, #28
    fc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fc6e:	46c0      	nop			; (mov r8, r8)
    fc70:	00018195 	.word	0x00018195
    fc74:	20001ca4 	.word	0x20001ca4
    fc78:	0000b33d 	.word	0x0000b33d
    fc7c:	0000b321 	.word	0x0000b321

0000fc80 <PrepareJoinRequestFrame>:
    fc80:	2210      	movs	r2, #16
    fc82:	b573      	push	{r0, r1, r4, r5, r6, lr}
    fc84:	4d1b      	ldr	r5, [pc, #108]	; (fcf4 <PrepareJoinRequestFrame+0x74>)
    fc86:	4b1c      	ldr	r3, [pc, #112]	; (fcf8 <PrepareJoinRequestFrame+0x78>)
    fc88:	32ff      	adds	r2, #255	; 0xff
    fc8a:	2100      	movs	r1, #0
    fc8c:	0028      	movs	r0, r5
    fc8e:	4798      	blx	r3
    fc90:	2300      	movs	r3, #0
    fc92:	203c      	movs	r0, #60	; 0x3c
    fc94:	4c19      	ldr	r4, [pc, #100]	; (fcfc <PrepareJoinRequestFrame+0x7c>)
    fc96:	702b      	strb	r3, [r5, #0]
    fc98:	1ac1      	subs	r1, r0, r3
    fc9a:	5c61      	ldrb	r1, [r4, r1]
    fc9c:	18ea      	adds	r2, r5, r3
    fc9e:	3301      	adds	r3, #1
    fca0:	7051      	strb	r1, [r2, #1]
    fca2:	2b08      	cmp	r3, #8
    fca4:	d1f8      	bne.n	fc98 <PrepareJoinRequestFrame+0x18>
    fca6:	2300      	movs	r3, #0
    fca8:	2044      	movs	r0, #68	; 0x44
    fcaa:	1ac1      	subs	r1, r0, r3
    fcac:	5c61      	ldrb	r1, [r4, r1]
    fcae:	18ea      	adds	r2, r5, r3
    fcb0:	3301      	adds	r3, #1
    fcb2:	7251      	strb	r1, [r2, #9]
    fcb4:	2b08      	cmp	r3, #8
    fcb6:	d1f8      	bne.n	fcaa <PrepareJoinRequestFrame+0x2a>
    fcb8:	4b11      	ldr	r3, [pc, #68]	; (fd00 <PrepareJoinRequestFrame+0x80>)
    fcba:	4798      	blx	r3
    fcbc:	4b11      	ldr	r3, [pc, #68]	; (fd04 <PrepareJoinRequestFrame+0x84>)
    fcbe:	4912      	ldr	r1, [pc, #72]	; (fd08 <PrepareJoinRequestFrame+0x88>)
    fcc0:	4798      	blx	r3
    fcc2:	3498      	adds	r4, #152	; 0x98
    fcc4:	8021      	strh	r1, [r4, #0]
    fcc6:	2202      	movs	r2, #2
    fcc8:	0021      	movs	r1, r4
    fcca:	4810      	ldr	r0, [pc, #64]	; (fd0c <PrepareJoinRequestFrame+0x8c>)
    fccc:	4c10      	ldr	r4, [pc, #64]	; (fd10 <PrepareJoinRequestFrame+0x90>)
    fcce:	47a0      	blx	r4
    fcd0:	4e10      	ldr	r6, [pc, #64]	; (fd14 <PrepareJoinRequestFrame+0x94>)
    fcd2:	2313      	movs	r3, #19
    fcd4:	0031      	movs	r1, r6
    fcd6:	002a      	movs	r2, r5
    fcd8:	480f      	ldr	r0, [pc, #60]	; (fd18 <PrepareJoinRequestFrame+0x98>)
    fcda:	4d10      	ldr	r5, [pc, #64]	; (fd1c <PrepareJoinRequestFrame+0x9c>)
    fcdc:	47a8      	blx	r5
    fcde:	0031      	movs	r1, r6
    fce0:	2204      	movs	r2, #4
    fce2:	a801      	add	r0, sp, #4
    fce4:	47a0      	blx	r4
    fce6:	2204      	movs	r2, #4
    fce8:	a901      	add	r1, sp, #4
    fcea:	480d      	ldr	r0, [pc, #52]	; (fd20 <PrepareJoinRequestFrame+0xa0>)
    fcec:	47a0      	blx	r4
    fcee:	2017      	movs	r0, #23
    fcf0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    fcf2:	46c0      	nop			; (mov r8, r8)
    fcf4:	20001dd1 	.word	0x20001dd1
    fcf8:	00018219 	.word	0x00018219
    fcfc:	20001ca4 	.word	0x20001ca4
    fd00:	000183cd 	.word	0x000183cd
    fd04:	00014e51 	.word	0x00014e51
    fd08:	0000ffff 	.word	0x0000ffff
    fd0c:	20001de2 	.word	0x20001de2
    fd10:	00018195 	.word	0x00018195
    fd14:	20001088 	.word	0x20001088
    fd18:	20001cc9 	.word	0x20001cc9
    fd1c:	0001292d 	.word	0x0001292d
    fd20:	20001de4 	.word	0x20001de4

0000fd24 <ConfigureRadioRx>:
    fd24:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd26:	b087      	sub	sp, #28
    fd28:	466b      	mov	r3, sp
    fd2a:	2600      	movs	r6, #0
    fd2c:	1ddc      	adds	r4, r3, #7
    fd2e:	71d8      	strb	r0, [r3, #7]
    fd30:	729e      	strb	r6, [r3, #10]
    fd32:	466a      	mov	r2, sp
    fd34:	2301      	movs	r3, #1
    fd36:	72d3      	strb	r3, [r2, #11]
    fd38:	2215      	movs	r2, #21
    fd3a:	ad03      	add	r5, sp, #12
    fd3c:	4f11      	ldr	r7, [pc, #68]	; (fd84 <ConfigureRadioRx+0x60>)
    fd3e:	9100      	str	r1, [sp, #0]
    fd40:	446a      	add	r2, sp
    fd42:	0021      	movs	r1, r4
    fd44:	2021      	movs	r0, #33	; 0x21
    fd46:	80ae      	strh	r6, [r5, #4]
    fd48:	47b8      	blx	r7
    fd4a:	2216      	movs	r2, #22
    fd4c:	0021      	movs	r1, r4
    fd4e:	446a      	add	r2, sp
    fd50:	2022      	movs	r0, #34	; 0x22
    fd52:	47b8      	blx	r7
    fd54:	2217      	movs	r2, #23
    fd56:	0021      	movs	r1, r4
    fd58:	446a      	add	r2, sp
    fd5a:	2023      	movs	r0, #35	; 0x23
    fd5c:	47b8      	blx	r7
    fd5e:	9b00      	ldr	r3, [sp, #0]
    fd60:	0028      	movs	r0, r5
    fd62:	9303      	str	r3, [sp, #12]
    fd64:	4b08      	ldr	r3, [pc, #32]	; (fd88 <ConfigureRadioRx+0x64>)
    fd66:	80ae      	strh	r6, [r5, #4]
    fd68:	4798      	blx	r3
    fd6a:	230a      	movs	r3, #10
    fd6c:	446b      	add	r3, sp
    fd6e:	0019      	movs	r1, r3
    fd70:	4c06      	ldr	r4, [pc, #24]	; (fd8c <ConfigureRadioRx+0x68>)
    fd72:	2014      	movs	r0, #20
    fd74:	47a0      	blx	r4
    fd76:	230b      	movs	r3, #11
    fd78:	446b      	add	r3, sp
    fd7a:	0019      	movs	r1, r3
    fd7c:	2006      	movs	r0, #6
    fd7e:	47a0      	blx	r4
    fd80:	b007      	add	sp, #28
    fd82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd84:	0000b321 	.word	0x0000b321
    fd88:	0000f349 	.word	0x0000f349
    fd8c:	000131d5 	.word	0x000131d5

0000fd90 <LorawanReceiveWindow1Callback>:
    fd90:	b537      	push	{r0, r1, r2, r4, r5, lr}
    fd92:	4c18      	ldr	r4, [pc, #96]	; (fdf4 <LorawanReceiveWindow1Callback+0x64>)
    fd94:	0023      	movs	r3, r4
    fd96:	3350      	adds	r3, #80	; 0x50
    fd98:	781b      	ldrb	r3, [r3, #0]
    fd9a:	b25a      	sxtb	r2, r3
    fd9c:	2a00      	cmp	r2, #0
    fd9e:	db28      	blt.n	fdf2 <LorawanReceiveWindow1Callback+0x62>
    fda0:	0022      	movs	r2, r4
    fda2:	32c8      	adds	r2, #200	; 0xc8
    fda4:	7812      	ldrb	r2, [r2, #0]
    fda6:	2a04      	cmp	r2, #4
    fda8:	d103      	bne.n	fdb2 <LorawanReceiveWindow1Callback+0x22>
    fdaa:	07db      	lsls	r3, r3, #31
    fdac:	d501      	bpl.n	fdb2 <LorawanReceiveWindow1Callback+0x22>
    fdae:	4b12      	ldr	r3, [pc, #72]	; (fdf8 <LorawanReceiveWindow1Callback+0x68>)
    fdb0:	4798      	blx	r3
    fdb2:	0021      	movs	r1, r4
    fdb4:	220e      	movs	r2, #14
    fdb6:	3150      	adds	r1, #80	; 0x50
    fdb8:	780b      	ldrb	r3, [r1, #0]
    fdba:	ad01      	add	r5, sp, #4
    fdbc:	4393      	bics	r3, r2
    fdbe:	001a      	movs	r2, r3
    fdc0:	2306      	movs	r3, #6
    fdc2:	4313      	orrs	r3, r2
    fdc4:	0022      	movs	r2, r4
    fdc6:	700b      	strb	r3, [r1, #0]
    fdc8:	3248      	adds	r2, #72	; 0x48
    fdca:	6c63      	ldr	r3, [r4, #68]	; 0x44
    fdcc:	7811      	ldrb	r1, [r2, #0]
    fdce:	0a1b      	lsrs	r3, r3, #8
    fdd0:	3449      	adds	r4, #73	; 0x49
    fdd2:	0609      	lsls	r1, r1, #24
    fdd4:	4319      	orrs	r1, r3
    fdd6:	7820      	ldrb	r0, [r4, #0]
    fdd8:	4b08      	ldr	r3, [pc, #32]	; (fdfc <LorawanReceiveWindow1Callback+0x6c>)
    fdda:	4798      	blx	r3
    fddc:	2300      	movs	r3, #0
    fdde:	702b      	strb	r3, [r5, #0]
    fde0:	466b      	mov	r3, sp
    fde2:	0021      	movs	r1, r4
    fde4:	1d9a      	adds	r2, r3, #6
    fde6:	2003      	movs	r0, #3
    fde8:	4b05      	ldr	r3, [pc, #20]	; (fe00 <LorawanReceiveWindow1Callback+0x70>)
    fdea:	4798      	blx	r3
    fdec:	0028      	movs	r0, r5
    fdee:	4b05      	ldr	r3, [pc, #20]	; (fe04 <LorawanReceiveWindow1Callback+0x74>)
    fdf0:	4798      	blx	r3
    fdf2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    fdf4:	20001ca4 	.word	0x20001ca4
    fdf8:	00012af5 	.word	0x00012af5
    fdfc:	0000fd25 	.word	0x0000fd25
    fe00:	0000b321 	.word	0x0000b321
    fe04:	00014505 	.word	0x00014505

0000fe08 <ConfigureRadioTx>:
    fe08:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe0a:	2517      	movs	r5, #23
    fe0c:	2300      	movs	r3, #0
    fe0e:	2616      	movs	r6, #22
    fe10:	2701      	movs	r7, #1
    fe12:	b087      	sub	sp, #28
    fe14:	ac01      	add	r4, sp, #4
    fe16:	446d      	add	r5, sp
    fe18:	9001      	str	r0, [sp, #4]
    fe1a:	702b      	strb	r3, [r5, #0]
    fe1c:	0020      	movs	r0, r4
    fe1e:	4b10      	ldr	r3, [pc, #64]	; (fe60 <ConfigureRadioTx+0x58>)
    fe20:	446e      	add	r6, sp
    fe22:	9102      	str	r1, [sp, #8]
    fe24:	9203      	str	r2, [sp, #12]
    fe26:	7037      	strb	r7, [r6, #0]
    fe28:	4798      	blx	r3
    fe2a:	79e3      	ldrb	r3, [r4, #7]
    fe2c:	4c0d      	ldr	r4, [pc, #52]	; (fe64 <ConfigureRadioTx+0x5c>)
    fe2e:	2b00      	cmp	r3, #0
    fe30:	d00b      	beq.n	fe4a <ConfigureRadioTx+0x42>
    fe32:	2391      	movs	r3, #145	; 0x91
    fe34:	4a0c      	ldr	r2, [pc, #48]	; (fe68 <ConfigureRadioTx+0x60>)
    fe36:	005b      	lsls	r3, r3, #1
    fe38:	54d7      	strb	r7, [r2, r3]
    fe3a:	490c      	ldr	r1, [pc, #48]	; (fe6c <ConfigureRadioTx+0x64>)
    fe3c:	200b      	movs	r0, #11
    fe3e:	4b0c      	ldr	r3, [pc, #48]	; (fe70 <ConfigureRadioTx+0x68>)
    fe40:	4798      	blx	r3
    fe42:	210a      	movs	r1, #10
    fe44:	200b      	movs	r0, #11
    fe46:	4469      	add	r1, sp
    fe48:	47a0      	blx	r4
    fe4a:	a903      	add	r1, sp, #12
    fe4c:	2004      	movs	r0, #4
    fe4e:	47a0      	blx	r4
    fe50:	0031      	movs	r1, r6
    fe52:	2014      	movs	r0, #20
    fe54:	47a0      	blx	r4
    fe56:	0029      	movs	r1, r5
    fe58:	2006      	movs	r0, #6
    fe5a:	47a0      	blx	r4
    fe5c:	b007      	add	sp, #28
    fe5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe60:	0000f349 	.word	0x0000f349
    fe64:	000131d5 	.word	0x000131d5
    fe68:	20001ca4 	.word	0x20001ca4
    fe6c:	20001dc5 	.word	0x20001dc5
    fe70:	000130e9 	.word	0x000130e9

0000fe74 <LorawanGetChAndInitiateRadioTransmit>:
    fe74:	2301      	movs	r3, #1
    fe76:	b530      	push	{r4, r5, lr}
    fe78:	4c46      	ldr	r4, [pc, #280]	; (ff94 <LorawanGetChAndInitiateRadioTransmit+0x120>)
    fe7a:	b089      	sub	sp, #36	; 0x24
    fe7c:	a902      	add	r1, sp, #8
    fe7e:	700b      	strb	r3, [r1, #0]
    fe80:	0023      	movs	r3, r4
    fe82:	33b5      	adds	r3, #181	; 0xb5
    fe84:	781b      	ldrb	r3, [r3, #0]
    fe86:	704b      	strb	r3, [r1, #1]
    fe88:	0023      	movs	r3, r4
    fe8a:	33b3      	adds	r3, #179	; 0xb3
    fe8c:	781b      	ldrb	r3, [r3, #0]
    fe8e:	708b      	strb	r3, [r1, #2]
    fe90:	0023      	movs	r3, r4
    fe92:	33c8      	adds	r3, #200	; 0xc8
    fe94:	781b      	ldrb	r3, [r3, #0]
    fe96:	2b01      	cmp	r3, #1
    fe98:	d108      	bne.n	feac <LorawanGetChAndInitiateRadioTransmit+0x38>
    fe9a:	0020      	movs	r0, r4
    fe9c:	220e      	movs	r2, #14
    fe9e:	3050      	adds	r0, #80	; 0x50
    fea0:	7803      	ldrb	r3, [r0, #0]
    fea2:	4393      	bics	r3, r2
    fea4:	001a      	movs	r2, r3
    fea6:	230c      	movs	r3, #12
    fea8:	4313      	orrs	r3, r2
    feaa:	7003      	strb	r3, [r0, #0]
    feac:	aa05      	add	r2, sp, #20
    feae:	202d      	movs	r0, #45	; 0x2d
    feb0:	4d39      	ldr	r5, [pc, #228]	; (ff98 <LorawanGetChAndInitiateRadioTransmit+0x124>)
    feb2:	47a8      	blx	r5
    feb4:	0023      	movs	r3, r4
    feb6:	2808      	cmp	r0, #8
    feb8:	d132      	bne.n	ff20 <LorawanGetChAndInitiateRadioTransmit+0xac>
    feba:	33c8      	adds	r3, #200	; 0xc8
    febc:	781b      	ldrb	r3, [r3, #0]
    febe:	ad03      	add	r5, sp, #12
    fec0:	2b04      	cmp	r3, #4
    fec2:	d104      	bne.n	fece <LorawanGetChAndInitiateRadioTransmit+0x5a>
    fec4:	3b03      	subs	r3, #3
    fec6:	702b      	strb	r3, [r5, #0]
    fec8:	0028      	movs	r0, r5
    feca:	4b34      	ldr	r3, [pc, #208]	; (ff9c <LorawanGetChAndInitiateRadioTransmit+0x128>)
    fecc:	4798      	blx	r3
    fece:	9805      	ldr	r0, [sp, #20]
    fed0:	4b33      	ldr	r3, [pc, #204]	; (ffa0 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
    fed2:	9906      	ldr	r1, [sp, #24]
    fed4:	9a07      	ldr	r2, [sp, #28]
    fed6:	4798      	blx	r3
    fed8:	0023      	movs	r3, r4
    feda:	339a      	adds	r3, #154	; 0x9a
    fedc:	881b      	ldrh	r3, [r3, #0]
    fede:	0028      	movs	r0, r5
    fee0:	702b      	strb	r3, [r5, #0]
    fee2:	4b30      	ldr	r3, [pc, #192]	; (ffa4 <LorawanGetChAndInitiateRadioTransmit+0x130>)
    fee4:	606b      	str	r3, [r5, #4]
    fee6:	4b30      	ldr	r3, [pc, #192]	; (ffa8 <LorawanGetChAndInitiateRadioTransmit+0x134>)
    fee8:	4798      	blx	r3
    feea:	2800      	cmp	r0, #0
    feec:	d109      	bne.n	ff02 <LorawanGetChAndInitiateRadioTransmit+0x8e>
    feee:	220e      	movs	r2, #14
    fef0:	3450      	adds	r4, #80	; 0x50
    fef2:	7823      	ldrb	r3, [r4, #0]
    fef4:	4393      	bics	r3, r2
    fef6:	001a      	movs	r2, r3
    fef8:	2302      	movs	r3, #2
    fefa:	4313      	orrs	r3, r2
    fefc:	7023      	strb	r3, [r4, #0]
    fefe:	b009      	add	sp, #36	; 0x24
    ff00:	bd30      	pop	{r4, r5, pc}
    ff02:	232c      	movs	r3, #44	; 0x2c
    ff04:	2200      	movs	r2, #0
    ff06:	33ff      	adds	r3, #255	; 0xff
    ff08:	5ce3      	ldrb	r3, [r4, r3]
    ff0a:	4928      	ldr	r1, [pc, #160]	; (ffac <LorawanGetChAndInitiateRadioTransmit+0x138>)
    ff0c:	34c7      	adds	r4, #199	; 0xc7
    ff0e:	4359      	muls	r1, r3
    ff10:	4b27      	ldr	r3, [pc, #156]	; (ffb0 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    ff12:	7820      	ldrb	r0, [r4, #0]
    ff14:	18c9      	adds	r1, r1, r3
    ff16:	4b27      	ldr	r3, [pc, #156]	; (ffb4 <LorawanGetChAndInitiateRadioTransmit+0x140>)
    ff18:	9200      	str	r2, [sp, #0]
    ff1a:	4c27      	ldr	r4, [pc, #156]	; (ffb8 <LorawanGetChAndInitiateRadioTransmit+0x144>)
    ff1c:	47a0      	blx	r4
    ff1e:	e7ee      	b.n	fefe <LorawanGetChAndInitiateRadioTransmit+0x8a>
    ff20:	33e4      	adds	r3, #228	; 0xe4
    ff22:	781b      	ldrb	r3, [r3, #0]
    ff24:	079a      	lsls	r2, r3, #30
    ff26:	d516      	bpl.n	ff56 <LorawanGetChAndInitiateRadioTransmit+0xe2>
    ff28:	aa03      	add	r2, sp, #12
    ff2a:	4924      	ldr	r1, [pc, #144]	; (ffbc <LorawanGetChAndInitiateRadioTransmit+0x148>)
    ff2c:	2024      	movs	r0, #36	; 0x24
    ff2e:	47a8      	blx	r5
    ff30:	9b03      	ldr	r3, [sp, #12]
    ff32:	1c5a      	adds	r2, r3, #1
    ff34:	d001      	beq.n	ff3a <LorawanGetChAndInitiateRadioTransmit+0xc6>
    ff36:	3314      	adds	r3, #20
    ff38:	9303      	str	r3, [sp, #12]
    ff3a:	232c      	movs	r3, #44	; 0x2c
    ff3c:	21fa      	movs	r1, #250	; 0xfa
    ff3e:	33ff      	adds	r3, #255	; 0xff
    ff40:	5ce3      	ldrb	r3, [r4, r3]
    ff42:	9a03      	ldr	r2, [sp, #12]
    ff44:	0089      	lsls	r1, r1, #2
    ff46:	1ad3      	subs	r3, r2, r3
    ff48:	2200      	movs	r2, #0
    ff4a:	4359      	muls	r1, r3
    ff4c:	34bd      	adds	r4, #189	; 0xbd
    ff4e:	7820      	ldrb	r0, [r4, #0]
    ff50:	9200      	str	r2, [sp, #0]
    ff52:	4b1b      	ldr	r3, [pc, #108]	; (ffc0 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    ff54:	e7e1      	b.n	ff1a <LorawanGetChAndInitiateRadioTransmit+0xa6>
    ff56:	075b      	lsls	r3, r3, #29
    ff58:	d508      	bpl.n	ff6c <LorawanGetChAndInitiateRadioTransmit+0xf8>
    ff5a:	aa03      	add	r2, sp, #12
    ff5c:	4917      	ldr	r1, [pc, #92]	; (ffbc <LorawanGetChAndInitiateRadioTransmit+0x148>)
    ff5e:	2031      	movs	r0, #49	; 0x31
    ff60:	47a8      	blx	r5
    ff62:	9b03      	ldr	r3, [sp, #12]
    ff64:	1c5a      	adds	r2, r3, #1
    ff66:	d0e8      	beq.n	ff3a <LorawanGetChAndInitiateRadioTransmit+0xc6>
    ff68:	3301      	adds	r3, #1
    ff6a:	e7e5      	b.n	ff38 <LorawanGetChAndInitiateRadioTransmit+0xc4>
    ff6c:	0023      	movs	r3, r4
    ff6e:	2201      	movs	r2, #1
    ff70:	3360      	adds	r3, #96	; 0x60
    ff72:	781b      	ldrb	r3, [r3, #0]
    ff74:	401a      	ands	r2, r3
    ff76:	d109      	bne.n	ff8c <LorawanGetChAndInitiateRadioTransmit+0x118>
    ff78:	232c      	movs	r3, #44	; 0x2c
    ff7a:	33ff      	adds	r3, #255	; 0xff
    ff7c:	5ce3      	ldrb	r3, [r4, r3]
    ff7e:	490b      	ldr	r1, [pc, #44]	; (ffac <LorawanGetChAndInitiateRadioTransmit+0x138>)
    ff80:	34bd      	adds	r4, #189	; 0xbd
    ff82:	4359      	muls	r1, r3
    ff84:	4b0a      	ldr	r3, [pc, #40]	; (ffb0 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    ff86:	7820      	ldrb	r0, [r4, #0]
    ff88:	18c9      	adds	r1, r1, r3
    ff8a:	e7e1      	b.n	ff50 <LorawanGetChAndInitiateRadioTransmit+0xdc>
    ff8c:	4b0d      	ldr	r3, [pc, #52]	; (ffc4 <LorawanGetChAndInitiateRadioTransmit+0x150>)
    ff8e:	4798      	blx	r3
    ff90:	e7b5      	b.n	fefe <LorawanGetChAndInitiateRadioTransmit+0x8a>
    ff92:	46c0      	nop			; (mov r8, r8)
    ff94:	20001ca4 	.word	0x20001ca4
    ff98:	0000b321 	.word	0x0000b321
    ff9c:	00014505 	.word	0x00014505
    ffa0:	0000fe09 	.word	0x0000fe09
    ffa4:	20001de1 	.word	0x20001de1
    ffa8:	00013b25 	.word	0x00013b25
    ffac:	fffffc18 	.word	0xfffffc18
    ffb0:	001e8480 	.word	0x001e8480
    ffb4:	0000ffc9 	.word	0x0000ffc9
    ffb8:	0000c4b5 	.word	0x0000c4b5
    ffbc:	20001d57 	.word	0x20001d57
    ffc0:	0001007d 	.word	0x0001007d
    ffc4:	0000f801 	.word	0x0000f801

0000ffc8 <TransmissionErrorCallback>:
    ffc8:	b530      	push	{r4, r5, lr}
    ffca:	4c22      	ldr	r4, [pc, #136]	; (10054 <TransmissionErrorCallback+0x8c>)
    ffcc:	2501      	movs	r5, #1
    ffce:	0023      	movs	r3, r4
    ffd0:	b08b      	sub	sp, #44	; 0x2c
    ffd2:	a903      	add	r1, sp, #12
    ffd4:	700d      	strb	r5, [r1, #0]
    ffd6:	33b5      	adds	r3, #181	; 0xb5
    ffd8:	781b      	ldrb	r3, [r3, #0]
    ffda:	aa07      	add	r2, sp, #28
    ffdc:	704b      	strb	r3, [r1, #1]
    ffde:	0023      	movs	r3, r4
    ffe0:	33b3      	adds	r3, #179	; 0xb3
    ffe2:	781b      	ldrb	r3, [r3, #0]
    ffe4:	202d      	movs	r0, #45	; 0x2d
    ffe6:	708b      	strb	r3, [r1, #2]
    ffe8:	4b1b      	ldr	r3, [pc, #108]	; (10058 <TransmissionErrorCallback+0x90>)
    ffea:	4798      	blx	r3
    ffec:	2808      	cmp	r0, #8
    ffee:	d121      	bne.n	10034 <TransmissionErrorCallback+0x6c>
    fff0:	a804      	add	r0, sp, #16
    fff2:	4b1a      	ldr	r3, [pc, #104]	; (1005c <TransmissionErrorCallback+0x94>)
    fff4:	7005      	strb	r5, [r0, #0]
    fff6:	4798      	blx	r3
    fff8:	9807      	ldr	r0, [sp, #28]
    fffa:	4b19      	ldr	r3, [pc, #100]	; (10060 <TransmissionErrorCallback+0x98>)
    fffc:	9908      	ldr	r1, [sp, #32]
    fffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10000:	4798      	blx	r3
   10002:	0023      	movs	r3, r4
   10004:	339a      	adds	r3, #154	; 0x9a
   10006:	881b      	ldrh	r3, [r3, #0]
   10008:	a805      	add	r0, sp, #20
   1000a:	7003      	strb	r3, [r0, #0]
   1000c:	4b15      	ldr	r3, [pc, #84]	; (10064 <TransmissionErrorCallback+0x9c>)
   1000e:	6043      	str	r3, [r0, #4]
   10010:	4b15      	ldr	r3, [pc, #84]	; (10068 <TransmissionErrorCallback+0xa0>)
   10012:	4798      	blx	r3
   10014:	2800      	cmp	r0, #0
   10016:	d01b      	beq.n	10050 <TransmissionErrorCallback+0x88>
   10018:	0023      	movs	r3, r4
   1001a:	33c8      	adds	r3, #200	; 0xc8
   1001c:	781b      	ldrb	r3, [r3, #0]
   1001e:	42ab      	cmp	r3, r5
   10020:	d108      	bne.n	10034 <TransmissionErrorCallback+0x6c>
   10022:	0021      	movs	r1, r4
   10024:	220e      	movs	r2, #14
   10026:	3150      	adds	r1, #80	; 0x50
   10028:	780b      	ldrb	r3, [r1, #0]
   1002a:	4393      	bics	r3, r2
   1002c:	001a      	movs	r2, r3
   1002e:	230c      	movs	r3, #12
   10030:	4313      	orrs	r3, r2
   10032:	700b      	strb	r3, [r1, #0]
   10034:	232c      	movs	r3, #44	; 0x2c
   10036:	2200      	movs	r2, #0
   10038:	33ff      	adds	r3, #255	; 0xff
   1003a:	5ce3      	ldrb	r3, [r4, r3]
   1003c:	490b      	ldr	r1, [pc, #44]	; (1006c <TransmissionErrorCallback+0xa4>)
   1003e:	34c7      	adds	r4, #199	; 0xc7
   10040:	4359      	muls	r1, r3
   10042:	4b0b      	ldr	r3, [pc, #44]	; (10070 <TransmissionErrorCallback+0xa8>)
   10044:	7820      	ldrb	r0, [r4, #0]
   10046:	18c9      	adds	r1, r1, r3
   10048:	9200      	str	r2, [sp, #0]
   1004a:	4b0a      	ldr	r3, [pc, #40]	; (10074 <TransmissionErrorCallback+0xac>)
   1004c:	4c0a      	ldr	r4, [pc, #40]	; (10078 <TransmissionErrorCallback+0xb0>)
   1004e:	47a0      	blx	r4
   10050:	b00b      	add	sp, #44	; 0x2c
   10052:	bd30      	pop	{r4, r5, pc}
   10054:	20001ca4 	.word	0x20001ca4
   10058:	0000b321 	.word	0x0000b321
   1005c:	00014505 	.word	0x00014505
   10060:	0000fe09 	.word	0x0000fe09
   10064:	20001de1 	.word	0x20001de1
   10068:	00013b25 	.word	0x00013b25
   1006c:	fffffc18 	.word	0xfffffc18
   10070:	001e8480 	.word	0x001e8480
   10074:	0000ffc9 	.word	0x0000ffc9
   10078:	0000c4b5 	.word	0x0000c4b5

0001007c <UnconfirmedTransmissionCallback>:
   1007c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1007e:	4c38      	ldr	r4, [pc, #224]	; (10160 <UnconfirmedTransmissionCallback+0xe4>)
   10080:	b08b      	sub	sp, #44	; 0x2c
   10082:	0023      	movs	r3, r4
   10084:	339a      	adds	r3, #154	; 0x9a
   10086:	881b      	ldrh	r3, [r3, #0]
   10088:	af05      	add	r7, sp, #20
   1008a:	703b      	strb	r3, [r7, #0]
   1008c:	4b35      	ldr	r3, [pc, #212]	; (10164 <UnconfirmedTransmissionCallback+0xe8>)
   1008e:	a903      	add	r1, sp, #12
   10090:	9306      	str	r3, [sp, #24]
   10092:	2301      	movs	r3, #1
   10094:	700b      	strb	r3, [r1, #0]
   10096:	0023      	movs	r3, r4
   10098:	0026      	movs	r6, r4
   1009a:	33b5      	adds	r3, #181	; 0xb5
   1009c:	781b      	ldrb	r3, [r3, #0]
   1009e:	36b3      	adds	r6, #179	; 0xb3
   100a0:	704b      	strb	r3, [r1, #1]
   100a2:	7833      	ldrb	r3, [r6, #0]
   100a4:	aa07      	add	r2, sp, #28
   100a6:	202d      	movs	r0, #45	; 0x2d
   100a8:	4d2f      	ldr	r5, [pc, #188]	; (10168 <UnconfirmedTransmissionCallback+0xec>)
   100aa:	708b      	strb	r3, [r1, #2]
   100ac:	47a8      	blx	r5
   100ae:	2808      	cmp	r0, #8
   100b0:	d12c      	bne.n	1010c <UnconfirmedTransmissionCallback+0x90>
   100b2:	2301      	movs	r3, #1
   100b4:	a804      	add	r0, sp, #16
   100b6:	7003      	strb	r3, [r0, #0]
   100b8:	4b2c      	ldr	r3, [pc, #176]	; (1016c <UnconfirmedTransmissionCallback+0xf0>)
   100ba:	4798      	blx	r3
   100bc:	9807      	ldr	r0, [sp, #28]
   100be:	4b2c      	ldr	r3, [pc, #176]	; (10170 <UnconfirmedTransmissionCallback+0xf4>)
   100c0:	9908      	ldr	r1, [sp, #32]
   100c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   100c4:	4798      	blx	r3
   100c6:	0038      	movs	r0, r7
   100c8:	4b2a      	ldr	r3, [pc, #168]	; (10174 <UnconfirmedTransmissionCallback+0xf8>)
   100ca:	4798      	blx	r3
   100cc:	2800      	cmp	r0, #0
   100ce:	d01b      	beq.n	10108 <UnconfirmedTransmissionCallback+0x8c>
   100d0:	0023      	movs	r3, r4
   100d2:	33c8      	adds	r3, #200	; 0xc8
   100d4:	781b      	ldrb	r3, [r3, #0]
   100d6:	2b01      	cmp	r3, #1
   100d8:	d108      	bne.n	100ec <UnconfirmedTransmissionCallback+0x70>
   100da:	0021      	movs	r1, r4
   100dc:	220e      	movs	r2, #14
   100de:	3150      	adds	r1, #80	; 0x50
   100e0:	780b      	ldrb	r3, [r1, #0]
   100e2:	4393      	bics	r3, r2
   100e4:	001a      	movs	r2, r3
   100e6:	230c      	movs	r3, #12
   100e8:	4313      	orrs	r3, r2
   100ea:	700b      	strb	r3, [r1, #0]
   100ec:	232c      	movs	r3, #44	; 0x2c
   100ee:	2200      	movs	r2, #0
   100f0:	33ff      	adds	r3, #255	; 0xff
   100f2:	5ce3      	ldrb	r3, [r4, r3]
   100f4:	4920      	ldr	r1, [pc, #128]	; (10178 <UnconfirmedTransmissionCallback+0xfc>)
   100f6:	34c7      	adds	r4, #199	; 0xc7
   100f8:	4359      	muls	r1, r3
   100fa:	4b20      	ldr	r3, [pc, #128]	; (1017c <UnconfirmedTransmissionCallback+0x100>)
   100fc:	7820      	ldrb	r0, [r4, #0]
   100fe:	18c9      	adds	r1, r1, r3
   10100:	4b1f      	ldr	r3, [pc, #124]	; (10180 <UnconfirmedTransmissionCallback+0x104>)
   10102:	9200      	str	r2, [sp, #0]
   10104:	4c1f      	ldr	r4, [pc, #124]	; (10184 <UnconfirmedTransmissionCallback+0x108>)
   10106:	47a0      	blx	r4
   10108:	b00b      	add	sp, #44	; 0x2c
   1010a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1010c:	23fa      	movs	r3, #250	; 0xfa
   1010e:	00db      	lsls	r3, r3, #3
   10110:	9304      	str	r3, [sp, #16]
   10112:	0023      	movs	r3, r4
   10114:	33e4      	adds	r3, #228	; 0xe4
   10116:	781b      	ldrb	r3, [r3, #0]
   10118:	079a      	lsls	r2, r3, #30
   1011a:	d516      	bpl.n	1014a <UnconfirmedTransmissionCallback+0xce>
   1011c:	aa04      	add	r2, sp, #16
   1011e:	0031      	movs	r1, r6
   10120:	2024      	movs	r0, #36	; 0x24
   10122:	47a8      	blx	r5
   10124:	9b04      	ldr	r3, [sp, #16]
   10126:	1c5a      	adds	r2, r3, #1
   10128:	d001      	beq.n	1012e <UnconfirmedTransmissionCallback+0xb2>
   1012a:	3314      	adds	r3, #20
   1012c:	9304      	str	r3, [sp, #16]
   1012e:	232c      	movs	r3, #44	; 0x2c
   10130:	33ff      	adds	r3, #255	; 0xff
   10132:	5ce3      	ldrb	r3, [r4, r3]
   10134:	9a04      	ldr	r2, [sp, #16]
   10136:	21fa      	movs	r1, #250	; 0xfa
   10138:	1ad3      	subs	r3, r2, r3
   1013a:	2200      	movs	r2, #0
   1013c:	0089      	lsls	r1, r1, #2
   1013e:	34bd      	adds	r4, #189	; 0xbd
   10140:	4359      	muls	r1, r3
   10142:	7820      	ldrb	r0, [r4, #0]
   10144:	4b10      	ldr	r3, [pc, #64]	; (10188 <UnconfirmedTransmissionCallback+0x10c>)
   10146:	9200      	str	r2, [sp, #0]
   10148:	e7dc      	b.n	10104 <UnconfirmedTransmissionCallback+0x88>
   1014a:	075b      	lsls	r3, r3, #29
   1014c:	d5ef      	bpl.n	1012e <UnconfirmedTransmissionCallback+0xb2>
   1014e:	aa04      	add	r2, sp, #16
   10150:	0031      	movs	r1, r6
   10152:	2031      	movs	r0, #49	; 0x31
   10154:	47a8      	blx	r5
   10156:	9b04      	ldr	r3, [sp, #16]
   10158:	1c5a      	adds	r2, r3, #1
   1015a:	d0e8      	beq.n	1012e <UnconfirmedTransmissionCallback+0xb2>
   1015c:	3301      	adds	r3, #1
   1015e:	e7e5      	b.n	1012c <UnconfirmedTransmissionCallback+0xb0>
   10160:	20001ca4 	.word	0x20001ca4
   10164:	20001de1 	.word	0x20001de1
   10168:	0000b321 	.word	0x0000b321
   1016c:	00014505 	.word	0x00014505
   10170:	0000fe09 	.word	0x0000fe09
   10174:	00013b25 	.word	0x00013b25
   10178:	fffffc18 	.word	0xfffffc18
   1017c:	001e8480 	.word	0x001e8480
   10180:	0000ffc9 	.word	0x0000ffc9
   10184:	0000c4b5 	.word	0x0000c4b5
   10188:	0001007d 	.word	0x0001007d

0001018c <UpdateJoinInProgress>:
   1018c:	b570      	push	{r4, r5, r6, lr}
   1018e:	2504      	movs	r5, #4
   10190:	4c0a      	ldr	r4, [pc, #40]	; (101bc <UpdateJoinInProgress+0x30>)
   10192:	0002      	movs	r2, r0
   10194:	0021      	movs	r1, r4
   10196:	3460      	adds	r4, #96	; 0x60
   10198:	7826      	ldrb	r6, [r4, #0]
   1019a:	2001      	movs	r0, #1
   1019c:	4335      	orrs	r5, r6
   1019e:	7025      	strb	r5, [r4, #0]
   101a0:	2407      	movs	r4, #7
   101a2:	4022      	ands	r2, r4
   101a4:	4082      	lsls	r2, r0
   101a6:	3150      	adds	r1, #80	; 0x50
   101a8:	780b      	ldrb	r3, [r1, #0]
   101aa:	1924      	adds	r4, r4, r4
   101ac:	4383      	bics	r3, r0
   101ae:	43a3      	bics	r3, r4
   101b0:	4313      	orrs	r3, r2
   101b2:	700b      	strb	r3, [r1, #0]
   101b4:	210b      	movs	r1, #11
   101b6:	4b02      	ldr	r3, [pc, #8]	; (101c0 <UpdateJoinInProgress+0x34>)
   101b8:	4798      	blx	r3
   101ba:	bd70      	pop	{r4, r5, r6, pc}
   101bc:	20001ca4 	.word	0x20001ca4
   101c0:	0000b745 	.word	0x0000b745

000101c4 <LORAWAN_Join>:
   101c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   101c6:	4c2c      	ldr	r4, [pc, #176]	; (10278 <LORAWAN_Join+0xb4>)
   101c8:	0005      	movs	r5, r0
   101ca:	0023      	movs	r3, r4
   101cc:	3350      	adds	r3, #80	; 0x50
   101ce:	781b      	ldrb	r3, [r3, #0]
   101d0:	210f      	movs	r1, #15
   101d2:	b25a      	sxtb	r2, r3
   101d4:	2a00      	cmp	r2, #0
   101d6:	db3c      	blt.n	10252 <LORAWAN_Join+0x8e>
   101d8:	3903      	subs	r1, #3
   101da:	065b      	lsls	r3, r3, #25
   101dc:	d439      	bmi.n	10252 <LORAWAN_Join+0x8e>
   101de:	0023      	movs	r3, r4
   101e0:	3360      	adds	r3, #96	; 0x60
   101e2:	781b      	ldrb	r3, [r3, #0]
   101e4:	3107      	adds	r1, #7
   101e6:	075b      	lsls	r3, r3, #29
   101e8:	d433      	bmi.n	10252 <LORAWAN_Join+0x8e>
   101ea:	0023      	movs	r3, r4
   101ec:	33c8      	adds	r3, #200	; 0xc8
   101ee:	781b      	ldrb	r3, [r3, #0]
   101f0:	2b04      	cmp	r3, #4
   101f2:	d029      	beq.n	10248 <LORAWAN_Join+0x84>
   101f4:	0023      	movs	r3, r4
   101f6:	33c8      	adds	r3, #200	; 0xc8
   101f8:	781b      	ldrb	r3, [r3, #0]
   101fa:	2b01      	cmp	r3, #1
   101fc:	d105      	bne.n	1020a <LORAWAN_Join+0x46>
   101fe:	0023      	movs	r3, r4
   10200:	3350      	adds	r3, #80	; 0x50
   10202:	781a      	ldrb	r2, [r3, #0]
   10204:	230e      	movs	r3, #14
   10206:	421a      	tst	r2, r3
   10208:	d122      	bne.n	10250 <LORAWAN_Join+0x8c>
   1020a:	2102      	movs	r1, #2
   1020c:	2001      	movs	r0, #1
   1020e:	4e1b      	ldr	r6, [pc, #108]	; (1027c <LORAWAN_Join+0xb8>)
   10210:	7025      	strb	r5, [r4, #0]
   10212:	47b0      	blx	r6
   10214:	0023      	movs	r3, r4
   10216:	33aa      	adds	r3, #170	; 0xaa
   10218:	781b      	ldrb	r3, [r3, #0]
   1021a:	2d00      	cmp	r5, #0
   1021c:	d11b      	bne.n	10256 <LORAWAN_Join+0x92>
   1021e:	210b      	movs	r1, #11
   10220:	400b      	ands	r3, r1
   10222:	428b      	cmp	r3, r1
   10224:	d115      	bne.n	10252 <LORAWAN_Join+0x8e>
   10226:	0022      	movs	r2, r4
   10228:	2001      	movs	r0, #1
   1022a:	3250      	adds	r2, #80	; 0x50
   1022c:	7813      	ldrb	r3, [r2, #0]
   1022e:	3460      	adds	r4, #96	; 0x60
   10230:	4383      	bics	r3, r0
   10232:	7013      	strb	r3, [r2, #0]
   10234:	2304      	movs	r3, #4
   10236:	7822      	ldrb	r2, [r4, #0]
   10238:	4313      	orrs	r3, r2
   1023a:	7023      	strb	r3, [r4, #0]
   1023c:	47b0      	blx	r6
   1023e:	0028      	movs	r0, r5
   10240:	4b0f      	ldr	r3, [pc, #60]	; (10280 <LORAWAN_Join+0xbc>)
   10242:	4798      	blx	r3
   10244:	2108      	movs	r1, #8
   10246:	e004      	b.n	10252 <LORAWAN_Join+0x8e>
   10248:	4b0e      	ldr	r3, [pc, #56]	; (10284 <LORAWAN_Join+0xc0>)
   1024a:	4798      	blx	r3
   1024c:	2808      	cmp	r0, #8
   1024e:	d0d1      	beq.n	101f4 <LORAWAN_Join+0x30>
   10250:	2111      	movs	r1, #17
   10252:	0008      	movs	r0, r1
   10254:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   10256:	2234      	movs	r2, #52	; 0x34
   10258:	210b      	movs	r1, #11
   1025a:	4013      	ands	r3, r2
   1025c:	4293      	cmp	r3, r2
   1025e:	d1f8      	bne.n	10252 <LORAWAN_Join+0x8e>
   10260:	2007      	movs	r0, #7
   10262:	4b09      	ldr	r3, [pc, #36]	; (10288 <LORAWAN_Join+0xc4>)
   10264:	4798      	blx	r3
   10266:	2200      	movs	r2, #0
   10268:	34c6      	adds	r4, #198	; 0xc6
   1026a:	7820      	ldrb	r0, [r4, #0]
   1026c:	4b07      	ldr	r3, [pc, #28]	; (1028c <LORAWAN_Join+0xc8>)
   1026e:	9200      	str	r2, [sp, #0]
   10270:	4907      	ldr	r1, [pc, #28]	; (10290 <LORAWAN_Join+0xcc>)
   10272:	4c08      	ldr	r4, [pc, #32]	; (10294 <LORAWAN_Join+0xd0>)
   10274:	47a0      	blx	r4
   10276:	e7e5      	b.n	10244 <LORAWAN_Join+0x80>
   10278:	20001ca4 	.word	0x20001ca4
   1027c:	0000b745 	.word	0x0000b745
   10280:	00013065 	.word	0x00013065
   10284:	00012abd 	.word	0x00012abd
   10288:	0001018d 	.word	0x0001018d
   1028c:	0000f22d 	.word	0x0000f22d
   10290:	0000c350 	.word	0x0000c350
   10294:	0000c4b5 	.word	0x0000c4b5

00010298 <EncryptFRMPayload>:
   10298:	b5f0      	push	{r4, r5, r6, r7, lr}
   1029a:	0007      	movs	r7, r0
   1029c:	2401      	movs	r4, #1
   1029e:	b089      	sub	sp, #36	; 0x24
   102a0:	9305      	str	r3, [sp, #20]
   102a2:	ab0e      	add	r3, sp, #56	; 0x38
   102a4:	9204      	str	r2, [sp, #16]
   102a6:	cb04      	ldmia	r3!, {r2}
   102a8:	9103      	str	r1, [sp, #12]
   102aa:	781d      	ldrb	r5, [r3, #0]
   102ac:	090b      	lsrs	r3, r1, #4
   102ae:	9206      	str	r2, [sp, #24]
   102b0:	9302      	str	r3, [sp, #8]
   102b2:	9b02      	ldr	r3, [sp, #8]
   102b4:	429c      	cmp	r4, r3
   102b6:	d922      	bls.n	102fe <EncryptFRMPayload+0x66>
   102b8:	260f      	movs	r6, #15
   102ba:	9b03      	ldr	r3, [sp, #12]
   102bc:	4033      	ands	r3, r6
   102be:	1e1e      	subs	r6, r3, #0
   102c0:	d01b      	beq.n	102fa <EncryptFRMPayload+0x62>
   102c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   102c4:	0022      	movs	r2, r4
   102c6:	9300      	str	r3, [sp, #0]
   102c8:	9905      	ldr	r1, [sp, #20]
   102ca:	2301      	movs	r3, #1
   102cc:	9804      	ldr	r0, [sp, #16]
   102ce:	4c1d      	ldr	r4, [pc, #116]	; (10344 <EncryptFRMPayload+0xac>)
   102d0:	47a0      	blx	r4
   102d2:	4c1d      	ldr	r4, [pc, #116]	; (10348 <EncryptFRMPayload+0xb0>)
   102d4:	4b1d      	ldr	r3, [pc, #116]	; (1034c <EncryptFRMPayload+0xb4>)
   102d6:	9906      	ldr	r1, [sp, #24]
   102d8:	0020      	movs	r0, r4
   102da:	4798      	blx	r3
   102dc:	9b02      	ldr	r3, [sp, #8]
   102de:	011a      	lsls	r2, r3, #4
   102e0:	2300      	movs	r3, #0
   102e2:	18ba      	adds	r2, r7, r2
   102e4:	5d1f      	ldrb	r7, [r3, r4]
   102e6:	5cd0      	ldrb	r0, [r2, r3]
   102e8:	18e9      	adds	r1, r5, r3
   102ea:	4078      	eors	r0, r7
   102ec:	9f10      	ldr	r7, [sp, #64]	; 0x40
   102ee:	b2c9      	uxtb	r1, r1
   102f0:	3301      	adds	r3, #1
   102f2:	5478      	strb	r0, [r7, r1]
   102f4:	b2d9      	uxtb	r1, r3
   102f6:	428e      	cmp	r6, r1
   102f8:	d8f4      	bhi.n	102e4 <EncryptFRMPayload+0x4c>
   102fa:	b009      	add	sp, #36	; 0x24
   102fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   102fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10300:	0022      	movs	r2, r4
   10302:	9300      	str	r3, [sp, #0]
   10304:	9905      	ldr	r1, [sp, #20]
   10306:	2301      	movs	r3, #1
   10308:	9804      	ldr	r0, [sp, #16]
   1030a:	4e0e      	ldr	r6, [pc, #56]	; (10344 <EncryptFRMPayload+0xac>)
   1030c:	47b0      	blx	r6
   1030e:	4e0e      	ldr	r6, [pc, #56]	; (10348 <EncryptFRMPayload+0xb0>)
   10310:	4b0e      	ldr	r3, [pc, #56]	; (1034c <EncryptFRMPayload+0xb4>)
   10312:	9906      	ldr	r1, [sp, #24]
   10314:	0030      	movs	r0, r6
   10316:	4798      	blx	r3
   10318:	2300      	movs	r3, #0
   1031a:	1e62      	subs	r2, r4, #1
   1031c:	0112      	lsls	r2, r2, #4
   1031e:	18ba      	adds	r2, r7, r2
   10320:	9207      	str	r2, [sp, #28]
   10322:	9a07      	ldr	r2, [sp, #28]
   10324:	18e9      	adds	r1, r5, r3
   10326:	5cd0      	ldrb	r0, [r2, r3]
   10328:	5d9a      	ldrb	r2, [r3, r6]
   1032a:	b2c9      	uxtb	r1, r1
   1032c:	4050      	eors	r0, r2
   1032e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10330:	3301      	adds	r3, #1
   10332:	5450      	strb	r0, [r2, r1]
   10334:	2b10      	cmp	r3, #16
   10336:	d1f4      	bne.n	10322 <EncryptFRMPayload+0x8a>
   10338:	3510      	adds	r5, #16
   1033a:	3401      	adds	r4, #1
   1033c:	b2ed      	uxtb	r5, r5
   1033e:	b2e4      	uxtb	r4, r4
   10340:	e7b7      	b.n	102b2 <EncryptFRMPayload+0x1a>
   10342:	46c0      	nop			; (mov r8, r8)
   10344:	0000f309 	.word	0x0000f309
   10348:	20001088 	.word	0x20001088
   1034c:	000128ed 	.word	0x000128ed

00010350 <AssemblePacket>:
   10350:	b5f0      	push	{r4, r5, r6, r7, lr}
   10352:	2710      	movs	r7, #16
   10354:	b08b      	sub	sp, #44	; 0x2c
   10356:	9304      	str	r3, [sp, #16]
   10358:	ab04      	add	r3, sp, #16
   1035a:	829f      	strh	r7, [r3, #20]
   1035c:	2316      	movs	r3, #22
   1035e:	9205      	str	r2, [sp, #20]
   10360:	aa04      	add	r2, sp, #16
   10362:	189b      	adds	r3, r3, r2
   10364:	2500      	movs	r5, #0
   10366:	2210      	movs	r2, #16
   10368:	ac08      	add	r4, sp, #32
   1036a:	9006      	str	r0, [sp, #24]
   1036c:	9107      	str	r1, [sp, #28]
   1036e:	32ff      	adds	r2, #255	; 0xff
   10370:	0029      	movs	r1, r5
   10372:	4ea1      	ldr	r6, [pc, #644]	; (105f8 <AssemblePacket+0x2a8>)
   10374:	7025      	strb	r5, [r4, #0]
   10376:	48a1      	ldr	r0, [pc, #644]	; (105fc <AssemblePacket+0x2ac>)
   10378:	801d      	strh	r5, [r3, #0]
   1037a:	47b0      	blx	r6
   1037c:	003a      	movs	r2, r7
   1037e:	0029      	movs	r1, r5
   10380:	489f      	ldr	r0, [pc, #636]	; (10600 <AssemblePacket+0x2b0>)
   10382:	47b0      	blx	r6
   10384:	221f      	movs	r2, #31
   10386:	7823      	ldrb	r3, [r4, #0]
   10388:	9906      	ldr	r1, [sp, #24]
   1038a:	4013      	ands	r3, r2
   1038c:	42a9      	cmp	r1, r5
   1038e:	d041      	beq.n	10414 <AssemblePacket+0xc4>
   10390:	3a9f      	subs	r2, #159	; 0x9f
   10392:	4313      	orrs	r3, r2
   10394:	7023      	strb	r3, [r4, #0]
   10396:	4b9b      	ldr	r3, [pc, #620]	; (10604 <AssemblePacket+0x2b4>)
   10398:	3281      	adds	r2, #129	; 0x81
   1039a:	3360      	adds	r3, #96	; 0x60
   1039c:	7819      	ldrb	r1, [r3, #0]
   1039e:	430a      	orrs	r2, r1
   103a0:	701a      	strb	r2, [r3, #0]
   103a2:	22e0      	movs	r2, #224	; 0xe0
   103a4:	7823      	ldrb	r3, [r4, #0]
   103a6:	4895      	ldr	r0, [pc, #596]	; (105fc <AssemblePacket+0x2ac>)
   103a8:	4013      	ands	r3, r2
   103aa:	7023      	strb	r3, [r4, #0]
   103ac:	4c95      	ldr	r4, [pc, #596]	; (10604 <AssemblePacket+0x2b4>)
   103ae:	7403      	strb	r3, [r0, #16]
   103b0:	3adc      	subs	r2, #220	; 0xdc
   103b2:	4b95      	ldr	r3, [pc, #596]	; (10608 <AssemblePacket+0x2b8>)
   103b4:	3011      	adds	r0, #17
   103b6:	1c61      	adds	r1, r4, #1
   103b8:	4798      	blx	r3
   103ba:	2315      	movs	r3, #21
   103bc:	aa04      	add	r2, sp, #16
   103be:	8293      	strh	r3, [r2, #20]
   103c0:	2300      	movs	r3, #0
   103c2:	469c      	mov	ip, r3
   103c4:	0023      	movs	r3, r4
   103c6:	3350      	adds	r3, #80	; 0x50
   103c8:	781b      	ldrb	r3, [r3, #0]
   103ca:	069b      	lsls	r3, r3, #26
   103cc:	d400      	bmi.n	103d0 <AssemblePacket+0x80>
   103ce:	e0e2      	b.n	10596 <AssemblePacket+0x246>
   103d0:	0023      	movs	r3, r4
   103d2:	33b3      	adds	r3, #179	; 0xb3
   103d4:	781a      	ldrb	r2, [r3, #0]
   103d6:	4b8d      	ldr	r3, [pc, #564]	; (1060c <AssemblePacket+0x2bc>)
   103d8:	781d      	ldrb	r5, [r3, #0]
   103da:	42aa      	cmp	r2, r5
   103dc:	d200      	bcs.n	103e0 <AssemblePacket+0x90>
   103de:	e0da      	b.n	10596 <AssemblePacket+0x246>
   103e0:	0021      	movs	r1, r4
   103e2:	0026      	movs	r6, r4
   103e4:	2780      	movs	r7, #128	; 0x80
   103e6:	3196      	adds	r1, #150	; 0x96
   103e8:	880b      	ldrh	r3, [r1, #0]
   103ea:	36a8      	adds	r6, #168	; 0xa8
   103ec:	3301      	adds	r3, #1
   103ee:	b29b      	uxth	r3, r3
   103f0:	800b      	strh	r3, [r1, #0]
   103f2:	7836      	ldrb	r6, [r6, #0]
   103f4:	427f      	negs	r7, r7
   103f6:	1c38      	adds	r0, r7, #0
   103f8:	42b3      	cmp	r3, r6
   103fa:	d10f      	bne.n	1041c <AssemblePacket+0xcc>
   103fc:	0023      	movs	r3, r4
   103fe:	4662      	mov	r2, ip
   10400:	33c1      	adds	r3, #193	; 0xc1
   10402:	701a      	strb	r2, [r3, #0]
   10404:	2040      	movs	r0, #64	; 0x40
   10406:	2310      	movs	r3, #16
   10408:	3460      	adds	r4, #96	; 0x60
   1040a:	7822      	ldrb	r2, [r4, #0]
   1040c:	4338      	orrs	r0, r7
   1040e:	4313      	orrs	r3, r2
   10410:	7023      	strb	r3, [r4, #0]
   10412:	e02e      	b.n	10472 <AssemblePacket+0x122>
   10414:	2240      	movs	r2, #64	; 0x40
   10416:	4313      	orrs	r3, r2
   10418:	7023      	strb	r3, [r4, #0]
   1041a:	e7c2      	b.n	103a2 <AssemblePacket+0x52>
   1041c:	42b3      	cmp	r3, r6
   1041e:	d928      	bls.n	10472 <AssemblePacket+0x122>
   10420:	42aa      	cmp	r2, r5
   10422:	d100      	bne.n	10426 <AssemblePacket+0xd6>
   10424:	e0b0      	b.n	10588 <AssemblePacket+0x238>
   10426:	0021      	movs	r1, r4
   10428:	0020      	movs	r0, r4
   1042a:	31c1      	adds	r1, #193	; 0xc1
   1042c:	780b      	ldrb	r3, [r1, #0]
   1042e:	30a9      	adds	r0, #169	; 0xa9
   10430:	3301      	adds	r3, #1
   10432:	b2db      	uxtb	r3, r3
   10434:	700b      	strb	r3, [r1, #0]
   10436:	7800      	ldrb	r0, [r0, #0]
   10438:	3801      	subs	r0, #1
   1043a:	4283      	cmp	r3, r0
   1043c:	dbe2      	blt.n	10404 <AssemblePacket+0xb4>
   1043e:	4663      	mov	r3, ip
   10440:	700b      	strb	r3, [r1, #0]
   10442:	42aa      	cmp	r2, r5
   10444:	d90d      	bls.n	10462 <AssemblePacket+0x112>
   10446:	2313      	movs	r3, #19
   10448:	a904      	add	r1, sp, #16
   1044a:	3a01      	subs	r2, #1
   1044c:	185b      	adds	r3, r3, r1
   1044e:	4d6f      	ldr	r5, [pc, #444]	; (1060c <AssemblePacket+0x2bc>)
   10450:	701a      	strb	r2, [r3, #0]
   10452:	2613      	movs	r6, #19
   10454:	ab04      	add	r3, sp, #16
   10456:	18f6      	adds	r6, r6, r3
   10458:	782a      	ldrb	r2, [r5, #0]
   1045a:	7833      	ldrb	r3, [r6, #0]
   1045c:	429a      	cmp	r2, r3
   1045e:	d800      	bhi.n	10462 <AssemblePacket+0x112>
   10460:	e084      	b.n	1056c <AssemblePacket+0x21c>
   10462:	2210      	movs	r2, #16
   10464:	2040      	movs	r0, #64	; 0x40
   10466:	4b67      	ldr	r3, [pc, #412]	; (10604 <AssemblePacket+0x2b4>)
   10468:	4338      	orrs	r0, r7
   1046a:	3360      	adds	r3, #96	; 0x60
   1046c:	7819      	ldrb	r1, [r3, #0]
   1046e:	430a      	orrs	r2, r1
   10470:	701a      	strb	r2, [r3, #0]
   10472:	4b64      	ldr	r3, [pc, #400]	; (10604 <AssemblePacket+0x2b4>)
   10474:	2402      	movs	r4, #2
   10476:	0019      	movs	r1, r3
   10478:	3160      	adds	r1, #96	; 0x60
   1047a:	780a      	ldrb	r2, [r1, #0]
   1047c:	4222      	tst	r2, r4
   1047e:	d003      	beq.n	10488 <AssemblePacket+0x138>
   10480:	2520      	movs	r5, #32
   10482:	43a2      	bics	r2, r4
   10484:	4328      	orrs	r0, r5
   10486:	700a      	strb	r2, [r1, #0]
   10488:	2210      	movs	r2, #16
   1048a:	0004      	movs	r4, r0
   1048c:	33ac      	adds	r3, #172	; 0xac
   1048e:	781e      	ldrb	r6, [r3, #0]
   10490:	4394      	bics	r4, r2
   10492:	2e00      	cmp	r6, #0
   10494:	d003      	beq.n	1049e <AssemblePacket+0x14e>
   10496:	9b04      	ldr	r3, [sp, #16]
   10498:	2b00      	cmp	r3, #0
   1049a:	d000      	beq.n	1049e <AssemblePacket+0x14e>
   1049c:	e07d      	b.n	1059a <AssemblePacket+0x24a>
   1049e:	230f      	movs	r3, #15
   104a0:	439c      	bics	r4, r3
   104a2:	0020      	movs	r0, r4
   104a4:	ac09      	add	r4, sp, #36	; 0x24
   104a6:	8825      	ldrh	r5, [r4, #0]
   104a8:	4f54      	ldr	r7, [pc, #336]	; (105fc <AssemblePacket+0x2ac>)
   104aa:	2202      	movs	r2, #2
   104ac:	5578      	strb	r0, [r7, r5]
   104ae:	1c68      	adds	r0, r5, #1
   104b0:	b280      	uxth	r0, r0
   104b2:	19c0      	adds	r0, r0, r7
   104b4:	4956      	ldr	r1, [pc, #344]	; (10610 <AssemblePacket+0x2c0>)
   104b6:	4b54      	ldr	r3, [pc, #336]	; (10608 <AssemblePacket+0x2b8>)
   104b8:	3503      	adds	r5, #3
   104ba:	4798      	blx	r3
   104bc:	8025      	strh	r5, [r4, #0]
   104be:	2e00      	cmp	r6, #0
   104c0:	d007      	beq.n	104d2 <AssemblePacket+0x182>
   104c2:	9b04      	ldr	r3, [sp, #16]
   104c4:	2b00      	cmp	r3, #0
   104c6:	d004      	beq.n	104d2 <AssemblePacket+0x182>
   104c8:	2201      	movs	r2, #1
   104ca:	0021      	movs	r1, r4
   104cc:	0038      	movs	r0, r7
   104ce:	4b51      	ldr	r3, [pc, #324]	; (10614 <AssemblePacket+0x2c4>)
   104d0:	4798      	blx	r3
   104d2:	466a      	mov	r2, sp
   104d4:	8823      	ldrh	r3, [r4, #0]
   104d6:	7f12      	ldrb	r2, [r2, #28]
   104d8:	1c5d      	adds	r5, r3, #1
   104da:	54fa      	strb	r2, [r7, r3]
   104dc:	9b04      	ldr	r3, [sp, #16]
   104de:	b2ad      	uxth	r5, r5
   104e0:	8025      	strh	r5, [r4, #0]
   104e2:	2b00      	cmp	r3, #0
   104e4:	d062      	beq.n	105ac <AssemblePacket+0x25c>
   104e6:	001a      	movs	r2, r3
   104e8:	1978      	adds	r0, r7, r5
   104ea:	9905      	ldr	r1, [sp, #20]
   104ec:	4b46      	ldr	r3, [pc, #280]	; (10608 <AssemblePacket+0x2b8>)
   104ee:	4798      	blx	r3
   104f0:	466b      	mov	r3, sp
   104f2:	4a44      	ldr	r2, [pc, #272]	; (10604 <AssemblePacket+0x2b4>)
   104f4:	7c19      	ldrb	r1, [r3, #16]
   104f6:	6813      	ldr	r3, [r2, #0]
   104f8:	b2ed      	uxtb	r5, r5
   104fa:	0a18      	lsrs	r0, r3, #8
   104fc:	7913      	ldrb	r3, [r2, #4]
   104fe:	9501      	str	r5, [sp, #4]
   10500:	061b      	lsls	r3, r3, #24
   10502:	4303      	orrs	r3, r0
   10504:	9303      	str	r3, [sp, #12]
   10506:	4b44      	ldr	r3, [pc, #272]	; (10618 <AssemblePacket+0x2c8>)
   10508:	9702      	str	r7, [sp, #8]
   1050a:	9300      	str	r3, [sp, #0]
   1050c:	6d53      	ldr	r3, [r2, #84]	; 0x54
   1050e:	9805      	ldr	r0, [sp, #20]
   10510:	2200      	movs	r2, #0
   10512:	4d42      	ldr	r5, [pc, #264]	; (1061c <AssemblePacket+0x2cc>)
   10514:	47a8      	blx	r5
   10516:	8823      	ldrh	r3, [r4, #0]
   10518:	9a04      	ldr	r2, [sp, #16]
   1051a:	189b      	adds	r3, r3, r2
   1051c:	8023      	strh	r3, [r4, #0]
   1051e:	4c39      	ldr	r4, [pc, #228]	; (10604 <AssemblePacket+0x2b4>)
   10520:	ae09      	add	r6, sp, #36	; 0x24
   10522:	6823      	ldr	r3, [r4, #0]
   10524:	8832      	ldrh	r2, [r6, #0]
   10526:	0a19      	lsrs	r1, r3, #8
   10528:	7923      	ldrb	r3, [r4, #4]
   1052a:	3a10      	subs	r2, #16
   1052c:	061b      	lsls	r3, r3, #24
   1052e:	430b      	orrs	r3, r1
   10530:	9300      	str	r3, [sp, #0]
   10532:	6d61      	ldr	r1, [r4, #84]	; 0x54
   10534:	b2d2      	uxtb	r2, r2
   10536:	2349      	movs	r3, #73	; 0x49
   10538:	2000      	movs	r0, #0
   1053a:	4d39      	ldr	r5, [pc, #228]	; (10620 <AssemblePacket+0x2d0>)
   1053c:	47a8      	blx	r5
   1053e:	4f2f      	ldr	r7, [pc, #188]	; (105fc <AssemblePacket+0x2ac>)
   10540:	2210      	movs	r2, #16
   10542:	492f      	ldr	r1, [pc, #188]	; (10600 <AssemblePacket+0x2b0>)
   10544:	0038      	movs	r0, r7
   10546:	4b30      	ldr	r3, [pc, #192]	; (10608 <AssemblePacket+0x2b8>)
   10548:	4798      	blx	r3
   1054a:	7833      	ldrb	r3, [r6, #0]
   1054c:	003a      	movs	r2, r7
   1054e:	492c      	ldr	r1, [pc, #176]	; (10600 <AssemblePacket+0x2b0>)
   10550:	4834      	ldr	r0, [pc, #208]	; (10624 <AssemblePacket+0x2d4>)
   10552:	4d35      	ldr	r5, [pc, #212]	; (10628 <AssemblePacket+0x2d8>)
   10554:	47a8      	blx	r5
   10556:	8836      	ldrh	r6, [r6, #0]
   10558:	2204      	movs	r2, #4
   1055a:	19f0      	adds	r0, r6, r7
   1055c:	4928      	ldr	r1, [pc, #160]	; (10600 <AssemblePacket+0x2b0>)
   1055e:	4b2a      	ldr	r3, [pc, #168]	; (10608 <AssemblePacket+0x2b8>)
   10560:	4798      	blx	r3
   10562:	3e0c      	subs	r6, #12
   10564:	349a      	adds	r4, #154	; 0x9a
   10566:	8026      	strh	r6, [r4, #0]
   10568:	b00b      	add	sp, #44	; 0x2c
   1056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1056c:	4b2f      	ldr	r3, [pc, #188]	; (1062c <AssemblePacket+0x2dc>)
   1056e:	0031      	movs	r1, r6
   10570:	2011      	movs	r0, #17
   10572:	4798      	blx	r3
   10574:	7833      	ldrb	r3, [r6, #0]
   10576:	2808      	cmp	r0, #8
   10578:	d03a      	beq.n	105f0 <AssemblePacket+0x2a0>
   1057a:	782a      	ldrb	r2, [r5, #0]
   1057c:	429a      	cmp	r2, r3
   1057e:	d300      	bcc.n	10582 <AssemblePacket+0x232>
   10580:	e767      	b.n	10452 <AssemblePacket+0x102>
   10582:	3b01      	subs	r3, #1
   10584:	7033      	strb	r3, [r6, #0]
   10586:	e764      	b.n	10452 <AssemblePacket+0x102>
   10588:	4663      	mov	r3, ip
   1058a:	800b      	strh	r3, [r1, #0]
   1058c:	2210      	movs	r2, #16
   1058e:	3460      	adds	r4, #96	; 0x60
   10590:	7823      	ldrb	r3, [r4, #0]
   10592:	4393      	bics	r3, r2
   10594:	e73c      	b.n	10410 <AssemblePacket+0xc0>
   10596:	2000      	movs	r0, #0
   10598:	e7f8      	b.n	1058c <AssemblePacket+0x23c>
   1059a:	4b25      	ldr	r3, [pc, #148]	; (10630 <AssemblePacket+0x2e0>)
   1059c:	4798      	blx	r3
   1059e:	220f      	movs	r2, #15
   105a0:	0003      	movs	r3, r0
   105a2:	0020      	movs	r0, r4
   105a4:	4013      	ands	r3, r2
   105a6:	4390      	bics	r0, r2
   105a8:	4318      	orrs	r0, r3
   105aa:	e77b      	b.n	104a4 <AssemblePacket+0x154>
   105ac:	4d15      	ldr	r5, [pc, #84]	; (10604 <AssemblePacket+0x2b4>)
   105ae:	002b      	movs	r3, r5
   105b0:	33ac      	adds	r3, #172	; 0xac
   105b2:	781b      	ldrb	r3, [r3, #0]
   105b4:	2b00      	cmp	r3, #0
   105b6:	d0b2      	beq.n	1051e <AssemblePacket+0x1ce>
   105b8:	2616      	movs	r6, #22
   105ba:	ab04      	add	r3, sp, #16
   105bc:	18f6      	adds	r6, r6, r3
   105be:	9a04      	ldr	r2, [sp, #16]
   105c0:	0031      	movs	r1, r6
   105c2:	481c      	ldr	r0, [pc, #112]	; (10634 <AssemblePacket+0x2e4>)
   105c4:	4b13      	ldr	r3, [pc, #76]	; (10614 <AssemblePacket+0x2c4>)
   105c6:	4798      	blx	r3
   105c8:	682b      	ldr	r3, [r5, #0]
   105ca:	7831      	ldrb	r1, [r6, #0]
   105cc:	0a1a      	lsrs	r2, r3, #8
   105ce:	792b      	ldrb	r3, [r5, #4]
   105d0:	9702      	str	r7, [sp, #8]
   105d2:	061b      	lsls	r3, r3, #24
   105d4:	4313      	orrs	r3, r2
   105d6:	9303      	str	r3, [sp, #12]
   105d8:	7823      	ldrb	r3, [r4, #0]
   105da:	9a04      	ldr	r2, [sp, #16]
   105dc:	9301      	str	r3, [sp, #4]
   105de:	4b11      	ldr	r3, [pc, #68]	; (10624 <AssemblePacket+0x2d4>)
   105e0:	4814      	ldr	r0, [pc, #80]	; (10634 <AssemblePacket+0x2e4>)
   105e2:	9300      	str	r3, [sp, #0]
   105e4:	6d6b      	ldr	r3, [r5, #84]	; 0x54
   105e6:	4d0d      	ldr	r5, [pc, #52]	; (1061c <AssemblePacket+0x2cc>)
   105e8:	47a8      	blx	r5
   105ea:	8823      	ldrh	r3, [r4, #0]
   105ec:	8832      	ldrh	r2, [r6, #0]
   105ee:	e794      	b.n	1051a <AssemblePacket+0x1ca>
   105f0:	34b3      	adds	r4, #179	; 0xb3
   105f2:	7023      	strb	r3, [r4, #0]
   105f4:	e735      	b.n	10462 <AssemblePacket+0x112>
   105f6:	46c0      	nop			; (mov r8, r8)
   105f8:	00018219 	.word	0x00018219
   105fc:	20001dd1 	.word	0x20001dd1
   10600:	20001088 	.word	0x20001088
   10604:	20001ca4 	.word	0x20001ca4
   10608:	00018195 	.word	0x00018195
   1060c:	20001d62 	.word	0x20001d62
   10610:	20001cf8 	.word	0x20001cf8
   10614:	0000f06d 	.word	0x0000f06d
   10618:	20001cb9 	.word	0x20001cb9
   1061c:	00010299 	.word	0x00010299
   10620:	0000f309 	.word	0x0000f309
   10624:	20001ca9 	.word	0x20001ca9
   10628:	0001292d 	.word	0x0001292d
   1062c:	0000b33d 	.word	0x0000b33d
   10630:	0000ef69 	.word	0x0000ef69
   10634:	20001eec 	.word	0x20001eec

00010638 <UpdateTransactionCompleteCbParams>:
   10638:	2390      	movs	r3, #144	; 0x90
   1063a:	2201      	movs	r2, #1
   1063c:	b570      	push	{r4, r5, r6, lr}
   1063e:	4915      	ldr	r1, [pc, #84]	; (10694 <UpdateTransactionCompleteCbParams+0x5c>)
   10640:	4c15      	ldr	r4, [pc, #84]	; (10698 <UpdateTransactionCompleteCbParams+0x60>)
   10642:	005b      	lsls	r3, r3, #1
   10644:	54e2      	strb	r2, [r4, r3]
   10646:	784a      	ldrb	r2, [r1, #1]
   10648:	780b      	ldrb	r3, [r1, #0]
   1064a:	0212      	lsls	r2, r2, #8
   1064c:	431a      	orrs	r2, r3
   1064e:	788b      	ldrb	r3, [r1, #2]
   10650:	041b      	lsls	r3, r3, #16
   10652:	431a      	orrs	r2, r3
   10654:	78cb      	ldrb	r3, [r1, #3]
   10656:	061b      	lsls	r3, r3, #24
   10658:	4313      	orrs	r3, r2
   1065a:	d012      	beq.n	10682 <UpdateTransactionCompleteCbParams+0x4a>
   1065c:	0022      	movs	r2, r4
   1065e:	2504      	movs	r5, #4
   10660:	32cc      	adds	r2, #204	; 0xcc
   10662:	6812      	ldr	r2, [r2, #0]
   10664:	422a      	tst	r2, r5
   10666:	d00c      	beq.n	10682 <UpdateTransactionCompleteCbParams+0x4a>
   10668:	0022      	movs	r2, r4
   1066a:	32d0      	adds	r2, #208	; 0xd0
   1066c:	6812      	ldr	r2, [r2, #0]
   1066e:	2a00      	cmp	r2, #0
   10670:	d007      	beq.n	10682 <UpdateTransactionCompleteCbParams+0x4a>
   10672:	0021      	movs	r1, r4
   10674:	31d4      	adds	r1, #212	; 0xd4
   10676:	700d      	strb	r5, [r1, #0]
   10678:	0025      	movs	r5, r4
   1067a:	35d8      	adds	r5, #216	; 0xd8
   1067c:	7028      	strb	r0, [r5, #0]
   1067e:	0010      	movs	r0, r2
   10680:	4798      	blx	r3
   10682:	2390      	movs	r3, #144	; 0x90
   10684:	005b      	lsls	r3, r3, #1
   10686:	5ce3      	ldrb	r3, [r4, r3]
   10688:	2b00      	cmp	r3, #0
   1068a:	d002      	beq.n	10692 <UpdateTransactionCompleteCbParams+0x5a>
   1068c:	2300      	movs	r3, #0
   1068e:	34d0      	adds	r4, #208	; 0xd0
   10690:	6023      	str	r3, [r4, #0]
   10692:	bd70      	pop	{r4, r5, r6, pc}
   10694:	20001ee4 	.word	0x20001ee4
   10698:	20001ca4 	.word	0x20001ca4

0001069c <UpdateRxDataAvailableCbParams>:
   1069c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1069e:	4e13      	ldr	r6, [pc, #76]	; (106ec <UpdateRxDataAvailableCbParams+0x50>)
   106a0:	7874      	ldrb	r4, [r6, #1]
   106a2:	7835      	ldrb	r5, [r6, #0]
   106a4:	0224      	lsls	r4, r4, #8
   106a6:	432c      	orrs	r4, r5
   106a8:	78b5      	ldrb	r5, [r6, #2]
   106aa:	042d      	lsls	r5, r5, #16
   106ac:	432c      	orrs	r4, r5
   106ae:	78f5      	ldrb	r5, [r6, #3]
   106b0:	062d      	lsls	r5, r5, #24
   106b2:	4325      	orrs	r5, r4
   106b4:	d019      	beq.n	106ea <UpdateRxDataAvailableCbParams+0x4e>
   106b6:	4c0e      	ldr	r4, [pc, #56]	; (106f0 <UpdateRxDataAvailableCbParams+0x54>)
   106b8:	2702      	movs	r7, #2
   106ba:	0026      	movs	r6, r4
   106bc:	36cc      	adds	r6, #204	; 0xcc
   106be:	6836      	ldr	r6, [r6, #0]
   106c0:	423e      	tst	r6, r7
   106c2:	d012      	beq.n	106ea <UpdateRxDataAvailableCbParams+0x4e>
   106c4:	0026      	movs	r6, r4
   106c6:	36d4      	adds	r6, #212	; 0xd4
   106c8:	7037      	strb	r7, [r6, #0]
   106ca:	0027      	movs	r7, r4
   106cc:	37d8      	adds	r7, #216	; 0xd8
   106ce:	6038      	str	r0, [r7, #0]
   106d0:	0020      	movs	r0, r4
   106d2:	30dc      	adds	r0, #220	; 0xdc
   106d4:	6001      	str	r1, [r0, #0]
   106d6:	0021      	movs	r1, r4
   106d8:	31e0      	adds	r1, #224	; 0xe0
   106da:	700a      	strb	r2, [r1, #0]
   106dc:	0022      	movs	r2, r4
   106de:	34d0      	adds	r4, #208	; 0xd0
   106e0:	32e1      	adds	r2, #225	; 0xe1
   106e2:	7013      	strb	r3, [r2, #0]
   106e4:	0031      	movs	r1, r6
   106e6:	6820      	ldr	r0, [r4, #0]
   106e8:	47a8      	blx	r5
   106ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   106ec:	20001ee4 	.word	0x20001ee4
   106f0:	20001ca4 	.word	0x20001ca4

000106f4 <LorawanNotifyAppOnRxdone>:
   106f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   106f6:	4c25      	ldr	r4, [pc, #148]	; (1078c <LorawanNotifyAppOnRxdone+0x98>)
   106f8:	0007      	movs	r7, r0
   106fa:	0023      	movs	r3, r4
   106fc:	33c8      	adds	r3, #200	; 0xc8
   106fe:	781b      	ldrb	r3, [r3, #0]
   10700:	000d      	movs	r5, r1
   10702:	0016      	movs	r6, r2
   10704:	2b01      	cmp	r3, #1
   10706:	d136      	bne.n	10776 <LorawanNotifyAppOnRxdone+0x82>
   10708:	0022      	movs	r2, r4
   1070a:	210e      	movs	r1, #14
   1070c:	3250      	adds	r2, #80	; 0x50
   1070e:	7813      	ldrb	r3, [r2, #0]
   10710:	438b      	bics	r3, r1
   10712:	7013      	strb	r3, [r2, #0]
   10714:	491e      	ldr	r1, [pc, #120]	; (10790 <LorawanNotifyAppOnRxdone+0x9c>)
   10716:	784a      	ldrb	r2, [r1, #1]
   10718:	780b      	ldrb	r3, [r1, #0]
   1071a:	0212      	lsls	r2, r2, #8
   1071c:	431a      	orrs	r2, r3
   1071e:	788b      	ldrb	r3, [r1, #2]
   10720:	041b      	lsls	r3, r3, #16
   10722:	431a      	orrs	r2, r3
   10724:	78cb      	ldrb	r3, [r1, #3]
   10726:	061b      	lsls	r3, r3, #24
   10728:	4313      	orrs	r3, r2
   1072a:	d023      	beq.n	10774 <LorawanNotifyAppOnRxdone+0x80>
   1072c:	0022      	movs	r2, r4
   1072e:	2120      	movs	r1, #32
   10730:	3260      	adds	r2, #96	; 0x60
   10732:	7813      	ldrb	r3, [r2, #0]
   10734:	438b      	bics	r3, r1
   10736:	7013      	strb	r3, [r2, #0]
   10738:	0023      	movs	r3, r4
   1073a:	33c8      	adds	r3, #200	; 0xc8
   1073c:	781b      	ldrb	r3, [r3, #0]
   1073e:	7878      	ldrb	r0, [r7, #1]
   10740:	469c      	mov	ip, r3
   10742:	78fa      	ldrb	r2, [r7, #3]
   10744:	78b9      	ldrb	r1, [r7, #2]
   10746:	793b      	ldrb	r3, [r7, #4]
   10748:	4667      	mov	r7, ip
   1074a:	0209      	lsls	r1, r1, #8
   1074c:	4301      	orrs	r1, r0
   1074e:	0410      	lsls	r0, r2, #16
   10750:	4308      	orrs	r0, r1
   10752:	061b      	lsls	r3, r3, #24
   10754:	4318      	orrs	r0, r3
   10756:	0032      	movs	r2, r6
   10758:	2308      	movs	r3, #8
   1075a:	0029      	movs	r1, r5
   1075c:	2f04      	cmp	r7, #4
   1075e:	d112      	bne.n	10786 <LorawanNotifyAppOnRxdone+0x92>
   10760:	4d0c      	ldr	r5, [pc, #48]	; (10794 <LorawanNotifyAppOnRxdone+0xa0>)
   10762:	47a8      	blx	r5
   10764:	2390      	movs	r3, #144	; 0x90
   10766:	005b      	lsls	r3, r3, #1
   10768:	5ce3      	ldrb	r3, [r4, r3]
   1076a:	2b00      	cmp	r3, #0
   1076c:	d102      	bne.n	10774 <LorawanNotifyAppOnRxdone+0x80>
   1076e:	2008      	movs	r0, #8
   10770:	4b09      	ldr	r3, [pc, #36]	; (10798 <LorawanNotifyAppOnRxdone+0xa4>)
   10772:	4798      	blx	r3
   10774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10776:	2b04      	cmp	r3, #4
   10778:	d1cc      	bne.n	10714 <LorawanNotifyAppOnRxdone+0x20>
   1077a:	0023      	movs	r3, r4
   1077c:	33bc      	adds	r3, #188	; 0xbc
   1077e:	7818      	ldrb	r0, [r3, #0]
   10780:	4b06      	ldr	r3, [pc, #24]	; (1079c <LorawanNotifyAppOnRxdone+0xa8>)
   10782:	4798      	blx	r3
   10784:	e7c6      	b.n	10714 <LorawanNotifyAppOnRxdone+0x20>
   10786:	4d06      	ldr	r5, [pc, #24]	; (107a0 <LorawanNotifyAppOnRxdone+0xac>)
   10788:	47a8      	blx	r5
   1078a:	e7eb      	b.n	10764 <LorawanNotifyAppOnRxdone+0x70>
   1078c:	20001ca4 	.word	0x20001ca4
   10790:	20001ee4 	.word	0x20001ee4
   10794:	00012c25 	.word	0x00012c25
   10798:	00010639 	.word	0x00010639
   1079c:	0000c7b9 	.word	0x0000c7b9
   107a0:	0001069d 	.word	0x0001069d

000107a4 <LorawanSetReceiveWindow2Parameters>:
   107a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   107a6:	466b      	mov	r3, sp
   107a8:	1cdd      	adds	r5, r3, #3
   107aa:	9001      	str	r0, [sp, #4]
   107ac:	7029      	strb	r1, [r5, #0]
   107ae:	2001      	movs	r0, #1
   107b0:	a901      	add	r1, sp, #4
   107b2:	4c09      	ldr	r4, [pc, #36]	; (107d8 <LorawanSetReceiveWindow2Parameters+0x34>)
   107b4:	47a0      	blx	r4
   107b6:	2808      	cmp	r0, #8
   107b8:	d002      	beq.n	107c0 <LorawanSetReceiveWindow2Parameters+0x1c>
   107ba:	240a      	movs	r4, #10
   107bc:	0020      	movs	r0, r4
   107be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   107c0:	0029      	movs	r1, r5
   107c2:	200f      	movs	r0, #15
   107c4:	47a0      	blx	r4
   107c6:	0004      	movs	r4, r0
   107c8:	2808      	cmp	r0, #8
   107ca:	d1f6      	bne.n	107ba <LorawanSetReceiveWindow2Parameters+0x16>
   107cc:	7829      	ldrb	r1, [r5, #0]
   107ce:	9801      	ldr	r0, [sp, #4]
   107d0:	4b02      	ldr	r3, [pc, #8]	; (107dc <LorawanSetReceiveWindow2Parameters+0x38>)
   107d2:	4798      	blx	r3
   107d4:	e7f2      	b.n	107bc <LorawanSetReceiveWindow2Parameters+0x18>
   107d6:	46c0      	nop			; (mov r8, r8)
   107d8:	0000b33d 	.word	0x0000b33d
   107dc:	0000f851 	.word	0x0000f851

000107e0 <LorawanSetFrequency>:
   107e0:	b507      	push	{r0, r1, r2, lr}
   107e2:	466b      	mov	r3, sp
   107e4:	9100      	str	r1, [sp, #0]
   107e6:	7118      	strb	r0, [r3, #4]
   107e8:	4669      	mov	r1, sp
   107ea:	2000      	movs	r0, #0
   107ec:	4b01      	ldr	r3, [pc, #4]	; (107f4 <LorawanSetFrequency+0x14>)
   107ee:	4798      	blx	r3
   107f0:	bd0e      	pop	{r1, r2, r3, pc}
   107f2:	46c0      	nop			; (mov r8, r8)
   107f4:	0000b359 	.word	0x0000b359

000107f8 <LorawanGetReceiveWindow2Parameters>:
   107f8:	4a06      	ldr	r2, [pc, #24]	; (10814 <LorawanGetReceiveWindow2Parameters+0x1c>)
   107fa:	0013      	movs	r3, r2
   107fc:	334e      	adds	r3, #78	; 0x4e
   107fe:	781b      	ldrb	r3, [r3, #0]
   10800:	7103      	strb	r3, [r0, #4]
   10802:	0013      	movs	r3, r2
   10804:	324c      	adds	r2, #76	; 0x4c
   10806:	334a      	adds	r3, #74	; 0x4a
   10808:	8819      	ldrh	r1, [r3, #0]
   1080a:	8813      	ldrh	r3, [r2, #0]
   1080c:	041b      	lsls	r3, r3, #16
   1080e:	430b      	orrs	r3, r1
   10810:	6003      	str	r3, [r0, #0]
   10812:	4770      	bx	lr
   10814:	20001ca4 	.word	0x20001ca4

00010818 <LORAWAN_GetAttr>:
   10818:	b530      	push	{r4, r5, lr}
   1081a:	000b      	movs	r3, r1
   1081c:	b085      	sub	sp, #20
   1081e:	0014      	movs	r4, r2
   10820:	2835      	cmp	r0, #53	; 0x35
   10822:	d837      	bhi.n	10894 <LORAWAN_GetAttr+0x7c>
   10824:	f004 f99a 	bl	14b5c <__gnu_thumb1_case_uhi>
   10828:	00580039 	.word	0x00580039
   1082c:	006c005c 	.word	0x006c005c
   10830:	00680064 	.word	0x00680064
   10834:	00760070 	.word	0x00760070
   10838:	007e007b 	.word	0x007e007b
   1083c:	00840081 	.word	0x00840081
   10840:	008f0087 	.word	0x008f0087
   10844:	00950092 	.word	0x00950092
   10848:	009c0099 	.word	0x009c0099
   1084c:	00a2009f 	.word	0x00a2009f
   10850:	00ce00a5 	.word	0x00ce00a5
   10854:	00a800ab 	.word	0x00a800ab
   10858:	00d500db 	.word	0x00d500db
   1085c:	00c400c9 	.word	0x00c400c9
   10860:	003600bd 	.word	0x003600bd
   10864:	00b6008c 	.word	0x00b6008c
   10868:	00b300ba 	.word	0x00b300ba
   1086c:	00d200b0 	.word	0x00d200b0
   10870:	003f00d8 	.word	0x003f00d8
   10874:	0041003f 	.word	0x0041003f
   10878:	00f100e3 	.word	0x00f100e3
   1087c:	00e800ed 	.word	0x00e800ed
   10880:	003600f4 	.word	0x003600f4
   10884:	00fc00f8 	.word	0x00fc00f8
   10888:	01060101 	.word	0x01060101
   1088c:	010f010b 	.word	0x010f010b
   10890:	01150112 	.word	0x01150112
   10894:	200a      	movs	r0, #10
   10896:	b005      	add	sp, #20
   10898:	bd30      	pop	{r4, r5, pc}
   1089a:	2208      	movs	r2, #8
   1089c:	4971      	ldr	r1, [pc, #452]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   1089e:	313d      	adds	r1, #61	; 0x3d
   108a0:	0020      	movs	r0, r4
   108a2:	4b71      	ldr	r3, [pc, #452]	; (10a68 <LORAWAN_GetAttr+0x250>)
   108a4:	4798      	blx	r3
   108a6:	2008      	movs	r0, #8
   108a8:	e7f5      	b.n	10896 <LORAWAN_GetAttr+0x7e>
   108aa:	4669      	mov	r1, sp
   108ac:	4b6f      	ldr	r3, [pc, #444]	; (10a6c <LORAWAN_GetAttr+0x254>)
   108ae:	201d      	movs	r0, #29
   108b0:	4798      	blx	r3
   108b2:	4b6c      	ldr	r3, [pc, #432]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   108b4:	a902      	add	r1, sp, #8
   108b6:	33e8      	adds	r3, #232	; 0xe8
   108b8:	881b      	ldrh	r3, [r3, #0]
   108ba:	2208      	movs	r2, #8
   108bc:	808b      	strh	r3, [r1, #4]
   108be:	466b      	mov	r3, sp
   108c0:	791b      	ldrb	r3, [r3, #4]
   108c2:	718b      	strb	r3, [r1, #6]
   108c4:	466b      	mov	r3, sp
   108c6:	881b      	ldrh	r3, [r3, #0]
   108c8:	800b      	strh	r3, [r1, #0]
   108ca:	466b      	mov	r3, sp
   108cc:	885b      	ldrh	r3, [r3, #2]
   108ce:	804b      	strh	r3, [r1, #2]
   108d0:	466b      	mov	r3, sp
   108d2:	795b      	ldrb	r3, [r3, #5]
   108d4:	71cb      	strb	r3, [r1, #7]
   108d6:	e7e3      	b.n	108a0 <LORAWAN_GetAttr+0x88>
   108d8:	4962      	ldr	r1, [pc, #392]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   108da:	2208      	movs	r2, #8
   108dc:	3135      	adds	r1, #53	; 0x35
   108de:	e7df      	b.n	108a0 <LORAWAN_GetAttr+0x88>
   108e0:	4b60      	ldr	r3, [pc, #384]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   108e2:	681a      	ldr	r2, [r3, #0]
   108e4:	791b      	ldrb	r3, [r3, #4]
   108e6:	0a12      	lsrs	r2, r2, #8
   108e8:	061b      	lsls	r3, r3, #24
   108ea:	4313      	orrs	r3, r2
   108ec:	6023      	str	r3, [r4, #0]
   108ee:	e7da      	b.n	108a6 <LORAWAN_GetAttr+0x8e>
   108f0:	495c      	ldr	r1, [pc, #368]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   108f2:	2210      	movs	r2, #16
   108f4:	3105      	adds	r1, #5
   108f6:	e7d3      	b.n	108a0 <LORAWAN_GetAttr+0x88>
   108f8:	495a      	ldr	r1, [pc, #360]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   108fa:	2210      	movs	r2, #16
   108fc:	3115      	adds	r1, #21
   108fe:	e7cf      	b.n	108a0 <LORAWAN_GetAttr+0x88>
   10900:	4958      	ldr	r1, [pc, #352]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10902:	2210      	movs	r2, #16
   10904:	3125      	adds	r1, #37	; 0x25
   10906:	e7cb      	b.n	108a0 <LORAWAN_GetAttr+0x88>
   10908:	4b56      	ldr	r3, [pc, #344]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   1090a:	3350      	adds	r3, #80	; 0x50
   1090c:	781b      	ldrb	r3, [r3, #0]
   1090e:	069b      	lsls	r3, r3, #26
   10910:	0fdb      	lsrs	r3, r3, #31
   10912:	e002      	b.n	1091a <LORAWAN_GetAttr+0x102>
   10914:	4b53      	ldr	r3, [pc, #332]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10916:	33b3      	adds	r3, #179	; 0xb3
   10918:	781b      	ldrb	r3, [r3, #0]
   1091a:	7023      	strb	r3, [r4, #0]
   1091c:	e7c3      	b.n	108a6 <LORAWAN_GetAttr+0x8e>
   1091e:	4b51      	ldr	r3, [pc, #324]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10920:	33b5      	adds	r3, #181	; 0xb5
   10922:	e7f9      	b.n	10918 <LORAWAN_GetAttr+0x100>
   10924:	4b4f      	ldr	r3, [pc, #316]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10926:	33cb      	adds	r3, #203	; 0xcb
   10928:	e7f6      	b.n	10918 <LORAWAN_GetAttr+0x100>
   1092a:	4b4e      	ldr	r3, [pc, #312]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   1092c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   1092e:	e7dd      	b.n	108ec <LORAWAN_GetAttr+0xd4>
   10930:	4b4c      	ldr	r3, [pc, #304]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   10934:	e7da      	b.n	108ec <LORAWAN_GetAttr+0xd4>
   10936:	4b4b      	ldr	r3, [pc, #300]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10938:	339c      	adds	r3, #156	; 0x9c
   1093a:	881b      	ldrh	r3, [r3, #0]
   1093c:	8023      	strh	r3, [r4, #0]
   1093e:	e7b2      	b.n	108a6 <LORAWAN_GetAttr+0x8e>
   10940:	4b48      	ldr	r3, [pc, #288]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10942:	339e      	adds	r3, #158	; 0x9e
   10944:	e7f9      	b.n	1093a <LORAWAN_GetAttr+0x122>
   10946:	4b47      	ldr	r3, [pc, #284]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10948:	33a0      	adds	r3, #160	; 0xa0
   1094a:	e7f6      	b.n	1093a <LORAWAN_GetAttr+0x122>
   1094c:	4b45      	ldr	r3, [pc, #276]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   1094e:	33a2      	adds	r3, #162	; 0xa2
   10950:	e7f3      	b.n	1093a <LORAWAN_GetAttr+0x122>
   10952:	4b44      	ldr	r3, [pc, #272]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10954:	33a4      	adds	r3, #164	; 0xa4
   10956:	881b      	ldrh	r3, [r3, #0]
   10958:	e7df      	b.n	1091a <LORAWAN_GetAttr+0x102>
   1095a:	4b42      	ldr	r3, [pc, #264]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   1095c:	33a8      	adds	r3, #168	; 0xa8
   1095e:	e7db      	b.n	10918 <LORAWAN_GetAttr+0x100>
   10960:	4b40      	ldr	r3, [pc, #256]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10962:	33a9      	adds	r3, #169	; 0xa9
   10964:	e7d8      	b.n	10918 <LORAWAN_GetAttr+0x100>
   10966:	4b3f      	ldr	r3, [pc, #252]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10968:	33a6      	adds	r3, #166	; 0xa6
   1096a:	e7f4      	b.n	10956 <LORAWAN_GetAttr+0x13e>
   1096c:	4b3d      	ldr	r3, [pc, #244]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   1096e:	33ae      	adds	r3, #174	; 0xae
   10970:	e7d2      	b.n	10918 <LORAWAN_GetAttr+0x100>
   10972:	4b3c      	ldr	r3, [pc, #240]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10974:	33ad      	adds	r3, #173	; 0xad
   10976:	e7cf      	b.n	10918 <LORAWAN_GetAttr+0x100>
   10978:	4b3a      	ldr	r3, [pc, #232]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   1097a:	33b4      	adds	r3, #180	; 0xb4
   1097c:	e7cc      	b.n	10918 <LORAWAN_GetAttr+0x100>
   1097e:	4b39      	ldr	r3, [pc, #228]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10980:	3350      	adds	r3, #80	; 0x50
   10982:	781b      	ldrb	r3, [r3, #0]
   10984:	06db      	lsls	r3, r3, #27
   10986:	e7c3      	b.n	10910 <LORAWAN_GetAttr+0xf8>
   10988:	4b36      	ldr	r3, [pc, #216]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   1098a:	33b2      	adds	r3, #178	; 0xb2
   1098c:	e7c4      	b.n	10918 <LORAWAN_GetAttr+0x100>
   1098e:	4b35      	ldr	r3, [pc, #212]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10990:	33b1      	adds	r3, #177	; 0xb1
   10992:	e7c1      	b.n	10918 <LORAWAN_GetAttr+0x100>
   10994:	4b33      	ldr	r3, [pc, #204]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10996:	3364      	adds	r3, #100	; 0x64
   10998:	781b      	ldrb	r3, [r3, #0]
   1099a:	e7cf      	b.n	1093c <LORAWAN_GetAttr+0x124>
   1099c:	4b31      	ldr	r3, [pc, #196]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   1099e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   109a0:	e7a4      	b.n	108ec <LORAWAN_GetAttr+0xd4>
   109a2:	2016      	movs	r0, #22
   109a4:	781b      	ldrb	r3, [r3, #0]
   109a6:	a902      	add	r1, sp, #8
   109a8:	700b      	strb	r3, [r1, #0]
   109aa:	4b31      	ldr	r3, [pc, #196]	; (10a70 <LORAWAN_GetAttr+0x258>)
   109ac:	4798      	blx	r3
   109ae:	e77a      	b.n	108a6 <LORAWAN_GetAttr+0x8e>
   109b0:	781b      	ldrb	r3, [r3, #0]
   109b2:	a902      	add	r1, sp, #8
   109b4:	700b      	strb	r3, [r1, #0]
   109b6:	2012      	movs	r0, #18
   109b8:	e7f7      	b.n	109aa <LORAWAN_GetAttr+0x192>
   109ba:	781b      	ldrb	r3, [r3, #0]
   109bc:	a902      	add	r1, sp, #8
   109be:	700b      	strb	r3, [r1, #0]
   109c0:	2000      	movs	r0, #0
   109c2:	e7f2      	b.n	109aa <LORAWAN_GetAttr+0x192>
   109c4:	0010      	movs	r0, r2
   109c6:	4b2b      	ldr	r3, [pc, #172]	; (10a74 <LORAWAN_GetAttr+0x25c>)
   109c8:	4798      	blx	r3
   109ca:	e76c      	b.n	108a6 <LORAWAN_GetAttr+0x8e>
   109cc:	4b25      	ldr	r3, [pc, #148]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   109ce:	33ca      	adds	r3, #202	; 0xca
   109d0:	e7a2      	b.n	10918 <LORAWAN_GetAttr+0x100>
   109d2:	4b24      	ldr	r3, [pc, #144]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   109d4:	33c8      	adds	r3, #200	; 0xc8
   109d6:	e79f      	b.n	10918 <LORAWAN_GetAttr+0x100>
   109d8:	4b22      	ldr	r3, [pc, #136]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   109da:	33c9      	adds	r3, #201	; 0xc9
   109dc:	e79c      	b.n	10918 <LORAWAN_GetAttr+0x100>
   109de:	21fa      	movs	r1, #250	; 0xfa
   109e0:	4b20      	ldr	r3, [pc, #128]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   109e2:	0089      	lsls	r1, r1, #2
   109e4:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
   109e6:	4b24      	ldr	r3, [pc, #144]	; (10a78 <LORAWAN_GetAttr+0x260>)
   109e8:	4798      	blx	r3
   109ea:	8020      	strh	r0, [r4, #0]
   109ec:	e75b      	b.n	108a6 <LORAWAN_GetAttr+0x8e>
   109ee:	4b1d      	ldr	r3, [pc, #116]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   109f0:	3352      	adds	r3, #82	; 0x52
   109f2:	781b      	ldrb	r3, [r3, #0]
   109f4:	079b      	lsls	r3, r3, #30
   109f6:	e78b      	b.n	10910 <LORAWAN_GetAttr+0xf8>
   109f8:	491a      	ldr	r1, [pc, #104]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   109fa:	2210      	movs	r2, #16
   109fc:	310d      	adds	r1, #13
   109fe:	31ff      	adds	r1, #255	; 0xff
   10a00:	e74e      	b.n	108a0 <LORAWAN_GetAttr+0x88>
   10a02:	4918      	ldr	r1, [pc, #96]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10a04:	2210      	movs	r2, #16
   10a06:	31fc      	adds	r1, #252	; 0xfc
   10a08:	e74a      	b.n	108a0 <LORAWAN_GetAttr+0x88>
   10a0a:	2204      	movs	r2, #4
   10a0c:	491b      	ldr	r1, [pc, #108]	; (10a7c <LORAWAN_GetAttr+0x264>)
   10a0e:	e747      	b.n	108a0 <LORAWAN_GetAttr+0x88>
   10a10:	4b14      	ldr	r3, [pc, #80]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10a12:	33fe      	adds	r3, #254	; 0xfe
   10a14:	8bdb      	ldrh	r3, [r3, #30]
   10a16:	e791      	b.n	1093c <LORAWAN_GetAttr+0x124>
   10a18:	0010      	movs	r0, r2
   10a1a:	4b19      	ldr	r3, [pc, #100]	; (10a80 <LORAWAN_GetAttr+0x268>)
   10a1c:	4798      	blx	r3
   10a1e:	e73a      	b.n	10896 <LORAWAN_GetAttr+0x7e>
   10a20:	0011      	movs	r1, r2
   10a22:	4b12      	ldr	r3, [pc, #72]	; (10a6c <LORAWAN_GetAttr+0x254>)
   10a24:	201f      	movs	r0, #31
   10a26:	4798      	blx	r3
   10a28:	e73d      	b.n	108a6 <LORAWAN_GetAttr+0x8e>
   10a2a:	4b0e      	ldr	r3, [pc, #56]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10a2c:	3360      	adds	r3, #96	; 0x60
   10a2e:	781b      	ldrb	r3, [r3, #0]
   10a30:	071b      	lsls	r3, r3, #28
   10a32:	e76d      	b.n	10910 <LORAWAN_GetAttr+0xf8>
   10a34:	4b0b      	ldr	r3, [pc, #44]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10a36:	3360      	adds	r3, #96	; 0x60
   10a38:	781b      	ldrb	r3, [r3, #0]
   10a3a:	07db      	lsls	r3, r3, #31
   10a3c:	e768      	b.n	10910 <LORAWAN_GetAttr+0xf8>
   10a3e:	202f      	movs	r0, #47	; 0x2f
   10a40:	4b0b      	ldr	r3, [pc, #44]	; (10a70 <LORAWAN_GetAttr+0x258>)
   10a42:	4798      	blx	r3
   10a44:	e727      	b.n	10896 <LORAWAN_GetAttr+0x7e>
   10a46:	490f      	ldr	r1, [pc, #60]	; (10a84 <LORAWAN_GetAttr+0x26c>)
   10a48:	2024      	movs	r0, #36	; 0x24
   10a4a:	e7f9      	b.n	10a40 <LORAWAN_GetAttr+0x228>
   10a4c:	4b05      	ldr	r3, [pc, #20]	; (10a64 <LORAWAN_GetAttr+0x24c>)
   10a4e:	33b0      	adds	r3, #176	; 0xb0
   10a50:	e762      	b.n	10918 <LORAWAN_GetAttr+0x100>
   10a52:	4b0d      	ldr	r3, [pc, #52]	; (10a88 <LORAWAN_GetAttr+0x270>)
   10a54:	4798      	blx	r3
   10a56:	4b0d      	ldr	r3, [pc, #52]	; (10a8c <LORAWAN_GetAttr+0x274>)
   10a58:	0005      	movs	r5, r0
   10a5a:	4798      	blx	r3
   10a5c:	3808      	subs	r0, #8
   10a5e:	1b40      	subs	r0, r0, r5
   10a60:	7020      	strb	r0, [r4, #0]
   10a62:	e720      	b.n	108a6 <LORAWAN_GetAttr+0x8e>
   10a64:	20001ca4 	.word	0x20001ca4
   10a68:	00018195 	.word	0x00018195
   10a6c:	000130e9 	.word	0x000130e9
   10a70:	0000b321 	.word	0x0000b321
   10a74:	000107f9 	.word	0x000107f9
   10a78:	00014b71 	.word	0x00014b71
   10a7c:	20001d9c 	.word	0x20001d9c
   10a80:	0000b485 	.word	0x0000b485
   10a84:	20001d57 	.word	0x20001d57
   10a88:	0000ef69 	.word	0x0000ef69
   10a8c:	0000f011 	.word	0x0000f011

00010a90 <LORAWAN_TxDone>:
   10a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a92:	6843      	ldr	r3, [r0, #4]
   10a94:	b08f      	sub	sp, #60	; 0x3c
   10a96:	ae07      	add	r6, sp, #28
   10a98:	7805      	ldrb	r5, [r0, #0]
   10a9a:	9303      	str	r3, [sp, #12]
   10a9c:	0032      	movs	r2, r6
   10a9e:	4bd3      	ldr	r3, [pc, #844]	; (10dec <LORAWAN_TxDone+0x35c>)
   10aa0:	2100      	movs	r1, #0
   10aa2:	2027      	movs	r0, #39	; 0x27
   10aa4:	4798      	blx	r3
   10aa6:	4cd2      	ldr	r4, [pc, #840]	; (10df0 <LORAWAN_TxDone+0x360>)
   10aa8:	0023      	movs	r3, r4
   10aaa:	3350      	adds	r3, #80	; 0x50
   10aac:	781b      	ldrb	r3, [r3, #0]
   10aae:	2b7f      	cmp	r3, #127	; 0x7f
   10ab0:	d900      	bls.n	10ab4 <LORAWAN_TxDone+0x24>
   10ab2:	e202      	b.n	10eba <LORAWAN_TxDone+0x42a>
   10ab4:	4bcf      	ldr	r3, [pc, #828]	; (10df4 <LORAWAN_TxDone+0x364>)
   10ab6:	201b      	movs	r0, #27
   10ab8:	781a      	ldrb	r2, [r3, #0]
   10aba:	2a04      	cmp	r2, #4
   10abc:	d100      	bne.n	10ac0 <LORAWAN_TxDone+0x30>
   10abe:	e0b1      	b.n	10c24 <LORAWAN_TxDone+0x194>
   10ac0:	781b      	ldrb	r3, [r3, #0]
   10ac2:	2b02      	cmp	r3, #2
   10ac4:	d11f      	bne.n	10b06 <LORAWAN_TxDone+0x76>
   10ac6:	3321      	adds	r3, #33	; 0x21
   10ac8:	33ff      	adds	r3, #255	; 0xff
   10aca:	5ce2      	ldrb	r2, [r4, r3]
   10acc:	2a00      	cmp	r2, #0
   10ace:	d005      	beq.n	10adc <LORAWAN_TxDone+0x4c>
   10ad0:	2200      	movs	r2, #0
   10ad2:	49c9      	ldr	r1, [pc, #804]	; (10df8 <LORAWAN_TxDone+0x368>)
   10ad4:	54e2      	strb	r2, [r4, r3]
   10ad6:	200b      	movs	r0, #11
   10ad8:	4bc8      	ldr	r3, [pc, #800]	; (10dfc <LORAWAN_TxDone+0x36c>)
   10ada:	4798      	blx	r3
   10adc:	2d07      	cmp	r5, #7
   10ade:	d000      	beq.n	10ae2 <LORAWAN_TxDone+0x52>
   10ae0:	e0a5      	b.n	10c2e <LORAWAN_TxDone+0x19e>
   10ae2:	79f3      	ldrb	r3, [r6, #7]
   10ae4:	2b00      	cmp	r3, #0
   10ae6:	d00e      	beq.n	10b06 <LORAWAN_TxDone+0x76>
   10ae8:	0023      	movs	r3, r4
   10aea:	3360      	adds	r3, #96	; 0x60
   10aec:	7818      	ldrb	r0, [r3, #0]
   10aee:	0026      	movs	r6, r4
   10af0:	2304      	movs	r3, #4
   10af2:	36e6      	adds	r6, #230	; 0xe6
   10af4:	4018      	ands	r0, r3
   10af6:	4dc2      	ldr	r5, [pc, #776]	; (10e00 <LORAWAN_TxDone+0x370>)
   10af8:	d007      	beq.n	10b0a <LORAWAN_TxDone+0x7a>
   10afa:	2000      	movs	r0, #0
   10afc:	2109      	movs	r1, #9
   10afe:	8030      	strh	r0, [r6, #0]
   10b00:	47a8      	blx	r5
   10b02:	4bc0      	ldr	r3, [pc, #768]	; (10e04 <LORAWAN_TxDone+0x374>)
   10b04:	4798      	blx	r3
   10b06:	b00f      	add	sp, #60	; 0x3c
   10b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10b0a:	8833      	ldrh	r3, [r6, #0]
   10b0c:	2109      	movs	r1, #9
   10b0e:	3301      	adds	r3, #1
   10b10:	8033      	strh	r3, [r6, #0]
   10b12:	47a8      	blx	r5
   10b14:	0023      	movs	r3, r4
   10b16:	33e8      	adds	r3, #232	; 0xe8
   10b18:	881b      	ldrh	r3, [r3, #0]
   10b1a:	4abb      	ldr	r2, [pc, #748]	; (10e08 <LORAWAN_TxDone+0x378>)
   10b1c:	4293      	cmp	r3, r2
   10b1e:	d002      	beq.n	10b26 <LORAWAN_TxDone+0x96>
   10b20:	8832      	ldrh	r2, [r6, #0]
   10b22:	429a      	cmp	r2, r3
   10b24:	d266      	bcs.n	10bf4 <LORAWAN_TxDone+0x164>
   10b26:	2395      	movs	r3, #149	; 0x95
   10b28:	005b      	lsls	r3, r3, #1
   10b2a:	5ce3      	ldrb	r3, [r4, r3]
   10b2c:	2b00      	cmp	r3, #0
   10b2e:	d061      	beq.n	10bf4 <LORAWAN_TxDone+0x164>
   10b30:	2701      	movs	r7, #1
   10b32:	0023      	movs	r3, r4
   10b34:	a905      	add	r1, sp, #20
   10b36:	700f      	strb	r7, [r1, #0]
   10b38:	33b5      	adds	r3, #181	; 0xb5
   10b3a:	781b      	ldrb	r3, [r3, #0]
   10b3c:	aa0b      	add	r2, sp, #44	; 0x2c
   10b3e:	704b      	strb	r3, [r1, #1]
   10b40:	0023      	movs	r3, r4
   10b42:	33b3      	adds	r3, #179	; 0xb3
   10b44:	781b      	ldrb	r3, [r3, #0]
   10b46:	202d      	movs	r0, #45	; 0x2d
   10b48:	708b      	strb	r3, [r1, #2]
   10b4a:	4bb0      	ldr	r3, [pc, #704]	; (10e0c <LORAWAN_TxDone+0x37c>)
   10b4c:	4798      	blx	r3
   10b4e:	2808      	cmp	r0, #8
   10b50:	d135      	bne.n	10bbe <LORAWAN_TxDone+0x12e>
   10b52:	a806      	add	r0, sp, #24
   10b54:	4bae      	ldr	r3, [pc, #696]	; (10e10 <LORAWAN_TxDone+0x380>)
   10b56:	7007      	strb	r7, [r0, #0]
   10b58:	4798      	blx	r3
   10b5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10b5c:	990c      	ldr	r1, [sp, #48]	; 0x30
   10b5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10b60:	4bac      	ldr	r3, [pc, #688]	; (10e14 <LORAWAN_TxDone+0x384>)
   10b62:	4798      	blx	r3
   10b64:	0023      	movs	r3, r4
   10b66:	339a      	adds	r3, #154	; 0x9a
   10b68:	881b      	ldrh	r3, [r3, #0]
   10b6a:	a809      	add	r0, sp, #36	; 0x24
   10b6c:	7003      	strb	r3, [r0, #0]
   10b6e:	4baa      	ldr	r3, [pc, #680]	; (10e18 <LORAWAN_TxDone+0x388>)
   10b70:	6043      	str	r3, [r0, #4]
   10b72:	4baa      	ldr	r3, [pc, #680]	; (10e1c <LORAWAN_TxDone+0x38c>)
   10b74:	4798      	blx	r3
   10b76:	1e06      	subs	r6, r0, #0
   10b78:	d108      	bne.n	10b8c <LORAWAN_TxDone+0xfc>
   10b7a:	220e      	movs	r2, #14
   10b7c:	3450      	adds	r4, #80	; 0x50
   10b7e:	7823      	ldrb	r3, [r4, #0]
   10b80:	4393      	bics	r3, r2
   10b82:	001a      	movs	r2, r3
   10b84:	2302      	movs	r3, #2
   10b86:	4313      	orrs	r3, r2
   10b88:	7023      	strb	r3, [r4, #0]
   10b8a:	e7bc      	b.n	10b06 <LORAWAN_TxDone+0x76>
   10b8c:	0023      	movs	r3, r4
   10b8e:	3360      	adds	r3, #96	; 0x60
   10b90:	7818      	ldrb	r0, [r3, #0]
   10b92:	0023      	movs	r3, r4
   10b94:	4038      	ands	r0, r7
   10b96:	33e6      	adds	r3, #230	; 0xe6
   10b98:	4fa1      	ldr	r7, [pc, #644]	; (10e20 <LORAWAN_TxDone+0x390>)
   10b9a:	4ca2      	ldr	r4, [pc, #648]	; (10e24 <LORAWAN_TxDone+0x394>)
   10b9c:	2800      	cmp	r0, #0
   10b9e:	d009      	beq.n	10bb4 <LORAWAN_TxDone+0x124>
   10ba0:	2000      	movs	r0, #0
   10ba2:	2109      	movs	r1, #9
   10ba4:	8018      	strh	r0, [r3, #0]
   10ba6:	47a8      	blx	r5
   10ba8:	4b9f      	ldr	r3, [pc, #636]	; (10e28 <LORAWAN_TxDone+0x398>)
   10baa:	4798      	blx	r3
   10bac:	47a0      	blx	r4
   10bae:	0030      	movs	r0, r6
   10bb0:	47b8      	blx	r7
   10bb2:	e7a8      	b.n	10b06 <LORAWAN_TxDone+0x76>
   10bb4:	2109      	movs	r1, #9
   10bb6:	8018      	strh	r0, [r3, #0]
   10bb8:	47a8      	blx	r5
   10bba:	4b9c      	ldr	r3, [pc, #624]	; (10e2c <LORAWAN_TxDone+0x39c>)
   10bbc:	e7f5      	b.n	10baa <LORAWAN_TxDone+0x11a>
   10bbe:	0023      	movs	r3, r4
   10bc0:	3360      	adds	r3, #96	; 0x60
   10bc2:	7818      	ldrb	r0, [r3, #0]
   10bc4:	0023      	movs	r3, r4
   10bc6:	4007      	ands	r7, r0
   10bc8:	4e95      	ldr	r6, [pc, #596]	; (10e20 <LORAWAN_TxDone+0x390>)
   10bca:	33e6      	adds	r3, #230	; 0xe6
   10bcc:	4c95      	ldr	r4, [pc, #596]	; (10e24 <LORAWAN_TxDone+0x394>)
   10bce:	2f00      	cmp	r7, #0
   10bd0:	d00a      	beq.n	10be8 <LORAWAN_TxDone+0x158>
   10bd2:	2700      	movs	r7, #0
   10bd4:	2109      	movs	r1, #9
   10bd6:	0038      	movs	r0, r7
   10bd8:	801f      	strh	r7, [r3, #0]
   10bda:	47a8      	blx	r5
   10bdc:	4b92      	ldr	r3, [pc, #584]	; (10e28 <LORAWAN_TxDone+0x398>)
   10bde:	4798      	blx	r3
   10be0:	47a0      	blx	r4
   10be2:	0038      	movs	r0, r7
   10be4:	47b0      	blx	r6
   10be6:	e78e      	b.n	10b06 <LORAWAN_TxDone+0x76>
   10be8:	2109      	movs	r1, #9
   10bea:	0038      	movs	r0, r7
   10bec:	801f      	strh	r7, [r3, #0]
   10bee:	47a8      	blx	r5
   10bf0:	4b8e      	ldr	r3, [pc, #568]	; (10e2c <LORAWAN_TxDone+0x39c>)
   10bf2:	e7f4      	b.n	10bde <LORAWAN_TxDone+0x14e>
   10bf4:	0023      	movs	r3, r4
   10bf6:	2000      	movs	r0, #0
   10bf8:	33e6      	adds	r3, #230	; 0xe6
   10bfa:	2109      	movs	r1, #9
   10bfc:	8018      	strh	r0, [r3, #0]
   10bfe:	47a8      	blx	r5
   10c00:	0022      	movs	r2, r4
   10c02:	210e      	movs	r1, #14
   10c04:	3250      	adds	r2, #80	; 0x50
   10c06:	7813      	ldrb	r3, [r2, #0]
   10c08:	3460      	adds	r4, #96	; 0x60
   10c0a:	438b      	bics	r3, r1
   10c0c:	7013      	strb	r3, [r2, #0]
   10c0e:	2220      	movs	r2, #32
   10c10:	7823      	ldrb	r3, [r4, #0]
   10c12:	4393      	bics	r3, r2
   10c14:	7023      	strb	r3, [r4, #0]
   10c16:	4c83      	ldr	r4, [pc, #524]	; (10e24 <LORAWAN_TxDone+0x394>)
   10c18:	07db      	lsls	r3, r3, #31
   10c1a:	d506      	bpl.n	10c2a <LORAWAN_TxDone+0x19a>
   10c1c:	4b82      	ldr	r3, [pc, #520]	; (10e28 <LORAWAN_TxDone+0x398>)
   10c1e:	4798      	blx	r3
   10c20:	47a0      	blx	r4
   10c22:	2007      	movs	r0, #7
   10c24:	4b7e      	ldr	r3, [pc, #504]	; (10e20 <LORAWAN_TxDone+0x390>)
   10c26:	4798      	blx	r3
   10c28:	e76d      	b.n	10b06 <LORAWAN_TxDone+0x76>
   10c2a:	4b80      	ldr	r3, [pc, #512]	; (10e2c <LORAWAN_TxDone+0x39c>)
   10c2c:	e7f7      	b.n	10c1e <LORAWAN_TxDone+0x18e>
   10c2e:	2d00      	cmp	r5, #0
   10c30:	d000      	beq.n	10c34 <LORAWAN_TxDone+0x1a4>
   10c32:	e768      	b.n	10b06 <LORAWAN_TxDone+0x76>
   10c34:	0023      	movs	r3, r4
   10c36:	33d0      	adds	r3, #208	; 0xd0
   10c38:	681b      	ldr	r3, [r3, #0]
   10c3a:	0026      	movs	r6, r4
   10c3c:	9302      	str	r3, [sp, #8]
   10c3e:	0023      	movs	r3, r4
   10c40:	33e6      	adds	r3, #230	; 0xe6
   10c42:	801d      	strh	r5, [r3, #0]
   10c44:	2109      	movs	r1, #9
   10c46:	4b6e      	ldr	r3, [pc, #440]	; (10e00 <LORAWAN_TxDone+0x370>)
   10c48:	0028      	movs	r0, r5
   10c4a:	36af      	adds	r6, #175	; 0xaf
   10c4c:	4798      	blx	r3
   10c4e:	7833      	ldrb	r3, [r6, #0]
   10c50:	2b00      	cmp	r3, #0
   10c52:	d000      	beq.n	10c56 <LORAWAN_TxDone+0x1c6>
   10c54:	e0b4      	b.n	10dc0 <LORAWAN_TxDone+0x330>
   10c56:	0027      	movs	r7, r4
   10c58:	37b0      	adds	r7, #176	; 0xb0
   10c5a:	783a      	ldrb	r2, [r7, #0]
   10c5c:	2a00      	cmp	r2, #0
   10c5e:	d000      	beq.n	10c62 <LORAWAN_TxDone+0x1d2>
   10c60:	e0ae      	b.n	10dc0 <LORAWAN_TxDone+0x330>
   10c62:	4b73      	ldr	r3, [pc, #460]	; (10e30 <LORAWAN_TxDone+0x3a0>)
   10c64:	781b      	ldrb	r3, [r3, #0]
   10c66:	07db      	lsls	r3, r3, #31
   10c68:	d513      	bpl.n	10c92 <LORAWAN_TxDone+0x202>
   10c6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10c6c:	2116      	movs	r1, #22
   10c6e:	3301      	adds	r3, #1
   10c70:	6563      	str	r3, [r4, #84]	; 0x54
   10c72:	0028      	movs	r0, r5
   10c74:	4b62      	ldr	r3, [pc, #392]	; (10e00 <LORAWAN_TxDone+0x370>)
   10c76:	4798      	blx	r3
   10c78:	9b02      	ldr	r3, [sp, #8]
   10c7a:	781b      	ldrb	r3, [r3, #0]
   10c7c:	2b01      	cmp	r3, #1
   10c7e:	d000      	beq.n	10c82 <LORAWAN_TxDone+0x1f2>
   10c80:	e09a      	b.n	10db8 <LORAWAN_TxDone+0x328>
   10c82:	0022      	movs	r2, r4
   10c84:	3260      	adds	r2, #96	; 0x60
   10c86:	7811      	ldrb	r1, [r2, #0]
   10c88:	430b      	orrs	r3, r1
   10c8a:	7013      	strb	r3, [r2, #0]
   10c8c:	783b      	ldrb	r3, [r7, #0]
   10c8e:	3301      	adds	r3, #1
   10c90:	703b      	strb	r3, [r7, #0]
   10c92:	0023      	movs	r3, r4
   10c94:	2200      	movs	r2, #0
   10c96:	33c4      	adds	r3, #196	; 0xc4
   10c98:	701a      	strb	r2, [r3, #0]
   10c9a:	0022      	movs	r2, r4
   10c9c:	210e      	movs	r1, #14
   10c9e:	2604      	movs	r6, #4
   10ca0:	3250      	adds	r2, #80	; 0x50
   10ca2:	7813      	ldrb	r3, [r2, #0]
   10ca4:	0027      	movs	r7, r4
   10ca6:	438b      	bics	r3, r1
   10ca8:	4333      	orrs	r3, r6
   10caa:	7013      	strb	r3, [r2, #0]
   10cac:	0023      	movs	r3, r4
   10cae:	33b3      	adds	r3, #179	; 0xb3
   10cb0:	781b      	ldrb	r3, [r3, #0]
   10cb2:	a906      	add	r1, sp, #24
   10cb4:	708b      	strb	r3, [r1, #2]
   10cb6:	0023      	movs	r3, r4
   10cb8:	33c2      	adds	r3, #194	; 0xc2
   10cba:	781b      	ldrb	r3, [r3, #0]
   10cbc:	3760      	adds	r7, #96	; 0x60
   10cbe:	704b      	strb	r3, [r1, #1]
   10cc0:	783b      	ldrb	r3, [r7, #0]
   10cc2:	ad0b      	add	r5, sp, #44	; 0x2c
   10cc4:	075b      	lsls	r3, r3, #29
   10cc6:	0fdb      	lsrs	r3, r3, #31
   10cc8:	700b      	strb	r3, [r1, #0]
   10cca:	002a      	movs	r2, r5
   10ccc:	4b4f      	ldr	r3, [pc, #316]	; (10e0c <LORAWAN_TxDone+0x37c>)
   10cce:	2019      	movs	r0, #25
   10cd0:	4798      	blx	r3
   10cd2:	783b      	ldrb	r3, [r7, #0]
   10cd4:	4233      	tst	r3, r6
   10cd6:	d100      	bne.n	10cda <LORAWAN_TxDone+0x24a>
   10cd8:	e0b4      	b.n	10e44 <LORAWAN_TxDone+0x3b4>
   10cda:	2300      	movs	r3, #0
   10cdc:	af09      	add	r7, sp, #36	; 0x24
   10cde:	703b      	strb	r3, [r7, #0]
   10ce0:	003a      	movs	r2, r7
   10ce2:	2100      	movs	r1, #0
   10ce4:	2009      	movs	r0, #9
   10ce6:	4b49      	ldr	r3, [pc, #292]	; (10e0c <LORAWAN_TxDone+0x37c>)
   10ce8:	4798      	blx	r3
   10cea:	0039      	movs	r1, r7
   10cec:	aa05      	add	r2, sp, #20
   10cee:	0030      	movs	r0, r6
   10cf0:	4b46      	ldr	r3, [pc, #280]	; (10e0c <LORAWAN_TxDone+0x37c>)
   10cf2:	4798      	blx	r3
   10cf4:	0021      	movs	r1, r4
   10cf6:	792b      	ldrb	r3, [r5, #4]
   10cf8:	3149      	adds	r1, #73	; 0x49
   10cfa:	700b      	strb	r3, [r1, #0]
   10cfc:	0023      	movs	r3, r4
   10cfe:	270b      	movs	r7, #11
   10d00:	782a      	ldrb	r2, [r5, #0]
   10d02:	3345      	adds	r3, #69	; 0x45
   10d04:	701a      	strb	r2, [r3, #0]
   10d06:	786a      	ldrb	r2, [r5, #1]
   10d08:	2004      	movs	r0, #4
   10d0a:	705a      	strb	r2, [r3, #1]
   10d0c:	78aa      	ldrb	r2, [r5, #2]
   10d0e:	2600      	movs	r6, #0
   10d10:	709a      	strb	r2, [r3, #2]
   10d12:	78ea      	ldrb	r2, [r5, #3]
   10d14:	70da      	strb	r2, [r3, #3]
   10d16:	ab02      	add	r3, sp, #8
   10d18:	18ff      	adds	r7, r7, r3
   10d1a:	003a      	movs	r2, r7
   10d1c:	4b3b      	ldr	r3, [pc, #236]	; (10e0c <LORAWAN_TxDone+0x37c>)
   10d1e:	4798      	blx	r3
   10d20:	0023      	movs	r3, r4
   10d22:	3360      	adds	r3, #96	; 0x60
   10d24:	781d      	ldrb	r5, [r3, #0]
   10d26:	2304      	movs	r3, #4
   10d28:	401d      	ands	r5, r3
   10d2a:	2300      	movs	r3, #0
   10d2c:	0022      	movs	r2, r4
   10d2e:	56fb      	ldrsb	r3, [r7, r3]
   10d30:	42b5      	cmp	r5, r6
   10d32:	d100      	bne.n	10d36 <LORAWAN_TxDone+0x2a6>
   10d34:	e089      	b.n	10e4a <LORAWAN_TxDone+0x3ba>
   10d36:	2100      	movs	r1, #0
   10d38:	32a2      	adds	r2, #162	; 0xa2
   10d3a:	8817      	ldrh	r7, [r2, #0]
   10d3c:	aa05      	add	r2, sp, #20
   10d3e:	5651      	ldrsb	r1, [r2, r1]
   10d40:	4d3c      	ldr	r5, [pc, #240]	; (10e34 <LORAWAN_TxDone+0x3a4>)
   10d42:	187a      	adds	r2, r7, r1
   10d44:	9202      	str	r2, [sp, #8]
   10d46:	0022      	movs	r2, r4
   10d48:	32a0      	adds	r2, #160	; 0xa0
   10d4a:	8811      	ldrh	r1, [r2, #0]
   10d4c:	27fa      	movs	r7, #250	; 0xfa
   10d4e:	18c9      	adds	r1, r1, r3
   10d50:	232c      	movs	r3, #44	; 0x2c
   10d52:	33ff      	adds	r3, #255	; 0xff
   10d54:	5ce3      	ldrb	r3, [r4, r3]
   10d56:	00bf      	lsls	r7, r7, #2
   10d58:	1ac9      	subs	r1, r1, r3
   10d5a:	0023      	movs	r3, r4
   10d5c:	33b6      	adds	r3, #182	; 0xb6
   10d5e:	7818      	ldrb	r0, [r3, #0]
   10d60:	4379      	muls	r1, r7
   10d62:	4b35      	ldr	r3, [pc, #212]	; (10e38 <LORAWAN_TxDone+0x3a8>)
   10d64:	0032      	movs	r2, r6
   10d66:	9600      	str	r6, [sp, #0]
   10d68:	47a8      	blx	r5
   10d6a:	232c      	movs	r3, #44	; 0x2c
   10d6c:	33ff      	adds	r3, #255	; 0xff
   10d6e:	5ce1      	ldrb	r1, [r4, r3]
   10d70:	9b02      	ldr	r3, [sp, #8]
   10d72:	34b7      	adds	r4, #183	; 0xb7
   10d74:	1a59      	subs	r1, r3, r1
   10d76:	7820      	ldrb	r0, [r4, #0]
   10d78:	4379      	muls	r1, r7
   10d7a:	9600      	str	r6, [sp, #0]
   10d7c:	4b2f      	ldr	r3, [pc, #188]	; (10e3c <LORAWAN_TxDone+0x3ac>)
   10d7e:	0032      	movs	r2, r6
   10d80:	47a8      	blx	r5
   10d82:	4b1b      	ldr	r3, [pc, #108]	; (10df0 <LORAWAN_TxDone+0x360>)
   10d84:	2102      	movs	r1, #2
   10d86:	001a      	movs	r2, r3
   10d88:	32e4      	adds	r2, #228	; 0xe4
   10d8a:	7812      	ldrb	r2, [r2, #0]
   10d8c:	4011      	ands	r1, r2
   10d8e:	d100      	bne.n	10d92 <LORAWAN_TxDone+0x302>
   10d90:	e08e      	b.n	10eb0 <LORAWAN_TxDone+0x420>
   10d92:	466a      	mov	r2, sp
   10d94:	8992      	ldrh	r2, [r2, #12]
   10d96:	a909      	add	r1, sp, #36	; 0x24
   10d98:	800a      	strh	r2, [r1, #0]
   10d9a:	001a      	movs	r2, r3
   10d9c:	3260      	adds	r2, #96	; 0x60
   10d9e:	7812      	ldrb	r2, [r2, #0]
   10da0:	3364      	adds	r3, #100	; 0x64
   10da2:	0752      	lsls	r2, r2, #29
   10da4:	0fd2      	lsrs	r2, r2, #31
   10da6:	710a      	strb	r2, [r1, #4]
   10da8:	781a      	ldrb	r2, [r3, #0]
   10daa:	2301      	movs	r3, #1
   10dac:	4093      	lsls	r3, r2
   10dae:	201f      	movs	r0, #31
   10db0:	804b      	strh	r3, [r1, #2]
   10db2:	4b23      	ldr	r3, [pc, #140]	; (10e40 <LORAWAN_TxDone+0x3b0>)
   10db4:	4798      	blx	r3
   10db6:	e6a6      	b.n	10b06 <LORAWAN_TxDone+0x76>
   10db8:	7833      	ldrb	r3, [r6, #0]
   10dba:	3301      	adds	r3, #1
   10dbc:	7033      	strb	r3, [r6, #0]
   10dbe:	e768      	b.n	10c92 <LORAWAN_TxDone+0x202>
   10dc0:	0022      	movs	r2, r4
   10dc2:	3250      	adds	r2, #80	; 0x50
   10dc4:	7811      	ldrb	r1, [r2, #0]
   10dc6:	2201      	movs	r2, #1
   10dc8:	4211      	tst	r1, r2
   10dca:	d100      	bne.n	10dce <LORAWAN_TxDone+0x33e>
   10dcc:	e761      	b.n	10c92 <LORAWAN_TxDone+0x202>
   10dce:	0021      	movs	r1, r4
   10dd0:	3160      	adds	r1, #96	; 0x60
   10dd2:	7809      	ldrb	r1, [r1, #0]
   10dd4:	4211      	tst	r1, r2
   10dd6:	d104      	bne.n	10de2 <LORAWAN_TxDone+0x352>
   10dd8:	189b      	adds	r3, r3, r2
   10dda:	0022      	movs	r2, r4
   10ddc:	32af      	adds	r2, #175	; 0xaf
   10dde:	7013      	strb	r3, [r2, #0]
   10de0:	e757      	b.n	10c92 <LORAWAN_TxDone+0x202>
   10de2:	0022      	movs	r2, r4
   10de4:	32b0      	adds	r2, #176	; 0xb0
   10de6:	7813      	ldrb	r3, [r2, #0]
   10de8:	3301      	adds	r3, #1
   10dea:	e7f8      	b.n	10dde <LORAWAN_TxDone+0x34e>
   10dec:	00010819 	.word	0x00010819
   10df0:	20001ca4 	.word	0x20001ca4
   10df4:	20001dd0 	.word	0x20001dd0
   10df8:	20001dc5 	.word	0x20001dc5
   10dfc:	000131d5 	.word	0x000131d5
   10e00:	0000b745 	.word	0x0000b745
   10e04:	0000f8c9 	.word	0x0000f8c9
   10e08:	0000ffff 	.word	0x0000ffff
   10e0c:	0000b321 	.word	0x0000b321
   10e10:	00014505 	.word	0x00014505
   10e14:	0000fe09 	.word	0x0000fe09
   10e18:	20001de1 	.word	0x20001de1
   10e1c:	00013b25 	.word	0x00013b25
   10e20:	00010639 	.word	0x00010639
   10e24:	0000ef25 	.word	0x0000ef25
   10e28:	0000f875 	.word	0x0000f875
   10e2c:	0000f8a5 	.word	0x0000f8a5
   10e30:	20001cf4 	.word	0x20001cf4
   10e34:	0000c4b5 	.word	0x0000c4b5
   10e38:	0000fd91 	.word	0x0000fd91
   10e3c:	00011249 	.word	0x00011249
   10e40:	0000b359 	.word	0x0000b359
   10e44:	aa05      	add	r2, sp, #20
   10e46:	492d      	ldr	r1, [pc, #180]	; (10efc <LORAWAN_TxDone+0x46c>)
   10e48:	e751      	b.n	10cee <LORAWAN_TxDone+0x25e>
   10e4a:	329c      	adds	r2, #156	; 0x9c
   10e4c:	8811      	ldrh	r1, [r2, #0]
   10e4e:	26fa      	movs	r6, #250	; 0xfa
   10e50:	18c9      	adds	r1, r1, r3
   10e52:	232c      	movs	r3, #44	; 0x2c
   10e54:	33ff      	adds	r3, #255	; 0xff
   10e56:	5ce3      	ldrb	r3, [r4, r3]
   10e58:	00b6      	lsls	r6, r6, #2
   10e5a:	1ac9      	subs	r1, r1, r3
   10e5c:	0023      	movs	r3, r4
   10e5e:	33b8      	adds	r3, #184	; 0xb8
   10e60:	7818      	ldrb	r0, [r3, #0]
   10e62:	4371      	muls	r1, r6
   10e64:	4b26      	ldr	r3, [pc, #152]	; (10f00 <LORAWAN_TxDone+0x470>)
   10e66:	9500      	str	r5, [sp, #0]
   10e68:	002a      	movs	r2, r5
   10e6a:	4f26      	ldr	r7, [pc, #152]	; (10f04 <LORAWAN_TxDone+0x474>)
   10e6c:	47b8      	blx	r7
   10e6e:	0023      	movs	r3, r4
   10e70:	33c8      	adds	r3, #200	; 0xc8
   10e72:	781b      	ldrb	r3, [r3, #0]
   10e74:	2b04      	cmp	r3, #4
   10e76:	d105      	bne.n	10e84 <LORAWAN_TxDone+0x3f4>
   10e78:	2000      	movs	r0, #0
   10e7a:	ab05      	add	r3, sp, #20
   10e7c:	5618      	ldrsb	r0, [r3, r0]
   10e7e:	4b22      	ldr	r3, [pc, #136]	; (10f08 <LORAWAN_TxDone+0x478>)
   10e80:	4798      	blx	r3
   10e82:	e77e      	b.n	10d82 <LORAWAN_TxDone+0x2f2>
   10e84:	2b01      	cmp	r3, #1
   10e86:	d000      	beq.n	10e8a <LORAWAN_TxDone+0x3fa>
   10e88:	e77b      	b.n	10d82 <LORAWAN_TxDone+0x2f2>
   10e8a:	0023      	movs	r3, r4
   10e8c:	339e      	adds	r3, #158	; 0x9e
   10e8e:	8819      	ldrh	r1, [r3, #0]
   10e90:	ab05      	add	r3, sp, #20
   10e92:	781b      	ldrb	r3, [r3, #0]
   10e94:	002a      	movs	r2, r5
   10e96:	b25b      	sxtb	r3, r3
   10e98:	18c9      	adds	r1, r1, r3
   10e9a:	232c      	movs	r3, #44	; 0x2c
   10e9c:	33ff      	adds	r3, #255	; 0xff
   10e9e:	5ce3      	ldrb	r3, [r4, r3]
   10ea0:	34b9      	adds	r4, #185	; 0xb9
   10ea2:	1ac9      	subs	r1, r1, r3
   10ea4:	7820      	ldrb	r0, [r4, #0]
   10ea6:	4371      	muls	r1, r6
   10ea8:	9500      	str	r5, [sp, #0]
   10eaa:	4b18      	ldr	r3, [pc, #96]	; (10f0c <LORAWAN_TxDone+0x47c>)
   10eac:	47b8      	blx	r7
   10eae:	e768      	b.n	10d82 <LORAWAN_TxDone+0x2f2>
   10eb0:	0753      	lsls	r3, r2, #29
   10eb2:	d400      	bmi.n	10eb6 <LORAWAN_TxDone+0x426>
   10eb4:	e627      	b.n	10b06 <LORAWAN_TxDone+0x76>
   10eb6:	2020      	movs	r0, #32
   10eb8:	e77b      	b.n	10db2 <LORAWAN_TxDone+0x322>
   10eba:	4915      	ldr	r1, [pc, #84]	; (10f10 <LORAWAN_TxDone+0x480>)
   10ebc:	784a      	ldrb	r2, [r1, #1]
   10ebe:	780b      	ldrb	r3, [r1, #0]
   10ec0:	0212      	lsls	r2, r2, #8
   10ec2:	431a      	orrs	r2, r3
   10ec4:	788b      	ldrb	r3, [r1, #2]
   10ec6:	041b      	lsls	r3, r3, #16
   10ec8:	431a      	orrs	r2, r3
   10eca:	78cb      	ldrb	r3, [r1, #3]
   10ecc:	061b      	lsls	r3, r3, #24
   10ece:	4313      	orrs	r3, r2
   10ed0:	d100      	bne.n	10ed4 <LORAWAN_TxDone+0x444>
   10ed2:	e618      	b.n	10b06 <LORAWAN_TxDone+0x76>
   10ed4:	4a0f      	ldr	r2, [pc, #60]	; (10f14 <LORAWAN_TxDone+0x484>)
   10ed6:	7811      	ldrb	r1, [r2, #0]
   10ed8:	221c      	movs	r2, #28
   10eda:	2904      	cmp	r1, #4
   10edc:	d003      	beq.n	10ee6 <LORAWAN_TxDone+0x456>
   10ede:	2200      	movs	r2, #0
   10ee0:	2d07      	cmp	r5, #7
   10ee2:	d100      	bne.n	10ee6 <LORAWAN_TxDone+0x456>
   10ee4:	002a      	movs	r2, r5
   10ee6:	0021      	movs	r1, r4
   10ee8:	2004      	movs	r0, #4
   10eea:	31d4      	adds	r1, #212	; 0xd4
   10eec:	7008      	strb	r0, [r1, #0]
   10eee:	0020      	movs	r0, r4
   10ef0:	34d0      	adds	r4, #208	; 0xd0
   10ef2:	30d8      	adds	r0, #216	; 0xd8
   10ef4:	7002      	strb	r2, [r0, #0]
   10ef6:	6820      	ldr	r0, [r4, #0]
   10ef8:	4798      	blx	r3
   10efa:	e604      	b.n	10b06 <LORAWAN_TxDone+0x76>
   10efc:	20001cf2 	.word	0x20001cf2
   10f00:	0000fd91 	.word	0x0000fd91
   10f04:	0000c4b5 	.word	0x0000c4b5
   10f08:	00012b75 	.word	0x00012b75
   10f0c:	00011249 	.word	0x00011249
   10f10:	20001ee4 	.word	0x20001ee4
   10f14:	20001dd0 	.word	0x20001dd0

00010f18 <radioCallback>:
   10f18:	4b10      	ldr	r3, [pc, #64]	; (10f5c <radioCallback+0x44>)
   10f1a:	b510      	push	{r4, lr}
   10f1c:	7018      	strb	r0, [r3, #0]
   10f1e:	3801      	subs	r0, #1
   10f20:	b2c0      	uxtb	r0, r0
   10f22:	000c      	movs	r4, r1
   10f24:	281f      	cmp	r0, #31
   10f26:	d809      	bhi.n	10f3c <radioCallback+0x24>
   10f28:	2301      	movs	r3, #1
   10f2a:	4083      	lsls	r3, r0
   10f2c:	4a0c      	ldr	r2, [pc, #48]	; (10f60 <radioCallback+0x48>)
   10f2e:	4213      	tst	r3, r2
   10f30:	d109      	bne.n	10f46 <radioCallback+0x2e>
   10f32:	220a      	movs	r2, #10
   10f34:	4213      	tst	r3, r2
   10f36:	d102      	bne.n	10f3e <radioCallback+0x26>
   10f38:	2b00      	cmp	r3, #0
   10f3a:	db08      	blt.n	10f4e <radioCallback+0x36>
   10f3c:	bd10      	pop	{r4, pc}
   10f3e:	0008      	movs	r0, r1
   10f40:	4b08      	ldr	r3, [pc, #32]	; (10f64 <radioCallback+0x4c>)
   10f42:	4798      	blx	r3
   10f44:	e7fa      	b.n	10f3c <radioCallback+0x24>
   10f46:	2002      	movs	r0, #2
   10f48:	4b07      	ldr	r3, [pc, #28]	; (10f68 <radioCallback+0x50>)
   10f4a:	4798      	blx	r3
   10f4c:	e7f6      	b.n	10f3c <radioCallback+0x24>
   10f4e:	4b07      	ldr	r3, [pc, #28]	; (10f6c <radioCallback+0x54>)
   10f50:	681b      	ldr	r3, [r3, #0]
   10f52:	2b00      	cmp	r3, #0
   10f54:	d0f2      	beq.n	10f3c <radioCallback+0x24>
   10f56:	4798      	blx	r3
   10f58:	6020      	str	r0, [r4, #0]
   10f5a:	e7ef      	b.n	10f3c <radioCallback+0x24>
   10f5c:	20001dd0 	.word	0x20001dd0
   10f60:	00008081 	.word	0x00008081
   10f64:	00010a91 	.word	0x00010a91
   10f68:	00013065 	.word	0x00013065
   10f6c:	20001ee0 	.word	0x20001ee0

00010f70 <LorawanCheckAndDoRetryOnTimeout>:
   10f70:	b513      	push	{r0, r1, r4, lr}
   10f72:	4c34      	ldr	r4, [pc, #208]	; (11044 <LorawanCheckAndDoRetryOnTimeout+0xd4>)
   10f74:	0023      	movs	r3, r4
   10f76:	3360      	adds	r3, #96	; 0x60
   10f78:	781b      	ldrb	r3, [r3, #0]
   10f7a:	0022      	movs	r2, r4
   10f7c:	07db      	lsls	r3, r3, #31
   10f7e:	d54e      	bpl.n	1101e <LorawanCheckAndDoRetryOnTimeout+0xae>
   10f80:	0023      	movs	r3, r4
   10f82:	32b0      	adds	r2, #176	; 0xb0
   10f84:	33ae      	adds	r3, #174	; 0xae
   10f86:	7812      	ldrb	r2, [r2, #0]
   10f88:	781b      	ldrb	r3, [r3, #0]
   10f8a:	429a      	cmp	r2, r3
   10f8c:	d839      	bhi.n	11002 <LorawanCheckAndDoRetryOnTimeout+0x92>
   10f8e:	2395      	movs	r3, #149	; 0x95
   10f90:	005b      	lsls	r3, r3, #1
   10f92:	5ce3      	ldrb	r3, [r4, r3]
   10f94:	2b00      	cmp	r3, #0
   10f96:	d034      	beq.n	11002 <LorawanCheckAndDoRetryOnTimeout+0x92>
   10f98:	0023      	movs	r3, r4
   10f9a:	33c8      	adds	r3, #200	; 0xc8
   10f9c:	781b      	ldrb	r3, [r3, #0]
   10f9e:	2b01      	cmp	r3, #1
   10fa0:	d11a      	bne.n	10fd8 <LorawanCheckAndDoRetryOnTimeout+0x68>
   10fa2:	0021      	movs	r1, r4
   10fa4:	220e      	movs	r2, #14
   10fa6:	3150      	adds	r1, #80	; 0x50
   10fa8:	780b      	ldrb	r3, [r1, #0]
   10faa:	4393      	bics	r3, r2
   10fac:	001a      	movs	r2, r3
   10fae:	230c      	movs	r3, #12
   10fb0:	4313      	orrs	r3, r2
   10fb2:	700b      	strb	r3, [r1, #0]
   10fb4:	0023      	movs	r3, r4
   10fb6:	33a6      	adds	r3, #166	; 0xa6
   10fb8:	8819      	ldrh	r1, [r3, #0]
   10fba:	232c      	movs	r3, #44	; 0x2c
   10fbc:	33ff      	adds	r3, #255	; 0xff
   10fbe:	5ce3      	ldrb	r3, [r4, r3]
   10fc0:	2200      	movs	r2, #0
   10fc2:	1acb      	subs	r3, r1, r3
   10fc4:	21fa      	movs	r1, #250	; 0xfa
   10fc6:	34bc      	adds	r4, #188	; 0xbc
   10fc8:	0089      	lsls	r1, r1, #2
   10fca:	7820      	ldrb	r0, [r4, #0]
   10fcc:	4359      	muls	r1, r3
   10fce:	9200      	str	r2, [sp, #0]
   10fd0:	4b1d      	ldr	r3, [pc, #116]	; (11048 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
   10fd2:	4c1e      	ldr	r4, [pc, #120]	; (1104c <LorawanCheckAndDoRetryOnTimeout+0xdc>)
   10fd4:	47a0      	blx	r4
   10fd6:	bd13      	pop	{r0, r1, r4, pc}
   10fd8:	2b04      	cmp	r3, #4
   10fda:	d1fc      	bne.n	10fd6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   10fdc:	4b1c      	ldr	r3, [pc, #112]	; (11050 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
   10fde:	4798      	blx	r3
   10fe0:	349a      	adds	r4, #154	; 0x9a
   10fe2:	300d      	adds	r0, #13
   10fe4:	8823      	ldrh	r3, [r4, #0]
   10fe6:	b280      	uxth	r0, r0
   10fe8:	4283      	cmp	r3, r0
   10fea:	d802      	bhi.n	10ff2 <LorawanCheckAndDoRetryOnTimeout+0x82>
   10fec:	4b19      	ldr	r3, [pc, #100]	; (11054 <LorawanCheckAndDoRetryOnTimeout+0xe4>)
   10fee:	4798      	blx	r3
   10ff0:	e7f1      	b.n	10fd6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   10ff2:	4b19      	ldr	r3, [pc, #100]	; (11058 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   10ff4:	4798      	blx	r3
   10ff6:	4b19      	ldr	r3, [pc, #100]	; (1105c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   10ff8:	4798      	blx	r3
   10ffa:	200e      	movs	r0, #14
   10ffc:	4b18      	ldr	r3, [pc, #96]	; (11060 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   10ffe:	4798      	blx	r3
   11000:	e7e9      	b.n	10fd6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   11002:	4b15      	ldr	r3, [pc, #84]	; (11058 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
   11004:	4798      	blx	r3
   11006:	4b15      	ldr	r3, [pc, #84]	; (1105c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   11008:	4798      	blx	r3
   1100a:	34c8      	adds	r4, #200	; 0xc8
   1100c:	4b14      	ldr	r3, [pc, #80]	; (11060 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
   1100e:	2012      	movs	r0, #18
   11010:	4798      	blx	r3
   11012:	7823      	ldrb	r3, [r4, #0]
   11014:	2b04      	cmp	r3, #4
   11016:	d1de      	bne.n	10fd6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   11018:	4b12      	ldr	r3, [pc, #72]	; (11064 <LorawanCheckAndDoRetryOnTimeout+0xf4>)
   1101a:	4798      	blx	r3
   1101c:	e7db      	b.n	10fd6 <LorawanCheckAndDoRetryOnTimeout+0x66>
   1101e:	0023      	movs	r3, r4
   11020:	32af      	adds	r2, #175	; 0xaf
   11022:	33ad      	adds	r3, #173	; 0xad
   11024:	7812      	ldrb	r2, [r2, #0]
   11026:	781b      	ldrb	r3, [r3, #0]
   11028:	429a      	cmp	r2, r3
   1102a:	d804      	bhi.n	11036 <LorawanCheckAndDoRetryOnTimeout+0xc6>
   1102c:	2395      	movs	r3, #149	; 0x95
   1102e:	005b      	lsls	r3, r3, #1
   11030:	5ce3      	ldrb	r3, [r4, r3]
   11032:	2b00      	cmp	r3, #0
   11034:	d1da      	bne.n	10fec <LorawanCheckAndDoRetryOnTimeout+0x7c>
   11036:	4b0c      	ldr	r3, [pc, #48]	; (11068 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
   11038:	4798      	blx	r3
   1103a:	4b08      	ldr	r3, [pc, #32]	; (1105c <LorawanCheckAndDoRetryOnTimeout+0xec>)
   1103c:	4798      	blx	r3
   1103e:	2008      	movs	r0, #8
   11040:	e7dc      	b.n	10ffc <LorawanCheckAndDoRetryOnTimeout+0x8c>
   11042:	46c0      	nop			; (mov r8, r8)
   11044:	20001ca4 	.word	0x20001ca4
   11048:	0001106d 	.word	0x0001106d
   1104c:	0000c4b5 	.word	0x0000c4b5
   11050:	0000f011 	.word	0x0000f011
   11054:	0000fe75 	.word	0x0000fe75
   11058:	0000f875 	.word	0x0000f875
   1105c:	0000ef25 	.word	0x0000ef25
   11060:	00010639 	.word	0x00010639
   11064:	00013b09 	.word	0x00013b09
   11068:	0000f8a5 	.word	0x0000f8a5

0001106c <AckRetransmissionCallback>:
   1106c:	b510      	push	{r4, lr}
   1106e:	4c1c      	ldr	r4, [pc, #112]	; (110e0 <AckRetransmissionCallback+0x74>)
   11070:	0023      	movs	r3, r4
   11072:	3350      	adds	r3, #80	; 0x50
   11074:	781b      	ldrb	r3, [r3, #0]
   11076:	2b7f      	cmp	r3, #127	; 0x7f
   11078:	d82e      	bhi.n	110d8 <AckRetransmissionCallback+0x6c>
   1107a:	0023      	movs	r3, r4
   1107c:	33c8      	adds	r3, #200	; 0xc8
   1107e:	781b      	ldrb	r3, [r3, #0]
   11080:	2b04      	cmp	r3, #4
   11082:	d102      	bne.n	1108a <AckRetransmissionCallback+0x1e>
   11084:	4b17      	ldr	r3, [pc, #92]	; (110e4 <AckRetransmissionCallback+0x78>)
   11086:	4798      	blx	r3
   11088:	e01f      	b.n	110ca <AckRetransmissionCallback+0x5e>
   1108a:	2b01      	cmp	r3, #1
   1108c:	d11d      	bne.n	110ca <AckRetransmissionCallback+0x5e>
   1108e:	0022      	movs	r2, r4
   11090:	0023      	movs	r3, r4
   11092:	32b0      	adds	r2, #176	; 0xb0
   11094:	33ae      	adds	r3, #174	; 0xae
   11096:	7812      	ldrb	r2, [r2, #0]
   11098:	781b      	ldrb	r3, [r3, #0]
   1109a:	429a      	cmp	r2, r3
   1109c:	d816      	bhi.n	110cc <AckRetransmissionCallback+0x60>
   1109e:	2395      	movs	r3, #149	; 0x95
   110a0:	005b      	lsls	r3, r3, #1
   110a2:	5ce3      	ldrb	r3, [r4, r3]
   110a4:	2b00      	cmp	r3, #0
   110a6:	d011      	beq.n	110cc <AckRetransmissionCallback+0x60>
   110a8:	4b0f      	ldr	r3, [pc, #60]	; (110e8 <AckRetransmissionCallback+0x7c>)
   110aa:	4798      	blx	r3
   110ac:	349a      	adds	r4, #154	; 0x9a
   110ae:	300d      	adds	r0, #13
   110b0:	8823      	ldrh	r3, [r4, #0]
   110b2:	b280      	uxth	r0, r0
   110b4:	4283      	cmp	r3, r0
   110b6:	d801      	bhi.n	110bc <AckRetransmissionCallback+0x50>
   110b8:	4b0c      	ldr	r3, [pc, #48]	; (110ec <AckRetransmissionCallback+0x80>)
   110ba:	e7e4      	b.n	11086 <AckRetransmissionCallback+0x1a>
   110bc:	4b0c      	ldr	r3, [pc, #48]	; (110f0 <AckRetransmissionCallback+0x84>)
   110be:	4798      	blx	r3
   110c0:	4b0c      	ldr	r3, [pc, #48]	; (110f4 <AckRetransmissionCallback+0x88>)
   110c2:	4798      	blx	r3
   110c4:	200e      	movs	r0, #14
   110c6:	4b0c      	ldr	r3, [pc, #48]	; (110f8 <AckRetransmissionCallback+0x8c>)
   110c8:	4798      	blx	r3
   110ca:	bd10      	pop	{r4, pc}
   110cc:	4b08      	ldr	r3, [pc, #32]	; (110f0 <AckRetransmissionCallback+0x84>)
   110ce:	4798      	blx	r3
   110d0:	4b08      	ldr	r3, [pc, #32]	; (110f4 <AckRetransmissionCallback+0x88>)
   110d2:	4798      	blx	r3
   110d4:	2012      	movs	r0, #18
   110d6:	e7f6      	b.n	110c6 <AckRetransmissionCallback+0x5a>
   110d8:	4b05      	ldr	r3, [pc, #20]	; (110f0 <AckRetransmissionCallback+0x84>)
   110da:	4798      	blx	r3
   110dc:	4b05      	ldr	r3, [pc, #20]	; (110f4 <AckRetransmissionCallback+0x88>)
   110de:	e7d2      	b.n	11086 <AckRetransmissionCallback+0x1a>
   110e0:	20001ca4 	.word	0x20001ca4
   110e4:	00010f71 	.word	0x00010f71
   110e8:	0000f011 	.word	0x0000f011
   110ec:	0000fe75 	.word	0x0000fe75
   110f0:	0000f875 	.word	0x0000f875
   110f4:	0000ef25 	.word	0x0000ef25
   110f8:	00010639 	.word	0x00010639

000110fc <LORAWAN_RxTimeout>:
   110fc:	4b22      	ldr	r3, [pc, #136]	; (11188 <LORAWAN_RxTimeout+0x8c>)
   110fe:	b510      	push	{r4, lr}
   11100:	001a      	movs	r2, r3
   11102:	3250      	adds	r2, #80	; 0x50
   11104:	7812      	ldrb	r2, [r2, #0]
   11106:	b251      	sxtb	r1, r2
   11108:	2900      	cmp	r1, #0
   1110a:	db21      	blt.n	11150 <LORAWAN_RxTimeout+0x54>
   1110c:	0019      	movs	r1, r3
   1110e:	31c8      	adds	r1, #200	; 0xc8
   11110:	7809      	ldrb	r1, [r1, #0]
   11112:	2904      	cmp	r1, #4
   11114:	d104      	bne.n	11120 <LORAWAN_RxTimeout+0x24>
   11116:	07d1      	lsls	r1, r2, #31
   11118:	d502      	bpl.n	11120 <LORAWAN_RxTimeout+0x24>
   1111a:	4b1c      	ldr	r3, [pc, #112]	; (1118c <LORAWAN_RxTimeout+0x90>)
   1111c:	4798      	blx	r3
   1111e:	bd10      	pop	{r4, pc}
   11120:	210e      	movs	r1, #14
   11122:	0010      	movs	r0, r2
   11124:	4008      	ands	r0, r1
   11126:	2806      	cmp	r0, #6
   11128:	d107      	bne.n	1113a <LORAWAN_RxTimeout+0x3e>
   1112a:	3350      	adds	r3, #80	; 0x50
   1112c:	781a      	ldrb	r2, [r3, #0]
   1112e:	438a      	bics	r2, r1
   11130:	0011      	movs	r1, r2
   11132:	2208      	movs	r2, #8
   11134:	430a      	orrs	r2, r1
   11136:	701a      	strb	r2, [r3, #0]
   11138:	e7f1      	b.n	1111e <LORAWAN_RxTimeout+0x22>
   1113a:	3360      	adds	r3, #96	; 0x60
   1113c:	781b      	ldrb	r3, [r3, #0]
   1113e:	075b      	lsls	r3, r3, #29
   11140:	d502      	bpl.n	11148 <LORAWAN_RxTimeout+0x4c>
   11142:	4b13      	ldr	r3, [pc, #76]	; (11190 <LORAWAN_RxTimeout+0x94>)
   11144:	4798      	blx	r3
   11146:	e7ea      	b.n	1111e <LORAWAN_RxTimeout+0x22>
   11148:	07d3      	lsls	r3, r2, #31
   1114a:	d5e8      	bpl.n	1111e <LORAWAN_RxTimeout+0x22>
   1114c:	4b11      	ldr	r3, [pc, #68]	; (11194 <LORAWAN_RxTimeout+0x98>)
   1114e:	e7f9      	b.n	11144 <LORAWAN_RxTimeout+0x48>
   11150:	4811      	ldr	r0, [pc, #68]	; (11198 <LORAWAN_RxTimeout+0x9c>)
   11152:	7841      	ldrb	r1, [r0, #1]
   11154:	7802      	ldrb	r2, [r0, #0]
   11156:	0209      	lsls	r1, r1, #8
   11158:	4311      	orrs	r1, r2
   1115a:	7882      	ldrb	r2, [r0, #2]
   1115c:	0412      	lsls	r2, r2, #16
   1115e:	4311      	orrs	r1, r2
   11160:	78c2      	ldrb	r2, [r0, #3]
   11162:	0612      	lsls	r2, r2, #24
   11164:	430a      	orrs	r2, r1
   11166:	d0da      	beq.n	1111e <LORAWAN_RxTimeout+0x22>
   11168:	2190      	movs	r1, #144	; 0x90
   1116a:	2001      	movs	r0, #1
   1116c:	0049      	lsls	r1, r1, #1
   1116e:	5458      	strb	r0, [r3, r1]
   11170:	0019      	movs	r1, r3
   11172:	2404      	movs	r4, #4
   11174:	31d4      	adds	r1, #212	; 0xd4
   11176:	700c      	strb	r4, [r1, #0]
   11178:	001c      	movs	r4, r3
   1117a:	33d0      	adds	r3, #208	; 0xd0
   1117c:	34d8      	adds	r4, #216	; 0xd8
   1117e:	7020      	strb	r0, [r4, #0]
   11180:	6818      	ldr	r0, [r3, #0]
   11182:	4790      	blx	r2
   11184:	e7cb      	b.n	1111e <LORAWAN_RxTimeout+0x22>
   11186:	46c0      	nop			; (mov r8, r8)
   11188:	20001ca4 	.word	0x20001ca4
   1118c:	00012bf9 	.word	0x00012bf9
   11190:	0000f8c9 	.word	0x0000f8c9
   11194:	00010f71 	.word	0x00010f71
   11198:	20001ee4 	.word	0x20001ee4

0001119c <LorawanConfigureRadioForRX2>:
   1119c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1119e:	466b      	mov	r3, sp
   111a0:	4c21      	ldr	r4, [pc, #132]	; (11228 <LorawanConfigureRadioForRX2+0x8c>)
   111a2:	1cdd      	adds	r5, r3, #3
   111a4:	0023      	movs	r3, r4
   111a6:	2100      	movs	r1, #0
   111a8:	3360      	adds	r3, #96	; 0x60
   111aa:	781b      	ldrb	r3, [r3, #0]
   111ac:	0007      	movs	r7, r0
   111ae:	7029      	strb	r1, [r5, #0]
   111b0:	075b      	lsls	r3, r3, #29
   111b2:	d52c      	bpl.n	1120e <LorawanConfigureRadioForRX2+0x72>
   111b4:	002a      	movs	r2, r5
   111b6:	2009      	movs	r0, #9
   111b8:	4b1c      	ldr	r3, [pc, #112]	; (1122c <LorawanConfigureRadioForRX2+0x90>)
   111ba:	4798      	blx	r3
   111bc:	0022      	movs	r2, r4
   111be:	0023      	movs	r3, r4
   111c0:	324c      	adds	r2, #76	; 0x4c
   111c2:	8811      	ldrh	r1, [r2, #0]
   111c4:	334a      	adds	r3, #74	; 0x4a
   111c6:	881b      	ldrh	r3, [r3, #0]
   111c8:	0409      	lsls	r1, r1, #16
   111ca:	4319      	orrs	r1, r3
   111cc:	7828      	ldrb	r0, [r5, #0]
   111ce:	4b18      	ldr	r3, [pc, #96]	; (11230 <LorawanConfigureRadioForRX2+0x94>)
   111d0:	4798      	blx	r3
   111d2:	2300      	movs	r3, #0
   111d4:	0022      	movs	r2, r4
   111d6:	ae01      	add	r6, sp, #4
   111d8:	7033      	strb	r3, [r6, #0]
   111da:	32c8      	adds	r2, #200	; 0xc8
   111dc:	7812      	ldrb	r2, [r2, #0]
   111de:	2a04      	cmp	r2, #4
   111e0:	d11a      	bne.n	11218 <LorawanConfigureRadioForRX2+0x7c>
   111e2:	3450      	adds	r4, #80	; 0x50
   111e4:	7822      	ldrb	r2, [r4, #0]
   111e6:	07d2      	lsls	r2, r2, #31
   111e8:	d516      	bpl.n	11218 <LorawanConfigureRadioForRX2+0x7c>
   111ea:	8073      	strh	r3, [r6, #2]
   111ec:	0030      	movs	r0, r6
   111ee:	4b11      	ldr	r3, [pc, #68]	; (11234 <LorawanConfigureRadioForRX2+0x98>)
   111f0:	4798      	blx	r3
   111f2:	1e04      	subs	r4, r0, #0
   111f4:	d00a      	beq.n	1120c <LorawanConfigureRadioForRX2+0x70>
   111f6:	4b10      	ldr	r3, [pc, #64]	; (11238 <LorawanConfigureRadioForRX2+0x9c>)
   111f8:	4798      	blx	r3
   111fa:	4b10      	ldr	r3, [pc, #64]	; (1123c <LorawanConfigureRadioForRX2+0xa0>)
   111fc:	4798      	blx	r3
   111fe:	4b10      	ldr	r3, [pc, #64]	; (11240 <LorawanConfigureRadioForRX2+0xa4>)
   11200:	4798      	blx	r3
   11202:	2f00      	cmp	r7, #0
   11204:	d002      	beq.n	1120c <LorawanConfigureRadioForRX2+0x70>
   11206:	0020      	movs	r0, r4
   11208:	4b0e      	ldr	r3, [pc, #56]	; (11244 <LorawanConfigureRadioForRX2+0xa8>)
   1120a:	4798      	blx	r3
   1120c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   1120e:	0023      	movs	r3, r4
   11210:	334e      	adds	r3, #78	; 0x4e
   11212:	781b      	ldrb	r3, [r3, #0]
   11214:	702b      	strb	r3, [r5, #0]
   11216:	e7d1      	b.n	111bc <LorawanConfigureRadioForRX2+0x20>
   11218:	466b      	mov	r3, sp
   1121a:	0029      	movs	r1, r5
   1121c:	1d9a      	adds	r2, r3, #6
   1121e:	2003      	movs	r0, #3
   11220:	4b02      	ldr	r3, [pc, #8]	; (1122c <LorawanConfigureRadioForRX2+0x90>)
   11222:	4798      	blx	r3
   11224:	e7e2      	b.n	111ec <LorawanConfigureRadioForRX2+0x50>
   11226:	46c0      	nop			; (mov r8, r8)
   11228:	20001ca4 	.word	0x20001ca4
   1122c:	0000b321 	.word	0x0000b321
   11230:	0000fd25 	.word	0x0000fd25
   11234:	00014505 	.word	0x00014505
   11238:	0000f875 	.word	0x0000f875
   1123c:	0000f8a5 	.word	0x0000f8a5
   11240:	0000ef25 	.word	0x0000ef25
   11244:	00010639 	.word	0x00010639

00011248 <LorawanReceiveWindow2Callback>:
   11248:	b570      	push	{r4, r5, r6, lr}
   1124a:	4c16      	ldr	r4, [pc, #88]	; (112a4 <LorawanReceiveWindow2Callback+0x5c>)
   1124c:	0025      	movs	r5, r4
   1124e:	3550      	adds	r5, #80	; 0x50
   11250:	782b      	ldrb	r3, [r5, #0]
   11252:	2b7f      	cmp	r3, #127	; 0x7f
   11254:	d811      	bhi.n	1127a <LorawanReceiveWindow2Callback+0x32>
   11256:	4b14      	ldr	r3, [pc, #80]	; (112a8 <LorawanReceiveWindow2Callback+0x60>)
   11258:	4798      	blx	r3
   1125a:	2801      	cmp	r0, #1
   1125c:	d109      	bne.n	11272 <LorawanReceiveWindow2Callback+0x2a>
   1125e:	220e      	movs	r2, #14
   11260:	782b      	ldrb	r3, [r5, #0]
   11262:	4393      	bics	r3, r2
   11264:	001a      	movs	r2, r3
   11266:	230a      	movs	r3, #10
   11268:	4313      	orrs	r3, r2
   1126a:	702b      	strb	r3, [r5, #0]
   1126c:	4b0f      	ldr	r3, [pc, #60]	; (112ac <LorawanReceiveWindow2Callback+0x64>)
   1126e:	4798      	blx	r3
   11270:	bd70      	pop	{r4, r5, r6, pc}
   11272:	2301      	movs	r3, #1
   11274:	34c4      	adds	r4, #196	; 0xc4
   11276:	7023      	strb	r3, [r4, #0]
   11278:	e7fa      	b.n	11270 <LorawanReceiveWindow2Callback+0x28>
   1127a:	2104      	movs	r1, #4
   1127c:	3460      	adds	r4, #96	; 0x60
   1127e:	7822      	ldrb	r2, [r4, #0]
   11280:	420a      	tst	r2, r1
   11282:	d007      	beq.n	11294 <LorawanReceiveWindow2Callback+0x4c>
   11284:	2001      	movs	r0, #1
   11286:	4383      	bics	r3, r0
   11288:	438a      	bics	r2, r1
   1128a:	702b      	strb	r3, [r5, #0]
   1128c:	3107      	adds	r1, #7
   1128e:	4b08      	ldr	r3, [pc, #32]	; (112b0 <LorawanReceiveWindow2Callback+0x68>)
   11290:	7022      	strb	r2, [r4, #0]
   11292:	4798      	blx	r3
   11294:	4b07      	ldr	r3, [pc, #28]	; (112b4 <LorawanReceiveWindow2Callback+0x6c>)
   11296:	4798      	blx	r3
   11298:	4b07      	ldr	r3, [pc, #28]	; (112b8 <LorawanReceiveWindow2Callback+0x70>)
   1129a:	4798      	blx	r3
   1129c:	4b07      	ldr	r3, [pc, #28]	; (112bc <LorawanReceiveWindow2Callback+0x74>)
   1129e:	4798      	blx	r3
   112a0:	e7e6      	b.n	11270 <LorawanReceiveWindow2Callback+0x28>
   112a2:	46c0      	nop			; (mov r8, r8)
   112a4:	20001ca4 	.word	0x20001ca4
   112a8:	00013b09 	.word	0x00013b09
   112ac:	0001119d 	.word	0x0001119d
   112b0:	0000b745 	.word	0x0000b745
   112b4:	0000f8a5 	.word	0x0000f8a5
   112b8:	0000f875 	.word	0x0000f875
   112bc:	0000ef25 	.word	0x0000ef25

000112c0 <SetReceptionNotOkState>:
   112c0:	2290      	movs	r2, #144	; 0x90
   112c2:	2101      	movs	r1, #1
   112c4:	4b19      	ldr	r3, [pc, #100]	; (1132c <SetReceptionNotOkState+0x6c>)
   112c6:	0052      	lsls	r2, r2, #1
   112c8:	b510      	push	{r4, lr}
   112ca:	5499      	strb	r1, [r3, r2]
   112cc:	001a      	movs	r2, r3
   112ce:	0019      	movs	r1, r3
   112d0:	32c8      	adds	r2, #200	; 0xc8
   112d2:	7812      	ldrb	r2, [r2, #0]
   112d4:	3150      	adds	r1, #80	; 0x50
   112d6:	200e      	movs	r0, #14
   112d8:	2a01      	cmp	r2, #1
   112da:	d11d      	bne.n	11318 <SetReceptionNotOkState+0x58>
   112dc:	780a      	ldrb	r2, [r1, #0]
   112de:	4002      	ands	r2, r0
   112e0:	2a0a      	cmp	r2, #10
   112e2:	d006      	beq.n	112f2 <SetReceptionNotOkState+0x32>
   112e4:	2a06      	cmp	r2, #6
   112e6:	d113      	bne.n	11310 <SetReceptionNotOkState+0x50>
   112e8:	001a      	movs	r2, r3
   112ea:	32c4      	adds	r2, #196	; 0xc4
   112ec:	7812      	ldrb	r2, [r2, #0]
   112ee:	2a00      	cmp	r2, #0
   112f0:	d00e      	beq.n	11310 <SetReceptionNotOkState+0x50>
   112f2:	0019      	movs	r1, r3
   112f4:	2001      	movs	r0, #1
   112f6:	3160      	adds	r1, #96	; 0x60
   112f8:	780a      	ldrb	r2, [r1, #0]
   112fa:	240e      	movs	r4, #14
   112fc:	4382      	bics	r2, r0
   112fe:	700a      	strb	r2, [r1, #0]
   11300:	001a      	movs	r2, r3
   11302:	3250      	adds	r2, #80	; 0x50
   11304:	7811      	ldrb	r1, [r2, #0]
   11306:	43a1      	bics	r1, r4
   11308:	7011      	strb	r1, [r2, #0]
   1130a:	7851      	ldrb	r1, [r2, #1]
   1130c:	4381      	bics	r1, r0
   1130e:	7051      	strb	r1, [r2, #1]
   11310:	2200      	movs	r2, #0
   11312:	33c4      	adds	r3, #196	; 0xc4
   11314:	701a      	strb	r2, [r3, #0]
   11316:	bd10      	pop	{r4, pc}
   11318:	230a      	movs	r3, #10
   1131a:	780a      	ldrb	r2, [r1, #0]
   1131c:	4382      	bics	r2, r0
   1131e:	4313      	orrs	r3, r2
   11320:	700b      	strb	r3, [r1, #0]
   11322:	2000      	movs	r0, #0
   11324:	4b02      	ldr	r3, [pc, #8]	; (11330 <SetReceptionNotOkState+0x70>)
   11326:	4798      	blx	r3
   11328:	e7f5      	b.n	11316 <SetReceptionNotOkState+0x56>
   1132a:	46c0      	nop			; (mov r8, r8)
   1132c:	20001ca4 	.word	0x20001ca4
   11330:	0001119d 	.word	0x0001119d

00011334 <UpdateCurrentDataRateAfterDataRangeChanges>:
   11334:	4b09      	ldr	r3, [pc, #36]	; (1135c <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
   11336:	001a      	movs	r2, r3
   11338:	32bf      	adds	r2, #191	; 0xbf
   1133a:	7811      	ldrb	r1, [r2, #0]
   1133c:	001a      	movs	r2, r3
   1133e:	32b3      	adds	r2, #179	; 0xb3
   11340:	7810      	ldrb	r0, [r2, #0]
   11342:	4288      	cmp	r0, r1
   11344:	d900      	bls.n	11348 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
   11346:	7011      	strb	r1, [r2, #0]
   11348:	001a      	movs	r2, r3
   1134a:	33b3      	adds	r3, #179	; 0xb3
   1134c:	32be      	adds	r2, #190	; 0xbe
   1134e:	7812      	ldrb	r2, [r2, #0]
   11350:	7819      	ldrb	r1, [r3, #0]
   11352:	4291      	cmp	r1, r2
   11354:	d200      	bcs.n	11358 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
   11356:	701a      	strb	r2, [r3, #0]
   11358:	4770      	bx	lr
   1135a:	46c0      	nop			; (mov r8, r8)
   1135c:	20001ca4 	.word	0x20001ca4

00011360 <ExecuteNewChannel>:
   11360:	b5f0      	push	{r4, r5, r6, r7, lr}
   11362:	b08d      	sub	sp, #52	; 0x34
   11364:	7804      	ldrb	r4, [r0, #0]
   11366:	ab02      	add	r3, sp, #8
   11368:	0006      	movs	r6, r0
   1136a:	71dc      	strb	r4, [r3, #7]
   1136c:	1c41      	adds	r1, r0, #1
   1136e:	2204      	movs	r2, #4
   11370:	4b54      	ldr	r3, [pc, #336]	; (114c4 <ExecuteNewChannel+0x164>)
   11372:	a808      	add	r0, sp, #32
   11374:	4798      	blx	r3
   11376:	9b08      	ldr	r3, [sp, #32]
   11378:	a904      	add	r1, sp, #16
   1137a:	021d      	lsls	r5, r3, #8
   1137c:	2364      	movs	r3, #100	; 0x64
   1137e:	0a2d      	lsrs	r5, r5, #8
   11380:	435d      	muls	r5, r3
   11382:	1d73      	adds	r3, r6, #5
   11384:	9301      	str	r3, [sp, #4]
   11386:	7933      	ldrb	r3, [r6, #4]
   11388:	2015      	movs	r0, #21
   1138a:	9300      	str	r3, [sp, #0]
   1138c:	2300      	movs	r3, #0
   1138e:	4e4e      	ldr	r6, [pc, #312]	; (114c8 <ExecuteNewChannel+0x168>)
   11390:	700c      	strb	r4, [r1, #0]
   11392:	9508      	str	r5, [sp, #32]
   11394:	704b      	strb	r3, [r1, #1]
   11396:	47b0      	blx	r6
   11398:	4c4c      	ldr	r4, [pc, #304]	; (114cc <ExecuteNewChannel+0x16c>)
   1139a:	2808      	cmp	r0, #8
   1139c:	d12b      	bne.n	113f6 <ExecuteNewChannel+0x96>
   1139e:	466a      	mov	r2, sp
   113a0:	ab02      	add	r3, sp, #8
   113a2:	79db      	ldrb	r3, [r3, #7]
   113a4:	7812      	ldrb	r2, [r2, #0]
   113a6:	af06      	add	r7, sp, #24
   113a8:	a90a      	add	r1, sp, #40	; 0x28
   113aa:	3806      	subs	r0, #6
   113ac:	703b      	strb	r3, [r7, #0]
   113ae:	707a      	strb	r2, [r7, #1]
   113b0:	710b      	strb	r3, [r1, #4]
   113b2:	950a      	str	r5, [sp, #40]	; 0x28
   113b4:	47b0      	blx	r6
   113b6:	2808      	cmp	r0, #8
   113b8:	d001      	beq.n	113be <ExecuteNewChannel+0x5e>
   113ba:	2d00      	cmp	r5, #0
   113bc:	d10b      	bne.n	113d6 <ExecuteNewChannel+0x76>
   113be:	0023      	movs	r3, r4
   113c0:	33ac      	adds	r3, #172	; 0xac
   113c2:	781a      	ldrb	r2, [r3, #0]
   113c4:	2303      	movs	r3, #3
   113c6:	4353      	muls	r3, r2
   113c8:	2280      	movs	r2, #128	; 0x80
   113ca:	18e3      	adds	r3, r4, r3
   113cc:	3360      	adds	r3, #96	; 0x60
   113ce:	7999      	ldrb	r1, [r3, #6]
   113d0:	4252      	negs	r2, r2
   113d2:	430a      	orrs	r2, r1
   113d4:	719a      	strb	r2, [r3, #6]
   113d6:	0039      	movs	r1, r7
   113d8:	2012      	movs	r0, #18
   113da:	47b0      	blx	r6
   113dc:	2808      	cmp	r0, #8
   113de:	d10a      	bne.n	113f6 <ExecuteNewChannel+0x96>
   113e0:	0023      	movs	r3, r4
   113e2:	33ac      	adds	r3, #172	; 0xac
   113e4:	781a      	ldrb	r2, [r3, #0]
   113e6:	2303      	movs	r3, #3
   113e8:	4353      	muls	r3, r2
   113ea:	2240      	movs	r2, #64	; 0x40
   113ec:	18e3      	adds	r3, r4, r3
   113ee:	3360      	adds	r3, #96	; 0x60
   113f0:	7999      	ldrb	r1, [r3, #6]
   113f2:	430a      	orrs	r2, r1
   113f4:	719a      	strb	r2, [r3, #6]
   113f6:	0023      	movs	r3, r4
   113f8:	33ac      	adds	r3, #172	; 0xac
   113fa:	781a      	ldrb	r2, [r3, #0]
   113fc:	2303      	movs	r3, #3
   113fe:	4353      	muls	r3, r2
   11400:	18e3      	adds	r3, r4, r3
   11402:	3360      	adds	r3, #96	; 0x60
   11404:	799b      	ldrb	r3, [r3, #6]
   11406:	09da      	lsrs	r2, r3, #7
   11408:	2a01      	cmp	r2, #1
   1140a:	d150      	bne.n	114ae <ExecuteNewChannel+0x14e>
   1140c:	065b      	lsls	r3, r3, #25
   1140e:	d54e      	bpl.n	114ae <ExecuteNewChannel+0x14e>
   11410:	4e2f      	ldr	r6, [pc, #188]	; (114d0 <ExecuteNewChannel+0x170>)
   11412:	2d00      	cmp	r5, #0
   11414:	d04e      	beq.n	114b4 <ExecuteNewChannel+0x154>
   11416:	a906      	add	r1, sp, #24
   11418:	2012      	movs	r0, #18
   1141a:	47b0      	blx	r6
   1141c:	ad07      	add	r5, sp, #28
   1141e:	a90a      	add	r1, sp, #40	; 0x28
   11420:	2000      	movs	r0, #0
   11422:	47b0      	blx	r6
   11424:	002a      	movs	r2, r5
   11426:	2100      	movs	r1, #0
   11428:	2014      	movs	r0, #20
   1142a:	4f2a      	ldr	r7, [pc, #168]	; (114d4 <ExecuteNewChannel+0x174>)
   1142c:	47b8      	blx	r7
   1142e:	0023      	movs	r3, r4
   11430:	782a      	ldrb	r2, [r5, #0]
   11432:	33be      	adds	r3, #190	; 0xbe
   11434:	701a      	strb	r2, [r3, #0]
   11436:	0023      	movs	r3, r4
   11438:	786a      	ldrb	r2, [r5, #1]
   1143a:	33bf      	adds	r3, #191	; 0xbf
   1143c:	701a      	strb	r2, [r3, #0]
   1143e:	34e4      	adds	r4, #228	; 0xe4
   11440:	4b25      	ldr	r3, [pc, #148]	; (114d8 <ExecuteNewChannel+0x178>)
   11442:	4798      	blx	r3
   11444:	7823      	ldrb	r3, [r4, #0]
   11446:	079b      	lsls	r3, r3, #30
   11448:	d50e      	bpl.n	11468 <ExecuteNewChannel+0x108>
   1144a:	2416      	movs	r4, #22
   1144c:	ab02      	add	r3, sp, #8
   1144e:	18e4      	adds	r4, r4, r3
   11450:	1dd9      	adds	r1, r3, #7
   11452:	0022      	movs	r2, r4
   11454:	201e      	movs	r0, #30
   11456:	47b8      	blx	r7
   11458:	ab02      	add	r3, sp, #8
   1145a:	79db      	ldrb	r3, [r3, #7]
   1145c:	a909      	add	r1, sp, #36	; 0x24
   1145e:	708b      	strb	r3, [r1, #2]
   11460:	8823      	ldrh	r3, [r4, #0]
   11462:	201e      	movs	r0, #30
   11464:	800b      	strh	r3, [r1, #0]
   11466:	47b0      	blx	r6
   11468:	ab02      	add	r3, sp, #8
   1146a:	79db      	ldrb	r3, [r3, #7]
   1146c:	a905      	add	r1, sp, #20
   1146e:	700b      	strb	r3, [r1, #0]
   11470:	2301      	movs	r3, #1
   11472:	2016      	movs	r0, #22
   11474:	704b      	strb	r3, [r1, #1]
   11476:	4b16      	ldr	r3, [pc, #88]	; (114d0 <ExecuteNewChannel+0x170>)
   11478:	4798      	blx	r3
   1147a:	ad09      	add	r5, sp, #36	; 0x24
   1147c:	2100      	movs	r1, #0
   1147e:	002a      	movs	r2, r5
   11480:	4b14      	ldr	r3, [pc, #80]	; (114d4 <ExecuteNewChannel+0x174>)
   11482:	2014      	movs	r0, #20
   11484:	4798      	blx	r3
   11486:	4c11      	ldr	r4, [pc, #68]	; (114cc <ExecuteNewChannel+0x16c>)
   11488:	782a      	ldrb	r2, [r5, #0]
   1148a:	0023      	movs	r3, r4
   1148c:	33be      	adds	r3, #190	; 0xbe
   1148e:	701a      	strb	r2, [r3, #0]
   11490:	0023      	movs	r3, r4
   11492:	786a      	ldrb	r2, [r5, #1]
   11494:	33bf      	adds	r3, #191	; 0xbf
   11496:	701a      	strb	r2, [r3, #0]
   11498:	4b0f      	ldr	r3, [pc, #60]	; (114d8 <ExecuteNewChannel+0x178>)
   1149a:	4798      	blx	r3
   1149c:	2304      	movs	r3, #4
   1149e:	3450      	adds	r4, #80	; 0x50
   114a0:	7862      	ldrb	r2, [r4, #1]
   114a2:	210b      	movs	r1, #11
   114a4:	4313      	orrs	r3, r2
   114a6:	7063      	strb	r3, [r4, #1]
   114a8:	2001      	movs	r0, #1
   114aa:	4b0c      	ldr	r3, [pc, #48]	; (114dc <ExecuteNewChannel+0x17c>)
   114ac:	4798      	blx	r3
   114ae:	9801      	ldr	r0, [sp, #4]
   114b0:	b00d      	add	sp, #52	; 0x34
   114b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   114b4:	ab02      	add	r3, sp, #8
   114b6:	79db      	ldrb	r3, [r3, #7]
   114b8:	a905      	add	r1, sp, #20
   114ba:	2016      	movs	r0, #22
   114bc:	700b      	strb	r3, [r1, #0]
   114be:	704d      	strb	r5, [r1, #1]
   114c0:	47b0      	blx	r6
   114c2:	e7da      	b.n	1147a <ExecuteNewChannel+0x11a>
   114c4:	00018195 	.word	0x00018195
   114c8:	0000b33d 	.word	0x0000b33d
   114cc:	20001ca4 	.word	0x20001ca4
   114d0:	0000b359 	.word	0x0000b359
   114d4:	0000b321 	.word	0x0000b321
   114d8:	00011335 	.word	0x00011335
   114dc:	0000b745 	.word	0x0000b745

000114e0 <MacExecuteCommands>:
   114e0:	2300      	movs	r3, #0
   114e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   114e4:	0007      	movs	r7, r0
   114e6:	2601      	movs	r6, #1
   114e8:	b087      	sub	sp, #28
   114ea:	9002      	str	r0, [sp, #8]
   114ec:	9103      	str	r1, [sp, #12]
   114ee:	9300      	str	r3, [sp, #0]
   114f0:	9b02      	ldr	r3, [sp, #8]
   114f2:	9a03      	ldr	r2, [sp, #12]
   114f4:	4c69      	ldr	r4, [pc, #420]	; (1169c <MacExecuteCommands+0x1bc>)
   114f6:	1898      	adds	r0, r3, r2
   114f8:	4287      	cmp	r7, r0
   114fa:	d353      	bcc.n	115a4 <MacExecuteCommands+0xc4>
   114fc:	2393      	movs	r3, #147	; 0x93
   114fe:	005b      	lsls	r3, r3, #1
   11500:	5ce3      	ldrb	r3, [r4, r3]
   11502:	2b00      	cmp	r3, #0
   11504:	d000      	beq.n	11508 <MacExecuteCommands+0x28>
   11506:	e072      	b.n	115ee <MacExecuteCommands+0x10e>
   11508:	0038      	movs	r0, r7
   1150a:	b007      	add	sp, #28
   1150c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1150e:	0023      	movs	r3, r4
   11510:	787a      	ldrb	r2, [r7, #1]
   11512:	33b1      	adds	r3, #177	; 0xb1
   11514:	701a      	strb	r2, [r3, #0]
   11516:	0023      	movs	r3, r4
   11518:	78ba      	ldrb	r2, [r7, #2]
   1151a:	33b2      	adds	r3, #178	; 0xb2
   1151c:	701a      	strb	r2, [r3, #0]
   1151e:	2203      	movs	r2, #3
   11520:	9b01      	ldr	r3, [sp, #4]
   11522:	1cfd      	adds	r5, r7, #3
   11524:	4353      	muls	r3, r2
   11526:	18e3      	adds	r3, r4, r3
   11528:	3365      	adds	r3, #101	; 0x65
   1152a:	32fc      	adds	r2, #252	; 0xfc
   1152c:	701a      	strb	r2, [r3, #0]
   1152e:	0022      	movs	r2, r4
   11530:	2103      	movs	r1, #3
   11532:	32ac      	adds	r2, #172	; 0xac
   11534:	7813      	ldrb	r3, [r2, #0]
   11536:	4359      	muls	r1, r3
   11538:	1864      	adds	r4, r4, r1
   1153a:	3465      	adds	r4, #101	; 0x65
   1153c:	7821      	ldrb	r1, [r4, #0]
   1153e:	29ff      	cmp	r1, #255	; 0xff
   11540:	d003      	beq.n	1154a <MacExecuteCommands+0x6a>
   11542:	2b0f      	cmp	r3, #15
   11544:	d801      	bhi.n	1154a <MacExecuteCommands+0x6a>
   11546:	3301      	adds	r3, #1
   11548:	7013      	strb	r3, [r2, #0]
   1154a:	002f      	movs	r7, r5
   1154c:	e7d0      	b.n	114f0 <MacExecuteCommands+0x10>
   1154e:	0028      	movs	r0, r5
   11550:	4b53      	ldr	r3, [pc, #332]	; (116a0 <MacExecuteCommands+0x1c0>)
   11552:	4798      	blx	r3
   11554:	0005      	movs	r5, r0
   11556:	e7ea      	b.n	1152e <MacExecuteCommands+0x4e>
   11558:	0028      	movs	r0, r5
   1155a:	4b52      	ldr	r3, [pc, #328]	; (116a4 <MacExecuteCommands+0x1c4>)
   1155c:	e7f9      	b.n	11552 <MacExecuteCommands+0x72>
   1155e:	0028      	movs	r0, r5
   11560:	4b51      	ldr	r3, [pc, #324]	; (116a8 <MacExecuteCommands+0x1c8>)
   11562:	e7f6      	b.n	11552 <MacExecuteCommands+0x72>
   11564:	0028      	movs	r0, r5
   11566:	4b51      	ldr	r3, [pc, #324]	; (116ac <MacExecuteCommands+0x1cc>)
   11568:	e7f3      	b.n	11552 <MacExecuteCommands+0x72>
   1156a:	230f      	movs	r3, #15
   1156c:	7878      	ldrb	r0, [r7, #1]
   1156e:	1cbd      	adds	r5, r7, #2
   11570:	4018      	ands	r0, r3
   11572:	4b4f      	ldr	r3, [pc, #316]	; (116b0 <MacExecuteCommands+0x1d0>)
   11574:	4798      	blx	r3
   11576:	0022      	movs	r2, r4
   11578:	2380      	movs	r3, #128	; 0x80
   1157a:	3250      	adds	r2, #80	; 0x50
   1157c:	7851      	ldrb	r1, [r2, #1]
   1157e:	425b      	negs	r3, r3
   11580:	430b      	orrs	r3, r1
   11582:	7053      	strb	r3, [r2, #1]
   11584:	210b      	movs	r1, #11
   11586:	0030      	movs	r0, r6
   11588:	4b4a      	ldr	r3, [pc, #296]	; (116b4 <MacExecuteCommands+0x1d4>)
   1158a:	4798      	blx	r3
   1158c:	e7cf      	b.n	1152e <MacExecuteCommands+0x4e>
   1158e:	0028      	movs	r0, r5
   11590:	4b49      	ldr	r3, [pc, #292]	; (116b8 <MacExecuteCommands+0x1d8>)
   11592:	e7de      	b.n	11552 <MacExecuteCommands+0x72>
   11594:	0028      	movs	r0, r5
   11596:	4b49      	ldr	r3, [pc, #292]	; (116bc <MacExecuteCommands+0x1dc>)
   11598:	e7db      	b.n	11552 <MacExecuteCommands+0x72>
   1159a:	22ff      	movs	r2, #255	; 0xff
   1159c:	0005      	movs	r5, r0
   1159e:	701a      	strb	r2, [r3, #0]
   115a0:	9600      	str	r6, [sp, #0]
   115a2:	e7c4      	b.n	1152e <MacExecuteCommands+0x4e>
   115a4:	9b00      	ldr	r3, [sp, #0]
   115a6:	2b00      	cmp	r3, #0
   115a8:	d1a8      	bne.n	114fc <MacExecuteCommands+0x1c>
   115aa:	0023      	movs	r3, r4
   115ac:	33ac      	adds	r3, #172	; 0xac
   115ae:	781b      	ldrb	r3, [r3, #0]
   115b0:	2501      	movs	r5, #1
   115b2:	9301      	str	r3, [sp, #4]
   115b4:	2303      	movs	r3, #3
   115b6:	9a01      	ldr	r2, [sp, #4]
   115b8:	4353      	muls	r3, r2
   115ba:	18e3      	adds	r3, r4, r3
   115bc:	0019      	movs	r1, r3
   115be:	3160      	adds	r1, #96	; 0x60
   115c0:	798a      	ldrb	r2, [r1, #6]
   115c2:	3365      	adds	r3, #101	; 0x65
   115c4:	43b2      	bics	r2, r6
   115c6:	402a      	ands	r2, r5
   115c8:	718a      	strb	r2, [r1, #6]
   115ca:	79ca      	ldrb	r2, [r1, #7]
   115cc:	197d      	adds	r5, r7, r5
   115ce:	43b2      	bics	r2, r6
   115d0:	71ca      	strb	r2, [r1, #7]
   115d2:	783a      	ldrb	r2, [r7, #0]
   115d4:	701a      	strb	r2, [r3, #0]
   115d6:	783a      	ldrb	r2, [r7, #0]
   115d8:	3a02      	subs	r2, #2
   115da:	2a08      	cmp	r2, #8
   115dc:	d8dd      	bhi.n	1159a <MacExecuteCommands+0xba>
   115de:	0010      	movs	r0, r2
   115e0:	f003 faa8 	bl	14b34 <__gnu_thumb1_case_sqi>
   115e4:	bdbab595 	.word	0xbdbab595
   115e8:	d5c3c0a5 	.word	0xd5c3c0a5
   115ec:	d8          	.byte	0xd8
   115ed:	00          	.byte	0x00
   115ee:	2324      	movs	r3, #36	; 0x24
   115f0:	33ff      	adds	r3, #255	; 0xff
   115f2:	5ce3      	ldrb	r3, [r4, r3]
   115f4:	43db      	mvns	r3, r3
   115f6:	075b      	lsls	r3, r3, #29
   115f8:	d000      	beq.n	115fc <MacExecuteCommands+0x11c>
   115fa:	e785      	b.n	11508 <MacExecuteCommands+0x28>
   115fc:	232a      	movs	r3, #42	; 0x2a
   115fe:	33ff      	adds	r3, #255	; 0xff
   11600:	5ce5      	ldrb	r5, [r4, r3]
   11602:	2326      	movs	r3, #38	; 0x26
   11604:	33ff      	adds	r3, #255	; 0xff
   11606:	5ce3      	ldrb	r3, [r4, r3]
   11608:	a905      	add	r1, sp, #20
   1160a:	9300      	str	r3, [sp, #0]
   1160c:	2392      	movs	r3, #146	; 0x92
   1160e:	005b      	lsls	r3, r3, #1
   11610:	5ce3      	ldrb	r3, [r4, r3]
   11612:	066a      	lsls	r2, r5, #25
   11614:	9301      	str	r3, [sp, #4]
   11616:	2328      	movs	r3, #40	; 0x28
   11618:	33ff      	adds	r3, #255	; 0xff
   1161a:	5ce0      	ldrb	r0, [r4, r3]
   1161c:	3301      	adds	r3, #1
   1161e:	5ce3      	ldrb	r3, [r4, r3]
   11620:	0f52      	lsrs	r2, r2, #29
   11622:	021b      	lsls	r3, r3, #8
   11624:	4303      	orrs	r3, r0
   11626:	800b      	strh	r3, [r1, #0]
   11628:	201c      	movs	r0, #28
   1162a:	4b25      	ldr	r3, [pc, #148]	; (116c0 <MacExecuteCommands+0x1e0>)
   1162c:	708a      	strb	r2, [r1, #2]
   1162e:	4798      	blx	r3
   11630:	2100      	movs	r1, #0
   11632:	aa04      	add	r2, sp, #16
   11634:	4b23      	ldr	r3, [pc, #140]	; (116c4 <MacExecuteCommands+0x1e4>)
   11636:	2014      	movs	r0, #20
   11638:	4798      	blx	r3
   1163a:	0023      	movs	r3, r4
   1163c:	aa04      	add	r2, sp, #16
   1163e:	7812      	ldrb	r2, [r2, #0]
   11640:	33be      	adds	r3, #190	; 0xbe
   11642:	701a      	strb	r2, [r3, #0]
   11644:	0023      	movs	r3, r4
   11646:	aa04      	add	r2, sp, #16
   11648:	7852      	ldrb	r2, [r2, #1]
   1164a:	33bf      	adds	r3, #191	; 0xbf
   1164c:	701a      	strb	r2, [r3, #0]
   1164e:	4b1e      	ldr	r3, [pc, #120]	; (116c8 <MacExecuteCommands+0x1e8>)
   11650:	4798      	blx	r3
   11652:	9800      	ldr	r0, [sp, #0]
   11654:	4b1d      	ldr	r3, [pc, #116]	; (116cc <MacExecuteCommands+0x1ec>)
   11656:	4798      	blx	r3
   11658:	0022      	movs	r2, r4
   1165a:	2308      	movs	r3, #8
   1165c:	3250      	adds	r2, #80	; 0x50
   1165e:	7851      	ldrb	r1, [r2, #1]
   11660:	072d      	lsls	r5, r5, #28
   11662:	430b      	orrs	r3, r1
   11664:	7053      	strb	r3, [r2, #1]
   11666:	0f2d      	lsrs	r5, r5, #28
   11668:	9801      	ldr	r0, [sp, #4]
   1166a:	4b19      	ldr	r3, [pc, #100]	; (116d0 <MacExecuteCommands+0x1f0>)
   1166c:	b2ee      	uxtb	r6, r5
   1166e:	4798      	blx	r3
   11670:	34ad      	adds	r4, #173	; 0xad
   11672:	2e00      	cmp	r6, #0
   11674:	d10e      	bne.n	11694 <MacExecuteCommands+0x1b4>
   11676:	7025      	strb	r5, [r4, #0]
   11678:	2114      	movs	r1, #20
   1167a:	4c0e      	ldr	r4, [pc, #56]	; (116b4 <MacExecuteCommands+0x1d4>)
   1167c:	2000      	movs	r0, #0
   1167e:	47a0      	blx	r4
   11680:	2210      	movs	r2, #16
   11682:	4b06      	ldr	r3, [pc, #24]	; (1169c <MacExecuteCommands+0x1bc>)
   11684:	2001      	movs	r0, #1
   11686:	3350      	adds	r3, #80	; 0x50
   11688:	7859      	ldrb	r1, [r3, #1]
   1168a:	430a      	orrs	r2, r1
   1168c:	705a      	strb	r2, [r3, #1]
   1168e:	210b      	movs	r1, #11
   11690:	47a0      	blx	r4
   11692:	e739      	b.n	11508 <MacExecuteCommands+0x28>
   11694:	1e73      	subs	r3, r6, #1
   11696:	7023      	strb	r3, [r4, #0]
   11698:	e7ee      	b.n	11678 <MacExecuteCommands+0x198>
   1169a:	46c0      	nop			; (mov r8, r8)
   1169c:	20001ca4 	.word	0x20001ca4
   116a0:	0000fb55 	.word	0x0000fb55
   116a4:	0000fa19 	.word	0x0000fa19
   116a8:	0000f91d 	.word	0x0000f91d
   116ac:	00011361 	.word	0x00011361
   116b0:	0000f031 	.word	0x0000f031
   116b4:	0000b745 	.word	0x0000b745
   116b8:	0000fb05 	.word	0x0000fb05
   116bc:	0000fa51 	.word	0x0000fa51
   116c0:	0000b359 	.word	0x0000b359
   116c4:	0000b321 	.word	0x0000b321
   116c8:	00011335 	.word	0x00011335
   116cc:	0000f7e5 	.word	0x0000f7e5
   116d0:	0000f779 	.word	0x0000f779

000116d4 <LorawanSetDataRange>:
   116d4:	2201      	movs	r2, #1
   116d6:	b530      	push	{r4, r5, lr}
   116d8:	b085      	sub	sp, #20
   116da:	ab01      	add	r3, sp, #4
   116dc:	ac02      	add	r4, sp, #8
   116de:	7018      	strb	r0, [r3, #0]
   116e0:	7020      	strb	r0, [r4, #0]
   116e2:	7061      	strb	r1, [r4, #1]
   116e4:	2015      	movs	r0, #21
   116e6:	0019      	movs	r1, r3
   116e8:	4d11      	ldr	r5, [pc, #68]	; (11730 <LorawanSetDataRange+0x5c>)
   116ea:	705a      	strb	r2, [r3, #1]
   116ec:	47a8      	blx	r5
   116ee:	2808      	cmp	r0, #8
   116f0:	d003      	beq.n	116fa <LorawanSetDataRange+0x26>
   116f2:	250a      	movs	r5, #10
   116f4:	0028      	movs	r0, r5
   116f6:	b005      	add	sp, #20
   116f8:	bd30      	pop	{r4, r5, pc}
   116fa:	0021      	movs	r1, r4
   116fc:	2012      	movs	r0, #18
   116fe:	47a8      	blx	r5
   11700:	0005      	movs	r5, r0
   11702:	2808      	cmp	r0, #8
   11704:	d1f5      	bne.n	116f2 <LorawanSetDataRange+0x1e>
   11706:	0021      	movs	r1, r4
   11708:	4b0a      	ldr	r3, [pc, #40]	; (11734 <LorawanSetDataRange+0x60>)
   1170a:	ac03      	add	r4, sp, #12
   1170c:	2012      	movs	r0, #18
   1170e:	4798      	blx	r3
   11710:	0022      	movs	r2, r4
   11712:	2100      	movs	r1, #0
   11714:	4b08      	ldr	r3, [pc, #32]	; (11738 <LorawanSetDataRange+0x64>)
   11716:	2014      	movs	r0, #20
   11718:	4798      	blx	r3
   1171a:	4b08      	ldr	r3, [pc, #32]	; (1173c <LorawanSetDataRange+0x68>)
   1171c:	7821      	ldrb	r1, [r4, #0]
   1171e:	001a      	movs	r2, r3
   11720:	32be      	adds	r2, #190	; 0xbe
   11722:	7011      	strb	r1, [r2, #0]
   11724:	7862      	ldrb	r2, [r4, #1]
   11726:	33bf      	adds	r3, #191	; 0xbf
   11728:	701a      	strb	r2, [r3, #0]
   1172a:	4b05      	ldr	r3, [pc, #20]	; (11740 <LorawanSetDataRange+0x6c>)
   1172c:	4798      	blx	r3
   1172e:	e7e1      	b.n	116f4 <LorawanSetDataRange+0x20>
   11730:	0000b33d 	.word	0x0000b33d
   11734:	0000b359 	.word	0x0000b359
   11738:	0000b321 	.word	0x0000b321
   1173c:	20001ca4 	.word	0x20001ca4
   11740:	00011335 	.word	0x00011335

00011744 <LorawanSetChannelIdStatus>:
   11744:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11746:	466b      	mov	r3, sp
   11748:	7018      	strb	r0, [r3, #0]
   1174a:	7059      	strb	r1, [r3, #1]
   1174c:	2016      	movs	r0, #22
   1174e:	4669      	mov	r1, sp
   11750:	4b0c      	ldr	r3, [pc, #48]	; (11784 <LorawanSetChannelIdStatus+0x40>)
   11752:	4798      	blx	r3
   11754:	0004      	movs	r4, r0
   11756:	2808      	cmp	r0, #8
   11758:	d111      	bne.n	1177e <LorawanSetChannelIdStatus+0x3a>
   1175a:	ad01      	add	r5, sp, #4
   1175c:	002a      	movs	r2, r5
   1175e:	2100      	movs	r1, #0
   11760:	4b09      	ldr	r3, [pc, #36]	; (11788 <LorawanSetChannelIdStatus+0x44>)
   11762:	2014      	movs	r0, #20
   11764:	4798      	blx	r3
   11766:	4b09      	ldr	r3, [pc, #36]	; (1178c <LorawanSetChannelIdStatus+0x48>)
   11768:	7829      	ldrb	r1, [r5, #0]
   1176a:	001a      	movs	r2, r3
   1176c:	32be      	adds	r2, #190	; 0xbe
   1176e:	7011      	strb	r1, [r2, #0]
   11770:	786a      	ldrb	r2, [r5, #1]
   11772:	33bf      	adds	r3, #191	; 0xbf
   11774:	701a      	strb	r2, [r3, #0]
   11776:	4b06      	ldr	r3, [pc, #24]	; (11790 <LorawanSetChannelIdStatus+0x4c>)
   11778:	4798      	blx	r3
   1177a:	0020      	movs	r0, r4
   1177c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   1177e:	240a      	movs	r4, #10
   11780:	e7fb      	b.n	1177a <LorawanSetChannelIdStatus+0x36>
   11782:	46c0      	nop			; (mov r8, r8)
   11784:	0000b359 	.word	0x0000b359
   11788:	0000b321 	.word	0x0000b321
   1178c:	20001ca4 	.word	0x20001ca4
   11790:	00011335 	.word	0x00011335

00011794 <LORAWAN_RxDone>:
   11794:	b5f0      	push	{r4, r5, r6, r7, lr}
   11796:	4ddc      	ldr	r5, [pc, #880]	; (11b08 <LORAWAN_RxDone+0x374>)
   11798:	b091      	sub	sp, #68	; 0x44
   1179a:	002b      	movs	r3, r5
   1179c:	3350      	adds	r3, #80	; 0x50
   1179e:	781b      	ldrb	r3, [r3, #0]
   117a0:	0007      	movs	r7, r0
   117a2:	b25a      	sxtb	r2, r3
   117a4:	000c      	movs	r4, r1
   117a6:	2a00      	cmp	r2, #0
   117a8:	da01      	bge.n	117ae <LORAWAN_RxDone+0x1a>
   117aa:	f000 fc90 	bl	120ce <LORAWAN_RxDone+0x93a>
   117ae:	7801      	ldrb	r1, [r0, #0]
   117b0:	221f      	movs	r2, #31
   117b2:	000e      	movs	r6, r1
   117b4:	4396      	bics	r6, r2
   117b6:	2e20      	cmp	r6, #32
   117b8:	d000      	beq.n	117bc <LORAWAN_RxDone+0x28>
   117ba:	e131      	b.n	11a20 <LORAWAN_RxDone+0x28c>
   117bc:	782b      	ldrb	r3, [r5, #0]
   117be:	2b00      	cmp	r3, #0
   117c0:	d001      	beq.n	117c6 <LORAWAN_RxDone+0x32>
   117c2:	f000 fc6d 	bl	120a0 <LORAWAN_RxDone+0x90c>
   117c6:	002b      	movs	r3, r5
   117c8:	3360      	adds	r3, #96	; 0x60
   117ca:	781b      	ldrb	r3, [r3, #0]
   117cc:	075b      	lsls	r3, r3, #29
   117ce:	d401      	bmi.n	117d4 <LORAWAN_RxDone+0x40>
   117d0:	f000 fc66 	bl	120a0 <LORAWAN_RxDone+0x90c>
   117d4:	1e63      	subs	r3, r4, #1
   117d6:	b2db      	uxtb	r3, r3
   117d8:	9304      	str	r3, [sp, #16]
   117da:	4bcc      	ldr	r3, [pc, #816]	; (11b0c <LORAWAN_RxDone+0x378>)
   117dc:	469c      	mov	ip, r3
   117de:	9b04      	ldr	r3, [sp, #16]
   117e0:	2b00      	cmp	r3, #0
   117e2:	d12c      	bne.n	1183e <LORAWAN_RxDone+0xaa>
   117e4:	1f23      	subs	r3, r4, #4
   117e6:	9305      	str	r3, [sp, #20]
   117e8:	466b      	mov	r3, sp
   117ea:	4660      	mov	r0, ip
   117ec:	7d1b      	ldrb	r3, [r3, #20]
   117ee:	003a      	movs	r2, r7
   117f0:	49c7      	ldr	r1, [pc, #796]	; (11b10 <LORAWAN_RxDone+0x37c>)
   117f2:	4ec8      	ldr	r6, [pc, #800]	; (11b14 <LORAWAN_RxDone+0x380>)
   117f4:	47b0      	blx	r6
   117f6:	2204      	movs	r2, #4
   117f8:	49c5      	ldr	r1, [pc, #788]	; (11b10 <LORAWAN_RxDone+0x37c>)
   117fa:	4bc7      	ldr	r3, [pc, #796]	; (11b18 <LORAWAN_RxDone+0x384>)
   117fc:	a80e      	add	r0, sp, #56	; 0x38
   117fe:	4798      	blx	r3
   11800:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   11802:	1f23      	subs	r3, r4, #4
   11804:	18f9      	adds	r1, r7, r3
   11806:	2204      	movs	r2, #4
   11808:	4bc3      	ldr	r3, [pc, #780]	; (11b18 <LORAWAN_RxDone+0x384>)
   1180a:	a80e      	add	r0, sp, #56	; 0x38
   1180c:	960b      	str	r6, [sp, #44]	; 0x2c
   1180e:	4798      	blx	r3
   11810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11812:	4bbd      	ldr	r3, [pc, #756]	; (11b08 <LORAWAN_RxDone+0x374>)
   11814:	210e      	movs	r1, #14
   11816:	42b2      	cmp	r2, r6
   11818:	d01e      	beq.n	11858 <LORAWAN_RxDone+0xc4>
   1181a:	001a      	movs	r2, r3
   1181c:	3250      	adds	r2, #80	; 0x50
   1181e:	7812      	ldrb	r2, [r2, #0]
   11820:	400a      	ands	r2, r1
   11822:	2a0a      	cmp	r2, #10
   11824:	d005      	beq.n	11832 <LORAWAN_RxDone+0x9e>
   11826:	2a06      	cmp	r2, #6
   11828:	d105      	bne.n	11836 <LORAWAN_RxDone+0xa2>
   1182a:	33c4      	adds	r3, #196	; 0xc4
   1182c:	781b      	ldrb	r3, [r3, #0]
   1182e:	2b00      	cmp	r3, #0
   11830:	d001      	beq.n	11836 <LORAWAN_RxDone+0xa2>
   11832:	4bba      	ldr	r3, [pc, #744]	; (11b1c <LORAWAN_RxDone+0x388>)
   11834:	4798      	blx	r3
   11836:	4bba      	ldr	r3, [pc, #744]	; (11b20 <LORAWAN_RxDone+0x38c>)
   11838:	4798      	blx	r3
   1183a:	200a      	movs	r0, #10
   1183c:	e0eb      	b.n	11a16 <LORAWAN_RxDone+0x282>
   1183e:	9b04      	ldr	r3, [sp, #16]
   11840:	4661      	mov	r1, ip
   11842:	1ae0      	subs	r0, r4, r3
   11844:	1838      	adds	r0, r7, r0
   11846:	4bb7      	ldr	r3, [pc, #732]	; (11b24 <LORAWAN_RxDone+0x390>)
   11848:	4798      	blx	r3
   1184a:	9b04      	ldr	r3, [sp, #16]
   1184c:	2b10      	cmp	r3, #16
   1184e:	d901      	bls.n	11854 <LORAWAN_RxDone+0xc0>
   11850:	3b10      	subs	r3, #16
   11852:	e7c0      	b.n	117d6 <LORAWAN_RxDone+0x42>
   11854:	2300      	movs	r3, #0
   11856:	e7bf      	b.n	117d8 <LORAWAN_RxDone+0x44>
   11858:	001a      	movs	r2, r3
   1185a:	3250      	adds	r2, #80	; 0x50
   1185c:	7812      	ldrb	r2, [r2, #0]
   1185e:	400a      	ands	r2, r1
   11860:	2a06      	cmp	r2, #6
   11862:	d103      	bne.n	1186c <LORAWAN_RxDone+0xd8>
   11864:	33b7      	adds	r3, #183	; 0xb7
   11866:	7818      	ldrb	r0, [r3, #0]
   11868:	4baf      	ldr	r3, [pc, #700]	; (11b28 <LORAWAN_RxDone+0x394>)
   1186a:	4798      	blx	r3
   1186c:	7a3a      	ldrb	r2, [r7, #8]
   1186e:	79fb      	ldrb	r3, [r7, #7]
   11870:	0212      	lsls	r2, r2, #8
   11872:	431a      	orrs	r2, r3
   11874:	7a7b      	ldrb	r3, [r7, #9]
   11876:	2001      	movs	r0, #1
   11878:	041b      	lsls	r3, r3, #16
   1187a:	431a      	orrs	r2, r3
   1187c:	7abb      	ldrb	r3, [r7, #10]
   1187e:	061b      	lsls	r3, r3, #24
   11880:	4313      	orrs	r3, r2
   11882:	0a19      	lsrs	r1, r3, #8
   11884:	706b      	strb	r3, [r5, #1]
   11886:	70a9      	strb	r1, [r5, #2]
   11888:	0c19      	lsrs	r1, r3, #16
   1188a:	0e1b      	lsrs	r3, r3, #24
   1188c:	70e9      	strb	r1, [r5, #3]
   1188e:	712b      	strb	r3, [r5, #4]
   11890:	250f      	movs	r5, #15
   11892:	2103      	movs	r1, #3
   11894:	4ba5      	ldr	r3, [pc, #660]	; (11b2c <LORAWAN_RxDone+0x398>)
   11896:	4798      	blx	r3
   11898:	7b38      	ldrb	r0, [r7, #12]
   1189a:	4ba5      	ldr	r3, [pc, #660]	; (11b30 <LORAWAN_RxDone+0x39c>)
   1189c:	4028      	ands	r0, r5
   1189e:	4798      	blx	r3
   118a0:	7af8      	ldrb	r0, [r7, #11]
   118a2:	4ba4      	ldr	r3, [pc, #656]	; (11b34 <LORAWAN_RxDone+0x3a0>)
   118a4:	0641      	lsls	r1, r0, #25
   118a6:	0700      	lsls	r0, r0, #28
   118a8:	0f49      	lsrs	r1, r1, #29
   118aa:	0f00      	lsrs	r0, r0, #28
   118ac:	4798      	blx	r3
   118ae:	2c21      	cmp	r4, #33	; 0x21
   118b0:	d000      	beq.n	118b4 <LORAWAN_RxDone+0x120>
   118b2:	e088      	b.n	119c6 <LORAWAN_RxDone+0x232>
   118b4:	ab04      	add	r3, sp, #16
   118b6:	3c0f      	subs	r4, #15
   118b8:	18e4      	adds	r4, r4, r3
   118ba:	0022      	movs	r2, r4
   118bc:	4b9e      	ldr	r3, [pc, #632]	; (11b38 <LORAWAN_RxDone+0x3a4>)
   118be:	499f      	ldr	r1, [pc, #636]	; (11b3c <LORAWAN_RxDone+0x3a8>)
   118c0:	2007      	movs	r0, #7
   118c2:	4798      	blx	r3
   118c4:	7823      	ldrb	r3, [r4, #0]
   118c6:	2bff      	cmp	r3, #255	; 0xff
   118c8:	d07d      	beq.n	119c6 <LORAWAN_RxDone+0x232>
   118ca:	2350      	movs	r3, #80	; 0x50
   118cc:	43ab      	bics	r3, r5
   118ce:	9306      	str	r3, [sp, #24]
   118d0:	003b      	movs	r3, r7
   118d2:	330d      	adds	r3, #13
   118d4:	9305      	str	r3, [sp, #20]
   118d6:	2400      	movs	r4, #0
   118d8:	2203      	movs	r2, #3
   118da:	9905      	ldr	r1, [sp, #20]
   118dc:	4b8e      	ldr	r3, [pc, #568]	; (11b18 <LORAWAN_RxDone+0x384>)
   118de:	a80c      	add	r0, sp, #48	; 0x30
   118e0:	940c      	str	r4, [sp, #48]	; 0x30
   118e2:	4798      	blx	r3
   118e4:	2364      	movs	r3, #100	; 0x64
   118e6:	990c      	ldr	r1, [sp, #48]	; 0x30
   118e8:	aa04      	add	r2, sp, #16
   118ea:	4359      	muls	r1, r3
   118ec:	3b52      	subs	r3, #82	; 0x52
   118ee:	189b      	adds	r3, r3, r2
   118f0:	7818      	ldrb	r0, [r3, #0]
   118f2:	9b04      	ldr	r3, [sp, #16]
   118f4:	910c      	str	r1, [sp, #48]	; 0x30
   118f6:	1818      	adds	r0, r3, r0
   118f8:	b2c0      	uxtb	r0, r0
   118fa:	74d0      	strb	r0, [r2, #19]
   118fc:	42a1      	cmp	r1, r4
   118fe:	d100      	bne.n	11902 <LORAWAN_RxDone+0x16e>
   11900:	e08b      	b.n	11a1a <LORAWAN_RxDone+0x286>
   11902:	466b      	mov	r3, sp
   11904:	7e1b      	ldrb	r3, [r3, #24]
   11906:	ae0e      	add	r6, sp, #56	; 0x38
   11908:	ad09      	add	r5, sp, #36	; 0x24
   1190a:	7130      	strb	r0, [r6, #4]
   1190c:	910e      	str	r1, [sp, #56]	; 0x38
   1190e:	7028      	strb	r0, [r5, #0]
   11910:	706b      	strb	r3, [r5, #1]
   11912:	0031      	movs	r1, r6
   11914:	2002      	movs	r0, #2
   11916:	4b8a      	ldr	r3, [pc, #552]	; (11b40 <LORAWAN_RxDone+0x3ac>)
   11918:	4798      	blx	r3
   1191a:	2808      	cmp	r0, #8
   1191c:	d13f      	bne.n	1199e <LORAWAN_RxDone+0x20a>
   1191e:	0031      	movs	r1, r6
   11920:	0020      	movs	r0, r4
   11922:	4e88      	ldr	r6, [pc, #544]	; (11b44 <LORAWAN_RxDone+0x3b0>)
   11924:	47b0      	blx	r6
   11926:	0029      	movs	r1, r5
   11928:	2012      	movs	r0, #18
   1192a:	ad0a      	add	r5, sp, #40	; 0x28
   1192c:	47b0      	blx	r6
   1192e:	0021      	movs	r1, r4
   11930:	002a      	movs	r2, r5
   11932:	4b81      	ldr	r3, [pc, #516]	; (11b38 <LORAWAN_RxDone+0x3a4>)
   11934:	2014      	movs	r0, #20
   11936:	4798      	blx	r3
   11938:	4c73      	ldr	r4, [pc, #460]	; (11b08 <LORAWAN_RxDone+0x374>)
   1193a:	782a      	ldrb	r2, [r5, #0]
   1193c:	0023      	movs	r3, r4
   1193e:	33be      	adds	r3, #190	; 0xbe
   11940:	701a      	strb	r2, [r3, #0]
   11942:	0023      	movs	r3, r4
   11944:	786a      	ldrb	r2, [r5, #1]
   11946:	251a      	movs	r5, #26
   11948:	33bf      	adds	r3, #191	; 0xbf
   1194a:	701a      	strb	r2, [r3, #0]
   1194c:	4b7e      	ldr	r3, [pc, #504]	; (11b48 <LORAWAN_RxDone+0x3b4>)
   1194e:	4798      	blx	r3
   11950:	ab04      	add	r3, sp, #16
   11952:	18ed      	adds	r5, r5, r3
   11954:	2313      	movs	r3, #19
   11956:	a904      	add	r1, sp, #16
   11958:	185b      	adds	r3, r3, r1
   1195a:	0019      	movs	r1, r3
   1195c:	002a      	movs	r2, r5
   1195e:	4b76      	ldr	r3, [pc, #472]	; (11b38 <LORAWAN_RxDone+0x3a4>)
   11960:	201e      	movs	r0, #30
   11962:	4798      	blx	r3
   11964:	0023      	movs	r3, r4
   11966:	33e4      	adds	r3, #228	; 0xe4
   11968:	781b      	ldrb	r3, [r3, #0]
   1196a:	079b      	lsls	r3, r3, #30
   1196c:	d507      	bpl.n	1197e <LORAWAN_RxDone+0x1ea>
   1196e:	ab04      	add	r3, sp, #16
   11970:	7cdb      	ldrb	r3, [r3, #19]
   11972:	a90d      	add	r1, sp, #52	; 0x34
   11974:	708b      	strb	r3, [r1, #2]
   11976:	882b      	ldrh	r3, [r5, #0]
   11978:	201e      	movs	r0, #30
   1197a:	800b      	strh	r3, [r1, #0]
   1197c:	47b0      	blx	r6
   1197e:	2313      	movs	r3, #19
   11980:	aa04      	add	r2, sp, #16
   11982:	189b      	adds	r3, r3, r2
   11984:	7818      	ldrb	r0, [r3, #0]
   11986:	2101      	movs	r1, #1
   11988:	4b70      	ldr	r3, [pc, #448]	; (11b4c <LORAWAN_RxDone+0x3b8>)
   1198a:	4798      	blx	r3
   1198c:	2204      	movs	r2, #4
   1198e:	3450      	adds	r4, #80	; 0x50
   11990:	7863      	ldrb	r3, [r4, #1]
   11992:	210b      	movs	r1, #11
   11994:	4313      	orrs	r3, r2
   11996:	7063      	strb	r3, [r4, #1]
   11998:	2001      	movs	r0, #1
   1199a:	4b64      	ldr	r3, [pc, #400]	; (11b2c <LORAWAN_RxDone+0x398>)
   1199c:	4798      	blx	r3
   1199e:	9b04      	ldr	r3, [sp, #16]
   119a0:	3301      	adds	r3, #1
   119a2:	b2db      	uxtb	r3, r3
   119a4:	9304      	str	r3, [sp, #16]
   119a6:	9b05      	ldr	r3, [sp, #20]
   119a8:	3303      	adds	r3, #3
   119aa:	9305      	str	r3, [sp, #20]
   119ac:	9b04      	ldr	r3, [sp, #16]
   119ae:	2b05      	cmp	r3, #5
   119b0:	d191      	bne.n	118d6 <LORAWAN_RxDone+0x142>
   119b2:	2204      	movs	r2, #4
   119b4:	4b54      	ldr	r3, [pc, #336]	; (11b08 <LORAWAN_RxDone+0x374>)
   119b6:	2001      	movs	r0, #1
   119b8:	3350      	adds	r3, #80	; 0x50
   119ba:	7859      	ldrb	r1, [r3, #1]
   119bc:	430a      	orrs	r2, r1
   119be:	705a      	strb	r2, [r3, #1]
   119c0:	210b      	movs	r1, #11
   119c2:	4b5a      	ldr	r3, [pc, #360]	; (11b2c <LORAWAN_RxDone+0x398>)
   119c4:	4798      	blx	r3
   119c6:	4c62      	ldr	r4, [pc, #392]	; (11b50 <LORAWAN_RxDone+0x3bc>)
   119c8:	1c7e      	adds	r6, r7, #1
   119ca:	3704      	adds	r7, #4
   119cc:	0031      	movs	r1, r6
   119ce:	0020      	movs	r0, r4
   119d0:	003a      	movs	r2, r7
   119d2:	4b60      	ldr	r3, [pc, #384]	; (11b54 <LORAWAN_RxDone+0x3c0>)
   119d4:	4798      	blx	r3
   119d6:	2302      	movs	r3, #2
   119d8:	4a4b      	ldr	r2, [pc, #300]	; (11b08 <LORAWAN_RxDone+0x374>)
   119da:	4d4c      	ldr	r5, [pc, #304]	; (11b0c <LORAWAN_RxDone+0x378>)
   119dc:	7553      	strb	r3, [r2, #21]
   119de:	0020      	movs	r0, r4
   119e0:	0029      	movs	r1, r5
   119e2:	4b50      	ldr	r3, [pc, #320]	; (11b24 <LORAWAN_RxDone+0x390>)
   119e4:	4798      	blx	r3
   119e6:	2105      	movs	r1, #5
   119e8:	4b50      	ldr	r3, [pc, #320]	; (11b2c <LORAWAN_RxDone+0x398>)
   119ea:	2001      	movs	r0, #1
   119ec:	4798      	blx	r3
   119ee:	0031      	movs	r1, r6
   119f0:	2601      	movs	r6, #1
   119f2:	4c59      	ldr	r4, [pc, #356]	; (11b58 <LORAWAN_RxDone+0x3c4>)
   119f4:	003a      	movs	r2, r7
   119f6:	0020      	movs	r0, r4
   119f8:	4b56      	ldr	r3, [pc, #344]	; (11b54 <LORAWAN_RxDone+0x3c0>)
   119fa:	4798      	blx	r3
   119fc:	4b42      	ldr	r3, [pc, #264]	; (11b08 <LORAWAN_RxDone+0x374>)
   119fe:	0029      	movs	r1, r5
   11a00:	715e      	strb	r6, [r3, #5]
   11a02:	0020      	movs	r0, r4
   11a04:	4b47      	ldr	r3, [pc, #284]	; (11b24 <LORAWAN_RxDone+0x390>)
   11a06:	4798      	blx	r3
   11a08:	2104      	movs	r1, #4
   11a0a:	4b48      	ldr	r3, [pc, #288]	; (11b2c <LORAWAN_RxDone+0x398>)
   11a0c:	0030      	movs	r0, r6
   11a0e:	4798      	blx	r3
   11a10:	4b52      	ldr	r3, [pc, #328]	; (11b5c <LORAWAN_RxDone+0x3c8>)
   11a12:	4798      	blx	r3
   11a14:	2008      	movs	r0, #8
   11a16:	b011      	add	sp, #68	; 0x44
   11a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11a1a:	4b4c      	ldr	r3, [pc, #304]	; (11b4c <LORAWAN_RxDone+0x3b8>)
   11a1c:	4798      	blx	r3
   11a1e:	e7be      	b.n	1199e <LORAWAN_RxDone+0x20a>
   11a20:	22bf      	movs	r2, #191	; 0xbf
   11a22:	3e60      	subs	r6, #96	; 0x60
   11a24:	4032      	ands	r2, r6
   11a26:	d000      	beq.n	11a2a <LORAWAN_RxDone+0x296>
   11a28:	e33a      	b.n	120a0 <LORAWAN_RxDone+0x90c>
   11a2a:	2601      	movs	r6, #1
   11a2c:	4233      	tst	r3, r6
   11a2e:	d100      	bne.n	11a32 <LORAWAN_RxDone+0x29e>
   11a30:	e336      	b.n	120a0 <LORAWAN_RxDone+0x90c>
   11a32:	7928      	ldrb	r0, [r5, #4]
   11a34:	682b      	ldr	r3, [r5, #0]
   11a36:	0600      	lsls	r0, r0, #24
   11a38:	0a1b      	lsrs	r3, r3, #8
   11a3a:	4318      	orrs	r0, r3
   11a3c:	002b      	movs	r3, r5
   11a3e:	33ac      	adds	r3, #172	; 0xac
   11a40:	701a      	strb	r2, [r3, #0]
   11a42:	9004      	str	r0, [sp, #16]
   11a44:	78b8      	ldrb	r0, [r7, #2]
   11a46:	787b      	ldrb	r3, [r7, #1]
   11a48:	0200      	lsls	r0, r0, #8
   11a4a:	4318      	orrs	r0, r3
   11a4c:	78fb      	ldrb	r3, [r7, #3]
   11a4e:	041b      	lsls	r3, r3, #16
   11a50:	4318      	orrs	r0, r3
   11a52:	793b      	ldrb	r3, [r7, #4]
   11a54:	061b      	lsls	r3, r3, #24
   11a56:	4303      	orrs	r3, r0
   11a58:	9804      	ldr	r0, [sp, #16]
   11a5a:	4298      	cmp	r0, r3
   11a5c:	d050      	beq.n	11b00 <LORAWAN_RxDone+0x36c>
   11a5e:	7a3a      	ldrb	r2, [r7, #8]
   11a60:	0949      	lsrs	r1, r1, #5
   11a62:	0038      	movs	r0, r7
   11a64:	4b3e      	ldr	r3, [pc, #248]	; (11b60 <LORAWAN_RxDone+0x3cc>)
   11a66:	4798      	blx	r3
   11a68:	2808      	cmp	r0, #8
   11a6a:	d000      	beq.n	11a6e <LORAWAN_RxDone+0x2da>
   11a6c:	e6e3      	b.n	11836 <LORAWAN_RxDone+0xa2>
   11a6e:	35f8      	adds	r5, #248	; 0xf8
   11a70:	4a3c      	ldr	r2, [pc, #240]	; (11b64 <LORAWAN_RxDone+0x3d0>)
   11a72:	682b      	ldr	r3, [r5, #0]
   11a74:	9204      	str	r2, [sp, #16]
   11a76:	9606      	str	r6, [sp, #24]
   11a78:	1f22      	subs	r2, r4, #4
   11a7a:	9205      	str	r2, [sp, #20]
   11a7c:	466a      	mov	r2, sp
   11a7e:	79f9      	ldrb	r1, [r7, #7]
   11a80:	79b8      	ldrb	r0, [r7, #6]
   11a82:	0209      	lsls	r1, r1, #8
   11a84:	7d12      	ldrb	r2, [r2, #20]
   11a86:	4301      	orrs	r1, r0
   11a88:	9300      	str	r3, [sp, #0]
   11a8a:	2001      	movs	r0, #1
   11a8c:	2349      	movs	r3, #73	; 0x49
   11a8e:	4d36      	ldr	r5, [pc, #216]	; (11b68 <LORAWAN_RxDone+0x3d4>)
   11a90:	47a8      	blx	r5
   11a92:	4d21      	ldr	r5, [pc, #132]	; (11b18 <LORAWAN_RxDone+0x384>)
   11a94:	2210      	movs	r2, #16
   11a96:	491e      	ldr	r1, [pc, #120]	; (11b10 <LORAWAN_RxDone+0x37c>)
   11a98:	4834      	ldr	r0, [pc, #208]	; (11b6c <LORAWAN_RxDone+0x3d8>)
   11a9a:	47a8      	blx	r5
   11a9c:	1f22      	subs	r2, r4, #4
   11a9e:	0039      	movs	r1, r7
   11aa0:	4833      	ldr	r0, [pc, #204]	; (11b70 <LORAWAN_RxDone+0x3dc>)
   11aa2:	47a8      	blx	r5
   11aa4:	0023      	movs	r3, r4
   11aa6:	330c      	adds	r3, #12
   11aa8:	b2db      	uxtb	r3, r3
   11aaa:	4a30      	ldr	r2, [pc, #192]	; (11b6c <LORAWAN_RxDone+0x3d8>)
   11aac:	4918      	ldr	r1, [pc, #96]	; (11b10 <LORAWAN_RxDone+0x37c>)
   11aae:	9804      	ldr	r0, [sp, #16]
   11ab0:	4e18      	ldr	r6, [pc, #96]	; (11b14 <LORAWAN_RxDone+0x380>)
   11ab2:	47b0      	blx	r6
   11ab4:	2204      	movs	r2, #4
   11ab6:	4916      	ldr	r1, [pc, #88]	; (11b10 <LORAWAN_RxDone+0x37c>)
   11ab8:	a80b      	add	r0, sp, #44	; 0x2c
   11aba:	47a8      	blx	r5
   11abc:	1f23      	subs	r3, r4, #4
   11abe:	18f9      	adds	r1, r7, r3
   11ac0:	2204      	movs	r2, #4
   11ac2:	a80e      	add	r0, sp, #56	; 0x38
   11ac4:	47a8      	blx	r5
   11ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11ac8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11aca:	4293      	cmp	r3, r2
   11acc:	d056      	beq.n	11b7c <LORAWAN_RxDone+0x3e8>
   11ace:	4b14      	ldr	r3, [pc, #80]	; (11b20 <LORAWAN_RxDone+0x38c>)
   11ad0:	4798      	blx	r3
   11ad2:	4928      	ldr	r1, [pc, #160]	; (11b74 <LORAWAN_RxDone+0x3e0>)
   11ad4:	784a      	ldrb	r2, [r1, #1]
   11ad6:	780b      	ldrb	r3, [r1, #0]
   11ad8:	0212      	lsls	r2, r2, #8
   11ada:	431a      	orrs	r2, r3
   11adc:	788b      	ldrb	r3, [r1, #2]
   11ade:	041b      	lsls	r3, r3, #16
   11ae0:	431a      	orrs	r2, r3
   11ae2:	78cb      	ldrb	r3, [r1, #3]
   11ae4:	061b      	lsls	r3, r3, #24
   11ae6:	4313      	orrs	r3, r2
   11ae8:	d100      	bne.n	11aec <LORAWAN_RxDone+0x358>
   11aea:	e6a6      	b.n	1183a <LORAWAN_RxDone+0xa6>
   11aec:	2120      	movs	r1, #32
   11aee:	2018      	movs	r0, #24
   11af0:	4b05      	ldr	r3, [pc, #20]	; (11b08 <LORAWAN_RxDone+0x374>)
   11af2:	3360      	adds	r3, #96	; 0x60
   11af4:	781a      	ldrb	r2, [r3, #0]
   11af6:	438a      	bics	r2, r1
   11af8:	701a      	strb	r2, [r3, #0]
   11afa:	4b1f      	ldr	r3, [pc, #124]	; (11b78 <LORAWAN_RxDone+0x3e4>)
   11afc:	4798      	blx	r3
   11afe:	e69c      	b.n	1183a <LORAWAN_RxDone+0xa6>
   11b00:	4915      	ldr	r1, [pc, #84]	; (11b58 <LORAWAN_RxDone+0x3c4>)
   11b02:	9206      	str	r2, [sp, #24]
   11b04:	9104      	str	r1, [sp, #16]
   11b06:	e7b7      	b.n	11a78 <LORAWAN_RxDone+0x2e4>
   11b08:	20001ca4 	.word	0x20001ca4
   11b0c:	20001cc9 	.word	0x20001cc9
   11b10:	20001088 	.word	0x20001088
   11b14:	0001292d 	.word	0x0001292d
   11b18:	00018195 	.word	0x00018195
   11b1c:	0000f8c9 	.word	0x0000f8c9
   11b20:	000112c1 	.word	0x000112c1
   11b24:	000128ed 	.word	0x000128ed
   11b28:	0000c7b9 	.word	0x0000c7b9
   11b2c:	0000b745 	.word	0x0000b745
   11b30:	0000f031 	.word	0x0000f031
   11b34:	0000f795 	.word	0x0000f795
   11b38:	0000b321 	.word	0x0000b321
   11b3c:	20001d57 	.word	0x20001d57
   11b40:	0000b33d 	.word	0x0000b33d
   11b44:	0000b359 	.word	0x0000b359
   11b48:	00011335 	.word	0x00011335
   11b4c:	00011745 	.word	0x00011745
   11b50:	20001cb9 	.word	0x20001cb9
   11b54:	0000f2cd 	.word	0x0000f2cd
   11b58:	20001ca9 	.word	0x20001ca9
   11b5c:	0000f22d 	.word	0x0000f22d
   11b60:	00012d19 	.word	0x00012d19
   11b64:	20001da0 	.word	0x20001da0
   11b68:	0000f309 	.word	0x0000f309
   11b6c:	20001eec 	.word	0x20001eec
   11b70:	20001efc 	.word	0x20001efc
   11b74:	20001ee4 	.word	0x20001ee4
   11b78:	00010639 	.word	0x00010639
   11b7c:	9b06      	ldr	r3, [sp, #24]
   11b7e:	2b00      	cmp	r3, #0
   11b80:	d006      	beq.n	11b90 <LORAWAN_RxDone+0x3fc>
   11b82:	003a      	movs	r2, r7
   11b84:	0021      	movs	r1, r4
   11b86:	0038      	movs	r0, r7
   11b88:	4bd4      	ldr	r3, [pc, #848]	; (11edc <LORAWAN_RxDone+0x748>)
   11b8a:	4798      	blx	r3
   11b8c:	2001      	movs	r0, #1
   11b8e:	e742      	b.n	11a16 <LORAWAN_RxDone+0x282>
   11b90:	4ed3      	ldr	r6, [pc, #844]	; (11ee0 <LORAWAN_RxDone+0x74c>)
   11b92:	79fb      	ldrb	r3, [r7, #7]
   11b94:	0031      	movs	r1, r6
   11b96:	79ba      	ldrb	r2, [r7, #6]
   11b98:	021b      	lsls	r3, r3, #8
   11b9a:	3158      	adds	r1, #88	; 0x58
   11b9c:	4313      	orrs	r3, r2
   11b9e:	880a      	ldrh	r2, [r1, #0]
   11ba0:	4293      	cmp	r3, r2
   11ba2:	d357      	bcc.n	11c54 <LORAWAN_RxDone+0x4c0>
   11ba4:	0030      	movs	r0, r6
   11ba6:	30a4      	adds	r0, #164	; 0xa4
   11ba8:	8800      	ldrh	r0, [r0, #0]
   11baa:	1a9a      	subs	r2, r3, r2
   11bac:	4dcd      	ldr	r5, [pc, #820]	; (11ee4 <LORAWAN_RxDone+0x750>)
   11bae:	4282      	cmp	r2, r0
   11bb0:	dd3d      	ble.n	11c2e <LORAWAN_RxDone+0x49a>
   11bb2:	0032      	movs	r2, r6
   11bb4:	2101      	movs	r1, #1
   11bb6:	3260      	adds	r2, #96	; 0x60
   11bb8:	7813      	ldrb	r3, [r2, #0]
   11bba:	438b      	bics	r3, r1
   11bbc:	7013      	strb	r3, [r2, #0]
   11bbe:	0033      	movs	r3, r6
   11bc0:	33c8      	adds	r3, #200	; 0xc8
   11bc2:	781b      	ldrb	r3, [r3, #0]
   11bc4:	428b      	cmp	r3, r1
   11bc6:	d10f      	bne.n	11be8 <LORAWAN_RxDone+0x454>
   11bc8:	0032      	movs	r2, r6
   11bca:	0034      	movs	r4, r6
   11bcc:	3250      	adds	r2, #80	; 0x50
   11bce:	7813      	ldrb	r3, [r2, #0]
   11bd0:	310d      	adds	r1, #13
   11bd2:	438b      	bics	r3, r1
   11bd4:	7013      	strb	r3, [r2, #0]
   11bd6:	34b9      	adds	r4, #185	; 0xb9
   11bd8:	7820      	ldrb	r0, [r4, #0]
   11bda:	4bc3      	ldr	r3, [pc, #780]	; (11ee8 <LORAWAN_RxDone+0x754>)
   11bdc:	4798      	blx	r3
   11bde:	2800      	cmp	r0, #0
   11be0:	d002      	beq.n	11be8 <LORAWAN_RxDone+0x454>
   11be2:	7820      	ldrb	r0, [r4, #0]
   11be4:	4bc1      	ldr	r3, [pc, #772]	; (11eec <LORAWAN_RxDone+0x758>)
   11be6:	4798      	blx	r3
   11be8:	49c1      	ldr	r1, [pc, #772]	; (11ef0 <LORAWAN_RxDone+0x75c>)
   11bea:	784a      	ldrb	r2, [r1, #1]
   11bec:	780b      	ldrb	r3, [r1, #0]
   11bee:	0212      	lsls	r2, r2, #8
   11bf0:	431a      	orrs	r2, r3
   11bf2:	788b      	ldrb	r3, [r1, #2]
   11bf4:	041b      	lsls	r3, r3, #16
   11bf6:	431a      	orrs	r2, r3
   11bf8:	78cb      	ldrb	r3, [r1, #3]
   11bfa:	061b      	lsls	r3, r3, #24
   11bfc:	4313      	orrs	r3, r2
   11bfe:	d008      	beq.n	11c12 <LORAWAN_RxDone+0x47e>
   11c00:	0032      	movs	r2, r6
   11c02:	2120      	movs	r1, #32
   11c04:	3260      	adds	r2, #96	; 0x60
   11c06:	7813      	ldrb	r3, [r2, #0]
   11c08:	2017      	movs	r0, #23
   11c0a:	438b      	bics	r3, r1
   11c0c:	7013      	strb	r3, [r2, #0]
   11c0e:	4bb9      	ldr	r3, [pc, #740]	; (11ef4 <LORAWAN_RxDone+0x760>)
   11c10:	4798      	blx	r3
   11c12:	2401      	movs	r4, #1
   11c14:	3650      	adds	r6, #80	; 0x50
   11c16:	7873      	ldrb	r3, [r6, #1]
   11c18:	43a3      	bics	r3, r4
   11c1a:	7073      	strb	r3, [r6, #1]
   11c1c:	78b3      	ldrb	r3, [r6, #2]
   11c1e:	4323      	orrs	r3, r4
   11c20:	70b3      	strb	r3, [r6, #2]
   11c22:	4bb5      	ldr	r3, [pc, #724]	; (11ef8 <LORAWAN_RxDone+0x764>)
   11c24:	4798      	blx	r3
   11c26:	210b      	movs	r1, #11
   11c28:	0020      	movs	r0, r4
   11c2a:	47a8      	blx	r5
   11c2c:	e7ae      	b.n	11b8c <LORAWAN_RxDone+0x3f8>
   11c2e:	800b      	strh	r3, [r1, #0]
   11c30:	2001      	movs	r0, #1
   11c32:	210a      	movs	r1, #10
   11c34:	47a8      	blx	r5
   11c36:	6db3      	ldr	r3, [r6, #88]	; 0x58
   11c38:	3301      	adds	r3, #1
   11c3a:	d14a      	bne.n	11cd2 <LORAWAN_RxDone+0x53e>
   11c3c:	2401      	movs	r4, #1
   11c3e:	3650      	adds	r6, #80	; 0x50
   11c40:	78b3      	ldrb	r3, [r6, #2]
   11c42:	4323      	orrs	r3, r4
   11c44:	70b3      	strb	r3, [r6, #2]
   11c46:	4bac      	ldr	r3, [pc, #688]	; (11ef8 <LORAWAN_RxDone+0x764>)
   11c48:	4798      	blx	r3
   11c4a:	210b      	movs	r1, #11
   11c4c:	0020      	movs	r0, r4
   11c4e:	4ba5      	ldr	r3, [pc, #660]	; (11ee4 <LORAWAN_RxDone+0x750>)
   11c50:	4798      	blx	r3
   11c52:	e79b      	b.n	11b8c <LORAWAN_RxDone+0x3f8>
   11c54:	2b00      	cmp	r3, #0
   11c56:	d10f      	bne.n	11c78 <LORAWAN_RxDone+0x4e4>
   11c58:	4ba8      	ldr	r3, [pc, #672]	; (11efc <LORAWAN_RxDone+0x768>)
   11c5a:	429a      	cmp	r2, r3
   11c5c:	d10c      	bne.n	11c78 <LORAWAN_RxDone+0x4e4>
   11c5e:	466b      	mov	r3, sp
   11c60:	0032      	movs	r2, r6
   11c62:	8b1b      	ldrh	r3, [r3, #24]
   11c64:	325a      	adds	r2, #90	; 0x5a
   11c66:	800b      	strh	r3, [r1, #0]
   11c68:	8813      	ldrh	r3, [r2, #0]
   11c6a:	210a      	movs	r1, #10
   11c6c:	3301      	adds	r3, #1
   11c6e:	8013      	strh	r3, [r2, #0]
   11c70:	2001      	movs	r0, #1
   11c72:	4b9c      	ldr	r3, [pc, #624]	; (11ee4 <LORAWAN_RxDone+0x750>)
   11c74:	4798      	blx	r3
   11c76:	e7de      	b.n	11c36 <LORAWAN_RxDone+0x4a2>
   11c78:	0033      	movs	r3, r6
   11c7a:	33c8      	adds	r3, #200	; 0xc8
   11c7c:	781b      	ldrb	r3, [r3, #0]
   11c7e:	2b01      	cmp	r3, #1
   11c80:	d10f      	bne.n	11ca2 <LORAWAN_RxDone+0x50e>
   11c82:	0032      	movs	r2, r6
   11c84:	210e      	movs	r1, #14
   11c86:	0034      	movs	r4, r6
   11c88:	3250      	adds	r2, #80	; 0x50
   11c8a:	7813      	ldrb	r3, [r2, #0]
   11c8c:	34b9      	adds	r4, #185	; 0xb9
   11c8e:	438b      	bics	r3, r1
   11c90:	7013      	strb	r3, [r2, #0]
   11c92:	7820      	ldrb	r0, [r4, #0]
   11c94:	4b94      	ldr	r3, [pc, #592]	; (11ee8 <LORAWAN_RxDone+0x754>)
   11c96:	4798      	blx	r3
   11c98:	2800      	cmp	r0, #0
   11c9a:	d002      	beq.n	11ca2 <LORAWAN_RxDone+0x50e>
   11c9c:	7820      	ldrb	r0, [r4, #0]
   11c9e:	4b93      	ldr	r3, [pc, #588]	; (11eec <LORAWAN_RxDone+0x758>)
   11ca0:	4798      	blx	r3
   11ca2:	4b95      	ldr	r3, [pc, #596]	; (11ef8 <LORAWAN_RxDone+0x764>)
   11ca4:	4798      	blx	r3
   11ca6:	4992      	ldr	r1, [pc, #584]	; (11ef0 <LORAWAN_RxDone+0x75c>)
   11ca8:	784a      	ldrb	r2, [r1, #1]
   11caa:	780b      	ldrb	r3, [r1, #0]
   11cac:	0212      	lsls	r2, r2, #8
   11cae:	431a      	orrs	r2, r3
   11cb0:	788b      	ldrb	r3, [r1, #2]
   11cb2:	041b      	lsls	r3, r3, #16
   11cb4:	431a      	orrs	r2, r3
   11cb6:	78cb      	ldrb	r3, [r1, #3]
   11cb8:	061b      	lsls	r3, r3, #24
   11cba:	4313      	orrs	r3, r2
   11cbc:	d100      	bne.n	11cc0 <LORAWAN_RxDone+0x52c>
   11cbe:	e765      	b.n	11b8c <LORAWAN_RxDone+0x3f8>
   11cc0:	2220      	movs	r2, #32
   11cc2:	3660      	adds	r6, #96	; 0x60
   11cc4:	7833      	ldrb	r3, [r6, #0]
   11cc6:	2017      	movs	r0, #23
   11cc8:	4393      	bics	r3, r2
   11cca:	7033      	strb	r3, [r6, #0]
   11ccc:	4b89      	ldr	r3, [pc, #548]	; (11ef4 <LORAWAN_RxDone+0x760>)
   11cce:	4798      	blx	r3
   11cd0:	e75c      	b.n	11b8c <LORAWAN_RxDone+0x3f8>
   11cd2:	0033      	movs	r3, r6
   11cd4:	2200      	movs	r2, #0
   11cd6:	33af      	adds	r3, #175	; 0xaf
   11cd8:	701a      	strb	r2, [r3, #0]
   11cda:	797b      	ldrb	r3, [r7, #5]
   11cdc:	2b7f      	cmp	r3, #127	; 0x7f
   11cde:	d909      	bls.n	11cf4 <LORAWAN_RxDone+0x560>
   11ce0:	0032      	movs	r2, r6
   11ce2:	2320      	movs	r3, #32
   11ce4:	3250      	adds	r2, #80	; 0x50
   11ce6:	7811      	ldrb	r1, [r2, #0]
   11ce8:	2001      	movs	r0, #1
   11cea:	430b      	orrs	r3, r1
   11cec:	7013      	strb	r3, [r2, #0]
   11cee:	210b      	movs	r1, #11
   11cf0:	4b7c      	ldr	r3, [pc, #496]	; (11ee4 <LORAWAN_RxDone+0x750>)
   11cf2:	4798      	blx	r3
   11cf4:	797b      	ldrb	r3, [r7, #5]
   11cf6:	06db      	lsls	r3, r3, #27
   11cf8:	d505      	bpl.n	11d06 <LORAWAN_RxDone+0x572>
   11cfa:	0032      	movs	r2, r6
   11cfc:	2308      	movs	r3, #8
   11cfe:	3260      	adds	r2, #96	; 0x60
   11d00:	7811      	ldrb	r1, [r2, #0]
   11d02:	430b      	orrs	r3, r1
   11d04:	7013      	strb	r3, [r2, #0]
   11d06:	797b      	ldrb	r3, [r7, #5]
   11d08:	065b      	lsls	r3, r3, #25
   11d0a:	d505      	bpl.n	11d18 <LORAWAN_RxDone+0x584>
   11d0c:	0032      	movs	r2, r6
   11d0e:	2310      	movs	r3, #16
   11d10:	3260      	adds	r2, #96	; 0x60
   11d12:	7811      	ldrb	r1, [r2, #0]
   11d14:	430b      	orrs	r3, r1
   11d16:	7013      	strb	r3, [r2, #0]
   11d18:	221f      	movs	r2, #31
   11d1a:	783b      	ldrb	r3, [r7, #0]
   11d1c:	4393      	bics	r3, r2
   11d1e:	2ba0      	cmp	r3, #160	; 0xa0
   11d20:	d105      	bne.n	11d2e <LORAWAN_RxDone+0x59a>
   11d22:	0032      	movs	r2, r6
   11d24:	3260      	adds	r2, #96	; 0x60
   11d26:	7811      	ldrb	r1, [r2, #0]
   11d28:	3b9e      	subs	r3, #158	; 0x9e
   11d2a:	430b      	orrs	r3, r1
   11d2c:	7013      	strb	r3, [r2, #0]
   11d2e:	003d      	movs	r5, r7
   11d30:	7979      	ldrb	r1, [r7, #5]
   11d32:	3508      	adds	r5, #8
   11d34:	070b      	lsls	r3, r1, #28
   11d36:	d007      	beq.n	11d48 <LORAWAN_RxDone+0x5b4>
   11d38:	0709      	lsls	r1, r1, #28
   11d3a:	0028      	movs	r0, r5
   11d3c:	4b70      	ldr	r3, [pc, #448]	; (11f00 <LORAWAN_RxDone+0x76c>)
   11d3e:	0f09      	lsrs	r1, r1, #28
   11d40:	4798      	blx	r3
   11d42:	2301      	movs	r3, #1
   11d44:	0005      	movs	r5, r0
   11d46:	9306      	str	r3, [sp, #24]
   11d48:	7978      	ldrb	r0, [r7, #5]
   11d4a:	0703      	lsls	r3, r0, #28
   11d4c:	0f1b      	lsrs	r3, r3, #28
   11d4e:	001a      	movs	r2, r3
   11d50:	320c      	adds	r2, #12
   11d52:	4294      	cmp	r4, r2
   11d54:	d100      	bne.n	11d58 <LORAWAN_RxDone+0x5c4>
   11d56:	e0b8      	b.n	11eca <LORAWAN_RxDone+0x736>
   11d58:	1c6a      	adds	r2, r5, #1
   11d5a:	1ae4      	subs	r4, r4, r3
   11d5c:	9207      	str	r2, [sp, #28]
   11d5e:	782a      	ldrb	r2, [r5, #0]
   11d60:	b2e4      	uxtb	r4, r4
   11d62:	9204      	str	r2, [sp, #16]
   11d64:	0022      	movs	r2, r4
   11d66:	9904      	ldr	r1, [sp, #16]
   11d68:	3a0c      	subs	r2, #12
   11d6a:	b2d2      	uxtb	r2, r2
   11d6c:	9205      	str	r2, [sp, #20]
   11d6e:	3319      	adds	r3, #25
   11d70:	4a5b      	ldr	r2, [pc, #364]	; (11ee0 <LORAWAN_RxDone+0x74c>)
   11d72:	2900      	cmp	r1, #0
   11d74:	d100      	bne.n	11d78 <LORAWAN_RxDone+0x5e4>
   11d76:	e07f      	b.n	11e78 <LORAWAN_RxDone+0x6e4>
   11d78:	6810      	ldr	r0, [r2, #0]
   11d7a:	3c0d      	subs	r4, #13
   11d7c:	b2e1      	uxtb	r1, r4
   11d7e:	0a04      	lsrs	r4, r0, #8
   11d80:	7910      	ldrb	r0, [r2, #4]
   11d82:	9301      	str	r3, [sp, #4]
   11d84:	0600      	lsls	r0, r0, #24
   11d86:	4320      	orrs	r0, r4
   11d88:	9003      	str	r0, [sp, #12]
   11d8a:	4b5e      	ldr	r3, [pc, #376]	; (11f04 <LORAWAN_RxDone+0x770>)
   11d8c:	485e      	ldr	r0, [pc, #376]	; (11f08 <LORAWAN_RxDone+0x774>)
   11d8e:	9300      	str	r3, [sp, #0]
   11d90:	9002      	str	r0, [sp, #8]
   11d92:	6d93      	ldr	r3, [r2, #88]	; 0x58
   11d94:	2201      	movs	r2, #1
   11d96:	4c5d      	ldr	r4, [pc, #372]	; (11f0c <LORAWAN_RxDone+0x778>)
   11d98:	18a8      	adds	r0, r5, r2
   11d9a:	47a0      	blx	r4
   11d9c:	4c50      	ldr	r4, [pc, #320]	; (11ee0 <LORAWAN_RxDone+0x74c>)
   11d9e:	2300      	movs	r3, #0
   11da0:	0022      	movs	r2, r4
   11da2:	3296      	adds	r2, #150	; 0x96
   11da4:	8013      	strh	r3, [r2, #0]
   11da6:	0022      	movs	r2, r4
   11da8:	32c1      	adds	r2, #193	; 0xc1
   11daa:	7013      	strb	r3, [r2, #0]
   11dac:	0022      	movs	r2, r4
   11dae:	2110      	movs	r1, #16
   11db0:	3260      	adds	r2, #96	; 0x60
   11db2:	7813      	ldrb	r3, [r2, #0]
   11db4:	438b      	bics	r3, r1
   11db6:	7013      	strb	r3, [r2, #0]
   11db8:	0023      	movs	r3, r4
   11dba:	2201      	movs	r2, #1
   11dbc:	3350      	adds	r3, #80	; 0x50
   11dbe:	7859      	ldrb	r1, [r3, #1]
   11dc0:	430a      	orrs	r2, r1
   11dc2:	705a      	strb	r2, [r3, #1]
   11dc4:	220e      	movs	r2, #14
   11dc6:	781b      	ldrb	r3, [r3, #0]
   11dc8:	4013      	ands	r3, r2
   11dca:	2b06      	cmp	r3, #6
   11dcc:	d109      	bne.n	11de2 <LORAWAN_RxDone+0x64e>
   11dce:	0023      	movs	r3, r4
   11dd0:	33c8      	adds	r3, #200	; 0xc8
   11dd2:	781b      	ldrb	r3, [r3, #0]
   11dd4:	2b01      	cmp	r3, #1
   11dd6:	d104      	bne.n	11de2 <LORAWAN_RxDone+0x64e>
   11dd8:	0023      	movs	r3, r4
   11dda:	33b9      	adds	r3, #185	; 0xb9
   11ddc:	7818      	ldrb	r0, [r3, #0]
   11dde:	4b43      	ldr	r3, [pc, #268]	; (11eec <LORAWAN_RxDone+0x758>)
   11de0:	4798      	blx	r3
   11de2:	0026      	movs	r6, r4
   11de4:	2201      	movs	r2, #1
   11de6:	3660      	adds	r6, #96	; 0x60
   11de8:	7833      	ldrb	r3, [r6, #0]
   11dea:	4213      	tst	r3, r2
   11dec:	d100      	bne.n	11df0 <LORAWAN_RxDone+0x65c>
   11dee:	e0d7      	b.n	11fa0 <LORAWAN_RxDone+0x80c>
   11df0:	797b      	ldrb	r3, [r7, #5]
   11df2:	321f      	adds	r2, #31
   11df4:	4213      	tst	r3, r2
   11df6:	d100      	bne.n	11dfa <LORAWAN_RxDone+0x666>
   11df8:	e0b8      	b.n	11f6c <LORAWAN_RxDone+0x7d8>
   11dfa:	4b45      	ldr	r3, [pc, #276]	; (11f10 <LORAWAN_RxDone+0x77c>)
   11dfc:	4798      	blx	r3
   11dfe:	0023      	movs	r3, r4
   11e00:	2101      	movs	r1, #1
   11e02:	3350      	adds	r3, #80	; 0x50
   11e04:	785a      	ldrb	r2, [r3, #1]
   11e06:	438a      	bics	r2, r1
   11e08:	705a      	strb	r2, [r3, #1]
   11e0a:	9a04      	ldr	r2, [sp, #16]
   11e0c:	2a00      	cmp	r2, #0
   11e0e:	d100      	bne.n	11e12 <LORAWAN_RxDone+0x67e>
   11e10:	e08c      	b.n	11f2c <LORAWAN_RxDone+0x798>
   11e12:	9a05      	ldr	r2, [sp, #20]
   11e14:	0029      	movs	r1, r5
   11e16:	0038      	movs	r0, r7
   11e18:	4b3e      	ldr	r3, [pc, #248]	; (11f14 <LORAWAN_RxDone+0x780>)
   11e1a:	4798      	blx	r3
   11e1c:	4b3e      	ldr	r3, [pc, #248]	; (11f18 <LORAWAN_RxDone+0x784>)
   11e1e:	4d30      	ldr	r5, [pc, #192]	; (11ee0 <LORAWAN_RxDone+0x74c>)
   11e20:	781b      	ldrb	r3, [r3, #0]
   11e22:	06db      	lsls	r3, r3, #27
   11e24:	d400      	bmi.n	11e28 <LORAWAN_RxDone+0x694>
   11e26:	e132      	b.n	1208e <LORAWAN_RxDone+0x8fa>
   11e28:	2220      	movs	r2, #32
   11e2a:	4b3c      	ldr	r3, [pc, #240]	; (11f1c <LORAWAN_RxDone+0x788>)
   11e2c:	781b      	ldrb	r3, [r3, #0]
   11e2e:	401a      	ands	r2, r3
   11e30:	9204      	str	r2, [sp, #16]
   11e32:	d000      	beq.n	11e36 <LORAWAN_RxDone+0x6a2>
   11e34:	e12b      	b.n	1208e <LORAWAN_RxDone+0x8fa>
   11e36:	320a      	adds	r2, #10
   11e38:	4213      	tst	r3, r2
   11e3a:	d100      	bne.n	11e3e <LORAWAN_RxDone+0x6aa>
   11e3c:	e127      	b.n	1208e <LORAWAN_RxDone+0x8fa>
   11e3e:	002b      	movs	r3, r5
   11e40:	33c0      	adds	r3, #192	; 0xc0
   11e42:	781b      	ldrb	r3, [r3, #0]
   11e44:	a90d      	add	r1, sp, #52	; 0x34
   11e46:	704b      	strb	r3, [r1, #1]
   11e48:	002e      	movs	r6, r5
   11e4a:	2301      	movs	r3, #1
   11e4c:	36b3      	adds	r6, #179	; 0xb3
   11e4e:	700b      	strb	r3, [r1, #0]
   11e50:	7833      	ldrb	r3, [r6, #0]
   11e52:	aa0c      	add	r2, sp, #48	; 0x30
   11e54:	202e      	movs	r0, #46	; 0x2e
   11e56:	4f32      	ldr	r7, [pc, #200]	; (11f20 <LORAWAN_RxDone+0x78c>)
   11e58:	708b      	strb	r3, [r1, #2]
   11e5a:	47b8      	blx	r7
   11e5c:	9005      	str	r0, [sp, #20]
   11e5e:	2808      	cmp	r0, #8
   11e60:	d000      	beq.n	11e64 <LORAWAN_RxDone+0x6d0>
   11e62:	e0cb      	b.n	11ffc <LORAWAN_RxDone+0x868>
   11e64:	4b2f      	ldr	r3, [pc, #188]	; (11f24 <LORAWAN_RxDone+0x790>)
   11e66:	9804      	ldr	r0, [sp, #16]
   11e68:	4798      	blx	r3
   11e6a:	4b2c      	ldr	r3, [pc, #176]	; (11f1c <LORAWAN_RxDone+0x788>)
   11e6c:	9a05      	ldr	r2, [sp, #20]
   11e6e:	781b      	ldrb	r3, [r3, #0]
   11e70:	4393      	bics	r3, r2
   11e72:	4a2a      	ldr	r2, [pc, #168]	; (11f1c <LORAWAN_RxDone+0x788>)
   11e74:	7013      	strb	r3, [r2, #0]
   11e76:	e689      	b.n	11b8c <LORAWAN_RxDone+0x3f8>
   11e78:	9905      	ldr	r1, [sp, #20]
   11e7a:	2900      	cmp	r1, #0
   11e7c:	d029      	beq.n	11ed2 <LORAWAN_RxDone+0x73e>
   11e7e:	0701      	lsls	r1, r0, #28
   11e80:	d11c      	bne.n	11ebc <LORAWAN_RxDone+0x728>
   11e82:	6811      	ldr	r1, [r2, #0]
   11e84:	3c0d      	subs	r4, #13
   11e86:	0a08      	lsrs	r0, r1, #8
   11e88:	7911      	ldrb	r1, [r2, #4]
   11e8a:	9301      	str	r3, [sp, #4]
   11e8c:	0609      	lsls	r1, r1, #24
   11e8e:	4301      	orrs	r1, r0
   11e90:	9103      	str	r1, [sp, #12]
   11e92:	4b25      	ldr	r3, [pc, #148]	; (11f28 <LORAWAN_RxDone+0x794>)
   11e94:	491c      	ldr	r1, [pc, #112]	; (11f08 <LORAWAN_RxDone+0x774>)
   11e96:	b2e4      	uxtb	r4, r4
   11e98:	9102      	str	r1, [sp, #8]
   11e9a:	9300      	str	r3, [sp, #0]
   11e9c:	6d93      	ldr	r3, [r2, #88]	; 0x58
   11e9e:	0021      	movs	r1, r4
   11ea0:	2201      	movs	r2, #1
   11ea2:	9807      	ldr	r0, [sp, #28]
   11ea4:	4d19      	ldr	r5, [pc, #100]	; (11f0c <LORAWAN_RxDone+0x778>)
   11ea6:	47a8      	blx	r5
   11ea8:	4b15      	ldr	r3, [pc, #84]	; (11f00 <LORAWAN_RxDone+0x76c>)
   11eaa:	0021      	movs	r1, r4
   11eac:	9807      	ldr	r0, [sp, #28]
   11eae:	4798      	blx	r3
   11eb0:	9b04      	ldr	r3, [sp, #16]
   11eb2:	9d04      	ldr	r5, [sp, #16]
   11eb4:	9305      	str	r3, [sp, #20]
   11eb6:	2301      	movs	r3, #1
   11eb8:	9306      	str	r3, [sp, #24]
   11eba:	e76f      	b.n	11d9c <LORAWAN_RxDone+0x608>
   11ebc:	466b      	mov	r3, sp
   11ebe:	7c1b      	ldrb	r3, [r3, #16]
   11ec0:	36ac      	adds	r6, #172	; 0xac
   11ec2:	7033      	strb	r3, [r6, #0]
   11ec4:	4b0c      	ldr	r3, [pc, #48]	; (11ef8 <LORAWAN_RxDone+0x764>)
   11ec6:	4798      	blx	r3
   11ec8:	e660      	b.n	11b8c <LORAWAN_RxDone+0x3f8>
   11eca:	2500      	movs	r5, #0
   11ecc:	9504      	str	r5, [sp, #16]
   11ece:	9505      	str	r5, [sp, #20]
   11ed0:	e764      	b.n	11d9c <LORAWAN_RxDone+0x608>
   11ed2:	9b05      	ldr	r3, [sp, #20]
   11ed4:	9304      	str	r3, [sp, #16]
   11ed6:	001d      	movs	r5, r3
   11ed8:	e760      	b.n	11d9c <LORAWAN_RxDone+0x608>
   11eda:	46c0      	nop			; (mov r8, r8)
   11edc:	00012d6d 	.word	0x00012d6d
   11ee0:	20001ca4 	.word	0x20001ca4
   11ee4:	0000b745 	.word	0x0000b745
   11ee8:	0000c64d 	.word	0x0000c64d
   11eec:	0000c7b9 	.word	0x0000c7b9
   11ef0:	20001ee4 	.word	0x20001ee4
   11ef4:	00010639 	.word	0x00010639
   11ef8:	000112c1 	.word	0x000112c1
   11efc:	0000ffff 	.word	0x0000ffff
   11f00:	000114e1 	.word	0x000114e1
   11f04:	20001cb9 	.word	0x20001cb9
   11f08:	20001eec 	.word	0x20001eec
   11f0c:	00010299 	.word	0x00010299
   11f10:	0000f875 	.word	0x0000f875
   11f14:	000106f5 	.word	0x000106f5
   11f18:	20001cf4 	.word	0x20001cf4
   11f1c:	20001d04 	.word	0x20001d04
   11f20:	0000b321 	.word	0x0000b321
   11f24:	0000f5a9 	.word	0x0000f5a9
   11f28:	20001ca9 	.word	0x20001ca9
   11f2c:	2120      	movs	r1, #32
   11f2e:	7832      	ldrb	r2, [r6, #0]
   11f30:	438a      	bics	r2, r1
   11f32:	7032      	strb	r2, [r6, #0]
   11f34:	0022      	movs	r2, r4
   11f36:	32c8      	adds	r2, #200	; 0xc8
   11f38:	7812      	ldrb	r2, [r2, #0]
   11f3a:	2a01      	cmp	r2, #1
   11f3c:	d10e      	bne.n	11f5c <LORAWAN_RxDone+0x7c8>
   11f3e:	781a      	ldrb	r2, [r3, #0]
   11f40:	3912      	subs	r1, #18
   11f42:	438a      	bics	r2, r1
   11f44:	701a      	strb	r2, [r3, #0]
   11f46:	2390      	movs	r3, #144	; 0x90
   11f48:	4a6f      	ldr	r2, [pc, #444]	; (12108 <LORAWAN_RxDone+0x974>)
   11f4a:	005b      	lsls	r3, r3, #1
   11f4c:	5cd3      	ldrb	r3, [r2, r3]
   11f4e:	2b00      	cmp	r3, #0
   11f50:	d000      	beq.n	11f54 <LORAWAN_RxDone+0x7c0>
   11f52:	e763      	b.n	11e1c <LORAWAN_RxDone+0x688>
   11f54:	2008      	movs	r0, #8
   11f56:	4b6d      	ldr	r3, [pc, #436]	; (1210c <LORAWAN_RxDone+0x978>)
   11f58:	4798      	blx	r3
   11f5a:	e75f      	b.n	11e1c <LORAWAN_RxDone+0x688>
   11f5c:	2a04      	cmp	r2, #4
   11f5e:	d1f2      	bne.n	11f46 <LORAWAN_RxDone+0x7b2>
   11f60:	0023      	movs	r3, r4
   11f62:	33bc      	adds	r3, #188	; 0xbc
   11f64:	7818      	ldrb	r0, [r3, #0]
   11f66:	4b6a      	ldr	r3, [pc, #424]	; (12110 <LORAWAN_RxDone+0x97c>)
   11f68:	4798      	blx	r3
   11f6a:	e7ec      	b.n	11f46 <LORAWAN_RxDone+0x7b2>
   11f6c:	9b06      	ldr	r3, [sp, #24]
   11f6e:	2b00      	cmp	r3, #0
   11f70:	d013      	beq.n	11f9a <LORAWAN_RxDone+0x806>
   11f72:	0023      	movs	r3, r4
   11f74:	33c8      	adds	r3, #200	; 0xc8
   11f76:	781d      	ldrb	r5, [r3, #0]
   11f78:	2d01      	cmp	r5, #1
   11f7a:	d10e      	bne.n	11f9a <LORAWAN_RxDone+0x806>
   11f7c:	4b65      	ldr	r3, [pc, #404]	; (12114 <LORAWAN_RxDone+0x980>)
   11f7e:	4798      	blx	r3
   11f80:	0022      	movs	r2, r4
   11f82:	3250      	adds	r2, #80	; 0x50
   11f84:	7853      	ldrb	r3, [r2, #1]
   11f86:	43ab      	bics	r3, r5
   11f88:	7053      	strb	r3, [r2, #1]
   11f8a:	2220      	movs	r2, #32
   11f8c:	7833      	ldrb	r3, [r6, #0]
   11f8e:	4393      	bics	r3, r2
   11f90:	7033      	strb	r3, [r6, #0]
   11f92:	2390      	movs	r3, #144	; 0x90
   11f94:	005b      	lsls	r3, r3, #1
   11f96:	5ce3      	ldrb	r3, [r4, r3]
   11f98:	e7d9      	b.n	11f4e <LORAWAN_RxDone+0x7ba>
   11f9a:	4b5f      	ldr	r3, [pc, #380]	; (12118 <LORAWAN_RxDone+0x984>)
   11f9c:	4798      	blx	r3
   11f9e:	e73d      	b.n	11e1c <LORAWAN_RxDone+0x688>
   11fa0:	9a04      	ldr	r2, [sp, #16]
   11fa2:	2a00      	cmp	r2, #0
   11fa4:	d00b      	beq.n	11fbe <LORAWAN_RxDone+0x82a>
   11fa6:	9a05      	ldr	r2, [sp, #20]
   11fa8:	0029      	movs	r1, r5
   11faa:	0038      	movs	r0, r7
   11fac:	4b5b      	ldr	r3, [pc, #364]	; (1211c <LORAWAN_RxDone+0x988>)
   11fae:	4798      	blx	r3
   11fb0:	0022      	movs	r2, r4
   11fb2:	2101      	movs	r1, #1
   11fb4:	3250      	adds	r2, #80	; 0x50
   11fb6:	7853      	ldrb	r3, [r2, #1]
   11fb8:	438b      	bics	r3, r1
   11fba:	7053      	strb	r3, [r2, #1]
   11fbc:	e72e      	b.n	11e1c <LORAWAN_RxDone+0x688>
   11fbe:	2220      	movs	r2, #32
   11fc0:	4393      	bics	r3, r2
   11fc2:	7033      	strb	r3, [r6, #0]
   11fc4:	0023      	movs	r3, r4
   11fc6:	33c8      	adds	r3, #200	; 0xc8
   11fc8:	781b      	ldrb	r3, [r3, #0]
   11fca:	2b01      	cmp	r3, #1
   11fcc:	d10e      	bne.n	11fec <LORAWAN_RxDone+0x858>
   11fce:	0022      	movs	r2, r4
   11fd0:	210e      	movs	r1, #14
   11fd2:	3250      	adds	r2, #80	; 0x50
   11fd4:	7813      	ldrb	r3, [r2, #0]
   11fd6:	438b      	bics	r3, r1
   11fd8:	7013      	strb	r3, [r2, #0]
   11fda:	2390      	movs	r3, #144	; 0x90
   11fdc:	005b      	lsls	r3, r3, #1
   11fde:	5ce3      	ldrb	r3, [r4, r3]
   11fe0:	2b00      	cmp	r3, #0
   11fe2:	d1e5      	bne.n	11fb0 <LORAWAN_RxDone+0x81c>
   11fe4:	2008      	movs	r0, #8
   11fe6:	4b49      	ldr	r3, [pc, #292]	; (1210c <LORAWAN_RxDone+0x978>)
   11fe8:	4798      	blx	r3
   11fea:	e7e1      	b.n	11fb0 <LORAWAN_RxDone+0x81c>
   11fec:	2b04      	cmp	r3, #4
   11fee:	d1f4      	bne.n	11fda <LORAWAN_RxDone+0x846>
   11ff0:	0023      	movs	r3, r4
   11ff2:	33bc      	adds	r3, #188	; 0xbc
   11ff4:	7818      	ldrb	r0, [r3, #0]
   11ff6:	4b46      	ldr	r3, [pc, #280]	; (12110 <LORAWAN_RxDone+0x97c>)
   11ff8:	4798      	blx	r3
   11ffa:	e7ee      	b.n	11fda <LORAWAN_RxDone+0x846>
   11ffc:	35e4      	adds	r5, #228	; 0xe4
   11ffe:	782b      	ldrb	r3, [r5, #0]
   12000:	079a      	lsls	r2, r3, #30
   12002:	d521      	bpl.n	12048 <LORAWAN_RxDone+0x8b4>
   12004:	aa0e      	add	r2, sp, #56	; 0x38
   12006:	0031      	movs	r1, r6
   12008:	2024      	movs	r0, #36	; 0x24
   1200a:	47b8      	blx	r7
   1200c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1200e:	1c5a      	adds	r2, r3, #1
   12010:	d001      	beq.n	12016 <LORAWAN_RxDone+0x882>
   12012:	3314      	adds	r3, #20
   12014:	930e      	str	r3, [sp, #56]	; 0x38
   12016:	0021      	movs	r1, r4
   12018:	220e      	movs	r2, #14
   1201a:	3150      	adds	r1, #80	; 0x50
   1201c:	780b      	ldrb	r3, [r1, #0]
   1201e:	4393      	bics	r3, r2
   12020:	001a      	movs	r2, r3
   12022:	230c      	movs	r3, #12
   12024:	4313      	orrs	r3, r2
   12026:	700b      	strb	r3, [r1, #0]
   12028:	232c      	movs	r3, #44	; 0x2c
   1202a:	33ff      	adds	r3, #255	; 0xff
   1202c:	5ce3      	ldrb	r3, [r4, r3]
   1202e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12030:	21fa      	movs	r1, #250	; 0xfa
   12032:	1ad3      	subs	r3, r2, r3
   12034:	2200      	movs	r2, #0
   12036:	0089      	lsls	r1, r1, #2
   12038:	4359      	muls	r1, r3
   1203a:	34ba      	adds	r4, #186	; 0xba
   1203c:	4b38      	ldr	r3, [pc, #224]	; (12120 <LORAWAN_RxDone+0x98c>)
   1203e:	7820      	ldrb	r0, [r4, #0]
   12040:	9200      	str	r2, [sp, #0]
   12042:	4c38      	ldr	r4, [pc, #224]	; (12124 <LORAWAN_RxDone+0x990>)
   12044:	47a0      	blx	r4
   12046:	e5a1      	b.n	11b8c <LORAWAN_RxDone+0x3f8>
   12048:	075b      	lsls	r3, r3, #29
   1204a:	d400      	bmi.n	1204e <LORAWAN_RxDone+0x8ba>
   1204c:	e59e      	b.n	11b8c <LORAWAN_RxDone+0x3f8>
   1204e:	aa0e      	add	r2, sp, #56	; 0x38
   12050:	0031      	movs	r1, r6
   12052:	2031      	movs	r0, #49	; 0x31
   12054:	47b8      	blx	r7
   12056:	220e      	movs	r2, #14
   12058:	4b33      	ldr	r3, [pc, #204]	; (12128 <LORAWAN_RxDone+0x994>)
   1205a:	781b      	ldrb	r3, [r3, #0]
   1205c:	4393      	bics	r3, r2
   1205e:	001a      	movs	r2, r3
   12060:	230c      	movs	r3, #12
   12062:	4313      	orrs	r3, r2
   12064:	4a30      	ldr	r2, [pc, #192]	; (12128 <LORAWAN_RxDone+0x994>)
   12066:	7013      	strb	r3, [r2, #0]
   12068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1206a:	1c5a      	adds	r2, r3, #1
   1206c:	d001      	beq.n	12072 <LORAWAN_RxDone+0x8de>
   1206e:	3301      	adds	r3, #1
   12070:	930e      	str	r3, [sp, #56]	; 0x38
   12072:	232c      	movs	r3, #44	; 0x2c
   12074:	33ff      	adds	r3, #255	; 0xff
   12076:	5ce3      	ldrb	r3, [r4, r3]
   12078:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1207a:	21fa      	movs	r1, #250	; 0xfa
   1207c:	1ad3      	subs	r3, r2, r3
   1207e:	2200      	movs	r2, #0
   12080:	0089      	lsls	r1, r1, #2
   12082:	34bd      	adds	r4, #189	; 0xbd
   12084:	4359      	muls	r1, r3
   12086:	7820      	ldrb	r0, [r4, #0]
   12088:	4b28      	ldr	r3, [pc, #160]	; (1212c <LORAWAN_RxDone+0x998>)
   1208a:	9200      	str	r2, [sp, #0]
   1208c:	e7d9      	b.n	12042 <LORAWAN_RxDone+0x8ae>
   1208e:	35c8      	adds	r5, #200	; 0xc8
   12090:	782b      	ldrb	r3, [r5, #0]
   12092:	2b04      	cmp	r3, #4
   12094:	d000      	beq.n	12098 <LORAWAN_RxDone+0x904>
   12096:	e579      	b.n	11b8c <LORAWAN_RxDone+0x3f8>
   12098:	0038      	movs	r0, r7
   1209a:	4b25      	ldr	r3, [pc, #148]	; (12130 <LORAWAN_RxDone+0x99c>)
   1209c:	4798      	blx	r3
   1209e:	e575      	b.n	11b8c <LORAWAN_RxDone+0x3f8>
   120a0:	4b24      	ldr	r3, [pc, #144]	; (12134 <LORAWAN_RxDone+0x9a0>)
   120a2:	4798      	blx	r3
   120a4:	4924      	ldr	r1, [pc, #144]	; (12138 <LORAWAN_RxDone+0x9a4>)
   120a6:	784a      	ldrb	r2, [r1, #1]
   120a8:	780b      	ldrb	r3, [r1, #0]
   120aa:	0212      	lsls	r2, r2, #8
   120ac:	431a      	orrs	r2, r3
   120ae:	788b      	ldrb	r3, [r1, #2]
   120b0:	041b      	lsls	r3, r3, #16
   120b2:	431a      	orrs	r2, r3
   120b4:	78cb      	ldrb	r3, [r1, #3]
   120b6:	061b      	lsls	r3, r3, #24
   120b8:	4313      	orrs	r3, r2
   120ba:	d101      	bne.n	120c0 <LORAWAN_RxDone+0x92c>
   120bc:	f7ff fbbd 	bl	1183a <LORAWAN_RxDone+0xa6>
   120c0:	2220      	movs	r2, #32
   120c2:	3560      	adds	r5, #96	; 0x60
   120c4:	782b      	ldrb	r3, [r5, #0]
   120c6:	2019      	movs	r0, #25
   120c8:	4393      	bics	r3, r2
   120ca:	702b      	strb	r3, [r5, #0]
   120cc:	e515      	b.n	11afa <LORAWAN_RxDone+0x366>
   120ce:	491a      	ldr	r1, [pc, #104]	; (12138 <LORAWAN_RxDone+0x9a4>)
   120d0:	784a      	ldrb	r2, [r1, #1]
   120d2:	780b      	ldrb	r3, [r1, #0]
   120d4:	0212      	lsls	r2, r2, #8
   120d6:	431a      	orrs	r2, r3
   120d8:	788b      	ldrb	r3, [r1, #2]
   120da:	041b      	lsls	r3, r3, #16
   120dc:	431a      	orrs	r2, r3
   120de:	78cb      	ldrb	r3, [r1, #3]
   120e0:	061b      	lsls	r3, r3, #24
   120e2:	4313      	orrs	r3, r2
   120e4:	d100      	bne.n	120e8 <LORAWAN_RxDone+0x954>
   120e6:	e551      	b.n	11b8c <LORAWAN_RxDone+0x3f8>
   120e8:	4b14      	ldr	r3, [pc, #80]	; (1213c <LORAWAN_RxDone+0x9a8>)
   120ea:	4d15      	ldr	r5, [pc, #84]	; (12140 <LORAWAN_RxDone+0x9ac>)
   120ec:	781b      	ldrb	r3, [r3, #0]
   120ee:	2b10      	cmp	r3, #16
   120f0:	d105      	bne.n	120fe <LORAWAN_RxDone+0x96a>
   120f2:	0001      	movs	r1, r0
   120f4:	0022      	movs	r2, r4
   120f6:	2000      	movs	r0, #0
   120f8:	3b0c      	subs	r3, #12
   120fa:	47a8      	blx	r5
   120fc:	e546      	b.n	11b8c <LORAWAN_RxDone+0x3f8>
   120fe:	2300      	movs	r3, #0
   12100:	0001      	movs	r1, r0
   12102:	0022      	movs	r2, r4
   12104:	0018      	movs	r0, r3
   12106:	e7f8      	b.n	120fa <LORAWAN_RxDone+0x966>
   12108:	20001ca4 	.word	0x20001ca4
   1210c:	00010639 	.word	0x00010639
   12110:	0000c7b9 	.word	0x0000c7b9
   12114:	0000f875 	.word	0x0000f875
   12118:	0000f801 	.word	0x0000f801
   1211c:	000106f5 	.word	0x000106f5
   12120:	0000f69d 	.word	0x0000f69d
   12124:	0000c4b5 	.word	0x0000c4b5
   12128:	20001cf4 	.word	0x20001cf4
   1212c:	0001007d 	.word	0x0001007d
   12130:	00012b09 	.word	0x00012b09
   12134:	000112c1 	.word	0x000112c1
   12138:	20001ee4 	.word	0x20001ee4
   1213c:	20001dd0 	.word	0x20001dd0
   12140:	0001069d 	.word	0x0001069d

00012144 <LorawanSetEdClass>:
   12144:	2390      	movs	r3, #144	; 0x90
   12146:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12148:	4d19      	ldr	r5, [pc, #100]	; (121b0 <LorawanSetEdClass+0x6c>)
   1214a:	005b      	lsls	r3, r3, #1
   1214c:	5ceb      	ldrb	r3, [r5, r3]
   1214e:	0004      	movs	r4, r0
   12150:	2011      	movs	r0, #17
   12152:	2b00      	cmp	r3, #0
   12154:	d013      	beq.n	1217e <LorawanSetEdClass+0x3a>
   12156:	002b      	movs	r3, r5
   12158:	33c9      	adds	r3, #201	; 0xc9
   1215a:	781b      	ldrb	r3, [r3, #0]
   1215c:	3807      	subs	r0, #7
   1215e:	4223      	tst	r3, r4
   12160:	d00d      	beq.n	1217e <LorawanSetEdClass+0x3a>
   12162:	002b      	movs	r3, r5
   12164:	33c8      	adds	r3, #200	; 0xc8
   12166:	7819      	ldrb	r1, [r3, #0]
   12168:	428c      	cmp	r4, r1
   1216a:	d007      	beq.n	1217c <LorawanSetEdClass+0x38>
   1216c:	2901      	cmp	r1, #1
   1216e:	d107      	bne.n	12180 <LorawanSetEdClass+0x3c>
   12170:	2c04      	cmp	r4, #4
   12172:	d104      	bne.n	1217e <LorawanSetEdClass+0x3a>
   12174:	701c      	strb	r4, [r3, #0]
   12176:	2000      	movs	r0, #0
   12178:	4b0e      	ldr	r3, [pc, #56]	; (121b4 <LorawanSetEdClass+0x70>)
   1217a:	4798      	blx	r3
   1217c:	2008      	movs	r0, #8
   1217e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   12180:	2904      	cmp	r1, #4
   12182:	d1fc      	bne.n	1217e <LorawanSetEdClass+0x3a>
   12184:	2c01      	cmp	r4, #1
   12186:	d1fa      	bne.n	1217e <LorawanSetEdClass+0x3a>
   12188:	701c      	strb	r4, [r3, #0]
   1218a:	0021      	movs	r1, r4
   1218c:	4b09      	ldr	r3, [pc, #36]	; (121b4 <LorawanSetEdClass+0x70>)
   1218e:	2000      	movs	r0, #0
   12190:	4798      	blx	r3
   12192:	002a      	movs	r2, r5
   12194:	210e      	movs	r1, #14
   12196:	3250      	adds	r2, #80	; 0x50
   12198:	7813      	ldrb	r3, [r2, #0]
   1219a:	a801      	add	r0, sp, #4
   1219c:	438b      	bics	r3, r1
   1219e:	7013      	strb	r3, [r2, #0]
   121a0:	35f0      	adds	r5, #240	; 0xf0
   121a2:	4b05      	ldr	r3, [pc, #20]	; (121b8 <LorawanSetEdClass+0x74>)
   121a4:	7004      	strb	r4, [r0, #0]
   121a6:	4798      	blx	r3
   121a8:	7828      	ldrb	r0, [r5, #0]
   121aa:	4b04      	ldr	r3, [pc, #16]	; (121bc <LorawanSetEdClass+0x78>)
   121ac:	4798      	blx	r3
   121ae:	e7e5      	b.n	1217c <LorawanSetEdClass+0x38>
   121b0:	20001ca4 	.word	0x20001ca4
   121b4:	0000b745 	.word	0x0000b745
   121b8:	00014505 	.word	0x00014505
   121bc:	0000c7b9 	.word	0x0000c7b9

000121c0 <LORAWAN_SetAttr>:
   121c0:	2290      	movs	r2, #144	; 0x90
   121c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   121c4:	4cc2      	ldr	r4, [pc, #776]	; (124d0 <LORAWAN_SetAttr+0x310>)
   121c6:	0052      	lsls	r2, r2, #1
   121c8:	5ca2      	ldrb	r2, [r4, r2]
   121ca:	000b      	movs	r3, r1
   121cc:	2511      	movs	r5, #17
   121ce:	2a00      	cmp	r2, #0
   121d0:	d04e      	beq.n	12270 <LORAWAN_SetAttr+0xb0>
   121d2:	282d      	cmp	r0, #45	; 0x2d
   121d4:	d85f      	bhi.n	12296 <LORAWAN_SetAttr+0xd6>
   121d6:	f002 fcc1 	bl	14b5c <__gnu_thumb1_case_uhi>
   121da:	002e      	.short	0x002e
   121dc:	009a007d 	.word	0x009a007d
   121e0:	00ab00d9 	.word	0x00ab00d9
   121e4:	00f700c7 	.word	0x00f700c7
   121e8:	01300110 	.word	0x01300110
   121ec:	01480142 	.word	0x01480142
   121f0:	015d0154 	.word	0x015d0154
   121f4:	01850176 	.word	0x01850176
   121f8:	018f018a 	.word	0x018f018a
   121fc:	01990194 	.word	0x01990194
   12200:	01a3019e 	.word	0x01a3019e
   12204:	01aa01c5 	.word	0x01aa01c5
   12208:	01ce01a7 	.word	0x01ce01a7
   1220c:	01c001ca 	.word	0x01c001ca
   12210:	01b601bc 	.word	0x01b601bc
   12214:	005e005e 	.word	0x005e005e
   12218:	005e016e 	.word	0x005e016e
   1221c:	005e005e 	.word	0x005e005e
   12220:	005e005e 	.word	0x005e005e
   12224:	01d2005e 	.word	0x01d2005e
   12228:	01d5004d 	.word	0x01d5004d
   1222c:	01ea01fc 	.word	0x01ea01fc
   12230:	005e01d9 	.word	0x005e01d9
   12234:	0216      	.short	0x0216
   12236:	250a      	movs	r5, #10
   12238:	2900      	cmp	r1, #0
   1223a:	d019      	beq.n	12270 <LORAWAN_SetAttr+0xb0>
   1223c:	0020      	movs	r0, r4
   1223e:	2208      	movs	r2, #8
   12240:	4ba4      	ldr	r3, [pc, #656]	; (124d4 <LORAWAN_SetAttr+0x314>)
   12242:	303d      	adds	r0, #61	; 0x3d
   12244:	4798      	blx	r3
   12246:	4ea4      	ldr	r6, [pc, #656]	; (124d8 <LORAWAN_SetAttr+0x318>)
   12248:	2108      	movs	r1, #8
   1224a:	2001      	movs	r0, #1
   1224c:	47b0      	blx	r6
   1224e:	0022      	movs	r2, r4
   12250:	32aa      	adds	r2, #170	; 0xaa
   12252:	7813      	ldrb	r3, [r2, #0]
   12254:	3d09      	subs	r5, #9
   12256:	432b      	orrs	r3, r5
   12258:	2109      	movs	r1, #9
   1225a:	0028      	movs	r0, r5
   1225c:	3450      	adds	r4, #80	; 0x50
   1225e:	7013      	strb	r3, [r2, #0]
   12260:	47b0      	blx	r6
   12262:	7823      	ldrb	r3, [r4, #0]
   12264:	0028      	movs	r0, r5
   12266:	43ab      	bics	r3, r5
   12268:	210b      	movs	r1, #11
   1226a:	7023      	strb	r3, [r4, #0]
   1226c:	47b0      	blx	r6
   1226e:	3507      	adds	r5, #7
   12270:	0028      	movs	r0, r5
   12272:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   12274:	0022      	movs	r2, r4
   12276:	32e4      	adds	r2, #228	; 0xe4
   12278:	7812      	ldrb	r2, [r2, #0]
   1227a:	250a      	movs	r5, #10
   1227c:	0752      	lsls	r2, r2, #29
   1227e:	d5f7      	bpl.n	12270 <LORAWAN_SetAttr+0xb0>
   12280:	79c9      	ldrb	r1, [r1, #7]
   12282:	4a96      	ldr	r2, [pc, #600]	; (124dc <LORAWAN_SetAttr+0x31c>)
   12284:	2900      	cmp	r1, #0
   12286:	d111      	bne.n	122ac <LORAWAN_SetAttr+0xec>
   12288:	466b      	mov	r3, sp
   1228a:	201d      	movs	r0, #29
   1228c:	7159      	strb	r1, [r3, #5]
   1228e:	4669      	mov	r1, sp
   12290:	4790      	blx	r2
   12292:	2800      	cmp	r0, #0
   12294:	d001      	beq.n	1229a <LORAWAN_SetAttr+0xda>
   12296:	250a      	movs	r5, #10
   12298:	e7ea      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   1229a:	0023      	movs	r3, r4
   1229c:	2109      	movs	r1, #9
   1229e:	33e8      	adds	r3, #232	; 0xe8
   122a0:	34e6      	adds	r4, #230	; 0xe6
   122a2:	8018      	strh	r0, [r3, #0]
   122a4:	8020      	strh	r0, [r4, #0]
   122a6:	4b8c      	ldr	r3, [pc, #560]	; (124d8 <LORAWAN_SetAttr+0x318>)
   122a8:	4798      	blx	r3
   122aa:	e011      	b.n	122d0 <LORAWAN_SetAttr+0x110>
   122ac:	466e      	mov	r6, sp
   122ae:	2502      	movs	r5, #2
   122b0:	5f59      	ldrsh	r1, [r3, r5]
   122b2:	8818      	ldrh	r0, [r3, #0]
   122b4:	889d      	ldrh	r5, [r3, #4]
   122b6:	799b      	ldrb	r3, [r3, #6]
   122b8:	8030      	strh	r0, [r6, #0]
   122ba:	7133      	strb	r3, [r6, #4]
   122bc:	2301      	movs	r3, #1
   122be:	8071      	strh	r1, [r6, #2]
   122c0:	201d      	movs	r0, #29
   122c2:	4669      	mov	r1, sp
   122c4:	7173      	strb	r3, [r6, #5]
   122c6:	4790      	blx	r2
   122c8:	2800      	cmp	r0, #0
   122ca:	d1e4      	bne.n	12296 <LORAWAN_SetAttr+0xd6>
   122cc:	34e8      	adds	r4, #232	; 0xe8
   122ce:	8025      	strh	r5, [r4, #0]
   122d0:	2508      	movs	r5, #8
   122d2:	e7cd      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   122d4:	250a      	movs	r5, #10
   122d6:	2900      	cmp	r1, #0
   122d8:	d0ca      	beq.n	12270 <LORAWAN_SetAttr+0xb0>
   122da:	0020      	movs	r0, r4
   122dc:	2208      	movs	r2, #8
   122de:	4b7d      	ldr	r3, [pc, #500]	; (124d4 <LORAWAN_SetAttr+0x314>)
   122e0:	3035      	adds	r0, #53	; 0x35
   122e2:	4798      	blx	r3
   122e4:	2107      	movs	r1, #7
   122e6:	2001      	movs	r0, #1
   122e8:	4d7b      	ldr	r5, [pc, #492]	; (124d8 <LORAWAN_SetAttr+0x318>)
   122ea:	47a8      	blx	r5
   122ec:	0022      	movs	r2, r4
   122ee:	2302      	movs	r3, #2
   122f0:	32aa      	adds	r2, #170	; 0xaa
   122f2:	7811      	ldrb	r1, [r2, #0]
   122f4:	430b      	orrs	r3, r1
   122f6:	7013      	strb	r3, [r2, #0]
   122f8:	2109      	movs	r1, #9
   122fa:	2001      	movs	r0, #1
   122fc:	47a8      	blx	r5
   122fe:	2001      	movs	r0, #1
   12300:	210b      	movs	r1, #11
   12302:	3450      	adds	r4, #80	; 0x50
   12304:	7823      	ldrb	r3, [r4, #0]
   12306:	4383      	bics	r3, r0
   12308:	7023      	strb	r3, [r4, #0]
   1230a:	47a8      	blx	r5
   1230c:	e7e0      	b.n	122d0 <LORAWAN_SetAttr+0x110>
   1230e:	680b      	ldr	r3, [r1, #0]
   12310:	2001      	movs	r0, #1
   12312:	0a19      	lsrs	r1, r3, #8
   12314:	70a1      	strb	r1, [r4, #2]
   12316:	0c19      	lsrs	r1, r3, #16
   12318:	7063      	strb	r3, [r4, #1]
   1231a:	70e1      	strb	r1, [r4, #3]
   1231c:	0e1b      	lsrs	r3, r3, #24
   1231e:	2103      	movs	r1, #3
   12320:	4d6d      	ldr	r5, [pc, #436]	; (124d8 <LORAWAN_SetAttr+0x318>)
   12322:	7123      	strb	r3, [r4, #4]
   12324:	47a8      	blx	r5
   12326:	0022      	movs	r2, r4
   12328:	32aa      	adds	r2, #170	; 0xaa
   1232a:	7811      	ldrb	r1, [r2, #0]
   1232c:	2304      	movs	r3, #4
   1232e:	e7e1      	b.n	122f4 <LORAWAN_SetAttr+0x134>
   12330:	250a      	movs	r5, #10
   12332:	2900      	cmp	r1, #0
   12334:	d09c      	beq.n	12270 <LORAWAN_SetAttr+0xb0>
   12336:	3506      	adds	r5, #6
   12338:	002a      	movs	r2, r5
   1233a:	4b66      	ldr	r3, [pc, #408]	; (124d4 <LORAWAN_SetAttr+0x314>)
   1233c:	1d60      	adds	r0, r4, #5
   1233e:	4798      	blx	r3
   12340:	4e65      	ldr	r6, [pc, #404]	; (124d8 <LORAWAN_SetAttr+0x318>)
   12342:	2104      	movs	r1, #4
   12344:	2001      	movs	r0, #1
   12346:	47b0      	blx	r6
   12348:	0023      	movs	r3, r4
   1234a:	33aa      	adds	r3, #170	; 0xaa
   1234c:	781a      	ldrb	r2, [r3, #0]
   1234e:	2109      	movs	r1, #9
   12350:	4315      	orrs	r5, r2
   12352:	2001      	movs	r0, #1
   12354:	701d      	strb	r5, [r3, #0]
   12356:	47b0      	blx	r6
   12358:	2001      	movs	r0, #1
   1235a:	3450      	adds	r4, #80	; 0x50
   1235c:	7823      	ldrb	r3, [r4, #0]
   1235e:	210b      	movs	r1, #11
   12360:	4383      	bics	r3, r0
   12362:	7023      	strb	r3, [r4, #0]
   12364:	47b0      	blx	r6
   12366:	e7b3      	b.n	122d0 <LORAWAN_SetAttr+0x110>
   12368:	250a      	movs	r5, #10
   1236a:	2900      	cmp	r1, #0
   1236c:	d100      	bne.n	12370 <LORAWAN_SetAttr+0x1b0>
   1236e:	e77f      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   12370:	0020      	movs	r0, r4
   12372:	2210      	movs	r2, #16
   12374:	4b57      	ldr	r3, [pc, #348]	; (124d4 <LORAWAN_SetAttr+0x314>)
   12376:	3015      	adds	r0, #21
   12378:	4798      	blx	r3
   1237a:	2105      	movs	r1, #5
   1237c:	2001      	movs	r0, #1
   1237e:	4d56      	ldr	r5, [pc, #344]	; (124d8 <LORAWAN_SetAttr+0x318>)
   12380:	47a8      	blx	r5
   12382:	0022      	movs	r2, r4
   12384:	32aa      	adds	r2, #170	; 0xaa
   12386:	7811      	ldrb	r1, [r2, #0]
   12388:	2320      	movs	r3, #32
   1238a:	e7b3      	b.n	122f4 <LORAWAN_SetAttr+0x134>
   1238c:	250a      	movs	r5, #10
   1238e:	2900      	cmp	r1, #0
   12390:	d100      	bne.n	12394 <LORAWAN_SetAttr+0x1d4>
   12392:	e76d      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   12394:	0020      	movs	r0, r4
   12396:	2210      	movs	r2, #16
   12398:	4b4e      	ldr	r3, [pc, #312]	; (124d4 <LORAWAN_SetAttr+0x314>)
   1239a:	3025      	adds	r0, #37	; 0x25
   1239c:	4798      	blx	r3
   1239e:	4e4e      	ldr	r6, [pc, #312]	; (124d8 <LORAWAN_SetAttr+0x318>)
   123a0:	2106      	movs	r1, #6
   123a2:	2001      	movs	r0, #1
   123a4:	47b0      	blx	r6
   123a6:	0022      	movs	r2, r4
   123a8:	32aa      	adds	r2, #170	; 0xaa
   123aa:	7813      	ldrb	r3, [r2, #0]
   123ac:	3d02      	subs	r5, #2
   123ae:	432b      	orrs	r3, r5
   123b0:	2109      	movs	r1, #9
   123b2:	2001      	movs	r0, #1
   123b4:	7013      	strb	r3, [r2, #0]
   123b6:	47b0      	blx	r6
   123b8:	2001      	movs	r0, #1
   123ba:	3450      	adds	r4, #80	; 0x50
   123bc:	7823      	ldrb	r3, [r4, #0]
   123be:	210b      	movs	r1, #11
   123c0:	4383      	bics	r3, r0
   123c2:	7023      	strb	r3, [r4, #0]
   123c4:	47b0      	blx	r6
   123c6:	e753      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   123c8:	780b      	ldrb	r3, [r1, #0]
   123ca:	2001      	movs	r0, #1
   123cc:	0021      	movs	r1, r4
   123ce:	2520      	movs	r5, #32
   123d0:	3150      	adds	r1, #80	; 0x50
   123d2:	4003      	ands	r3, r0
   123d4:	015a      	lsls	r2, r3, #5
   123d6:	780b      	ldrb	r3, [r1, #0]
   123d8:	43ab      	bics	r3, r5
   123da:	4313      	orrs	r3, r2
   123dc:	700b      	strb	r3, [r1, #0]
   123de:	0023      	movs	r3, r4
   123e0:	2200      	movs	r2, #0
   123e2:	3396      	adds	r3, #150	; 0x96
   123e4:	3460      	adds	r4, #96	; 0x60
   123e6:	801a      	strh	r2, [r3, #0]
   123e8:	7823      	ldrb	r3, [r4, #0]
   123ea:	3210      	adds	r2, #16
   123ec:	4393      	bics	r3, r2
   123ee:	7023      	strb	r3, [r4, #0]
   123f0:	210b      	movs	r1, #11
   123f2:	4b39      	ldr	r3, [pc, #228]	; (124d8 <LORAWAN_SetAttr+0x318>)
   123f4:	4798      	blx	r3
   123f6:	3d18      	subs	r5, #24
   123f8:	e73a      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   123fa:	466a      	mov	r2, sp
   123fc:	780b      	ldrb	r3, [r1, #0]
   123fe:	7013      	strb	r3, [r2, #0]
   12400:	0022      	movs	r2, r4
   12402:	32be      	adds	r2, #190	; 0xbe
   12404:	7812      	ldrb	r2, [r2, #0]
   12406:	429a      	cmp	r2, r3
   12408:	d900      	bls.n	1240c <LORAWAN_SetAttr+0x24c>
   1240a:	e744      	b.n	12296 <LORAWAN_SetAttr+0xd6>
   1240c:	0022      	movs	r2, r4
   1240e:	32bf      	adds	r2, #191	; 0xbf
   12410:	7812      	ldrb	r2, [r2, #0]
   12412:	429a      	cmp	r2, r3
   12414:	d200      	bcs.n	12418 <LORAWAN_SetAttr+0x258>
   12416:	e73e      	b.n	12296 <LORAWAN_SetAttr+0xd6>
   12418:	4669      	mov	r1, sp
   1241a:	2010      	movs	r0, #16
   1241c:	4b30      	ldr	r3, [pc, #192]	; (124e0 <LORAWAN_SetAttr+0x320>)
   1241e:	4798      	blx	r3
   12420:	0005      	movs	r5, r0
   12422:	2808      	cmp	r0, #8
   12424:	d000      	beq.n	12428 <LORAWAN_SetAttr+0x268>
   12426:	e736      	b.n	12296 <LORAWAN_SetAttr+0xd6>
   12428:	466b      	mov	r3, sp
   1242a:	210c      	movs	r1, #12
   1242c:	2001      	movs	r0, #1
   1242e:	781b      	ldrb	r3, [r3, #0]
   12430:	34b3      	adds	r4, #179	; 0xb3
   12432:	7023      	strb	r3, [r4, #0]
   12434:	4b28      	ldr	r3, [pc, #160]	; (124d8 <LORAWAN_SetAttr+0x318>)
   12436:	4798      	blx	r3
   12438:	e71a      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   1243a:	466a      	mov	r2, sp
   1243c:	780b      	ldrb	r3, [r1, #0]
   1243e:	201d      	movs	r0, #29
   12440:	7013      	strb	r3, [r2, #0]
   12442:	4669      	mov	r1, sp
   12444:	4b26      	ldr	r3, [pc, #152]	; (124e0 <LORAWAN_SetAttr+0x320>)
   12446:	4798      	blx	r3
   12448:	0005      	movs	r5, r0
   1244a:	2808      	cmp	r0, #8
   1244c:	d000      	beq.n	12450 <LORAWAN_SetAttr+0x290>
   1244e:	e722      	b.n	12296 <LORAWAN_SetAttr+0xd6>
   12450:	466b      	mov	r3, sp
   12452:	781b      	ldrb	r3, [r3, #0]
   12454:	34b5      	adds	r4, #181	; 0xb5
   12456:	7023      	strb	r3, [r4, #0]
   12458:	210a      	movs	r1, #10
   1245a:	2000      	movs	r0, #0
   1245c:	e7ea      	b.n	12434 <LORAWAN_SetAttr+0x274>
   1245e:	780b      	ldrb	r3, [r1, #0]
   12460:	2103      	movs	r1, #3
   12462:	34cb      	adds	r4, #203	; 0xcb
   12464:	7023      	strb	r3, [r4, #0]
   12466:	2000      	movs	r0, #0
   12468:	e71d      	b.n	122a6 <LORAWAN_SetAttr+0xe6>
   1246a:	680b      	ldr	r3, [r1, #0]
   1246c:	250a      	movs	r5, #10
   1246e:	1c5a      	adds	r2, r3, #1
   12470:	d100      	bne.n	12474 <LORAWAN_SetAttr+0x2b4>
   12472:	e6fd      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   12474:	2116      	movs	r1, #22
   12476:	2000      	movs	r0, #0
   12478:	6563      	str	r3, [r4, #84]	; 0x54
   1247a:	4b17      	ldr	r3, [pc, #92]	; (124d8 <LORAWAN_SetAttr+0x318>)
   1247c:	4798      	blx	r3
   1247e:	3d02      	subs	r5, #2
   12480:	e6f6      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   12482:	680b      	ldr	r3, [r1, #0]
   12484:	250a      	movs	r5, #10
   12486:	1c5a      	adds	r2, r3, #1
   12488:	d100      	bne.n	1248c <LORAWAN_SetAttr+0x2cc>
   1248a:	e6f1      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   1248c:	65a3      	str	r3, [r4, #88]	; 0x58
   1248e:	0029      	movs	r1, r5
   12490:	2001      	movs	r0, #1
   12492:	e7f2      	b.n	1247a <LORAWAN_SetAttr+0x2ba>
   12494:	0026      	movs	r6, r4
   12496:	880b      	ldrh	r3, [r1, #0]
   12498:	369c      	adds	r6, #156	; 0x9c
   1249a:	210c      	movs	r1, #12
   1249c:	2000      	movs	r0, #0
   1249e:	4d0e      	ldr	r5, [pc, #56]	; (124d8 <LORAWAN_SetAttr+0x318>)
   124a0:	8033      	strh	r3, [r6, #0]
   124a2:	47a8      	blx	r5
   124a4:	22fa      	movs	r2, #250	; 0xfa
   124a6:	8833      	ldrh	r3, [r6, #0]
   124a8:	0092      	lsls	r2, r2, #2
   124aa:	189b      	adds	r3, r3, r2
   124ac:	349e      	adds	r4, #158	; 0x9e
   124ae:	8023      	strh	r3, [r4, #0]
   124b0:	210d      	movs	r1, #13
   124b2:	2000      	movs	r0, #0
   124b4:	e729      	b.n	1230a <LORAWAN_SetAttr+0x14a>
   124b6:	780b      	ldrb	r3, [r1, #0]
   124b8:	250a      	movs	r5, #10
   124ba:	2b0f      	cmp	r3, #15
   124bc:	d900      	bls.n	124c0 <LORAWAN_SetAttr+0x300>
   124be:	e6d7      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   124c0:	3464      	adds	r4, #100	; 0x64
   124c2:	7023      	strb	r3, [r4, #0]
   124c4:	e7db      	b.n	1247e <LORAWAN_SetAttr+0x2be>
   124c6:	880b      	ldrh	r3, [r1, #0]
   124c8:	34a0      	adds	r4, #160	; 0xa0
   124ca:	8023      	strh	r3, [r4, #0]
   124cc:	210e      	movs	r1, #14
   124ce:	e7ca      	b.n	12466 <LORAWAN_SetAttr+0x2a6>
   124d0:	20001ca4 	.word	0x20001ca4
   124d4:	00018195 	.word	0x00018195
   124d8:	0000b745 	.word	0x0000b745
   124dc:	000131d5 	.word	0x000131d5
   124e0:	0000b33d 	.word	0x0000b33d
   124e4:	880b      	ldrh	r3, [r1, #0]
   124e6:	34a2      	adds	r4, #162	; 0xa2
   124e8:	8023      	strh	r3, [r4, #0]
   124ea:	210f      	movs	r1, #15
   124ec:	e7bb      	b.n	12466 <LORAWAN_SetAttr+0x2a6>
   124ee:	880b      	ldrh	r3, [r1, #0]
   124f0:	34a4      	adds	r4, #164	; 0xa4
   124f2:	8023      	strh	r3, [r4, #0]
   124f4:	2110      	movs	r1, #16
   124f6:	e7b6      	b.n	12466 <LORAWAN_SetAttr+0x2a6>
   124f8:	780b      	ldrb	r3, [r1, #0]
   124fa:	34a8      	adds	r4, #168	; 0xa8
   124fc:	7023      	strb	r3, [r4, #0]
   124fe:	2112      	movs	r1, #18
   12500:	e7b1      	b.n	12466 <LORAWAN_SetAttr+0x2a6>
   12502:	780b      	ldrb	r3, [r1, #0]
   12504:	34a9      	adds	r4, #169	; 0xa9
   12506:	7023      	strb	r3, [r4, #0]
   12508:	2113      	movs	r1, #19
   1250a:	e7ac      	b.n	12466 <LORAWAN_SetAttr+0x2a6>
   1250c:	880b      	ldrh	r3, [r1, #0]
   1250e:	34a6      	adds	r4, #166	; 0xa6
   12510:	8023      	strh	r3, [r4, #0]
   12512:	2111      	movs	r1, #17
   12514:	e7a7      	b.n	12466 <LORAWAN_SetAttr+0x2a6>
   12516:	780b      	ldrb	r3, [r1, #0]
   12518:	34ae      	adds	r4, #174	; 0xae
   1251a:	7023      	strb	r3, [r4, #0]
   1251c:	2115      	movs	r1, #21
   1251e:	e7a2      	b.n	12466 <LORAWAN_SetAttr+0x2a6>
   12520:	780b      	ldrb	r3, [r1, #0]
   12522:	34ad      	adds	r4, #173	; 0xad
   12524:	7023      	strb	r3, [r4, #0]
   12526:	e6d3      	b.n	122d0 <LORAWAN_SetAttr+0x110>
   12528:	780b      	ldrb	r3, [r1, #0]
   1252a:	34b4      	adds	r4, #180	; 0xb4
   1252c:	e7fa      	b.n	12524 <LORAWAN_SetAttr+0x364>
   1252e:	2001      	movs	r0, #1
   12530:	780b      	ldrb	r3, [r1, #0]
   12532:	2110      	movs	r1, #16
   12534:	3450      	adds	r4, #80	; 0x50
   12536:	4003      	ands	r3, r0
   12538:	011a      	lsls	r2, r3, #4
   1253a:	7823      	ldrb	r3, [r4, #0]
   1253c:	438b      	bics	r3, r1
   1253e:	4313      	orrs	r3, r2
   12540:	7023      	strb	r3, [r4, #0]
   12542:	3905      	subs	r1, #5
   12544:	e6af      	b.n	122a6 <LORAWAN_SetAttr+0xe6>
   12546:	7818      	ldrb	r0, [r3, #0]
   12548:	7909      	ldrb	r1, [r1, #4]
   1254a:	4b38      	ldr	r3, [pc, #224]	; (1262c <LORAWAN_SetAttr+0x46c>)
   1254c:	4798      	blx	r3
   1254e:	0005      	movs	r5, r0
   12550:	e68e      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   12552:	7818      	ldrb	r0, [r3, #0]
   12554:	7909      	ldrb	r1, [r1, #4]
   12556:	4b36      	ldr	r3, [pc, #216]	; (12630 <LORAWAN_SetAttr+0x470>)
   12558:	e7f8      	b.n	1254c <LORAWAN_SetAttr+0x38c>
   1255a:	7808      	ldrb	r0, [r1, #0]
   1255c:	4b35      	ldr	r3, [pc, #212]	; (12634 <LORAWAN_SetAttr+0x474>)
   1255e:	6849      	ldr	r1, [r1, #4]
   12560:	4798      	blx	r3
   12562:	e7f4      	b.n	1254e <LORAWAN_SetAttr+0x38e>
   12564:	7909      	ldrb	r1, [r1, #4]
   12566:	6818      	ldr	r0, [r3, #0]
   12568:	4b33      	ldr	r3, [pc, #204]	; (12638 <LORAWAN_SetAttr+0x478>)
   1256a:	4798      	blx	r3
   1256c:	e7ef      	b.n	1254e <LORAWAN_SetAttr+0x38e>
   1256e:	7808      	ldrb	r0, [r1, #0]
   12570:	4b32      	ldr	r3, [pc, #200]	; (1263c <LORAWAN_SetAttr+0x47c>)
   12572:	4798      	blx	r3
   12574:	e7eb      	b.n	1254e <LORAWAN_SetAttr+0x38e>
   12576:	8808      	ldrh	r0, [r1, #0]
   12578:	4b31      	ldr	r3, [pc, #196]	; (12640 <LORAWAN_SetAttr+0x480>)
   1257a:	4798      	blx	r3
   1257c:	e6a8      	b.n	122d0 <LORAWAN_SetAttr+0x110>
   1257e:	4a31      	ldr	r2, [pc, #196]	; (12644 <LORAWAN_SetAttr+0x484>)
   12580:	6011      	str	r1, [r2, #0]
   12582:	e688      	b.n	12296 <LORAWAN_SetAttr+0xd6>
   12584:	7808      	ldrb	r0, [r1, #0]
   12586:	4b30      	ldr	r3, [pc, #192]	; (12648 <LORAWAN_SetAttr+0x488>)
   12588:	4798      	blx	r3
   1258a:	e7e0      	b.n	1254e <LORAWAN_SetAttr+0x38e>
   1258c:	0020      	movs	r0, r4
   1258e:	300d      	adds	r0, #13
   12590:	4b2e      	ldr	r3, [pc, #184]	; (1264c <LORAWAN_SetAttr+0x48c>)
   12592:	2210      	movs	r2, #16
   12594:	30ff      	adds	r0, #255	; 0xff
   12596:	4798      	blx	r3
   12598:	2107      	movs	r1, #7
   1259a:	2000      	movs	r0, #0
   1259c:	4d2c      	ldr	r5, [pc, #176]	; (12650 <LORAWAN_SetAttr+0x490>)
   1259e:	47a8      	blx	r5
   125a0:	2001      	movs	r0, #1
   125a2:	34aa      	adds	r4, #170	; 0xaa
   125a4:	7863      	ldrb	r3, [r4, #1]
   125a6:	2109      	movs	r1, #9
   125a8:	4303      	orrs	r3, r0
   125aa:	7063      	strb	r3, [r4, #1]
   125ac:	e6ad      	b.n	1230a <LORAWAN_SetAttr+0x14a>
   125ae:	0020      	movs	r0, r4
   125b0:	2210      	movs	r2, #16
   125b2:	4b26      	ldr	r3, [pc, #152]	; (1264c <LORAWAN_SetAttr+0x48c>)
   125b4:	30fc      	adds	r0, #252	; 0xfc
   125b6:	4798      	blx	r3
   125b8:	2108      	movs	r1, #8
   125ba:	2000      	movs	r0, #0
   125bc:	4d24      	ldr	r5, [pc, #144]	; (12650 <LORAWAN_SetAttr+0x490>)
   125be:	47a8      	blx	r5
   125c0:	2380      	movs	r3, #128	; 0x80
   125c2:	34aa      	adds	r4, #170	; 0xaa
   125c4:	7822      	ldrb	r2, [r4, #0]
   125c6:	425b      	negs	r3, r3
   125c8:	4313      	orrs	r3, r2
   125ca:	7023      	strb	r3, [r4, #0]
   125cc:	2109      	movs	r1, #9
   125ce:	2001      	movs	r0, #1
   125d0:	e69b      	b.n	1230a <LORAWAN_SetAttr+0x14a>
   125d2:	0023      	movs	r3, r4
   125d4:	3350      	adds	r3, #80	; 0x50
   125d6:	781b      	ldrb	r3, [r3, #0]
   125d8:	6809      	ldr	r1, [r1, #0]
   125da:	07db      	lsls	r3, r3, #31
   125dc:	d508      	bpl.n	125f0 <LORAWAN_SetAttr+0x430>
   125de:	6823      	ldr	r3, [r4, #0]
   125e0:	250a      	movs	r5, #10
   125e2:	0a1a      	lsrs	r2, r3, #8
   125e4:	7923      	ldrb	r3, [r4, #4]
   125e6:	061b      	lsls	r3, r3, #24
   125e8:	4313      	orrs	r3, r2
   125ea:	4299      	cmp	r1, r3
   125ec:	d100      	bne.n	125f0 <LORAWAN_SetAttr+0x430>
   125ee:	e63f      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   125f0:	0023      	movs	r3, r4
   125f2:	33f8      	adds	r3, #248	; 0xf8
   125f4:	6019      	str	r1, [r3, #0]
   125f6:	2000      	movs	r0, #0
   125f8:	2106      	movs	r1, #6
   125fa:	4d15      	ldr	r5, [pc, #84]	; (12650 <LORAWAN_SetAttr+0x490>)
   125fc:	34aa      	adds	r4, #170	; 0xaa
   125fe:	47a8      	blx	r5
   12600:	7822      	ldrb	r2, [r4, #0]
   12602:	2340      	movs	r3, #64	; 0x40
   12604:	e7e0      	b.n	125c8 <LORAWAN_SetAttr+0x408>
   12606:	7809      	ldrb	r1, [r1, #0]
   12608:	2900      	cmp	r1, #0
   1260a:	d009      	beq.n	12620 <LORAWAN_SetAttr+0x460>
   1260c:	2202      	movs	r2, #2
   1260e:	34e4      	adds	r4, #228	; 0xe4
   12610:	7823      	ldrb	r3, [r4, #0]
   12612:	2508      	movs	r5, #8
   12614:	4213      	tst	r3, r2
   12616:	d100      	bne.n	1261a <LORAWAN_SetAttr+0x45a>
   12618:	e62a      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   1261a:	4393      	bics	r3, r2
   1261c:	7023      	strb	r3, [r4, #0]
   1261e:	e627      	b.n	12270 <LORAWAN_SetAttr+0xb0>
   12620:	4a0c      	ldr	r2, [pc, #48]	; (12654 <LORAWAN_SetAttr+0x494>)
   12622:	4b0d      	ldr	r3, [pc, #52]	; (12658 <LORAWAN_SetAttr+0x498>)
   12624:	200e      	movs	r0, #14
   12626:	4798      	blx	r3
   12628:	e652      	b.n	122d0 <LORAWAN_SetAttr+0x110>
   1262a:	46c0      	nop			; (mov r8, r8)
   1262c:	00011745 	.word	0x00011745
   12630:	000116d5 	.word	0x000116d5
   12634:	000107e1 	.word	0x000107e1
   12638:	000107a5 	.word	0x000107a5
   1263c:	00012145 	.word	0x00012145
   12640:	0000f6e1 	.word	0x0000f6e1
   12644:	20001ee0 	.word	0x20001ee0
   12648:	00012cc5 	.word	0x00012cc5
   1264c:	00018195 	.word	0x00018195
   12650:	0000b745 	.word	0x0000b745
   12654:	20001d88 	.word	0x20001d88
   12658:	0000b321 	.word	0x0000b321

0001265c <LORAWAN_Reset>:
   1265c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1265e:	b087      	sub	sp, #28
   12660:	ab02      	add	r3, sp, #8
   12662:	1ddd      	adds	r5, r3, #7
   12664:	23ff      	movs	r3, #255	; 0xff
   12666:	4c7d      	ldr	r4, [pc, #500]	; (1285c <LORAWAN_Reset+0x200>)
   12668:	702b      	strb	r3, [r5, #0]
   1266a:	0023      	movs	r3, r4
   1266c:	9001      	str	r0, [sp, #4]
   1266e:	33c3      	adds	r3, #195	; 0xc3
   12670:	781b      	ldrb	r3, [r3, #0]
   12672:	2b00      	cmp	r3, #0
   12674:	d001      	beq.n	1267a <LORAWAN_Reset+0x1e>
   12676:	4b7a      	ldr	r3, [pc, #488]	; (12860 <LORAWAN_Reset+0x204>)
   12678:	4798      	blx	r3
   1267a:	002a      	movs	r2, r5
   1267c:	4b79      	ldr	r3, [pc, #484]	; (12864 <LORAWAN_Reset+0x208>)
   1267e:	2100      	movs	r1, #0
   12680:	2023      	movs	r0, #35	; 0x23
   12682:	4798      	blx	r3
   12684:	782b      	ldrb	r3, [r5, #0]
   12686:	9a01      	ldr	r2, [sp, #4]
   12688:	4293      	cmp	r3, r2
   1268a:	d001      	beq.n	12690 <LORAWAN_Reset+0x34>
   1268c:	4b76      	ldr	r3, [pc, #472]	; (12868 <LORAWAN_Reset+0x20c>)
   1268e:	4798      	blx	r3
   12690:	0021      	movs	r1, r4
   12692:	2334      	movs	r3, #52	; 0x34
   12694:	31cb      	adds	r1, #203	; 0xcb
   12696:	700b      	strb	r3, [r1, #0]
   12698:	2000      	movs	r0, #0
   1269a:	4b74      	ldr	r3, [pc, #464]	; (1286c <LORAWAN_Reset+0x210>)
   1269c:	4798      	blx	r3
   1269e:	0023      	movs	r3, r4
   126a0:	2201      	movs	r2, #1
   126a2:	33c8      	adds	r3, #200	; 0xc8
   126a4:	701a      	strb	r2, [r3, #0]
   126a6:	0023      	movs	r3, r4
   126a8:	2205      	movs	r2, #5
   126aa:	33c9      	adds	r3, #201	; 0xc9
   126ac:	701a      	strb	r2, [r3, #0]
   126ae:	0023      	movs	r3, r4
   126b0:	32fa      	adds	r2, #250	; 0xfa
   126b2:	33b1      	adds	r3, #177	; 0xb1
   126b4:	701a      	strb	r2, [r3, #0]
   126b6:	0023      	movs	r3, r4
   126b8:	2500      	movs	r5, #0
   126ba:	33b2      	adds	r3, #178	; 0xb2
   126bc:	701d      	strb	r5, [r3, #0]
   126be:	0023      	movs	r3, r4
   126c0:	339a      	adds	r3, #154	; 0x9a
   126c2:	801d      	strh	r5, [r3, #0]
   126c4:	0023      	movs	r3, r4
   126c6:	3398      	adds	r3, #152	; 0x98
   126c8:	801d      	strh	r5, [r3, #0]
   126ca:	0023      	movs	r3, r4
   126cc:	3364      	adds	r3, #100	; 0x64
   126ce:	701d      	strb	r5, [r3, #0]
   126d0:	0023      	movs	r3, r4
   126d2:	3396      	adds	r3, #150	; 0x96
   126d4:	801d      	strh	r5, [r3, #0]
   126d6:	0023      	movs	r3, r4
   126d8:	33c1      	adds	r3, #193	; 0xc1
   126da:	701d      	strb	r5, [r3, #0]
   126dc:	0023      	movs	r3, r4
   126de:	33c2      	adds	r3, #194	; 0xc2
   126e0:	701d      	strb	r5, [r3, #0]
   126e2:	0023      	movs	r3, r4
   126e4:	3af9      	subs	r2, #249	; 0xf9
   126e6:	33cc      	adds	r3, #204	; 0xcc
   126e8:	601a      	str	r2, [r3, #0]
   126ea:	0023      	movs	r3, r4
   126ec:	33d0      	adds	r3, #208	; 0xd0
   126ee:	601d      	str	r5, [r3, #0]
   126f0:	0023      	movs	r3, r4
   126f2:	33e6      	adds	r3, #230	; 0xe6
   126f4:	801d      	strh	r5, [r3, #0]
   126f6:	0023      	movs	r3, r4
   126f8:	33e8      	adds	r3, #232	; 0xe8
   126fa:	801d      	strh	r5, [r3, #0]
   126fc:	320a      	adds	r2, #10
   126fe:	0029      	movs	r1, r5
   12700:	4b5b      	ldr	r3, [pc, #364]	; (12870 <LORAWAN_Reset+0x214>)
   12702:	485c      	ldr	r0, [pc, #368]	; (12874 <LORAWAN_Reset+0x218>)
   12704:	65a5      	str	r5, [r4, #88]	; 0x58
   12706:	6565      	str	r5, [r4, #84]	; 0x54
   12708:	4798      	blx	r3
   1270a:	2390      	movs	r3, #144	; 0x90
   1270c:	2201      	movs	r2, #1
   1270e:	2607      	movs	r6, #7
   12710:	005b      	lsls	r3, r3, #1
   12712:	54e2      	strb	r2, [r4, r3]
   12714:	0029      	movs	r1, r5
   12716:	0032      	movs	r2, r6
   12718:	4b55      	ldr	r3, [pc, #340]	; (12870 <LORAWAN_Reset+0x214>)
   1271a:	4857      	ldr	r0, [pc, #348]	; (12878 <LORAWAN_Reset+0x21c>)
   1271c:	4798      	blx	r3
   1271e:	0023      	movs	r3, r4
   12720:	3360      	adds	r3, #96	; 0x60
   12722:	801d      	strh	r5, [r3, #0]
   12724:	0023      	movs	r3, r4
   12726:	33ae      	adds	r3, #174	; 0xae
   12728:	701e      	strb	r6, [r3, #0]
   1272a:	0023      	movs	r3, r4
   1272c:	33ad      	adds	r3, #173	; 0xad
   1272e:	701d      	strb	r5, [r3, #0]
   12730:	0023      	movs	r3, r4
   12732:	33b0      	adds	r3, #176	; 0xb0
   12734:	701d      	strb	r5, [r3, #0]
   12736:	0023      	movs	r3, r4
   12738:	33af      	adds	r3, #175	; 0xaf
   1273a:	701d      	strb	r5, [r3, #0]
   1273c:	9801      	ldr	r0, [sp, #4]
   1273e:	4b4f      	ldr	r3, [pc, #316]	; (1287c <LORAWAN_Reset+0x220>)
   12740:	6525      	str	r5, [r4, #80]	; 0x50
   12742:	4798      	blx	r3
   12744:	0007      	movs	r7, r0
   12746:	2808      	cmp	r0, #8
   12748:	d000      	beq.n	1274c <LORAWAN_Reset+0xf0>
   1274a:	e085      	b.n	12858 <LORAWAN_Reset+0x1fc>
   1274c:	4e4c      	ldr	r6, [pc, #304]	; (12880 <LORAWAN_Reset+0x224>)
   1274e:	4a4d      	ldr	r2, [pc, #308]	; (12884 <LORAWAN_Reset+0x228>)
   12750:	0029      	movs	r1, r5
   12752:	47b0      	blx	r6
   12754:	4a4c      	ldr	r2, [pc, #304]	; (12888 <LORAWAN_Reset+0x22c>)
   12756:	0029      	movs	r1, r5
   12758:	200e      	movs	r0, #14
   1275a:	47b0      	blx	r6
   1275c:	0023      	movs	r3, r4
   1275e:	4a4b      	ldr	r2, [pc, #300]	; (1288c <LORAWAN_Reset+0x230>)
   12760:	33b4      	adds	r3, #180	; 0xb4
   12762:	0029      	movs	r1, r5
   12764:	2006      	movs	r0, #6
   12766:	701d      	strb	r5, [r3, #0]
   12768:	47b0      	blx	r6
   1276a:	4b49      	ldr	r3, [pc, #292]	; (12890 <LORAWAN_Reset+0x234>)
   1276c:	4798      	blx	r3
   1276e:	466b      	mov	r3, sp
   12770:	791b      	ldrb	r3, [r3, #4]
   12772:	34ca      	adds	r4, #202	; 0xca
   12774:	7023      	strb	r3, [r4, #0]
   12776:	0029      	movs	r1, r5
   12778:	4b46      	ldr	r3, [pc, #280]	; (12894 <LORAWAN_Reset+0x238>)
   1277a:	0028      	movs	r0, r5
   1277c:	4798      	blx	r3
   1277e:	2210      	movs	r2, #16
   12780:	4b41      	ldr	r3, [pc, #260]	; (12888 <LORAWAN_Reset+0x22c>)
   12782:	781b      	ldrb	r3, [r3, #0]
   12784:	4213      	tst	r3, r2
   12786:	d006      	beq.n	12796 <LORAWAN_Reset+0x13a>
   12788:	ab02      	add	r3, sp, #8
   1278a:	1d99      	adds	r1, r3, #6
   1278c:	2301      	movs	r3, #1
   1278e:	0038      	movs	r0, r7
   12790:	700b      	strb	r3, [r1, #0]
   12792:	4b36      	ldr	r3, [pc, #216]	; (1286c <LORAWAN_Reset+0x210>)
   12794:	4798      	blx	r3
   12796:	4b40      	ldr	r3, [pc, #256]	; (12898 <LORAWAN_Reset+0x23c>)
   12798:	4940      	ldr	r1, [pc, #256]	; (1289c <LORAWAN_Reset+0x240>)
   1279a:	201e      	movs	r0, #30
   1279c:	4798      	blx	r3
   1279e:	4c2f      	ldr	r4, [pc, #188]	; (1285c <LORAWAN_Reset+0x200>)
   127a0:	0023      	movs	r3, r4
   127a2:	33e4      	adds	r3, #228	; 0xe4
   127a4:	781b      	ldrb	r3, [r3, #0]
   127a6:	075b      	lsls	r3, r3, #29
   127a8:	d507      	bpl.n	127ba <LORAWAN_Reset+0x15e>
   127aa:	2100      	movs	r1, #0
   127ac:	aa04      	add	r2, sp, #16
   127ae:	2030      	movs	r0, #48	; 0x30
   127b0:	47b0      	blx	r6
   127b2:	a904      	add	r1, sp, #16
   127b4:	2027      	movs	r0, #39	; 0x27
   127b6:	4b3a      	ldr	r3, [pc, #232]	; (128a0 <LORAWAN_Reset+0x244>)
   127b8:	4798      	blx	r3
   127ba:	4a3a      	ldr	r2, [pc, #232]	; (128a4 <LORAWAN_Reset+0x248>)
   127bc:	2100      	movs	r1, #0
   127be:	2009      	movs	r0, #9
   127c0:	47b0      	blx	r6
   127c2:	4a39      	ldr	r2, [pc, #228]	; (128a8 <LORAWAN_Reset+0x24c>)
   127c4:	2100      	movs	r1, #0
   127c6:	200a      	movs	r0, #10
   127c8:	47b0      	blx	r6
   127ca:	4a38      	ldr	r2, [pc, #224]	; (128ac <LORAWAN_Reset+0x250>)
   127cc:	2100      	movs	r1, #0
   127ce:	2034      	movs	r0, #52	; 0x34
   127d0:	47b0      	blx	r6
   127d2:	ad04      	add	r5, sp, #16
   127d4:	4a36      	ldr	r2, [pc, #216]	; (128b0 <LORAWAN_Reset+0x254>)
   127d6:	2100      	movs	r1, #0
   127d8:	2035      	movs	r0, #53	; 0x35
   127da:	47b0      	blx	r6
   127dc:	002a      	movs	r2, r5
   127de:	2100      	movs	r1, #0
   127e0:	2014      	movs	r0, #20
   127e2:	47b0      	blx	r6
   127e4:	0023      	movs	r3, r4
   127e6:	782a      	ldrb	r2, [r5, #0]
   127e8:	33be      	adds	r3, #190	; 0xbe
   127ea:	701a      	strb	r2, [r3, #0]
   127ec:	0023      	movs	r3, r4
   127ee:	786a      	ldrb	r2, [r5, #1]
   127f0:	33bf      	adds	r3, #191	; 0xbf
   127f2:	701a      	strb	r2, [r3, #0]
   127f4:	0023      	movs	r3, r4
   127f6:	2500      	movs	r5, #0
   127f8:	33aa      	adds	r3, #170	; 0xaa
   127fa:	801d      	strh	r5, [r3, #0]
   127fc:	2245      	movs	r2, #69	; 0x45
   127fe:	0029      	movs	r1, r5
   12800:	0020      	movs	r0, r4
   12802:	4b1b      	ldr	r3, [pc, #108]	; (12870 <LORAWAN_Reset+0x214>)
   12804:	4798      	blx	r3
   12806:	0023      	movs	r3, r4
   12808:	22fa      	movs	r2, #250	; 0xfa
   1280a:	339c      	adds	r3, #156	; 0x9c
   1280c:	0092      	lsls	r2, r2, #2
   1280e:	801a      	strh	r2, [r3, #0]
   12810:	0022      	movs	r2, r4
   12812:	23fa      	movs	r3, #250	; 0xfa
   12814:	329e      	adds	r2, #158	; 0x9e
   12816:	00db      	lsls	r3, r3, #3
   12818:	8013      	strh	r3, [r2, #0]
   1281a:	0022      	movs	r2, r4
   1281c:	4925      	ldr	r1, [pc, #148]	; (128b4 <LORAWAN_Reset+0x258>)
   1281e:	32a0      	adds	r2, #160	; 0xa0
   12820:	8011      	strh	r1, [r2, #0]
   12822:	0022      	movs	r2, r4
   12824:	4924      	ldr	r1, [pc, #144]	; (128b8 <LORAWAN_Reset+0x25c>)
   12826:	32a2      	adds	r2, #162	; 0xa2
   12828:	8011      	strh	r1, [r2, #0]
   1282a:	0022      	movs	r2, r4
   1282c:	32a6      	adds	r2, #166	; 0xa6
   1282e:	8013      	strh	r3, [r2, #0]
   12830:	0023      	movs	r3, r4
   12832:	2220      	movs	r2, #32
   12834:	33a9      	adds	r3, #169	; 0xa9
   12836:	701a      	strb	r2, [r3, #0]
   12838:	0023      	movs	r3, r4
   1283a:	1892      	adds	r2, r2, r2
   1283c:	33a8      	adds	r3, #168	; 0xa8
   1283e:	701a      	strb	r2, [r3, #0]
   12840:	2380      	movs	r3, #128	; 0x80
   12842:	34a4      	adds	r4, #164	; 0xa4
   12844:	01db      	lsls	r3, r3, #7
   12846:	8023      	strh	r3, [r4, #0]
   12848:	0028      	movs	r0, r5
   1284a:	4b1c      	ldr	r3, [pc, #112]	; (128bc <LORAWAN_Reset+0x260>)
   1284c:	4798      	blx	r3
   1284e:	4b1c      	ldr	r3, [pc, #112]	; (128c0 <LORAWAN_Reset+0x264>)
   12850:	4798      	blx	r3
   12852:	0038      	movs	r0, r7
   12854:	b007      	add	sp, #28
   12856:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12858:	270a      	movs	r7, #10
   1285a:	e7fa      	b.n	12852 <LORAWAN_Reset+0x1f6>
   1285c:	20001ca4 	.word	0x20001ca4
   12860:	0000efa9 	.word	0x0000efa9
   12864:	00010819 	.word	0x00010819
   12868:	0000b491 	.word	0x0000b491
   1286c:	000131d5 	.word	0x000131d5
   12870:	00018219 	.word	0x00018219
   12874:	20001d78 	.word	0x20001d78
   12878:	20001dc7 	.word	0x20001dc7
   1287c:	0000b3b1 	.word	0x0000b3b1
   12880:	0000b321 	.word	0x0000b321
   12884:	20001ced 	.word	0x20001ced
   12888:	20001d88 	.word	0x20001d88
   1288c:	20001d64 	.word	0x20001d64
   12890:	000133f1 	.word	0x000133f1
   12894:	0000b745 	.word	0x0000b745
   12898:	000130e9 	.word	0x000130e9
   1289c:	20001dcf 	.word	0x20001dcf
   128a0:	000121c1 	.word	0x000121c1
   128a4:	20001cf2 	.word	0x20001cf2
   128a8:	20001cee 	.word	0x20001cee
   128ac:	20001d59 	.word	0x20001d59
   128b0:	20001d57 	.word	0x20001d57
   128b4:	00001388 	.word	0x00001388
   128b8:	00001770 	.word	0x00001770
   128bc:	0000f6e1 	.word	0x0000f6e1
   128c0:	00012c59 	.word	0x00012c59

000128c4 <LORAWAN_ReadyToSleep>:
   128c4:	4b08      	ldr	r3, [pc, #32]	; (128e8 <LORAWAN_ReadyToSleep+0x24>)
   128c6:	001a      	movs	r2, r3
   128c8:	32c8      	adds	r2, #200	; 0xc8
   128ca:	7812      	ldrb	r2, [r2, #0]
   128cc:	2a01      	cmp	r2, #1
   128ce:	d002      	beq.n	128d6 <LORAWAN_ReadyToSleep+0x12>
   128d0:	2000      	movs	r0, #0
   128d2:	2a04      	cmp	r2, #4
   128d4:	d106      	bne.n	128e4 <LORAWAN_ReadyToSleep+0x20>
   128d6:	3350      	adds	r3, #80	; 0x50
   128d8:	7818      	ldrb	r0, [r3, #0]
   128da:	230e      	movs	r3, #14
   128dc:	4018      	ands	r0, r3
   128de:	4243      	negs	r3, r0
   128e0:	4158      	adcs	r0, r3
   128e2:	b2c0      	uxtb	r0, r0
   128e4:	4770      	bx	lr
   128e6:	46c0      	nop			; (mov r8, r8)
   128e8:	20001ca4 	.word	0x20001ca4

000128ec <AESEncodeLoRa>:
   128ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   128ee:	0004      	movs	r4, r0
   128f0:	2210      	movs	r2, #16
   128f2:	4668      	mov	r0, sp
   128f4:	4b03      	ldr	r3, [pc, #12]	; (12904 <AESEncodeLoRa+0x18>)
   128f6:	4798      	blx	r3
   128f8:	4669      	mov	r1, sp
   128fa:	0020      	movs	r0, r4
   128fc:	4b02      	ldr	r3, [pc, #8]	; (12908 <AESEncodeLoRa+0x1c>)
   128fe:	4798      	blx	r3
   12900:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
   12902:	46c0      	nop			; (mov r8, r8)
   12904:	00018195 	.word	0x00018195
   12908:	0000b4d9 	.word	0x0000b4d9

0001290c <FillSubKey.constprop.0>:
   1290c:	b530      	push	{r4, r5, lr}
   1290e:	2310      	movs	r3, #16
   12910:	2400      	movs	r4, #0
   12912:	3b01      	subs	r3, #1
   12914:	b2db      	uxtb	r3, r3
   12916:	2bff      	cmp	r3, #255	; 0xff
   12918:	d100      	bne.n	1291c <FillSubKey.constprop.0+0x10>
   1291a:	bd30      	pop	{r4, r5, pc}
   1291c:	18c5      	adds	r5, r0, r3
   1291e:	782a      	ldrb	r2, [r5, #0]
   12920:	0052      	lsls	r2, r2, #1
   12922:	4322      	orrs	r2, r4
   12924:	54ca      	strb	r2, [r1, r3]
   12926:	782c      	ldrb	r4, [r5, #0]
   12928:	09e4      	lsrs	r4, r4, #7
   1292a:	e7f2      	b.n	12912 <FillSubKey.constprop.0+0x6>

0001292c <AESCmac>:
   1292c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1292e:	b09d      	sub	sp, #116	; 0x74
   12930:	ad18      	add	r5, sp, #96	; 0x60
   12932:	4c59      	ldr	r4, [pc, #356]	; (12a98 <AESCmac+0x16c>)
   12934:	9001      	str	r0, [sp, #4]
   12936:	9103      	str	r1, [sp, #12]
   12938:	9202      	str	r2, [sp, #8]
   1293a:	2100      	movs	r1, #0
   1293c:	2210      	movs	r2, #16
   1293e:	0028      	movs	r0, r5
   12940:	001f      	movs	r7, r3
   12942:	47a0      	blx	r4
   12944:	2387      	movs	r3, #135	; 0x87
   12946:	ae14      	add	r6, sp, #80	; 0x50
   12948:	2210      	movs	r2, #16
   1294a:	2100      	movs	r1, #0
   1294c:	0030      	movs	r0, r6
   1294e:	73eb      	strb	r3, [r5, #15]
   12950:	47a0      	blx	r4
   12952:	9901      	ldr	r1, [sp, #4]
   12954:	0030      	movs	r0, r6
   12956:	4b51      	ldr	r3, [pc, #324]	; (12a9c <AESCmac+0x170>)
   12958:	4798      	blx	r3
   1295a:	7832      	ldrb	r2, [r6, #0]
   1295c:	ac04      	add	r4, sp, #16
   1295e:	4b50      	ldr	r3, [pc, #320]	; (12aa0 <AESCmac+0x174>)
   12960:	0021      	movs	r1, r4
   12962:	0030      	movs	r0, r6
   12964:	2a7f      	cmp	r2, #127	; 0x7f
   12966:	d83e      	bhi.n	129e6 <AESCmac+0xba>
   12968:	4798      	blx	r3
   1296a:	ab04      	add	r3, sp, #16
   1296c:	781a      	ldrb	r2, [r3, #0]
   1296e:	ac08      	add	r4, sp, #32
   12970:	4b4b      	ldr	r3, [pc, #300]	; (12aa0 <AESCmac+0x174>)
   12972:	0021      	movs	r1, r4
   12974:	a804      	add	r0, sp, #16
   12976:	2a7f      	cmp	r2, #127	; 0x7f
   12978:	d83f      	bhi.n	129fa <AESCmac+0xce>
   1297a:	4798      	blx	r3
   1297c:	0039      	movs	r1, r7
   1297e:	310f      	adds	r1, #15
   12980:	110b      	asrs	r3, r1, #4
   12982:	d04d      	beq.n	12a20 <AESCmac+0xf4>
   12984:	b2db      	uxtb	r3, r3
   12986:	9300      	str	r3, [sp, #0]
   12988:	073b      	lsls	r3, r7, #28
   1298a:	d14b      	bne.n	12a24 <AESCmac+0xf8>
   1298c:	9b00      	ldr	r3, [sp, #0]
   1298e:	20ff      	movs	r0, #255	; 0xff
   12990:	1e5a      	subs	r2, r3, #1
   12992:	0112      	lsls	r2, r2, #4
   12994:	b2d2      	uxtb	r2, r2
   12996:	0013      	movs	r3, r2
   12998:	0100      	lsls	r0, r0, #4
   1299a:	4001      	ands	r1, r0
   1299c:	ad14      	add	r5, sp, #80	; 0x50
   1299e:	1a98      	subs	r0, r3, r2
   129a0:	b2c0      	uxtb	r0, r0
   129a2:	428b      	cmp	r3, r1
   129a4:	db33      	blt.n	12a0e <AESCmac+0xe2>
   129a6:	2210      	movs	r2, #16
   129a8:	2100      	movs	r1, #0
   129aa:	a80c      	add	r0, sp, #48	; 0x30
   129ac:	4b3a      	ldr	r3, [pc, #232]	; (12a98 <AESCmac+0x16c>)
   129ae:	4798      	blx	r3
   129b0:	2400      	movs	r4, #0
   129b2:	9b00      	ldr	r3, [sp, #0]
   129b4:	3b01      	subs	r3, #1
   129b6:	429c      	cmp	r4, r3
   129b8:	db57      	blt.n	12a6a <AESCmac+0x13e>
   129ba:	2400      	movs	r4, #0
   129bc:	ad10      	add	r5, sp, #64	; 0x40
   129be:	a80c      	add	r0, sp, #48	; 0x30
   129c0:	a914      	add	r1, sp, #80	; 0x50
   129c2:	5c23      	ldrb	r3, [r4, r0]
   129c4:	5c62      	ldrb	r2, [r4, r1]
   129c6:	4053      	eors	r3, r2
   129c8:	5563      	strb	r3, [r4, r5]
   129ca:	3401      	adds	r4, #1
   129cc:	2c10      	cmp	r4, #16
   129ce:	d1f8      	bne.n	129c2 <AESCmac+0x96>
   129d0:	9901      	ldr	r1, [sp, #4]
   129d2:	0028      	movs	r0, r5
   129d4:	4b31      	ldr	r3, [pc, #196]	; (12a9c <AESCmac+0x170>)
   129d6:	4798      	blx	r3
   129d8:	0022      	movs	r2, r4
   129da:	0029      	movs	r1, r5
   129dc:	9803      	ldr	r0, [sp, #12]
   129de:	4b31      	ldr	r3, [pc, #196]	; (12aa4 <AESCmac+0x178>)
   129e0:	4798      	blx	r3
   129e2:	b01d      	add	sp, #116	; 0x74
   129e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   129e6:	4798      	blx	r3
   129e8:	2300      	movs	r3, #0
   129ea:	5d1a      	ldrb	r2, [r3, r4]
   129ec:	5ce9      	ldrb	r1, [r5, r3]
   129ee:	404a      	eors	r2, r1
   129f0:	551a      	strb	r2, [r3, r4]
   129f2:	3301      	adds	r3, #1
   129f4:	2b10      	cmp	r3, #16
   129f6:	d1f8      	bne.n	129ea <AESCmac+0xbe>
   129f8:	e7b7      	b.n	1296a <AESCmac+0x3e>
   129fa:	4798      	blx	r3
   129fc:	2300      	movs	r3, #0
   129fe:	5d1a      	ldrb	r2, [r3, r4]
   12a00:	5ce9      	ldrb	r1, [r5, r3]
   12a02:	404a      	eors	r2, r1
   12a04:	551a      	strb	r2, [r3, r4]
   12a06:	3301      	adds	r3, #1
   12a08:	2b10      	cmp	r3, #16
   12a0a:	d1f8      	bne.n	129fe <AESCmac+0xd2>
   12a0c:	e7b6      	b.n	1297c <AESCmac+0x50>
   12a0e:	9c02      	ldr	r4, [sp, #8]
   12a10:	ae04      	add	r6, sp, #16
   12a12:	5ce4      	ldrb	r4, [r4, r3]
   12a14:	5c36      	ldrb	r6, [r6, r0]
   12a16:	3301      	adds	r3, #1
   12a18:	4074      	eors	r4, r6
   12a1a:	542c      	strb	r4, [r5, r0]
   12a1c:	b2db      	uxtb	r3, r3
   12a1e:	e7be      	b.n	1299e <AESCmac+0x72>
   12a20:	2301      	movs	r3, #1
   12a22:	9300      	str	r3, [sp, #0]
   12a24:	2300      	movs	r3, #0
   12a26:	220f      	movs	r2, #15
   12a28:	003e      	movs	r6, r7
   12a2a:	001c      	movs	r4, r3
   12a2c:	2080      	movs	r0, #128	; 0x80
   12a2e:	4396      	bics	r6, r2
   12a30:	4017      	ands	r7, r2
   12a32:	aa18      	add	r2, sp, #96	; 0x60
   12a34:	b2d9      	uxtb	r1, r3
   12a36:	428f      	cmp	r7, r1
   12a38:	d911      	bls.n	12a5e <AESCmac+0x132>
   12a3a:	9902      	ldr	r1, [sp, #8]
   12a3c:	1989      	adds	r1, r1, r6
   12a3e:	5cc9      	ldrb	r1, [r1, r3]
   12a40:	54d1      	strb	r1, [r2, r3]
   12a42:	3301      	adds	r3, #1
   12a44:	2b10      	cmp	r3, #16
   12a46:	d1f5      	bne.n	12a34 <AESCmac+0x108>
   12a48:	2300      	movs	r3, #0
   12a4a:	a914      	add	r1, sp, #80	; 0x50
   12a4c:	a808      	add	r0, sp, #32
   12a4e:	5cea      	ldrb	r2, [r5, r3]
   12a50:	5c1c      	ldrb	r4, [r3, r0]
   12a52:	4062      	eors	r2, r4
   12a54:	545a      	strb	r2, [r3, r1]
   12a56:	3301      	adds	r3, #1
   12a58:	2b10      	cmp	r3, #16
   12a5a:	d1f8      	bne.n	12a4e <AESCmac+0x122>
   12a5c:	e7a3      	b.n	129a6 <AESCmac+0x7a>
   12a5e:	428f      	cmp	r7, r1
   12a60:	d101      	bne.n	12a66 <AESCmac+0x13a>
   12a62:	54d0      	strb	r0, [r2, r3]
   12a64:	e7ed      	b.n	12a42 <AESCmac+0x116>
   12a66:	54d4      	strb	r4, [r2, r3]
   12a68:	e7eb      	b.n	12a42 <AESCmac+0x116>
   12a6a:	2200      	movs	r2, #0
   12a6c:	9802      	ldr	r0, [sp, #8]
   12a6e:	0123      	lsls	r3, r4, #4
   12a70:	a910      	add	r1, sp, #64	; 0x40
   12a72:	18c0      	adds	r0, r0, r3
   12a74:	ad0c      	add	r5, sp, #48	; 0x30
   12a76:	5c83      	ldrb	r3, [r0, r2]
   12a78:	5d56      	ldrb	r6, [r2, r5]
   12a7a:	4073      	eors	r3, r6
   12a7c:	5453      	strb	r3, [r2, r1]
   12a7e:	3201      	adds	r2, #1
   12a80:	2a10      	cmp	r2, #16
   12a82:	d1f8      	bne.n	12a76 <AESCmac+0x14a>
   12a84:	4b07      	ldr	r3, [pc, #28]	; (12aa4 <AESCmac+0x178>)
   12a86:	0028      	movs	r0, r5
   12a88:	4798      	blx	r3
   12a8a:	3401      	adds	r4, #1
   12a8c:	9901      	ldr	r1, [sp, #4]
   12a8e:	0028      	movs	r0, r5
   12a90:	4b02      	ldr	r3, [pc, #8]	; (12a9c <AESCmac+0x170>)
   12a92:	4798      	blx	r3
   12a94:	b2e4      	uxtb	r4, r4
   12a96:	e78c      	b.n	129b2 <AESCmac+0x86>
   12a98:	00018219 	.word	0x00018219
   12a9c:	000128ed 	.word	0x000128ed
   12aa0:	0001290d 	.word	0x0001290d
   12aa4:	00018195 	.word	0x00018195

00012aa8 <LorawanClasscUlAckTimerCallback>:
   12aa8:	2102      	movs	r1, #2
   12aaa:	4b03      	ldr	r3, [pc, #12]	; (12ab8 <LorawanClasscUlAckTimerCallback+0x10>)
   12aac:	3360      	adds	r3, #96	; 0x60
   12aae:	781a      	ldrb	r2, [r3, #0]
   12ab0:	438a      	bics	r2, r1
   12ab2:	701a      	strb	r2, [r3, #0]
   12ab4:	4770      	bx	lr
   12ab6:	46c0      	nop			; (mov r8, r8)
   12ab8:	20001ca4 	.word	0x20001ca4

00012abc <LorawanClasscValidateSend>:
   12abc:	2390      	movs	r3, #144	; 0x90
   12abe:	b510      	push	{r4, lr}
   12ac0:	4c0a      	ldr	r4, [pc, #40]	; (12aec <LorawanClasscValidateSend+0x30>)
   12ac2:	005b      	lsls	r3, r3, #1
   12ac4:	5ce3      	ldrb	r3, [r4, r3]
   12ac6:	2b00      	cmp	r3, #0
   12ac8:	d008      	beq.n	12adc <LorawanClasscValidateSend+0x20>
   12aca:	220e      	movs	r2, #14
   12acc:	3450      	adds	r4, #80	; 0x50
   12ace:	7823      	ldrb	r3, [r4, #0]
   12ad0:	2008      	movs	r0, #8
   12ad2:	4013      	ands	r3, r2
   12ad4:	2b02      	cmp	r3, #2
   12ad6:	d100      	bne.n	12ada <LorawanClasscValidateSend+0x1e>
   12ad8:	2011      	movs	r0, #17
   12ada:	bd10      	pop	{r4, pc}
   12adc:	0023      	movs	r3, r4
   12ade:	33f0      	adds	r3, #240	; 0xf0
   12ae0:	7818      	ldrb	r0, [r3, #0]
   12ae2:	4b03      	ldr	r3, [pc, #12]	; (12af0 <LorawanClasscValidateSend+0x34>)
   12ae4:	4798      	blx	r3
   12ae6:	2800      	cmp	r0, #0
   12ae8:	d1ef      	bne.n	12aca <LorawanClasscValidateSend+0xe>
   12aea:	e7f5      	b.n	12ad8 <LorawanClasscValidateSend+0x1c>
   12aec:	20001ca4 	.word	0x20001ca4
   12af0:	0000c64d 	.word	0x0000c64d

00012af4 <LorawanClasscReceiveWindow1Callback>:
   12af4:	2301      	movs	r3, #1
   12af6:	b507      	push	{r0, r1, r2, lr}
   12af8:	a801      	add	r0, sp, #4
   12afa:	7003      	strb	r3, [r0, #0]
   12afc:	4b01      	ldr	r3, [pc, #4]	; (12b04 <LorawanClasscReceiveWindow1Callback+0x10>)
   12afe:	4798      	blx	r3
   12b00:	bd07      	pop	{r0, r1, r2, pc}
   12b02:	46c0      	nop			; (mov r8, r8)
   12b04:	00014505 	.word	0x00014505

00012b08 <LorawanClasscRxDone>:
   12b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12b0a:	221f      	movs	r2, #31
   12b0c:	7803      	ldrb	r3, [r0, #0]
   12b0e:	4c13      	ldr	r4, [pc, #76]	; (12b5c <LorawanClasscRxDone+0x54>)
   12b10:	4393      	bics	r3, r2
   12b12:	2ba0      	cmp	r3, #160	; 0xa0
   12b14:	d10c      	bne.n	12b30 <LorawanClasscRxDone+0x28>
   12b16:	0025      	movs	r5, r4
   12b18:	35f0      	adds	r5, #240	; 0xf0
   12b1a:	7828      	ldrb	r0, [r5, #0]
   12b1c:	4b10      	ldr	r3, [pc, #64]	; (12b60 <LorawanClasscRxDone+0x58>)
   12b1e:	4798      	blx	r3
   12b20:	1e02      	subs	r2, r0, #0
   12b22:	d014      	beq.n	12b4e <LorawanClasscRxDone+0x46>
   12b24:	0022      	movs	r2, r4
   12b26:	2102      	movs	r1, #2
   12b28:	3260      	adds	r2, #96	; 0x60
   12b2a:	7813      	ldrb	r3, [r2, #0]
   12b2c:	438b      	bics	r3, r1
   12b2e:	7013      	strb	r3, [r2, #0]
   12b30:	3450      	adds	r4, #80	; 0x50
   12b32:	7823      	ldrb	r3, [r4, #0]
   12b34:	220e      	movs	r2, #14
   12b36:	0019      	movs	r1, r3
   12b38:	4011      	ands	r1, r2
   12b3a:	2906      	cmp	r1, #6
   12b3c:	d103      	bne.n	12b46 <LorawanClasscRxDone+0x3e>
   12b3e:	4393      	bics	r3, r2
   12b40:	3a04      	subs	r2, #4
   12b42:	4313      	orrs	r3, r2
   12b44:	7023      	strb	r3, [r4, #0]
   12b46:	2000      	movs	r0, #0
   12b48:	4b06      	ldr	r3, [pc, #24]	; (12b64 <LorawanClasscRxDone+0x5c>)
   12b4a:	4798      	blx	r3
   12b4c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   12b4e:	7828      	ldrb	r0, [r5, #0]
   12b50:	4b05      	ldr	r3, [pc, #20]	; (12b68 <LorawanClasscRxDone+0x60>)
   12b52:	9200      	str	r2, [sp, #0]
   12b54:	4905      	ldr	r1, [pc, #20]	; (12b6c <LorawanClasscRxDone+0x64>)
   12b56:	4d06      	ldr	r5, [pc, #24]	; (12b70 <LorawanClasscRxDone+0x68>)
   12b58:	47a8      	blx	r5
   12b5a:	e7e9      	b.n	12b30 <LorawanClasscRxDone+0x28>
   12b5c:	20001ca4 	.word	0x20001ca4
   12b60:	0000c64d 	.word	0x0000c64d
   12b64:	0001119d 	.word	0x0001119d
   12b68:	00012aa9 	.word	0x00012aa9
   12b6c:	001e8480 	.word	0x001e8480
   12b70:	0000c4b5 	.word	0x0000c4b5

00012b74 <LorawanClasscTxDone>:
   12b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12b76:	4c1b      	ldr	r4, [pc, #108]	; (12be4 <LorawanClasscTxDone+0x70>)
   12b78:	0023      	movs	r3, r4
   12b7a:	339e      	adds	r3, #158	; 0x9e
   12b7c:	881d      	ldrh	r5, [r3, #0]
   12b7e:	0023      	movs	r3, r4
   12b80:	3360      	adds	r3, #96	; 0x60
   12b82:	781b      	ldrb	r3, [r3, #0]
   12b84:	07db      	lsls	r3, r3, #31
   12b86:	d525      	bpl.n	12bd4 <LorawanClasscTxDone+0x60>
   12b88:	0023      	movs	r3, r4
   12b8a:	0022      	movs	r2, r4
   12b8c:	33ae      	adds	r3, #174	; 0xae
   12b8e:	781b      	ldrb	r3, [r3, #0]
   12b90:	32b0      	adds	r2, #176	; 0xb0
   12b92:	3301      	adds	r3, #1
   12b94:	7812      	ldrb	r2, [r2, #0]
   12b96:	4293      	cmp	r3, r2
   12b98:	db07      	blt.n	12baa <LorawanClasscTxDone+0x36>
   12b9a:	2395      	movs	r3, #149	; 0x95
   12b9c:	005b      	lsls	r3, r3, #1
   12b9e:	5ce3      	ldrb	r3, [r4, r3]
   12ba0:	2b00      	cmp	r3, #0
   12ba2:	d002      	beq.n	12baa <LorawanClasscTxDone+0x36>
   12ba4:	23fa      	movs	r3, #250	; 0xfa
   12ba6:	00db      	lsls	r3, r3, #3
   12ba8:	18ed      	adds	r5, r5, r3
   12baa:	0023      	movs	r3, r4
   12bac:	33f0      	adds	r3, #240	; 0xf0
   12bae:	1945      	adds	r5, r0, r5
   12bb0:	7818      	ldrb	r0, [r3, #0]
   12bb2:	4b0d      	ldr	r3, [pc, #52]	; (12be8 <LorawanClasscTxDone+0x74>)
   12bb4:	4798      	blx	r3
   12bb6:	34bc      	adds	r4, #188	; 0xbc
   12bb8:	21fa      	movs	r1, #250	; 0xfa
   12bba:	7820      	ldrb	r0, [r4, #0]
   12bbc:	2400      	movs	r4, #0
   12bbe:	0089      	lsls	r1, r1, #2
   12bc0:	4369      	muls	r1, r5
   12bc2:	0022      	movs	r2, r4
   12bc4:	4d09      	ldr	r5, [pc, #36]	; (12bec <LorawanClasscTxDone+0x78>)
   12bc6:	9400      	str	r4, [sp, #0]
   12bc8:	4b09      	ldr	r3, [pc, #36]	; (12bf0 <LorawanClasscTxDone+0x7c>)
   12bca:	47a8      	blx	r5
   12bcc:	0020      	movs	r0, r4
   12bce:	4b09      	ldr	r3, [pc, #36]	; (12bf4 <LorawanClasscTxDone+0x80>)
   12bd0:	4798      	blx	r3
   12bd2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   12bd4:	0023      	movs	r3, r4
   12bd6:	0022      	movs	r2, r4
   12bd8:	33ad      	adds	r3, #173	; 0xad
   12bda:	781b      	ldrb	r3, [r3, #0]
   12bdc:	32af      	adds	r2, #175	; 0xaf
   12bde:	3301      	adds	r3, #1
   12be0:	e7d8      	b.n	12b94 <LorawanClasscTxDone+0x20>
   12be2:	46c0      	nop			; (mov r8, r8)
   12be4:	20001ca4 	.word	0x20001ca4
   12be8:	0000c7b9 	.word	0x0000c7b9
   12bec:	0000c4b5 	.word	0x0000c4b5
   12bf0:	0001106d 	.word	0x0001106d
   12bf4:	0001119d 	.word	0x0001119d

00012bf8 <LorawanClasscRxTimeout>:
   12bf8:	b510      	push	{r4, lr}
   12bfa:	4b08      	ldr	r3, [pc, #32]	; (12c1c <LorawanClasscRxTimeout+0x24>)
   12bfc:	210e      	movs	r1, #14
   12bfe:	3350      	adds	r3, #80	; 0x50
   12c00:	781a      	ldrb	r2, [r3, #0]
   12c02:	0010      	movs	r0, r2
   12c04:	4008      	ands	r0, r1
   12c06:	2806      	cmp	r0, #6
   12c08:	d106      	bne.n	12c18 <LorawanClasscRxTimeout+0x20>
   12c0a:	438a      	bics	r2, r1
   12c0c:	3904      	subs	r1, #4
   12c0e:	430a      	orrs	r2, r1
   12c10:	701a      	strb	r2, [r3, #0]
   12c12:	2000      	movs	r0, #0
   12c14:	4b02      	ldr	r3, [pc, #8]	; (12c20 <LorawanClasscRxTimeout+0x28>)
   12c16:	4798      	blx	r3
   12c18:	bd10      	pop	{r4, pc}
   12c1a:	46c0      	nop			; (mov r8, r8)
   12c1c:	20001ca4 	.word	0x20001ca4
   12c20:	0001119d 	.word	0x0001119d

00012c24 <LorawanClasscNotifyAppOnReceive>:
   12c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c26:	001f      	movs	r7, r3
   12c28:	4b08      	ldr	r3, [pc, #32]	; (12c4c <LorawanClasscNotifyAppOnReceive+0x28>)
   12c2a:	0004      	movs	r4, r0
   12c2c:	33f0      	adds	r3, #240	; 0xf0
   12c2e:	7818      	ldrb	r0, [r3, #0]
   12c30:	4b07      	ldr	r3, [pc, #28]	; (12c50 <LorawanClasscNotifyAppOnReceive+0x2c>)
   12c32:	000d      	movs	r5, r1
   12c34:	0016      	movs	r6, r2
   12c36:	4798      	blx	r3
   12c38:	2800      	cmp	r0, #0
   12c3a:	d105      	bne.n	12c48 <LorawanClasscNotifyAppOnReceive+0x24>
   12c3c:	0020      	movs	r0, r4
   12c3e:	003b      	movs	r3, r7
   12c40:	0032      	movs	r2, r6
   12c42:	0029      	movs	r1, r5
   12c44:	4c03      	ldr	r4, [pc, #12]	; (12c54 <LorawanClasscNotifyAppOnReceive+0x30>)
   12c46:	47a0      	blx	r4
   12c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c4a:	46c0      	nop			; (mov r8, r8)
   12c4c:	20001ca4 	.word	0x20001ca4
   12c50:	0000c64d 	.word	0x0000c64d
   12c54:	0001069d 	.word	0x0001069d

00012c58 <LorawanMcastInit>:
   12c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c5a:	4c15      	ldr	r4, [pc, #84]	; (12cb0 <LorawanMcastInit+0x58>)
   12c5c:	2201      	movs	r2, #1
   12c5e:	0023      	movs	r3, r4
   12c60:	33f4      	adds	r3, #244	; 0xf4
   12c62:	701a      	strb	r2, [r3, #0]
   12c64:	0023      	movs	r3, r4
   12c66:	2201      	movs	r2, #1
   12c68:	2710      	movs	r7, #16
   12c6a:	33f8      	adds	r3, #248	; 0xf8
   12c6c:	4252      	negs	r2, r2
   12c6e:	601a      	str	r2, [r3, #0]
   12c70:	4e10      	ldr	r6, [pc, #64]	; (12cb4 <LorawanMcastInit+0x5c>)
   12c72:	003a      	movs	r2, r7
   12c74:	2100      	movs	r1, #0
   12c76:	4810      	ldr	r0, [pc, #64]	; (12cb8 <LorawanMcastInit+0x60>)
   12c78:	47b0      	blx	r6
   12c7a:	4d10      	ldr	r5, [pc, #64]	; (12cbc <LorawanMcastInit+0x64>)
   12c7c:	003a      	movs	r2, r7
   12c7e:	0028      	movs	r0, r5
   12c80:	2100      	movs	r1, #0
   12c82:	47b0      	blx	r6
   12c84:	0022      	movs	r2, r4
   12c86:	2102      	movs	r1, #2
   12c88:	3250      	adds	r2, #80	; 0x50
   12c8a:	7893      	ldrb	r3, [r2, #2]
   12c8c:	2000      	movs	r0, #0
   12c8e:	438b      	bics	r3, r1
   12c90:	7093      	strb	r3, [r2, #2]
   12c92:	223f      	movs	r2, #63	; 0x3f
   12c94:	34aa      	adds	r4, #170	; 0xaa
   12c96:	7823      	ldrb	r3, [r4, #0]
   12c98:	3103      	adds	r1, #3
   12c9a:	4013      	ands	r3, r2
   12c9c:	7023      	strb	r3, [r4, #0]
   12c9e:	7863      	ldrb	r3, [r4, #1]
   12ca0:	3a3e      	subs	r2, #62	; 0x3e
   12ca2:	4393      	bics	r3, r2
   12ca4:	7063      	strb	r3, [r4, #1]
   12ca6:	4b06      	ldr	r3, [pc, #24]	; (12cc0 <LorawanMcastInit+0x68>)
   12ca8:	6228      	str	r0, [r5, #32]
   12caa:	4798      	blx	r3
   12cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12cae:	46c0      	nop			; (mov r8, r8)
   12cb0:	20001ca4 	.word	0x20001ca4
   12cb4:	00018219 	.word	0x00018219
   12cb8:	20001db0 	.word	0x20001db0
   12cbc:	20001da0 	.word	0x20001da0
   12cc0:	0000b745 	.word	0x0000b745

00012cc4 <LorawanMcastEnable>:
   12cc4:	b510      	push	{r4, lr}
   12cc6:	4b12      	ldr	r3, [pc, #72]	; (12d10 <LorawanMcastEnable+0x4c>)
   12cc8:	2800      	cmp	r0, #0
   12cca:	d019      	beq.n	12d00 <LorawanMcastEnable+0x3c>
   12ccc:	001a      	movs	r2, r3
   12cce:	21e0      	movs	r1, #224	; 0xe0
   12cd0:	32aa      	adds	r2, #170	; 0xaa
   12cd2:	8812      	ldrh	r2, [r2, #0]
   12cd4:	0049      	lsls	r1, r1, #1
   12cd6:	400a      	ands	r2, r1
   12cd8:	200a      	movs	r0, #10
   12cda:	428a      	cmp	r2, r1
   12cdc:	d10f      	bne.n	12cfe <LorawanMcastEnable+0x3a>
   12cde:	001a      	movs	r2, r3
   12ce0:	32c8      	adds	r2, #200	; 0xc8
   12ce2:	7811      	ldrb	r1, [r2, #0]
   12ce4:	2206      	movs	r2, #6
   12ce6:	4211      	tst	r1, r2
   12ce8:	d009      	beq.n	12cfe <LorawanMcastEnable+0x3a>
   12cea:	3350      	adds	r3, #80	; 0x50
   12cec:	7899      	ldrb	r1, [r3, #2]
   12cee:	3a04      	subs	r2, #4
   12cf0:	430a      	orrs	r2, r1
   12cf2:	210b      	movs	r1, #11
   12cf4:	709a      	strb	r2, [r3, #2]
   12cf6:	3809      	subs	r0, #9
   12cf8:	4b06      	ldr	r3, [pc, #24]	; (12d14 <LorawanMcastEnable+0x50>)
   12cfa:	4798      	blx	r3
   12cfc:	2008      	movs	r0, #8
   12cfe:	bd10      	pop	{r4, pc}
   12d00:	2102      	movs	r1, #2
   12d02:	3350      	adds	r3, #80	; 0x50
   12d04:	789a      	ldrb	r2, [r3, #2]
   12d06:	2001      	movs	r0, #1
   12d08:	438a      	bics	r2, r1
   12d0a:	709a      	strb	r2, [r3, #2]
   12d0c:	3109      	adds	r1, #9
   12d0e:	e7f3      	b.n	12cf8 <LorawanMcastEnable+0x34>
   12d10:	20001ca4 	.word	0x20001ca4
   12d14:	0000b745 	.word	0x0000b745

00012d18 <LorawanMcastValidateHdr>:
   12d18:	0003      	movs	r3, r0
   12d1a:	b570      	push	{r4, r5, r6, lr}
   12d1c:	7845      	ldrb	r5, [r0, #1]
   12d1e:	7880      	ldrb	r0, [r0, #2]
   12d20:	4c11      	ldr	r4, [pc, #68]	; (12d68 <LorawanMcastValidateHdr+0x50>)
   12d22:	0200      	lsls	r0, r0, #8
   12d24:	4328      	orrs	r0, r5
   12d26:	78dd      	ldrb	r5, [r3, #3]
   12d28:	042d      	lsls	r5, r5, #16
   12d2a:	4328      	orrs	r0, r5
   12d2c:	791d      	ldrb	r5, [r3, #4]
   12d2e:	062d      	lsls	r5, r5, #24
   12d30:	4305      	orrs	r5, r0
   12d32:	0020      	movs	r0, r4
   12d34:	30f8      	adds	r0, #248	; 0xf8
   12d36:	6806      	ldr	r6, [r0, #0]
   12d38:	200a      	movs	r0, #10
   12d3a:	42b5      	cmp	r5, r6
   12d3c:	d112      	bne.n	12d64 <LorawanMcastValidateHdr+0x4c>
   12d3e:	0025      	movs	r5, r4
   12d40:	35c8      	adds	r5, #200	; 0xc8
   12d42:	782e      	ldrb	r6, [r5, #0]
   12d44:	2506      	movs	r5, #6
   12d46:	422e      	tst	r6, r5
   12d48:	d00c      	beq.n	12d64 <LorawanMcastValidateHdr+0x4c>
   12d4a:	3452      	adds	r4, #82	; 0x52
   12d4c:	7824      	ldrb	r4, [r4, #0]
   12d4e:	07a4      	lsls	r4, r4, #30
   12d50:	d508      	bpl.n	12d64 <LorawanMcastValidateHdr+0x4c>
   12d52:	2a00      	cmp	r2, #0
   12d54:	d006      	beq.n	12d64 <LorawanMcastValidateHdr+0x4c>
   12d56:	795a      	ldrb	r2, [r3, #5]
   12d58:	236f      	movs	r3, #111	; 0x6f
   12d5a:	421a      	tst	r2, r3
   12d5c:	d102      	bne.n	12d64 <LorawanMcastValidateHdr+0x4c>
   12d5e:	2903      	cmp	r1, #3
   12d60:	d100      	bne.n	12d64 <LorawanMcastValidateHdr+0x4c>
   12d62:	3802      	subs	r0, #2
   12d64:	bd70      	pop	{r4, r5, r6, pc}
   12d66:	46c0      	nop			; (mov r8, r8)
   12d68:	20001ca4 	.word	0x20001ca4

00012d6c <LorawanMcastProcessPkt>:
   12d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d6e:	0016      	movs	r6, r2
   12d70:	b087      	sub	sp, #28
   12d72:	9005      	str	r0, [sp, #20]
   12d74:	79f3      	ldrb	r3, [r6, #7]
   12d76:	7992      	ldrb	r2, [r2, #6]
   12d78:	4c2f      	ldr	r4, [pc, #188]	; (12e38 <LorawanMcastProcessPkt+0xcc>)
   12d7a:	021b      	lsls	r3, r3, #8
   12d7c:	4313      	orrs	r3, r2
   12d7e:	0022      	movs	r2, r4
   12d80:	32fe      	adds	r2, #254	; 0xfe
   12d82:	000d      	movs	r5, r1
   12d84:	8bd1      	ldrh	r1, [r2, #30]
   12d86:	270a      	movs	r7, #10
   12d88:	4299      	cmp	r1, r3
   12d8a:	d83d      	bhi.n	12e08 <LorawanMcastProcessPkt+0x9c>
   12d8c:	83d3      	strh	r3, [r2, #30]
   12d8e:	2105      	movs	r1, #5
   12d90:	4b2a      	ldr	r3, [pc, #168]	; (12e3c <LorawanMcastProcessPkt+0xd0>)
   12d92:	2000      	movs	r0, #0
   12d94:	4798      	blx	r3
   12d96:	0022      	movs	r2, r4
   12d98:	32f8      	adds	r2, #248	; 0xf8
   12d9a:	6812      	ldr	r2, [r2, #0]
   12d9c:	0023      	movs	r3, r4
   12d9e:	9203      	str	r2, [sp, #12]
   12da0:	4a27      	ldr	r2, [pc, #156]	; (12e40 <LorawanMcastProcessPkt+0xd4>)
   12da2:	0029      	movs	r1, r5
   12da4:	9202      	str	r2, [sp, #8]
   12da6:	2219      	movs	r2, #25
   12da8:	9201      	str	r2, [sp, #4]
   12daa:	4a26      	ldr	r2, [pc, #152]	; (12e44 <LorawanMcastProcessPkt+0xd8>)
   12dac:	9805      	ldr	r0, [sp, #20]
   12dae:	9200      	str	r2, [sp, #0]
   12db0:	33fc      	adds	r3, #252	; 0xfc
   12db2:	390d      	subs	r1, #13
   12db4:	b2c9      	uxtb	r1, r1
   12db6:	6a1b      	ldr	r3, [r3, #32]
   12db8:	2201      	movs	r2, #1
   12dba:	4f23      	ldr	r7, [pc, #140]	; (12e48 <LorawanMcastProcessPkt+0xdc>)
   12dbc:	3009      	adds	r0, #9
   12dbe:	47b8      	blx	r7
   12dc0:	4922      	ldr	r1, [pc, #136]	; (12e4c <LorawanMcastProcessPkt+0xe0>)
   12dc2:	2708      	movs	r7, #8
   12dc4:	784a      	ldrb	r2, [r1, #1]
   12dc6:	780b      	ldrb	r3, [r1, #0]
   12dc8:	0212      	lsls	r2, r2, #8
   12dca:	431a      	orrs	r2, r3
   12dcc:	788b      	ldrb	r3, [r1, #2]
   12dce:	041b      	lsls	r3, r3, #16
   12dd0:	431a      	orrs	r2, r3
   12dd2:	78cb      	ldrb	r3, [r1, #3]
   12dd4:	061b      	lsls	r3, r3, #24
   12dd6:	4313      	orrs	r3, r2
   12dd8:	d016      	beq.n	12e08 <LorawanMcastProcessPkt+0x9c>
   12dda:	2220      	movs	r2, #32
   12ddc:	3460      	adds	r4, #96	; 0x60
   12dde:	7823      	ldrb	r3, [r4, #0]
   12de0:	9905      	ldr	r1, [sp, #20]
   12de2:	4393      	bics	r3, r2
   12de4:	7023      	strb	r3, [r4, #0]
   12de6:	78b3      	ldrb	r3, [r6, #2]
   12de8:	002a      	movs	r2, r5
   12dea:	40bb      	lsls	r3, r7
   12dec:	7870      	ldrb	r0, [r6, #1]
   12dee:	3a0c      	subs	r2, #12
   12df0:	4303      	orrs	r3, r0
   12df2:	78f0      	ldrb	r0, [r6, #3]
   12df4:	b2d2      	uxtb	r2, r2
   12df6:	0400      	lsls	r0, r0, #16
   12df8:	4303      	orrs	r3, r0
   12dfa:	7930      	ldrb	r0, [r6, #4]
   12dfc:	19c9      	adds	r1, r1, r7
   12dfe:	0600      	lsls	r0, r0, #24
   12e00:	4318      	orrs	r0, r3
   12e02:	4c13      	ldr	r4, [pc, #76]	; (12e50 <LorawanMcastProcessPkt+0xe4>)
   12e04:	003b      	movs	r3, r7
   12e06:	47a0      	blx	r4
   12e08:	4a0b      	ldr	r2, [pc, #44]	; (12e38 <LorawanMcastProcessPkt+0xcc>)
   12e0a:	200e      	movs	r0, #14
   12e0c:	0011      	movs	r1, r2
   12e0e:	3150      	adds	r1, #80	; 0x50
   12e10:	780b      	ldrb	r3, [r1, #0]
   12e12:	001c      	movs	r4, r3
   12e14:	4004      	ands	r4, r0
   12e16:	2c06      	cmp	r4, #6
   12e18:	d107      	bne.n	12e2a <LorawanMcastProcessPkt+0xbe>
   12e1a:	32c8      	adds	r2, #200	; 0xc8
   12e1c:	7812      	ldrb	r2, [r2, #0]
   12e1e:	2a04      	cmp	r2, #4
   12e20:	d103      	bne.n	12e2a <LorawanMcastProcessPkt+0xbe>
   12e22:	4383      	bics	r3, r0
   12e24:	3206      	adds	r2, #6
   12e26:	4313      	orrs	r3, r2
   12e28:	700b      	strb	r3, [r1, #0]
   12e2a:	2000      	movs	r0, #0
   12e2c:	4b09      	ldr	r3, [pc, #36]	; (12e54 <LorawanMcastProcessPkt+0xe8>)
   12e2e:	4798      	blx	r3
   12e30:	0038      	movs	r0, r7
   12e32:	b007      	add	sp, #28
   12e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12e36:	46c0      	nop			; (mov r8, r8)
   12e38:	20001ca4 	.word	0x20001ca4
   12e3c:	0000b745 	.word	0x0000b745
   12e40:	20001eec 	.word	0x20001eec
   12e44:	20001db0 	.word	0x20001db0
   12e48:	00010299 	.word	0x00010299
   12e4c:	20001ee4 	.word	0x20001ee4
   12e50:	0001069d 	.word	0x0001069d
   12e54:	0001119d 	.word	0x0001119d

00012e58 <Lorawan_Pds_fid1_CB>:
   12e58:	4b04      	ldr	r3, [pc, #16]	; (12e6c <Lorawan_Pds_fid1_CB+0x14>)
   12e5a:	0019      	movs	r1, r3
   12e5c:	31fc      	adds	r1, #252	; 0xfc
   12e5e:	6a0a      	ldr	r2, [r1, #32]
   12e60:	3201      	adds	r2, #1
   12e62:	620a      	str	r2, [r1, #32]
   12e64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   12e66:	3201      	adds	r2, #1
   12e68:	655a      	str	r2, [r3, #84]	; 0x54
   12e6a:	4770      	bx	lr
   12e6c:	20001ca4 	.word	0x20001ca4

00012e70 <Lorawan_Pds_fid2_CB>:
   12e70:	2171      	movs	r1, #113	; 0x71
   12e72:	4b06      	ldr	r3, [pc, #24]	; (12e8c <Lorawan_Pds_fid2_CB+0x1c>)
   12e74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   12e76:	3350      	adds	r3, #80	; 0x50
   12e78:	3201      	adds	r2, #1
   12e7a:	609a      	str	r2, [r3, #8]
   12e7c:	781a      	ldrb	r2, [r3, #0]
   12e7e:	400a      	ands	r2, r1
   12e80:	701a      	strb	r2, [r3, #0]
   12e82:	785a      	ldrb	r2, [r3, #1]
   12e84:	3970      	subs	r1, #112	; 0x70
   12e86:	438a      	bics	r2, r1
   12e88:	705a      	strb	r2, [r3, #1]
   12e8a:	4770      	bx	lr
   12e8c:	20001ca4 	.word	0x20001ca4

00012e90 <LORAWAN_TxHandler>:
   12e90:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e92:	b087      	sub	sp, #28
   12e94:	466b      	mov	r3, sp
   12e96:	2501      	movs	r5, #1
   12e98:	4c30      	ldr	r4, [pc, #192]	; (12f5c <LORAWAN_TxHandler+0xcc>)
   12e9a:	701d      	strb	r5, [r3, #0]
   12e9c:	0023      	movs	r3, r4
   12e9e:	466a      	mov	r2, sp
   12ea0:	33b5      	adds	r3, #181	; 0xb5
   12ea2:	781b      	ldrb	r3, [r3, #0]
   12ea4:	4669      	mov	r1, sp
   12ea6:	7053      	strb	r3, [r2, #1]
   12ea8:	0023      	movs	r3, r4
   12eaa:	33b3      	adds	r3, #179	; 0xb3
   12eac:	781b      	ldrb	r3, [r3, #0]
   12eae:	202d      	movs	r0, #45	; 0x2d
   12eb0:	7093      	strb	r3, [r2, #2]
   12eb2:	aa03      	add	r2, sp, #12
   12eb4:	4b2a      	ldr	r3, [pc, #168]	; (12f60 <LORAWAN_TxHandler+0xd0>)
   12eb6:	4798      	blx	r3
   12eb8:	2808      	cmp	r0, #8
   12eba:	d004      	beq.n	12ec6 <LORAWAN_TxHandler+0x36>
   12ebc:	4b29      	ldr	r3, [pc, #164]	; (12f64 <LORAWAN_TxHandler+0xd4>)
   12ebe:	4798      	blx	r3
   12ec0:	2000      	movs	r0, #0
   12ec2:	b007      	add	sp, #28
   12ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12ec6:	0023      	movs	r3, r4
   12ec8:	33c8      	adds	r3, #200	; 0xc8
   12eca:	781b      	ldrb	r3, [r3, #0]
   12ecc:	ae01      	add	r6, sp, #4
   12ece:	2b04      	cmp	r3, #4
   12ed0:	d103      	bne.n	12eda <LORAWAN_TxHandler+0x4a>
   12ed2:	0030      	movs	r0, r6
   12ed4:	4b24      	ldr	r3, [pc, #144]	; (12f68 <LORAWAN_TxHandler+0xd8>)
   12ed6:	7035      	strb	r5, [r6, #0]
   12ed8:	4798      	blx	r3
   12eda:	4b24      	ldr	r3, [pc, #144]	; (12f6c <LORAWAN_TxHandler+0xdc>)
   12edc:	9803      	ldr	r0, [sp, #12]
   12ede:	9904      	ldr	r1, [sp, #16]
   12ee0:	9a05      	ldr	r2, [sp, #20]
   12ee2:	4798      	blx	r3
   12ee4:	0023      	movs	r3, r4
   12ee6:	33d0      	adds	r3, #208	; 0xd0
   12ee8:	681d      	ldr	r5, [r3, #0]
   12eea:	2395      	movs	r3, #149	; 0x95
   12eec:	4f20      	ldr	r7, [pc, #128]	; (12f70 <LORAWAN_TxHandler+0xe0>)
   12eee:	005b      	lsls	r3, r3, #1
   12ef0:	2d00      	cmp	r5, #0
   12ef2:	d023      	beq.n	12f3c <LORAWAN_TxHandler+0xac>
   12ef4:	2201      	movs	r2, #1
   12ef6:	54e2      	strb	r2, [r4, r3]
   12ef8:	7828      	ldrb	r0, [r5, #0]
   12efa:	7a2b      	ldrb	r3, [r5, #8]
   12efc:	1e42      	subs	r2, r0, #1
   12efe:	4190      	sbcs	r0, r2
   12f00:	7869      	ldrb	r1, [r5, #1]
   12f02:	686a      	ldr	r2, [r5, #4]
   12f04:	b2c0      	uxtb	r0, r0
   12f06:	47b8      	blx	r7
   12f08:	0023      	movs	r3, r4
   12f0a:	339a      	adds	r3, #154	; 0x9a
   12f0c:	881b      	ldrh	r3, [r3, #0]
   12f0e:	0030      	movs	r0, r6
   12f10:	7033      	strb	r3, [r6, #0]
   12f12:	4b18      	ldr	r3, [pc, #96]	; (12f74 <LORAWAN_TxHandler+0xe4>)
   12f14:	6073      	str	r3, [r6, #4]
   12f16:	4b18      	ldr	r3, [pc, #96]	; (12f78 <LORAWAN_TxHandler+0xe8>)
   12f18:	4798      	blx	r3
   12f1a:	2800      	cmp	r0, #0
   12f1c:	d114      	bne.n	12f48 <LORAWAN_TxHandler+0xb8>
   12f1e:	0021      	movs	r1, r4
   12f20:	220e      	movs	r2, #14
   12f22:	3150      	adds	r1, #80	; 0x50
   12f24:	780b      	ldrb	r3, [r1, #0]
   12f26:	4393      	bics	r3, r2
   12f28:	001a      	movs	r2, r3
   12f2a:	2302      	movs	r3, #2
   12f2c:	4313      	orrs	r3, r2
   12f2e:	700b      	strb	r3, [r1, #0]
   12f30:	2208      	movs	r2, #8
   12f32:	3460      	adds	r4, #96	; 0x60
   12f34:	7823      	ldrb	r3, [r4, #0]
   12f36:	4393      	bics	r3, r2
   12f38:	7023      	strb	r3, [r4, #0]
   12f3a:	e7c1      	b.n	12ec0 <LORAWAN_TxHandler+0x30>
   12f3c:	54e5      	strb	r5, [r4, r3]
   12f3e:	002a      	movs	r2, r5
   12f40:	002b      	movs	r3, r5
   12f42:	0029      	movs	r1, r5
   12f44:	0028      	movs	r0, r5
   12f46:	e7de      	b.n	12f06 <LORAWAN_TxHandler+0x76>
   12f48:	0022      	movs	r2, r4
   12f4a:	2120      	movs	r1, #32
   12f4c:	3260      	adds	r2, #96	; 0x60
   12f4e:	7813      	ldrb	r3, [r2, #0]
   12f50:	438b      	bics	r3, r1
   12f52:	7013      	strb	r3, [r2, #0]
   12f54:	4b03      	ldr	r3, [pc, #12]	; (12f64 <LORAWAN_TxHandler+0xd4>)
   12f56:	4798      	blx	r3
   12f58:	e7ea      	b.n	12f30 <LORAWAN_TxHandler+0xa0>
   12f5a:	46c0      	nop			; (mov r8, r8)
   12f5c:	20001ca4 	.word	0x20001ca4
   12f60:	0000b321 	.word	0x0000b321
   12f64:	00010639 	.word	0x00010639
   12f68:	00014505 	.word	0x00014505
   12f6c:	0000fe09 	.word	0x0000fe09
   12f70:	00010351 	.word	0x00010351
   12f74:	20001de1 	.word	0x20001de1
   12f78:	00013b25 	.word	0x00013b25

00012f7c <LORAWAN_JoinReqHandler>:
   12f7c:	b530      	push	{r4, r5, lr}
   12f7e:	b087      	sub	sp, #28
   12f80:	466a      	mov	r2, sp
   12f82:	2300      	movs	r3, #0
   12f84:	4c1e      	ldr	r4, [pc, #120]	; (13000 <LORAWAN_JoinReqHandler+0x84>)
   12f86:	7013      	strb	r3, [r2, #0]
   12f88:	0023      	movs	r3, r4
   12f8a:	33b5      	adds	r3, #181	; 0xb5
   12f8c:	781b      	ldrb	r3, [r3, #0]
   12f8e:	4669      	mov	r1, sp
   12f90:	7053      	strb	r3, [r2, #1]
   12f92:	0023      	movs	r3, r4
   12f94:	33b3      	adds	r3, #179	; 0xb3
   12f96:	781b      	ldrb	r3, [r3, #0]
   12f98:	202d      	movs	r0, #45	; 0x2d
   12f9a:	7093      	strb	r3, [r2, #2]
   12f9c:	aa03      	add	r2, sp, #12
   12f9e:	4b19      	ldr	r3, [pc, #100]	; (13004 <LORAWAN_JoinReqHandler+0x88>)
   12fa0:	4798      	blx	r3
   12fa2:	2808      	cmp	r0, #8
   12fa4:	d004      	beq.n	12fb0 <LORAWAN_JoinReqHandler+0x34>
   12fa6:	4b18      	ldr	r3, [pc, #96]	; (13008 <LORAWAN_JoinReqHandler+0x8c>)
   12fa8:	4798      	blx	r3
   12faa:	2000      	movs	r0, #0
   12fac:	b007      	add	sp, #28
   12fae:	bd30      	pop	{r4, r5, pc}
   12fb0:	4b16      	ldr	r3, [pc, #88]	; (1300c <LORAWAN_JoinReqHandler+0x90>)
   12fb2:	9803      	ldr	r0, [sp, #12]
   12fb4:	9904      	ldr	r1, [sp, #16]
   12fb6:	9a05      	ldr	r2, [sp, #20]
   12fb8:	4798      	blx	r3
   12fba:	0023      	movs	r3, r4
   12fbc:	33c8      	adds	r3, #200	; 0xc8
   12fbe:	781b      	ldrb	r3, [r3, #0]
   12fc0:	ad01      	add	r5, sp, #4
   12fc2:	2b04      	cmp	r3, #4
   12fc4:	d104      	bne.n	12fd0 <LORAWAN_JoinReqHandler+0x54>
   12fc6:	3b03      	subs	r3, #3
   12fc8:	702b      	strb	r3, [r5, #0]
   12fca:	0028      	movs	r0, r5
   12fcc:	4b10      	ldr	r3, [pc, #64]	; (13010 <LORAWAN_JoinReqHandler+0x94>)
   12fce:	4798      	blx	r3
   12fd0:	2395      	movs	r3, #149	; 0x95
   12fd2:	2200      	movs	r2, #0
   12fd4:	005b      	lsls	r3, r3, #1
   12fd6:	54e2      	strb	r2, [r4, r3]
   12fd8:	4b0e      	ldr	r3, [pc, #56]	; (13014 <LORAWAN_JoinReqHandler+0x98>)
   12fda:	4798      	blx	r3
   12fdc:	4b0e      	ldr	r3, [pc, #56]	; (13018 <LORAWAN_JoinReqHandler+0x9c>)
   12fde:	7028      	strb	r0, [r5, #0]
   12fe0:	606b      	str	r3, [r5, #4]
   12fe2:	0028      	movs	r0, r5
   12fe4:	4b0d      	ldr	r3, [pc, #52]	; (1301c <LORAWAN_JoinReqHandler+0xa0>)
   12fe6:	4798      	blx	r3
   12fe8:	2800      	cmp	r0, #0
   12fea:	d1dc      	bne.n	12fa6 <LORAWAN_JoinReqHandler+0x2a>
   12fec:	220e      	movs	r2, #14
   12fee:	3450      	adds	r4, #80	; 0x50
   12ff0:	7823      	ldrb	r3, [r4, #0]
   12ff2:	4393      	bics	r3, r2
   12ff4:	001a      	movs	r2, r3
   12ff6:	2302      	movs	r3, #2
   12ff8:	4313      	orrs	r3, r2
   12ffa:	7023      	strb	r3, [r4, #0]
   12ffc:	e7d5      	b.n	12faa <LORAWAN_JoinReqHandler+0x2e>
   12ffe:	46c0      	nop			; (mov r8, r8)
   13000:	20001ca4 	.word	0x20001ca4
   13004:	0000b321 	.word	0x0000b321
   13008:	0000f8c9 	.word	0x0000f8c9
   1300c:	0000fe09 	.word	0x0000fe09
   13010:	00014505 	.word	0x00014505
   13014:	0000fc81 	.word	0x0000fc81
   13018:	20001dd1 	.word	0x20001dd1
   1301c:	00013b25 	.word	0x00013b25

00013020 <LORAWAN_RxHandler>:
   13020:	b513      	push	{r0, r1, r4, lr}
   13022:	4b0c      	ldr	r3, [pc, #48]	; (13054 <LORAWAN_RxHandler+0x34>)
   13024:	781b      	ldrb	r3, [r3, #0]
   13026:	2b08      	cmp	r3, #8
   13028:	d011      	beq.n	1304e <LORAWAN_RxHandler+0x2e>
   1302a:	2b10      	cmp	r3, #16
   1302c:	d001      	beq.n	13032 <LORAWAN_RxHandler+0x12>
   1302e:	2b01      	cmp	r3, #1
   13030:	d10b      	bne.n	1304a <LORAWAN_RxHandler+0x2a>
   13032:	466b      	mov	r3, sp
   13034:	1c9c      	adds	r4, r3, #2
   13036:	0021      	movs	r1, r4
   13038:	a801      	add	r0, sp, #4
   1303a:	4b07      	ldr	r3, [pc, #28]	; (13058 <LORAWAN_RxHandler+0x38>)
   1303c:	4798      	blx	r3
   1303e:	9801      	ldr	r0, [sp, #4]
   13040:	2800      	cmp	r0, #0
   13042:	d002      	beq.n	1304a <LORAWAN_RxHandler+0x2a>
   13044:	7821      	ldrb	r1, [r4, #0]
   13046:	4b05      	ldr	r3, [pc, #20]	; (1305c <LORAWAN_RxHandler+0x3c>)
   13048:	4798      	blx	r3
   1304a:	2000      	movs	r0, #0
   1304c:	bd16      	pop	{r1, r2, r4, pc}
   1304e:	4b04      	ldr	r3, [pc, #16]	; (13060 <LORAWAN_RxHandler+0x40>)
   13050:	4798      	blx	r3
   13052:	e7fa      	b.n	1304a <LORAWAN_RxHandler+0x2a>
   13054:	20001dd0 	.word	0x20001dd0
   13058:	00013cf9 	.word	0x00013cf9
   1305c:	00011795 	.word	0x00011795
   13060:	000110fd 	.word	0x000110fd

00013064 <LORAWAN_PostTask>:
   13064:	b510      	push	{r4, lr}
   13066:	4b08      	ldr	r3, [pc, #32]	; (13088 <LORAWAN_PostTask+0x24>)
   13068:	0004      	movs	r4, r0
   1306a:	4798      	blx	r3
   1306c:	2201      	movs	r2, #1
   1306e:	40a2      	lsls	r2, r4
   13070:	4906      	ldr	r1, [pc, #24]	; (1308c <LORAWAN_PostTask+0x28>)
   13072:	780b      	ldrb	r3, [r1, #0]
   13074:	4313      	orrs	r3, r2
   13076:	b2db      	uxtb	r3, r3
   13078:	700b      	strb	r3, [r1, #0]
   1307a:	4b05      	ldr	r3, [pc, #20]	; (13090 <LORAWAN_PostTask+0x2c>)
   1307c:	4798      	blx	r3
   1307e:	2004      	movs	r0, #4
   13080:	4b04      	ldr	r3, [pc, #16]	; (13094 <LORAWAN_PostTask+0x30>)
   13082:	4798      	blx	r3
   13084:	bd10      	pop	{r4, pc}
   13086:	46c0      	nop			; (mov r8, r8)
   13088:	000069ed 	.word	0x000069ed
   1308c:	20001098 	.word	0x20001098
   13090:	000069f9 	.word	0x000069f9
   13094:	0000cad9 	.word	0x0000cad9

00013098 <LORAWAN_TaskHandler>:
   13098:	b570      	push	{r4, r5, r6, lr}
   1309a:	2601      	movs	r6, #1
   1309c:	4d0e      	ldr	r5, [pc, #56]	; (130d8 <LORAWAN_TaskHandler+0x40>)
   1309e:	e015      	b.n	130cc <LORAWAN_TaskHandler+0x34>
   130a0:	2400      	movs	r4, #0
   130a2:	782b      	ldrb	r3, [r5, #0]
   130a4:	4123      	asrs	r3, r4
   130a6:	4233      	tst	r3, r6
   130a8:	d00d      	beq.n	130c6 <LORAWAN_TaskHandler+0x2e>
   130aa:	4b0c      	ldr	r3, [pc, #48]	; (130dc <LORAWAN_TaskHandler+0x44>)
   130ac:	4798      	blx	r3
   130ae:	0032      	movs	r2, r6
   130b0:	40a2      	lsls	r2, r4
   130b2:	782b      	ldrb	r3, [r5, #0]
   130b4:	00a4      	lsls	r4, r4, #2
   130b6:	4393      	bics	r3, r2
   130b8:	702b      	strb	r3, [r5, #0]
   130ba:	4b09      	ldr	r3, [pc, #36]	; (130e0 <LORAWAN_TaskHandler+0x48>)
   130bc:	4798      	blx	r3
   130be:	4b09      	ldr	r3, [pc, #36]	; (130e4 <LORAWAN_TaskHandler+0x4c>)
   130c0:	58e3      	ldr	r3, [r4, r3]
   130c2:	4798      	blx	r3
   130c4:	e7ea      	b.n	1309c <LORAWAN_TaskHandler+0x4>
   130c6:	3401      	adds	r4, #1
   130c8:	2c03      	cmp	r4, #3
   130ca:	d1ea      	bne.n	130a2 <LORAWAN_TaskHandler+0xa>
   130cc:	7828      	ldrb	r0, [r5, #0]
   130ce:	b2c0      	uxtb	r0, r0
   130d0:	2800      	cmp	r0, #0
   130d2:	d1e5      	bne.n	130a0 <LORAWAN_TaskHandler+0x8>
   130d4:	bd70      	pop	{r4, r5, r6, pc}
   130d6:	46c0      	nop			; (mov r8, r8)
   130d8:	20001098 	.word	0x20001098
   130dc:	000069ed 	.word	0x000069ed
   130e0:	000069f9 	.word	0x000069f9
   130e4:	0001f744 	.word	0x0001f744

000130e8 <RADIO_GetAttr>:
   130e8:	b510      	push	{r4, lr}
   130ea:	000b      	movs	r3, r1
   130ec:	281f      	cmp	r0, #31
   130ee:	d900      	bls.n	130f2 <RADIO_GetAttr+0xa>
   130f0:	e067      	b.n	131c2 <RADIO_GetAttr+0xda>
   130f2:	f001 fd29 	bl	14b48 <__gnu_thumb1_case_uqi>
   130f6:	1410      	.short	0x1410
   130f8:	66201c19 	.word	0x66201c19
   130fc:	312e2a27 	.word	0x312e2a27
   13100:	3d3a3734 	.word	0x3d3a3734
   13104:	46434054 	.word	0x46434054
   13108:	66245149 	.word	0x66245149
   1310c:	66666659 	.word	0x66666659
   13110:	5c666617 	.word	0x5c666617
   13114:	6360      	.short	0x6360
   13116:	4a2c      	ldr	r2, [pc, #176]	; (131c8 <RADIO_GetAttr+0xe0>)
   13118:	7e12      	ldrb	r2, [r2, #24]
   1311a:	701a      	strb	r2, [r3, #0]
   1311c:	e002      	b.n	13124 <RADIO_GetAttr+0x3c>
   1311e:	4a2a      	ldr	r2, [pc, #168]	; (131c8 <RADIO_GetAttr+0xe0>)
   13120:	6812      	ldr	r2, [r2, #0]
   13122:	601a      	str	r2, [r3, #0]
   13124:	2000      	movs	r0, #0
   13126:	bd10      	pop	{r4, pc}
   13128:	4a27      	ldr	r2, [pc, #156]	; (131c8 <RADIO_GetAttr+0xe0>)
   1312a:	6852      	ldr	r2, [r2, #4]
   1312c:	e7f9      	b.n	13122 <RADIO_GetAttr+0x3a>
   1312e:	4a26      	ldr	r2, [pc, #152]	; (131c8 <RADIO_GetAttr+0xe0>)
   13130:	8a92      	ldrh	r2, [r2, #20]
   13132:	801a      	strh	r2, [r3, #0]
   13134:	e7f6      	b.n	13124 <RADIO_GetAttr+0x3c>
   13136:	4a24      	ldr	r2, [pc, #144]	; (131c8 <RADIO_GetAttr+0xe0>)
   13138:	3203      	adds	r2, #3
   1313a:	7fd2      	ldrb	r2, [r2, #31]
   1313c:	e7ed      	b.n	1311a <RADIO_GetAttr+0x32>
   1313e:	4a22      	ldr	r2, [pc, #136]	; (131c8 <RADIO_GetAttr+0xe0>)
   13140:	3204      	adds	r2, #4
   13142:	e7fa      	b.n	1313a <RADIO_GetAttr+0x52>
   13144:	4a20      	ldr	r2, [pc, #128]	; (131c8 <RADIO_GetAttr+0xe0>)
   13146:	3206      	adds	r2, #6
   13148:	e7f7      	b.n	1313a <RADIO_GetAttr+0x52>
   1314a:	4a1f      	ldr	r2, [pc, #124]	; (131c8 <RADIO_GetAttr+0xe0>)
   1314c:	3236      	adds	r2, #54	; 0x36
   1314e:	7812      	ldrb	r2, [r2, #0]
   13150:	e7e3      	b.n	1311a <RADIO_GetAttr+0x32>
   13152:	4a1d      	ldr	r2, [pc, #116]	; (131c8 <RADIO_GetAttr+0xe0>)
   13154:	3205      	adds	r2, #5
   13156:	e7f0      	b.n	1313a <RADIO_GetAttr+0x52>
   13158:	4a1b      	ldr	r2, [pc, #108]	; (131c8 <RADIO_GetAttr+0xe0>)
   1315a:	3234      	adds	r2, #52	; 0x34
   1315c:	e7f7      	b.n	1314e <RADIO_GetAttr+0x66>
   1315e:	4a1a      	ldr	r2, [pc, #104]	; (131c8 <RADIO_GetAttr+0xe0>)
   13160:	8ad2      	ldrh	r2, [r2, #22]
   13162:	e7e6      	b.n	13132 <RADIO_GetAttr+0x4a>
   13164:	4a18      	ldr	r2, [pc, #96]	; (131c8 <RADIO_GetAttr+0xe0>)
   13166:	3233      	adds	r2, #51	; 0x33
   13168:	e7f1      	b.n	1314e <RADIO_GetAttr+0x66>
   1316a:	4a17      	ldr	r2, [pc, #92]	; (131c8 <RADIO_GetAttr+0xe0>)
   1316c:	68d2      	ldr	r2, [r2, #12]
   1316e:	e7d8      	b.n	13122 <RADIO_GetAttr+0x3a>
   13170:	4a15      	ldr	r2, [pc, #84]	; (131c8 <RADIO_GetAttr+0xe0>)
   13172:	6892      	ldr	r2, [r2, #8]
   13174:	e7d5      	b.n	13122 <RADIO_GetAttr+0x3a>
   13176:	4a14      	ldr	r2, [pc, #80]	; (131c8 <RADIO_GetAttr+0xe0>)
   13178:	3237      	adds	r2, #55	; 0x37
   1317a:	e7e8      	b.n	1314e <RADIO_GetAttr+0x66>
   1317c:	4a12      	ldr	r2, [pc, #72]	; (131c8 <RADIO_GetAttr+0xe0>)
   1317e:	3238      	adds	r2, #56	; 0x38
   13180:	e7e5      	b.n	1314e <RADIO_GetAttr+0x66>
   13182:	4a11      	ldr	r2, [pc, #68]	; (131c8 <RADIO_GetAttr+0xe0>)
   13184:	3239      	adds	r2, #57	; 0x39
   13186:	e7e2      	b.n	1314e <RADIO_GetAttr+0x66>
   13188:	4a0f      	ldr	r2, [pc, #60]	; (131c8 <RADIO_GetAttr+0xe0>)
   1318a:	4910      	ldr	r1, [pc, #64]	; (131cc <RADIO_GetAttr+0xe4>)
   1318c:	3202      	adds	r2, #2
   1318e:	7fd2      	ldrb	r2, [r2, #31]
   13190:	0018      	movs	r0, r3
   13192:	4b0f      	ldr	r3, [pc, #60]	; (131d0 <RADIO_GetAttr+0xe8>)
   13194:	4798      	blx	r3
   13196:	e7c5      	b.n	13124 <RADIO_GetAttr+0x3c>
   13198:	4a0b      	ldr	r2, [pc, #44]	; (131c8 <RADIO_GetAttr+0xe0>)
   1319a:	3202      	adds	r2, #2
   1319c:	e7cd      	b.n	1313a <RADIO_GetAttr+0x52>
   1319e:	4a0a      	ldr	r2, [pc, #40]	; (131c8 <RADIO_GetAttr+0xe0>)
   131a0:	3232      	adds	r2, #50	; 0x32
   131a2:	7812      	ldrb	r2, [r2, #0]
   131a4:	b252      	sxtb	r2, r2
   131a6:	e7b8      	b.n	1311a <RADIO_GetAttr+0x32>
   131a8:	4a07      	ldr	r2, [pc, #28]	; (131c8 <RADIO_GetAttr+0xe0>)
   131aa:	3235      	adds	r2, #53	; 0x35
   131ac:	e7cf      	b.n	1314e <RADIO_GetAttr+0x66>
   131ae:	4906      	ldr	r1, [pc, #24]	; (131c8 <RADIO_GetAttr+0xe0>)
   131b0:	2206      	movs	r2, #6
   131b2:	313c      	adds	r1, #60	; 0x3c
   131b4:	e7ec      	b.n	13190 <RADIO_GetAttr+0xa8>
   131b6:	4a04      	ldr	r2, [pc, #16]	; (131c8 <RADIO_GetAttr+0xe0>)
   131b8:	3254      	adds	r2, #84	; 0x54
   131ba:	e7c8      	b.n	1314e <RADIO_GetAttr+0x66>
   131bc:	4a02      	ldr	r2, [pc, #8]	; (131c8 <RADIO_GetAttr+0xe0>)
   131be:	3256      	adds	r2, #86	; 0x56
   131c0:	e7ef      	b.n	131a2 <RADIO_GetAttr+0xba>
   131c2:	2005      	movs	r0, #5
   131c4:	e7af      	b.n	13126 <RADIO_GetAttr+0x3e>
   131c6:	46c0      	nop			; (mov r8, r8)
   131c8:	20001ad0 	.word	0x20001ad0
   131cc:	20001ae9 	.word	0x20001ae9
   131d0:	00018195 	.word	0x00018195

000131d4 <RADIO_SetAttr>:
   131d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   131d6:	4b77      	ldr	r3, [pc, #476]	; (133b4 <RADIO_SetAttr+0x1e0>)
   131d8:	b085      	sub	sp, #20
   131da:	0006      	movs	r6, r0
   131dc:	000d      	movs	r5, r1
   131de:	4798      	blx	r3
   131e0:	2404      	movs	r4, #4
   131e2:	2801      	cmp	r0, #1
   131e4:	d11a      	bne.n	1321c <RADIO_SetAttr+0x48>
   131e6:	2e1d      	cmp	r6, #29
   131e8:	d900      	bls.n	131ec <RADIO_SetAttr+0x18>
   131ea:	e0e0      	b.n	133ae <RADIO_SetAttr+0x1da>
   131ec:	0030      	movs	r0, r6
   131ee:	f001 fcab 	bl	14b48 <__gnu_thumb1_case_uqi>
   131f2:	514d      	.short	0x514d
   131f4:	de6d6965 	.word	0xde6d6965
   131f8:	8f8b8179 	.word	0x8f8b8179
   131fc:	a7a49b97 	.word	0xa7a49b97
   13200:	bcb3abde 	.word	0xbcb3abde
   13204:	de72cdc5 	.word	0xde72cdc5
   13208:	dededed5 	.word	0xdededed5
   1320c:	18dede0f 	.word	0x18dede0f
   13210:	2403      	movs	r4, #3
   13212:	2d00      	cmp	r5, #0
   13214:	d002      	beq.n	1321c <RADIO_SetAttr+0x48>
   13216:	4b68      	ldr	r3, [pc, #416]	; (133b8 <RADIO_SetAttr+0x1e4>)
   13218:	611d      	str	r5, [r3, #16]
   1321a:	2400      	movs	r4, #0
   1321c:	0020      	movs	r0, r4
   1321e:	b005      	add	sp, #20
   13220:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13222:	796e      	ldrb	r6, [r5, #5]
   13224:	2e00      	cmp	r6, #0
   13226:	d109      	bne.n	1323c <RADIO_SetAttr+0x68>
   13228:	4b63      	ldr	r3, [pc, #396]	; (133b8 <RADIO_SetAttr+0x1e4>)
   1322a:	001a      	movs	r2, r3
   1322c:	649e      	str	r6, [r3, #72]	; 0x48
   1322e:	879e      	strh	r6, [r3, #60]	; 0x3c
   13230:	87de      	strh	r6, [r3, #62]	; 0x3e
   13232:	3240      	adds	r2, #64	; 0x40
   13234:	3341      	adds	r3, #65	; 0x41
   13236:	7016      	strb	r6, [r2, #0]
   13238:	701e      	strb	r6, [r3, #0]
   1323a:	e7ee      	b.n	1321a <RADIO_SetAttr+0x46>
   1323c:	882b      	ldrh	r3, [r5, #0]
   1323e:	2403      	movs	r4, #3
   13240:	9301      	str	r3, [sp, #4]
   13242:	2b00      	cmp	r3, #0
   13244:	d0ea      	beq.n	1321c <RADIO_SetAttr+0x48>
   13246:	792f      	ldrb	r7, [r5, #4]
   13248:	2f00      	cmp	r7, #0
   1324a:	d0e7      	beq.n	1321c <RADIO_SetAttr+0x48>
   1324c:	20fa      	movs	r0, #250	; 0xfa
   1324e:	0080      	lsls	r0, r0, #2
   13250:	0039      	movs	r1, r7
   13252:	4358      	muls	r0, r3
   13254:	4b59      	ldr	r3, [pc, #356]	; (133bc <RADIO_SetAttr+0x1e8>)
   13256:	4798      	blx	r3
   13258:	4b59      	ldr	r3, [pc, #356]	; (133c0 <RADIO_SetAttr+0x1ec>)
   1325a:	4798      	blx	r3
   1325c:	4959      	ldr	r1, [pc, #356]	; (133c4 <RADIO_SetAttr+0x1f0>)
   1325e:	9002      	str	r0, [sp, #8]
   13260:	4b59      	ldr	r3, [pc, #356]	; (133c8 <RADIO_SetAttr+0x1f4>)
   13262:	4798      	blx	r3
   13264:	9003      	str	r0, [sp, #12]
   13266:	2800      	cmp	r0, #0
   13268:	d1d8      	bne.n	1321c <RADIO_SetAttr+0x48>
   1326a:	2302      	movs	r3, #2
   1326c:	5eed      	ldrsh	r5, [r5, r3]
   1326e:	9802      	ldr	r0, [sp, #8]
   13270:	4b56      	ldr	r3, [pc, #344]	; (133cc <RADIO_SetAttr+0x1f8>)
   13272:	4798      	blx	r3
   13274:	466b      	mov	r3, sp
   13276:	4c50      	ldr	r4, [pc, #320]	; (133b8 <RADIO_SetAttr+0x1e4>)
   13278:	889b      	ldrh	r3, [r3, #4]
   1327a:	64a0      	str	r0, [r4, #72]	; 0x48
   1327c:	87a3      	strh	r3, [r4, #60]	; 0x3c
   1327e:	0023      	movs	r3, r4
   13280:	87e5      	strh	r5, [r4, #62]	; 0x3e
   13282:	3340      	adds	r3, #64	; 0x40
   13284:	3441      	adds	r4, #65	; 0x41
   13286:	701f      	strb	r7, [r3, #0]
   13288:	7026      	strb	r6, [r4, #0]
   1328a:	e7c6      	b.n	1321a <RADIO_SetAttr+0x46>
   1328c:	782a      	ldrb	r2, [r5, #0]
   1328e:	4b4a      	ldr	r3, [pc, #296]	; (133b8 <RADIO_SetAttr+0x1e4>)
   13290:	761a      	strb	r2, [r3, #24]
   13292:	e7c2      	b.n	1321a <RADIO_SetAttr+0x46>
   13294:	4a4e      	ldr	r2, [pc, #312]	; (133d0 <RADIO_SetAttr+0x1fc>)
   13296:	682b      	ldr	r3, [r5, #0]
   13298:	1899      	adds	r1, r3, r2
   1329a:	4a4e      	ldr	r2, [pc, #312]	; (133d4 <RADIO_SetAttr+0x200>)
   1329c:	4291      	cmp	r1, r2
   1329e:	d90a      	bls.n	132b6 <RADIO_SetAttr+0xe2>
   132a0:	4a4d      	ldr	r2, [pc, #308]	; (133d8 <RADIO_SetAttr+0x204>)
   132a2:	494e      	ldr	r1, [pc, #312]	; (133dc <RADIO_SetAttr+0x208>)
   132a4:	189a      	adds	r2, r3, r2
   132a6:	428a      	cmp	r2, r1
   132a8:	d905      	bls.n	132b6 <RADIO_SetAttr+0xe2>
   132aa:	4a4d      	ldr	r2, [pc, #308]	; (133e0 <RADIO_SetAttr+0x20c>)
   132ac:	494d      	ldr	r1, [pc, #308]	; (133e4 <RADIO_SetAttr+0x210>)
   132ae:	189a      	adds	r2, r3, r2
   132b0:	2405      	movs	r4, #5
   132b2:	428a      	cmp	r2, r1
   132b4:	d8b2      	bhi.n	1321c <RADIO_SetAttr+0x48>
   132b6:	4a40      	ldr	r2, [pc, #256]	; (133b8 <RADIO_SetAttr+0x1e4>)
   132b8:	6013      	str	r3, [r2, #0]
   132ba:	e7ae      	b.n	1321a <RADIO_SetAttr+0x46>
   132bc:	682a      	ldr	r2, [r5, #0]
   132be:	4b3e      	ldr	r3, [pc, #248]	; (133b8 <RADIO_SetAttr+0x1e4>)
   132c0:	605a      	str	r2, [r3, #4]
   132c2:	e7aa      	b.n	1321a <RADIO_SetAttr+0x46>
   132c4:	882a      	ldrh	r2, [r5, #0]
   132c6:	4b3c      	ldr	r3, [pc, #240]	; (133b8 <RADIO_SetAttr+0x1e4>)
   132c8:	829a      	strh	r2, [r3, #20]
   132ca:	e7a6      	b.n	1321a <RADIO_SetAttr+0x46>
   132cc:	4b3a      	ldr	r3, [pc, #232]	; (133b8 <RADIO_SetAttr+0x1e4>)
   132ce:	782a      	ldrb	r2, [r5, #0]
   132d0:	3303      	adds	r3, #3
   132d2:	77da      	strb	r2, [r3, #31]
   132d4:	e7a1      	b.n	1321a <RADIO_SetAttr+0x46>
   132d6:	782a      	ldrb	r2, [r5, #0]
   132d8:	2405      	movs	r4, #5
   132da:	2a01      	cmp	r2, #1
   132dc:	d89e      	bhi.n	1321c <RADIO_SetAttr+0x48>
   132de:	4b36      	ldr	r3, [pc, #216]	; (133b8 <RADIO_SetAttr+0x1e4>)
   132e0:	3304      	adds	r3, #4
   132e2:	e7f6      	b.n	132d2 <RADIO_SetAttr+0xfe>
   132e4:	782a      	ldrb	r2, [r5, #0]
   132e6:	2405      	movs	r4, #5
   132e8:	2a01      	cmp	r2, #1
   132ea:	d900      	bls.n	132ee <RADIO_SetAttr+0x11a>
   132ec:	e796      	b.n	1321c <RADIO_SetAttr+0x48>
   132ee:	4b32      	ldr	r3, [pc, #200]	; (133b8 <RADIO_SetAttr+0x1e4>)
   132f0:	3306      	adds	r3, #6
   132f2:	e7ee      	b.n	132d2 <RADIO_SetAttr+0xfe>
   132f4:	782a      	ldrb	r2, [r5, #0]
   132f6:	2405      	movs	r4, #5
   132f8:	1fd3      	subs	r3, r2, #7
   132fa:	2b02      	cmp	r3, #2
   132fc:	d900      	bls.n	13300 <RADIO_SetAttr+0x12c>
   132fe:	e78d      	b.n	1321c <RADIO_SetAttr+0x48>
   13300:	4b2d      	ldr	r3, [pc, #180]	; (133b8 <RADIO_SetAttr+0x1e4>)
   13302:	3336      	adds	r3, #54	; 0x36
   13304:	701a      	strb	r2, [r3, #0]
   13306:	e788      	b.n	1321a <RADIO_SetAttr+0x46>
   13308:	4b2b      	ldr	r3, [pc, #172]	; (133b8 <RADIO_SetAttr+0x1e4>)
   1330a:	782a      	ldrb	r2, [r5, #0]
   1330c:	3305      	adds	r3, #5
   1330e:	e7e0      	b.n	132d2 <RADIO_SetAttr+0xfe>
   13310:	782a      	ldrb	r2, [r5, #0]
   13312:	2405      	movs	r4, #5
   13314:	2a01      	cmp	r2, #1
   13316:	d900      	bls.n	1331a <RADIO_SetAttr+0x146>
   13318:	e780      	b.n	1321c <RADIO_SetAttr+0x48>
   1331a:	4b27      	ldr	r3, [pc, #156]	; (133b8 <RADIO_SetAttr+0x1e4>)
   1331c:	3334      	adds	r3, #52	; 0x34
   1331e:	e7f1      	b.n	13304 <RADIO_SetAttr+0x130>
   13320:	882a      	ldrh	r2, [r5, #0]
   13322:	4b25      	ldr	r3, [pc, #148]	; (133b8 <RADIO_SetAttr+0x1e4>)
   13324:	82da      	strh	r2, [r3, #22]
   13326:	e778      	b.n	1321a <RADIO_SetAttr+0x46>
   13328:	782a      	ldrb	r2, [r5, #0]
   1332a:	2405      	movs	r4, #5
   1332c:	1e53      	subs	r3, r2, #1
   1332e:	2b03      	cmp	r3, #3
   13330:	d900      	bls.n	13334 <RADIO_SetAttr+0x160>
   13332:	e773      	b.n	1321c <RADIO_SetAttr+0x48>
   13334:	4b20      	ldr	r3, [pc, #128]	; (133b8 <RADIO_SetAttr+0x1e4>)
   13336:	3333      	adds	r3, #51	; 0x33
   13338:	e7e4      	b.n	13304 <RADIO_SetAttr+0x130>
   1333a:	4b1f      	ldr	r3, [pc, #124]	; (133b8 <RADIO_SetAttr+0x1e4>)
   1333c:	682a      	ldr	r2, [r5, #0]
   1333e:	60da      	str	r2, [r3, #12]
   13340:	682a      	ldr	r2, [r5, #0]
   13342:	4b1d      	ldr	r3, [pc, #116]	; (133b8 <RADIO_SetAttr+0x1e4>)
   13344:	609a      	str	r2, [r3, #8]
   13346:	e768      	b.n	1321a <RADIO_SetAttr+0x46>
   13348:	782a      	ldrb	r2, [r5, #0]
   1334a:	2405      	movs	r4, #5
   1334c:	2a03      	cmp	r2, #3
   1334e:	d900      	bls.n	13352 <RADIO_SetAttr+0x17e>
   13350:	e764      	b.n	1321c <RADIO_SetAttr+0x48>
   13352:	4b19      	ldr	r3, [pc, #100]	; (133b8 <RADIO_SetAttr+0x1e4>)
   13354:	3337      	adds	r3, #55	; 0x37
   13356:	e7d5      	b.n	13304 <RADIO_SetAttr+0x130>
   13358:	782a      	ldrb	r2, [r5, #0]
   1335a:	2405      	movs	r4, #5
   1335c:	1e53      	subs	r3, r2, #1
   1335e:	2b16      	cmp	r3, #22
   13360:	d900      	bls.n	13364 <RADIO_SetAttr+0x190>
   13362:	e75b      	b.n	1321c <RADIO_SetAttr+0x48>
   13364:	4b14      	ldr	r3, [pc, #80]	; (133b8 <RADIO_SetAttr+0x1e4>)
   13366:	3338      	adds	r3, #56	; 0x38
   13368:	e7cc      	b.n	13304 <RADIO_SetAttr+0x130>
   1336a:	782a      	ldrb	r2, [r5, #0]
   1336c:	2405      	movs	r4, #5
   1336e:	1e53      	subs	r3, r2, #1
   13370:	2b16      	cmp	r3, #22
   13372:	d900      	bls.n	13376 <RADIO_SetAttr+0x1a2>
   13374:	e752      	b.n	1321c <RADIO_SetAttr+0x48>
   13376:	4b10      	ldr	r3, [pc, #64]	; (133b8 <RADIO_SetAttr+0x1e4>)
   13378:	3339      	adds	r3, #57	; 0x39
   1337a:	e7c3      	b.n	13304 <RADIO_SetAttr+0x130>
   1337c:	4b0e      	ldr	r3, [pc, #56]	; (133b8 <RADIO_SetAttr+0x1e4>)
   1337e:	0029      	movs	r1, r5
   13380:	3302      	adds	r3, #2
   13382:	7fda      	ldrb	r2, [r3, #31]
   13384:	4818      	ldr	r0, [pc, #96]	; (133e8 <RADIO_SetAttr+0x214>)
   13386:	4b19      	ldr	r3, [pc, #100]	; (133ec <RADIO_SetAttr+0x218>)
   13388:	4798      	blx	r3
   1338a:	e746      	b.n	1321a <RADIO_SetAttr+0x46>
   1338c:	782b      	ldrb	r3, [r5, #0]
   1338e:	1c1a      	adds	r2, r3, #0
   13390:	2b08      	cmp	r3, #8
   13392:	d900      	bls.n	13396 <RADIO_SetAttr+0x1c2>
   13394:	2208      	movs	r2, #8
   13396:	4b08      	ldr	r3, [pc, #32]	; (133b8 <RADIO_SetAttr+0x1e4>)
   13398:	3302      	adds	r3, #2
   1339a:	e79a      	b.n	132d2 <RADIO_SetAttr+0xfe>
   1339c:	2405      	movs	r4, #5
   1339e:	782a      	ldrb	r2, [r5, #0]
   133a0:	1fd3      	subs	r3, r2, #7
   133a2:	42a3      	cmp	r3, r4
   133a4:	d900      	bls.n	133a8 <RADIO_SetAttr+0x1d4>
   133a6:	e739      	b.n	1321c <RADIO_SetAttr+0x48>
   133a8:	4b03      	ldr	r3, [pc, #12]	; (133b8 <RADIO_SetAttr+0x1e4>)
   133aa:	3335      	adds	r3, #53	; 0x35
   133ac:	e7aa      	b.n	13304 <RADIO_SetAttr+0x130>
   133ae:	2405      	movs	r4, #5
   133b0:	e734      	b.n	1321c <RADIO_SetAttr+0x48>
   133b2:	46c0      	nop			; (mov r8, r8)
   133b4:	00013b09 	.word	0x00013b09
   133b8:	20001ad0 	.word	0x20001ad0
   133bc:	00014c85 	.word	0x00014c85
   133c0:	00015e11 	.word	0x00015e11
   133c4:	43fa0000 	.word	0x43fa0000
   133c8:	00014e81 	.word	0x00014e81
   133cc:	00014f65 	.word	0x00014f65
   133d0:	f7d58bc0 	.word	0xf7d58bc0
   133d4:	0243d580 	.word	0x0243d580
   133d8:	e78fe580 	.word	0xe78fe580
   133dc:	06dac2c0 	.word	0x06dac2c0
   133e0:	cc9eec80 	.word	0xcc9eec80
   133e4:	096ae380 	.word	0x096ae380
   133e8:	20001ae9 	.word	0x20001ae9
   133ec:	00018195 	.word	0x00018195

000133f0 <RADIO_Init>:
   133f0:	b510      	push	{r4, lr}
   133f2:	4b0c      	ldr	r3, [pc, #48]	; (13424 <RADIO_Init+0x34>)
   133f4:	4798      	blx	r3
   133f6:	4b0c      	ldr	r3, [pc, #48]	; (13428 <RADIO_Init+0x38>)
   133f8:	201f      	movs	r0, #31
   133fa:	4798      	blx	r3
   133fc:	4c0b      	ldr	r4, [pc, #44]	; (1342c <RADIO_Init+0x3c>)
   133fe:	490c      	ldr	r1, [pc, #48]	; (13430 <RADIO_Init+0x40>)
   13400:	2001      	movs	r0, #1
   13402:	47a0      	blx	r4
   13404:	490b      	ldr	r1, [pc, #44]	; (13434 <RADIO_Init+0x44>)
   13406:	2002      	movs	r0, #2
   13408:	47a0      	blx	r4
   1340a:	490b      	ldr	r1, [pc, #44]	; (13438 <RADIO_Init+0x48>)
   1340c:	2004      	movs	r0, #4
   1340e:	47a0      	blx	r4
   13410:	490a      	ldr	r1, [pc, #40]	; (1343c <RADIO_Init+0x4c>)
   13412:	2008      	movs	r0, #8
   13414:	47a0      	blx	r4
   13416:	490a      	ldr	r1, [pc, #40]	; (13440 <RADIO_Init+0x50>)
   13418:	2010      	movs	r0, #16
   1341a:	47a0      	blx	r4
   1341c:	4909      	ldr	r1, [pc, #36]	; (13444 <RADIO_Init+0x54>)
   1341e:	2020      	movs	r0, #32
   13420:	47a0      	blx	r4
   13422:	bd10      	pop	{r4, pc}
   13424:	00014311 	.word	0x00014311
   13428:	00013b15 	.word	0x00013b15
   1342c:	00006861 	.word	0x00006861
   13430:	000138a1 	.word	0x000138a1
   13434:	00013919 	.word	0x00013919
   13438:	00013989 	.word	0x00013989
   1343c:	000139d9 	.word	0x000139d9
   13440:	00013a01 	.word	0x00013a01
   13444:	00013a29 	.word	0x00013a29

00013448 <Radio_WriteFrequency>:
   13448:	b570      	push	{r4, r5, r6, lr}
   1344a:	490d      	ldr	r1, [pc, #52]	; (13480 <Radio_WriteFrequency+0x38>)
   1344c:	4d0d      	ldr	r5, [pc, #52]	; (13484 <Radio_WriteFrequency+0x3c>)
   1344e:	0006      	movs	r6, r0
   13450:	47a8      	blx	r5
   13452:	4b0d      	ldr	r3, [pc, #52]	; (13488 <Radio_WriteFrequency+0x40>)
   13454:	0004      	movs	r4, r0
   13456:	490a      	ldr	r1, [pc, #40]	; (13480 <Radio_WriteFrequency+0x38>)
   13458:	0030      	movs	r0, r6
   1345a:	4798      	blx	r3
   1345c:	0208      	lsls	r0, r1, #8
   1345e:	4908      	ldr	r1, [pc, #32]	; (13480 <Radio_WriteFrequency+0x38>)
   13460:	47a8      	blx	r5
   13462:	0224      	lsls	r4, r4, #8
   13464:	1904      	adds	r4, r0, r4
   13466:	0c21      	lsrs	r1, r4, #16
   13468:	4d08      	ldr	r5, [pc, #32]	; (1348c <Radio_WriteFrequency+0x44>)
   1346a:	b2c9      	uxtb	r1, r1
   1346c:	2006      	movs	r0, #6
   1346e:	47a8      	blx	r5
   13470:	0a21      	lsrs	r1, r4, #8
   13472:	b2c9      	uxtb	r1, r1
   13474:	2007      	movs	r0, #7
   13476:	47a8      	blx	r5
   13478:	b2e1      	uxtb	r1, r4
   1347a:	2008      	movs	r0, #8
   1347c:	47a8      	blx	r5
   1347e:	bd70      	pop	{r4, r5, r6, pc}
   13480:	00003d09 	.word	0x00003d09
   13484:	00014b71 	.word	0x00014b71
   13488:	00014c7d 	.word	0x00014c7d
   1348c:	0000678d 	.word	0x0000678d

00013490 <Radio_WriteConfiguration>:
   13490:	b5f0      	push	{r4, r5, r6, r7, lr}
   13492:	4cb0      	ldr	r4, [pc, #704]	; (13754 <Radio_WriteConfiguration+0x2c4>)
   13494:	2200      	movs	r2, #0
   13496:	0023      	movs	r3, r4
   13498:	b085      	sub	sp, #20
   1349a:	9002      	str	r0, [sp, #8]
   1349c:	3334      	adds	r3, #52	; 0x34
   1349e:	0010      	movs	r0, r2
   134a0:	7819      	ldrb	r1, [r3, #0]
   134a2:	4bad      	ldr	r3, [pc, #692]	; (13758 <Radio_WriteConfiguration+0x2c8>)
   134a4:	4798      	blx	r3
   134a6:	4bad      	ldr	r3, [pc, #692]	; (1375c <Radio_WriteConfiguration+0x2cc>)
   134a8:	6820      	ldr	r0, [r4, #0]
   134aa:	4798      	blx	r3
   134ac:	1ce3      	adds	r3, r4, #3
   134ae:	1d62      	adds	r2, r4, #5
   134b0:	7fdb      	ldrb	r3, [r3, #31]
   134b2:	7fd2      	ldrb	r2, [r2, #31]
   134b4:	b25b      	sxtb	r3, r3
   134b6:	4eaa      	ldr	r6, [pc, #680]	; (13760 <Radio_WriteConfiguration+0x2d0>)
   134b8:	4daa      	ldr	r5, [pc, #680]	; (13764 <Radio_WriteConfiguration+0x2d4>)
   134ba:	2a00      	cmp	r2, #0
   134bc:	d000      	beq.n	134c0 <Radio_WriteConfiguration+0x30>
   134be:	e0fc      	b.n	136ba <Radio_WriteConfiguration+0x22a>
   134c0:	1c1f      	adds	r7, r3, #0
   134c2:	2b0f      	cmp	r3, #15
   134c4:	dc00      	bgt.n	134c8 <Radio_WriteConfiguration+0x38>
   134c6:	e0ec      	b.n	136a2 <Radio_WriteConfiguration+0x212>
   134c8:	270f      	movs	r7, #15
   134ca:	b27b      	sxtb	r3, r7
   134cc:	204d      	movs	r0, #77	; 0x4d
   134ce:	9301      	str	r3, [sp, #4]
   134d0:	47b0      	blx	r6
   134d2:	21f8      	movs	r1, #248	; 0xf8
   134d4:	4008      	ands	r0, r1
   134d6:	39f4      	subs	r1, #244	; 0xf4
   134d8:	4301      	orrs	r1, r0
   134da:	204d      	movs	r0, #77	; 0x4d
   134dc:	47a8      	blx	r5
   134de:	b27b      	sxtb	r3, r7
   134e0:	2b00      	cmp	r3, #0
   134e2:	db00      	blt.n	134e6 <Radio_WriteConfiguration+0x56>
   134e4:	e0e4      	b.n	136b0 <Radio_WriteConfiguration+0x220>
   134e6:	3703      	adds	r7, #3
   134e8:	b2f9      	uxtb	r1, r7
   134ea:	2720      	movs	r7, #32
   134ec:	4339      	orrs	r1, r7
   134ee:	2009      	movs	r0, #9
   134f0:	47a8      	blx	r5
   134f2:	0023      	movs	r3, r4
   134f4:	3334      	adds	r3, #52	; 0x34
   134f6:	781f      	ldrb	r7, [r3, #0]
   134f8:	2f01      	cmp	r7, #1
   134fa:	d000      	beq.n	134fe <Radio_WriteConfiguration+0x6e>
   134fc:	e144      	b.n	13788 <Radio_WriteConfiguration+0x2f8>
   134fe:	7e21      	ldrb	r1, [r4, #24]
   13500:	2039      	movs	r0, #57	; 0x39
   13502:	47a8      	blx	r5
   13504:	4b98      	ldr	r3, [pc, #608]	; (13768 <Radio_WriteConfiguration+0x2d8>)
   13506:	201d      	movs	r0, #29
   13508:	7819      	ldrb	r1, [r3, #0]
   1350a:	0023      	movs	r3, r4
   1350c:	3333      	adds	r3, #51	; 0x33
   1350e:	781b      	ldrb	r3, [r3, #0]
   13510:	0109      	lsls	r1, r1, #4
   13512:	005b      	lsls	r3, r3, #1
   13514:	4319      	orrs	r1, r3
   13516:	1de3      	adds	r3, r4, #7
   13518:	7fdb      	ldrb	r3, [r3, #31]
   1351a:	401f      	ands	r7, r3
   1351c:	4339      	orrs	r1, r7
   1351e:	b2c9      	uxtb	r1, r1
   13520:	47a8      	blx	r5
   13522:	1d23      	adds	r3, r4, #4
   13524:	7fd9      	ldrb	r1, [r3, #31]
   13526:	2304      	movs	r3, #4
   13528:	0089      	lsls	r1, r1, #2
   1352a:	4019      	ands	r1, r3
   1352c:	0023      	movs	r3, r4
   1352e:	3335      	adds	r3, #53	; 0x35
   13530:	781b      	ldrb	r3, [r3, #0]
   13532:	201e      	movs	r0, #30
   13534:	011b      	lsls	r3, r3, #4
   13536:	4319      	orrs	r1, r3
   13538:	9b02      	ldr	r3, [sp, #8]
   1353a:	059b      	lsls	r3, r3, #22
   1353c:	0f9b      	lsrs	r3, r3, #30
   1353e:	4319      	orrs	r1, r3
   13540:	b2c9      	uxtb	r1, r1
   13542:	47a8      	blx	r5
   13544:	2300      	movs	r3, #0
   13546:	8ae1      	ldrh	r1, [r4, #22]
   13548:	4299      	cmp	r1, r3
   1354a:	d011      	beq.n	13570 <Radio_WriteConfiguration+0xe0>
   1354c:	4a86      	ldr	r2, [pc, #536]	; (13768 <Radio_WriteConfiguration+0x2d8>)
   1354e:	7812      	ldrb	r2, [r2, #0]
   13550:	2a08      	cmp	r2, #8
   13552:	d100      	bne.n	13556 <Radio_WriteConfiguration+0xc6>
   13554:	e0e4      	b.n	13720 <Radio_WriteConfiguration+0x290>
   13556:	2a09      	cmp	r2, #9
   13558:	d100      	bne.n	1355c <Radio_WriteConfiguration+0xcc>
   1355a:	e0e3      	b.n	13724 <Radio_WriteConfiguration+0x294>
   1355c:	2a07      	cmp	r2, #7
   1355e:	d000      	beq.n	13562 <Radio_WriteConfiguration+0xd2>
   13560:	e0e3      	b.n	1372a <Radio_WriteConfiguration+0x29a>
   13562:	337d      	adds	r3, #125	; 0x7d
   13564:	4359      	muls	r1, r3
   13566:	0023      	movs	r3, r4
   13568:	3335      	adds	r3, #53	; 0x35
   1356a:	781b      	ldrb	r3, [r3, #0]
   1356c:	40d9      	lsrs	r1, r3
   1356e:	000b      	movs	r3, r1
   13570:	b2d9      	uxtb	r1, r3
   13572:	2024      	movs	r0, #36	; 0x24
   13574:	4d7b      	ldr	r5, [pc, #492]	; (13764 <Radio_WriteConfiguration+0x2d4>)
   13576:	47a8      	blx	r5
   13578:	466b      	mov	r3, sp
   1357a:	201f      	movs	r0, #31
   1357c:	7a19      	ldrb	r1, [r3, #8]
   1357e:	47a8      	blx	r5
   13580:	2026      	movs	r0, #38	; 0x26
   13582:	47b0      	blx	r6
   13584:	0023      	movs	r3, r4
   13586:	3335      	adds	r3, #53	; 0x35
   13588:	781b      	ldrb	r3, [r3, #0]
   1358a:	2b0c      	cmp	r3, #12
   1358c:	d105      	bne.n	1359a <Radio_WriteConfiguration+0x10a>
   1358e:	0023      	movs	r3, r4
   13590:	3336      	adds	r3, #54	; 0x36
   13592:	781b      	ldrb	r3, [r3, #0]
   13594:	3b07      	subs	r3, #7
   13596:	2b01      	cmp	r3, #1
   13598:	d906      	bls.n	135a8 <Radio_WriteConfiguration+0x118>
   1359a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   1359c:	4b73      	ldr	r3, [pc, #460]	; (1376c <Radio_WriteConfiguration+0x2dc>)
   1359e:	4013      	ands	r3, r2
   135a0:	4a73      	ldr	r2, [pc, #460]	; (13770 <Radio_WriteConfiguration+0x2e0>)
   135a2:	4293      	cmp	r3, r2
   135a4:	d000      	beq.n	135a8 <Radio_WriteConfiguration+0x118>
   135a6:	e0c2      	b.n	1372e <Radio_WriteConfiguration+0x29e>
   135a8:	2108      	movs	r1, #8
   135aa:	4308      	orrs	r0, r1
   135ac:	b2c0      	uxtb	r0, r0
   135ae:	2104      	movs	r1, #4
   135b0:	4301      	orrs	r1, r0
   135b2:	2026      	movs	r0, #38	; 0x26
   135b4:	47a8      	blx	r5
   135b6:	2031      	movs	r0, #49	; 0x31
   135b8:	47b0      	blx	r6
   135ba:	21f8      	movs	r1, #248	; 0xf8
   135bc:	4008      	ands	r0, r1
   135be:	39f5      	subs	r1, #245	; 0xf5
   135c0:	4301      	orrs	r1, r0
   135c2:	2031      	movs	r0, #49	; 0x31
   135c4:	47a8      	blx	r5
   135c6:	210a      	movs	r1, #10
   135c8:	2037      	movs	r0, #55	; 0x37
   135ca:	47a8      	blx	r5
   135cc:	0023      	movs	r3, r4
   135ce:	3331      	adds	r3, #49	; 0x31
   135d0:	781b      	ldrb	r3, [r3, #0]
   135d2:	2b12      	cmp	r3, #18
   135d4:	d11e      	bne.n	13614 <Radio_WriteConfiguration+0x184>
   135d6:	0023      	movs	r3, r4
   135d8:	3336      	adds	r3, #54	; 0x36
   135da:	781b      	ldrb	r3, [r3, #0]
   135dc:	3b07      	subs	r3, #7
   135de:	2b01      	cmp	r3, #1
   135e0:	d80b      	bhi.n	135fa <Radio_WriteConfiguration+0x16a>
   135e2:	2031      	movs	r0, #49	; 0x31
   135e4:	47b0      	blx	r6
   135e6:	217f      	movs	r1, #127	; 0x7f
   135e8:	4001      	ands	r1, r0
   135ea:	2031      	movs	r0, #49	; 0x31
   135ec:	47a8      	blx	r5
   135ee:	2140      	movs	r1, #64	; 0x40
   135f0:	202f      	movs	r0, #47	; 0x2f
   135f2:	47a8      	blx	r5
   135f4:	2100      	movs	r1, #0
   135f6:	2030      	movs	r0, #48	; 0x30
   135f8:	47a8      	blx	r5
   135fa:	0023      	movs	r3, r4
   135fc:	3336      	adds	r3, #54	; 0x36
   135fe:	781b      	ldrb	r3, [r3, #0]
   13600:	2b09      	cmp	r3, #9
   13602:	d107      	bne.n	13614 <Radio_WriteConfiguration+0x184>
   13604:	2031      	movs	r0, #49	; 0x31
   13606:	47b0      	blx	r6
   13608:	2180      	movs	r1, #128	; 0x80
   1360a:	4249      	negs	r1, r1
   1360c:	4301      	orrs	r1, r0
   1360e:	b2c9      	uxtb	r1, r1
   13610:	2031      	movs	r0, #49	; 0x31
   13612:	47a8      	blx	r5
   13614:	2033      	movs	r0, #51	; 0x33
   13616:	47b0      	blx	r6
   13618:	1da3      	adds	r3, r4, #6
   1361a:	7fd9      	ldrb	r1, [r3, #31]
   1361c:	2340      	movs	r3, #64	; 0x40
   1361e:	0189      	lsls	r1, r1, #6
   13620:	4398      	bics	r0, r3
   13622:	4019      	ands	r1, r3
   13624:	4301      	orrs	r1, r0
   13626:	b2c9      	uxtb	r1, r1
   13628:	2033      	movs	r0, #51	; 0x33
   1362a:	47a8      	blx	r5
   1362c:	8aa1      	ldrh	r1, [r4, #20]
   1362e:	2020      	movs	r0, #32
   13630:	0a09      	lsrs	r1, r1, #8
   13632:	47a8      	blx	r5
   13634:	7d21      	ldrb	r1, [r4, #20]
   13636:	2021      	movs	r0, #33	; 0x21
   13638:	47a8      	blx	r5
   1363a:	2100      	movs	r1, #0
   1363c:	200d      	movs	r0, #13
   1363e:	47a8      	blx	r5
   13640:	2100      	movs	r1, #0
   13642:	200e      	movs	r0, #14
   13644:	47a8      	blx	r5
   13646:	2100      	movs	r1, #0
   13648:	200f      	movs	r0, #15
   1364a:	47a8      	blx	r5
   1364c:	0023      	movs	r3, r4
   1364e:	3331      	adds	r3, #49	; 0x31
   13650:	781b      	ldrb	r3, [r3, #0]
   13652:	2b12      	cmp	r3, #18
   13654:	d120      	bne.n	13698 <Radio_WriteConfiguration+0x208>
   13656:	0023      	movs	r3, r4
   13658:	3336      	adds	r3, #54	; 0x36
   1365a:	781b      	ldrb	r3, [r3, #0]
   1365c:	2b09      	cmp	r3, #9
   1365e:	d000      	beq.n	13662 <Radio_WriteConfiguration+0x1d2>
   13660:	e072      	b.n	13748 <Radio_WriteConfiguration+0x2b8>
   13662:	4a44      	ldr	r2, [pc, #272]	; (13774 <Radio_WriteConfiguration+0x2e4>)
   13664:	6823      	ldr	r3, [r4, #0]
   13666:	1899      	adds	r1, r3, r2
   13668:	4a43      	ldr	r2, [pc, #268]	; (13778 <Radio_WriteConfiguration+0x2e8>)
   1366a:	4291      	cmp	r1, r2
   1366c:	d862      	bhi.n	13734 <Radio_WriteConfiguration+0x2a4>
   1366e:	2102      	movs	r1, #2
   13670:	2036      	movs	r0, #54	; 0x36
   13672:	47a8      	blx	r5
   13674:	2164      	movs	r1, #100	; 0x64
   13676:	203a      	movs	r0, #58	; 0x3a
   13678:	47a8      	blx	r5
   1367a:	0023      	movs	r3, r4
   1367c:	3336      	adds	r3, #54	; 0x36
   1367e:	781b      	ldrb	r3, [r3, #0]
   13680:	2165      	movs	r1, #101	; 0x65
   13682:	203a      	movs	r0, #58	; 0x3a
   13684:	2b09      	cmp	r3, #9
   13686:	d162      	bne.n	1374e <Radio_WriteConfiguration+0x2be>
   13688:	3406      	adds	r4, #6
   1368a:	7fe3      	ldrb	r3, [r4, #31]
   1368c:	2b01      	cmp	r3, #1
   1368e:	d15e      	bne.n	1374e <Radio_WriteConfiguration+0x2be>
   13690:	47a8      	blx	r5
   13692:	2119      	movs	r1, #25
   13694:	203b      	movs	r0, #59	; 0x3b
   13696:	47a8      	blx	r5
   13698:	21ff      	movs	r1, #255	; 0xff
   1369a:	2012      	movs	r0, #18
   1369c:	47a8      	blx	r5
   1369e:	b005      	add	sp, #20
   136a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   136a2:	b25b      	sxtb	r3, r3
   136a4:	3303      	adds	r3, #3
   136a6:	db00      	blt.n	136aa <Radio_WriteConfiguration+0x21a>
   136a8:	e70f      	b.n	134ca <Radio_WriteConfiguration+0x3a>
   136aa:	4b34      	ldr	r3, [pc, #208]	; (1377c <Radio_WriteConfiguration+0x2ec>)
   136ac:	781f      	ldrb	r7, [r3, #0]
   136ae:	e70c      	b.n	134ca <Radio_WriteConfiguration+0x3a>
   136b0:	2170      	movs	r1, #112	; 0x70
   136b2:	9b01      	ldr	r3, [sp, #4]
   136b4:	4319      	orrs	r1, r3
   136b6:	b2c9      	uxtb	r1, r1
   136b8:	e719      	b.n	134ee <Radio_WriteConfiguration+0x5e>
   136ba:	2b01      	cmp	r3, #1
   136bc:	dd07      	ble.n	136ce <Radio_WriteConfiguration+0x23e>
   136be:	2714      	movs	r7, #20
   136c0:	2b13      	cmp	r3, #19
   136c2:	dc06      	bgt.n	136d2 <Radio_WriteConfiguration+0x242>
   136c4:	1c1f      	adds	r7, r3, #0
   136c6:	2b11      	cmp	r3, #17
   136c8:	dd02      	ble.n	136d0 <Radio_WriteConfiguration+0x240>
   136ca:	2711      	movs	r7, #17
   136cc:	e000      	b.n	136d0 <Radio_WriteConfiguration+0x240>
   136ce:	2702      	movs	r7, #2
   136d0:	b27f      	sxtb	r7, r7
   136d2:	200b      	movs	r0, #11
   136d4:	47b0      	blx	r6
   136d6:	9003      	str	r0, [sp, #12]
   136d8:	204d      	movs	r0, #77	; 0x4d
   136da:	47b0      	blx	r6
   136dc:	2307      	movs	r3, #7
   136de:	4398      	bics	r0, r3
   136e0:	b2c1      	uxtb	r1, r0
   136e2:	2f14      	cmp	r7, #20
   136e4:	d112      	bne.n	1370c <Radio_WriteConfiguration+0x27c>
   136e6:	4319      	orrs	r1, r3
   136e8:	9b03      	ldr	r3, [sp, #12]
   136ea:	37cb      	adds	r7, #203	; 0xcb
   136ec:	403b      	ands	r3, r7
   136ee:	001f      	movs	r7, r3
   136f0:	230f      	movs	r3, #15
   136f2:	9301      	str	r3, [sp, #4]
   136f4:	204d      	movs	r0, #77	; 0x4d
   136f6:	47a8      	blx	r5
   136f8:	2180      	movs	r1, #128	; 0x80
   136fa:	9b01      	ldr	r3, [sp, #4]
   136fc:	4249      	negs	r1, r1
   136fe:	4319      	orrs	r1, r3
   13700:	b2c9      	uxtb	r1, r1
   13702:	2009      	movs	r0, #9
   13704:	47a8      	blx	r5
   13706:	0039      	movs	r1, r7
   13708:	200b      	movs	r0, #11
   1370a:	e6f1      	b.n	134f0 <Radio_WriteConfiguration+0x60>
   1370c:	3f02      	subs	r7, #2
   1370e:	b27b      	sxtb	r3, r7
   13710:	2720      	movs	r7, #32
   13712:	2004      	movs	r0, #4
   13714:	9301      	str	r3, [sp, #4]
   13716:	9b03      	ldr	r3, [sp, #12]
   13718:	4301      	orrs	r1, r0
   1371a:	431f      	orrs	r7, r3
   1371c:	b2ff      	uxtb	r7, r7
   1371e:	e7e9      	b.n	136f4 <Radio_WriteConfiguration+0x264>
   13720:	23fa      	movs	r3, #250	; 0xfa
   13722:	e71f      	b.n	13564 <Radio_WriteConfiguration+0xd4>
   13724:	23fa      	movs	r3, #250	; 0xfa
   13726:	005b      	lsls	r3, r3, #1
   13728:	e71c      	b.n	13564 <Radio_WriteConfiguration+0xd4>
   1372a:	0019      	movs	r1, r3
   1372c:	e71b      	b.n	13566 <Radio_WriteConfiguration+0xd6>
   1372e:	21f7      	movs	r1, #247	; 0xf7
   13730:	4008      	ands	r0, r1
   13732:	e73c      	b.n	135ae <Radio_WriteConfiguration+0x11e>
   13734:	4a12      	ldr	r2, [pc, #72]	; (13780 <Radio_WriteConfiguration+0x2f0>)
   13736:	189b      	adds	r3, r3, r2
   13738:	4a12      	ldr	r2, [pc, #72]	; (13784 <Radio_WriteConfiguration+0x2f4>)
   1373a:	4293      	cmp	r3, r2
   1373c:	d804      	bhi.n	13748 <Radio_WriteConfiguration+0x2b8>
   1373e:	2102      	movs	r1, #2
   13740:	2036      	movs	r0, #54	; 0x36
   13742:	47a8      	blx	r5
   13744:	217f      	movs	r1, #127	; 0x7f
   13746:	e796      	b.n	13676 <Radio_WriteConfiguration+0x1e6>
   13748:	2103      	movs	r1, #3
   1374a:	2036      	movs	r0, #54	; 0x36
   1374c:	e794      	b.n	13678 <Radio_WriteConfiguration+0x1e8>
   1374e:	47a8      	blx	r5
   13750:	211d      	movs	r1, #29
   13752:	e79f      	b.n	13694 <Radio_WriteConfiguration+0x204>
   13754:	20001ad0 	.word	0x20001ad0
   13758:	0000cb11 	.word	0x0000cb11
   1375c:	00013449 	.word	0x00013449
   13760:	000067b5 	.word	0x000067b5
   13764:	0000678d 	.word	0x0000678d
   13768:	20001b06 	.word	0x20001b06
   1376c:	00ffff00 	.word	0x00ffff00
   13770:	00070b00 	.word	0x00070b00
   13774:	cc9eec80 	.word	0xcc9eec80
   13778:	096ae380 	.word	0x096ae380
   1377c:	0001f750 	.word	0x0001f750
   13780:	e78fe580 	.word	0xe78fe580
   13784:	06dac2c0 	.word	0x06dac2c0
   13788:	6863      	ldr	r3, [r4, #4]
   1378a:	492c      	ldr	r1, [pc, #176]	; (1383c <Radio_WriteConfiguration+0x3ac>)
   1378c:	0218      	lsls	r0, r3, #8
   1378e:	4b2c      	ldr	r3, [pc, #176]	; (13840 <Radio_WriteConfiguration+0x3b0>)
   13790:	4798      	blx	r3
   13792:	0007      	movs	r7, r0
   13794:	0a01      	lsrs	r1, r0, #8
   13796:	b2c9      	uxtb	r1, r1
   13798:	2004      	movs	r0, #4
   1379a:	47a8      	blx	r5
   1379c:	b2f9      	uxtb	r1, r7
   1379e:	2005      	movs	r0, #5
   137a0:	47a8      	blx	r5
   137a2:	4b27      	ldr	r3, [pc, #156]	; (13840 <Radio_WriteConfiguration+0x3b0>)
   137a4:	68a1      	ldr	r1, [r4, #8]
   137a6:	4827      	ldr	r0, [pc, #156]	; (13844 <Radio_WriteConfiguration+0x3b4>)
   137a8:	4798      	blx	r3
   137aa:	0007      	movs	r7, r0
   137ac:	0a01      	lsrs	r1, r0, #8
   137ae:	b2c9      	uxtb	r1, r1
   137b0:	2002      	movs	r0, #2
   137b2:	47a8      	blx	r5
   137b4:	b2f9      	uxtb	r1, r7
   137b6:	2003      	movs	r0, #3
   137b8:	47a8      	blx	r5
   137ba:	2100      	movs	r1, #0
   137bc:	205d      	movs	r0, #93	; 0x5d
   137be:	47a8      	blx	r5
   137c0:	8aa1      	ldrh	r1, [r4, #20]
   137c2:	2025      	movs	r0, #37	; 0x25
   137c4:	0a09      	lsrs	r1, r1, #8
   137c6:	47a8      	blx	r5
   137c8:	7d21      	ldrb	r1, [r4, #20]
   137ca:	2026      	movs	r0, #38	; 0x26
   137cc:	47a8      	blx	r5
   137ce:	219e      	movs	r1, #158	; 0x9e
   137d0:	200d      	movs	r0, #13
   137d2:	47a8      	blx	r5
   137d4:	21a0      	movs	r1, #160	; 0xa0
   137d6:	2035      	movs	r0, #53	; 0x35
   137d8:	47a8      	blx	r5
   137da:	200a      	movs	r0, #10
   137dc:	47b0      	blx	r6
   137de:	0023      	movs	r3, r4
   137e0:	3337      	adds	r3, #55	; 0x37
   137e2:	7819      	ldrb	r1, [r3, #0]
   137e4:	2360      	movs	r3, #96	; 0x60
   137e6:	0149      	lsls	r1, r1, #5
   137e8:	4398      	bics	r0, r3
   137ea:	4301      	orrs	r1, r0
   137ec:	b2c9      	uxtb	r1, r1
   137ee:	200a      	movs	r0, #10
   137f0:	47a8      	blx	r5
   137f2:	1d23      	adds	r3, r4, #4
   137f4:	7fdb      	ldrb	r3, [r3, #31]
   137f6:	21c0      	movs	r1, #192	; 0xc0
   137f8:	2b00      	cmp	r3, #0
   137fa:	d000      	beq.n	137fe <Radio_WriteConfiguration+0x36e>
   137fc:	3110      	adds	r1, #16
   137fe:	2030      	movs	r0, #48	; 0x30
   13800:	47a8      	blx	r5
   13802:	2600      	movs	r6, #0
   13804:	1ca3      	adds	r3, r4, #2
   13806:	7fd9      	ldrb	r1, [r3, #31]
   13808:	428e      	cmp	r6, r1
   1380a:	d30d      	bcc.n	13828 <Radio_WriteConfiguration+0x398>
   1380c:	2900      	cmp	r1, #0
   1380e:	d003      	beq.n	13818 <Radio_WriteConfiguration+0x388>
   13810:	2310      	movs	r3, #16
   13812:	3901      	subs	r1, #1
   13814:	4319      	orrs	r1, r3
   13816:	b2c9      	uxtb	r1, r1
   13818:	2027      	movs	r0, #39	; 0x27
   1381a:	47a8      	blx	r5
   1381c:	21ff      	movs	r1, #255	; 0xff
   1381e:	203e      	movs	r0, #62	; 0x3e
   13820:	47a8      	blx	r5
   13822:	21ff      	movs	r1, #255	; 0xff
   13824:	203f      	movs	r0, #63	; 0x3f
   13826:	e739      	b.n	1369c <Radio_WriteConfiguration+0x20c>
   13828:	0030      	movs	r0, r6
   1382a:	19a3      	adds	r3, r4, r6
   1382c:	3028      	adds	r0, #40	; 0x28
   1382e:	7e59      	ldrb	r1, [r3, #25]
   13830:	b2c0      	uxtb	r0, r0
   13832:	3601      	adds	r6, #1
   13834:	47a8      	blx	r5
   13836:	b2f6      	uxtb	r6, r6
   13838:	e7e4      	b.n	13804 <Radio_WriteConfiguration+0x374>
   1383a:	46c0      	nop			; (mov r8, r8)
   1383c:	00003d09 	.word	0x00003d09
   13840:	00014b71 	.word	0x00014b71
   13844:	01e84800 	.word	0x01e84800

00013848 <RADIO_getMappingAndOpmode>:
   13848:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1384a:	0006      	movs	r6, r0
   1384c:	4d06      	ldr	r5, [pc, #24]	; (13868 <RADIO_getMappingAndOpmode+0x20>)
   1384e:	2040      	movs	r0, #64	; 0x40
   13850:	001f      	movs	r7, r3
   13852:	0014      	movs	r4, r2
   13854:	9101      	str	r1, [sp, #4]
   13856:	47a8      	blx	r5
   13858:	4004      	ands	r4, r0
   1385a:	413c      	asrs	r4, r7
   1385c:	2001      	movs	r0, #1
   1385e:	7034      	strb	r4, [r6, #0]
   13860:	47a8      	blx	r5
   13862:	9b01      	ldr	r3, [sp, #4]
   13864:	7018      	strb	r0, [r3, #0]
   13866:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   13868:	000067b5 	.word	0x000067b5

0001386c <RADIO_UnhandledInterrupt.part.0>:
   1386c:	b510      	push	{r4, lr}
   1386e:	21ff      	movs	r1, #255	; 0xff
   13870:	2012      	movs	r0, #18
   13872:	4b01      	ldr	r3, [pc, #4]	; (13878 <RADIO_UnhandledInterrupt.part.0+0xc>)
   13874:	4798      	blx	r3
   13876:	bd10      	pop	{r4, pc}
   13878:	0000678d 	.word	0x0000678d

0001387c <RADIO_UnhandledInterrupt>:
   1387c:	b510      	push	{r4, lr}
   1387e:	2801      	cmp	r0, #1
   13880:	d102      	bne.n	13888 <RADIO_UnhandledInterrupt+0xc>
   13882:	4b05      	ldr	r3, [pc, #20]	; (13898 <RADIO_UnhandledInterrupt+0x1c>)
   13884:	4798      	blx	r3
   13886:	bd10      	pop	{r4, pc}
   13888:	21ff      	movs	r1, #255	; 0xff
   1388a:	203e      	movs	r0, #62	; 0x3e
   1388c:	4c03      	ldr	r4, [pc, #12]	; (1389c <RADIO_UnhandledInterrupt+0x20>)
   1388e:	47a0      	blx	r4
   13890:	21ff      	movs	r1, #255	; 0xff
   13892:	203f      	movs	r0, #63	; 0x3f
   13894:	47a0      	blx	r4
   13896:	e7f6      	b.n	13886 <RADIO_UnhandledInterrupt+0xa>
   13898:	0001386d 	.word	0x0001386d
   1389c:	0000678d 	.word	0x0000678d

000138a0 <RADIO_DIO0>:
   138a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   138a2:	466b      	mov	r3, sp
   138a4:	1ddc      	adds	r4, r3, #7
   138a6:	1d9d      	adds	r5, r3, #6
   138a8:	22c0      	movs	r2, #192	; 0xc0
   138aa:	2306      	movs	r3, #6
   138ac:	0028      	movs	r0, r5
   138ae:	0021      	movs	r1, r4
   138b0:	4e12      	ldr	r6, [pc, #72]	; (138fc <RADIO_DIO0+0x5c>)
   138b2:	47b0      	blx	r6
   138b4:	7823      	ldrb	r3, [r4, #0]
   138b6:	7828      	ldrb	r0, [r5, #0]
   138b8:	b25a      	sxtb	r2, r3
   138ba:	b2c0      	uxtb	r0, r0
   138bc:	2a00      	cmp	r2, #0
   138be:	da0b      	bge.n	138d8 <RADIO_DIO0+0x38>
   138c0:	2800      	cmp	r0, #0
   138c2:	d004      	beq.n	138ce <RADIO_DIO0+0x2e>
   138c4:	2801      	cmp	r0, #1
   138c6:	d005      	beq.n	138d4 <RADIO_DIO0+0x34>
   138c8:	4b0d      	ldr	r3, [pc, #52]	; (13900 <RADIO_DIO0+0x60>)
   138ca:	4798      	blx	r3
   138cc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   138ce:	4b0d      	ldr	r3, [pc, #52]	; (13904 <RADIO_DIO0+0x64>)
   138d0:	4798      	blx	r3
   138d2:	e7fb      	b.n	138cc <RADIO_DIO0+0x2c>
   138d4:	4b0c      	ldr	r3, [pc, #48]	; (13908 <RADIO_DIO0+0x68>)
   138d6:	e7fb      	b.n	138d0 <RADIO_DIO0+0x30>
   138d8:	2800      	cmp	r0, #0
   138da:	d10a      	bne.n	138f2 <RADIO_DIO0+0x52>
   138dc:	2207      	movs	r2, #7
   138de:	4013      	ands	r3, r2
   138e0:	7023      	strb	r3, [r4, #0]
   138e2:	2b03      	cmp	r3, #3
   138e4:	d101      	bne.n	138ea <RADIO_DIO0+0x4a>
   138e6:	4b09      	ldr	r3, [pc, #36]	; (1390c <RADIO_DIO0+0x6c>)
   138e8:	e7f2      	b.n	138d0 <RADIO_DIO0+0x30>
   138ea:	2b05      	cmp	r3, #5
   138ec:	d102      	bne.n	138f4 <RADIO_DIO0+0x54>
   138ee:	4b08      	ldr	r3, [pc, #32]	; (13910 <RADIO_DIO0+0x70>)
   138f0:	e7ee      	b.n	138d0 <RADIO_DIO0+0x30>
   138f2:	2000      	movs	r0, #0
   138f4:	4b07      	ldr	r3, [pc, #28]	; (13914 <RADIO_DIO0+0x74>)
   138f6:	4798      	blx	r3
   138f8:	e7e8      	b.n	138cc <RADIO_DIO0+0x2c>
   138fa:	46c0      	nop			; (mov r8, r8)
   138fc:	00013849 	.word	0x00013849
   13900:	0001386d 	.word	0x0001386d
   13904:	00014021 	.word	0x00014021
   13908:	00013f31 	.word	0x00013f31
   1390c:	00013fad 	.word	0x00013fad
   13910:	0001409d 	.word	0x0001409d
   13914:	0001387d 	.word	0x0001387d

00013918 <RADIO_DIO1>:
   13918:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1391a:	466b      	mov	r3, sp
   1391c:	1ddc      	adds	r4, r3, #7
   1391e:	1d9d      	adds	r5, r3, #6
   13920:	2230      	movs	r2, #48	; 0x30
   13922:	2304      	movs	r3, #4
   13924:	0021      	movs	r1, r4
   13926:	0028      	movs	r0, r5
   13928:	4e11      	ldr	r6, [pc, #68]	; (13970 <RADIO_DIO1+0x58>)
   1392a:	47b0      	blx	r6
   1392c:	7822      	ldrb	r2, [r4, #0]
   1392e:	782b      	ldrb	r3, [r5, #0]
   13930:	b251      	sxtb	r1, r2
   13932:	2900      	cmp	r1, #0
   13934:	da0c      	bge.n	13950 <RADIO_DIO1+0x38>
   13936:	b2db      	uxtb	r3, r3
   13938:	2b00      	cmp	r3, #0
   1393a:	d004      	beq.n	13946 <RADIO_DIO1+0x2e>
   1393c:	2b01      	cmp	r3, #1
   1393e:	d005      	beq.n	1394c <RADIO_DIO1+0x34>
   13940:	4b0c      	ldr	r3, [pc, #48]	; (13974 <RADIO_DIO1+0x5c>)
   13942:	4798      	blx	r3
   13944:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   13946:	4b0c      	ldr	r3, [pc, #48]	; (13978 <RADIO_DIO1+0x60>)
   13948:	4798      	blx	r3
   1394a:	e7fb      	b.n	13944 <RADIO_DIO1+0x2c>
   1394c:	4b0b      	ldr	r3, [pc, #44]	; (1397c <RADIO_DIO1+0x64>)
   1394e:	e7fb      	b.n	13948 <RADIO_DIO1+0x30>
   13950:	2107      	movs	r1, #7
   13952:	b2db      	uxtb	r3, r3
   13954:	400a      	ands	r2, r1
   13956:	7022      	strb	r2, [r4, #0]
   13958:	2b00      	cmp	r3, #0
   1395a:	d005      	beq.n	13968 <RADIO_DIO1+0x50>
   1395c:	2b01      	cmp	r3, #1
   1395e:	d1f1      	bne.n	13944 <RADIO_DIO1+0x2c>
   13960:	2a03      	cmp	r2, #3
   13962:	d1ef      	bne.n	13944 <RADIO_DIO1+0x2c>
   13964:	4b06      	ldr	r3, [pc, #24]	; (13980 <RADIO_DIO1+0x68>)
   13966:	e7ef      	b.n	13948 <RADIO_DIO1+0x30>
   13968:	4b06      	ldr	r3, [pc, #24]	; (13984 <RADIO_DIO1+0x6c>)
   1396a:	2a05      	cmp	r2, #5
   1396c:	d1ea      	bne.n	13944 <RADIO_DIO1+0x2c>
   1396e:	e7eb      	b.n	13948 <RADIO_DIO1+0x30>
   13970:	00013849 	.word	0x00013849
   13974:	0001386d 	.word	0x0001386d
   13978:	00013eb5 	.word	0x00013eb5
   1397c:	0000cbf5 	.word	0x0000cbf5
   13980:	00013cdd 	.word	0x00013cdd
   13984:	00013c41 	.word	0x00013c41

00013988 <RADIO_DIO2>:
   13988:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1398a:	466b      	mov	r3, sp
   1398c:	1ddc      	adds	r4, r3, #7
   1398e:	1d9d      	adds	r5, r3, #6
   13990:	220c      	movs	r2, #12
   13992:	2302      	movs	r3, #2
   13994:	0021      	movs	r1, r4
   13996:	0028      	movs	r0, r5
   13998:	4e0b      	ldr	r6, [pc, #44]	; (139c8 <RADIO_DIO2+0x40>)
   1399a:	47b0      	blx	r6
   1399c:	7823      	ldrb	r3, [r4, #0]
   1399e:	782a      	ldrb	r2, [r5, #0]
   139a0:	b259      	sxtb	r1, r3
   139a2:	2900      	cmp	r1, #0
   139a4:	da05      	bge.n	139b2 <RADIO_DIO2+0x2a>
   139a6:	4b09      	ldr	r3, [pc, #36]	; (139cc <RADIO_DIO2+0x44>)
   139a8:	2a02      	cmp	r2, #2
   139aa:	d90a      	bls.n	139c2 <RADIO_DIO2+0x3a>
   139ac:	4b08      	ldr	r3, [pc, #32]	; (139d0 <RADIO_DIO2+0x48>)
   139ae:	4798      	blx	r3
   139b0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   139b2:	2107      	movs	r1, #7
   139b4:	400b      	ands	r3, r1
   139b6:	7023      	strb	r3, [r4, #0]
   139b8:	2a03      	cmp	r2, #3
   139ba:	d1f9      	bne.n	139b0 <RADIO_DIO2+0x28>
   139bc:	2b05      	cmp	r3, #5
   139be:	d1f7      	bne.n	139b0 <RADIO_DIO2+0x28>
   139c0:	4b04      	ldr	r3, [pc, #16]	; (139d4 <RADIO_DIO2+0x4c>)
   139c2:	4798      	blx	r3
   139c4:	e7f4      	b.n	139b0 <RADIO_DIO2+0x28>
   139c6:	46c0      	nop			; (mov r8, r8)
   139c8:	00013849 	.word	0x00013849
   139cc:	0000cbf5 	.word	0x0000cbf5
   139d0:	0001386d 	.word	0x0001386d
   139d4:	00013c11 	.word	0x00013c11

000139d8 <RADIO_DIO3>:
   139d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   139da:	466b      	mov	r3, sp
   139dc:	4668      	mov	r0, sp
   139de:	1ddc      	adds	r4, r3, #7
   139e0:	2203      	movs	r2, #3
   139e2:	2300      	movs	r3, #0
   139e4:	0021      	movs	r1, r4
   139e6:	3006      	adds	r0, #6
   139e8:	4d03      	ldr	r5, [pc, #12]	; (139f8 <RADIO_DIO3+0x20>)
   139ea:	47a8      	blx	r5
   139ec:	7823      	ldrb	r3, [r4, #0]
   139ee:	2b7f      	cmp	r3, #127	; 0x7f
   139f0:	d901      	bls.n	139f6 <RADIO_DIO3+0x1e>
   139f2:	4b02      	ldr	r3, [pc, #8]	; (139fc <RADIO_DIO3+0x24>)
   139f4:	4798      	blx	r3
   139f6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   139f8:	00013849 	.word	0x00013849
   139fc:	0001386d 	.word	0x0001386d

00013a00 <RADIO_DIO4>:
   13a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13a02:	466b      	mov	r3, sp
   13a04:	4668      	mov	r0, sp
   13a06:	1ddc      	adds	r4, r3, #7
   13a08:	2306      	movs	r3, #6
   13a0a:	22c0      	movs	r2, #192	; 0xc0
   13a0c:	18c0      	adds	r0, r0, r3
   13a0e:	0021      	movs	r1, r4
   13a10:	4d03      	ldr	r5, [pc, #12]	; (13a20 <RADIO_DIO4+0x20>)
   13a12:	47a8      	blx	r5
   13a14:	7823      	ldrb	r3, [r4, #0]
   13a16:	2b7f      	cmp	r3, #127	; 0x7f
   13a18:	d901      	bls.n	13a1e <RADIO_DIO4+0x1e>
   13a1a:	4b02      	ldr	r3, [pc, #8]	; (13a24 <RADIO_DIO4+0x24>)
   13a1c:	4798      	blx	r3
   13a1e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   13a20:	00013849 	.word	0x00013849
   13a24:	0001386d 	.word	0x0001386d

00013a28 <RADIO_DIO5>:
   13a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   13a2a:	466b      	mov	r3, sp
   13a2c:	4668      	mov	r0, sp
   13a2e:	1ddc      	adds	r4, r3, #7
   13a30:	2230      	movs	r2, #48	; 0x30
   13a32:	2304      	movs	r3, #4
   13a34:	0021      	movs	r1, r4
   13a36:	3006      	adds	r0, #6
   13a38:	4d03      	ldr	r5, [pc, #12]	; (13a48 <RADIO_DIO5+0x20>)
   13a3a:	47a8      	blx	r5
   13a3c:	7823      	ldrb	r3, [r4, #0]
   13a3e:	2b7f      	cmp	r3, #127	; 0x7f
   13a40:	d901      	bls.n	13a46 <RADIO_DIO5+0x1e>
   13a42:	4b02      	ldr	r3, [pc, #8]	; (13a4c <RADIO_DIO5+0x24>)
   13a44:	4798      	blx	r3
   13a46:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   13a48:	00013849 	.word	0x00013849
   13a4c:	0001386d 	.word	0x0001386d

00013a50 <radioPostTask>:
   13a50:	b510      	push	{r4, lr}
   13a52:	0004      	movs	r4, r0
   13a54:	4b05      	ldr	r3, [pc, #20]	; (13a6c <radioPostTask+0x1c>)
   13a56:	4798      	blx	r3
   13a58:	4b05      	ldr	r3, [pc, #20]	; (13a70 <radioPostTask+0x20>)
   13a5a:	8818      	ldrh	r0, [r3, #0]
   13a5c:	4320      	orrs	r0, r4
   13a5e:	8018      	strh	r0, [r3, #0]
   13a60:	4b04      	ldr	r3, [pc, #16]	; (13a74 <radioPostTask+0x24>)
   13a62:	4798      	blx	r3
   13a64:	2002      	movs	r0, #2
   13a66:	4b04      	ldr	r3, [pc, #16]	; (13a78 <radioPostTask+0x28>)
   13a68:	4798      	blx	r3
   13a6a:	bd10      	pop	{r4, pc}
   13a6c:	000069ed 	.word	0x000069ed
   13a70:	2000109a 	.word	0x2000109a
   13a74:	000069f9 	.word	0x000069f9
   13a78:	0000cad9 	.word	0x0000cad9

00013a7c <radioClearTask>:
   13a7c:	b510      	push	{r4, lr}
   13a7e:	0004      	movs	r4, r0
   13a80:	4b04      	ldr	r3, [pc, #16]	; (13a94 <radioClearTask+0x18>)
   13a82:	4798      	blx	r3
   13a84:	4a04      	ldr	r2, [pc, #16]	; (13a98 <radioClearTask+0x1c>)
   13a86:	8813      	ldrh	r3, [r2, #0]
   13a88:	43a3      	bics	r3, r4
   13a8a:	8013      	strh	r3, [r2, #0]
   13a8c:	4b03      	ldr	r3, [pc, #12]	; (13a9c <radioClearTask+0x20>)
   13a8e:	4798      	blx	r3
   13a90:	bd10      	pop	{r4, pc}
   13a92:	46c0      	nop			; (mov r8, r8)
   13a94:	000069ed 	.word	0x000069ed
   13a98:	2000109a 	.word	0x2000109a
   13a9c:	000069f9 	.word	0x000069f9

00013aa0 <RADIO_TaskHandler>:
   13aa0:	b570      	push	{r4, r5, r6, lr}
   13aa2:	2400      	movs	r4, #0
   13aa4:	4d10      	ldr	r5, [pc, #64]	; (13ae8 <RADIO_TaskHandler+0x48>)
   13aa6:	2601      	movs	r6, #1
   13aa8:	882b      	ldrh	r3, [r5, #0]
   13aaa:	42a3      	cmp	r3, r4
   13aac:	d015      	beq.n	13ada <RADIO_TaskHandler+0x3a>
   13aae:	882b      	ldrh	r3, [r5, #0]
   13ab0:	4123      	asrs	r3, r4
   13ab2:	4233      	tst	r3, r6
   13ab4:	d013      	beq.n	13ade <RADIO_TaskHandler+0x3e>
   13ab6:	40a6      	lsls	r6, r4
   13ab8:	4b0c      	ldr	r3, [pc, #48]	; (13aec <RADIO_TaskHandler+0x4c>)
   13aba:	4798      	blx	r3
   13abc:	882b      	ldrh	r3, [r5, #0]
   13abe:	00a4      	lsls	r4, r4, #2
   13ac0:	43b3      	bics	r3, r6
   13ac2:	802b      	strh	r3, [r5, #0]
   13ac4:	4b0a      	ldr	r3, [pc, #40]	; (13af0 <RADIO_TaskHandler+0x50>)
   13ac6:	4798      	blx	r3
   13ac8:	4b0a      	ldr	r3, [pc, #40]	; (13af4 <RADIO_TaskHandler+0x54>)
   13aca:	58e3      	ldr	r3, [r4, r3]
   13acc:	4798      	blx	r3
   13ace:	882b      	ldrh	r3, [r5, #0]
   13ad0:	2b00      	cmp	r3, #0
   13ad2:	d002      	beq.n	13ada <RADIO_TaskHandler+0x3a>
   13ad4:	2002      	movs	r0, #2
   13ad6:	4b08      	ldr	r3, [pc, #32]	; (13af8 <RADIO_TaskHandler+0x58>)
   13ad8:	4798      	blx	r3
   13ada:	2000      	movs	r0, #0
   13adc:	bd70      	pop	{r4, r5, r6, pc}
   13ade:	3401      	adds	r4, #1
   13ae0:	2c05      	cmp	r4, #5
   13ae2:	d1e4      	bne.n	13aae <RADIO_TaskHandler+0xe>
   13ae4:	e7f9      	b.n	13ada <RADIO_TaskHandler+0x3a>
   13ae6:	46c0      	nop			; (mov r8, r8)
   13ae8:	2000109a 	.word	0x2000109a
   13aec:	000069ed 	.word	0x000069ed
   13af0:	000069f9 	.word	0x000069f9
   13af4:	0001f754 	.word	0x0001f754
   13af8:	0000cad9 	.word	0x0000cad9

00013afc <RadioSetState>:
   13afc:	4b01      	ldr	r3, [pc, #4]	; (13b04 <RadioSetState+0x8>)
   13afe:	7018      	strb	r0, [r3, #0]
   13b00:	4770      	bx	lr
   13b02:	46c0      	nop			; (mov r8, r8)
   13b04:	20001fff 	.word	0x20001fff

00013b08 <RADIO_GetState>:
   13b08:	4b01      	ldr	r3, [pc, #4]	; (13b10 <RADIO_GetState+0x8>)
   13b0a:	7818      	ldrb	r0, [r3, #0]
   13b0c:	b2c0      	uxtb	r0, r0
   13b0e:	4770      	bx	lr
   13b10:	20001fff 	.word	0x20001fff

00013b14 <RADIO_SetCallbackBitmask>:
   13b14:	4a02      	ldr	r2, [pc, #8]	; (13b20 <RADIO_SetCallbackBitmask+0xc>)
   13b16:	7813      	ldrb	r3, [r2, #0]
   13b18:	4318      	orrs	r0, r3
   13b1a:	7010      	strb	r0, [r2, #0]
   13b1c:	4770      	bx	lr
   13b1e:	46c0      	nop			; (mov r8, r8)
   13b20:	20001ffe 	.word	0x20001ffe

00013b24 <RADIO_Transmit>:
   13b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b26:	4e12      	ldr	r6, [pc, #72]	; (13b70 <RADIO_Transmit+0x4c>)
   13b28:	0007      	movs	r7, r0
   13b2a:	7833      	ldrb	r3, [r6, #0]
   13b2c:	2404      	movs	r4, #4
   13b2e:	2b01      	cmp	r3, #1
   13b30:	d115      	bne.n	13b5e <RADIO_Transmit+0x3a>
   13b32:	4d10      	ldr	r5, [pc, #64]	; (13b74 <RADIO_Transmit+0x50>)
   13b34:	002b      	movs	r3, r5
   13b36:	332f      	adds	r3, #47	; 0x2f
   13b38:	7818      	ldrb	r0, [r3, #0]
   13b3a:	4b0f      	ldr	r3, [pc, #60]	; (13b78 <RADIO_Transmit+0x54>)
   13b3c:	4798      	blx	r3
   13b3e:	783a      	ldrb	r2, [r7, #0]
   13b40:	4b0e      	ldr	r3, [pc, #56]	; (13b7c <RADIO_Transmit+0x58>)
   13b42:	3541      	adds	r5, #65	; 0x41
   13b44:	701a      	strb	r2, [r3, #0]
   13b46:	4b0e      	ldr	r3, [pc, #56]	; (13b80 <RADIO_Transmit+0x5c>)
   13b48:	687a      	ldr	r2, [r7, #4]
   13b4a:	601a      	str	r2, [r3, #0]
   13b4c:	782d      	ldrb	r5, [r5, #0]
   13b4e:	4b0d      	ldr	r3, [pc, #52]	; (13b84 <RADIO_Transmit+0x60>)
   13b50:	2d00      	cmp	r5, #0
   13b52:	d006      	beq.n	13b62 <RADIO_Transmit+0x3e>
   13b54:	2203      	movs	r2, #3
   13b56:	2010      	movs	r0, #16
   13b58:	7032      	strb	r2, [r6, #0]
   13b5a:	2400      	movs	r4, #0
   13b5c:	4798      	blx	r3
   13b5e:	0020      	movs	r0, r4
   13b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13b62:	2202      	movs	r2, #2
   13b64:	0020      	movs	r0, r4
   13b66:	7032      	strb	r2, [r6, #0]
   13b68:	002c      	movs	r4, r5
   13b6a:	4798      	blx	r3
   13b6c:	e7f7      	b.n	13b5e <RADIO_Transmit+0x3a>
   13b6e:	46c0      	nop			; (mov r8, r8)
   13b70:	20001fff 	.word	0x20001fff
   13b74:	20001ad0 	.word	0x20001ad0
   13b78:	0000c7b9 	.word	0x0000c7b9
   13b7c:	200010ac 	.word	0x200010ac
   13b80:	200010a8 	.word	0x200010a8
   13b84:	00013a51 	.word	0x00013a51

00013b88 <Radio_FSKTxPayloadHandler>:
   13b88:	b570      	push	{r4, r5, r6, lr}
   13b8a:	4b1c      	ldr	r3, [pc, #112]	; (13bfc <Radio_FSKTxPayloadHandler+0x74>)
   13b8c:	000d      	movs	r5, r1
   13b8e:	4798      	blx	r3
   13b90:	4c1b      	ldr	r4, [pc, #108]	; (13c00 <Radio_FSKTxPayloadHandler+0x78>)
   13b92:	3457      	adds	r4, #87	; 0x57
   13b94:	7820      	ldrb	r0, [r4, #0]
   13b96:	b2c0      	uxtb	r0, r0
   13b98:	2800      	cmp	r0, #0
   13b9a:	d112      	bne.n	13bc2 <Radio_FSKTxPayloadHandler+0x3a>
   13b9c:	2d00      	cmp	r5, #0
   13b9e:	d007      	beq.n	13bb0 <Radio_FSKTxPayloadHandler+0x28>
   13ba0:	4918      	ldr	r1, [pc, #96]	; (13c04 <Radio_FSKTxPayloadHandler+0x7c>)
   13ba2:	4b19      	ldr	r3, [pc, #100]	; (13c08 <Radio_FSKTxPayloadHandler+0x80>)
   13ba4:	2d13      	cmp	r5, #19
   13ba6:	d806      	bhi.n	13bb6 <Radio_FSKTxPayloadHandler+0x2e>
   13ba8:	002a      	movs	r2, r5
   13baa:	6809      	ldr	r1, [r1, #0]
   13bac:	4798      	blx	r3
   13bae:	7025      	strb	r5, [r4, #0]
   13bb0:	4b16      	ldr	r3, [pc, #88]	; (13c0c <Radio_FSKTxPayloadHandler+0x84>)
   13bb2:	4798      	blx	r3
   13bb4:	bd70      	pop	{r4, r5, r6, pc}
   13bb6:	2214      	movs	r2, #20
   13bb8:	6809      	ldr	r1, [r1, #0]
   13bba:	4798      	blx	r3
   13bbc:	2314      	movs	r3, #20
   13bbe:	7023      	strb	r3, [r4, #0]
   13bc0:	e7f6      	b.n	13bb0 <Radio_FSKTxPayloadHandler+0x28>
   13bc2:	7823      	ldrb	r3, [r4, #0]
   13bc4:	429d      	cmp	r5, r3
   13bc6:	d0f3      	beq.n	13bb0 <Radio_FSKTxPayloadHandler+0x28>
   13bc8:	7822      	ldrb	r2, [r4, #0]
   13bca:	480e      	ldr	r0, [pc, #56]	; (13c04 <Radio_FSKTxPayloadHandler+0x7c>)
   13bcc:	1aaa      	subs	r2, r5, r2
   13bce:	b2d2      	uxtb	r2, r2
   13bd0:	4b0d      	ldr	r3, [pc, #52]	; (13c08 <Radio_FSKTxPayloadHandler+0x80>)
   13bd2:	2a14      	cmp	r2, #20
   13bd4:	d807      	bhi.n	13be6 <Radio_FSKTxPayloadHandler+0x5e>
   13bd6:	7826      	ldrb	r6, [r4, #0]
   13bd8:	7822      	ldrb	r2, [r4, #0]
   13bda:	6801      	ldr	r1, [r0, #0]
   13bdc:	1aaa      	subs	r2, r5, r2
   13bde:	b2d2      	uxtb	r2, r2
   13be0:	1989      	adds	r1, r1, r6
   13be2:	2000      	movs	r0, #0
   13be4:	e7e2      	b.n	13bac <Radio_FSKTxPayloadHandler+0x24>
   13be6:	7822      	ldrb	r2, [r4, #0]
   13be8:	6801      	ldr	r1, [r0, #0]
   13bea:	2000      	movs	r0, #0
   13bec:	1889      	adds	r1, r1, r2
   13bee:	2214      	movs	r2, #20
   13bf0:	4798      	blx	r3
   13bf2:	7823      	ldrb	r3, [r4, #0]
   13bf4:	3314      	adds	r3, #20
   13bf6:	b2db      	uxtb	r3, r3
   13bf8:	e7e1      	b.n	13bbe <Radio_FSKTxPayloadHandler+0x36>
   13bfa:	46c0      	nop			; (mov r8, r8)
   13bfc:	00002a0d 	.word	0x00002a0d
   13c00:	20001ad0 	.word	0x20001ad0
   13c04:	200010a8 	.word	0x200010a8
   13c08:	000067e1 	.word	0x000067e1
   13c0c:	00002a4d 	.word	0x00002a4d

00013c10 <RADIO_FSKSyncAddr>:
   13c10:	4b08      	ldr	r3, [pc, #32]	; (13c34 <RADIO_FSKSyncAddr+0x24>)
   13c12:	b510      	push	{r4, lr}
   13c14:	4798      	blx	r3
   13c16:	4b08      	ldr	r3, [pc, #32]	; (13c38 <RADIO_FSKSyncAddr+0x28>)
   13c18:	001a      	movs	r2, r3
   13c1a:	3234      	adds	r2, #52	; 0x34
   13c1c:	7812      	ldrb	r2, [r2, #0]
   13c1e:	2a00      	cmp	r2, #0
   13c20:	d104      	bne.n	13c2c <RADIO_FSKSyncAddr+0x1c>
   13c22:	0019      	movs	r1, r3
   13c24:	3357      	adds	r3, #87	; 0x57
   13c26:	312c      	adds	r1, #44	; 0x2c
   13c28:	700a      	strb	r2, [r1, #0]
   13c2a:	701a      	strb	r2, [r3, #0]
   13c2c:	4b03      	ldr	r3, [pc, #12]	; (13c3c <RADIO_FSKSyncAddr+0x2c>)
   13c2e:	4798      	blx	r3
   13c30:	bd10      	pop	{r4, pc}
   13c32:	46c0      	nop			; (mov r8, r8)
   13c34:	00002a0d 	.word	0x00002a0d
   13c38:	20001ad0 	.word	0x20001ad0
   13c3c:	00002a4d 	.word	0x00002a4d

00013c40 <RADIO_FSKFifoLevel>:
   13c40:	b570      	push	{r4, r5, r6, lr}
   13c42:	4b22      	ldr	r3, [pc, #136]	; (13ccc <RADIO_FSKFifoLevel+0x8c>)
   13c44:	4798      	blx	r3
   13c46:	4d22      	ldr	r5, [pc, #136]	; (13cd0 <RADIO_FSKFifoLevel+0x90>)
   13c48:	002a      	movs	r2, r5
   13c4a:	002b      	movs	r3, r5
   13c4c:	322c      	adds	r2, #44	; 0x2c
   13c4e:	3357      	adds	r3, #87	; 0x57
   13c50:	7810      	ldrb	r0, [r2, #0]
   13c52:	7819      	ldrb	r1, [r3, #0]
   13c54:	4288      	cmp	r0, r1
   13c56:	d105      	bne.n	13c64 <RADIO_FSKFifoLevel+0x24>
   13c58:	7812      	ldrb	r2, [r2, #0]
   13c5a:	2a00      	cmp	r2, #0
   13c5c:	d002      	beq.n	13c64 <RADIO_FSKFifoLevel+0x24>
   13c5e:	781b      	ldrb	r3, [r3, #0]
   13c60:	2b00      	cmp	r3, #0
   13c62:	d11f      	bne.n	13ca4 <RADIO_FSKFifoLevel+0x64>
   13c64:	0029      	movs	r1, r5
   13c66:	312c      	adds	r1, #44	; 0x2c
   13c68:	7808      	ldrb	r0, [r1, #0]
   13c6a:	b2c0      	uxtb	r0, r0
   13c6c:	2800      	cmp	r0, #0
   13c6e:	d102      	bne.n	13c76 <RADIO_FSKFifoLevel+0x36>
   13c70:	2201      	movs	r2, #1
   13c72:	4b18      	ldr	r3, [pc, #96]	; (13cd4 <RADIO_FSKFifoLevel+0x94>)
   13c74:	4798      	blx	r3
   13c76:	002e      	movs	r6, r5
   13c78:	002c      	movs	r4, r5
   13c7a:	362c      	adds	r6, #44	; 0x2c
   13c7c:	3457      	adds	r4, #87	; 0x57
   13c7e:	7833      	ldrb	r3, [r6, #0]
   13c80:	7822      	ldrb	r2, [r4, #0]
   13c82:	1a9b      	subs	r3, r3, r2
   13c84:	b2db      	uxtb	r3, r3
   13c86:	2b1f      	cmp	r3, #31
   13c88:	d80f      	bhi.n	13caa <RADIO_FSKFifoLevel+0x6a>
   13c8a:	7823      	ldrb	r3, [r4, #0]
   13c8c:	7832      	ldrb	r2, [r6, #0]
   13c8e:	7821      	ldrb	r1, [r4, #0]
   13c90:	2000      	movs	r0, #0
   13c92:	1a52      	subs	r2, r2, r1
   13c94:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   13c96:	b2d2      	uxtb	r2, r2
   13c98:	18c9      	adds	r1, r1, r3
   13c9a:	4b0e      	ldr	r3, [pc, #56]	; (13cd4 <RADIO_FSKFifoLevel+0x94>)
   13c9c:	4798      	blx	r3
   13c9e:	7833      	ldrb	r3, [r6, #0]
   13ca0:	b2db      	uxtb	r3, r3
   13ca2:	7023      	strb	r3, [r4, #0]
   13ca4:	4b0c      	ldr	r3, [pc, #48]	; (13cd8 <RADIO_FSKFifoLevel+0x98>)
   13ca6:	4798      	blx	r3
   13ca8:	bd70      	pop	{r4, r5, r6, pc}
   13caa:	7833      	ldrb	r3, [r6, #0]
   13cac:	7822      	ldrb	r2, [r4, #0]
   13cae:	1a9b      	subs	r3, r3, r2
   13cb0:	b2db      	uxtb	r3, r3
   13cb2:	2b20      	cmp	r3, #32
   13cb4:	d9f6      	bls.n	13ca4 <RADIO_FSKFifoLevel+0x64>
   13cb6:	7823      	ldrb	r3, [r4, #0]
   13cb8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   13cba:	2220      	movs	r2, #32
   13cbc:	18c9      	adds	r1, r1, r3
   13cbe:	2000      	movs	r0, #0
   13cc0:	4b04      	ldr	r3, [pc, #16]	; (13cd4 <RADIO_FSKFifoLevel+0x94>)
   13cc2:	4798      	blx	r3
   13cc4:	7823      	ldrb	r3, [r4, #0]
   13cc6:	3320      	adds	r3, #32
   13cc8:	e7ea      	b.n	13ca0 <RADIO_FSKFifoLevel+0x60>
   13cca:	46c0      	nop			; (mov r8, r8)
   13ccc:	00002a0d 	.word	0x00002a0d
   13cd0:	20001ad0 	.word	0x20001ad0
   13cd4:	00006821 	.word	0x00006821
   13cd8:	00002a4d 	.word	0x00002a4d

00013cdc <RADIO_FSKFifoEmpty>:
   13cdc:	b510      	push	{r4, lr}
   13cde:	4b03      	ldr	r3, [pc, #12]	; (13cec <RADIO_FSKFifoEmpty+0x10>)
   13ce0:	7819      	ldrb	r1, [r3, #0]
   13ce2:	4b03      	ldr	r3, [pc, #12]	; (13cf0 <RADIO_FSKFifoEmpty+0x14>)
   13ce4:	6818      	ldr	r0, [r3, #0]
   13ce6:	4b03      	ldr	r3, [pc, #12]	; (13cf4 <RADIO_FSKFifoEmpty+0x18>)
   13ce8:	4798      	blx	r3
   13cea:	bd10      	pop	{r4, pc}
   13cec:	200010ac 	.word	0x200010ac
   13cf0:	200010a8 	.word	0x200010a8
   13cf4:	00013b89 	.word	0x00013b89

00013cf8 <RADIO_GetData>:
   13cf8:	4b03      	ldr	r3, [pc, #12]	; (13d08 <RADIO_GetData+0x10>)
   13cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13cfc:	332c      	adds	r3, #44	; 0x2c
   13cfe:	6002      	str	r2, [r0, #0]
   13d00:	781b      	ldrb	r3, [r3, #0]
   13d02:	2000      	movs	r0, #0
   13d04:	800b      	strh	r3, [r1, #0]
   13d06:	4770      	bx	lr
   13d08:	20001ad0 	.word	0x20001ad0

00013d0c <Radio_EnableRfControl>:
   13d0c:	b510      	push	{r4, lr}
   13d0e:	4b08      	ldr	r3, [pc, #32]	; (13d30 <Radio_EnableRfControl+0x24>)
   13d10:	0001      	movs	r1, r0
   13d12:	681a      	ldr	r2, [r3, #0]
   13d14:	4807      	ldr	r0, [pc, #28]	; (13d34 <Radio_EnableRfControl+0x28>)
   13d16:	4c08      	ldr	r4, [pc, #32]	; (13d38 <Radio_EnableRfControl+0x2c>)
   13d18:	1812      	adds	r2, r2, r0
   13d1a:	2000      	movs	r0, #0
   13d1c:	42a2      	cmp	r2, r4
   13d1e:	d804      	bhi.n	13d2a <Radio_EnableRfControl+0x1e>
   13d20:	3305      	adds	r3, #5
   13d22:	7fdb      	ldrb	r3, [r3, #31]
   13d24:	1e58      	subs	r0, r3, #1
   13d26:	4183      	sbcs	r3, r0
   13d28:	1c58      	adds	r0, r3, #1
   13d2a:	4b04      	ldr	r3, [pc, #16]	; (13d3c <Radio_EnableRfControl+0x30>)
   13d2c:	4798      	blx	r3
   13d2e:	bd10      	pop	{r4, pc}
   13d30:	20001ad0 	.word	0x20001ad0
   13d34:	cc9eec80 	.word	0xcc9eec80
   13d38:	096ae380 	.word	0x096ae380
   13d3c:	0000688d 	.word	0x0000688d

00013d40 <RADIO_RxHandler>:
   13d40:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13d42:	4b33      	ldr	r3, [pc, #204]	; (13e10 <RADIO_RxHandler+0xd0>)
   13d44:	2000      	movs	r0, #0
   13d46:	4798      	blx	r3
   13d48:	4e32      	ldr	r6, [pc, #200]	; (13e14 <RADIO_RxHandler+0xd4>)
   13d4a:	4b33      	ldr	r3, [pc, #204]	; (13e18 <RADIO_RxHandler+0xd8>)
   13d4c:	8830      	ldrh	r0, [r6, #0]
   13d4e:	2800      	cmp	r0, #0
   13d50:	d100      	bne.n	13d54 <RADIO_RxHandler+0x14>
   13d52:	3004      	adds	r0, #4
   13d54:	4798      	blx	r3
   13d56:	4c31      	ldr	r4, [pc, #196]	; (13e1c <RADIO_RxHandler+0xdc>)
   13d58:	4d31      	ldr	r5, [pc, #196]	; (13e20 <RADIO_RxHandler+0xe0>)
   13d5a:	0023      	movs	r3, r4
   13d5c:	3334      	adds	r3, #52	; 0x34
   13d5e:	7819      	ldrb	r1, [r3, #0]
   13d60:	2901      	cmp	r1, #1
   13d62:	d122      	bne.n	13daa <RADIO_RxHandler+0x6a>
   13d64:	2022      	movs	r0, #34	; 0x22
   13d66:	47a8      	blx	r5
   13d68:	2100      	movs	r1, #0
   13d6a:	2040      	movs	r0, #64	; 0x40
   13d6c:	47a8      	blx	r5
   13d6e:	2100      	movs	r1, #0
   13d70:	2041      	movs	r0, #65	; 0x41
   13d72:	47a8      	blx	r5
   13d74:	8832      	ldrh	r2, [r6, #0]
   13d76:	4b2b      	ldr	r3, [pc, #172]	; (13e24 <RADIO_RxHandler+0xe4>)
   13d78:	2a00      	cmp	r2, #0
   13d7a:	d131      	bne.n	13de0 <RADIO_RxHandler+0xa0>
   13d7c:	0021      	movs	r1, r4
   13d7e:	2005      	movs	r0, #5
   13d80:	3134      	adds	r1, #52	; 0x34
   13d82:	7809      	ldrb	r1, [r1, #0]
   13d84:	4798      	blx	r3
   13d86:	68e3      	ldr	r3, [r4, #12]
   13d88:	2b00      	cmp	r3, #0
   13d8a:	d00c      	beq.n	13da6 <RADIO_RxHandler+0x66>
   13d8c:	8832      	ldrh	r2, [r6, #0]
   13d8e:	2a00      	cmp	r2, #0
   13d90:	d009      	beq.n	13da6 <RADIO_RxHandler+0x66>
   13d92:	21fa      	movs	r1, #250	; 0xfa
   13d94:	2200      	movs	r2, #0
   13d96:	342f      	adds	r4, #47	; 0x2f
   13d98:	0089      	lsls	r1, r1, #2
   13d9a:	7820      	ldrb	r0, [r4, #0]
   13d9c:	4359      	muls	r1, r3
   13d9e:	9200      	str	r2, [sp, #0]
   13da0:	4b21      	ldr	r3, [pc, #132]	; (13e28 <RADIO_RxHandler+0xe8>)
   13da2:	4c22      	ldr	r4, [pc, #136]	; (13e2c <RADIO_RxHandler+0xec>)
   13da4:	47a0      	blx	r4
   13da6:	2000      	movs	r0, #0
   13da8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   13daa:	0023      	movs	r3, r4
   13dac:	3338      	adds	r3, #56	; 0x38
   13dae:	7819      	ldrb	r1, [r3, #0]
   13db0:	2012      	movs	r0, #18
   13db2:	47a8      	blx	r5
   13db4:	0023      	movs	r3, r4
   13db6:	3339      	adds	r3, #57	; 0x39
   13db8:	7819      	ldrb	r1, [r3, #0]
   13dba:	2013      	movs	r0, #19
   13dbc:	47a8      	blx	r5
   13dbe:	210c      	movs	r1, #12
   13dc0:	2040      	movs	r0, #64	; 0x40
   13dc2:	47a8      	blx	r5
   13dc4:	2100      	movs	r1, #0
   13dc6:	2041      	movs	r0, #65	; 0x41
   13dc8:	47a8      	blx	r5
   13dca:	0022      	movs	r2, r4
   13dcc:	2300      	movs	r3, #0
   13dce:	3256      	adds	r2, #86	; 0x56
   13dd0:	7013      	strb	r3, [r2, #0]
   13dd2:	0022      	movs	r2, r4
   13dd4:	322c      	adds	r2, #44	; 0x2c
   13dd6:	7013      	strb	r3, [r2, #0]
   13dd8:	0022      	movs	r2, r4
   13dda:	3257      	adds	r2, #87	; 0x57
   13ddc:	7013      	strb	r3, [r2, #0]
   13dde:	e7c9      	b.n	13d74 <RADIO_RxHandler+0x34>
   13de0:	0022      	movs	r2, r4
   13de2:	3234      	adds	r2, #52	; 0x34
   13de4:	7811      	ldrb	r1, [r2, #0]
   13de6:	2200      	movs	r2, #0
   13de8:	2901      	cmp	r1, #1
   13dea:	d101      	bne.n	13df0 <RADIO_RxHandler+0xb0>
   13dec:	2006      	movs	r0, #6
   13dee:	e7c9      	b.n	13d84 <RADIO_RxHandler+0x44>
   13df0:	0011      	movs	r1, r2
   13df2:	2005      	movs	r0, #5
   13df4:	4798      	blx	r3
   13df6:	21fa      	movs	r1, #250	; 0xfa
   13df8:	8833      	ldrh	r3, [r6, #0]
   13dfa:	0089      	lsls	r1, r1, #2
   13dfc:	4359      	muls	r1, r3
   13dfe:	0023      	movs	r3, r4
   13e00:	2200      	movs	r2, #0
   13e02:	332e      	adds	r3, #46	; 0x2e
   13e04:	7818      	ldrb	r0, [r3, #0]
   13e06:	4d09      	ldr	r5, [pc, #36]	; (13e2c <RADIO_RxHandler+0xec>)
   13e08:	9200      	str	r2, [sp, #0]
   13e0a:	4b09      	ldr	r3, [pc, #36]	; (13e30 <RADIO_RxHandler+0xf0>)
   13e0c:	47a8      	blx	r5
   13e0e:	e7ba      	b.n	13d86 <RADIO_RxHandler+0x46>
   13e10:	00013d0d 	.word	0x00013d0d
   13e14:	2000109c 	.word	0x2000109c
   13e18:	00013491 	.word	0x00013491
   13e1c:	20001ad0 	.word	0x20001ad0
   13e20:	0000678d 	.word	0x0000678d
   13e24:	0000cb11 	.word	0x0000cb11
   13e28:	00013e69 	.word	0x00013e69
   13e2c:	0000c4b5 	.word	0x0000c4b5
   13e30:	00013ef9 	.word	0x00013ef9

00013e34 <Radio_DisableRfControl>:
   13e34:	b510      	push	{r4, lr}
   13e36:	4b08      	ldr	r3, [pc, #32]	; (13e58 <Radio_DisableRfControl+0x24>)
   13e38:	0001      	movs	r1, r0
   13e3a:	681a      	ldr	r2, [r3, #0]
   13e3c:	4807      	ldr	r0, [pc, #28]	; (13e5c <Radio_DisableRfControl+0x28>)
   13e3e:	4c08      	ldr	r4, [pc, #32]	; (13e60 <Radio_DisableRfControl+0x2c>)
   13e40:	1812      	adds	r2, r2, r0
   13e42:	2000      	movs	r0, #0
   13e44:	42a2      	cmp	r2, r4
   13e46:	d804      	bhi.n	13e52 <Radio_DisableRfControl+0x1e>
   13e48:	3305      	adds	r3, #5
   13e4a:	7fdb      	ldrb	r3, [r3, #31]
   13e4c:	1e58      	subs	r0, r3, #1
   13e4e:	4183      	sbcs	r3, r0
   13e50:	1c58      	adds	r0, r3, #1
   13e52:	4b04      	ldr	r3, [pc, #16]	; (13e64 <Radio_DisableRfControl+0x30>)
   13e54:	4798      	blx	r3
   13e56:	bd10      	pop	{r4, pc}
   13e58:	20001ad0 	.word	0x20001ad0
   13e5c:	cc9eec80 	.word	0xcc9eec80
   13e60:	096ae380 	.word	0x096ae380
   13e64:	000068a1 	.word	0x000068a1

00013e68 <Radio_WatchdogTimeout>:
   13e68:	b510      	push	{r4, lr}
   13e6a:	4b0e      	ldr	r3, [pc, #56]	; (13ea4 <Radio_WatchdogTimeout+0x3c>)
   13e6c:	781a      	ldrb	r2, [r3, #0]
   13e6e:	2a04      	cmp	r2, #4
   13e70:	d10b      	bne.n	13e8a <Radio_WatchdogTimeout+0x22>
   13e72:	2320      	movs	r3, #32
   13e74:	4a0c      	ldr	r2, [pc, #48]	; (13ea8 <Radio_WatchdogTimeout+0x40>)
   13e76:	2000      	movs	r0, #0
   13e78:	8811      	ldrh	r1, [r2, #0]
   13e7a:	430b      	orrs	r3, r1
   13e7c:	8013      	strh	r3, [r2, #0]
   13e7e:	4b0b      	ldr	r3, [pc, #44]	; (13eac <Radio_WatchdogTimeout+0x44>)
   13e80:	4798      	blx	r3
   13e82:	2002      	movs	r0, #2
   13e84:	4b0a      	ldr	r3, [pc, #40]	; (13eb0 <Radio_WatchdogTimeout+0x48>)
   13e86:	4798      	blx	r3
   13e88:	bd10      	pop	{r4, pc}
   13e8a:	781b      	ldrb	r3, [r3, #0]
   13e8c:	2b02      	cmp	r3, #2
   13e8e:	d1fb      	bne.n	13e88 <Radio_WatchdogTimeout+0x20>
   13e90:	4a05      	ldr	r2, [pc, #20]	; (13ea8 <Radio_WatchdogTimeout+0x40>)
   13e92:	330e      	adds	r3, #14
   13e94:	8811      	ldrh	r1, [r2, #0]
   13e96:	2001      	movs	r0, #1
   13e98:	430b      	orrs	r3, r1
   13e9a:	8013      	strh	r3, [r2, #0]
   13e9c:	4b03      	ldr	r3, [pc, #12]	; (13eac <Radio_WatchdogTimeout+0x44>)
   13e9e:	4798      	blx	r3
   13ea0:	2001      	movs	r0, #1
   13ea2:	e7ef      	b.n	13e84 <Radio_WatchdogTimeout+0x1c>
   13ea4:	20001fff 	.word	0x20001fff
   13ea8:	20001ffc 	.word	0x20001ffc
   13eac:	00013e35 	.word	0x00013e35
   13eb0:	00013a51 	.word	0x00013a51

00013eb4 <RADIO_RxTimeout>:
   13eb4:	b510      	push	{r4, lr}
   13eb6:	4b0a      	ldr	r3, [pc, #40]	; (13ee0 <RADIO_RxTimeout+0x2c>)
   13eb8:	332f      	adds	r3, #47	; 0x2f
   13eba:	7818      	ldrb	r0, [r3, #0]
   13ebc:	4b09      	ldr	r3, [pc, #36]	; (13ee4 <RADIO_RxTimeout+0x30>)
   13ebe:	4798      	blx	r3
   13ec0:	2000      	movs	r0, #0
   13ec2:	4b09      	ldr	r3, [pc, #36]	; (13ee8 <RADIO_RxTimeout+0x34>)
   13ec4:	4798      	blx	r3
   13ec6:	2180      	movs	r1, #128	; 0x80
   13ec8:	2012      	movs	r0, #18
   13eca:	4b08      	ldr	r3, [pc, #32]	; (13eec <RADIO_RxTimeout+0x38>)
   13ecc:	4798      	blx	r3
   13ece:	2340      	movs	r3, #64	; 0x40
   13ed0:	4a07      	ldr	r2, [pc, #28]	; (13ef0 <RADIO_RxTimeout+0x3c>)
   13ed2:	2002      	movs	r0, #2
   13ed4:	8811      	ldrh	r1, [r2, #0]
   13ed6:	430b      	orrs	r3, r1
   13ed8:	8013      	strh	r3, [r2, #0]
   13eda:	4b06      	ldr	r3, [pc, #24]	; (13ef4 <RADIO_RxTimeout+0x40>)
   13edc:	4798      	blx	r3
   13ede:	bd10      	pop	{r4, pc}
   13ee0:	20001ad0 	.word	0x20001ad0
   13ee4:	0000c7b9 	.word	0x0000c7b9
   13ee8:	00013e35 	.word	0x00013e35
   13eec:	0000678d 	.word	0x0000678d
   13ef0:	20001ffc 	.word	0x20001ffc
   13ef4:	00013a51 	.word	0x00013a51

00013ef8 <Radio_RxFSKTimeout>:
   13ef8:	b510      	push	{r4, lr}
   13efa:	4b08      	ldr	r3, [pc, #32]	; (13f1c <Radio_RxFSKTimeout+0x24>)
   13efc:	332f      	adds	r3, #47	; 0x2f
   13efe:	7818      	ldrb	r0, [r3, #0]
   13f00:	4b07      	ldr	r3, [pc, #28]	; (13f20 <Radio_RxFSKTimeout+0x28>)
   13f02:	4798      	blx	r3
   13f04:	2000      	movs	r0, #0
   13f06:	4b07      	ldr	r3, [pc, #28]	; (13f24 <Radio_RxFSKTimeout+0x2c>)
   13f08:	4798      	blx	r3
   13f0a:	2380      	movs	r3, #128	; 0x80
   13f0c:	4a06      	ldr	r2, [pc, #24]	; (13f28 <Radio_RxFSKTimeout+0x30>)
   13f0e:	2002      	movs	r0, #2
   13f10:	8811      	ldrh	r1, [r2, #0]
   13f12:	430b      	orrs	r3, r1
   13f14:	8013      	strh	r3, [r2, #0]
   13f16:	4b05      	ldr	r3, [pc, #20]	; (13f2c <Radio_RxFSKTimeout+0x34>)
   13f18:	4798      	blx	r3
   13f1a:	bd10      	pop	{r4, pc}
   13f1c:	20001ad0 	.word	0x20001ad0
   13f20:	0000c7b9 	.word	0x0000c7b9
   13f24:	00013e35 	.word	0x00013e35
   13f28:	20001ffc 	.word	0x20001ffc
   13f2c:	00013a51 	.word	0x00013a51

00013f30 <RADIO_TxDone>:
   13f30:	b570      	push	{r4, r5, r6, lr}
   13f32:	4b14      	ldr	r3, [pc, #80]	; (13f84 <RADIO_TxDone+0x54>)
   13f34:	332f      	adds	r3, #47	; 0x2f
   13f36:	7818      	ldrb	r0, [r3, #0]
   13f38:	4b13      	ldr	r3, [pc, #76]	; (13f88 <RADIO_TxDone+0x58>)
   13f3a:	4798      	blx	r3
   13f3c:	2001      	movs	r0, #1
   13f3e:	4b13      	ldr	r3, [pc, #76]	; (13f8c <RADIO_TxDone+0x5c>)
   13f40:	4798      	blx	r3
   13f42:	4b13      	ldr	r3, [pc, #76]	; (13f90 <RADIO_TxDone+0x60>)
   13f44:	2108      	movs	r1, #8
   13f46:	2012      	movs	r0, #18
   13f48:	4798      	blx	r3
   13f4a:	4b12      	ldr	r3, [pc, #72]	; (13f94 <RADIO_TxDone+0x64>)
   13f4c:	781a      	ldrb	r2, [r3, #0]
   13f4e:	4b12      	ldr	r3, [pc, #72]	; (13f98 <RADIO_TxDone+0x68>)
   13f50:	2a02      	cmp	r2, #2
   13f52:	d002      	beq.n	13f5a <RADIO_TxDone+0x2a>
   13f54:	881a      	ldrh	r2, [r3, #0]
   13f56:	0692      	lsls	r2, r2, #26
   13f58:	d413      	bmi.n	13f82 <RADIO_TxDone+0x52>
   13f5a:	2001      	movs	r0, #1
   13f5c:	881a      	ldrh	r2, [r3, #0]
   13f5e:	4302      	orrs	r2, r0
   13f60:	801a      	strh	r2, [r3, #0]
   13f62:	4b0e      	ldr	r3, [pc, #56]	; (13f9c <RADIO_TxDone+0x6c>)
   13f64:	4798      	blx	r3
   13f66:	4b0e      	ldr	r3, [pc, #56]	; (13fa0 <RADIO_TxDone+0x70>)
   13f68:	4798      	blx	r3
   13f6a:	4c0e      	ldr	r4, [pc, #56]	; (13fa4 <RADIO_TxDone+0x74>)
   13f6c:	4d0e      	ldr	r5, [pc, #56]	; (13fa8 <RADIO_TxDone+0x78>)
   13f6e:	6822      	ldr	r2, [r4, #0]
   13f70:	6863      	ldr	r3, [r4, #4]
   13f72:	1a80      	subs	r0, r0, r2
   13f74:	4199      	sbcs	r1, r3
   13f76:	22fa      	movs	r2, #250	; 0xfa
   13f78:	2300      	movs	r3, #0
   13f7a:	0092      	lsls	r2, r2, #2
   13f7c:	47a8      	blx	r5
   13f7e:	6020      	str	r0, [r4, #0]
   13f80:	6061      	str	r1, [r4, #4]
   13f82:	bd70      	pop	{r4, r5, r6, pc}
   13f84:	20001ad0 	.word	0x20001ad0
   13f88:	0000c7b9 	.word	0x0000c7b9
   13f8c:	00013e35 	.word	0x00013e35
   13f90:	0000678d 	.word	0x0000678d
   13f94:	20001fff 	.word	0x20001fff
   13f98:	20001ffc 	.word	0x20001ffc
   13f9c:	00013a51 	.word	0x00013a51
   13fa0:	0000c45d 	.word	0x0000c45d
   13fa4:	200010a0 	.word	0x200010a0
   13fa8:	00014ed1 	.word	0x00014ed1

00013fac <RADIO_FSKPacketSent>:
   13fac:	b570      	push	{r4, r5, r6, lr}
   13fae:	4b13      	ldr	r3, [pc, #76]	; (13ffc <RADIO_FSKPacketSent+0x50>)
   13fb0:	203f      	movs	r0, #63	; 0x3f
   13fb2:	4798      	blx	r3
   13fb4:	0703      	lsls	r3, r0, #28
   13fb6:	d51f      	bpl.n	13ff8 <RADIO_FSKPacketSent+0x4c>
   13fb8:	4b11      	ldr	r3, [pc, #68]	; (14000 <RADIO_FSKPacketSent+0x54>)
   13fba:	332f      	adds	r3, #47	; 0x2f
   13fbc:	7818      	ldrb	r0, [r3, #0]
   13fbe:	4b11      	ldr	r3, [pc, #68]	; (14004 <RADIO_FSKPacketSent+0x58>)
   13fc0:	4798      	blx	r3
   13fc2:	4b11      	ldr	r3, [pc, #68]	; (14008 <RADIO_FSKPacketSent+0x5c>)
   13fc4:	2001      	movs	r0, #1
   13fc6:	4798      	blx	r3
   13fc8:	4b10      	ldr	r3, [pc, #64]	; (1400c <RADIO_FSKPacketSent+0x60>)
   13fca:	4c11      	ldr	r4, [pc, #68]	; (14010 <RADIO_FSKPacketSent+0x64>)
   13fcc:	781b      	ldrb	r3, [r3, #0]
   13fce:	2b02      	cmp	r3, #2
   13fd0:	d002      	beq.n	13fd8 <RADIO_FSKPacketSent+0x2c>
   13fd2:	8823      	ldrh	r3, [r4, #0]
   13fd4:	069b      	lsls	r3, r3, #26
   13fd6:	d40f      	bmi.n	13ff8 <RADIO_FSKPacketSent+0x4c>
   13fd8:	4b0e      	ldr	r3, [pc, #56]	; (14014 <RADIO_FSKPacketSent+0x68>)
   13fda:	4798      	blx	r3
   13fdc:	4b0e      	ldr	r3, [pc, #56]	; (14018 <RADIO_FSKPacketSent+0x6c>)
   13fde:	681d      	ldr	r5, [r3, #0]
   13fe0:	685e      	ldr	r6, [r3, #4]
   13fe2:	1b40      	subs	r0, r0, r5
   13fe4:	41b1      	sbcs	r1, r6
   13fe6:	6018      	str	r0, [r3, #0]
   13fe8:	6059      	str	r1, [r3, #4]
   13fea:	4b0c      	ldr	r3, [pc, #48]	; (1401c <RADIO_FSKPacketSent+0x70>)
   13fec:	2001      	movs	r0, #1
   13fee:	4798      	blx	r3
   13ff0:	2304      	movs	r3, #4
   13ff2:	8822      	ldrh	r2, [r4, #0]
   13ff4:	4313      	orrs	r3, r2
   13ff6:	8023      	strh	r3, [r4, #0]
   13ff8:	bd70      	pop	{r4, r5, r6, pc}
   13ffa:	46c0      	nop			; (mov r8, r8)
   13ffc:	000067b5 	.word	0x000067b5
   14000:	20001ad0 	.word	0x20001ad0
   14004:	0000c7b9 	.word	0x0000c7b9
   14008:	00013e35 	.word	0x00013e35
   1400c:	20001fff 	.word	0x20001fff
   14010:	20001ffc 	.word	0x20001ffc
   14014:	0000c45d 	.word	0x0000c45d
   14018:	200010a0 	.word	0x200010a0
   1401c:	00013a51 	.word	0x00013a51

00014020 <RADIO_RxDone>:
   14020:	b570      	push	{r4, r5, r6, lr}
   14022:	2012      	movs	r0, #18
   14024:	4e16      	ldr	r6, [pc, #88]	; (14080 <RADIO_RxDone+0x60>)
   14026:	47b0      	blx	r6
   14028:	4b16      	ldr	r3, [pc, #88]	; (14084 <RADIO_RxDone+0x64>)
   1402a:	0005      	movs	r5, r0
   1402c:	2170      	movs	r1, #112	; 0x70
   1402e:	2012      	movs	r0, #18
   14030:	4798      	blx	r3
   14032:	2350      	movs	r3, #80	; 0x50
   14034:	402b      	ands	r3, r5
   14036:	2b50      	cmp	r3, #80	; 0x50
   14038:	d119      	bne.n	1406e <RADIO_RxDone+0x4e>
   1403a:	4c13      	ldr	r4, [pc, #76]	; (14088 <RADIO_RxDone+0x68>)
   1403c:	0023      	movs	r3, r4
   1403e:	332f      	adds	r3, #47	; 0x2f
   14040:	7818      	ldrb	r0, [r3, #0]
   14042:	4b12      	ldr	r3, [pc, #72]	; (1408c <RADIO_RxDone+0x6c>)
   14044:	4798      	blx	r3
   14046:	4b12      	ldr	r3, [pc, #72]	; (14090 <RADIO_RxDone+0x70>)
   14048:	2000      	movs	r0, #0
   1404a:	4798      	blx	r3
   1404c:	3404      	adds	r4, #4
   1404e:	201c      	movs	r0, #28
   14050:	47b0      	blx	r6
   14052:	7fe2      	ldrb	r2, [r4, #31]
   14054:	4b0f      	ldr	r3, [pc, #60]	; (14094 <RADIO_RxDone+0x74>)
   14056:	4910      	ldr	r1, [pc, #64]	; (14098 <RADIO_RxDone+0x78>)
   14058:	2a00      	cmp	r2, #0
   1405a:	d003      	beq.n	14064 <RADIO_RxDone+0x44>
   1405c:	06aa      	lsls	r2, r5, #26
   1405e:	d407      	bmi.n	14070 <RADIO_RxDone+0x50>
   14060:	0642      	lsls	r2, r0, #25
   14062:	d505      	bpl.n	14070 <RADIO_RxDone+0x50>
   14064:	2002      	movs	r0, #2
   14066:	881a      	ldrh	r2, [r3, #0]
   14068:	4302      	orrs	r2, r0
   1406a:	801a      	strh	r2, [r3, #0]
   1406c:	4788      	blx	r1
   1406e:	bd70      	pop	{r4, r5, r6, pc}
   14070:	2280      	movs	r2, #128	; 0x80
   14072:	8818      	ldrh	r0, [r3, #0]
   14074:	0052      	lsls	r2, r2, #1
   14076:	4302      	orrs	r2, r0
   14078:	801a      	strh	r2, [r3, #0]
   1407a:	2002      	movs	r0, #2
   1407c:	e7f6      	b.n	1406c <RADIO_RxDone+0x4c>
   1407e:	46c0      	nop			; (mov r8, r8)
   14080:	000067b5 	.word	0x000067b5
   14084:	0000678d 	.word	0x0000678d
   14088:	20001ad0 	.word	0x20001ad0
   1408c:	0000c7b9 	.word	0x0000c7b9
   14090:	00013e35 	.word	0x00013e35
   14094:	20001ffc 	.word	0x20001ffc
   14098:	00013a51 	.word	0x00013a51

0001409c <RADIO_FSKPayloadReady>:
   1409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1409e:	203f      	movs	r0, #63	; 0x3f
   140a0:	4b39      	ldr	r3, [pc, #228]	; (14188 <RADIO_FSKPayloadReady+0xec>)
   140a2:	4798      	blx	r3
   140a4:	0743      	lsls	r3, r0, #29
   140a6:	d559      	bpl.n	1415c <RADIO_FSKPayloadReady+0xc0>
   140a8:	4c38      	ldr	r4, [pc, #224]	; (1418c <RADIO_FSKPayloadReady+0xf0>)
   140aa:	4d39      	ldr	r5, [pc, #228]	; (14190 <RADIO_FSKPayloadReady+0xf4>)
   140ac:	1d23      	adds	r3, r4, #4
   140ae:	7fdb      	ldrb	r3, [r3, #31]
   140b0:	2b01      	cmp	r3, #1
   140b2:	d154      	bne.n	1415e <RADIO_FSKPayloadReady+0xc2>
   140b4:	2202      	movs	r2, #2
   140b6:	4210      	tst	r0, r2
   140b8:	d048      	beq.n	1414c <RADIO_FSKPayloadReady+0xb0>
   140ba:	0023      	movs	r3, r4
   140bc:	332f      	adds	r3, #47	; 0x2f
   140be:	7818      	ldrb	r0, [r3, #0]
   140c0:	4e34      	ldr	r6, [pc, #208]	; (14194 <RADIO_FSKPayloadReady+0xf8>)
   140c2:	47b0      	blx	r6
   140c4:	0023      	movs	r3, r4
   140c6:	332e      	adds	r3, #46	; 0x2e
   140c8:	7818      	ldrb	r0, [r3, #0]
   140ca:	47b0      	blx	r6
   140cc:	4b32      	ldr	r3, [pc, #200]	; (14198 <RADIO_FSKPayloadReady+0xfc>)
   140ce:	4798      	blx	r3
   140d0:	0022      	movs	r2, r4
   140d2:	0023      	movs	r3, r4
   140d4:	322c      	adds	r2, #44	; 0x2c
   140d6:	3357      	adds	r3, #87	; 0x57
   140d8:	7810      	ldrb	r0, [r2, #0]
   140da:	7819      	ldrb	r1, [r3, #0]
   140dc:	4288      	cmp	r0, r1
   140de:	d105      	bne.n	140ec <RADIO_FSKPayloadReady+0x50>
   140e0:	7812      	ldrb	r2, [r2, #0]
   140e2:	2a00      	cmp	r2, #0
   140e4:	d002      	beq.n	140ec <RADIO_FSKPayloadReady+0x50>
   140e6:	781b      	ldrb	r3, [r3, #0]
   140e8:	2b00      	cmp	r3, #0
   140ea:	d118      	bne.n	1411e <RADIO_FSKPayloadReady+0x82>
   140ec:	0021      	movs	r1, r4
   140ee:	312c      	adds	r1, #44	; 0x2c
   140f0:	7808      	ldrb	r0, [r1, #0]
   140f2:	b2c0      	uxtb	r0, r0
   140f4:	2800      	cmp	r0, #0
   140f6:	d102      	bne.n	140fe <RADIO_FSKPayloadReady+0x62>
   140f8:	2201      	movs	r2, #1
   140fa:	4b28      	ldr	r3, [pc, #160]	; (1419c <RADIO_FSKPayloadReady+0x100>)
   140fc:	4798      	blx	r3
   140fe:	0026      	movs	r6, r4
   14100:	0027      	movs	r7, r4
   14102:	3657      	adds	r6, #87	; 0x57
   14104:	7830      	ldrb	r0, [r6, #0]
   14106:	372c      	adds	r7, #44	; 0x2c
   14108:	b2c0      	uxtb	r0, r0
   1410a:	2800      	cmp	r0, #0
   1410c:	d110      	bne.n	14130 <RADIO_FSKPayloadReady+0x94>
   1410e:	783a      	ldrb	r2, [r7, #0]
   14110:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14112:	b2d2      	uxtb	r2, r2
   14114:	4b21      	ldr	r3, [pc, #132]	; (1419c <RADIO_FSKPayloadReady+0x100>)
   14116:	4798      	blx	r3
   14118:	783b      	ldrb	r3, [r7, #0]
   1411a:	b2db      	uxtb	r3, r3
   1411c:	7033      	strb	r3, [r6, #0]
   1411e:	4b20      	ldr	r3, [pc, #128]	; (141a0 <RADIO_FSKPayloadReady+0x104>)
   14120:	4798      	blx	r3
   14122:	4b20      	ldr	r3, [pc, #128]	; (141a4 <RADIO_FSKPayloadReady+0x108>)
   14124:	2000      	movs	r0, #0
   14126:	4798      	blx	r3
   14128:	2308      	movs	r3, #8
   1412a:	882a      	ldrh	r2, [r5, #0]
   1412c:	4313      	orrs	r3, r2
   1412e:	e011      	b.n	14154 <RADIO_FSKPayloadReady+0xb8>
   14130:	783b      	ldrb	r3, [r7, #0]
   14132:	7832      	ldrb	r2, [r6, #0]
   14134:	1a9b      	subs	r3, r3, r2
   14136:	2b00      	cmp	r3, #0
   14138:	ddf1      	ble.n	1411e <RADIO_FSKPayloadReady+0x82>
   1413a:	7833      	ldrb	r3, [r6, #0]
   1413c:	783a      	ldrb	r2, [r7, #0]
   1413e:	7831      	ldrb	r1, [r6, #0]
   14140:	2000      	movs	r0, #0
   14142:	1a52      	subs	r2, r2, r1
   14144:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14146:	b2d2      	uxtb	r2, r2
   14148:	18c9      	adds	r1, r1, r3
   1414a:	e7e3      	b.n	14114 <RADIO_FSKPayloadReady+0x78>
   1414c:	2380      	movs	r3, #128	; 0x80
   1414e:	8829      	ldrh	r1, [r5, #0]
   14150:	005b      	lsls	r3, r3, #1
   14152:	430b      	orrs	r3, r1
   14154:	802b      	strh	r3, [r5, #0]
   14156:	2002      	movs	r0, #2
   14158:	4b13      	ldr	r3, [pc, #76]	; (141a8 <RADIO_FSKPayloadReady+0x10c>)
   1415a:	4798      	blx	r3
   1415c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1415e:	0023      	movs	r3, r4
   14160:	332f      	adds	r3, #47	; 0x2f
   14162:	4e0c      	ldr	r6, [pc, #48]	; (14194 <RADIO_FSKPayloadReady+0xf8>)
   14164:	7818      	ldrb	r0, [r3, #0]
   14166:	47b0      	blx	r6
   14168:	0023      	movs	r3, r4
   1416a:	332e      	adds	r3, #46	; 0x2e
   1416c:	7818      	ldrb	r0, [r3, #0]
   1416e:	47b0      	blx	r6
   14170:	4e0e      	ldr	r6, [pc, #56]	; (141ac <RADIO_FSKPayloadReady+0x110>)
   14172:	2201      	movs	r2, #1
   14174:	0031      	movs	r1, r6
   14176:	2000      	movs	r0, #0
   14178:	4f08      	ldr	r7, [pc, #32]	; (1419c <RADIO_FSKPayloadReady+0x100>)
   1417a:	47b8      	blx	r7
   1417c:	7832      	ldrb	r2, [r6, #0]
   1417e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   14180:	b2d2      	uxtb	r2, r2
   14182:	2000      	movs	r0, #0
   14184:	47b8      	blx	r7
   14186:	e7cc      	b.n	14122 <RADIO_FSKPayloadReady+0x86>
   14188:	000067b5 	.word	0x000067b5
   1418c:	20001ad0 	.word	0x20001ad0
   14190:	20001ffc 	.word	0x20001ffc
   14194:	0000c7b9 	.word	0x0000c7b9
   14198:	00002a0d 	.word	0x00002a0d
   1419c:	00006821 	.word	0x00006821
   141a0:	00002a4d 	.word	0x00002a4d
   141a4:	00013e35 	.word	0x00013e35
   141a8:	00013a51 	.word	0x00013a51
   141ac:	20001afc 	.word	0x20001afc

000141b0 <Radio_SetClockInput>:
   141b0:	b510      	push	{r4, lr}
   141b2:	4b08      	ldr	r3, [pc, #32]	; (141d4 <Radio_SetClockInput+0x24>)
   141b4:	3355      	adds	r3, #85	; 0x55
   141b6:	781b      	ldrb	r3, [r3, #0]
   141b8:	2b00      	cmp	r3, #0
   141ba:	d10a      	bne.n	141d2 <Radio_SetClockInput+0x22>
   141bc:	4b06      	ldr	r3, [pc, #24]	; (141d8 <Radio_SetClockInput+0x28>)
   141be:	204b      	movs	r0, #75	; 0x4b
   141c0:	4798      	blx	r3
   141c2:	2110      	movs	r1, #16
   141c4:	4301      	orrs	r1, r0
   141c6:	4b05      	ldr	r3, [pc, #20]	; (141dc <Radio_SetClockInput+0x2c>)
   141c8:	b2c9      	uxtb	r1, r1
   141ca:	204b      	movs	r0, #75	; 0x4b
   141cc:	4798      	blx	r3
   141ce:	4b04      	ldr	r3, [pc, #16]	; (141e0 <Radio_SetClockInput+0x30>)
   141d0:	4798      	blx	r3
   141d2:	bd10      	pop	{r4, pc}
   141d4:	20001ad0 	.word	0x20001ad0
   141d8:	000067b5 	.word	0x000067b5
   141dc:	0000678d 	.word	0x0000678d
   141e0:	000068bd 	.word	0x000068bd

000141e4 <RADIO_TxHandler>:
   141e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   141e6:	4b32      	ldr	r3, [pc, #200]	; (142b0 <RADIO_TxHandler+0xcc>)
   141e8:	4798      	blx	r3
   141ea:	2001      	movs	r0, #1
   141ec:	4b31      	ldr	r3, [pc, #196]	; (142b4 <RADIO_TxHandler+0xd0>)
   141ee:	4798      	blx	r3
   141f0:	4c31      	ldr	r4, [pc, #196]	; (142b8 <RADIO_TxHandler+0xd4>)
   141f2:	0023      	movs	r3, r4
   141f4:	332d      	adds	r3, #45	; 0x2d
   141f6:	7818      	ldrb	r0, [r3, #0]
   141f8:	4b30      	ldr	r3, [pc, #192]	; (142bc <RADIO_TxHandler+0xd8>)
   141fa:	4798      	blx	r3
   141fc:	0023      	movs	r3, r4
   141fe:	3341      	adds	r3, #65	; 0x41
   14200:	781b      	ldrb	r3, [r3, #0]
   14202:	2b00      	cmp	r3, #0
   14204:	d102      	bne.n	1420c <RADIO_TxHandler+0x28>
   14206:	2004      	movs	r0, #4
   14208:	4b2d      	ldr	r3, [pc, #180]	; (142c0 <RADIO_TxHandler+0xdc>)
   1420a:	4798      	blx	r3
   1420c:	4b2d      	ldr	r3, [pc, #180]	; (142c4 <RADIO_TxHandler+0xe0>)
   1420e:	4e2e      	ldr	r6, [pc, #184]	; (142c8 <RADIO_TxHandler+0xe4>)
   14210:	781f      	ldrb	r7, [r3, #0]
   14212:	4d2e      	ldr	r5, [pc, #184]	; (142cc <RADIO_TxHandler+0xe8>)
   14214:	2f01      	cmp	r7, #1
   14216:	d138      	bne.n	1428a <RADIO_TxHandler+0xa6>
   14218:	7831      	ldrb	r1, [r6, #0]
   1421a:	2022      	movs	r0, #34	; 0x22
   1421c:	47a8      	blx	r5
   1421e:	4b2c      	ldr	r3, [pc, #176]	; (142d0 <RADIO_TxHandler+0xec>)
   14220:	200a      	movs	r0, #10
   14222:	4798      	blx	r3
   14224:	21f0      	movs	r1, #240	; 0xf0
   14226:	4008      	ands	r0, r1
   14228:	39e8      	subs	r1, #232	; 0xe8
   1422a:	4301      	orrs	r1, r0
   1422c:	200a      	movs	r0, #10
   1422e:	47a8      	blx	r5
   14230:	2140      	movs	r1, #64	; 0x40
   14232:	0008      	movs	r0, r1
   14234:	47a8      	blx	r5
   14236:	2100      	movs	r1, #0
   14238:	2041      	movs	r0, #65	; 0x41
   1423a:	47a8      	blx	r5
   1423c:	4b21      	ldr	r3, [pc, #132]	; (142c4 <RADIO_TxHandler+0xe0>)
   1423e:	003a      	movs	r2, r7
   14240:	7819      	ldrb	r1, [r3, #0]
   14242:	0038      	movs	r0, r7
   14244:	4b23      	ldr	r3, [pc, #140]	; (142d4 <RADIO_TxHandler+0xf0>)
   14246:	4798      	blx	r3
   14248:	4b23      	ldr	r3, [pc, #140]	; (142d8 <RADIO_TxHandler+0xf4>)
   1424a:	7832      	ldrb	r2, [r6, #0]
   1424c:	6819      	ldr	r1, [r3, #0]
   1424e:	2000      	movs	r0, #0
   14250:	4b22      	ldr	r3, [pc, #136]	; (142dc <RADIO_TxHandler+0xf8>)
   14252:	4798      	blx	r3
   14254:	0023      	movs	r3, r4
   14256:	3334      	adds	r3, #52	; 0x34
   14258:	7819      	ldrb	r1, [r3, #0]
   1425a:	2200      	movs	r2, #0
   1425c:	2003      	movs	r0, #3
   1425e:	4b1d      	ldr	r3, [pc, #116]	; (142d4 <RADIO_TxHandler+0xf0>)
   14260:	4798      	blx	r3
   14262:	4b1f      	ldr	r3, [pc, #124]	; (142e0 <RADIO_TxHandler+0xfc>)
   14264:	4798      	blx	r3
   14266:	4b1f      	ldr	r3, [pc, #124]	; (142e4 <RADIO_TxHandler+0x100>)
   14268:	6018      	str	r0, [r3, #0]
   1426a:	6059      	str	r1, [r3, #4]
   1426c:	68e3      	ldr	r3, [r4, #12]
   1426e:	2b00      	cmp	r3, #0
   14270:	d009      	beq.n	14286 <RADIO_TxHandler+0xa2>
   14272:	21fa      	movs	r1, #250	; 0xfa
   14274:	2200      	movs	r2, #0
   14276:	342f      	adds	r4, #47	; 0x2f
   14278:	0089      	lsls	r1, r1, #2
   1427a:	7820      	ldrb	r0, [r4, #0]
   1427c:	4359      	muls	r1, r3
   1427e:	9200      	str	r2, [sp, #0]
   14280:	4b19      	ldr	r3, [pc, #100]	; (142e8 <RADIO_TxHandler+0x104>)
   14282:	4c1a      	ldr	r4, [pc, #104]	; (142ec <RADIO_TxHandler+0x108>)
   14284:	47a0      	blx	r4
   14286:	2000      	movs	r0, #0
   14288:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   1428a:	2110      	movs	r1, #16
   1428c:	2040      	movs	r0, #64	; 0x40
   1428e:	47a8      	blx	r5
   14290:	2100      	movs	r1, #0
   14292:	2041      	movs	r0, #65	; 0x41
   14294:	47a8      	blx	r5
   14296:	0023      	movs	r3, r4
   14298:	2000      	movs	r0, #0
   1429a:	3357      	adds	r3, #87	; 0x57
   1429c:	7831      	ldrb	r1, [r6, #0]
   1429e:	7018      	strb	r0, [r3, #0]
   142a0:	47a8      	blx	r5
   142a2:	4b0d      	ldr	r3, [pc, #52]	; (142d8 <RADIO_TxHandler+0xf4>)
   142a4:	7831      	ldrb	r1, [r6, #0]
   142a6:	6818      	ldr	r0, [r3, #0]
   142a8:	4b11      	ldr	r3, [pc, #68]	; (142f0 <RADIO_TxHandler+0x10c>)
   142aa:	4798      	blx	r3
   142ac:	e7d2      	b.n	14254 <RADIO_TxHandler+0x70>
   142ae:	46c0      	nop			; (mov r8, r8)
   142b0:	000141b1 	.word	0x000141b1
   142b4:	00013d0d 	.word	0x00013d0d
   142b8:	20001ad0 	.word	0x20001ad0
   142bc:	0000c7b9 	.word	0x0000c7b9
   142c0:	00013491 	.word	0x00013491
   142c4:	20001b04 	.word	0x20001b04
   142c8:	200010ac 	.word	0x200010ac
   142cc:	0000678d 	.word	0x0000678d
   142d0:	000067b5 	.word	0x000067b5
   142d4:	0000cb11 	.word	0x0000cb11
   142d8:	200010a8 	.word	0x200010a8
   142dc:	000067e1 	.word	0x000067e1
   142e0:	0000c45d 	.word	0x0000c45d
   142e4:	200010a0 	.word	0x200010a0
   142e8:	00013e69 	.word	0x00013e69
   142ec:	0000c4b5 	.word	0x0000c4b5
   142f0:	00013b89 	.word	0x00013b89

000142f4 <Radio_ResetClockInput>:
   142f4:	b510      	push	{r4, lr}
   142f6:	4b04      	ldr	r3, [pc, #16]	; (14308 <Radio_ResetClockInput+0x14>)
   142f8:	3355      	adds	r3, #85	; 0x55
   142fa:	781b      	ldrb	r3, [r3, #0]
   142fc:	2b00      	cmp	r3, #0
   142fe:	d101      	bne.n	14304 <Radio_ResetClockInput+0x10>
   14300:	4b02      	ldr	r3, [pc, #8]	; (1430c <Radio_ResetClockInput+0x18>)
   14302:	4798      	blx	r3
   14304:	bd10      	pop	{r4, pc}
   14306:	46c0      	nop			; (mov r8, r8)
   14308:	20001ad0 	.word	0x20001ad0
   1430c:	000068d9 	.word	0x000068d9

00014310 <RADIO_InitDefaultAttributes>:
   14310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14312:	2501      	movs	r5, #1
   14314:	4b64      	ldr	r3, [pc, #400]	; (144a8 <RADIO_InitDefaultAttributes+0x198>)
   14316:	4c65      	ldr	r4, [pc, #404]	; (144ac <RADIO_InitDefaultAttributes+0x19c>)
   14318:	701d      	strb	r5, [r3, #0]
   1431a:	4b65      	ldr	r3, [pc, #404]	; (144b0 <RADIO_InitDefaultAttributes+0x1a0>)
   1431c:	2207      	movs	r2, #7
   1431e:	6023      	str	r3, [r4, #0]
   14320:	4b64      	ldr	r3, [pc, #400]	; (144b4 <RADIO_InitDefaultAttributes+0x1a4>)
   14322:	18a1      	adds	r1, r4, r2
   14324:	6063      	str	r3, [r4, #4]
   14326:	4b64      	ldr	r3, [pc, #400]	; (144b8 <RADIO_InitDefaultAttributes+0x1a8>)
   14328:	0027      	movs	r7, r4
   1432a:	60a3      	str	r3, [r4, #8]
   1432c:	0023      	movs	r3, r4
   1432e:	3334      	adds	r3, #52	; 0x34
   14330:	701d      	strb	r5, [r3, #0]
   14332:	0023      	movs	r3, r4
   14334:	3336      	adds	r3, #54	; 0x36
   14336:	701a      	strb	r2, [r3, #0]
   14338:	1ce3      	adds	r3, r4, #3
   1433a:	77dd      	strb	r5, [r3, #31]
   1433c:	0023      	movs	r3, r4
   1433e:	3333      	adds	r3, #51	; 0x33
   14340:	701d      	strb	r5, [r3, #0]
   14342:	2300      	movs	r3, #0
   14344:	77cb      	strb	r3, [r1, #31]
   14346:	2108      	movs	r1, #8
   14348:	82a1      	strh	r1, [r4, #20]
   1434a:	0021      	movs	r1, r4
   1434c:	3135      	adds	r1, #53	; 0x35
   1434e:	700a      	strb	r2, [r1, #0]
   14350:	1d22      	adds	r2, r4, #4
   14352:	77d5      	strb	r5, [r2, #31]
   14354:	1d62      	adds	r2, r4, #5
   14356:	77d3      	strb	r3, [r2, #31]
   14358:	1da2      	adds	r2, r4, #6
   1435a:	77d3      	strb	r3, [r2, #31]
   1435c:	2194      	movs	r1, #148	; 0x94
   1435e:	22c1      	movs	r2, #193	; 0xc1
   14360:	76a1      	strb	r1, [r4, #26]
   14362:	7662      	strb	r2, [r4, #25]
   14364:	76e2      	strb	r2, [r4, #27]
   14366:	3991      	subs	r1, #145	; 0x91
   14368:	1ca2      	adds	r2, r4, #2
   1436a:	77d1      	strb	r1, [r2, #31]
   1436c:	2234      	movs	r2, #52	; 0x34
   1436e:	7622      	strb	r2, [r4, #24]
   14370:	0022      	movs	r2, r4
   14372:	317d      	adds	r1, #125	; 0x7d
   14374:	3232      	adds	r2, #50	; 0x32
   14376:	7011      	strb	r1, [r2, #0]
   14378:	4a50      	ldr	r2, [pc, #320]	; (144bc <RADIO_InitDefaultAttributes+0x1ac>)
   1437a:	397e      	subs	r1, #126	; 0x7e
   1437c:	60e2      	str	r2, [r4, #12]
   1437e:	0022      	movs	r2, r4
   14380:	3237      	adds	r2, #55	; 0x37
   14382:	7011      	strb	r1, [r2, #0]
   14384:	0022      	movs	r2, r4
   14386:	3109      	adds	r1, #9
   14388:	3238      	adds	r2, #56	; 0x38
   1438a:	7011      	strb	r1, [r2, #0]
   1438c:	0022      	movs	r2, r4
   1438e:	3107      	adds	r1, #7
   14390:	3239      	adds	r2, #57	; 0x39
   14392:	7011      	strb	r1, [r2, #0]
   14394:	0022      	movs	r2, r4
   14396:	322c      	adds	r2, #44	; 0x2c
   14398:	7013      	strb	r3, [r2, #0]
   1439a:	4a49      	ldr	r2, [pc, #292]	; (144c0 <RADIO_InitDefaultAttributes+0x1b0>)
   1439c:	82e3      	strh	r3, [r4, #22]
   1439e:	62a2      	str	r2, [r4, #40]	; 0x28
   143a0:	0022      	movs	r2, r4
   143a2:	324c      	adds	r2, #76	; 0x4c
   143a4:	8013      	strh	r3, [r2, #0]
   143a6:	0022      	movs	r2, r4
   143a8:	324e      	adds	r2, #78	; 0x4e
   143aa:	7013      	strb	r3, [r2, #0]
   143ac:	0022      	movs	r2, r4
   143ae:	324f      	adds	r2, #79	; 0x4f
   143b0:	7013      	strb	r3, [r2, #0]
   143b2:	0022      	movs	r2, r4
   143b4:	3240      	adds	r2, #64	; 0x40
   143b6:	7013      	strb	r3, [r2, #0]
   143b8:	0022      	movs	r2, r4
   143ba:	3241      	adds	r2, #65	; 0x41
   143bc:	7013      	strb	r3, [r2, #0]
   143be:	0022      	movs	r2, r4
   143c0:	3254      	adds	r2, #84	; 0x54
   143c2:	7013      	strb	r3, [r2, #0]
   143c4:	0022      	movs	r2, r4
   143c6:	3255      	adds	r2, #85	; 0x55
   143c8:	7015      	strb	r5, [r2, #0]
   143ca:	0022      	movs	r2, r4
   143cc:	3257      	adds	r2, #87	; 0x57
   143ce:	6463      	str	r3, [r4, #68]	; 0x44
   143d0:	64a3      	str	r3, [r4, #72]	; 0x48
   143d2:	87a3      	strh	r3, [r4, #60]	; 0x3c
   143d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
   143d6:	7013      	strb	r3, [r2, #0]
   143d8:	3730      	adds	r7, #48	; 0x30
   143da:	783b      	ldrb	r3, [r7, #0]
   143dc:	2b00      	cmp	r3, #0
   143de:	d151      	bne.n	14484 <RADIO_InitDefaultAttributes+0x174>
   143e0:	4838      	ldr	r0, [pc, #224]	; (144c4 <RADIO_InitDefaultAttributes+0x1b4>)
   143e2:	4e39      	ldr	r6, [pc, #228]	; (144c8 <RADIO_InitDefaultAttributes+0x1b8>)
   143e4:	47b0      	blx	r6
   143e6:	2808      	cmp	r0, #8
   143e8:	d149      	bne.n	1447e <RADIO_InitDefaultAttributes+0x16e>
   143ea:	4838      	ldr	r0, [pc, #224]	; (144cc <RADIO_InitDefaultAttributes+0x1bc>)
   143ec:	47b0      	blx	r6
   143ee:	2808      	cmp	r0, #8
   143f0:	d145      	bne.n	1447e <RADIO_InitDefaultAttributes+0x16e>
   143f2:	4837      	ldr	r0, [pc, #220]	; (144d0 <RADIO_InitDefaultAttributes+0x1c0>)
   143f4:	47b0      	blx	r6
   143f6:	2808      	cmp	r0, #8
   143f8:	d141      	bne.n	1447e <RADIO_InitDefaultAttributes+0x16e>
   143fa:	4836      	ldr	r0, [pc, #216]	; (144d4 <RADIO_InitDefaultAttributes+0x1c4>)
   143fc:	47b0      	blx	r6
   143fe:	2808      	cmp	r0, #8
   14400:	d13d      	bne.n	1447e <RADIO_InitDefaultAttributes+0x16e>
   14402:	703d      	strb	r5, [r7, #0]
   14404:	4b34      	ldr	r3, [pc, #208]	; (144d8 <RADIO_InitDefaultAttributes+0x1c8>)
   14406:	4798      	blx	r3
   14408:	4b34      	ldr	r3, [pc, #208]	; (144dc <RADIO_InitDefaultAttributes+0x1cc>)
   1440a:	4798      	blx	r3
   1440c:	2800      	cmp	r0, #0
   1440e:	d107      	bne.n	14420 <RADIO_InitDefaultAttributes+0x110>
   14410:	0023      	movs	r3, r4
   14412:	3355      	adds	r3, #85	; 0x55
   14414:	7018      	strb	r0, [r3, #0]
   14416:	4b32      	ldr	r3, [pc, #200]	; (144e0 <RADIO_InitDefaultAttributes+0x1d0>)
   14418:	4798      	blx	r3
   1441a:	0023      	movs	r3, r4
   1441c:	3354      	adds	r3, #84	; 0x54
   1441e:	7018      	strb	r0, [r3, #0]
   14420:	4b30      	ldr	r3, [pc, #192]	; (144e4 <RADIO_InitDefaultAttributes+0x1d4>)
   14422:	4798      	blx	r3
   14424:	2201      	movs	r2, #1
   14426:	2100      	movs	r1, #0
   14428:	0010      	movs	r0, r2
   1442a:	4f2f      	ldr	r7, [pc, #188]	; (144e8 <RADIO_InitDefaultAttributes+0x1d8>)
   1442c:	47b8      	blx	r7
   1442e:	6820      	ldr	r0, [r4, #0]
   14430:	4b2e      	ldr	r3, [pc, #184]	; (144ec <RADIO_InitDefaultAttributes+0x1dc>)
   14432:	4798      	blx	r3
   14434:	2142      	movs	r1, #66	; 0x42
   14436:	203b      	movs	r0, #59	; 0x3b
   14438:	4d2d      	ldr	r5, [pc, #180]	; (144f0 <RADIO_InitDefaultAttributes+0x1e0>)
   1443a:	47a8      	blx	r5
   1443c:	203b      	movs	r0, #59	; 0x3b
   1443e:	4b2d      	ldr	r3, [pc, #180]	; (144f4 <RADIO_InitDefaultAttributes+0x1e4>)
   14440:	4798      	blx	r3
   14442:	2620      	movs	r6, #32
   14444:	4006      	ands	r6, r0
   14446:	d1f9      	bne.n	1443c <RADIO_InitDefaultAttributes+0x12c>
   14448:	2123      	movs	r1, #35	; 0x23
   1444a:	200c      	movs	r0, #12
   1444c:	47a8      	blx	r5
   1444e:	21aa      	movs	r1, #170	; 0xaa
   14450:	201f      	movs	r0, #31
   14452:	47a8      	blx	r5
   14454:	21ff      	movs	r1, #255	; 0xff
   14456:	2032      	movs	r0, #50	; 0x32
   14458:	47a8      	blx	r5
   1445a:	2140      	movs	r1, #64	; 0x40
   1445c:	2031      	movs	r0, #49	; 0x31
   1445e:	47a8      	blx	r5
   14460:	2201      	movs	r2, #1
   14462:	0030      	movs	r0, r6
   14464:	0011      	movs	r1, r2
   14466:	47b8      	blx	r7
   14468:	21ff      	movs	r1, #255	; 0xff
   1446a:	2023      	movs	r0, #35	; 0x23
   1446c:	47a8      	blx	r5
   1446e:	4b21      	ldr	r3, [pc, #132]	; (144f4 <RADIO_InitDefaultAttributes+0x1e4>)
   14470:	2042      	movs	r0, #66	; 0x42
   14472:	4798      	blx	r3
   14474:	3431      	adds	r4, #49	; 0x31
   14476:	4b20      	ldr	r3, [pc, #128]	; (144f8 <RADIO_InitDefaultAttributes+0x1e8>)
   14478:	7020      	strb	r0, [r4, #0]
   1447a:	4798      	blx	r3
   1447c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1447e:	4b1f      	ldr	r3, [pc, #124]	; (144fc <RADIO_InitDefaultAttributes+0x1ec>)
   14480:	4798      	blx	r3
   14482:	e7bf      	b.n	14404 <RADIO_InitDefaultAttributes+0xf4>
   14484:	0023      	movs	r3, r4
   14486:	332d      	adds	r3, #45	; 0x2d
   14488:	4d1d      	ldr	r5, [pc, #116]	; (14500 <RADIO_InitDefaultAttributes+0x1f0>)
   1448a:	7818      	ldrb	r0, [r3, #0]
   1448c:	47a8      	blx	r5
   1448e:	0023      	movs	r3, r4
   14490:	332e      	adds	r3, #46	; 0x2e
   14492:	7818      	ldrb	r0, [r3, #0]
   14494:	47a8      	blx	r5
   14496:	0023      	movs	r3, r4
   14498:	332f      	adds	r3, #47	; 0x2f
   1449a:	7818      	ldrb	r0, [r3, #0]
   1449c:	47a8      	blx	r5
   1449e:	0023      	movs	r3, r4
   144a0:	3350      	adds	r3, #80	; 0x50
   144a2:	7818      	ldrb	r0, [r3, #0]
   144a4:	47a8      	blx	r5
   144a6:	e7ad      	b.n	14404 <RADIO_InitDefaultAttributes+0xf4>
   144a8:	20001fff 	.word	0x20001fff
   144ac:	20001ad0 	.word	0x20001ad0
   144b0:	33be27a0 	.word	0x33be27a0
   144b4:	000061a8 	.word	0x000061a8
   144b8:	0000c350 	.word	0x0000c350
   144bc:	00003a98 	.word	0x00003a98
   144c0:	20001efc 	.word	0x20001efc
   144c4:	20001afd 	.word	0x20001afd
   144c8:	0000c481 	.word	0x0000c481
   144cc:	20001afe 	.word	0x20001afe
   144d0:	20001aff 	.word	0x20001aff
   144d4:	20001b20 	.word	0x20001b20
   144d8:	0000674d 	.word	0x0000674d
   144dc:	000068b9 	.word	0x000068b9
   144e0:	000068b5 	.word	0x000068b5
   144e4:	000141b1 	.word	0x000141b1
   144e8:	0000cb11 	.word	0x0000cb11
   144ec:	00013449 	.word	0x00013449
   144f0:	0000678d 	.word	0x0000678d
   144f4:	000067b5 	.word	0x000067b5
   144f8:	000142f5 	.word	0x000142f5
   144fc:	0000c3c5 	.word	0x0000c3c5
   14500:	0000c7b9 	.word	0x0000c7b9

00014504 <RADIO_Receive>:
   14504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14506:	7803      	ldrb	r3, [r0, #0]
   14508:	0006      	movs	r6, r0
   1450a:	4d24      	ldr	r5, [pc, #144]	; (1459c <RADIO_Receive+0x98>)
   1450c:	2b00      	cmp	r3, #0
   1450e:	d11d      	bne.n	1454c <RADIO_Receive+0x48>
   14510:	782b      	ldrb	r3, [r5, #0]
   14512:	2004      	movs	r0, #4
   14514:	2b01      	cmp	r3, #1
   14516:	d118      	bne.n	1454a <RADIO_Receive+0x46>
   14518:	4c21      	ldr	r4, [pc, #132]	; (145a0 <RADIO_Receive+0x9c>)
   1451a:	4f22      	ldr	r7, [pc, #136]	; (145a4 <RADIO_Receive+0xa0>)
   1451c:	0023      	movs	r3, r4
   1451e:	332f      	adds	r3, #47	; 0x2f
   14520:	7818      	ldrb	r0, [r3, #0]
   14522:	47b8      	blx	r7
   14524:	0023      	movs	r3, r4
   14526:	3334      	adds	r3, #52	; 0x34
   14528:	781b      	ldrb	r3, [r3, #0]
   1452a:	2b00      	cmp	r3, #0
   1452c:	d102      	bne.n	14534 <RADIO_Receive+0x30>
   1452e:	342e      	adds	r4, #46	; 0x2e
   14530:	7820      	ldrb	r0, [r4, #0]
   14532:	47b8      	blx	r7
   14534:	8872      	ldrh	r2, [r6, #2]
   14536:	4b1c      	ldr	r3, [pc, #112]	; (145a8 <RADIO_Receive+0xa4>)
   14538:	2008      	movs	r0, #8
   1453a:	801a      	strh	r2, [r3, #0]
   1453c:	2304      	movs	r3, #4
   1453e:	702b      	strb	r3, [r5, #0]
   14540:	4b1a      	ldr	r3, [pc, #104]	; (145ac <RADIO_Receive+0xa8>)
   14542:	4798      	blx	r3
   14544:	4b1a      	ldr	r3, [pc, #104]	; (145b0 <RADIO_Receive+0xac>)
   14546:	4798      	blx	r3
   14548:	2000      	movs	r0, #0
   1454a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1454c:	782b      	ldrb	r3, [r5, #0]
   1454e:	2000      	movs	r0, #0
   14550:	2b01      	cmp	r3, #1
   14552:	d0fa      	beq.n	1454a <RADIO_Receive+0x46>
   14554:	782b      	ldrb	r3, [r5, #0]
   14556:	3003      	adds	r0, #3
   14558:	2b04      	cmp	r3, #4
   1455a:	d1f6      	bne.n	1454a <RADIO_Receive+0x46>
   1455c:	4c10      	ldr	r4, [pc, #64]	; (145a0 <RADIO_Receive+0x9c>)
   1455e:	4e11      	ldr	r6, [pc, #68]	; (145a4 <RADIO_Receive+0xa0>)
   14560:	0023      	movs	r3, r4
   14562:	332f      	adds	r3, #47	; 0x2f
   14564:	7818      	ldrb	r0, [r3, #0]
   14566:	47b0      	blx	r6
   14568:	0023      	movs	r3, r4
   1456a:	3334      	adds	r3, #52	; 0x34
   1456c:	781b      	ldrb	r3, [r3, #0]
   1456e:	2b00      	cmp	r3, #0
   14570:	d103      	bne.n	1457a <RADIO_Receive+0x76>
   14572:	0023      	movs	r3, r4
   14574:	332e      	adds	r3, #46	; 0x2e
   14576:	7818      	ldrb	r0, [r3, #0]
   14578:	47b0      	blx	r6
   1457a:	2200      	movs	r2, #0
   1457c:	3434      	adds	r4, #52	; 0x34
   1457e:	7821      	ldrb	r1, [r4, #0]
   14580:	0010      	movs	r0, r2
   14582:	4b0c      	ldr	r3, [pc, #48]	; (145b4 <RADIO_Receive+0xb0>)
   14584:	4798      	blx	r3
   14586:	4b0c      	ldr	r3, [pc, #48]	; (145b8 <RADIO_Receive+0xb4>)
   14588:	4798      	blx	r3
   1458a:	2301      	movs	r3, #1
   1458c:	2008      	movs	r0, #8
   1458e:	4c0b      	ldr	r4, [pc, #44]	; (145bc <RADIO_Receive+0xb8>)
   14590:	702b      	strb	r3, [r5, #0]
   14592:	47a0      	blx	r4
   14594:	2002      	movs	r0, #2
   14596:	47a0      	blx	r4
   14598:	e7d6      	b.n	14548 <RADIO_Receive+0x44>
   1459a:	46c0      	nop			; (mov r8, r8)
   1459c:	20001fff 	.word	0x20001fff
   145a0:	20001ad0 	.word	0x20001ad0
   145a4:	0000c7b9 	.word	0x0000c7b9
   145a8:	2000109c 	.word	0x2000109c
   145ac:	00013a51 	.word	0x00013a51
   145b0:	000141b1 	.word	0x000141b1
   145b4:	0000cb11 	.word	0x0000cb11
   145b8:	000142f5 	.word	0x000142f5
   145bc:	00013a7d 	.word	0x00013a7d

000145c0 <RADIO_TxDoneHandler>:
   145c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   145c2:	4b35      	ldr	r3, [pc, #212]	; (14698 <RADIO_TxDoneHandler+0xd8>)
   145c4:	b087      	sub	sp, #28
   145c6:	881a      	ldrh	r2, [r3, #0]
   145c8:	06d2      	lsls	r2, r2, #27
   145ca:	0fd2      	lsrs	r2, r2, #31
   145cc:	9200      	str	r2, [sp, #0]
   145ce:	466a      	mov	r2, sp
   145d0:	7810      	ldrb	r0, [r2, #0]
   145d2:	881a      	ldrh	r2, [r3, #0]
   145d4:	2801      	cmp	r0, #1
   145d6:	d12b      	bne.n	14630 <RADIO_TxDoneHandler+0x70>
   145d8:	4c30      	ldr	r4, [pc, #192]	; (1469c <RADIO_TxDoneHandler+0xdc>)
   145da:	2110      	movs	r1, #16
   145dc:	0027      	movs	r7, r4
   145de:	2500      	movs	r5, #0
   145e0:	438a      	bics	r2, r1
   145e2:	801a      	strh	r2, [r3, #0]
   145e4:	3734      	adds	r7, #52	; 0x34
   145e6:	0002      	movs	r2, r0
   145e8:	7839      	ldrb	r1, [r7, #0]
   145ea:	4b2d      	ldr	r3, [pc, #180]	; (146a0 <RADIO_TxDoneHandler+0xe0>)
   145ec:	4798      	blx	r3
   145ee:	68e3      	ldr	r3, [r4, #12]
   145f0:	ae03      	add	r6, sp, #12
   145f2:	9304      	str	r3, [sp, #16]
   145f4:	7035      	strb	r5, [r6, #0]
   145f6:	002a      	movs	r2, r5
   145f8:	4b29      	ldr	r3, [pc, #164]	; (146a0 <RADIO_TxDoneHandler+0xe0>)
   145fa:	7839      	ldrb	r1, [r7, #0]
   145fc:	0028      	movs	r0, r5
   145fe:	4798      	blx	r3
   14600:	466a      	mov	r2, sp
   14602:	4b28      	ldr	r3, [pc, #160]	; (146a4 <RADIO_TxDoneHandler+0xe4>)
   14604:	7812      	ldrb	r2, [r2, #0]
   14606:	701a      	strb	r2, [r3, #0]
   14608:	0023      	movs	r3, r4
   1460a:	3357      	adds	r3, #87	; 0x57
   1460c:	701d      	strb	r5, [r3, #0]
   1460e:	4b26      	ldr	r3, [pc, #152]	; (146a8 <RADIO_TxDoneHandler+0xe8>)
   14610:	781b      	ldrb	r3, [r3, #0]
   14612:	075b      	lsls	r3, r3, #29
   14614:	d505      	bpl.n	14622 <RADIO_TxDoneHandler+0x62>
   14616:	6923      	ldr	r3, [r4, #16]
   14618:	42ab      	cmp	r3, r5
   1461a:	d002      	beq.n	14622 <RADIO_TxDoneHandler+0x62>
   1461c:	0031      	movs	r1, r6
   1461e:	2004      	movs	r0, #4
   14620:	4798      	blx	r3
   14622:	4b22      	ldr	r3, [pc, #136]	; (146ac <RADIO_TxDoneHandler+0xec>)
   14624:	4798      	blx	r3
   14626:	4b22      	ldr	r3, [pc, #136]	; (146b0 <RADIO_TxDoneHandler+0xf0>)
   14628:	4798      	blx	r3
   1462a:	2000      	movs	r0, #0
   1462c:	b007      	add	sp, #28
   1462e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14630:	07d2      	lsls	r2, r2, #31
   14632:	d402      	bmi.n	1463a <RADIO_TxDoneHandler+0x7a>
   14634:	881a      	ldrh	r2, [r3, #0]
   14636:	0752      	lsls	r2, r2, #29
   14638:	d527      	bpl.n	1468a <RADIO_TxDoneHandler+0xca>
   1463a:	2601      	movs	r6, #1
   1463c:	2104      	movs	r1, #4
   1463e:	881a      	ldrh	r2, [r3, #0]
   14640:	4f16      	ldr	r7, [pc, #88]	; (1469c <RADIO_TxDoneHandler+0xdc>)
   14642:	43b2      	bics	r2, r6
   14644:	801a      	strh	r2, [r3, #0]
   14646:	881a      	ldrh	r2, [r3, #0]
   14648:	2400      	movs	r4, #0
   1464a:	438a      	bics	r2, r1
   1464c:	801a      	strh	r2, [r3, #0]
   1464e:	4b19      	ldr	r3, [pc, #100]	; (146b4 <RADIO_TxDoneHandler+0xf4>)
   14650:	ad03      	add	r5, sp, #12
   14652:	681b      	ldr	r3, [r3, #0]
   14654:	702c      	strb	r4, [r5, #0]
   14656:	9304      	str	r3, [sp, #16]
   14658:	003b      	movs	r3, r7
   1465a:	3334      	adds	r3, #52	; 0x34
   1465c:	7819      	ldrb	r1, [r3, #0]
   1465e:	0022      	movs	r2, r4
   14660:	0020      	movs	r0, r4
   14662:	4b0f      	ldr	r3, [pc, #60]	; (146a0 <RADIO_TxDoneHandler+0xe0>)
   14664:	4798      	blx	r3
   14666:	4b14      	ldr	r3, [pc, #80]	; (146b8 <RADIO_TxDoneHandler+0xf8>)
   14668:	4798      	blx	r3
   1466a:	4b0e      	ldr	r3, [pc, #56]	; (146a4 <RADIO_TxDoneHandler+0xe4>)
   1466c:	701e      	strb	r6, [r3, #0]
   1466e:	003b      	movs	r3, r7
   14670:	3357      	adds	r3, #87	; 0x57
   14672:	701c      	strb	r4, [r3, #0]
   14674:	4b0c      	ldr	r3, [pc, #48]	; (146a8 <RADIO_TxDoneHandler+0xe8>)
   14676:	781b      	ldrb	r3, [r3, #0]
   14678:	079b      	lsls	r3, r3, #30
   1467a:	d5d6      	bpl.n	1462a <RADIO_TxDoneHandler+0x6a>
   1467c:	693b      	ldr	r3, [r7, #16]
   1467e:	42a3      	cmp	r3, r4
   14680:	d0d3      	beq.n	1462a <RADIO_TxDoneHandler+0x6a>
   14682:	0029      	movs	r1, r5
   14684:	2002      	movs	r0, #2
   14686:	4798      	blx	r3
   14688:	e7cf      	b.n	1462a <RADIO_TxDoneHandler+0x6a>
   1468a:	881b      	ldrh	r3, [r3, #0]
   1468c:	059b      	lsls	r3, r3, #22
   1468e:	d5cc      	bpl.n	1462a <RADIO_TxDoneHandler+0x6a>
   14690:	4b0a      	ldr	r3, [pc, #40]	; (146bc <RADIO_TxDoneHandler+0xfc>)
   14692:	4798      	blx	r3
   14694:	e7c9      	b.n	1462a <RADIO_TxDoneHandler+0x6a>
   14696:	46c0      	nop			; (mov r8, r8)
   14698:	20001ffc 	.word	0x20001ffc
   1469c:	20001ad0 	.word	0x20001ad0
   146a0:	0000cb11 	.word	0x0000cb11
   146a4:	20001fff 	.word	0x20001fff
   146a8:	20001ffe 	.word	0x20001ffe
   146ac:	0000674d 	.word	0x0000674d
   146b0:	00014311 	.word	0x00014311
   146b4:	200010a0 	.word	0x200010a0
   146b8:	000142f5 	.word	0x000142f5
   146bc:	00014a81 	.word	0x00014a81

000146c0 <RADIO_RxDoneHandler>:
   146c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   146c2:	4b95      	ldr	r3, [pc, #596]	; (14918 <RADIO_RxDoneHandler+0x258>)
   146c4:	b085      	sub	sp, #20
   146c6:	881c      	ldrh	r4, [r3, #0]
   146c8:	881a      	ldrh	r2, [r3, #0]
   146ca:	06a4      	lsls	r4, r4, #26
   146cc:	0fe4      	lsrs	r4, r4, #31
   146ce:	b2e0      	uxtb	r0, r4
   146d0:	2801      	cmp	r0, #1
   146d2:	d126      	bne.n	14722 <RADIO_RxDoneHandler+0x62>
   146d4:	4d91      	ldr	r5, [pc, #580]	; (1491c <RADIO_RxDoneHandler+0x25c>)
   146d6:	2120      	movs	r1, #32
   146d8:	002e      	movs	r6, r5
   146da:	438a      	bics	r2, r1
   146dc:	801a      	strh	r2, [r3, #0]
   146de:	3634      	adds	r6, #52	; 0x34
   146e0:	0002      	movs	r2, r0
   146e2:	7831      	ldrb	r1, [r6, #0]
   146e4:	4f8e      	ldr	r7, [pc, #568]	; (14920 <RADIO_RxDoneHandler+0x260>)
   146e6:	47b8      	blx	r7
   146e8:	2200      	movs	r2, #0
   146ea:	7831      	ldrb	r1, [r6, #0]
   146ec:	0010      	movs	r0, r2
   146ee:	47b8      	blx	r7
   146f0:	4b8c      	ldr	r3, [pc, #560]	; (14924 <RADIO_RxDoneHandler+0x264>)
   146f2:	4798      	blx	r3
   146f4:	4b8c      	ldr	r3, [pc, #560]	; (14928 <RADIO_RxDoneHandler+0x268>)
   146f6:	002a      	movs	r2, r5
   146f8:	701c      	strb	r4, [r3, #0]
   146fa:	2300      	movs	r3, #0
   146fc:	322c      	adds	r2, #44	; 0x2c
   146fe:	7013      	strb	r3, [r2, #0]
   14700:	002a      	movs	r2, r5
   14702:	a901      	add	r1, sp, #4
   14704:	3257      	adds	r2, #87	; 0x57
   14706:	7013      	strb	r3, [r2, #0]
   14708:	700b      	strb	r3, [r1, #0]
   1470a:	4b88      	ldr	r3, [pc, #544]	; (1492c <RADIO_RxDoneHandler+0x26c>)
   1470c:	781b      	ldrb	r3, [r3, #0]
   1470e:	071b      	lsls	r3, r3, #28
   14710:	d504      	bpl.n	1471c <RADIO_RxDoneHandler+0x5c>
   14712:	692b      	ldr	r3, [r5, #16]
   14714:	2008      	movs	r0, #8
   14716:	2b00      	cmp	r3, #0
   14718:	d000      	beq.n	1471c <RADIO_RxDoneHandler+0x5c>
   1471a:	e084      	b.n	14826 <RADIO_RxDoneHandler+0x166>
   1471c:	2000      	movs	r0, #0
   1471e:	b005      	add	sp, #20
   14720:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14722:	0652      	lsls	r2, r2, #25
   14724:	d402      	bmi.n	1472c <RADIO_RxDoneHandler+0x6c>
   14726:	881a      	ldrh	r2, [r3, #0]
   14728:	0612      	lsls	r2, r2, #24
   1472a:	d523      	bpl.n	14774 <RADIO_RxDoneHandler+0xb4>
   1472c:	2140      	movs	r1, #64	; 0x40
   1472e:	881a      	ldrh	r2, [r3, #0]
   14730:	4c7a      	ldr	r4, [pc, #488]	; (1491c <RADIO_RxDoneHandler+0x25c>)
   14732:	438a      	bics	r2, r1
   14734:	801a      	strh	r2, [r3, #0]
   14736:	881a      	ldrh	r2, [r3, #0]
   14738:	1849      	adds	r1, r1, r1
   1473a:	438a      	bics	r2, r1
   1473c:	801a      	strh	r2, [r3, #0]
   1473e:	0023      	movs	r3, r4
   14740:	2200      	movs	r2, #0
   14742:	3334      	adds	r3, #52	; 0x34
   14744:	7819      	ldrb	r1, [r3, #0]
   14746:	0010      	movs	r0, r2
   14748:	4b75      	ldr	r3, [pc, #468]	; (14920 <RADIO_RxDoneHandler+0x260>)
   1474a:	4798      	blx	r3
   1474c:	4b75      	ldr	r3, [pc, #468]	; (14924 <RADIO_RxDoneHandler+0x264>)
   1474e:	4798      	blx	r3
   14750:	2201      	movs	r2, #1
   14752:	4b75      	ldr	r3, [pc, #468]	; (14928 <RADIO_RxDoneHandler+0x268>)
   14754:	a901      	add	r1, sp, #4
   14756:	701a      	strb	r2, [r3, #0]
   14758:	0022      	movs	r2, r4
   1475a:	2300      	movs	r3, #0
   1475c:	322c      	adds	r2, #44	; 0x2c
   1475e:	7013      	strb	r3, [r2, #0]
   14760:	0022      	movs	r2, r4
   14762:	3257      	adds	r2, #87	; 0x57
   14764:	7013      	strb	r3, [r2, #0]
   14766:	700b      	strb	r3, [r1, #0]
   14768:	4b70      	ldr	r3, [pc, #448]	; (1492c <RADIO_RxDoneHandler+0x26c>)
   1476a:	781b      	ldrb	r3, [r3, #0]
   1476c:	071b      	lsls	r3, r3, #28
   1476e:	d5d5      	bpl.n	1471c <RADIO_RxDoneHandler+0x5c>
   14770:	6923      	ldr	r3, [r4, #16]
   14772:	e7cf      	b.n	14714 <RADIO_RxDoneHandler+0x54>
   14774:	881a      	ldrh	r2, [r3, #0]
   14776:	0792      	lsls	r2, r2, #30
   14778:	d56e      	bpl.n	14858 <RADIO_RxDoneHandler+0x198>
   1477a:	2102      	movs	r1, #2
   1477c:	881a      	ldrh	r2, [r3, #0]
   1477e:	4d6c      	ldr	r5, [pc, #432]	; (14930 <RADIO_RxDoneHandler+0x270>)
   14780:	438a      	bics	r2, r1
   14782:	801a      	strh	r2, [r3, #0]
   14784:	2013      	movs	r0, #19
   14786:	47a8      	blx	r5
   14788:	4c64      	ldr	r4, [pc, #400]	; (1491c <RADIO_RxDoneHandler+0x25c>)
   1478a:	2100      	movs	r1, #0
   1478c:	0026      	movs	r6, r4
   1478e:	362c      	adds	r6, #44	; 0x2c
   14790:	7030      	strb	r0, [r6, #0]
   14792:	4b68      	ldr	r3, [pc, #416]	; (14934 <RADIO_RxDoneHandler+0x274>)
   14794:	200d      	movs	r0, #13
   14796:	4798      	blx	r3
   14798:	7832      	ldrb	r2, [r6, #0]
   1479a:	4b67      	ldr	r3, [pc, #412]	; (14938 <RADIO_RxDoneHandler+0x278>)
   1479c:	b2d2      	uxtb	r2, r2
   1479e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   147a0:	2000      	movs	r0, #0
   147a2:	4798      	blx	r3
   147a4:	2019      	movs	r0, #25
   147a6:	47a8      	blx	r5
   147a8:	0023      	movs	r3, r4
   147aa:	b240      	sxtb	r0, r0
   147ac:	3332      	adds	r3, #50	; 0x32
   147ae:	2800      	cmp	r0, #0
   147b0:	da3b      	bge.n	1482a <RADIO_RxDoneHandler+0x16a>
   147b2:	4240      	negs	r0, r0
   147b4:	1080      	asrs	r0, r0, #2
   147b6:	4240      	negs	r0, r0
   147b8:	7018      	strb	r0, [r3, #0]
   147ba:	201a      	movs	r0, #26
   147bc:	47a8      	blx	r5
   147be:	0022      	movs	r2, r4
   147c0:	3232      	adds	r2, #50	; 0x32
   147c2:	7812      	ldrb	r2, [r2, #0]
   147c4:	b203      	sxth	r3, r0
   147c6:	b252      	sxtb	r2, r2
   147c8:	4d5c      	ldr	r5, [pc, #368]	; (1493c <RADIO_RxDoneHandler+0x27c>)
   147ca:	2a00      	cmp	r2, #0
   147cc:	da36      	bge.n	1483c <RADIO_RxDoneHandler+0x17c>
   147ce:	6821      	ldr	r1, [r4, #0]
   147d0:	4e5b      	ldr	r6, [pc, #364]	; (14940 <RADIO_RxDoneHandler+0x280>)
   147d2:	198e      	adds	r6, r1, r6
   147d4:	42ae      	cmp	r6, r5
   147d6:	d82a      	bhi.n	1482e <RADIO_RxDoneHandler+0x16e>
   147d8:	3263      	adds	r2, #99	; 0x63
   147da:	1880      	adds	r0, r0, r2
   147dc:	111b      	asrs	r3, r3, #4
   147de:	1818      	adds	r0, r3, r0
   147e0:	0023      	movs	r3, r4
   147e2:	3356      	adds	r3, #86	; 0x56
   147e4:	7018      	strb	r0, [r3, #0]
   147e6:	0023      	movs	r3, r4
   147e8:	2200      	movs	r2, #0
   147ea:	3334      	adds	r3, #52	; 0x34
   147ec:	7819      	ldrb	r1, [r3, #0]
   147ee:	0010      	movs	r0, r2
   147f0:	4b4b      	ldr	r3, [pc, #300]	; (14920 <RADIO_RxDoneHandler+0x260>)
   147f2:	4798      	blx	r3
   147f4:	4b4b      	ldr	r3, [pc, #300]	; (14924 <RADIO_RxDoneHandler+0x264>)
   147f6:	4798      	blx	r3
   147f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   147fa:	a901      	add	r1, sp, #4
   147fc:	604b      	str	r3, [r1, #4]
   147fe:	0023      	movs	r3, r4
   14800:	332c      	adds	r3, #44	; 0x2c
   14802:	781b      	ldrb	r3, [r3, #0]
   14804:	2201      	movs	r2, #1
   14806:	720b      	strb	r3, [r1, #8]
   14808:	2300      	movs	r3, #0
   1480a:	700b      	strb	r3, [r1, #0]
   1480c:	4b46      	ldr	r3, [pc, #280]	; (14928 <RADIO_RxDoneHandler+0x268>)
   1480e:	701a      	strb	r2, [r3, #0]
   14810:	4b46      	ldr	r3, [pc, #280]	; (1492c <RADIO_RxDoneHandler+0x26c>)
   14812:	7818      	ldrb	r0, [r3, #0]
   14814:	07c0      	lsls	r0, r0, #31
   14816:	0fc0      	lsrs	r0, r0, #31
   14818:	4290      	cmp	r0, r2
   1481a:	d000      	beq.n	1481e <RADIO_RxDoneHandler+0x15e>
   1481c:	e77e      	b.n	1471c <RADIO_RxDoneHandler+0x5c>
   1481e:	6923      	ldr	r3, [r4, #16]
   14820:	2b00      	cmp	r3, #0
   14822:	d100      	bne.n	14826 <RADIO_RxDoneHandler+0x166>
   14824:	e77a      	b.n	1471c <RADIO_RxDoneHandler+0x5c>
   14826:	4798      	blx	r3
   14828:	e778      	b.n	1471c <RADIO_RxDoneHandler+0x5c>
   1482a:	1080      	asrs	r0, r0, #2
   1482c:	e7c4      	b.n	147b8 <RADIO_RxDoneHandler+0xf8>
   1482e:	4d45      	ldr	r5, [pc, #276]	; (14944 <RADIO_RxDoneHandler+0x284>)
   14830:	1949      	adds	r1, r1, r5
   14832:	4d45      	ldr	r5, [pc, #276]	; (14948 <RADIO_RxDoneHandler+0x288>)
   14834:	42a9      	cmp	r1, r5
   14836:	d8d6      	bhi.n	147e6 <RADIO_RxDoneHandler+0x126>
   14838:	325c      	adds	r2, #92	; 0x5c
   1483a:	e7ce      	b.n	147da <RADIO_RxDoneHandler+0x11a>
   1483c:	6822      	ldr	r2, [r4, #0]
   1483e:	4940      	ldr	r1, [pc, #256]	; (14940 <RADIO_RxDoneHandler+0x280>)
   14840:	1851      	adds	r1, r2, r1
   14842:	42a9      	cmp	r1, r5
   14844:	d801      	bhi.n	1484a <RADIO_RxDoneHandler+0x18a>
   14846:	3063      	adds	r0, #99	; 0x63
   14848:	e7c8      	b.n	147dc <RADIO_RxDoneHandler+0x11c>
   1484a:	493e      	ldr	r1, [pc, #248]	; (14944 <RADIO_RxDoneHandler+0x284>)
   1484c:	1852      	adds	r2, r2, r1
   1484e:	493e      	ldr	r1, [pc, #248]	; (14948 <RADIO_RxDoneHandler+0x288>)
   14850:	428a      	cmp	r2, r1
   14852:	d8c8      	bhi.n	147e6 <RADIO_RxDoneHandler+0x126>
   14854:	305c      	adds	r0, #92	; 0x5c
   14856:	e7c1      	b.n	147dc <RADIO_RxDoneHandler+0x11c>
   14858:	881a      	ldrh	r2, [r3, #0]
   1485a:	0712      	lsls	r2, r2, #28
   1485c:	0fd5      	lsrs	r5, r2, #31
   1485e:	2a00      	cmp	r2, #0
   14860:	da27      	bge.n	148b2 <RADIO_RxDoneHandler+0x1f2>
   14862:	2108      	movs	r1, #8
   14864:	881a      	ldrh	r2, [r3, #0]
   14866:	4c2d      	ldr	r4, [pc, #180]	; (1491c <RADIO_RxDoneHandler+0x25c>)
   14868:	438a      	bics	r2, r1
   1486a:	801a      	strh	r2, [r3, #0]
   1486c:	0023      	movs	r3, r4
   1486e:	2280      	movs	r2, #128	; 0x80
   14870:	3332      	adds	r3, #50	; 0x32
   14872:	701a      	strb	r2, [r3, #0]
   14874:	0023      	movs	r3, r4
   14876:	2200      	movs	r2, #0
   14878:	3334      	adds	r3, #52	; 0x34
   1487a:	7819      	ldrb	r1, [r3, #0]
   1487c:	0010      	movs	r0, r2
   1487e:	4b28      	ldr	r3, [pc, #160]	; (14920 <RADIO_RxDoneHandler+0x260>)
   14880:	4798      	blx	r3
   14882:	4b28      	ldr	r3, [pc, #160]	; (14924 <RADIO_RxDoneHandler+0x264>)
   14884:	4798      	blx	r3
   14886:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14888:	a901      	add	r1, sp, #4
   1488a:	604b      	str	r3, [r1, #4]
   1488c:	0023      	movs	r3, r4
   1488e:	332c      	adds	r3, #44	; 0x2c
   14890:	781b      	ldrb	r3, [r3, #0]
   14892:	0022      	movs	r2, r4
   14894:	720b      	strb	r3, [r1, #8]
   14896:	2300      	movs	r3, #0
   14898:	3257      	adds	r2, #87	; 0x57
   1489a:	7013      	strb	r3, [r2, #0]
   1489c:	700b      	strb	r3, [r1, #0]
   1489e:	4b22      	ldr	r3, [pc, #136]	; (14928 <RADIO_RxDoneHandler+0x268>)
   148a0:	701d      	strb	r5, [r3, #0]
   148a2:	4b22      	ldr	r3, [pc, #136]	; (1492c <RADIO_RxDoneHandler+0x26c>)
   148a4:	7818      	ldrb	r0, [r3, #0]
   148a6:	07c0      	lsls	r0, r0, #31
   148a8:	0fc0      	lsrs	r0, r0, #31
   148aa:	2801      	cmp	r0, #1
   148ac:	d000      	beq.n	148b0 <RADIO_RxDoneHandler+0x1f0>
   148ae:	e735      	b.n	1471c <RADIO_RxDoneHandler+0x5c>
   148b0:	e7b5      	b.n	1481e <RADIO_RxDoneHandler+0x15e>
   148b2:	881a      	ldrh	r2, [r3, #0]
   148b4:	05d2      	lsls	r2, r2, #23
   148b6:	0fd5      	lsrs	r5, r2, #31
   148b8:	2a00      	cmp	r2, #0
   148ba:	db00      	blt.n	148be <RADIO_RxDoneHandler+0x1fe>
   148bc:	e72e      	b.n	1471c <RADIO_RxDoneHandler+0x5c>
   148be:	4c17      	ldr	r4, [pc, #92]	; (1491c <RADIO_RxDoneHandler+0x25c>)
   148c0:	881a      	ldrh	r2, [r3, #0]
   148c2:	0026      	movs	r6, r4
   148c4:	4921      	ldr	r1, [pc, #132]	; (1494c <RADIO_RxDoneHandler+0x28c>)
   148c6:	362c      	adds	r6, #44	; 0x2c
   148c8:	400a      	ands	r2, r1
   148ca:	801a      	strh	r2, [r3, #0]
   148cc:	7832      	ldrb	r2, [r6, #0]
   148ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   148d0:	b2d2      	uxtb	r2, r2
   148d2:	2000      	movs	r0, #0
   148d4:	4b18      	ldr	r3, [pc, #96]	; (14938 <RADIO_RxDoneHandler+0x278>)
   148d6:	4798      	blx	r3
   148d8:	0023      	movs	r3, r4
   148da:	2200      	movs	r2, #0
   148dc:	3334      	adds	r3, #52	; 0x34
   148de:	7819      	ldrb	r1, [r3, #0]
   148e0:	0010      	movs	r0, r2
   148e2:	4b0f      	ldr	r3, [pc, #60]	; (14920 <RADIO_RxDoneHandler+0x260>)
   148e4:	4798      	blx	r3
   148e6:	4b0f      	ldr	r3, [pc, #60]	; (14924 <RADIO_RxDoneHandler+0x264>)
   148e8:	4798      	blx	r3
   148ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   148ec:	a901      	add	r1, sp, #4
   148ee:	604b      	str	r3, [r1, #4]
   148f0:	7833      	ldrb	r3, [r6, #0]
   148f2:	0022      	movs	r2, r4
   148f4:	720b      	strb	r3, [r1, #8]
   148f6:	2300      	movs	r3, #0
   148f8:	3257      	adds	r2, #87	; 0x57
   148fa:	7013      	strb	r3, [r2, #0]
   148fc:	700b      	strb	r3, [r1, #0]
   148fe:	4b0a      	ldr	r3, [pc, #40]	; (14928 <RADIO_RxDoneHandler+0x268>)
   14900:	701d      	strb	r5, [r3, #0]
   14902:	4b0a      	ldr	r3, [pc, #40]	; (1492c <RADIO_RxDoneHandler+0x26c>)
   14904:	781b      	ldrb	r3, [r3, #0]
   14906:	06db      	lsls	r3, r3, #27
   14908:	d400      	bmi.n	1490c <RADIO_RxDoneHandler+0x24c>
   1490a:	e707      	b.n	1471c <RADIO_RxDoneHandler+0x5c>
   1490c:	6923      	ldr	r3, [r4, #16]
   1490e:	2b00      	cmp	r3, #0
   14910:	d100      	bne.n	14914 <RADIO_RxDoneHandler+0x254>
   14912:	e703      	b.n	1471c <RADIO_RxDoneHandler+0x5c>
   14914:	2010      	movs	r0, #16
   14916:	e786      	b.n	14826 <RADIO_RxDoneHandler+0x166>
   14918:	20001ffc 	.word	0x20001ffc
   1491c:	20001ad0 	.word	0x20001ad0
   14920:	0000cb11 	.word	0x0000cb11
   14924:	000142f5 	.word	0x000142f5
   14928:	20001fff 	.word	0x20001fff
   1492c:	20001ffe 	.word	0x20001ffe
   14930:	000067b5 	.word	0x000067b5
   14934:	0000678d 	.word	0x0000678d
   14938:	00006821 	.word	0x00006821
   1493c:	096ae380 	.word	0x096ae380
   14940:	cc9eec80 	.word	0xcc9eec80
   14944:	e78fe580 	.word	0xe78fe580
   14948:	06dac2c0 	.word	0x06dac2c0
   1494c:	fffffeff 	.word	0xfffffeff

00014950 <Radio_LBTScanTimeout>:
   14950:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   14952:	4c1c      	ldr	r4, [pc, #112]	; (149c4 <Radio_LBTScanTimeout+0x74>)
   14954:	0025      	movs	r5, r4
   14956:	0023      	movs	r3, r4
   14958:	354f      	adds	r5, #79	; 0x4f
   1495a:	7829      	ldrb	r1, [r5, #0]
   1495c:	3340      	adds	r3, #64	; 0x40
   1495e:	3101      	adds	r1, #1
   14960:	b2c9      	uxtb	r1, r1
   14962:	7029      	strb	r1, [r5, #0]
   14964:	781b      	ldrb	r3, [r3, #0]
   14966:	428b      	cmp	r3, r1
   14968:	d315      	bcc.n	14996 <Radio_LBTScanTimeout+0x46>
   1496a:	260e      	movs	r6, #14
   1496c:	446e      	add	r6, sp
   1496e:	4b16      	ldr	r3, [pc, #88]	; (149c8 <Radio_LBTScanTimeout+0x78>)
   14970:	0030      	movs	r0, r6
   14972:	4798      	blx	r3
   14974:	2300      	movs	r3, #0
   14976:	5ef2      	ldrsh	r2, [r6, r3]
   14978:	782b      	ldrb	r3, [r5, #0]
   1497a:	4353      	muls	r3, r2
   1497c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1497e:	189b      	adds	r3, r3, r2
   14980:	6463      	str	r3, [r4, #68]	; 0x44
   14982:	0023      	movs	r3, r4
   14984:	2200      	movs	r2, #0
   14986:	3350      	adds	r3, #80	; 0x50
   14988:	7818      	ldrb	r0, [r3, #0]
   1498a:	9200      	str	r2, [sp, #0]
   1498c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   1498e:	4b0f      	ldr	r3, [pc, #60]	; (149cc <Radio_LBTScanTimeout+0x7c>)
   14990:	4c0f      	ldr	r4, [pc, #60]	; (149d0 <Radio_LBTScanTimeout+0x80>)
   14992:	47a0      	blx	r4
   14994:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   14996:	2380      	movs	r3, #128	; 0x80
   14998:	4a0e      	ldr	r2, [pc, #56]	; (149d4 <Radio_LBTScanTimeout+0x84>)
   1499a:	009b      	lsls	r3, r3, #2
   1499c:	8810      	ldrh	r0, [r2, #0]
   1499e:	4303      	orrs	r3, r0
   149a0:	8013      	strh	r3, [r2, #0]
   149a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   149a4:	0058      	lsls	r0, r3, #1
   149a6:	1e4b      	subs	r3, r1, #1
   149a8:	4359      	muls	r1, r3
   149aa:	4b0b      	ldr	r3, [pc, #44]	; (149d8 <Radio_LBTScanTimeout+0x88>)
   149ac:	b289      	uxth	r1, r1
   149ae:	4798      	blx	r3
   149b0:	0023      	movs	r3, r4
   149b2:	334c      	adds	r3, #76	; 0x4c
   149b4:	8018      	strh	r0, [r3, #0]
   149b6:	2300      	movs	r3, #0
   149b8:	2001      	movs	r0, #1
   149ba:	702b      	strb	r3, [r5, #0]
   149bc:	6463      	str	r3, [r4, #68]	; 0x44
   149be:	4b07      	ldr	r3, [pc, #28]	; (149dc <Radio_LBTScanTimeout+0x8c>)
   149c0:	4798      	blx	r3
   149c2:	e7e7      	b.n	14994 <Radio_LBTScanTimeout+0x44>
   149c4:	20001ad0 	.word	0x20001ad0
   149c8:	0000ccd5 	.word	0x0000ccd5
   149cc:	00014951 	.word	0x00014951
   149d0:	0000c4b5 	.word	0x0000c4b5
   149d4:	20001ffc 	.word	0x20001ffc
   149d8:	00014c85 	.word	0x00014c85
   149dc:	00013a51 	.word	0x00013a51

000149e0 <RADIO_ScanHandler>:
   149e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   149e2:	4b1e      	ldr	r3, [pc, #120]	; (14a5c <RADIO_ScanHandler+0x7c>)
   149e4:	4798      	blx	r3
   149e6:	2000      	movs	r0, #0
   149e8:	4b1d      	ldr	r3, [pc, #116]	; (14a60 <RADIO_ScanHandler+0x80>)
   149ea:	4798      	blx	r3
   149ec:	4b1d      	ldr	r3, [pc, #116]	; (14a64 <RADIO_ScanHandler+0x84>)
   149ee:	2004      	movs	r0, #4
   149f0:	4798      	blx	r3
   149f2:	4d1d      	ldr	r5, [pc, #116]	; (14a68 <RADIO_ScanHandler+0x88>)
   149f4:	2600      	movs	r6, #0
   149f6:	002b      	movs	r3, r5
   149f8:	334c      	adds	r3, #76	; 0x4c
   149fa:	801e      	strh	r6, [r3, #0]
   149fc:	002b      	movs	r3, r5
   149fe:	3334      	adds	r3, #52	; 0x34
   14a00:	781c      	ldrb	r4, [r3, #0]
   14a02:	2c01      	cmp	r4, #1
   14a04:	d11e      	bne.n	14a44 <RADIO_ScanHandler+0x64>
   14a06:	0022      	movs	r2, r4
   14a08:	0021      	movs	r1, r4
   14a0a:	0030      	movs	r0, r6
   14a0c:	4f17      	ldr	r7, [pc, #92]	; (14a6c <RADIO_ScanHandler+0x8c>)
   14a0e:	47b8      	blx	r7
   14a10:	4b17      	ldr	r3, [pc, #92]	; (14a70 <RADIO_ScanHandler+0x90>)
   14a12:	2011      	movs	r0, #17
   14a14:	4798      	blx	r3
   14a16:	002b      	movs	r3, r5
   14a18:	334e      	adds	r3, #78	; 0x4e
   14a1a:	7018      	strb	r0, [r3, #0]
   14a1c:	21ff      	movs	r1, #255	; 0xff
   14a1e:	2011      	movs	r0, #17
   14a20:	4b14      	ldr	r3, [pc, #80]	; (14a74 <RADIO_ScanHandler+0x94>)
   14a22:	4798      	blx	r3
   14a24:	0032      	movs	r2, r6
   14a26:	0021      	movs	r1, r4
   14a28:	2005      	movs	r0, #5
   14a2a:	47b8      	blx	r7
   14a2c:	2400      	movs	r4, #0
   14a2e:	21fa      	movs	r1, #250	; 0xfa
   14a30:	3550      	adds	r5, #80	; 0x50
   14a32:	7828      	ldrb	r0, [r5, #0]
   14a34:	4b10      	ldr	r3, [pc, #64]	; (14a78 <RADIO_ScanHandler+0x98>)
   14a36:	4d11      	ldr	r5, [pc, #68]	; (14a7c <RADIO_ScanHandler+0x9c>)
   14a38:	9400      	str	r4, [sp, #0]
   14a3a:	0022      	movs	r2, r4
   14a3c:	0089      	lsls	r1, r1, #2
   14a3e:	47a8      	blx	r5
   14a40:	0020      	movs	r0, r4
   14a42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   14a44:	2c00      	cmp	r4, #0
   14a46:	d1f1      	bne.n	14a2c <RADIO_ScanHandler+0x4c>
   14a48:	0021      	movs	r1, r4
   14a4a:	0020      	movs	r0, r4
   14a4c:	2201      	movs	r2, #1
   14a4e:	4e07      	ldr	r6, [pc, #28]	; (14a6c <RADIO_ScanHandler+0x8c>)
   14a50:	47b0      	blx	r6
   14a52:	0022      	movs	r2, r4
   14a54:	0021      	movs	r1, r4
   14a56:	2005      	movs	r0, #5
   14a58:	47b0      	blx	r6
   14a5a:	e7e7      	b.n	14a2c <RADIO_ScanHandler+0x4c>
   14a5c:	000141b1 	.word	0x000141b1
   14a60:	00013d0d 	.word	0x00013d0d
   14a64:	00013491 	.word	0x00013491
   14a68:	20001ad0 	.word	0x20001ad0
   14a6c:	0000cb11 	.word	0x0000cb11
   14a70:	000067b5 	.word	0x000067b5
   14a74:	0000678d 	.word	0x0000678d
   14a78:	00014951 	.word	0x00014951
   14a7c:	0000c4b5 	.word	0x0000c4b5

00014a80 <radioScanDoneHandler>:
   14a80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   14a82:	4a22      	ldr	r2, [pc, #136]	; (14b0c <radioScanDoneHandler+0x8c>)
   14a84:	4922      	ldr	r1, [pc, #136]	; (14b10 <radioScanDoneHandler+0x90>)
   14a86:	8813      	ldrh	r3, [r2, #0]
   14a88:	4d22      	ldr	r5, [pc, #136]	; (14b14 <radioScanDoneHandler+0x94>)
   14a8a:	400b      	ands	r3, r1
   14a8c:	8013      	strh	r3, [r2, #0]
   14a8e:	002b      	movs	r3, r5
   14a90:	3334      	adds	r3, #52	; 0x34
   14a92:	781c      	ldrb	r4, [r3, #0]
   14a94:	2c01      	cmp	r4, #1
   14a96:	d122      	bne.n	14ade <radioScanDoneHandler+0x5e>
   14a98:	21ff      	movs	r1, #255	; 0xff
   14a9a:	2012      	movs	r0, #18
   14a9c:	4e1e      	ldr	r6, [pc, #120]	; (14b18 <radioScanDoneHandler+0x98>)
   14a9e:	47b0      	blx	r6
   14aa0:	002b      	movs	r3, r5
   14aa2:	334e      	adds	r3, #78	; 0x4e
   14aa4:	7819      	ldrb	r1, [r3, #0]
   14aa6:	2011      	movs	r0, #17
   14aa8:	47b0      	blx	r6
   14aaa:	2200      	movs	r2, #0
   14aac:	0021      	movs	r1, r4
   14aae:	0010      	movs	r0, r2
   14ab0:	4b1a      	ldr	r3, [pc, #104]	; (14b1c <radioScanDoneHandler+0x9c>)
   14ab2:	4798      	blx	r3
   14ab4:	2000      	movs	r0, #0
   14ab6:	4b1a      	ldr	r3, [pc, #104]	; (14b20 <radioScanDoneHandler+0xa0>)
   14ab8:	4798      	blx	r3
   14aba:	4b1a      	ldr	r3, [pc, #104]	; (14b24 <radioScanDoneHandler+0xa4>)
   14abc:	4798      	blx	r3
   14abe:	002b      	movs	r3, r5
   14ac0:	334c      	adds	r3, #76	; 0x4c
   14ac2:	2100      	movs	r1, #0
   14ac4:	5e59      	ldrsh	r1, [r3, r1]
   14ac6:	233e      	movs	r3, #62	; 0x3e
   14ac8:	5eea      	ldrsh	r2, [r5, r3]
   14aca:	4b17      	ldr	r3, [pc, #92]	; (14b28 <radioScanDoneHandler+0xa8>)
   14acc:	4291      	cmp	r1, r2
   14ace:	da0c      	bge.n	14aea <radioScanDoneHandler+0x6a>
   14ad0:	2002      	movs	r0, #2
   14ad2:	4798      	blx	r3
   14ad4:	4b15      	ldr	r3, [pc, #84]	; (14b2c <radioScanDoneHandler+0xac>)
   14ad6:	4798      	blx	r3
   14ad8:	2000      	movs	r0, #0
   14ada:	b004      	add	sp, #16
   14adc:	bd70      	pop	{r4, r5, r6, pc}
   14ade:	2c00      	cmp	r4, #0
   14ae0:	d1e8      	bne.n	14ab4 <radioScanDoneHandler+0x34>
   14ae2:	0022      	movs	r2, r4
   14ae4:	0021      	movs	r1, r4
   14ae6:	0020      	movs	r0, r4
   14ae8:	e7e2      	b.n	14ab0 <radioScanDoneHandler+0x30>
   14aea:	2207      	movs	r2, #7
   14aec:	ac01      	add	r4, sp, #4
   14aee:	2001      	movs	r0, #1
   14af0:	7022      	strb	r2, [r4, #0]
   14af2:	4798      	blx	r3
   14af4:	4b0e      	ldr	r3, [pc, #56]	; (14b30 <radioScanDoneHandler+0xb0>)
   14af6:	781b      	ldrb	r3, [r3, #0]
   14af8:	079b      	lsls	r3, r3, #30
   14afa:	d5ed      	bpl.n	14ad8 <radioScanDoneHandler+0x58>
   14afc:	692b      	ldr	r3, [r5, #16]
   14afe:	2b00      	cmp	r3, #0
   14b00:	d0ea      	beq.n	14ad8 <radioScanDoneHandler+0x58>
   14b02:	0021      	movs	r1, r4
   14b04:	2002      	movs	r0, #2
   14b06:	4798      	blx	r3
   14b08:	e7e6      	b.n	14ad8 <radioScanDoneHandler+0x58>
   14b0a:	46c0      	nop			; (mov r8, r8)
   14b0c:	20001ffc 	.word	0x20001ffc
   14b10:	fffffdff 	.word	0xfffffdff
   14b14:	20001ad0 	.word	0x20001ad0
   14b18:	0000678d 	.word	0x0000678d
   14b1c:	0000cb11 	.word	0x0000cb11
   14b20:	00013e35 	.word	0x00013e35
   14b24:	000142f5 	.word	0x000142f5
   14b28:	00013afd 	.word	0x00013afd
   14b2c:	000141e5 	.word	0x000141e5
   14b30:	20001ffe 	.word	0x20001ffe

00014b34 <__gnu_thumb1_case_sqi>:
   14b34:	b402      	push	{r1}
   14b36:	4671      	mov	r1, lr
   14b38:	0849      	lsrs	r1, r1, #1
   14b3a:	0049      	lsls	r1, r1, #1
   14b3c:	5609      	ldrsb	r1, [r1, r0]
   14b3e:	0049      	lsls	r1, r1, #1
   14b40:	448e      	add	lr, r1
   14b42:	bc02      	pop	{r1}
   14b44:	4770      	bx	lr
   14b46:	46c0      	nop			; (mov r8, r8)

00014b48 <__gnu_thumb1_case_uqi>:
   14b48:	b402      	push	{r1}
   14b4a:	4671      	mov	r1, lr
   14b4c:	0849      	lsrs	r1, r1, #1
   14b4e:	0049      	lsls	r1, r1, #1
   14b50:	5c09      	ldrb	r1, [r1, r0]
   14b52:	0049      	lsls	r1, r1, #1
   14b54:	448e      	add	lr, r1
   14b56:	bc02      	pop	{r1}
   14b58:	4770      	bx	lr
   14b5a:	46c0      	nop			; (mov r8, r8)

00014b5c <__gnu_thumb1_case_uhi>:
   14b5c:	b403      	push	{r0, r1}
   14b5e:	4671      	mov	r1, lr
   14b60:	0849      	lsrs	r1, r1, #1
   14b62:	0040      	lsls	r0, r0, #1
   14b64:	0049      	lsls	r1, r1, #1
   14b66:	5a09      	ldrh	r1, [r1, r0]
   14b68:	0049      	lsls	r1, r1, #1
   14b6a:	448e      	add	lr, r1
   14b6c:	bc03      	pop	{r0, r1}
   14b6e:	4770      	bx	lr

00014b70 <__udivsi3>:
   14b70:	2200      	movs	r2, #0
   14b72:	0843      	lsrs	r3, r0, #1
   14b74:	428b      	cmp	r3, r1
   14b76:	d374      	bcc.n	14c62 <__udivsi3+0xf2>
   14b78:	0903      	lsrs	r3, r0, #4
   14b7a:	428b      	cmp	r3, r1
   14b7c:	d35f      	bcc.n	14c3e <__udivsi3+0xce>
   14b7e:	0a03      	lsrs	r3, r0, #8
   14b80:	428b      	cmp	r3, r1
   14b82:	d344      	bcc.n	14c0e <__udivsi3+0x9e>
   14b84:	0b03      	lsrs	r3, r0, #12
   14b86:	428b      	cmp	r3, r1
   14b88:	d328      	bcc.n	14bdc <__udivsi3+0x6c>
   14b8a:	0c03      	lsrs	r3, r0, #16
   14b8c:	428b      	cmp	r3, r1
   14b8e:	d30d      	bcc.n	14bac <__udivsi3+0x3c>
   14b90:	22ff      	movs	r2, #255	; 0xff
   14b92:	0209      	lsls	r1, r1, #8
   14b94:	ba12      	rev	r2, r2
   14b96:	0c03      	lsrs	r3, r0, #16
   14b98:	428b      	cmp	r3, r1
   14b9a:	d302      	bcc.n	14ba2 <__udivsi3+0x32>
   14b9c:	1212      	asrs	r2, r2, #8
   14b9e:	0209      	lsls	r1, r1, #8
   14ba0:	d065      	beq.n	14c6e <__udivsi3+0xfe>
   14ba2:	0b03      	lsrs	r3, r0, #12
   14ba4:	428b      	cmp	r3, r1
   14ba6:	d319      	bcc.n	14bdc <__udivsi3+0x6c>
   14ba8:	e000      	b.n	14bac <__udivsi3+0x3c>
   14baa:	0a09      	lsrs	r1, r1, #8
   14bac:	0bc3      	lsrs	r3, r0, #15
   14bae:	428b      	cmp	r3, r1
   14bb0:	d301      	bcc.n	14bb6 <__udivsi3+0x46>
   14bb2:	03cb      	lsls	r3, r1, #15
   14bb4:	1ac0      	subs	r0, r0, r3
   14bb6:	4152      	adcs	r2, r2
   14bb8:	0b83      	lsrs	r3, r0, #14
   14bba:	428b      	cmp	r3, r1
   14bbc:	d301      	bcc.n	14bc2 <__udivsi3+0x52>
   14bbe:	038b      	lsls	r3, r1, #14
   14bc0:	1ac0      	subs	r0, r0, r3
   14bc2:	4152      	adcs	r2, r2
   14bc4:	0b43      	lsrs	r3, r0, #13
   14bc6:	428b      	cmp	r3, r1
   14bc8:	d301      	bcc.n	14bce <__udivsi3+0x5e>
   14bca:	034b      	lsls	r3, r1, #13
   14bcc:	1ac0      	subs	r0, r0, r3
   14bce:	4152      	adcs	r2, r2
   14bd0:	0b03      	lsrs	r3, r0, #12
   14bd2:	428b      	cmp	r3, r1
   14bd4:	d301      	bcc.n	14bda <__udivsi3+0x6a>
   14bd6:	030b      	lsls	r3, r1, #12
   14bd8:	1ac0      	subs	r0, r0, r3
   14bda:	4152      	adcs	r2, r2
   14bdc:	0ac3      	lsrs	r3, r0, #11
   14bde:	428b      	cmp	r3, r1
   14be0:	d301      	bcc.n	14be6 <__udivsi3+0x76>
   14be2:	02cb      	lsls	r3, r1, #11
   14be4:	1ac0      	subs	r0, r0, r3
   14be6:	4152      	adcs	r2, r2
   14be8:	0a83      	lsrs	r3, r0, #10
   14bea:	428b      	cmp	r3, r1
   14bec:	d301      	bcc.n	14bf2 <__udivsi3+0x82>
   14bee:	028b      	lsls	r3, r1, #10
   14bf0:	1ac0      	subs	r0, r0, r3
   14bf2:	4152      	adcs	r2, r2
   14bf4:	0a43      	lsrs	r3, r0, #9
   14bf6:	428b      	cmp	r3, r1
   14bf8:	d301      	bcc.n	14bfe <__udivsi3+0x8e>
   14bfa:	024b      	lsls	r3, r1, #9
   14bfc:	1ac0      	subs	r0, r0, r3
   14bfe:	4152      	adcs	r2, r2
   14c00:	0a03      	lsrs	r3, r0, #8
   14c02:	428b      	cmp	r3, r1
   14c04:	d301      	bcc.n	14c0a <__udivsi3+0x9a>
   14c06:	020b      	lsls	r3, r1, #8
   14c08:	1ac0      	subs	r0, r0, r3
   14c0a:	4152      	adcs	r2, r2
   14c0c:	d2cd      	bcs.n	14baa <__udivsi3+0x3a>
   14c0e:	09c3      	lsrs	r3, r0, #7
   14c10:	428b      	cmp	r3, r1
   14c12:	d301      	bcc.n	14c18 <__udivsi3+0xa8>
   14c14:	01cb      	lsls	r3, r1, #7
   14c16:	1ac0      	subs	r0, r0, r3
   14c18:	4152      	adcs	r2, r2
   14c1a:	0983      	lsrs	r3, r0, #6
   14c1c:	428b      	cmp	r3, r1
   14c1e:	d301      	bcc.n	14c24 <__udivsi3+0xb4>
   14c20:	018b      	lsls	r3, r1, #6
   14c22:	1ac0      	subs	r0, r0, r3
   14c24:	4152      	adcs	r2, r2
   14c26:	0943      	lsrs	r3, r0, #5
   14c28:	428b      	cmp	r3, r1
   14c2a:	d301      	bcc.n	14c30 <__udivsi3+0xc0>
   14c2c:	014b      	lsls	r3, r1, #5
   14c2e:	1ac0      	subs	r0, r0, r3
   14c30:	4152      	adcs	r2, r2
   14c32:	0903      	lsrs	r3, r0, #4
   14c34:	428b      	cmp	r3, r1
   14c36:	d301      	bcc.n	14c3c <__udivsi3+0xcc>
   14c38:	010b      	lsls	r3, r1, #4
   14c3a:	1ac0      	subs	r0, r0, r3
   14c3c:	4152      	adcs	r2, r2
   14c3e:	08c3      	lsrs	r3, r0, #3
   14c40:	428b      	cmp	r3, r1
   14c42:	d301      	bcc.n	14c48 <__udivsi3+0xd8>
   14c44:	00cb      	lsls	r3, r1, #3
   14c46:	1ac0      	subs	r0, r0, r3
   14c48:	4152      	adcs	r2, r2
   14c4a:	0883      	lsrs	r3, r0, #2
   14c4c:	428b      	cmp	r3, r1
   14c4e:	d301      	bcc.n	14c54 <__udivsi3+0xe4>
   14c50:	008b      	lsls	r3, r1, #2
   14c52:	1ac0      	subs	r0, r0, r3
   14c54:	4152      	adcs	r2, r2
   14c56:	0843      	lsrs	r3, r0, #1
   14c58:	428b      	cmp	r3, r1
   14c5a:	d301      	bcc.n	14c60 <__udivsi3+0xf0>
   14c5c:	004b      	lsls	r3, r1, #1
   14c5e:	1ac0      	subs	r0, r0, r3
   14c60:	4152      	adcs	r2, r2
   14c62:	1a41      	subs	r1, r0, r1
   14c64:	d200      	bcs.n	14c68 <__udivsi3+0xf8>
   14c66:	4601      	mov	r1, r0
   14c68:	4152      	adcs	r2, r2
   14c6a:	4610      	mov	r0, r2
   14c6c:	4770      	bx	lr
   14c6e:	e7ff      	b.n	14c70 <__udivsi3+0x100>
   14c70:	b501      	push	{r0, lr}
   14c72:	2000      	movs	r0, #0
   14c74:	f000 f8f0 	bl	14e58 <__aeabi_idiv0>
   14c78:	bd02      	pop	{r1, pc}
   14c7a:	46c0      	nop			; (mov r8, r8)

00014c7c <__aeabi_uidivmod>:
   14c7c:	2900      	cmp	r1, #0
   14c7e:	d0f7      	beq.n	14c70 <__udivsi3+0x100>
   14c80:	e776      	b.n	14b70 <__udivsi3>
   14c82:	4770      	bx	lr

00014c84 <__divsi3>:
   14c84:	4603      	mov	r3, r0
   14c86:	430b      	orrs	r3, r1
   14c88:	d47f      	bmi.n	14d8a <__divsi3+0x106>
   14c8a:	2200      	movs	r2, #0
   14c8c:	0843      	lsrs	r3, r0, #1
   14c8e:	428b      	cmp	r3, r1
   14c90:	d374      	bcc.n	14d7c <__divsi3+0xf8>
   14c92:	0903      	lsrs	r3, r0, #4
   14c94:	428b      	cmp	r3, r1
   14c96:	d35f      	bcc.n	14d58 <__divsi3+0xd4>
   14c98:	0a03      	lsrs	r3, r0, #8
   14c9a:	428b      	cmp	r3, r1
   14c9c:	d344      	bcc.n	14d28 <__divsi3+0xa4>
   14c9e:	0b03      	lsrs	r3, r0, #12
   14ca0:	428b      	cmp	r3, r1
   14ca2:	d328      	bcc.n	14cf6 <__divsi3+0x72>
   14ca4:	0c03      	lsrs	r3, r0, #16
   14ca6:	428b      	cmp	r3, r1
   14ca8:	d30d      	bcc.n	14cc6 <__divsi3+0x42>
   14caa:	22ff      	movs	r2, #255	; 0xff
   14cac:	0209      	lsls	r1, r1, #8
   14cae:	ba12      	rev	r2, r2
   14cb0:	0c03      	lsrs	r3, r0, #16
   14cb2:	428b      	cmp	r3, r1
   14cb4:	d302      	bcc.n	14cbc <__divsi3+0x38>
   14cb6:	1212      	asrs	r2, r2, #8
   14cb8:	0209      	lsls	r1, r1, #8
   14cba:	d065      	beq.n	14d88 <__divsi3+0x104>
   14cbc:	0b03      	lsrs	r3, r0, #12
   14cbe:	428b      	cmp	r3, r1
   14cc0:	d319      	bcc.n	14cf6 <__divsi3+0x72>
   14cc2:	e000      	b.n	14cc6 <__divsi3+0x42>
   14cc4:	0a09      	lsrs	r1, r1, #8
   14cc6:	0bc3      	lsrs	r3, r0, #15
   14cc8:	428b      	cmp	r3, r1
   14cca:	d301      	bcc.n	14cd0 <__divsi3+0x4c>
   14ccc:	03cb      	lsls	r3, r1, #15
   14cce:	1ac0      	subs	r0, r0, r3
   14cd0:	4152      	adcs	r2, r2
   14cd2:	0b83      	lsrs	r3, r0, #14
   14cd4:	428b      	cmp	r3, r1
   14cd6:	d301      	bcc.n	14cdc <__divsi3+0x58>
   14cd8:	038b      	lsls	r3, r1, #14
   14cda:	1ac0      	subs	r0, r0, r3
   14cdc:	4152      	adcs	r2, r2
   14cde:	0b43      	lsrs	r3, r0, #13
   14ce0:	428b      	cmp	r3, r1
   14ce2:	d301      	bcc.n	14ce8 <__divsi3+0x64>
   14ce4:	034b      	lsls	r3, r1, #13
   14ce6:	1ac0      	subs	r0, r0, r3
   14ce8:	4152      	adcs	r2, r2
   14cea:	0b03      	lsrs	r3, r0, #12
   14cec:	428b      	cmp	r3, r1
   14cee:	d301      	bcc.n	14cf4 <__divsi3+0x70>
   14cf0:	030b      	lsls	r3, r1, #12
   14cf2:	1ac0      	subs	r0, r0, r3
   14cf4:	4152      	adcs	r2, r2
   14cf6:	0ac3      	lsrs	r3, r0, #11
   14cf8:	428b      	cmp	r3, r1
   14cfa:	d301      	bcc.n	14d00 <__divsi3+0x7c>
   14cfc:	02cb      	lsls	r3, r1, #11
   14cfe:	1ac0      	subs	r0, r0, r3
   14d00:	4152      	adcs	r2, r2
   14d02:	0a83      	lsrs	r3, r0, #10
   14d04:	428b      	cmp	r3, r1
   14d06:	d301      	bcc.n	14d0c <__divsi3+0x88>
   14d08:	028b      	lsls	r3, r1, #10
   14d0a:	1ac0      	subs	r0, r0, r3
   14d0c:	4152      	adcs	r2, r2
   14d0e:	0a43      	lsrs	r3, r0, #9
   14d10:	428b      	cmp	r3, r1
   14d12:	d301      	bcc.n	14d18 <__divsi3+0x94>
   14d14:	024b      	lsls	r3, r1, #9
   14d16:	1ac0      	subs	r0, r0, r3
   14d18:	4152      	adcs	r2, r2
   14d1a:	0a03      	lsrs	r3, r0, #8
   14d1c:	428b      	cmp	r3, r1
   14d1e:	d301      	bcc.n	14d24 <__divsi3+0xa0>
   14d20:	020b      	lsls	r3, r1, #8
   14d22:	1ac0      	subs	r0, r0, r3
   14d24:	4152      	adcs	r2, r2
   14d26:	d2cd      	bcs.n	14cc4 <__divsi3+0x40>
   14d28:	09c3      	lsrs	r3, r0, #7
   14d2a:	428b      	cmp	r3, r1
   14d2c:	d301      	bcc.n	14d32 <__divsi3+0xae>
   14d2e:	01cb      	lsls	r3, r1, #7
   14d30:	1ac0      	subs	r0, r0, r3
   14d32:	4152      	adcs	r2, r2
   14d34:	0983      	lsrs	r3, r0, #6
   14d36:	428b      	cmp	r3, r1
   14d38:	d301      	bcc.n	14d3e <__divsi3+0xba>
   14d3a:	018b      	lsls	r3, r1, #6
   14d3c:	1ac0      	subs	r0, r0, r3
   14d3e:	4152      	adcs	r2, r2
   14d40:	0943      	lsrs	r3, r0, #5
   14d42:	428b      	cmp	r3, r1
   14d44:	d301      	bcc.n	14d4a <__divsi3+0xc6>
   14d46:	014b      	lsls	r3, r1, #5
   14d48:	1ac0      	subs	r0, r0, r3
   14d4a:	4152      	adcs	r2, r2
   14d4c:	0903      	lsrs	r3, r0, #4
   14d4e:	428b      	cmp	r3, r1
   14d50:	d301      	bcc.n	14d56 <__divsi3+0xd2>
   14d52:	010b      	lsls	r3, r1, #4
   14d54:	1ac0      	subs	r0, r0, r3
   14d56:	4152      	adcs	r2, r2
   14d58:	08c3      	lsrs	r3, r0, #3
   14d5a:	428b      	cmp	r3, r1
   14d5c:	d301      	bcc.n	14d62 <__divsi3+0xde>
   14d5e:	00cb      	lsls	r3, r1, #3
   14d60:	1ac0      	subs	r0, r0, r3
   14d62:	4152      	adcs	r2, r2
   14d64:	0883      	lsrs	r3, r0, #2
   14d66:	428b      	cmp	r3, r1
   14d68:	d301      	bcc.n	14d6e <__divsi3+0xea>
   14d6a:	008b      	lsls	r3, r1, #2
   14d6c:	1ac0      	subs	r0, r0, r3
   14d6e:	4152      	adcs	r2, r2
   14d70:	0843      	lsrs	r3, r0, #1
   14d72:	428b      	cmp	r3, r1
   14d74:	d301      	bcc.n	14d7a <__divsi3+0xf6>
   14d76:	004b      	lsls	r3, r1, #1
   14d78:	1ac0      	subs	r0, r0, r3
   14d7a:	4152      	adcs	r2, r2
   14d7c:	1a41      	subs	r1, r0, r1
   14d7e:	d200      	bcs.n	14d82 <__divsi3+0xfe>
   14d80:	4601      	mov	r1, r0
   14d82:	4152      	adcs	r2, r2
   14d84:	4610      	mov	r0, r2
   14d86:	4770      	bx	lr
   14d88:	e05d      	b.n	14e46 <__divsi3+0x1c2>
   14d8a:	0fca      	lsrs	r2, r1, #31
   14d8c:	d000      	beq.n	14d90 <__divsi3+0x10c>
   14d8e:	4249      	negs	r1, r1
   14d90:	1003      	asrs	r3, r0, #32
   14d92:	d300      	bcc.n	14d96 <__divsi3+0x112>
   14d94:	4240      	negs	r0, r0
   14d96:	4053      	eors	r3, r2
   14d98:	2200      	movs	r2, #0
   14d9a:	469c      	mov	ip, r3
   14d9c:	0903      	lsrs	r3, r0, #4
   14d9e:	428b      	cmp	r3, r1
   14da0:	d32d      	bcc.n	14dfe <__divsi3+0x17a>
   14da2:	0a03      	lsrs	r3, r0, #8
   14da4:	428b      	cmp	r3, r1
   14da6:	d312      	bcc.n	14dce <__divsi3+0x14a>
   14da8:	22fc      	movs	r2, #252	; 0xfc
   14daa:	0189      	lsls	r1, r1, #6
   14dac:	ba12      	rev	r2, r2
   14dae:	0a03      	lsrs	r3, r0, #8
   14db0:	428b      	cmp	r3, r1
   14db2:	d30c      	bcc.n	14dce <__divsi3+0x14a>
   14db4:	0189      	lsls	r1, r1, #6
   14db6:	1192      	asrs	r2, r2, #6
   14db8:	428b      	cmp	r3, r1
   14dba:	d308      	bcc.n	14dce <__divsi3+0x14a>
   14dbc:	0189      	lsls	r1, r1, #6
   14dbe:	1192      	asrs	r2, r2, #6
   14dc0:	428b      	cmp	r3, r1
   14dc2:	d304      	bcc.n	14dce <__divsi3+0x14a>
   14dc4:	0189      	lsls	r1, r1, #6
   14dc6:	d03a      	beq.n	14e3e <__divsi3+0x1ba>
   14dc8:	1192      	asrs	r2, r2, #6
   14dca:	e000      	b.n	14dce <__divsi3+0x14a>
   14dcc:	0989      	lsrs	r1, r1, #6
   14dce:	09c3      	lsrs	r3, r0, #7
   14dd0:	428b      	cmp	r3, r1
   14dd2:	d301      	bcc.n	14dd8 <__divsi3+0x154>
   14dd4:	01cb      	lsls	r3, r1, #7
   14dd6:	1ac0      	subs	r0, r0, r3
   14dd8:	4152      	adcs	r2, r2
   14dda:	0983      	lsrs	r3, r0, #6
   14ddc:	428b      	cmp	r3, r1
   14dde:	d301      	bcc.n	14de4 <__divsi3+0x160>
   14de0:	018b      	lsls	r3, r1, #6
   14de2:	1ac0      	subs	r0, r0, r3
   14de4:	4152      	adcs	r2, r2
   14de6:	0943      	lsrs	r3, r0, #5
   14de8:	428b      	cmp	r3, r1
   14dea:	d301      	bcc.n	14df0 <__divsi3+0x16c>
   14dec:	014b      	lsls	r3, r1, #5
   14dee:	1ac0      	subs	r0, r0, r3
   14df0:	4152      	adcs	r2, r2
   14df2:	0903      	lsrs	r3, r0, #4
   14df4:	428b      	cmp	r3, r1
   14df6:	d301      	bcc.n	14dfc <__divsi3+0x178>
   14df8:	010b      	lsls	r3, r1, #4
   14dfa:	1ac0      	subs	r0, r0, r3
   14dfc:	4152      	adcs	r2, r2
   14dfe:	08c3      	lsrs	r3, r0, #3
   14e00:	428b      	cmp	r3, r1
   14e02:	d301      	bcc.n	14e08 <__divsi3+0x184>
   14e04:	00cb      	lsls	r3, r1, #3
   14e06:	1ac0      	subs	r0, r0, r3
   14e08:	4152      	adcs	r2, r2
   14e0a:	0883      	lsrs	r3, r0, #2
   14e0c:	428b      	cmp	r3, r1
   14e0e:	d301      	bcc.n	14e14 <__divsi3+0x190>
   14e10:	008b      	lsls	r3, r1, #2
   14e12:	1ac0      	subs	r0, r0, r3
   14e14:	4152      	adcs	r2, r2
   14e16:	d2d9      	bcs.n	14dcc <__divsi3+0x148>
   14e18:	0843      	lsrs	r3, r0, #1
   14e1a:	428b      	cmp	r3, r1
   14e1c:	d301      	bcc.n	14e22 <__divsi3+0x19e>
   14e1e:	004b      	lsls	r3, r1, #1
   14e20:	1ac0      	subs	r0, r0, r3
   14e22:	4152      	adcs	r2, r2
   14e24:	1a41      	subs	r1, r0, r1
   14e26:	d200      	bcs.n	14e2a <__divsi3+0x1a6>
   14e28:	4601      	mov	r1, r0
   14e2a:	4663      	mov	r3, ip
   14e2c:	4152      	adcs	r2, r2
   14e2e:	105b      	asrs	r3, r3, #1
   14e30:	4610      	mov	r0, r2
   14e32:	d301      	bcc.n	14e38 <__divsi3+0x1b4>
   14e34:	4240      	negs	r0, r0
   14e36:	2b00      	cmp	r3, #0
   14e38:	d500      	bpl.n	14e3c <__divsi3+0x1b8>
   14e3a:	4249      	negs	r1, r1
   14e3c:	4770      	bx	lr
   14e3e:	4663      	mov	r3, ip
   14e40:	105b      	asrs	r3, r3, #1
   14e42:	d300      	bcc.n	14e46 <__divsi3+0x1c2>
   14e44:	4240      	negs	r0, r0
   14e46:	b501      	push	{r0, lr}
   14e48:	2000      	movs	r0, #0
   14e4a:	f000 f805 	bl	14e58 <__aeabi_idiv0>
   14e4e:	bd02      	pop	{r1, pc}

00014e50 <__aeabi_idivmod>:
   14e50:	2900      	cmp	r1, #0
   14e52:	d0f8      	beq.n	14e46 <__divsi3+0x1c2>
   14e54:	e716      	b.n	14c84 <__divsi3>
   14e56:	4770      	bx	lr

00014e58 <__aeabi_idiv0>:
   14e58:	4770      	bx	lr
   14e5a:	46c0      	nop			; (mov r8, r8)

00014e5c <__aeabi_cfrcmple>:
   14e5c:	4684      	mov	ip, r0
   14e5e:	1c08      	adds	r0, r1, #0
   14e60:	4661      	mov	r1, ip
   14e62:	e7ff      	b.n	14e64 <__aeabi_cfcmpeq>

00014e64 <__aeabi_cfcmpeq>:
   14e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   14e66:	f000 fcb5 	bl	157d4 <__lesf2>
   14e6a:	2800      	cmp	r0, #0
   14e6c:	d401      	bmi.n	14e72 <__aeabi_cfcmpeq+0xe>
   14e6e:	2100      	movs	r1, #0
   14e70:	42c8      	cmn	r0, r1
   14e72:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00014e74 <__aeabi_fcmpeq>:
   14e74:	b510      	push	{r4, lr}
   14e76:	f000 fc47 	bl	15708 <__eqsf2>
   14e7a:	4240      	negs	r0, r0
   14e7c:	3001      	adds	r0, #1
   14e7e:	bd10      	pop	{r4, pc}

00014e80 <__aeabi_fcmplt>:
   14e80:	b510      	push	{r4, lr}
   14e82:	f000 fca7 	bl	157d4 <__lesf2>
   14e86:	2800      	cmp	r0, #0
   14e88:	db01      	blt.n	14e8e <__aeabi_fcmplt+0xe>
   14e8a:	2000      	movs	r0, #0
   14e8c:	bd10      	pop	{r4, pc}
   14e8e:	2001      	movs	r0, #1
   14e90:	bd10      	pop	{r4, pc}
   14e92:	46c0      	nop			; (mov r8, r8)

00014e94 <__aeabi_fcmple>:
   14e94:	b510      	push	{r4, lr}
   14e96:	f000 fc9d 	bl	157d4 <__lesf2>
   14e9a:	2800      	cmp	r0, #0
   14e9c:	dd01      	ble.n	14ea2 <__aeabi_fcmple+0xe>
   14e9e:	2000      	movs	r0, #0
   14ea0:	bd10      	pop	{r4, pc}
   14ea2:	2001      	movs	r0, #1
   14ea4:	bd10      	pop	{r4, pc}
   14ea6:	46c0      	nop			; (mov r8, r8)

00014ea8 <__aeabi_fcmpgt>:
   14ea8:	b510      	push	{r4, lr}
   14eaa:	f000 fc53 	bl	15754 <__gesf2>
   14eae:	2800      	cmp	r0, #0
   14eb0:	dc01      	bgt.n	14eb6 <__aeabi_fcmpgt+0xe>
   14eb2:	2000      	movs	r0, #0
   14eb4:	bd10      	pop	{r4, pc}
   14eb6:	2001      	movs	r0, #1
   14eb8:	bd10      	pop	{r4, pc}
   14eba:	46c0      	nop			; (mov r8, r8)

00014ebc <__aeabi_fcmpge>:
   14ebc:	b510      	push	{r4, lr}
   14ebe:	f000 fc49 	bl	15754 <__gesf2>
   14ec2:	2800      	cmp	r0, #0
   14ec4:	da01      	bge.n	14eca <__aeabi_fcmpge+0xe>
   14ec6:	2000      	movs	r0, #0
   14ec8:	bd10      	pop	{r4, pc}
   14eca:	2001      	movs	r0, #1
   14ecc:	bd10      	pop	{r4, pc}
   14ece:	46c0      	nop			; (mov r8, r8)

00014ed0 <__aeabi_uldivmod>:
   14ed0:	2b00      	cmp	r3, #0
   14ed2:	d111      	bne.n	14ef8 <__aeabi_uldivmod+0x28>
   14ed4:	2a00      	cmp	r2, #0
   14ed6:	d10f      	bne.n	14ef8 <__aeabi_uldivmod+0x28>
   14ed8:	2900      	cmp	r1, #0
   14eda:	d100      	bne.n	14ede <__aeabi_uldivmod+0xe>
   14edc:	2800      	cmp	r0, #0
   14ede:	d002      	beq.n	14ee6 <__aeabi_uldivmod+0x16>
   14ee0:	2100      	movs	r1, #0
   14ee2:	43c9      	mvns	r1, r1
   14ee4:	1c08      	adds	r0, r1, #0
   14ee6:	b407      	push	{r0, r1, r2}
   14ee8:	4802      	ldr	r0, [pc, #8]	; (14ef4 <__aeabi_uldivmod+0x24>)
   14eea:	a102      	add	r1, pc, #8	; (adr r1, 14ef4 <__aeabi_uldivmod+0x24>)
   14eec:	1840      	adds	r0, r0, r1
   14eee:	9002      	str	r0, [sp, #8]
   14ef0:	bd03      	pop	{r0, r1, pc}
   14ef2:	46c0      	nop			; (mov r8, r8)
   14ef4:	ffffff65 	.word	0xffffff65
   14ef8:	b403      	push	{r0, r1}
   14efa:	4668      	mov	r0, sp
   14efc:	b501      	push	{r0, lr}
   14efe:	9802      	ldr	r0, [sp, #8]
   14f00:	f000 f868 	bl	14fd4 <__udivmoddi4>
   14f04:	9b01      	ldr	r3, [sp, #4]
   14f06:	469e      	mov	lr, r3
   14f08:	b002      	add	sp, #8
   14f0a:	bc0c      	pop	{r2, r3}
   14f0c:	4770      	bx	lr
   14f0e:	46c0      	nop			; (mov r8, r8)

00014f10 <__aeabi_lmul>:
   14f10:	b5f0      	push	{r4, r5, r6, r7, lr}
   14f12:	46ce      	mov	lr, r9
   14f14:	4647      	mov	r7, r8
   14f16:	0415      	lsls	r5, r2, #16
   14f18:	0c2d      	lsrs	r5, r5, #16
   14f1a:	002e      	movs	r6, r5
   14f1c:	b580      	push	{r7, lr}
   14f1e:	0407      	lsls	r7, r0, #16
   14f20:	0c14      	lsrs	r4, r2, #16
   14f22:	0c3f      	lsrs	r7, r7, #16
   14f24:	4699      	mov	r9, r3
   14f26:	0c03      	lsrs	r3, r0, #16
   14f28:	437e      	muls	r6, r7
   14f2a:	435d      	muls	r5, r3
   14f2c:	4367      	muls	r7, r4
   14f2e:	4363      	muls	r3, r4
   14f30:	197f      	adds	r7, r7, r5
   14f32:	0c34      	lsrs	r4, r6, #16
   14f34:	19e4      	adds	r4, r4, r7
   14f36:	469c      	mov	ip, r3
   14f38:	42a5      	cmp	r5, r4
   14f3a:	d903      	bls.n	14f44 <__aeabi_lmul+0x34>
   14f3c:	2380      	movs	r3, #128	; 0x80
   14f3e:	025b      	lsls	r3, r3, #9
   14f40:	4698      	mov	r8, r3
   14f42:	44c4      	add	ip, r8
   14f44:	464b      	mov	r3, r9
   14f46:	4351      	muls	r1, r2
   14f48:	4343      	muls	r3, r0
   14f4a:	0436      	lsls	r6, r6, #16
   14f4c:	0c36      	lsrs	r6, r6, #16
   14f4e:	0c25      	lsrs	r5, r4, #16
   14f50:	0424      	lsls	r4, r4, #16
   14f52:	4465      	add	r5, ip
   14f54:	19a4      	adds	r4, r4, r6
   14f56:	1859      	adds	r1, r3, r1
   14f58:	1949      	adds	r1, r1, r5
   14f5a:	0020      	movs	r0, r4
   14f5c:	bc0c      	pop	{r2, r3}
   14f5e:	4690      	mov	r8, r2
   14f60:	4699      	mov	r9, r3
   14f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014f64 <__aeabi_f2uiz>:
   14f64:	219e      	movs	r1, #158	; 0x9e
   14f66:	b510      	push	{r4, lr}
   14f68:	05c9      	lsls	r1, r1, #23
   14f6a:	1c04      	adds	r4, r0, #0
   14f6c:	f7ff ffa6 	bl	14ebc <__aeabi_fcmpge>
   14f70:	2800      	cmp	r0, #0
   14f72:	d103      	bne.n	14f7c <__aeabi_f2uiz+0x18>
   14f74:	1c20      	adds	r0, r4, #0
   14f76:	f000 ff2b 	bl	15dd0 <__aeabi_f2iz>
   14f7a:	bd10      	pop	{r4, pc}
   14f7c:	219e      	movs	r1, #158	; 0x9e
   14f7e:	1c20      	adds	r0, r4, #0
   14f80:	05c9      	lsls	r1, r1, #23
   14f82:	f000 fd89 	bl	15a98 <__aeabi_fsub>
   14f86:	f000 ff23 	bl	15dd0 <__aeabi_f2iz>
   14f8a:	2380      	movs	r3, #128	; 0x80
   14f8c:	061b      	lsls	r3, r3, #24
   14f8e:	469c      	mov	ip, r3
   14f90:	4460      	add	r0, ip
   14f92:	e7f2      	b.n	14f7a <__aeabi_f2uiz+0x16>

00014f94 <__aeabi_f2ulz>:
   14f94:	b570      	push	{r4, r5, r6, lr}
   14f96:	f002 fc17 	bl	177c8 <__aeabi_f2d>
   14f9a:	2200      	movs	r2, #0
   14f9c:	4b0b      	ldr	r3, [pc, #44]	; (14fcc <__aeabi_f2ulz+0x38>)
   14f9e:	000d      	movs	r5, r1
   14fa0:	0004      	movs	r4, r0
   14fa2:	f001 fe0f 	bl	16bc4 <__aeabi_dmul>
   14fa6:	f002 fc8b 	bl	178c0 <__aeabi_d2uiz>
   14faa:	0006      	movs	r6, r0
   14fac:	f002 fbd4 	bl	17758 <__aeabi_ui2d>
   14fb0:	2200      	movs	r2, #0
   14fb2:	4b07      	ldr	r3, [pc, #28]	; (14fd0 <__aeabi_f2ulz+0x3c>)
   14fb4:	f001 fe06 	bl	16bc4 <__aeabi_dmul>
   14fb8:	0002      	movs	r2, r0
   14fba:	000b      	movs	r3, r1
   14fbc:	0020      	movs	r0, r4
   14fbe:	0029      	movs	r1, r5
   14fc0:	f002 f880 	bl	170c4 <__aeabi_dsub>
   14fc4:	f002 fc7c 	bl	178c0 <__aeabi_d2uiz>
   14fc8:	0031      	movs	r1, r6
   14fca:	bd70      	pop	{r4, r5, r6, pc}
   14fcc:	3df00000 	.word	0x3df00000
   14fd0:	41f00000 	.word	0x41f00000

00014fd4 <__udivmoddi4>:
   14fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fd6:	4657      	mov	r7, sl
   14fd8:	464e      	mov	r6, r9
   14fda:	4645      	mov	r5, r8
   14fdc:	46de      	mov	lr, fp
   14fde:	b5e0      	push	{r5, r6, r7, lr}
   14fe0:	0004      	movs	r4, r0
   14fe2:	b083      	sub	sp, #12
   14fe4:	000d      	movs	r5, r1
   14fe6:	4692      	mov	sl, r2
   14fe8:	4699      	mov	r9, r3
   14fea:	428b      	cmp	r3, r1
   14fec:	d82f      	bhi.n	1504e <__udivmoddi4+0x7a>
   14fee:	d02c      	beq.n	1504a <__udivmoddi4+0x76>
   14ff0:	4649      	mov	r1, r9
   14ff2:	4650      	mov	r0, sl
   14ff4:	f002 fc58 	bl	178a8 <__clzdi2>
   14ff8:	0029      	movs	r1, r5
   14ffa:	0006      	movs	r6, r0
   14ffc:	0020      	movs	r0, r4
   14ffe:	f002 fc53 	bl	178a8 <__clzdi2>
   15002:	1a33      	subs	r3, r6, r0
   15004:	4698      	mov	r8, r3
   15006:	3b20      	subs	r3, #32
   15008:	469b      	mov	fp, r3
   1500a:	d500      	bpl.n	1500e <__udivmoddi4+0x3a>
   1500c:	e074      	b.n	150f8 <__udivmoddi4+0x124>
   1500e:	4653      	mov	r3, sl
   15010:	465a      	mov	r2, fp
   15012:	4093      	lsls	r3, r2
   15014:	001f      	movs	r7, r3
   15016:	4653      	mov	r3, sl
   15018:	4642      	mov	r2, r8
   1501a:	4093      	lsls	r3, r2
   1501c:	001e      	movs	r6, r3
   1501e:	42af      	cmp	r7, r5
   15020:	d829      	bhi.n	15076 <__udivmoddi4+0xa2>
   15022:	d026      	beq.n	15072 <__udivmoddi4+0x9e>
   15024:	465b      	mov	r3, fp
   15026:	1ba4      	subs	r4, r4, r6
   15028:	41bd      	sbcs	r5, r7
   1502a:	2b00      	cmp	r3, #0
   1502c:	da00      	bge.n	15030 <__udivmoddi4+0x5c>
   1502e:	e079      	b.n	15124 <__udivmoddi4+0x150>
   15030:	2200      	movs	r2, #0
   15032:	2300      	movs	r3, #0
   15034:	9200      	str	r2, [sp, #0]
   15036:	9301      	str	r3, [sp, #4]
   15038:	2301      	movs	r3, #1
   1503a:	465a      	mov	r2, fp
   1503c:	4093      	lsls	r3, r2
   1503e:	9301      	str	r3, [sp, #4]
   15040:	2301      	movs	r3, #1
   15042:	4642      	mov	r2, r8
   15044:	4093      	lsls	r3, r2
   15046:	9300      	str	r3, [sp, #0]
   15048:	e019      	b.n	1507e <__udivmoddi4+0xaa>
   1504a:	4282      	cmp	r2, r0
   1504c:	d9d0      	bls.n	14ff0 <__udivmoddi4+0x1c>
   1504e:	2200      	movs	r2, #0
   15050:	2300      	movs	r3, #0
   15052:	9200      	str	r2, [sp, #0]
   15054:	9301      	str	r3, [sp, #4]
   15056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15058:	2b00      	cmp	r3, #0
   1505a:	d001      	beq.n	15060 <__udivmoddi4+0x8c>
   1505c:	601c      	str	r4, [r3, #0]
   1505e:	605d      	str	r5, [r3, #4]
   15060:	9800      	ldr	r0, [sp, #0]
   15062:	9901      	ldr	r1, [sp, #4]
   15064:	b003      	add	sp, #12
   15066:	bc3c      	pop	{r2, r3, r4, r5}
   15068:	4690      	mov	r8, r2
   1506a:	4699      	mov	r9, r3
   1506c:	46a2      	mov	sl, r4
   1506e:	46ab      	mov	fp, r5
   15070:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15072:	42a3      	cmp	r3, r4
   15074:	d9d6      	bls.n	15024 <__udivmoddi4+0x50>
   15076:	2200      	movs	r2, #0
   15078:	2300      	movs	r3, #0
   1507a:	9200      	str	r2, [sp, #0]
   1507c:	9301      	str	r3, [sp, #4]
   1507e:	4643      	mov	r3, r8
   15080:	2b00      	cmp	r3, #0
   15082:	d0e8      	beq.n	15056 <__udivmoddi4+0x82>
   15084:	07fb      	lsls	r3, r7, #31
   15086:	0872      	lsrs	r2, r6, #1
   15088:	431a      	orrs	r2, r3
   1508a:	4646      	mov	r6, r8
   1508c:	087b      	lsrs	r3, r7, #1
   1508e:	e00e      	b.n	150ae <__udivmoddi4+0xda>
   15090:	42ab      	cmp	r3, r5
   15092:	d101      	bne.n	15098 <__udivmoddi4+0xc4>
   15094:	42a2      	cmp	r2, r4
   15096:	d80c      	bhi.n	150b2 <__udivmoddi4+0xde>
   15098:	1aa4      	subs	r4, r4, r2
   1509a:	419d      	sbcs	r5, r3
   1509c:	2001      	movs	r0, #1
   1509e:	1924      	adds	r4, r4, r4
   150a0:	416d      	adcs	r5, r5
   150a2:	2100      	movs	r1, #0
   150a4:	3e01      	subs	r6, #1
   150a6:	1824      	adds	r4, r4, r0
   150a8:	414d      	adcs	r5, r1
   150aa:	2e00      	cmp	r6, #0
   150ac:	d006      	beq.n	150bc <__udivmoddi4+0xe8>
   150ae:	42ab      	cmp	r3, r5
   150b0:	d9ee      	bls.n	15090 <__udivmoddi4+0xbc>
   150b2:	3e01      	subs	r6, #1
   150b4:	1924      	adds	r4, r4, r4
   150b6:	416d      	adcs	r5, r5
   150b8:	2e00      	cmp	r6, #0
   150ba:	d1f8      	bne.n	150ae <__udivmoddi4+0xda>
   150bc:	465b      	mov	r3, fp
   150be:	9800      	ldr	r0, [sp, #0]
   150c0:	9901      	ldr	r1, [sp, #4]
   150c2:	1900      	adds	r0, r0, r4
   150c4:	4169      	adcs	r1, r5
   150c6:	2b00      	cmp	r3, #0
   150c8:	db22      	blt.n	15110 <__udivmoddi4+0x13c>
   150ca:	002b      	movs	r3, r5
   150cc:	465a      	mov	r2, fp
   150ce:	40d3      	lsrs	r3, r2
   150d0:	002a      	movs	r2, r5
   150d2:	4644      	mov	r4, r8
   150d4:	40e2      	lsrs	r2, r4
   150d6:	001c      	movs	r4, r3
   150d8:	465b      	mov	r3, fp
   150da:	0015      	movs	r5, r2
   150dc:	2b00      	cmp	r3, #0
   150de:	db2c      	blt.n	1513a <__udivmoddi4+0x166>
   150e0:	0026      	movs	r6, r4
   150e2:	409e      	lsls	r6, r3
   150e4:	0033      	movs	r3, r6
   150e6:	0026      	movs	r6, r4
   150e8:	4647      	mov	r7, r8
   150ea:	40be      	lsls	r6, r7
   150ec:	0032      	movs	r2, r6
   150ee:	1a80      	subs	r0, r0, r2
   150f0:	4199      	sbcs	r1, r3
   150f2:	9000      	str	r0, [sp, #0]
   150f4:	9101      	str	r1, [sp, #4]
   150f6:	e7ae      	b.n	15056 <__udivmoddi4+0x82>
   150f8:	4642      	mov	r2, r8
   150fa:	2320      	movs	r3, #32
   150fc:	1a9b      	subs	r3, r3, r2
   150fe:	4652      	mov	r2, sl
   15100:	40da      	lsrs	r2, r3
   15102:	4641      	mov	r1, r8
   15104:	0013      	movs	r3, r2
   15106:	464a      	mov	r2, r9
   15108:	408a      	lsls	r2, r1
   1510a:	0017      	movs	r7, r2
   1510c:	431f      	orrs	r7, r3
   1510e:	e782      	b.n	15016 <__udivmoddi4+0x42>
   15110:	4642      	mov	r2, r8
   15112:	2320      	movs	r3, #32
   15114:	1a9b      	subs	r3, r3, r2
   15116:	002a      	movs	r2, r5
   15118:	4646      	mov	r6, r8
   1511a:	409a      	lsls	r2, r3
   1511c:	0023      	movs	r3, r4
   1511e:	40f3      	lsrs	r3, r6
   15120:	4313      	orrs	r3, r2
   15122:	e7d5      	b.n	150d0 <__udivmoddi4+0xfc>
   15124:	4642      	mov	r2, r8
   15126:	2320      	movs	r3, #32
   15128:	2100      	movs	r1, #0
   1512a:	1a9b      	subs	r3, r3, r2
   1512c:	2200      	movs	r2, #0
   1512e:	9100      	str	r1, [sp, #0]
   15130:	9201      	str	r2, [sp, #4]
   15132:	2201      	movs	r2, #1
   15134:	40da      	lsrs	r2, r3
   15136:	9201      	str	r2, [sp, #4]
   15138:	e782      	b.n	15040 <__udivmoddi4+0x6c>
   1513a:	4642      	mov	r2, r8
   1513c:	2320      	movs	r3, #32
   1513e:	0026      	movs	r6, r4
   15140:	1a9b      	subs	r3, r3, r2
   15142:	40de      	lsrs	r6, r3
   15144:	002f      	movs	r7, r5
   15146:	46b4      	mov	ip, r6
   15148:	4097      	lsls	r7, r2
   1514a:	4666      	mov	r6, ip
   1514c:	003b      	movs	r3, r7
   1514e:	4333      	orrs	r3, r6
   15150:	e7c9      	b.n	150e6 <__udivmoddi4+0x112>
   15152:	46c0      	nop			; (mov r8, r8)

00015154 <__aeabi_fadd>:
   15154:	b5f0      	push	{r4, r5, r6, r7, lr}
   15156:	46c6      	mov	lr, r8
   15158:	024e      	lsls	r6, r1, #9
   1515a:	0247      	lsls	r7, r0, #9
   1515c:	0a76      	lsrs	r6, r6, #9
   1515e:	0a7b      	lsrs	r3, r7, #9
   15160:	0044      	lsls	r4, r0, #1
   15162:	0fc5      	lsrs	r5, r0, #31
   15164:	00f7      	lsls	r7, r6, #3
   15166:	0048      	lsls	r0, r1, #1
   15168:	4698      	mov	r8, r3
   1516a:	b500      	push	{lr}
   1516c:	0e24      	lsrs	r4, r4, #24
   1516e:	002a      	movs	r2, r5
   15170:	00db      	lsls	r3, r3, #3
   15172:	0e00      	lsrs	r0, r0, #24
   15174:	0fc9      	lsrs	r1, r1, #31
   15176:	46bc      	mov	ip, r7
   15178:	428d      	cmp	r5, r1
   1517a:	d067      	beq.n	1524c <__aeabi_fadd+0xf8>
   1517c:	1a22      	subs	r2, r4, r0
   1517e:	2a00      	cmp	r2, #0
   15180:	dc00      	bgt.n	15184 <__aeabi_fadd+0x30>
   15182:	e0a5      	b.n	152d0 <__aeabi_fadd+0x17c>
   15184:	2800      	cmp	r0, #0
   15186:	d13a      	bne.n	151fe <__aeabi_fadd+0xaa>
   15188:	2f00      	cmp	r7, #0
   1518a:	d100      	bne.n	1518e <__aeabi_fadd+0x3a>
   1518c:	e093      	b.n	152b6 <__aeabi_fadd+0x162>
   1518e:	1e51      	subs	r1, r2, #1
   15190:	2900      	cmp	r1, #0
   15192:	d000      	beq.n	15196 <__aeabi_fadd+0x42>
   15194:	e0bc      	b.n	15310 <__aeabi_fadd+0x1bc>
   15196:	2401      	movs	r4, #1
   15198:	1bdb      	subs	r3, r3, r7
   1519a:	015a      	lsls	r2, r3, #5
   1519c:	d546      	bpl.n	1522c <__aeabi_fadd+0xd8>
   1519e:	019b      	lsls	r3, r3, #6
   151a0:	099e      	lsrs	r6, r3, #6
   151a2:	0030      	movs	r0, r6
   151a4:	f002 fb62 	bl	1786c <__clzsi2>
   151a8:	3805      	subs	r0, #5
   151aa:	4086      	lsls	r6, r0
   151ac:	4284      	cmp	r4, r0
   151ae:	dd00      	ble.n	151b2 <__aeabi_fadd+0x5e>
   151b0:	e09d      	b.n	152ee <__aeabi_fadd+0x19a>
   151b2:	1b04      	subs	r4, r0, r4
   151b4:	0032      	movs	r2, r6
   151b6:	2020      	movs	r0, #32
   151b8:	3401      	adds	r4, #1
   151ba:	40e2      	lsrs	r2, r4
   151bc:	1b04      	subs	r4, r0, r4
   151be:	40a6      	lsls	r6, r4
   151c0:	0033      	movs	r3, r6
   151c2:	1e5e      	subs	r6, r3, #1
   151c4:	41b3      	sbcs	r3, r6
   151c6:	2400      	movs	r4, #0
   151c8:	4313      	orrs	r3, r2
   151ca:	075a      	lsls	r2, r3, #29
   151cc:	d004      	beq.n	151d8 <__aeabi_fadd+0x84>
   151ce:	220f      	movs	r2, #15
   151d0:	401a      	ands	r2, r3
   151d2:	2a04      	cmp	r2, #4
   151d4:	d000      	beq.n	151d8 <__aeabi_fadd+0x84>
   151d6:	3304      	adds	r3, #4
   151d8:	015a      	lsls	r2, r3, #5
   151da:	d529      	bpl.n	15230 <__aeabi_fadd+0xdc>
   151dc:	3401      	adds	r4, #1
   151de:	2cff      	cmp	r4, #255	; 0xff
   151e0:	d100      	bne.n	151e4 <__aeabi_fadd+0x90>
   151e2:	e081      	b.n	152e8 <__aeabi_fadd+0x194>
   151e4:	002a      	movs	r2, r5
   151e6:	019b      	lsls	r3, r3, #6
   151e8:	0a5b      	lsrs	r3, r3, #9
   151ea:	b2e4      	uxtb	r4, r4
   151ec:	025b      	lsls	r3, r3, #9
   151ee:	05e4      	lsls	r4, r4, #23
   151f0:	0a58      	lsrs	r0, r3, #9
   151f2:	07d2      	lsls	r2, r2, #31
   151f4:	4320      	orrs	r0, r4
   151f6:	4310      	orrs	r0, r2
   151f8:	bc04      	pop	{r2}
   151fa:	4690      	mov	r8, r2
   151fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   151fe:	2cff      	cmp	r4, #255	; 0xff
   15200:	d0e3      	beq.n	151ca <__aeabi_fadd+0x76>
   15202:	2180      	movs	r1, #128	; 0x80
   15204:	0038      	movs	r0, r7
   15206:	04c9      	lsls	r1, r1, #19
   15208:	4308      	orrs	r0, r1
   1520a:	4684      	mov	ip, r0
   1520c:	2a1b      	cmp	r2, #27
   1520e:	dd00      	ble.n	15212 <__aeabi_fadd+0xbe>
   15210:	e082      	b.n	15318 <__aeabi_fadd+0x1c4>
   15212:	2020      	movs	r0, #32
   15214:	4661      	mov	r1, ip
   15216:	40d1      	lsrs	r1, r2
   15218:	1a82      	subs	r2, r0, r2
   1521a:	4660      	mov	r0, ip
   1521c:	4090      	lsls	r0, r2
   1521e:	0002      	movs	r2, r0
   15220:	1e50      	subs	r0, r2, #1
   15222:	4182      	sbcs	r2, r0
   15224:	430a      	orrs	r2, r1
   15226:	1a9b      	subs	r3, r3, r2
   15228:	015a      	lsls	r2, r3, #5
   1522a:	d4b8      	bmi.n	1519e <__aeabi_fadd+0x4a>
   1522c:	075a      	lsls	r2, r3, #29
   1522e:	d1ce      	bne.n	151ce <__aeabi_fadd+0x7a>
   15230:	08de      	lsrs	r6, r3, #3
   15232:	002a      	movs	r2, r5
   15234:	2cff      	cmp	r4, #255	; 0xff
   15236:	d13a      	bne.n	152ae <__aeabi_fadd+0x15a>
   15238:	2e00      	cmp	r6, #0
   1523a:	d100      	bne.n	1523e <__aeabi_fadd+0xea>
   1523c:	e0ae      	b.n	1539c <__aeabi_fadd+0x248>
   1523e:	2380      	movs	r3, #128	; 0x80
   15240:	03db      	lsls	r3, r3, #15
   15242:	4333      	orrs	r3, r6
   15244:	025b      	lsls	r3, r3, #9
   15246:	0a5b      	lsrs	r3, r3, #9
   15248:	24ff      	movs	r4, #255	; 0xff
   1524a:	e7cf      	b.n	151ec <__aeabi_fadd+0x98>
   1524c:	1a21      	subs	r1, r4, r0
   1524e:	2900      	cmp	r1, #0
   15250:	dd52      	ble.n	152f8 <__aeabi_fadd+0x1a4>
   15252:	2800      	cmp	r0, #0
   15254:	d031      	beq.n	152ba <__aeabi_fadd+0x166>
   15256:	2cff      	cmp	r4, #255	; 0xff
   15258:	d0b7      	beq.n	151ca <__aeabi_fadd+0x76>
   1525a:	2080      	movs	r0, #128	; 0x80
   1525c:	003e      	movs	r6, r7
   1525e:	04c0      	lsls	r0, r0, #19
   15260:	4306      	orrs	r6, r0
   15262:	46b4      	mov	ip, r6
   15264:	291b      	cmp	r1, #27
   15266:	dd00      	ble.n	1526a <__aeabi_fadd+0x116>
   15268:	e0aa      	b.n	153c0 <__aeabi_fadd+0x26c>
   1526a:	2620      	movs	r6, #32
   1526c:	4660      	mov	r0, ip
   1526e:	40c8      	lsrs	r0, r1
   15270:	1a71      	subs	r1, r6, r1
   15272:	4666      	mov	r6, ip
   15274:	408e      	lsls	r6, r1
   15276:	0031      	movs	r1, r6
   15278:	1e4e      	subs	r6, r1, #1
   1527a:	41b1      	sbcs	r1, r6
   1527c:	4301      	orrs	r1, r0
   1527e:	185b      	adds	r3, r3, r1
   15280:	0159      	lsls	r1, r3, #5
   15282:	d5d3      	bpl.n	1522c <__aeabi_fadd+0xd8>
   15284:	3401      	adds	r4, #1
   15286:	2cff      	cmp	r4, #255	; 0xff
   15288:	d100      	bne.n	1528c <__aeabi_fadd+0x138>
   1528a:	e087      	b.n	1539c <__aeabi_fadd+0x248>
   1528c:	2201      	movs	r2, #1
   1528e:	4978      	ldr	r1, [pc, #480]	; (15470 <__aeabi_fadd+0x31c>)
   15290:	401a      	ands	r2, r3
   15292:	085b      	lsrs	r3, r3, #1
   15294:	400b      	ands	r3, r1
   15296:	4313      	orrs	r3, r2
   15298:	e797      	b.n	151ca <__aeabi_fadd+0x76>
   1529a:	2c00      	cmp	r4, #0
   1529c:	d000      	beq.n	152a0 <__aeabi_fadd+0x14c>
   1529e:	e0a7      	b.n	153f0 <__aeabi_fadd+0x29c>
   152a0:	2b00      	cmp	r3, #0
   152a2:	d000      	beq.n	152a6 <__aeabi_fadd+0x152>
   152a4:	e0b6      	b.n	15414 <__aeabi_fadd+0x2c0>
   152a6:	1e3b      	subs	r3, r7, #0
   152a8:	d162      	bne.n	15370 <__aeabi_fadd+0x21c>
   152aa:	2600      	movs	r6, #0
   152ac:	2200      	movs	r2, #0
   152ae:	0273      	lsls	r3, r6, #9
   152b0:	0a5b      	lsrs	r3, r3, #9
   152b2:	b2e4      	uxtb	r4, r4
   152b4:	e79a      	b.n	151ec <__aeabi_fadd+0x98>
   152b6:	0014      	movs	r4, r2
   152b8:	e787      	b.n	151ca <__aeabi_fadd+0x76>
   152ba:	2f00      	cmp	r7, #0
   152bc:	d04d      	beq.n	1535a <__aeabi_fadd+0x206>
   152be:	1e48      	subs	r0, r1, #1
   152c0:	2800      	cmp	r0, #0
   152c2:	d157      	bne.n	15374 <__aeabi_fadd+0x220>
   152c4:	4463      	add	r3, ip
   152c6:	2401      	movs	r4, #1
   152c8:	015a      	lsls	r2, r3, #5
   152ca:	d5af      	bpl.n	1522c <__aeabi_fadd+0xd8>
   152cc:	2402      	movs	r4, #2
   152ce:	e7dd      	b.n	1528c <__aeabi_fadd+0x138>
   152d0:	2a00      	cmp	r2, #0
   152d2:	d124      	bne.n	1531e <__aeabi_fadd+0x1ca>
   152d4:	1c62      	adds	r2, r4, #1
   152d6:	b2d2      	uxtb	r2, r2
   152d8:	2a01      	cmp	r2, #1
   152da:	ddde      	ble.n	1529a <__aeabi_fadd+0x146>
   152dc:	1bde      	subs	r6, r3, r7
   152de:	0172      	lsls	r2, r6, #5
   152e0:	d535      	bpl.n	1534e <__aeabi_fadd+0x1fa>
   152e2:	1afe      	subs	r6, r7, r3
   152e4:	000d      	movs	r5, r1
   152e6:	e75c      	b.n	151a2 <__aeabi_fadd+0x4e>
   152e8:	002a      	movs	r2, r5
   152ea:	2300      	movs	r3, #0
   152ec:	e77e      	b.n	151ec <__aeabi_fadd+0x98>
   152ee:	0033      	movs	r3, r6
   152f0:	4a60      	ldr	r2, [pc, #384]	; (15474 <__aeabi_fadd+0x320>)
   152f2:	1a24      	subs	r4, r4, r0
   152f4:	4013      	ands	r3, r2
   152f6:	e768      	b.n	151ca <__aeabi_fadd+0x76>
   152f8:	2900      	cmp	r1, #0
   152fa:	d163      	bne.n	153c4 <__aeabi_fadd+0x270>
   152fc:	1c61      	adds	r1, r4, #1
   152fe:	b2c8      	uxtb	r0, r1
   15300:	2801      	cmp	r0, #1
   15302:	dd4e      	ble.n	153a2 <__aeabi_fadd+0x24e>
   15304:	29ff      	cmp	r1, #255	; 0xff
   15306:	d049      	beq.n	1539c <__aeabi_fadd+0x248>
   15308:	4463      	add	r3, ip
   1530a:	085b      	lsrs	r3, r3, #1
   1530c:	000c      	movs	r4, r1
   1530e:	e75c      	b.n	151ca <__aeabi_fadd+0x76>
   15310:	2aff      	cmp	r2, #255	; 0xff
   15312:	d041      	beq.n	15398 <__aeabi_fadd+0x244>
   15314:	000a      	movs	r2, r1
   15316:	e779      	b.n	1520c <__aeabi_fadd+0xb8>
   15318:	2201      	movs	r2, #1
   1531a:	1a9b      	subs	r3, r3, r2
   1531c:	e784      	b.n	15228 <__aeabi_fadd+0xd4>
   1531e:	2c00      	cmp	r4, #0
   15320:	d01d      	beq.n	1535e <__aeabi_fadd+0x20a>
   15322:	28ff      	cmp	r0, #255	; 0xff
   15324:	d022      	beq.n	1536c <__aeabi_fadd+0x218>
   15326:	2480      	movs	r4, #128	; 0x80
   15328:	04e4      	lsls	r4, r4, #19
   1532a:	4252      	negs	r2, r2
   1532c:	4323      	orrs	r3, r4
   1532e:	2a1b      	cmp	r2, #27
   15330:	dd00      	ble.n	15334 <__aeabi_fadd+0x1e0>
   15332:	e08a      	b.n	1544a <__aeabi_fadd+0x2f6>
   15334:	001c      	movs	r4, r3
   15336:	2520      	movs	r5, #32
   15338:	40d4      	lsrs	r4, r2
   1533a:	1aaa      	subs	r2, r5, r2
   1533c:	4093      	lsls	r3, r2
   1533e:	1e5a      	subs	r2, r3, #1
   15340:	4193      	sbcs	r3, r2
   15342:	4323      	orrs	r3, r4
   15344:	4662      	mov	r2, ip
   15346:	0004      	movs	r4, r0
   15348:	1ad3      	subs	r3, r2, r3
   1534a:	000d      	movs	r5, r1
   1534c:	e725      	b.n	1519a <__aeabi_fadd+0x46>
   1534e:	2e00      	cmp	r6, #0
   15350:	d000      	beq.n	15354 <__aeabi_fadd+0x200>
   15352:	e726      	b.n	151a2 <__aeabi_fadd+0x4e>
   15354:	2200      	movs	r2, #0
   15356:	2400      	movs	r4, #0
   15358:	e7a9      	b.n	152ae <__aeabi_fadd+0x15a>
   1535a:	000c      	movs	r4, r1
   1535c:	e735      	b.n	151ca <__aeabi_fadd+0x76>
   1535e:	2b00      	cmp	r3, #0
   15360:	d04d      	beq.n	153fe <__aeabi_fadd+0x2aa>
   15362:	43d2      	mvns	r2, r2
   15364:	2a00      	cmp	r2, #0
   15366:	d0ed      	beq.n	15344 <__aeabi_fadd+0x1f0>
   15368:	28ff      	cmp	r0, #255	; 0xff
   1536a:	d1e0      	bne.n	1532e <__aeabi_fadd+0x1da>
   1536c:	4663      	mov	r3, ip
   1536e:	24ff      	movs	r4, #255	; 0xff
   15370:	000d      	movs	r5, r1
   15372:	e72a      	b.n	151ca <__aeabi_fadd+0x76>
   15374:	29ff      	cmp	r1, #255	; 0xff
   15376:	d00f      	beq.n	15398 <__aeabi_fadd+0x244>
   15378:	0001      	movs	r1, r0
   1537a:	e773      	b.n	15264 <__aeabi_fadd+0x110>
   1537c:	2b00      	cmp	r3, #0
   1537e:	d061      	beq.n	15444 <__aeabi_fadd+0x2f0>
   15380:	24ff      	movs	r4, #255	; 0xff
   15382:	2f00      	cmp	r7, #0
   15384:	d100      	bne.n	15388 <__aeabi_fadd+0x234>
   15386:	e720      	b.n	151ca <__aeabi_fadd+0x76>
   15388:	2280      	movs	r2, #128	; 0x80
   1538a:	4641      	mov	r1, r8
   1538c:	03d2      	lsls	r2, r2, #15
   1538e:	4211      	tst	r1, r2
   15390:	d002      	beq.n	15398 <__aeabi_fadd+0x244>
   15392:	4216      	tst	r6, r2
   15394:	d100      	bne.n	15398 <__aeabi_fadd+0x244>
   15396:	003b      	movs	r3, r7
   15398:	24ff      	movs	r4, #255	; 0xff
   1539a:	e716      	b.n	151ca <__aeabi_fadd+0x76>
   1539c:	24ff      	movs	r4, #255	; 0xff
   1539e:	2300      	movs	r3, #0
   153a0:	e724      	b.n	151ec <__aeabi_fadd+0x98>
   153a2:	2c00      	cmp	r4, #0
   153a4:	d1ea      	bne.n	1537c <__aeabi_fadd+0x228>
   153a6:	2b00      	cmp	r3, #0
   153a8:	d058      	beq.n	1545c <__aeabi_fadd+0x308>
   153aa:	2f00      	cmp	r7, #0
   153ac:	d100      	bne.n	153b0 <__aeabi_fadd+0x25c>
   153ae:	e70c      	b.n	151ca <__aeabi_fadd+0x76>
   153b0:	4463      	add	r3, ip
   153b2:	015a      	lsls	r2, r3, #5
   153b4:	d400      	bmi.n	153b8 <__aeabi_fadd+0x264>
   153b6:	e739      	b.n	1522c <__aeabi_fadd+0xd8>
   153b8:	4a2e      	ldr	r2, [pc, #184]	; (15474 <__aeabi_fadd+0x320>)
   153ba:	000c      	movs	r4, r1
   153bc:	4013      	ands	r3, r2
   153be:	e704      	b.n	151ca <__aeabi_fadd+0x76>
   153c0:	2101      	movs	r1, #1
   153c2:	e75c      	b.n	1527e <__aeabi_fadd+0x12a>
   153c4:	2c00      	cmp	r4, #0
   153c6:	d11e      	bne.n	15406 <__aeabi_fadd+0x2b2>
   153c8:	2b00      	cmp	r3, #0
   153ca:	d040      	beq.n	1544e <__aeabi_fadd+0x2fa>
   153cc:	43c9      	mvns	r1, r1
   153ce:	2900      	cmp	r1, #0
   153d0:	d00b      	beq.n	153ea <__aeabi_fadd+0x296>
   153d2:	28ff      	cmp	r0, #255	; 0xff
   153d4:	d036      	beq.n	15444 <__aeabi_fadd+0x2f0>
   153d6:	291b      	cmp	r1, #27
   153d8:	dc47      	bgt.n	1546a <__aeabi_fadd+0x316>
   153da:	001c      	movs	r4, r3
   153dc:	2620      	movs	r6, #32
   153de:	40cc      	lsrs	r4, r1
   153e0:	1a71      	subs	r1, r6, r1
   153e2:	408b      	lsls	r3, r1
   153e4:	1e59      	subs	r1, r3, #1
   153e6:	418b      	sbcs	r3, r1
   153e8:	4323      	orrs	r3, r4
   153ea:	4463      	add	r3, ip
   153ec:	0004      	movs	r4, r0
   153ee:	e747      	b.n	15280 <__aeabi_fadd+0x12c>
   153f0:	2b00      	cmp	r3, #0
   153f2:	d118      	bne.n	15426 <__aeabi_fadd+0x2d2>
   153f4:	1e3b      	subs	r3, r7, #0
   153f6:	d02d      	beq.n	15454 <__aeabi_fadd+0x300>
   153f8:	000d      	movs	r5, r1
   153fa:	24ff      	movs	r4, #255	; 0xff
   153fc:	e6e5      	b.n	151ca <__aeabi_fadd+0x76>
   153fe:	003b      	movs	r3, r7
   15400:	0004      	movs	r4, r0
   15402:	000d      	movs	r5, r1
   15404:	e6e1      	b.n	151ca <__aeabi_fadd+0x76>
   15406:	28ff      	cmp	r0, #255	; 0xff
   15408:	d01c      	beq.n	15444 <__aeabi_fadd+0x2f0>
   1540a:	2480      	movs	r4, #128	; 0x80
   1540c:	04e4      	lsls	r4, r4, #19
   1540e:	4249      	negs	r1, r1
   15410:	4323      	orrs	r3, r4
   15412:	e7e0      	b.n	153d6 <__aeabi_fadd+0x282>
   15414:	2f00      	cmp	r7, #0
   15416:	d100      	bne.n	1541a <__aeabi_fadd+0x2c6>
   15418:	e6d7      	b.n	151ca <__aeabi_fadd+0x76>
   1541a:	1bde      	subs	r6, r3, r7
   1541c:	0172      	lsls	r2, r6, #5
   1541e:	d51f      	bpl.n	15460 <__aeabi_fadd+0x30c>
   15420:	1afb      	subs	r3, r7, r3
   15422:	000d      	movs	r5, r1
   15424:	e6d1      	b.n	151ca <__aeabi_fadd+0x76>
   15426:	24ff      	movs	r4, #255	; 0xff
   15428:	2f00      	cmp	r7, #0
   1542a:	d100      	bne.n	1542e <__aeabi_fadd+0x2da>
   1542c:	e6cd      	b.n	151ca <__aeabi_fadd+0x76>
   1542e:	2280      	movs	r2, #128	; 0x80
   15430:	4640      	mov	r0, r8
   15432:	03d2      	lsls	r2, r2, #15
   15434:	4210      	tst	r0, r2
   15436:	d0af      	beq.n	15398 <__aeabi_fadd+0x244>
   15438:	4216      	tst	r6, r2
   1543a:	d1ad      	bne.n	15398 <__aeabi_fadd+0x244>
   1543c:	003b      	movs	r3, r7
   1543e:	000d      	movs	r5, r1
   15440:	24ff      	movs	r4, #255	; 0xff
   15442:	e6c2      	b.n	151ca <__aeabi_fadd+0x76>
   15444:	4663      	mov	r3, ip
   15446:	24ff      	movs	r4, #255	; 0xff
   15448:	e6bf      	b.n	151ca <__aeabi_fadd+0x76>
   1544a:	2301      	movs	r3, #1
   1544c:	e77a      	b.n	15344 <__aeabi_fadd+0x1f0>
   1544e:	003b      	movs	r3, r7
   15450:	0004      	movs	r4, r0
   15452:	e6ba      	b.n	151ca <__aeabi_fadd+0x76>
   15454:	2680      	movs	r6, #128	; 0x80
   15456:	2200      	movs	r2, #0
   15458:	03f6      	lsls	r6, r6, #15
   1545a:	e6f0      	b.n	1523e <__aeabi_fadd+0xea>
   1545c:	003b      	movs	r3, r7
   1545e:	e6b4      	b.n	151ca <__aeabi_fadd+0x76>
   15460:	1e33      	subs	r3, r6, #0
   15462:	d000      	beq.n	15466 <__aeabi_fadd+0x312>
   15464:	e6e2      	b.n	1522c <__aeabi_fadd+0xd8>
   15466:	2200      	movs	r2, #0
   15468:	e721      	b.n	152ae <__aeabi_fadd+0x15a>
   1546a:	2301      	movs	r3, #1
   1546c:	e7bd      	b.n	153ea <__aeabi_fadd+0x296>
   1546e:	46c0      	nop			; (mov r8, r8)
   15470:	7dffffff 	.word	0x7dffffff
   15474:	fbffffff 	.word	0xfbffffff

00015478 <__aeabi_fdiv>:
   15478:	b5f0      	push	{r4, r5, r6, r7, lr}
   1547a:	4657      	mov	r7, sl
   1547c:	464e      	mov	r6, r9
   1547e:	46de      	mov	lr, fp
   15480:	4645      	mov	r5, r8
   15482:	b5e0      	push	{r5, r6, r7, lr}
   15484:	0244      	lsls	r4, r0, #9
   15486:	0043      	lsls	r3, r0, #1
   15488:	0fc6      	lsrs	r6, r0, #31
   1548a:	b083      	sub	sp, #12
   1548c:	1c0f      	adds	r7, r1, #0
   1548e:	0a64      	lsrs	r4, r4, #9
   15490:	0e1b      	lsrs	r3, r3, #24
   15492:	46b2      	mov	sl, r6
   15494:	d053      	beq.n	1553e <__aeabi_fdiv+0xc6>
   15496:	2bff      	cmp	r3, #255	; 0xff
   15498:	d027      	beq.n	154ea <__aeabi_fdiv+0x72>
   1549a:	2280      	movs	r2, #128	; 0x80
   1549c:	00e4      	lsls	r4, r4, #3
   1549e:	04d2      	lsls	r2, r2, #19
   154a0:	4314      	orrs	r4, r2
   154a2:	227f      	movs	r2, #127	; 0x7f
   154a4:	4252      	negs	r2, r2
   154a6:	4690      	mov	r8, r2
   154a8:	4498      	add	r8, r3
   154aa:	2300      	movs	r3, #0
   154ac:	4699      	mov	r9, r3
   154ae:	469b      	mov	fp, r3
   154b0:	027d      	lsls	r5, r7, #9
   154b2:	0078      	lsls	r0, r7, #1
   154b4:	0ffb      	lsrs	r3, r7, #31
   154b6:	0a6d      	lsrs	r5, r5, #9
   154b8:	0e00      	lsrs	r0, r0, #24
   154ba:	9300      	str	r3, [sp, #0]
   154bc:	d024      	beq.n	15508 <__aeabi_fdiv+0x90>
   154be:	28ff      	cmp	r0, #255	; 0xff
   154c0:	d046      	beq.n	15550 <__aeabi_fdiv+0xd8>
   154c2:	2380      	movs	r3, #128	; 0x80
   154c4:	2100      	movs	r1, #0
   154c6:	00ed      	lsls	r5, r5, #3
   154c8:	04db      	lsls	r3, r3, #19
   154ca:	431d      	orrs	r5, r3
   154cc:	387f      	subs	r0, #127	; 0x7f
   154ce:	4647      	mov	r7, r8
   154d0:	1a38      	subs	r0, r7, r0
   154d2:	464f      	mov	r7, r9
   154d4:	430f      	orrs	r7, r1
   154d6:	00bf      	lsls	r7, r7, #2
   154d8:	46b9      	mov	r9, r7
   154da:	0033      	movs	r3, r6
   154dc:	9a00      	ldr	r2, [sp, #0]
   154de:	4f87      	ldr	r7, [pc, #540]	; (156fc <__aeabi_fdiv+0x284>)
   154e0:	4053      	eors	r3, r2
   154e2:	464a      	mov	r2, r9
   154e4:	58ba      	ldr	r2, [r7, r2]
   154e6:	9301      	str	r3, [sp, #4]
   154e8:	4697      	mov	pc, r2
   154ea:	2c00      	cmp	r4, #0
   154ec:	d14e      	bne.n	1558c <__aeabi_fdiv+0x114>
   154ee:	2308      	movs	r3, #8
   154f0:	4699      	mov	r9, r3
   154f2:	33f7      	adds	r3, #247	; 0xf7
   154f4:	4698      	mov	r8, r3
   154f6:	3bfd      	subs	r3, #253	; 0xfd
   154f8:	469b      	mov	fp, r3
   154fa:	027d      	lsls	r5, r7, #9
   154fc:	0078      	lsls	r0, r7, #1
   154fe:	0ffb      	lsrs	r3, r7, #31
   15500:	0a6d      	lsrs	r5, r5, #9
   15502:	0e00      	lsrs	r0, r0, #24
   15504:	9300      	str	r3, [sp, #0]
   15506:	d1da      	bne.n	154be <__aeabi_fdiv+0x46>
   15508:	2d00      	cmp	r5, #0
   1550a:	d126      	bne.n	1555a <__aeabi_fdiv+0xe2>
   1550c:	2000      	movs	r0, #0
   1550e:	2101      	movs	r1, #1
   15510:	0033      	movs	r3, r6
   15512:	9a00      	ldr	r2, [sp, #0]
   15514:	4f7a      	ldr	r7, [pc, #488]	; (15700 <__aeabi_fdiv+0x288>)
   15516:	4053      	eors	r3, r2
   15518:	4642      	mov	r2, r8
   1551a:	1a10      	subs	r0, r2, r0
   1551c:	464a      	mov	r2, r9
   1551e:	430a      	orrs	r2, r1
   15520:	0092      	lsls	r2, r2, #2
   15522:	58ba      	ldr	r2, [r7, r2]
   15524:	001d      	movs	r5, r3
   15526:	4697      	mov	pc, r2
   15528:	9b00      	ldr	r3, [sp, #0]
   1552a:	002c      	movs	r4, r5
   1552c:	469a      	mov	sl, r3
   1552e:	468b      	mov	fp, r1
   15530:	465b      	mov	r3, fp
   15532:	2b02      	cmp	r3, #2
   15534:	d131      	bne.n	1559a <__aeabi_fdiv+0x122>
   15536:	4653      	mov	r3, sl
   15538:	21ff      	movs	r1, #255	; 0xff
   1553a:	2400      	movs	r4, #0
   1553c:	e038      	b.n	155b0 <__aeabi_fdiv+0x138>
   1553e:	2c00      	cmp	r4, #0
   15540:	d117      	bne.n	15572 <__aeabi_fdiv+0xfa>
   15542:	2304      	movs	r3, #4
   15544:	4699      	mov	r9, r3
   15546:	2300      	movs	r3, #0
   15548:	4698      	mov	r8, r3
   1554a:	3301      	adds	r3, #1
   1554c:	469b      	mov	fp, r3
   1554e:	e7af      	b.n	154b0 <__aeabi_fdiv+0x38>
   15550:	20ff      	movs	r0, #255	; 0xff
   15552:	2d00      	cmp	r5, #0
   15554:	d10b      	bne.n	1556e <__aeabi_fdiv+0xf6>
   15556:	2102      	movs	r1, #2
   15558:	e7da      	b.n	15510 <__aeabi_fdiv+0x98>
   1555a:	0028      	movs	r0, r5
   1555c:	f002 f986 	bl	1786c <__clzsi2>
   15560:	1f43      	subs	r3, r0, #5
   15562:	409d      	lsls	r5, r3
   15564:	2376      	movs	r3, #118	; 0x76
   15566:	425b      	negs	r3, r3
   15568:	1a18      	subs	r0, r3, r0
   1556a:	2100      	movs	r1, #0
   1556c:	e7af      	b.n	154ce <__aeabi_fdiv+0x56>
   1556e:	2103      	movs	r1, #3
   15570:	e7ad      	b.n	154ce <__aeabi_fdiv+0x56>
   15572:	0020      	movs	r0, r4
   15574:	f002 f97a 	bl	1786c <__clzsi2>
   15578:	1f43      	subs	r3, r0, #5
   1557a:	409c      	lsls	r4, r3
   1557c:	2376      	movs	r3, #118	; 0x76
   1557e:	425b      	negs	r3, r3
   15580:	1a1b      	subs	r3, r3, r0
   15582:	4698      	mov	r8, r3
   15584:	2300      	movs	r3, #0
   15586:	4699      	mov	r9, r3
   15588:	469b      	mov	fp, r3
   1558a:	e791      	b.n	154b0 <__aeabi_fdiv+0x38>
   1558c:	230c      	movs	r3, #12
   1558e:	4699      	mov	r9, r3
   15590:	33f3      	adds	r3, #243	; 0xf3
   15592:	4698      	mov	r8, r3
   15594:	3bfc      	subs	r3, #252	; 0xfc
   15596:	469b      	mov	fp, r3
   15598:	e78a      	b.n	154b0 <__aeabi_fdiv+0x38>
   1559a:	2b03      	cmp	r3, #3
   1559c:	d100      	bne.n	155a0 <__aeabi_fdiv+0x128>
   1559e:	e0a5      	b.n	156ec <__aeabi_fdiv+0x274>
   155a0:	4655      	mov	r5, sl
   155a2:	2b01      	cmp	r3, #1
   155a4:	d000      	beq.n	155a8 <__aeabi_fdiv+0x130>
   155a6:	e081      	b.n	156ac <__aeabi_fdiv+0x234>
   155a8:	2301      	movs	r3, #1
   155aa:	2100      	movs	r1, #0
   155ac:	2400      	movs	r4, #0
   155ae:	402b      	ands	r3, r5
   155b0:	0264      	lsls	r4, r4, #9
   155b2:	05c9      	lsls	r1, r1, #23
   155b4:	0a60      	lsrs	r0, r4, #9
   155b6:	07db      	lsls	r3, r3, #31
   155b8:	4308      	orrs	r0, r1
   155ba:	4318      	orrs	r0, r3
   155bc:	b003      	add	sp, #12
   155be:	bc3c      	pop	{r2, r3, r4, r5}
   155c0:	4690      	mov	r8, r2
   155c2:	4699      	mov	r9, r3
   155c4:	46a2      	mov	sl, r4
   155c6:	46ab      	mov	fp, r5
   155c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   155ca:	2480      	movs	r4, #128	; 0x80
   155cc:	2300      	movs	r3, #0
   155ce:	03e4      	lsls	r4, r4, #15
   155d0:	21ff      	movs	r1, #255	; 0xff
   155d2:	e7ed      	b.n	155b0 <__aeabi_fdiv+0x138>
   155d4:	21ff      	movs	r1, #255	; 0xff
   155d6:	2400      	movs	r4, #0
   155d8:	e7ea      	b.n	155b0 <__aeabi_fdiv+0x138>
   155da:	2301      	movs	r3, #1
   155dc:	1a59      	subs	r1, r3, r1
   155de:	291b      	cmp	r1, #27
   155e0:	dd66      	ble.n	156b0 <__aeabi_fdiv+0x238>
   155e2:	9a01      	ldr	r2, [sp, #4]
   155e4:	4013      	ands	r3, r2
   155e6:	2100      	movs	r1, #0
   155e8:	2400      	movs	r4, #0
   155ea:	e7e1      	b.n	155b0 <__aeabi_fdiv+0x138>
   155ec:	2380      	movs	r3, #128	; 0x80
   155ee:	03db      	lsls	r3, r3, #15
   155f0:	421c      	tst	r4, r3
   155f2:	d038      	beq.n	15666 <__aeabi_fdiv+0x1ee>
   155f4:	421d      	tst	r5, r3
   155f6:	d051      	beq.n	1569c <__aeabi_fdiv+0x224>
   155f8:	431c      	orrs	r4, r3
   155fa:	0264      	lsls	r4, r4, #9
   155fc:	0a64      	lsrs	r4, r4, #9
   155fe:	0033      	movs	r3, r6
   15600:	21ff      	movs	r1, #255	; 0xff
   15602:	e7d5      	b.n	155b0 <__aeabi_fdiv+0x138>
   15604:	0163      	lsls	r3, r4, #5
   15606:	016c      	lsls	r4, r5, #5
   15608:	42a3      	cmp	r3, r4
   1560a:	d23b      	bcs.n	15684 <__aeabi_fdiv+0x20c>
   1560c:	261b      	movs	r6, #27
   1560e:	2100      	movs	r1, #0
   15610:	3801      	subs	r0, #1
   15612:	2501      	movs	r5, #1
   15614:	001f      	movs	r7, r3
   15616:	0049      	lsls	r1, r1, #1
   15618:	005b      	lsls	r3, r3, #1
   1561a:	2f00      	cmp	r7, #0
   1561c:	db01      	blt.n	15622 <__aeabi_fdiv+0x1aa>
   1561e:	429c      	cmp	r4, r3
   15620:	d801      	bhi.n	15626 <__aeabi_fdiv+0x1ae>
   15622:	1b1b      	subs	r3, r3, r4
   15624:	4329      	orrs	r1, r5
   15626:	3e01      	subs	r6, #1
   15628:	2e00      	cmp	r6, #0
   1562a:	d1f3      	bne.n	15614 <__aeabi_fdiv+0x19c>
   1562c:	001c      	movs	r4, r3
   1562e:	1e63      	subs	r3, r4, #1
   15630:	419c      	sbcs	r4, r3
   15632:	430c      	orrs	r4, r1
   15634:	0001      	movs	r1, r0
   15636:	317f      	adds	r1, #127	; 0x7f
   15638:	2900      	cmp	r1, #0
   1563a:	ddce      	ble.n	155da <__aeabi_fdiv+0x162>
   1563c:	0763      	lsls	r3, r4, #29
   1563e:	d004      	beq.n	1564a <__aeabi_fdiv+0x1d2>
   15640:	230f      	movs	r3, #15
   15642:	4023      	ands	r3, r4
   15644:	2b04      	cmp	r3, #4
   15646:	d000      	beq.n	1564a <__aeabi_fdiv+0x1d2>
   15648:	3404      	adds	r4, #4
   1564a:	0123      	lsls	r3, r4, #4
   1564c:	d503      	bpl.n	15656 <__aeabi_fdiv+0x1de>
   1564e:	0001      	movs	r1, r0
   15650:	4b2c      	ldr	r3, [pc, #176]	; (15704 <__aeabi_fdiv+0x28c>)
   15652:	3180      	adds	r1, #128	; 0x80
   15654:	401c      	ands	r4, r3
   15656:	29fe      	cmp	r1, #254	; 0xfe
   15658:	dd0d      	ble.n	15676 <__aeabi_fdiv+0x1fe>
   1565a:	2301      	movs	r3, #1
   1565c:	9a01      	ldr	r2, [sp, #4]
   1565e:	21ff      	movs	r1, #255	; 0xff
   15660:	4013      	ands	r3, r2
   15662:	2400      	movs	r4, #0
   15664:	e7a4      	b.n	155b0 <__aeabi_fdiv+0x138>
   15666:	2380      	movs	r3, #128	; 0x80
   15668:	03db      	lsls	r3, r3, #15
   1566a:	431c      	orrs	r4, r3
   1566c:	0264      	lsls	r4, r4, #9
   1566e:	0a64      	lsrs	r4, r4, #9
   15670:	0033      	movs	r3, r6
   15672:	21ff      	movs	r1, #255	; 0xff
   15674:	e79c      	b.n	155b0 <__aeabi_fdiv+0x138>
   15676:	2301      	movs	r3, #1
   15678:	9a01      	ldr	r2, [sp, #4]
   1567a:	01a4      	lsls	r4, r4, #6
   1567c:	0a64      	lsrs	r4, r4, #9
   1567e:	b2c9      	uxtb	r1, r1
   15680:	4013      	ands	r3, r2
   15682:	e795      	b.n	155b0 <__aeabi_fdiv+0x138>
   15684:	1b1b      	subs	r3, r3, r4
   15686:	261a      	movs	r6, #26
   15688:	2101      	movs	r1, #1
   1568a:	e7c2      	b.n	15612 <__aeabi_fdiv+0x19a>
   1568c:	9b00      	ldr	r3, [sp, #0]
   1568e:	468b      	mov	fp, r1
   15690:	469a      	mov	sl, r3
   15692:	2400      	movs	r4, #0
   15694:	e74c      	b.n	15530 <__aeabi_fdiv+0xb8>
   15696:	0263      	lsls	r3, r4, #9
   15698:	d5e5      	bpl.n	15666 <__aeabi_fdiv+0x1ee>
   1569a:	2500      	movs	r5, #0
   1569c:	2480      	movs	r4, #128	; 0x80
   1569e:	03e4      	lsls	r4, r4, #15
   156a0:	432c      	orrs	r4, r5
   156a2:	0264      	lsls	r4, r4, #9
   156a4:	0a64      	lsrs	r4, r4, #9
   156a6:	9b00      	ldr	r3, [sp, #0]
   156a8:	21ff      	movs	r1, #255	; 0xff
   156aa:	e781      	b.n	155b0 <__aeabi_fdiv+0x138>
   156ac:	9501      	str	r5, [sp, #4]
   156ae:	e7c1      	b.n	15634 <__aeabi_fdiv+0x1bc>
   156b0:	0023      	movs	r3, r4
   156b2:	2020      	movs	r0, #32
   156b4:	40cb      	lsrs	r3, r1
   156b6:	1a41      	subs	r1, r0, r1
   156b8:	408c      	lsls	r4, r1
   156ba:	1e61      	subs	r1, r4, #1
   156bc:	418c      	sbcs	r4, r1
   156be:	431c      	orrs	r4, r3
   156c0:	0763      	lsls	r3, r4, #29
   156c2:	d004      	beq.n	156ce <__aeabi_fdiv+0x256>
   156c4:	230f      	movs	r3, #15
   156c6:	4023      	ands	r3, r4
   156c8:	2b04      	cmp	r3, #4
   156ca:	d000      	beq.n	156ce <__aeabi_fdiv+0x256>
   156cc:	3404      	adds	r4, #4
   156ce:	0163      	lsls	r3, r4, #5
   156d0:	d505      	bpl.n	156de <__aeabi_fdiv+0x266>
   156d2:	2301      	movs	r3, #1
   156d4:	9a01      	ldr	r2, [sp, #4]
   156d6:	2101      	movs	r1, #1
   156d8:	4013      	ands	r3, r2
   156da:	2400      	movs	r4, #0
   156dc:	e768      	b.n	155b0 <__aeabi_fdiv+0x138>
   156de:	2301      	movs	r3, #1
   156e0:	9a01      	ldr	r2, [sp, #4]
   156e2:	01a4      	lsls	r4, r4, #6
   156e4:	0a64      	lsrs	r4, r4, #9
   156e6:	4013      	ands	r3, r2
   156e8:	2100      	movs	r1, #0
   156ea:	e761      	b.n	155b0 <__aeabi_fdiv+0x138>
   156ec:	2380      	movs	r3, #128	; 0x80
   156ee:	03db      	lsls	r3, r3, #15
   156f0:	431c      	orrs	r4, r3
   156f2:	0264      	lsls	r4, r4, #9
   156f4:	0a64      	lsrs	r4, r4, #9
   156f6:	4653      	mov	r3, sl
   156f8:	21ff      	movs	r1, #255	; 0xff
   156fa:	e759      	b.n	155b0 <__aeabi_fdiv+0x138>
   156fc:	0001f768 	.word	0x0001f768
   15700:	0001f7a8 	.word	0x0001f7a8
   15704:	f7ffffff 	.word	0xf7ffffff

00015708 <__eqsf2>:
   15708:	b570      	push	{r4, r5, r6, lr}
   1570a:	0042      	lsls	r2, r0, #1
   1570c:	0245      	lsls	r5, r0, #9
   1570e:	024e      	lsls	r6, r1, #9
   15710:	004c      	lsls	r4, r1, #1
   15712:	0fc3      	lsrs	r3, r0, #31
   15714:	0a6d      	lsrs	r5, r5, #9
   15716:	0e12      	lsrs	r2, r2, #24
   15718:	0a76      	lsrs	r6, r6, #9
   1571a:	0e24      	lsrs	r4, r4, #24
   1571c:	0fc9      	lsrs	r1, r1, #31
   1571e:	2001      	movs	r0, #1
   15720:	2aff      	cmp	r2, #255	; 0xff
   15722:	d006      	beq.n	15732 <__eqsf2+0x2a>
   15724:	2cff      	cmp	r4, #255	; 0xff
   15726:	d003      	beq.n	15730 <__eqsf2+0x28>
   15728:	42a2      	cmp	r2, r4
   1572a:	d101      	bne.n	15730 <__eqsf2+0x28>
   1572c:	42b5      	cmp	r5, r6
   1572e:	d006      	beq.n	1573e <__eqsf2+0x36>
   15730:	bd70      	pop	{r4, r5, r6, pc}
   15732:	2d00      	cmp	r5, #0
   15734:	d1fc      	bne.n	15730 <__eqsf2+0x28>
   15736:	2cff      	cmp	r4, #255	; 0xff
   15738:	d1fa      	bne.n	15730 <__eqsf2+0x28>
   1573a:	2e00      	cmp	r6, #0
   1573c:	d1f8      	bne.n	15730 <__eqsf2+0x28>
   1573e:	428b      	cmp	r3, r1
   15740:	d006      	beq.n	15750 <__eqsf2+0x48>
   15742:	2001      	movs	r0, #1
   15744:	2a00      	cmp	r2, #0
   15746:	d1f3      	bne.n	15730 <__eqsf2+0x28>
   15748:	0028      	movs	r0, r5
   1574a:	1e45      	subs	r5, r0, #1
   1574c:	41a8      	sbcs	r0, r5
   1574e:	e7ef      	b.n	15730 <__eqsf2+0x28>
   15750:	2000      	movs	r0, #0
   15752:	e7ed      	b.n	15730 <__eqsf2+0x28>

00015754 <__gesf2>:
   15754:	b5f0      	push	{r4, r5, r6, r7, lr}
   15756:	0042      	lsls	r2, r0, #1
   15758:	0245      	lsls	r5, r0, #9
   1575a:	024c      	lsls	r4, r1, #9
   1575c:	0fc3      	lsrs	r3, r0, #31
   1575e:	0048      	lsls	r0, r1, #1
   15760:	0a6d      	lsrs	r5, r5, #9
   15762:	0e12      	lsrs	r2, r2, #24
   15764:	0a64      	lsrs	r4, r4, #9
   15766:	0e00      	lsrs	r0, r0, #24
   15768:	0fc9      	lsrs	r1, r1, #31
   1576a:	2aff      	cmp	r2, #255	; 0xff
   1576c:	d01e      	beq.n	157ac <__gesf2+0x58>
   1576e:	28ff      	cmp	r0, #255	; 0xff
   15770:	d021      	beq.n	157b6 <__gesf2+0x62>
   15772:	2a00      	cmp	r2, #0
   15774:	d10a      	bne.n	1578c <__gesf2+0x38>
   15776:	426e      	negs	r6, r5
   15778:	416e      	adcs	r6, r5
   1577a:	b2f6      	uxtb	r6, r6
   1577c:	2800      	cmp	r0, #0
   1577e:	d10f      	bne.n	157a0 <__gesf2+0x4c>
   15780:	2c00      	cmp	r4, #0
   15782:	d10d      	bne.n	157a0 <__gesf2+0x4c>
   15784:	2000      	movs	r0, #0
   15786:	2d00      	cmp	r5, #0
   15788:	d009      	beq.n	1579e <__gesf2+0x4a>
   1578a:	e005      	b.n	15798 <__gesf2+0x44>
   1578c:	2800      	cmp	r0, #0
   1578e:	d101      	bne.n	15794 <__gesf2+0x40>
   15790:	2c00      	cmp	r4, #0
   15792:	d001      	beq.n	15798 <__gesf2+0x44>
   15794:	428b      	cmp	r3, r1
   15796:	d011      	beq.n	157bc <__gesf2+0x68>
   15798:	2101      	movs	r1, #1
   1579a:	4258      	negs	r0, r3
   1579c:	4308      	orrs	r0, r1
   1579e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   157a0:	2e00      	cmp	r6, #0
   157a2:	d0f7      	beq.n	15794 <__gesf2+0x40>
   157a4:	2001      	movs	r0, #1
   157a6:	3901      	subs	r1, #1
   157a8:	4308      	orrs	r0, r1
   157aa:	e7f8      	b.n	1579e <__gesf2+0x4a>
   157ac:	2d00      	cmp	r5, #0
   157ae:	d0de      	beq.n	1576e <__gesf2+0x1a>
   157b0:	2002      	movs	r0, #2
   157b2:	4240      	negs	r0, r0
   157b4:	e7f3      	b.n	1579e <__gesf2+0x4a>
   157b6:	2c00      	cmp	r4, #0
   157b8:	d0db      	beq.n	15772 <__gesf2+0x1e>
   157ba:	e7f9      	b.n	157b0 <__gesf2+0x5c>
   157bc:	4282      	cmp	r2, r0
   157be:	dceb      	bgt.n	15798 <__gesf2+0x44>
   157c0:	db04      	blt.n	157cc <__gesf2+0x78>
   157c2:	42a5      	cmp	r5, r4
   157c4:	d8e8      	bhi.n	15798 <__gesf2+0x44>
   157c6:	2000      	movs	r0, #0
   157c8:	42a5      	cmp	r5, r4
   157ca:	d2e8      	bcs.n	1579e <__gesf2+0x4a>
   157cc:	2101      	movs	r1, #1
   157ce:	1e58      	subs	r0, r3, #1
   157d0:	4308      	orrs	r0, r1
   157d2:	e7e4      	b.n	1579e <__gesf2+0x4a>

000157d4 <__lesf2>:
   157d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   157d6:	0042      	lsls	r2, r0, #1
   157d8:	024d      	lsls	r5, r1, #9
   157da:	004c      	lsls	r4, r1, #1
   157dc:	0246      	lsls	r6, r0, #9
   157de:	0a76      	lsrs	r6, r6, #9
   157e0:	0e12      	lsrs	r2, r2, #24
   157e2:	0fc3      	lsrs	r3, r0, #31
   157e4:	0a6d      	lsrs	r5, r5, #9
   157e6:	0e24      	lsrs	r4, r4, #24
   157e8:	0fc9      	lsrs	r1, r1, #31
   157ea:	2aff      	cmp	r2, #255	; 0xff
   157ec:	d016      	beq.n	1581c <__lesf2+0x48>
   157ee:	2cff      	cmp	r4, #255	; 0xff
   157f0:	d018      	beq.n	15824 <__lesf2+0x50>
   157f2:	2a00      	cmp	r2, #0
   157f4:	d10a      	bne.n	1580c <__lesf2+0x38>
   157f6:	4270      	negs	r0, r6
   157f8:	4170      	adcs	r0, r6
   157fa:	b2c0      	uxtb	r0, r0
   157fc:	2c00      	cmp	r4, #0
   157fe:	d015      	beq.n	1582c <__lesf2+0x58>
   15800:	2800      	cmp	r0, #0
   15802:	d005      	beq.n	15810 <__lesf2+0x3c>
   15804:	2001      	movs	r0, #1
   15806:	3901      	subs	r1, #1
   15808:	4308      	orrs	r0, r1
   1580a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1580c:	2c00      	cmp	r4, #0
   1580e:	d013      	beq.n	15838 <__lesf2+0x64>
   15810:	4299      	cmp	r1, r3
   15812:	d014      	beq.n	1583e <__lesf2+0x6a>
   15814:	2001      	movs	r0, #1
   15816:	425b      	negs	r3, r3
   15818:	4318      	orrs	r0, r3
   1581a:	e7f6      	b.n	1580a <__lesf2+0x36>
   1581c:	2002      	movs	r0, #2
   1581e:	2e00      	cmp	r6, #0
   15820:	d1f3      	bne.n	1580a <__lesf2+0x36>
   15822:	e7e4      	b.n	157ee <__lesf2+0x1a>
   15824:	2002      	movs	r0, #2
   15826:	2d00      	cmp	r5, #0
   15828:	d1ef      	bne.n	1580a <__lesf2+0x36>
   1582a:	e7e2      	b.n	157f2 <__lesf2+0x1e>
   1582c:	2d00      	cmp	r5, #0
   1582e:	d1e7      	bne.n	15800 <__lesf2+0x2c>
   15830:	2000      	movs	r0, #0
   15832:	2e00      	cmp	r6, #0
   15834:	d0e9      	beq.n	1580a <__lesf2+0x36>
   15836:	e7ed      	b.n	15814 <__lesf2+0x40>
   15838:	2d00      	cmp	r5, #0
   1583a:	d1e9      	bne.n	15810 <__lesf2+0x3c>
   1583c:	e7ea      	b.n	15814 <__lesf2+0x40>
   1583e:	42a2      	cmp	r2, r4
   15840:	dc06      	bgt.n	15850 <__lesf2+0x7c>
   15842:	dbdf      	blt.n	15804 <__lesf2+0x30>
   15844:	42ae      	cmp	r6, r5
   15846:	d803      	bhi.n	15850 <__lesf2+0x7c>
   15848:	2000      	movs	r0, #0
   1584a:	42ae      	cmp	r6, r5
   1584c:	d3da      	bcc.n	15804 <__lesf2+0x30>
   1584e:	e7dc      	b.n	1580a <__lesf2+0x36>
   15850:	2001      	movs	r0, #1
   15852:	4249      	negs	r1, r1
   15854:	4308      	orrs	r0, r1
   15856:	e7d8      	b.n	1580a <__lesf2+0x36>

00015858 <__aeabi_fmul>:
   15858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1585a:	4657      	mov	r7, sl
   1585c:	464e      	mov	r6, r9
   1585e:	4645      	mov	r5, r8
   15860:	46de      	mov	lr, fp
   15862:	b5e0      	push	{r5, r6, r7, lr}
   15864:	0247      	lsls	r7, r0, #9
   15866:	0046      	lsls	r6, r0, #1
   15868:	4688      	mov	r8, r1
   1586a:	0a7f      	lsrs	r7, r7, #9
   1586c:	0e36      	lsrs	r6, r6, #24
   1586e:	0fc4      	lsrs	r4, r0, #31
   15870:	2e00      	cmp	r6, #0
   15872:	d047      	beq.n	15904 <__aeabi_fmul+0xac>
   15874:	2eff      	cmp	r6, #255	; 0xff
   15876:	d024      	beq.n	158c2 <__aeabi_fmul+0x6a>
   15878:	00fb      	lsls	r3, r7, #3
   1587a:	2780      	movs	r7, #128	; 0x80
   1587c:	04ff      	lsls	r7, r7, #19
   1587e:	431f      	orrs	r7, r3
   15880:	2300      	movs	r3, #0
   15882:	4699      	mov	r9, r3
   15884:	469a      	mov	sl, r3
   15886:	3e7f      	subs	r6, #127	; 0x7f
   15888:	4643      	mov	r3, r8
   1588a:	025d      	lsls	r5, r3, #9
   1588c:	0058      	lsls	r0, r3, #1
   1588e:	0fdb      	lsrs	r3, r3, #31
   15890:	0a6d      	lsrs	r5, r5, #9
   15892:	0e00      	lsrs	r0, r0, #24
   15894:	4698      	mov	r8, r3
   15896:	d043      	beq.n	15920 <__aeabi_fmul+0xc8>
   15898:	28ff      	cmp	r0, #255	; 0xff
   1589a:	d03b      	beq.n	15914 <__aeabi_fmul+0xbc>
   1589c:	00eb      	lsls	r3, r5, #3
   1589e:	2580      	movs	r5, #128	; 0x80
   158a0:	2200      	movs	r2, #0
   158a2:	04ed      	lsls	r5, r5, #19
   158a4:	431d      	orrs	r5, r3
   158a6:	387f      	subs	r0, #127	; 0x7f
   158a8:	1836      	adds	r6, r6, r0
   158aa:	1c73      	adds	r3, r6, #1
   158ac:	4641      	mov	r1, r8
   158ae:	469b      	mov	fp, r3
   158b0:	464b      	mov	r3, r9
   158b2:	4061      	eors	r1, r4
   158b4:	4313      	orrs	r3, r2
   158b6:	2b0f      	cmp	r3, #15
   158b8:	d864      	bhi.n	15984 <__aeabi_fmul+0x12c>
   158ba:	4875      	ldr	r0, [pc, #468]	; (15a90 <__aeabi_fmul+0x238>)
   158bc:	009b      	lsls	r3, r3, #2
   158be:	58c3      	ldr	r3, [r0, r3]
   158c0:	469f      	mov	pc, r3
   158c2:	2f00      	cmp	r7, #0
   158c4:	d142      	bne.n	1594c <__aeabi_fmul+0xf4>
   158c6:	2308      	movs	r3, #8
   158c8:	4699      	mov	r9, r3
   158ca:	3b06      	subs	r3, #6
   158cc:	26ff      	movs	r6, #255	; 0xff
   158ce:	469a      	mov	sl, r3
   158d0:	e7da      	b.n	15888 <__aeabi_fmul+0x30>
   158d2:	4641      	mov	r1, r8
   158d4:	2a02      	cmp	r2, #2
   158d6:	d028      	beq.n	1592a <__aeabi_fmul+0xd2>
   158d8:	2a03      	cmp	r2, #3
   158da:	d100      	bne.n	158de <__aeabi_fmul+0x86>
   158dc:	e0ce      	b.n	15a7c <__aeabi_fmul+0x224>
   158de:	2a01      	cmp	r2, #1
   158e0:	d000      	beq.n	158e4 <__aeabi_fmul+0x8c>
   158e2:	e0ac      	b.n	15a3e <__aeabi_fmul+0x1e6>
   158e4:	4011      	ands	r1, r2
   158e6:	2000      	movs	r0, #0
   158e8:	2200      	movs	r2, #0
   158ea:	b2cc      	uxtb	r4, r1
   158ec:	0240      	lsls	r0, r0, #9
   158ee:	05d2      	lsls	r2, r2, #23
   158f0:	0a40      	lsrs	r0, r0, #9
   158f2:	07e4      	lsls	r4, r4, #31
   158f4:	4310      	orrs	r0, r2
   158f6:	4320      	orrs	r0, r4
   158f8:	bc3c      	pop	{r2, r3, r4, r5}
   158fa:	4690      	mov	r8, r2
   158fc:	4699      	mov	r9, r3
   158fe:	46a2      	mov	sl, r4
   15900:	46ab      	mov	fp, r5
   15902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15904:	2f00      	cmp	r7, #0
   15906:	d115      	bne.n	15934 <__aeabi_fmul+0xdc>
   15908:	2304      	movs	r3, #4
   1590a:	4699      	mov	r9, r3
   1590c:	3b03      	subs	r3, #3
   1590e:	2600      	movs	r6, #0
   15910:	469a      	mov	sl, r3
   15912:	e7b9      	b.n	15888 <__aeabi_fmul+0x30>
   15914:	20ff      	movs	r0, #255	; 0xff
   15916:	2202      	movs	r2, #2
   15918:	2d00      	cmp	r5, #0
   1591a:	d0c5      	beq.n	158a8 <__aeabi_fmul+0x50>
   1591c:	2203      	movs	r2, #3
   1591e:	e7c3      	b.n	158a8 <__aeabi_fmul+0x50>
   15920:	2d00      	cmp	r5, #0
   15922:	d119      	bne.n	15958 <__aeabi_fmul+0x100>
   15924:	2000      	movs	r0, #0
   15926:	2201      	movs	r2, #1
   15928:	e7be      	b.n	158a8 <__aeabi_fmul+0x50>
   1592a:	2401      	movs	r4, #1
   1592c:	22ff      	movs	r2, #255	; 0xff
   1592e:	400c      	ands	r4, r1
   15930:	2000      	movs	r0, #0
   15932:	e7db      	b.n	158ec <__aeabi_fmul+0x94>
   15934:	0038      	movs	r0, r7
   15936:	f001 ff99 	bl	1786c <__clzsi2>
   1593a:	2676      	movs	r6, #118	; 0x76
   1593c:	1f43      	subs	r3, r0, #5
   1593e:	409f      	lsls	r7, r3
   15940:	2300      	movs	r3, #0
   15942:	4276      	negs	r6, r6
   15944:	1a36      	subs	r6, r6, r0
   15946:	4699      	mov	r9, r3
   15948:	469a      	mov	sl, r3
   1594a:	e79d      	b.n	15888 <__aeabi_fmul+0x30>
   1594c:	230c      	movs	r3, #12
   1594e:	4699      	mov	r9, r3
   15950:	3b09      	subs	r3, #9
   15952:	26ff      	movs	r6, #255	; 0xff
   15954:	469a      	mov	sl, r3
   15956:	e797      	b.n	15888 <__aeabi_fmul+0x30>
   15958:	0028      	movs	r0, r5
   1595a:	f001 ff87 	bl	1786c <__clzsi2>
   1595e:	1f43      	subs	r3, r0, #5
   15960:	409d      	lsls	r5, r3
   15962:	2376      	movs	r3, #118	; 0x76
   15964:	425b      	negs	r3, r3
   15966:	1a18      	subs	r0, r3, r0
   15968:	2200      	movs	r2, #0
   1596a:	e79d      	b.n	158a8 <__aeabi_fmul+0x50>
   1596c:	2080      	movs	r0, #128	; 0x80
   1596e:	2400      	movs	r4, #0
   15970:	03c0      	lsls	r0, r0, #15
   15972:	22ff      	movs	r2, #255	; 0xff
   15974:	e7ba      	b.n	158ec <__aeabi_fmul+0x94>
   15976:	003d      	movs	r5, r7
   15978:	4652      	mov	r2, sl
   1597a:	e7ab      	b.n	158d4 <__aeabi_fmul+0x7c>
   1597c:	003d      	movs	r5, r7
   1597e:	0021      	movs	r1, r4
   15980:	4652      	mov	r2, sl
   15982:	e7a7      	b.n	158d4 <__aeabi_fmul+0x7c>
   15984:	0c3b      	lsrs	r3, r7, #16
   15986:	469c      	mov	ip, r3
   15988:	042a      	lsls	r2, r5, #16
   1598a:	0c12      	lsrs	r2, r2, #16
   1598c:	0c2b      	lsrs	r3, r5, #16
   1598e:	0014      	movs	r4, r2
   15990:	4660      	mov	r0, ip
   15992:	4665      	mov	r5, ip
   15994:	043f      	lsls	r7, r7, #16
   15996:	0c3f      	lsrs	r7, r7, #16
   15998:	437c      	muls	r4, r7
   1599a:	4342      	muls	r2, r0
   1599c:	435d      	muls	r5, r3
   1599e:	437b      	muls	r3, r7
   159a0:	0c27      	lsrs	r7, r4, #16
   159a2:	189b      	adds	r3, r3, r2
   159a4:	18ff      	adds	r7, r7, r3
   159a6:	42ba      	cmp	r2, r7
   159a8:	d903      	bls.n	159b2 <__aeabi_fmul+0x15a>
   159aa:	2380      	movs	r3, #128	; 0x80
   159ac:	025b      	lsls	r3, r3, #9
   159ae:	469c      	mov	ip, r3
   159b0:	4465      	add	r5, ip
   159b2:	0424      	lsls	r4, r4, #16
   159b4:	043a      	lsls	r2, r7, #16
   159b6:	0c24      	lsrs	r4, r4, #16
   159b8:	1912      	adds	r2, r2, r4
   159ba:	0193      	lsls	r3, r2, #6
   159bc:	1e5c      	subs	r4, r3, #1
   159be:	41a3      	sbcs	r3, r4
   159c0:	0c3f      	lsrs	r7, r7, #16
   159c2:	0e92      	lsrs	r2, r2, #26
   159c4:	197d      	adds	r5, r7, r5
   159c6:	431a      	orrs	r2, r3
   159c8:	01ad      	lsls	r5, r5, #6
   159ca:	4315      	orrs	r5, r2
   159cc:	012b      	lsls	r3, r5, #4
   159ce:	d504      	bpl.n	159da <__aeabi_fmul+0x182>
   159d0:	2301      	movs	r3, #1
   159d2:	465e      	mov	r6, fp
   159d4:	086a      	lsrs	r2, r5, #1
   159d6:	401d      	ands	r5, r3
   159d8:	4315      	orrs	r5, r2
   159da:	0032      	movs	r2, r6
   159dc:	327f      	adds	r2, #127	; 0x7f
   159de:	2a00      	cmp	r2, #0
   159e0:	dd25      	ble.n	15a2e <__aeabi_fmul+0x1d6>
   159e2:	076b      	lsls	r3, r5, #29
   159e4:	d004      	beq.n	159f0 <__aeabi_fmul+0x198>
   159e6:	230f      	movs	r3, #15
   159e8:	402b      	ands	r3, r5
   159ea:	2b04      	cmp	r3, #4
   159ec:	d000      	beq.n	159f0 <__aeabi_fmul+0x198>
   159ee:	3504      	adds	r5, #4
   159f0:	012b      	lsls	r3, r5, #4
   159f2:	d503      	bpl.n	159fc <__aeabi_fmul+0x1a4>
   159f4:	0032      	movs	r2, r6
   159f6:	4b27      	ldr	r3, [pc, #156]	; (15a94 <__aeabi_fmul+0x23c>)
   159f8:	3280      	adds	r2, #128	; 0x80
   159fa:	401d      	ands	r5, r3
   159fc:	2afe      	cmp	r2, #254	; 0xfe
   159fe:	dc94      	bgt.n	1592a <__aeabi_fmul+0xd2>
   15a00:	2401      	movs	r4, #1
   15a02:	01a8      	lsls	r0, r5, #6
   15a04:	0a40      	lsrs	r0, r0, #9
   15a06:	b2d2      	uxtb	r2, r2
   15a08:	400c      	ands	r4, r1
   15a0a:	e76f      	b.n	158ec <__aeabi_fmul+0x94>
   15a0c:	2080      	movs	r0, #128	; 0x80
   15a0e:	03c0      	lsls	r0, r0, #15
   15a10:	4207      	tst	r7, r0
   15a12:	d007      	beq.n	15a24 <__aeabi_fmul+0x1cc>
   15a14:	4205      	tst	r5, r0
   15a16:	d105      	bne.n	15a24 <__aeabi_fmul+0x1cc>
   15a18:	4328      	orrs	r0, r5
   15a1a:	0240      	lsls	r0, r0, #9
   15a1c:	0a40      	lsrs	r0, r0, #9
   15a1e:	4644      	mov	r4, r8
   15a20:	22ff      	movs	r2, #255	; 0xff
   15a22:	e763      	b.n	158ec <__aeabi_fmul+0x94>
   15a24:	4338      	orrs	r0, r7
   15a26:	0240      	lsls	r0, r0, #9
   15a28:	0a40      	lsrs	r0, r0, #9
   15a2a:	22ff      	movs	r2, #255	; 0xff
   15a2c:	e75e      	b.n	158ec <__aeabi_fmul+0x94>
   15a2e:	2401      	movs	r4, #1
   15a30:	1aa3      	subs	r3, r4, r2
   15a32:	2b1b      	cmp	r3, #27
   15a34:	dd05      	ble.n	15a42 <__aeabi_fmul+0x1ea>
   15a36:	400c      	ands	r4, r1
   15a38:	2200      	movs	r2, #0
   15a3a:	2000      	movs	r0, #0
   15a3c:	e756      	b.n	158ec <__aeabi_fmul+0x94>
   15a3e:	465e      	mov	r6, fp
   15a40:	e7cb      	b.n	159da <__aeabi_fmul+0x182>
   15a42:	002a      	movs	r2, r5
   15a44:	2020      	movs	r0, #32
   15a46:	40da      	lsrs	r2, r3
   15a48:	1ac3      	subs	r3, r0, r3
   15a4a:	409d      	lsls	r5, r3
   15a4c:	002b      	movs	r3, r5
   15a4e:	1e5d      	subs	r5, r3, #1
   15a50:	41ab      	sbcs	r3, r5
   15a52:	4313      	orrs	r3, r2
   15a54:	075a      	lsls	r2, r3, #29
   15a56:	d004      	beq.n	15a62 <__aeabi_fmul+0x20a>
   15a58:	220f      	movs	r2, #15
   15a5a:	401a      	ands	r2, r3
   15a5c:	2a04      	cmp	r2, #4
   15a5e:	d000      	beq.n	15a62 <__aeabi_fmul+0x20a>
   15a60:	3304      	adds	r3, #4
   15a62:	015a      	lsls	r2, r3, #5
   15a64:	d504      	bpl.n	15a70 <__aeabi_fmul+0x218>
   15a66:	2401      	movs	r4, #1
   15a68:	2201      	movs	r2, #1
   15a6a:	400c      	ands	r4, r1
   15a6c:	2000      	movs	r0, #0
   15a6e:	e73d      	b.n	158ec <__aeabi_fmul+0x94>
   15a70:	2401      	movs	r4, #1
   15a72:	019b      	lsls	r3, r3, #6
   15a74:	0a58      	lsrs	r0, r3, #9
   15a76:	400c      	ands	r4, r1
   15a78:	2200      	movs	r2, #0
   15a7a:	e737      	b.n	158ec <__aeabi_fmul+0x94>
   15a7c:	2080      	movs	r0, #128	; 0x80
   15a7e:	2401      	movs	r4, #1
   15a80:	03c0      	lsls	r0, r0, #15
   15a82:	4328      	orrs	r0, r5
   15a84:	0240      	lsls	r0, r0, #9
   15a86:	0a40      	lsrs	r0, r0, #9
   15a88:	400c      	ands	r4, r1
   15a8a:	22ff      	movs	r2, #255	; 0xff
   15a8c:	e72e      	b.n	158ec <__aeabi_fmul+0x94>
   15a8e:	46c0      	nop			; (mov r8, r8)
   15a90:	0001f7e8 	.word	0x0001f7e8
   15a94:	f7ffffff 	.word	0xf7ffffff

00015a98 <__aeabi_fsub>:
   15a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a9a:	464f      	mov	r7, r9
   15a9c:	46d6      	mov	lr, sl
   15a9e:	4646      	mov	r6, r8
   15aa0:	0044      	lsls	r4, r0, #1
   15aa2:	b5c0      	push	{r6, r7, lr}
   15aa4:	0fc2      	lsrs	r2, r0, #31
   15aa6:	0247      	lsls	r7, r0, #9
   15aa8:	0248      	lsls	r0, r1, #9
   15aaa:	0a40      	lsrs	r0, r0, #9
   15aac:	4684      	mov	ip, r0
   15aae:	4666      	mov	r6, ip
   15ab0:	0a7b      	lsrs	r3, r7, #9
   15ab2:	0048      	lsls	r0, r1, #1
   15ab4:	0fc9      	lsrs	r1, r1, #31
   15ab6:	469a      	mov	sl, r3
   15ab8:	0e24      	lsrs	r4, r4, #24
   15aba:	0015      	movs	r5, r2
   15abc:	00db      	lsls	r3, r3, #3
   15abe:	0e00      	lsrs	r0, r0, #24
   15ac0:	4689      	mov	r9, r1
   15ac2:	00f6      	lsls	r6, r6, #3
   15ac4:	28ff      	cmp	r0, #255	; 0xff
   15ac6:	d100      	bne.n	15aca <__aeabi_fsub+0x32>
   15ac8:	e08f      	b.n	15bea <__aeabi_fsub+0x152>
   15aca:	2101      	movs	r1, #1
   15acc:	464f      	mov	r7, r9
   15ace:	404f      	eors	r7, r1
   15ad0:	0039      	movs	r1, r7
   15ad2:	4291      	cmp	r1, r2
   15ad4:	d066      	beq.n	15ba4 <__aeabi_fsub+0x10c>
   15ad6:	1a22      	subs	r2, r4, r0
   15ad8:	2a00      	cmp	r2, #0
   15ada:	dc00      	bgt.n	15ade <__aeabi_fsub+0x46>
   15adc:	e09d      	b.n	15c1a <__aeabi_fsub+0x182>
   15ade:	2800      	cmp	r0, #0
   15ae0:	d13d      	bne.n	15b5e <__aeabi_fsub+0xc6>
   15ae2:	2e00      	cmp	r6, #0
   15ae4:	d100      	bne.n	15ae8 <__aeabi_fsub+0x50>
   15ae6:	e08b      	b.n	15c00 <__aeabi_fsub+0x168>
   15ae8:	1e51      	subs	r1, r2, #1
   15aea:	2900      	cmp	r1, #0
   15aec:	d000      	beq.n	15af0 <__aeabi_fsub+0x58>
   15aee:	e0b5      	b.n	15c5c <__aeabi_fsub+0x1c4>
   15af0:	2401      	movs	r4, #1
   15af2:	1b9b      	subs	r3, r3, r6
   15af4:	015a      	lsls	r2, r3, #5
   15af6:	d544      	bpl.n	15b82 <__aeabi_fsub+0xea>
   15af8:	019b      	lsls	r3, r3, #6
   15afa:	099f      	lsrs	r7, r3, #6
   15afc:	0038      	movs	r0, r7
   15afe:	f001 feb5 	bl	1786c <__clzsi2>
   15b02:	3805      	subs	r0, #5
   15b04:	4087      	lsls	r7, r0
   15b06:	4284      	cmp	r4, r0
   15b08:	dd00      	ble.n	15b0c <__aeabi_fsub+0x74>
   15b0a:	e096      	b.n	15c3a <__aeabi_fsub+0x1a2>
   15b0c:	1b04      	subs	r4, r0, r4
   15b0e:	003a      	movs	r2, r7
   15b10:	2020      	movs	r0, #32
   15b12:	3401      	adds	r4, #1
   15b14:	40e2      	lsrs	r2, r4
   15b16:	1b04      	subs	r4, r0, r4
   15b18:	40a7      	lsls	r7, r4
   15b1a:	003b      	movs	r3, r7
   15b1c:	1e5f      	subs	r7, r3, #1
   15b1e:	41bb      	sbcs	r3, r7
   15b20:	2400      	movs	r4, #0
   15b22:	4313      	orrs	r3, r2
   15b24:	075a      	lsls	r2, r3, #29
   15b26:	d004      	beq.n	15b32 <__aeabi_fsub+0x9a>
   15b28:	220f      	movs	r2, #15
   15b2a:	401a      	ands	r2, r3
   15b2c:	2a04      	cmp	r2, #4
   15b2e:	d000      	beq.n	15b32 <__aeabi_fsub+0x9a>
   15b30:	3304      	adds	r3, #4
   15b32:	015a      	lsls	r2, r3, #5
   15b34:	d527      	bpl.n	15b86 <__aeabi_fsub+0xee>
   15b36:	3401      	adds	r4, #1
   15b38:	2cff      	cmp	r4, #255	; 0xff
   15b3a:	d100      	bne.n	15b3e <__aeabi_fsub+0xa6>
   15b3c:	e079      	b.n	15c32 <__aeabi_fsub+0x19a>
   15b3e:	2201      	movs	r2, #1
   15b40:	019b      	lsls	r3, r3, #6
   15b42:	0a5b      	lsrs	r3, r3, #9
   15b44:	b2e4      	uxtb	r4, r4
   15b46:	402a      	ands	r2, r5
   15b48:	025b      	lsls	r3, r3, #9
   15b4a:	05e4      	lsls	r4, r4, #23
   15b4c:	0a58      	lsrs	r0, r3, #9
   15b4e:	07d2      	lsls	r2, r2, #31
   15b50:	4320      	orrs	r0, r4
   15b52:	4310      	orrs	r0, r2
   15b54:	bc1c      	pop	{r2, r3, r4}
   15b56:	4690      	mov	r8, r2
   15b58:	4699      	mov	r9, r3
   15b5a:	46a2      	mov	sl, r4
   15b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15b5e:	2cff      	cmp	r4, #255	; 0xff
   15b60:	d0e0      	beq.n	15b24 <__aeabi_fsub+0x8c>
   15b62:	2180      	movs	r1, #128	; 0x80
   15b64:	04c9      	lsls	r1, r1, #19
   15b66:	430e      	orrs	r6, r1
   15b68:	2a1b      	cmp	r2, #27
   15b6a:	dc7b      	bgt.n	15c64 <__aeabi_fsub+0x1cc>
   15b6c:	0031      	movs	r1, r6
   15b6e:	2020      	movs	r0, #32
   15b70:	40d1      	lsrs	r1, r2
   15b72:	1a82      	subs	r2, r0, r2
   15b74:	4096      	lsls	r6, r2
   15b76:	1e72      	subs	r2, r6, #1
   15b78:	4196      	sbcs	r6, r2
   15b7a:	430e      	orrs	r6, r1
   15b7c:	1b9b      	subs	r3, r3, r6
   15b7e:	015a      	lsls	r2, r3, #5
   15b80:	d4ba      	bmi.n	15af8 <__aeabi_fsub+0x60>
   15b82:	075a      	lsls	r2, r3, #29
   15b84:	d1d0      	bne.n	15b28 <__aeabi_fsub+0x90>
   15b86:	2201      	movs	r2, #1
   15b88:	08df      	lsrs	r7, r3, #3
   15b8a:	402a      	ands	r2, r5
   15b8c:	2cff      	cmp	r4, #255	; 0xff
   15b8e:	d133      	bne.n	15bf8 <__aeabi_fsub+0x160>
   15b90:	2f00      	cmp	r7, #0
   15b92:	d100      	bne.n	15b96 <__aeabi_fsub+0xfe>
   15b94:	e0a8      	b.n	15ce8 <__aeabi_fsub+0x250>
   15b96:	2380      	movs	r3, #128	; 0x80
   15b98:	03db      	lsls	r3, r3, #15
   15b9a:	433b      	orrs	r3, r7
   15b9c:	025b      	lsls	r3, r3, #9
   15b9e:	0a5b      	lsrs	r3, r3, #9
   15ba0:	24ff      	movs	r4, #255	; 0xff
   15ba2:	e7d1      	b.n	15b48 <__aeabi_fsub+0xb0>
   15ba4:	1a21      	subs	r1, r4, r0
   15ba6:	2900      	cmp	r1, #0
   15ba8:	dd4c      	ble.n	15c44 <__aeabi_fsub+0x1ac>
   15baa:	2800      	cmp	r0, #0
   15bac:	d02a      	beq.n	15c04 <__aeabi_fsub+0x16c>
   15bae:	2cff      	cmp	r4, #255	; 0xff
   15bb0:	d0b8      	beq.n	15b24 <__aeabi_fsub+0x8c>
   15bb2:	2080      	movs	r0, #128	; 0x80
   15bb4:	04c0      	lsls	r0, r0, #19
   15bb6:	4306      	orrs	r6, r0
   15bb8:	291b      	cmp	r1, #27
   15bba:	dd00      	ble.n	15bbe <__aeabi_fsub+0x126>
   15bbc:	e0af      	b.n	15d1e <__aeabi_fsub+0x286>
   15bbe:	0030      	movs	r0, r6
   15bc0:	2720      	movs	r7, #32
   15bc2:	40c8      	lsrs	r0, r1
   15bc4:	1a79      	subs	r1, r7, r1
   15bc6:	408e      	lsls	r6, r1
   15bc8:	1e71      	subs	r1, r6, #1
   15bca:	418e      	sbcs	r6, r1
   15bcc:	4306      	orrs	r6, r0
   15bce:	199b      	adds	r3, r3, r6
   15bd0:	0159      	lsls	r1, r3, #5
   15bd2:	d5d6      	bpl.n	15b82 <__aeabi_fsub+0xea>
   15bd4:	3401      	adds	r4, #1
   15bd6:	2cff      	cmp	r4, #255	; 0xff
   15bd8:	d100      	bne.n	15bdc <__aeabi_fsub+0x144>
   15bda:	e085      	b.n	15ce8 <__aeabi_fsub+0x250>
   15bdc:	2201      	movs	r2, #1
   15bde:	497a      	ldr	r1, [pc, #488]	; (15dc8 <__aeabi_fsub+0x330>)
   15be0:	401a      	ands	r2, r3
   15be2:	085b      	lsrs	r3, r3, #1
   15be4:	400b      	ands	r3, r1
   15be6:	4313      	orrs	r3, r2
   15be8:	e79c      	b.n	15b24 <__aeabi_fsub+0x8c>
   15bea:	2e00      	cmp	r6, #0
   15bec:	d000      	beq.n	15bf0 <__aeabi_fsub+0x158>
   15bee:	e770      	b.n	15ad2 <__aeabi_fsub+0x3a>
   15bf0:	e76b      	b.n	15aca <__aeabi_fsub+0x32>
   15bf2:	1e3b      	subs	r3, r7, #0
   15bf4:	d1c5      	bne.n	15b82 <__aeabi_fsub+0xea>
   15bf6:	2200      	movs	r2, #0
   15bf8:	027b      	lsls	r3, r7, #9
   15bfa:	0a5b      	lsrs	r3, r3, #9
   15bfc:	b2e4      	uxtb	r4, r4
   15bfe:	e7a3      	b.n	15b48 <__aeabi_fsub+0xb0>
   15c00:	0014      	movs	r4, r2
   15c02:	e78f      	b.n	15b24 <__aeabi_fsub+0x8c>
   15c04:	2e00      	cmp	r6, #0
   15c06:	d04d      	beq.n	15ca4 <__aeabi_fsub+0x20c>
   15c08:	1e48      	subs	r0, r1, #1
   15c0a:	2800      	cmp	r0, #0
   15c0c:	d157      	bne.n	15cbe <__aeabi_fsub+0x226>
   15c0e:	199b      	adds	r3, r3, r6
   15c10:	2401      	movs	r4, #1
   15c12:	015a      	lsls	r2, r3, #5
   15c14:	d5b5      	bpl.n	15b82 <__aeabi_fsub+0xea>
   15c16:	2402      	movs	r4, #2
   15c18:	e7e0      	b.n	15bdc <__aeabi_fsub+0x144>
   15c1a:	2a00      	cmp	r2, #0
   15c1c:	d125      	bne.n	15c6a <__aeabi_fsub+0x1d2>
   15c1e:	1c62      	adds	r2, r4, #1
   15c20:	b2d2      	uxtb	r2, r2
   15c22:	2a01      	cmp	r2, #1
   15c24:	dd72      	ble.n	15d0c <__aeabi_fsub+0x274>
   15c26:	1b9f      	subs	r7, r3, r6
   15c28:	017a      	lsls	r2, r7, #5
   15c2a:	d535      	bpl.n	15c98 <__aeabi_fsub+0x200>
   15c2c:	1af7      	subs	r7, r6, r3
   15c2e:	000d      	movs	r5, r1
   15c30:	e764      	b.n	15afc <__aeabi_fsub+0x64>
   15c32:	2201      	movs	r2, #1
   15c34:	2300      	movs	r3, #0
   15c36:	402a      	ands	r2, r5
   15c38:	e786      	b.n	15b48 <__aeabi_fsub+0xb0>
   15c3a:	003b      	movs	r3, r7
   15c3c:	4a63      	ldr	r2, [pc, #396]	; (15dcc <__aeabi_fsub+0x334>)
   15c3e:	1a24      	subs	r4, r4, r0
   15c40:	4013      	ands	r3, r2
   15c42:	e76f      	b.n	15b24 <__aeabi_fsub+0x8c>
   15c44:	2900      	cmp	r1, #0
   15c46:	d16c      	bne.n	15d22 <__aeabi_fsub+0x28a>
   15c48:	1c61      	adds	r1, r4, #1
   15c4a:	b2c8      	uxtb	r0, r1
   15c4c:	2801      	cmp	r0, #1
   15c4e:	dd4e      	ble.n	15cee <__aeabi_fsub+0x256>
   15c50:	29ff      	cmp	r1, #255	; 0xff
   15c52:	d049      	beq.n	15ce8 <__aeabi_fsub+0x250>
   15c54:	199b      	adds	r3, r3, r6
   15c56:	085b      	lsrs	r3, r3, #1
   15c58:	000c      	movs	r4, r1
   15c5a:	e763      	b.n	15b24 <__aeabi_fsub+0x8c>
   15c5c:	2aff      	cmp	r2, #255	; 0xff
   15c5e:	d041      	beq.n	15ce4 <__aeabi_fsub+0x24c>
   15c60:	000a      	movs	r2, r1
   15c62:	e781      	b.n	15b68 <__aeabi_fsub+0xd0>
   15c64:	2601      	movs	r6, #1
   15c66:	1b9b      	subs	r3, r3, r6
   15c68:	e789      	b.n	15b7e <__aeabi_fsub+0xe6>
   15c6a:	2c00      	cmp	r4, #0
   15c6c:	d01c      	beq.n	15ca8 <__aeabi_fsub+0x210>
   15c6e:	28ff      	cmp	r0, #255	; 0xff
   15c70:	d021      	beq.n	15cb6 <__aeabi_fsub+0x21e>
   15c72:	2480      	movs	r4, #128	; 0x80
   15c74:	04e4      	lsls	r4, r4, #19
   15c76:	4252      	negs	r2, r2
   15c78:	4323      	orrs	r3, r4
   15c7a:	2a1b      	cmp	r2, #27
   15c7c:	dd00      	ble.n	15c80 <__aeabi_fsub+0x1e8>
   15c7e:	e096      	b.n	15dae <__aeabi_fsub+0x316>
   15c80:	001c      	movs	r4, r3
   15c82:	2520      	movs	r5, #32
   15c84:	40d4      	lsrs	r4, r2
   15c86:	1aaa      	subs	r2, r5, r2
   15c88:	4093      	lsls	r3, r2
   15c8a:	1e5a      	subs	r2, r3, #1
   15c8c:	4193      	sbcs	r3, r2
   15c8e:	4323      	orrs	r3, r4
   15c90:	1af3      	subs	r3, r6, r3
   15c92:	0004      	movs	r4, r0
   15c94:	000d      	movs	r5, r1
   15c96:	e72d      	b.n	15af4 <__aeabi_fsub+0x5c>
   15c98:	2f00      	cmp	r7, #0
   15c9a:	d000      	beq.n	15c9e <__aeabi_fsub+0x206>
   15c9c:	e72e      	b.n	15afc <__aeabi_fsub+0x64>
   15c9e:	2200      	movs	r2, #0
   15ca0:	2400      	movs	r4, #0
   15ca2:	e7a9      	b.n	15bf8 <__aeabi_fsub+0x160>
   15ca4:	000c      	movs	r4, r1
   15ca6:	e73d      	b.n	15b24 <__aeabi_fsub+0x8c>
   15ca8:	2b00      	cmp	r3, #0
   15caa:	d058      	beq.n	15d5e <__aeabi_fsub+0x2c6>
   15cac:	43d2      	mvns	r2, r2
   15cae:	2a00      	cmp	r2, #0
   15cb0:	d0ee      	beq.n	15c90 <__aeabi_fsub+0x1f8>
   15cb2:	28ff      	cmp	r0, #255	; 0xff
   15cb4:	d1e1      	bne.n	15c7a <__aeabi_fsub+0x1e2>
   15cb6:	0033      	movs	r3, r6
   15cb8:	24ff      	movs	r4, #255	; 0xff
   15cba:	000d      	movs	r5, r1
   15cbc:	e732      	b.n	15b24 <__aeabi_fsub+0x8c>
   15cbe:	29ff      	cmp	r1, #255	; 0xff
   15cc0:	d010      	beq.n	15ce4 <__aeabi_fsub+0x24c>
   15cc2:	0001      	movs	r1, r0
   15cc4:	e778      	b.n	15bb8 <__aeabi_fsub+0x120>
   15cc6:	2b00      	cmp	r3, #0
   15cc8:	d06e      	beq.n	15da8 <__aeabi_fsub+0x310>
   15cca:	24ff      	movs	r4, #255	; 0xff
   15ccc:	2e00      	cmp	r6, #0
   15cce:	d100      	bne.n	15cd2 <__aeabi_fsub+0x23a>
   15cd0:	e728      	b.n	15b24 <__aeabi_fsub+0x8c>
   15cd2:	2280      	movs	r2, #128	; 0x80
   15cd4:	4651      	mov	r1, sl
   15cd6:	03d2      	lsls	r2, r2, #15
   15cd8:	4211      	tst	r1, r2
   15cda:	d003      	beq.n	15ce4 <__aeabi_fsub+0x24c>
   15cdc:	4661      	mov	r1, ip
   15cde:	4211      	tst	r1, r2
   15ce0:	d100      	bne.n	15ce4 <__aeabi_fsub+0x24c>
   15ce2:	0033      	movs	r3, r6
   15ce4:	24ff      	movs	r4, #255	; 0xff
   15ce6:	e71d      	b.n	15b24 <__aeabi_fsub+0x8c>
   15ce8:	24ff      	movs	r4, #255	; 0xff
   15cea:	2300      	movs	r3, #0
   15cec:	e72c      	b.n	15b48 <__aeabi_fsub+0xb0>
   15cee:	2c00      	cmp	r4, #0
   15cf0:	d1e9      	bne.n	15cc6 <__aeabi_fsub+0x22e>
   15cf2:	2b00      	cmp	r3, #0
   15cf4:	d063      	beq.n	15dbe <__aeabi_fsub+0x326>
   15cf6:	2e00      	cmp	r6, #0
   15cf8:	d100      	bne.n	15cfc <__aeabi_fsub+0x264>
   15cfa:	e713      	b.n	15b24 <__aeabi_fsub+0x8c>
   15cfc:	199b      	adds	r3, r3, r6
   15cfe:	015a      	lsls	r2, r3, #5
   15d00:	d400      	bmi.n	15d04 <__aeabi_fsub+0x26c>
   15d02:	e73e      	b.n	15b82 <__aeabi_fsub+0xea>
   15d04:	4a31      	ldr	r2, [pc, #196]	; (15dcc <__aeabi_fsub+0x334>)
   15d06:	000c      	movs	r4, r1
   15d08:	4013      	ands	r3, r2
   15d0a:	e70b      	b.n	15b24 <__aeabi_fsub+0x8c>
   15d0c:	2c00      	cmp	r4, #0
   15d0e:	d11e      	bne.n	15d4e <__aeabi_fsub+0x2b6>
   15d10:	2b00      	cmp	r3, #0
   15d12:	d12f      	bne.n	15d74 <__aeabi_fsub+0x2dc>
   15d14:	2e00      	cmp	r6, #0
   15d16:	d04f      	beq.n	15db8 <__aeabi_fsub+0x320>
   15d18:	0033      	movs	r3, r6
   15d1a:	000d      	movs	r5, r1
   15d1c:	e702      	b.n	15b24 <__aeabi_fsub+0x8c>
   15d1e:	2601      	movs	r6, #1
   15d20:	e755      	b.n	15bce <__aeabi_fsub+0x136>
   15d22:	2c00      	cmp	r4, #0
   15d24:	d11f      	bne.n	15d66 <__aeabi_fsub+0x2ce>
   15d26:	2b00      	cmp	r3, #0
   15d28:	d043      	beq.n	15db2 <__aeabi_fsub+0x31a>
   15d2a:	43c9      	mvns	r1, r1
   15d2c:	2900      	cmp	r1, #0
   15d2e:	d00b      	beq.n	15d48 <__aeabi_fsub+0x2b0>
   15d30:	28ff      	cmp	r0, #255	; 0xff
   15d32:	d039      	beq.n	15da8 <__aeabi_fsub+0x310>
   15d34:	291b      	cmp	r1, #27
   15d36:	dc44      	bgt.n	15dc2 <__aeabi_fsub+0x32a>
   15d38:	001c      	movs	r4, r3
   15d3a:	2720      	movs	r7, #32
   15d3c:	40cc      	lsrs	r4, r1
   15d3e:	1a79      	subs	r1, r7, r1
   15d40:	408b      	lsls	r3, r1
   15d42:	1e59      	subs	r1, r3, #1
   15d44:	418b      	sbcs	r3, r1
   15d46:	4323      	orrs	r3, r4
   15d48:	199b      	adds	r3, r3, r6
   15d4a:	0004      	movs	r4, r0
   15d4c:	e740      	b.n	15bd0 <__aeabi_fsub+0x138>
   15d4e:	2b00      	cmp	r3, #0
   15d50:	d11a      	bne.n	15d88 <__aeabi_fsub+0x2f0>
   15d52:	2e00      	cmp	r6, #0
   15d54:	d124      	bne.n	15da0 <__aeabi_fsub+0x308>
   15d56:	2780      	movs	r7, #128	; 0x80
   15d58:	2200      	movs	r2, #0
   15d5a:	03ff      	lsls	r7, r7, #15
   15d5c:	e71b      	b.n	15b96 <__aeabi_fsub+0xfe>
   15d5e:	0033      	movs	r3, r6
   15d60:	0004      	movs	r4, r0
   15d62:	000d      	movs	r5, r1
   15d64:	e6de      	b.n	15b24 <__aeabi_fsub+0x8c>
   15d66:	28ff      	cmp	r0, #255	; 0xff
   15d68:	d01e      	beq.n	15da8 <__aeabi_fsub+0x310>
   15d6a:	2480      	movs	r4, #128	; 0x80
   15d6c:	04e4      	lsls	r4, r4, #19
   15d6e:	4249      	negs	r1, r1
   15d70:	4323      	orrs	r3, r4
   15d72:	e7df      	b.n	15d34 <__aeabi_fsub+0x29c>
   15d74:	2e00      	cmp	r6, #0
   15d76:	d100      	bne.n	15d7a <__aeabi_fsub+0x2e2>
   15d78:	e6d4      	b.n	15b24 <__aeabi_fsub+0x8c>
   15d7a:	1b9f      	subs	r7, r3, r6
   15d7c:	017a      	lsls	r2, r7, #5
   15d7e:	d400      	bmi.n	15d82 <__aeabi_fsub+0x2ea>
   15d80:	e737      	b.n	15bf2 <__aeabi_fsub+0x15a>
   15d82:	1af3      	subs	r3, r6, r3
   15d84:	000d      	movs	r5, r1
   15d86:	e6cd      	b.n	15b24 <__aeabi_fsub+0x8c>
   15d88:	24ff      	movs	r4, #255	; 0xff
   15d8a:	2e00      	cmp	r6, #0
   15d8c:	d100      	bne.n	15d90 <__aeabi_fsub+0x2f8>
   15d8e:	e6c9      	b.n	15b24 <__aeabi_fsub+0x8c>
   15d90:	2280      	movs	r2, #128	; 0x80
   15d92:	4650      	mov	r0, sl
   15d94:	03d2      	lsls	r2, r2, #15
   15d96:	4210      	tst	r0, r2
   15d98:	d0a4      	beq.n	15ce4 <__aeabi_fsub+0x24c>
   15d9a:	4660      	mov	r0, ip
   15d9c:	4210      	tst	r0, r2
   15d9e:	d1a1      	bne.n	15ce4 <__aeabi_fsub+0x24c>
   15da0:	0033      	movs	r3, r6
   15da2:	000d      	movs	r5, r1
   15da4:	24ff      	movs	r4, #255	; 0xff
   15da6:	e6bd      	b.n	15b24 <__aeabi_fsub+0x8c>
   15da8:	0033      	movs	r3, r6
   15daa:	24ff      	movs	r4, #255	; 0xff
   15dac:	e6ba      	b.n	15b24 <__aeabi_fsub+0x8c>
   15dae:	2301      	movs	r3, #1
   15db0:	e76e      	b.n	15c90 <__aeabi_fsub+0x1f8>
   15db2:	0033      	movs	r3, r6
   15db4:	0004      	movs	r4, r0
   15db6:	e6b5      	b.n	15b24 <__aeabi_fsub+0x8c>
   15db8:	2700      	movs	r7, #0
   15dba:	2200      	movs	r2, #0
   15dbc:	e71c      	b.n	15bf8 <__aeabi_fsub+0x160>
   15dbe:	0033      	movs	r3, r6
   15dc0:	e6b0      	b.n	15b24 <__aeabi_fsub+0x8c>
   15dc2:	2301      	movs	r3, #1
   15dc4:	e7c0      	b.n	15d48 <__aeabi_fsub+0x2b0>
   15dc6:	46c0      	nop			; (mov r8, r8)
   15dc8:	7dffffff 	.word	0x7dffffff
   15dcc:	fbffffff 	.word	0xfbffffff

00015dd0 <__aeabi_f2iz>:
   15dd0:	0241      	lsls	r1, r0, #9
   15dd2:	0043      	lsls	r3, r0, #1
   15dd4:	0fc2      	lsrs	r2, r0, #31
   15dd6:	0a49      	lsrs	r1, r1, #9
   15dd8:	0e1b      	lsrs	r3, r3, #24
   15dda:	2000      	movs	r0, #0
   15ddc:	2b7e      	cmp	r3, #126	; 0x7e
   15dde:	dd0d      	ble.n	15dfc <__aeabi_f2iz+0x2c>
   15de0:	2b9d      	cmp	r3, #157	; 0x9d
   15de2:	dc0c      	bgt.n	15dfe <__aeabi_f2iz+0x2e>
   15de4:	2080      	movs	r0, #128	; 0x80
   15de6:	0400      	lsls	r0, r0, #16
   15de8:	4301      	orrs	r1, r0
   15dea:	2b95      	cmp	r3, #149	; 0x95
   15dec:	dc0a      	bgt.n	15e04 <__aeabi_f2iz+0x34>
   15dee:	2096      	movs	r0, #150	; 0x96
   15df0:	1ac3      	subs	r3, r0, r3
   15df2:	40d9      	lsrs	r1, r3
   15df4:	4248      	negs	r0, r1
   15df6:	2a00      	cmp	r2, #0
   15df8:	d100      	bne.n	15dfc <__aeabi_f2iz+0x2c>
   15dfa:	0008      	movs	r0, r1
   15dfc:	4770      	bx	lr
   15dfe:	4b03      	ldr	r3, [pc, #12]	; (15e0c <__aeabi_f2iz+0x3c>)
   15e00:	18d0      	adds	r0, r2, r3
   15e02:	e7fb      	b.n	15dfc <__aeabi_f2iz+0x2c>
   15e04:	3b96      	subs	r3, #150	; 0x96
   15e06:	4099      	lsls	r1, r3
   15e08:	e7f4      	b.n	15df4 <__aeabi_f2iz+0x24>
   15e0a:	46c0      	nop			; (mov r8, r8)
   15e0c:	7fffffff 	.word	0x7fffffff

00015e10 <__aeabi_i2f>:
   15e10:	b570      	push	{r4, r5, r6, lr}
   15e12:	2800      	cmp	r0, #0
   15e14:	d030      	beq.n	15e78 <__aeabi_i2f+0x68>
   15e16:	17c3      	asrs	r3, r0, #31
   15e18:	18c4      	adds	r4, r0, r3
   15e1a:	405c      	eors	r4, r3
   15e1c:	0fc5      	lsrs	r5, r0, #31
   15e1e:	0020      	movs	r0, r4
   15e20:	f001 fd24 	bl	1786c <__clzsi2>
   15e24:	239e      	movs	r3, #158	; 0x9e
   15e26:	1a1b      	subs	r3, r3, r0
   15e28:	2b96      	cmp	r3, #150	; 0x96
   15e2a:	dc0d      	bgt.n	15e48 <__aeabi_i2f+0x38>
   15e2c:	2296      	movs	r2, #150	; 0x96
   15e2e:	1ad2      	subs	r2, r2, r3
   15e30:	4094      	lsls	r4, r2
   15e32:	002a      	movs	r2, r5
   15e34:	0264      	lsls	r4, r4, #9
   15e36:	0a64      	lsrs	r4, r4, #9
   15e38:	b2db      	uxtb	r3, r3
   15e3a:	0264      	lsls	r4, r4, #9
   15e3c:	05db      	lsls	r3, r3, #23
   15e3e:	0a60      	lsrs	r0, r4, #9
   15e40:	07d2      	lsls	r2, r2, #31
   15e42:	4318      	orrs	r0, r3
   15e44:	4310      	orrs	r0, r2
   15e46:	bd70      	pop	{r4, r5, r6, pc}
   15e48:	2b99      	cmp	r3, #153	; 0x99
   15e4a:	dc19      	bgt.n	15e80 <__aeabi_i2f+0x70>
   15e4c:	2299      	movs	r2, #153	; 0x99
   15e4e:	1ad2      	subs	r2, r2, r3
   15e50:	2a00      	cmp	r2, #0
   15e52:	dd29      	ble.n	15ea8 <__aeabi_i2f+0x98>
   15e54:	4094      	lsls	r4, r2
   15e56:	0022      	movs	r2, r4
   15e58:	4c14      	ldr	r4, [pc, #80]	; (15eac <__aeabi_i2f+0x9c>)
   15e5a:	4014      	ands	r4, r2
   15e5c:	0751      	lsls	r1, r2, #29
   15e5e:	d004      	beq.n	15e6a <__aeabi_i2f+0x5a>
   15e60:	210f      	movs	r1, #15
   15e62:	400a      	ands	r2, r1
   15e64:	2a04      	cmp	r2, #4
   15e66:	d000      	beq.n	15e6a <__aeabi_i2f+0x5a>
   15e68:	3404      	adds	r4, #4
   15e6a:	0162      	lsls	r2, r4, #5
   15e6c:	d413      	bmi.n	15e96 <__aeabi_i2f+0x86>
   15e6e:	01a4      	lsls	r4, r4, #6
   15e70:	0a64      	lsrs	r4, r4, #9
   15e72:	b2db      	uxtb	r3, r3
   15e74:	002a      	movs	r2, r5
   15e76:	e7e0      	b.n	15e3a <__aeabi_i2f+0x2a>
   15e78:	2200      	movs	r2, #0
   15e7a:	2300      	movs	r3, #0
   15e7c:	2400      	movs	r4, #0
   15e7e:	e7dc      	b.n	15e3a <__aeabi_i2f+0x2a>
   15e80:	2205      	movs	r2, #5
   15e82:	0021      	movs	r1, r4
   15e84:	1a12      	subs	r2, r2, r0
   15e86:	40d1      	lsrs	r1, r2
   15e88:	22b9      	movs	r2, #185	; 0xb9
   15e8a:	1ad2      	subs	r2, r2, r3
   15e8c:	4094      	lsls	r4, r2
   15e8e:	1e62      	subs	r2, r4, #1
   15e90:	4194      	sbcs	r4, r2
   15e92:	430c      	orrs	r4, r1
   15e94:	e7da      	b.n	15e4c <__aeabi_i2f+0x3c>
   15e96:	4b05      	ldr	r3, [pc, #20]	; (15eac <__aeabi_i2f+0x9c>)
   15e98:	002a      	movs	r2, r5
   15e9a:	401c      	ands	r4, r3
   15e9c:	239f      	movs	r3, #159	; 0x9f
   15e9e:	01a4      	lsls	r4, r4, #6
   15ea0:	1a1b      	subs	r3, r3, r0
   15ea2:	0a64      	lsrs	r4, r4, #9
   15ea4:	b2db      	uxtb	r3, r3
   15ea6:	e7c8      	b.n	15e3a <__aeabi_i2f+0x2a>
   15ea8:	0022      	movs	r2, r4
   15eaa:	e7d5      	b.n	15e58 <__aeabi_i2f+0x48>
   15eac:	fbffffff 	.word	0xfbffffff

00015eb0 <__aeabi_ui2f>:
   15eb0:	b510      	push	{r4, lr}
   15eb2:	1e04      	subs	r4, r0, #0
   15eb4:	d027      	beq.n	15f06 <__aeabi_ui2f+0x56>
   15eb6:	f001 fcd9 	bl	1786c <__clzsi2>
   15eba:	239e      	movs	r3, #158	; 0x9e
   15ebc:	1a1b      	subs	r3, r3, r0
   15ebe:	2b96      	cmp	r3, #150	; 0x96
   15ec0:	dc0a      	bgt.n	15ed8 <__aeabi_ui2f+0x28>
   15ec2:	2296      	movs	r2, #150	; 0x96
   15ec4:	1ad2      	subs	r2, r2, r3
   15ec6:	4094      	lsls	r4, r2
   15ec8:	0264      	lsls	r4, r4, #9
   15eca:	0a64      	lsrs	r4, r4, #9
   15ecc:	b2db      	uxtb	r3, r3
   15ece:	0264      	lsls	r4, r4, #9
   15ed0:	05db      	lsls	r3, r3, #23
   15ed2:	0a60      	lsrs	r0, r4, #9
   15ed4:	4318      	orrs	r0, r3
   15ed6:	bd10      	pop	{r4, pc}
   15ed8:	2b99      	cmp	r3, #153	; 0x99
   15eda:	dc17      	bgt.n	15f0c <__aeabi_ui2f+0x5c>
   15edc:	2299      	movs	r2, #153	; 0x99
   15ede:	1ad2      	subs	r2, r2, r3
   15ee0:	2a00      	cmp	r2, #0
   15ee2:	dd27      	ble.n	15f34 <__aeabi_ui2f+0x84>
   15ee4:	4094      	lsls	r4, r2
   15ee6:	0022      	movs	r2, r4
   15ee8:	4c13      	ldr	r4, [pc, #76]	; (15f38 <__aeabi_ui2f+0x88>)
   15eea:	4014      	ands	r4, r2
   15eec:	0751      	lsls	r1, r2, #29
   15eee:	d004      	beq.n	15efa <__aeabi_ui2f+0x4a>
   15ef0:	210f      	movs	r1, #15
   15ef2:	400a      	ands	r2, r1
   15ef4:	2a04      	cmp	r2, #4
   15ef6:	d000      	beq.n	15efa <__aeabi_ui2f+0x4a>
   15ef8:	3404      	adds	r4, #4
   15efa:	0162      	lsls	r2, r4, #5
   15efc:	d412      	bmi.n	15f24 <__aeabi_ui2f+0x74>
   15efe:	01a4      	lsls	r4, r4, #6
   15f00:	0a64      	lsrs	r4, r4, #9
   15f02:	b2db      	uxtb	r3, r3
   15f04:	e7e3      	b.n	15ece <__aeabi_ui2f+0x1e>
   15f06:	2300      	movs	r3, #0
   15f08:	2400      	movs	r4, #0
   15f0a:	e7e0      	b.n	15ece <__aeabi_ui2f+0x1e>
   15f0c:	22b9      	movs	r2, #185	; 0xb9
   15f0e:	0021      	movs	r1, r4
   15f10:	1ad2      	subs	r2, r2, r3
   15f12:	4091      	lsls	r1, r2
   15f14:	000a      	movs	r2, r1
   15f16:	1e51      	subs	r1, r2, #1
   15f18:	418a      	sbcs	r2, r1
   15f1a:	2105      	movs	r1, #5
   15f1c:	1a09      	subs	r1, r1, r0
   15f1e:	40cc      	lsrs	r4, r1
   15f20:	4314      	orrs	r4, r2
   15f22:	e7db      	b.n	15edc <__aeabi_ui2f+0x2c>
   15f24:	4b04      	ldr	r3, [pc, #16]	; (15f38 <__aeabi_ui2f+0x88>)
   15f26:	401c      	ands	r4, r3
   15f28:	239f      	movs	r3, #159	; 0x9f
   15f2a:	01a4      	lsls	r4, r4, #6
   15f2c:	1a1b      	subs	r3, r3, r0
   15f2e:	0a64      	lsrs	r4, r4, #9
   15f30:	b2db      	uxtb	r3, r3
   15f32:	e7cc      	b.n	15ece <__aeabi_ui2f+0x1e>
   15f34:	0022      	movs	r2, r4
   15f36:	e7d7      	b.n	15ee8 <__aeabi_ui2f+0x38>
   15f38:	fbffffff 	.word	0xfbffffff

00015f3c <__aeabi_dadd>:
   15f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15f3e:	4645      	mov	r5, r8
   15f40:	46de      	mov	lr, fp
   15f42:	4657      	mov	r7, sl
   15f44:	464e      	mov	r6, r9
   15f46:	030c      	lsls	r4, r1, #12
   15f48:	b5e0      	push	{r5, r6, r7, lr}
   15f4a:	004e      	lsls	r6, r1, #1
   15f4c:	0fc9      	lsrs	r1, r1, #31
   15f4e:	4688      	mov	r8, r1
   15f50:	000d      	movs	r5, r1
   15f52:	0a61      	lsrs	r1, r4, #9
   15f54:	0f44      	lsrs	r4, r0, #29
   15f56:	430c      	orrs	r4, r1
   15f58:	00c7      	lsls	r7, r0, #3
   15f5a:	0319      	lsls	r1, r3, #12
   15f5c:	0058      	lsls	r0, r3, #1
   15f5e:	0fdb      	lsrs	r3, r3, #31
   15f60:	469b      	mov	fp, r3
   15f62:	0a4b      	lsrs	r3, r1, #9
   15f64:	0f51      	lsrs	r1, r2, #29
   15f66:	430b      	orrs	r3, r1
   15f68:	0d76      	lsrs	r6, r6, #21
   15f6a:	0d40      	lsrs	r0, r0, #21
   15f6c:	0019      	movs	r1, r3
   15f6e:	00d2      	lsls	r2, r2, #3
   15f70:	45d8      	cmp	r8, fp
   15f72:	d100      	bne.n	15f76 <__aeabi_dadd+0x3a>
   15f74:	e0ae      	b.n	160d4 <__aeabi_dadd+0x198>
   15f76:	1a35      	subs	r5, r6, r0
   15f78:	2d00      	cmp	r5, #0
   15f7a:	dc00      	bgt.n	15f7e <__aeabi_dadd+0x42>
   15f7c:	e0f6      	b.n	1616c <__aeabi_dadd+0x230>
   15f7e:	2800      	cmp	r0, #0
   15f80:	d10f      	bne.n	15fa2 <__aeabi_dadd+0x66>
   15f82:	4313      	orrs	r3, r2
   15f84:	d100      	bne.n	15f88 <__aeabi_dadd+0x4c>
   15f86:	e0db      	b.n	16140 <__aeabi_dadd+0x204>
   15f88:	1e6b      	subs	r3, r5, #1
   15f8a:	2b00      	cmp	r3, #0
   15f8c:	d000      	beq.n	15f90 <__aeabi_dadd+0x54>
   15f8e:	e137      	b.n	16200 <__aeabi_dadd+0x2c4>
   15f90:	1aba      	subs	r2, r7, r2
   15f92:	4297      	cmp	r7, r2
   15f94:	41bf      	sbcs	r7, r7
   15f96:	1a64      	subs	r4, r4, r1
   15f98:	427f      	negs	r7, r7
   15f9a:	1be4      	subs	r4, r4, r7
   15f9c:	2601      	movs	r6, #1
   15f9e:	0017      	movs	r7, r2
   15fa0:	e024      	b.n	15fec <__aeabi_dadd+0xb0>
   15fa2:	4bc6      	ldr	r3, [pc, #792]	; (162bc <__aeabi_dadd+0x380>)
   15fa4:	429e      	cmp	r6, r3
   15fa6:	d04d      	beq.n	16044 <__aeabi_dadd+0x108>
   15fa8:	2380      	movs	r3, #128	; 0x80
   15faa:	041b      	lsls	r3, r3, #16
   15fac:	4319      	orrs	r1, r3
   15fae:	2d38      	cmp	r5, #56	; 0x38
   15fb0:	dd00      	ble.n	15fb4 <__aeabi_dadd+0x78>
   15fb2:	e107      	b.n	161c4 <__aeabi_dadd+0x288>
   15fb4:	2d1f      	cmp	r5, #31
   15fb6:	dd00      	ble.n	15fba <__aeabi_dadd+0x7e>
   15fb8:	e138      	b.n	1622c <__aeabi_dadd+0x2f0>
   15fba:	2020      	movs	r0, #32
   15fbc:	1b43      	subs	r3, r0, r5
   15fbe:	469a      	mov	sl, r3
   15fc0:	000b      	movs	r3, r1
   15fc2:	4650      	mov	r0, sl
   15fc4:	4083      	lsls	r3, r0
   15fc6:	4699      	mov	r9, r3
   15fc8:	0013      	movs	r3, r2
   15fca:	4648      	mov	r0, r9
   15fcc:	40eb      	lsrs	r3, r5
   15fce:	4318      	orrs	r0, r3
   15fd0:	0003      	movs	r3, r0
   15fd2:	4650      	mov	r0, sl
   15fd4:	4082      	lsls	r2, r0
   15fd6:	1e50      	subs	r0, r2, #1
   15fd8:	4182      	sbcs	r2, r0
   15fda:	40e9      	lsrs	r1, r5
   15fdc:	431a      	orrs	r2, r3
   15fde:	1aba      	subs	r2, r7, r2
   15fe0:	1a61      	subs	r1, r4, r1
   15fe2:	4297      	cmp	r7, r2
   15fe4:	41a4      	sbcs	r4, r4
   15fe6:	0017      	movs	r7, r2
   15fe8:	4264      	negs	r4, r4
   15fea:	1b0c      	subs	r4, r1, r4
   15fec:	0223      	lsls	r3, r4, #8
   15fee:	d562      	bpl.n	160b6 <__aeabi_dadd+0x17a>
   15ff0:	0264      	lsls	r4, r4, #9
   15ff2:	0a65      	lsrs	r5, r4, #9
   15ff4:	2d00      	cmp	r5, #0
   15ff6:	d100      	bne.n	15ffa <__aeabi_dadd+0xbe>
   15ff8:	e0df      	b.n	161ba <__aeabi_dadd+0x27e>
   15ffa:	0028      	movs	r0, r5
   15ffc:	f001 fc36 	bl	1786c <__clzsi2>
   16000:	0003      	movs	r3, r0
   16002:	3b08      	subs	r3, #8
   16004:	2b1f      	cmp	r3, #31
   16006:	dd00      	ble.n	1600a <__aeabi_dadd+0xce>
   16008:	e0d2      	b.n	161b0 <__aeabi_dadd+0x274>
   1600a:	2220      	movs	r2, #32
   1600c:	003c      	movs	r4, r7
   1600e:	1ad2      	subs	r2, r2, r3
   16010:	409d      	lsls	r5, r3
   16012:	40d4      	lsrs	r4, r2
   16014:	409f      	lsls	r7, r3
   16016:	4325      	orrs	r5, r4
   16018:	429e      	cmp	r6, r3
   1601a:	dd00      	ble.n	1601e <__aeabi_dadd+0xe2>
   1601c:	e0c4      	b.n	161a8 <__aeabi_dadd+0x26c>
   1601e:	1b9e      	subs	r6, r3, r6
   16020:	1c73      	adds	r3, r6, #1
   16022:	2b1f      	cmp	r3, #31
   16024:	dd00      	ble.n	16028 <__aeabi_dadd+0xec>
   16026:	e0f1      	b.n	1620c <__aeabi_dadd+0x2d0>
   16028:	2220      	movs	r2, #32
   1602a:	0038      	movs	r0, r7
   1602c:	0029      	movs	r1, r5
   1602e:	1ad2      	subs	r2, r2, r3
   16030:	40d8      	lsrs	r0, r3
   16032:	4091      	lsls	r1, r2
   16034:	4097      	lsls	r7, r2
   16036:	002c      	movs	r4, r5
   16038:	4301      	orrs	r1, r0
   1603a:	1e78      	subs	r0, r7, #1
   1603c:	4187      	sbcs	r7, r0
   1603e:	40dc      	lsrs	r4, r3
   16040:	2600      	movs	r6, #0
   16042:	430f      	orrs	r7, r1
   16044:	077b      	lsls	r3, r7, #29
   16046:	d009      	beq.n	1605c <__aeabi_dadd+0x120>
   16048:	230f      	movs	r3, #15
   1604a:	403b      	ands	r3, r7
   1604c:	2b04      	cmp	r3, #4
   1604e:	d005      	beq.n	1605c <__aeabi_dadd+0x120>
   16050:	1d3b      	adds	r3, r7, #4
   16052:	42bb      	cmp	r3, r7
   16054:	41bf      	sbcs	r7, r7
   16056:	427f      	negs	r7, r7
   16058:	19e4      	adds	r4, r4, r7
   1605a:	001f      	movs	r7, r3
   1605c:	0223      	lsls	r3, r4, #8
   1605e:	d52c      	bpl.n	160ba <__aeabi_dadd+0x17e>
   16060:	4b96      	ldr	r3, [pc, #600]	; (162bc <__aeabi_dadd+0x380>)
   16062:	3601      	adds	r6, #1
   16064:	429e      	cmp	r6, r3
   16066:	d100      	bne.n	1606a <__aeabi_dadd+0x12e>
   16068:	e09a      	b.n	161a0 <__aeabi_dadd+0x264>
   1606a:	4645      	mov	r5, r8
   1606c:	4b94      	ldr	r3, [pc, #592]	; (162c0 <__aeabi_dadd+0x384>)
   1606e:	08ff      	lsrs	r7, r7, #3
   16070:	401c      	ands	r4, r3
   16072:	0760      	lsls	r0, r4, #29
   16074:	0576      	lsls	r6, r6, #21
   16076:	0264      	lsls	r4, r4, #9
   16078:	4307      	orrs	r7, r0
   1607a:	0b24      	lsrs	r4, r4, #12
   1607c:	0d76      	lsrs	r6, r6, #21
   1607e:	2100      	movs	r1, #0
   16080:	0324      	lsls	r4, r4, #12
   16082:	0b23      	lsrs	r3, r4, #12
   16084:	0d0c      	lsrs	r4, r1, #20
   16086:	4a8f      	ldr	r2, [pc, #572]	; (162c4 <__aeabi_dadd+0x388>)
   16088:	0524      	lsls	r4, r4, #20
   1608a:	431c      	orrs	r4, r3
   1608c:	4014      	ands	r4, r2
   1608e:	0533      	lsls	r3, r6, #20
   16090:	4323      	orrs	r3, r4
   16092:	005b      	lsls	r3, r3, #1
   16094:	07ed      	lsls	r5, r5, #31
   16096:	085b      	lsrs	r3, r3, #1
   16098:	432b      	orrs	r3, r5
   1609a:	0038      	movs	r0, r7
   1609c:	0019      	movs	r1, r3
   1609e:	bc3c      	pop	{r2, r3, r4, r5}
   160a0:	4690      	mov	r8, r2
   160a2:	4699      	mov	r9, r3
   160a4:	46a2      	mov	sl, r4
   160a6:	46ab      	mov	fp, r5
   160a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   160aa:	4664      	mov	r4, ip
   160ac:	4304      	orrs	r4, r0
   160ae:	d100      	bne.n	160b2 <__aeabi_dadd+0x176>
   160b0:	e211      	b.n	164d6 <__aeabi_dadd+0x59a>
   160b2:	0004      	movs	r4, r0
   160b4:	4667      	mov	r7, ip
   160b6:	077b      	lsls	r3, r7, #29
   160b8:	d1c6      	bne.n	16048 <__aeabi_dadd+0x10c>
   160ba:	4645      	mov	r5, r8
   160bc:	0760      	lsls	r0, r4, #29
   160be:	08ff      	lsrs	r7, r7, #3
   160c0:	4307      	orrs	r7, r0
   160c2:	08e4      	lsrs	r4, r4, #3
   160c4:	4b7d      	ldr	r3, [pc, #500]	; (162bc <__aeabi_dadd+0x380>)
   160c6:	429e      	cmp	r6, r3
   160c8:	d030      	beq.n	1612c <__aeabi_dadd+0x1f0>
   160ca:	0324      	lsls	r4, r4, #12
   160cc:	0576      	lsls	r6, r6, #21
   160ce:	0b24      	lsrs	r4, r4, #12
   160d0:	0d76      	lsrs	r6, r6, #21
   160d2:	e7d4      	b.n	1607e <__aeabi_dadd+0x142>
   160d4:	1a33      	subs	r3, r6, r0
   160d6:	469a      	mov	sl, r3
   160d8:	2b00      	cmp	r3, #0
   160da:	dd78      	ble.n	161ce <__aeabi_dadd+0x292>
   160dc:	2800      	cmp	r0, #0
   160de:	d031      	beq.n	16144 <__aeabi_dadd+0x208>
   160e0:	4876      	ldr	r0, [pc, #472]	; (162bc <__aeabi_dadd+0x380>)
   160e2:	4286      	cmp	r6, r0
   160e4:	d0ae      	beq.n	16044 <__aeabi_dadd+0x108>
   160e6:	2080      	movs	r0, #128	; 0x80
   160e8:	0400      	lsls	r0, r0, #16
   160ea:	4301      	orrs	r1, r0
   160ec:	4653      	mov	r3, sl
   160ee:	2b38      	cmp	r3, #56	; 0x38
   160f0:	dc00      	bgt.n	160f4 <__aeabi_dadd+0x1b8>
   160f2:	e0e9      	b.n	162c8 <__aeabi_dadd+0x38c>
   160f4:	430a      	orrs	r2, r1
   160f6:	1e51      	subs	r1, r2, #1
   160f8:	418a      	sbcs	r2, r1
   160fa:	2100      	movs	r1, #0
   160fc:	19d2      	adds	r2, r2, r7
   160fe:	42ba      	cmp	r2, r7
   16100:	41bf      	sbcs	r7, r7
   16102:	1909      	adds	r1, r1, r4
   16104:	427c      	negs	r4, r7
   16106:	0017      	movs	r7, r2
   16108:	190c      	adds	r4, r1, r4
   1610a:	0223      	lsls	r3, r4, #8
   1610c:	d5d3      	bpl.n	160b6 <__aeabi_dadd+0x17a>
   1610e:	4b6b      	ldr	r3, [pc, #428]	; (162bc <__aeabi_dadd+0x380>)
   16110:	3601      	adds	r6, #1
   16112:	429e      	cmp	r6, r3
   16114:	d100      	bne.n	16118 <__aeabi_dadd+0x1dc>
   16116:	e13a      	b.n	1638e <__aeabi_dadd+0x452>
   16118:	2001      	movs	r0, #1
   1611a:	4b69      	ldr	r3, [pc, #420]	; (162c0 <__aeabi_dadd+0x384>)
   1611c:	401c      	ands	r4, r3
   1611e:	087b      	lsrs	r3, r7, #1
   16120:	4007      	ands	r7, r0
   16122:	431f      	orrs	r7, r3
   16124:	07e0      	lsls	r0, r4, #31
   16126:	4307      	orrs	r7, r0
   16128:	0864      	lsrs	r4, r4, #1
   1612a:	e78b      	b.n	16044 <__aeabi_dadd+0x108>
   1612c:	0023      	movs	r3, r4
   1612e:	433b      	orrs	r3, r7
   16130:	d100      	bne.n	16134 <__aeabi_dadd+0x1f8>
   16132:	e1cb      	b.n	164cc <__aeabi_dadd+0x590>
   16134:	2280      	movs	r2, #128	; 0x80
   16136:	0312      	lsls	r2, r2, #12
   16138:	4314      	orrs	r4, r2
   1613a:	0324      	lsls	r4, r4, #12
   1613c:	0b24      	lsrs	r4, r4, #12
   1613e:	e79e      	b.n	1607e <__aeabi_dadd+0x142>
   16140:	002e      	movs	r6, r5
   16142:	e77f      	b.n	16044 <__aeabi_dadd+0x108>
   16144:	0008      	movs	r0, r1
   16146:	4310      	orrs	r0, r2
   16148:	d100      	bne.n	1614c <__aeabi_dadd+0x210>
   1614a:	e0b4      	b.n	162b6 <__aeabi_dadd+0x37a>
   1614c:	1e58      	subs	r0, r3, #1
   1614e:	2800      	cmp	r0, #0
   16150:	d000      	beq.n	16154 <__aeabi_dadd+0x218>
   16152:	e0de      	b.n	16312 <__aeabi_dadd+0x3d6>
   16154:	18ba      	adds	r2, r7, r2
   16156:	42ba      	cmp	r2, r7
   16158:	419b      	sbcs	r3, r3
   1615a:	1864      	adds	r4, r4, r1
   1615c:	425b      	negs	r3, r3
   1615e:	18e4      	adds	r4, r4, r3
   16160:	0017      	movs	r7, r2
   16162:	2601      	movs	r6, #1
   16164:	0223      	lsls	r3, r4, #8
   16166:	d5a6      	bpl.n	160b6 <__aeabi_dadd+0x17a>
   16168:	2602      	movs	r6, #2
   1616a:	e7d5      	b.n	16118 <__aeabi_dadd+0x1dc>
   1616c:	2d00      	cmp	r5, #0
   1616e:	d16e      	bne.n	1624e <__aeabi_dadd+0x312>
   16170:	1c70      	adds	r0, r6, #1
   16172:	0540      	lsls	r0, r0, #21
   16174:	0d40      	lsrs	r0, r0, #21
   16176:	2801      	cmp	r0, #1
   16178:	dc00      	bgt.n	1617c <__aeabi_dadd+0x240>
   1617a:	e0f9      	b.n	16370 <__aeabi_dadd+0x434>
   1617c:	1ab8      	subs	r0, r7, r2
   1617e:	4684      	mov	ip, r0
   16180:	4287      	cmp	r7, r0
   16182:	4180      	sbcs	r0, r0
   16184:	1ae5      	subs	r5, r4, r3
   16186:	4240      	negs	r0, r0
   16188:	1a2d      	subs	r5, r5, r0
   1618a:	0228      	lsls	r0, r5, #8
   1618c:	d400      	bmi.n	16190 <__aeabi_dadd+0x254>
   1618e:	e089      	b.n	162a4 <__aeabi_dadd+0x368>
   16190:	1bd7      	subs	r7, r2, r7
   16192:	42ba      	cmp	r2, r7
   16194:	4192      	sbcs	r2, r2
   16196:	1b1c      	subs	r4, r3, r4
   16198:	4252      	negs	r2, r2
   1619a:	1aa5      	subs	r5, r4, r2
   1619c:	46d8      	mov	r8, fp
   1619e:	e729      	b.n	15ff4 <__aeabi_dadd+0xb8>
   161a0:	4645      	mov	r5, r8
   161a2:	2400      	movs	r4, #0
   161a4:	2700      	movs	r7, #0
   161a6:	e76a      	b.n	1607e <__aeabi_dadd+0x142>
   161a8:	4c45      	ldr	r4, [pc, #276]	; (162c0 <__aeabi_dadd+0x384>)
   161aa:	1af6      	subs	r6, r6, r3
   161ac:	402c      	ands	r4, r5
   161ae:	e749      	b.n	16044 <__aeabi_dadd+0x108>
   161b0:	003d      	movs	r5, r7
   161b2:	3828      	subs	r0, #40	; 0x28
   161b4:	4085      	lsls	r5, r0
   161b6:	2700      	movs	r7, #0
   161b8:	e72e      	b.n	16018 <__aeabi_dadd+0xdc>
   161ba:	0038      	movs	r0, r7
   161bc:	f001 fb56 	bl	1786c <__clzsi2>
   161c0:	3020      	adds	r0, #32
   161c2:	e71d      	b.n	16000 <__aeabi_dadd+0xc4>
   161c4:	430a      	orrs	r2, r1
   161c6:	1e51      	subs	r1, r2, #1
   161c8:	418a      	sbcs	r2, r1
   161ca:	2100      	movs	r1, #0
   161cc:	e707      	b.n	15fde <__aeabi_dadd+0xa2>
   161ce:	2b00      	cmp	r3, #0
   161d0:	d000      	beq.n	161d4 <__aeabi_dadd+0x298>
   161d2:	e0f3      	b.n	163bc <__aeabi_dadd+0x480>
   161d4:	1c70      	adds	r0, r6, #1
   161d6:	0543      	lsls	r3, r0, #21
   161d8:	0d5b      	lsrs	r3, r3, #21
   161da:	2b01      	cmp	r3, #1
   161dc:	dc00      	bgt.n	161e0 <__aeabi_dadd+0x2a4>
   161de:	e0ad      	b.n	1633c <__aeabi_dadd+0x400>
   161e0:	4b36      	ldr	r3, [pc, #216]	; (162bc <__aeabi_dadd+0x380>)
   161e2:	4298      	cmp	r0, r3
   161e4:	d100      	bne.n	161e8 <__aeabi_dadd+0x2ac>
   161e6:	e0d1      	b.n	1638c <__aeabi_dadd+0x450>
   161e8:	18ba      	adds	r2, r7, r2
   161ea:	42ba      	cmp	r2, r7
   161ec:	41bf      	sbcs	r7, r7
   161ee:	1864      	adds	r4, r4, r1
   161f0:	427f      	negs	r7, r7
   161f2:	19e4      	adds	r4, r4, r7
   161f4:	07e7      	lsls	r7, r4, #31
   161f6:	0852      	lsrs	r2, r2, #1
   161f8:	4317      	orrs	r7, r2
   161fa:	0864      	lsrs	r4, r4, #1
   161fc:	0006      	movs	r6, r0
   161fe:	e721      	b.n	16044 <__aeabi_dadd+0x108>
   16200:	482e      	ldr	r0, [pc, #184]	; (162bc <__aeabi_dadd+0x380>)
   16202:	4285      	cmp	r5, r0
   16204:	d100      	bne.n	16208 <__aeabi_dadd+0x2cc>
   16206:	e093      	b.n	16330 <__aeabi_dadd+0x3f4>
   16208:	001d      	movs	r5, r3
   1620a:	e6d0      	b.n	15fae <__aeabi_dadd+0x72>
   1620c:	0029      	movs	r1, r5
   1620e:	3e1f      	subs	r6, #31
   16210:	40f1      	lsrs	r1, r6
   16212:	2b20      	cmp	r3, #32
   16214:	d100      	bne.n	16218 <__aeabi_dadd+0x2dc>
   16216:	e08d      	b.n	16334 <__aeabi_dadd+0x3f8>
   16218:	2240      	movs	r2, #64	; 0x40
   1621a:	1ad3      	subs	r3, r2, r3
   1621c:	409d      	lsls	r5, r3
   1621e:	432f      	orrs	r7, r5
   16220:	1e7d      	subs	r5, r7, #1
   16222:	41af      	sbcs	r7, r5
   16224:	2400      	movs	r4, #0
   16226:	430f      	orrs	r7, r1
   16228:	2600      	movs	r6, #0
   1622a:	e744      	b.n	160b6 <__aeabi_dadd+0x17a>
   1622c:	002b      	movs	r3, r5
   1622e:	0008      	movs	r0, r1
   16230:	3b20      	subs	r3, #32
   16232:	40d8      	lsrs	r0, r3
   16234:	0003      	movs	r3, r0
   16236:	2d20      	cmp	r5, #32
   16238:	d100      	bne.n	1623c <__aeabi_dadd+0x300>
   1623a:	e07d      	b.n	16338 <__aeabi_dadd+0x3fc>
   1623c:	2040      	movs	r0, #64	; 0x40
   1623e:	1b45      	subs	r5, r0, r5
   16240:	40a9      	lsls	r1, r5
   16242:	430a      	orrs	r2, r1
   16244:	1e51      	subs	r1, r2, #1
   16246:	418a      	sbcs	r2, r1
   16248:	2100      	movs	r1, #0
   1624a:	431a      	orrs	r2, r3
   1624c:	e6c7      	b.n	15fde <__aeabi_dadd+0xa2>
   1624e:	2e00      	cmp	r6, #0
   16250:	d050      	beq.n	162f4 <__aeabi_dadd+0x3b8>
   16252:	4e1a      	ldr	r6, [pc, #104]	; (162bc <__aeabi_dadd+0x380>)
   16254:	42b0      	cmp	r0, r6
   16256:	d057      	beq.n	16308 <__aeabi_dadd+0x3cc>
   16258:	2680      	movs	r6, #128	; 0x80
   1625a:	426b      	negs	r3, r5
   1625c:	4699      	mov	r9, r3
   1625e:	0436      	lsls	r6, r6, #16
   16260:	4334      	orrs	r4, r6
   16262:	464b      	mov	r3, r9
   16264:	2b38      	cmp	r3, #56	; 0x38
   16266:	dd00      	ble.n	1626a <__aeabi_dadd+0x32e>
   16268:	e0d6      	b.n	16418 <__aeabi_dadd+0x4dc>
   1626a:	2b1f      	cmp	r3, #31
   1626c:	dd00      	ble.n	16270 <__aeabi_dadd+0x334>
   1626e:	e135      	b.n	164dc <__aeabi_dadd+0x5a0>
   16270:	2620      	movs	r6, #32
   16272:	1af5      	subs	r5, r6, r3
   16274:	0026      	movs	r6, r4
   16276:	40ae      	lsls	r6, r5
   16278:	46b2      	mov	sl, r6
   1627a:	003e      	movs	r6, r7
   1627c:	40de      	lsrs	r6, r3
   1627e:	46ac      	mov	ip, r5
   16280:	0035      	movs	r5, r6
   16282:	4656      	mov	r6, sl
   16284:	432e      	orrs	r6, r5
   16286:	4665      	mov	r5, ip
   16288:	40af      	lsls	r7, r5
   1628a:	1e7d      	subs	r5, r7, #1
   1628c:	41af      	sbcs	r7, r5
   1628e:	40dc      	lsrs	r4, r3
   16290:	4337      	orrs	r7, r6
   16292:	1bd7      	subs	r7, r2, r7
   16294:	42ba      	cmp	r2, r7
   16296:	4192      	sbcs	r2, r2
   16298:	1b0c      	subs	r4, r1, r4
   1629a:	4252      	negs	r2, r2
   1629c:	1aa4      	subs	r4, r4, r2
   1629e:	0006      	movs	r6, r0
   162a0:	46d8      	mov	r8, fp
   162a2:	e6a3      	b.n	15fec <__aeabi_dadd+0xb0>
   162a4:	4664      	mov	r4, ip
   162a6:	4667      	mov	r7, ip
   162a8:	432c      	orrs	r4, r5
   162aa:	d000      	beq.n	162ae <__aeabi_dadd+0x372>
   162ac:	e6a2      	b.n	15ff4 <__aeabi_dadd+0xb8>
   162ae:	2500      	movs	r5, #0
   162b0:	2600      	movs	r6, #0
   162b2:	2700      	movs	r7, #0
   162b4:	e706      	b.n	160c4 <__aeabi_dadd+0x188>
   162b6:	001e      	movs	r6, r3
   162b8:	e6c4      	b.n	16044 <__aeabi_dadd+0x108>
   162ba:	46c0      	nop			; (mov r8, r8)
   162bc:	000007ff 	.word	0x000007ff
   162c0:	ff7fffff 	.word	0xff7fffff
   162c4:	800fffff 	.word	0x800fffff
   162c8:	2b1f      	cmp	r3, #31
   162ca:	dc63      	bgt.n	16394 <__aeabi_dadd+0x458>
   162cc:	2020      	movs	r0, #32
   162ce:	1ac3      	subs	r3, r0, r3
   162d0:	0008      	movs	r0, r1
   162d2:	4098      	lsls	r0, r3
   162d4:	469c      	mov	ip, r3
   162d6:	4683      	mov	fp, r0
   162d8:	4653      	mov	r3, sl
   162da:	0010      	movs	r0, r2
   162dc:	40d8      	lsrs	r0, r3
   162de:	0003      	movs	r3, r0
   162e0:	4658      	mov	r0, fp
   162e2:	4318      	orrs	r0, r3
   162e4:	4663      	mov	r3, ip
   162e6:	409a      	lsls	r2, r3
   162e8:	1e53      	subs	r3, r2, #1
   162ea:	419a      	sbcs	r2, r3
   162ec:	4653      	mov	r3, sl
   162ee:	4302      	orrs	r2, r0
   162f0:	40d9      	lsrs	r1, r3
   162f2:	e703      	b.n	160fc <__aeabi_dadd+0x1c0>
   162f4:	0026      	movs	r6, r4
   162f6:	433e      	orrs	r6, r7
   162f8:	d006      	beq.n	16308 <__aeabi_dadd+0x3cc>
   162fa:	43eb      	mvns	r3, r5
   162fc:	4699      	mov	r9, r3
   162fe:	2b00      	cmp	r3, #0
   16300:	d0c7      	beq.n	16292 <__aeabi_dadd+0x356>
   16302:	4e94      	ldr	r6, [pc, #592]	; (16554 <__aeabi_dadd+0x618>)
   16304:	42b0      	cmp	r0, r6
   16306:	d1ac      	bne.n	16262 <__aeabi_dadd+0x326>
   16308:	000c      	movs	r4, r1
   1630a:	0017      	movs	r7, r2
   1630c:	0006      	movs	r6, r0
   1630e:	46d8      	mov	r8, fp
   16310:	e698      	b.n	16044 <__aeabi_dadd+0x108>
   16312:	4b90      	ldr	r3, [pc, #576]	; (16554 <__aeabi_dadd+0x618>)
   16314:	459a      	cmp	sl, r3
   16316:	d00b      	beq.n	16330 <__aeabi_dadd+0x3f4>
   16318:	4682      	mov	sl, r0
   1631a:	e6e7      	b.n	160ec <__aeabi_dadd+0x1b0>
   1631c:	2800      	cmp	r0, #0
   1631e:	d000      	beq.n	16322 <__aeabi_dadd+0x3e6>
   16320:	e09e      	b.n	16460 <__aeabi_dadd+0x524>
   16322:	0018      	movs	r0, r3
   16324:	4310      	orrs	r0, r2
   16326:	d100      	bne.n	1632a <__aeabi_dadd+0x3ee>
   16328:	e0e9      	b.n	164fe <__aeabi_dadd+0x5c2>
   1632a:	001c      	movs	r4, r3
   1632c:	0017      	movs	r7, r2
   1632e:	46d8      	mov	r8, fp
   16330:	4e88      	ldr	r6, [pc, #544]	; (16554 <__aeabi_dadd+0x618>)
   16332:	e687      	b.n	16044 <__aeabi_dadd+0x108>
   16334:	2500      	movs	r5, #0
   16336:	e772      	b.n	1621e <__aeabi_dadd+0x2e2>
   16338:	2100      	movs	r1, #0
   1633a:	e782      	b.n	16242 <__aeabi_dadd+0x306>
   1633c:	0023      	movs	r3, r4
   1633e:	433b      	orrs	r3, r7
   16340:	2e00      	cmp	r6, #0
   16342:	d000      	beq.n	16346 <__aeabi_dadd+0x40a>
   16344:	e0ab      	b.n	1649e <__aeabi_dadd+0x562>
   16346:	2b00      	cmp	r3, #0
   16348:	d100      	bne.n	1634c <__aeabi_dadd+0x410>
   1634a:	e0e7      	b.n	1651c <__aeabi_dadd+0x5e0>
   1634c:	000b      	movs	r3, r1
   1634e:	4313      	orrs	r3, r2
   16350:	d100      	bne.n	16354 <__aeabi_dadd+0x418>
   16352:	e677      	b.n	16044 <__aeabi_dadd+0x108>
   16354:	18ba      	adds	r2, r7, r2
   16356:	42ba      	cmp	r2, r7
   16358:	41bf      	sbcs	r7, r7
   1635a:	1864      	adds	r4, r4, r1
   1635c:	427f      	negs	r7, r7
   1635e:	19e4      	adds	r4, r4, r7
   16360:	0223      	lsls	r3, r4, #8
   16362:	d400      	bmi.n	16366 <__aeabi_dadd+0x42a>
   16364:	e0f2      	b.n	1654c <__aeabi_dadd+0x610>
   16366:	4b7c      	ldr	r3, [pc, #496]	; (16558 <__aeabi_dadd+0x61c>)
   16368:	0017      	movs	r7, r2
   1636a:	401c      	ands	r4, r3
   1636c:	0006      	movs	r6, r0
   1636e:	e669      	b.n	16044 <__aeabi_dadd+0x108>
   16370:	0020      	movs	r0, r4
   16372:	4338      	orrs	r0, r7
   16374:	2e00      	cmp	r6, #0
   16376:	d1d1      	bne.n	1631c <__aeabi_dadd+0x3e0>
   16378:	2800      	cmp	r0, #0
   1637a:	d15b      	bne.n	16434 <__aeabi_dadd+0x4f8>
   1637c:	001c      	movs	r4, r3
   1637e:	4314      	orrs	r4, r2
   16380:	d100      	bne.n	16384 <__aeabi_dadd+0x448>
   16382:	e0a8      	b.n	164d6 <__aeabi_dadd+0x59a>
   16384:	001c      	movs	r4, r3
   16386:	0017      	movs	r7, r2
   16388:	46d8      	mov	r8, fp
   1638a:	e65b      	b.n	16044 <__aeabi_dadd+0x108>
   1638c:	0006      	movs	r6, r0
   1638e:	2400      	movs	r4, #0
   16390:	2700      	movs	r7, #0
   16392:	e697      	b.n	160c4 <__aeabi_dadd+0x188>
   16394:	4650      	mov	r0, sl
   16396:	000b      	movs	r3, r1
   16398:	3820      	subs	r0, #32
   1639a:	40c3      	lsrs	r3, r0
   1639c:	4699      	mov	r9, r3
   1639e:	4653      	mov	r3, sl
   163a0:	2b20      	cmp	r3, #32
   163a2:	d100      	bne.n	163a6 <__aeabi_dadd+0x46a>
   163a4:	e095      	b.n	164d2 <__aeabi_dadd+0x596>
   163a6:	2340      	movs	r3, #64	; 0x40
   163a8:	4650      	mov	r0, sl
   163aa:	1a1b      	subs	r3, r3, r0
   163ac:	4099      	lsls	r1, r3
   163ae:	430a      	orrs	r2, r1
   163b0:	1e51      	subs	r1, r2, #1
   163b2:	418a      	sbcs	r2, r1
   163b4:	464b      	mov	r3, r9
   163b6:	2100      	movs	r1, #0
   163b8:	431a      	orrs	r2, r3
   163ba:	e69f      	b.n	160fc <__aeabi_dadd+0x1c0>
   163bc:	2e00      	cmp	r6, #0
   163be:	d130      	bne.n	16422 <__aeabi_dadd+0x4e6>
   163c0:	0026      	movs	r6, r4
   163c2:	433e      	orrs	r6, r7
   163c4:	d067      	beq.n	16496 <__aeabi_dadd+0x55a>
   163c6:	43db      	mvns	r3, r3
   163c8:	469a      	mov	sl, r3
   163ca:	2b00      	cmp	r3, #0
   163cc:	d01c      	beq.n	16408 <__aeabi_dadd+0x4cc>
   163ce:	4e61      	ldr	r6, [pc, #388]	; (16554 <__aeabi_dadd+0x618>)
   163d0:	42b0      	cmp	r0, r6
   163d2:	d060      	beq.n	16496 <__aeabi_dadd+0x55a>
   163d4:	4653      	mov	r3, sl
   163d6:	2b38      	cmp	r3, #56	; 0x38
   163d8:	dd00      	ble.n	163dc <__aeabi_dadd+0x4a0>
   163da:	e096      	b.n	1650a <__aeabi_dadd+0x5ce>
   163dc:	2b1f      	cmp	r3, #31
   163de:	dd00      	ble.n	163e2 <__aeabi_dadd+0x4a6>
   163e0:	e09f      	b.n	16522 <__aeabi_dadd+0x5e6>
   163e2:	2620      	movs	r6, #32
   163e4:	1af3      	subs	r3, r6, r3
   163e6:	0026      	movs	r6, r4
   163e8:	409e      	lsls	r6, r3
   163ea:	469c      	mov	ip, r3
   163ec:	46b3      	mov	fp, r6
   163ee:	4653      	mov	r3, sl
   163f0:	003e      	movs	r6, r7
   163f2:	40de      	lsrs	r6, r3
   163f4:	0033      	movs	r3, r6
   163f6:	465e      	mov	r6, fp
   163f8:	431e      	orrs	r6, r3
   163fa:	4663      	mov	r3, ip
   163fc:	409f      	lsls	r7, r3
   163fe:	1e7b      	subs	r3, r7, #1
   16400:	419f      	sbcs	r7, r3
   16402:	4653      	mov	r3, sl
   16404:	40dc      	lsrs	r4, r3
   16406:	4337      	orrs	r7, r6
   16408:	18bf      	adds	r7, r7, r2
   1640a:	4297      	cmp	r7, r2
   1640c:	4192      	sbcs	r2, r2
   1640e:	1864      	adds	r4, r4, r1
   16410:	4252      	negs	r2, r2
   16412:	18a4      	adds	r4, r4, r2
   16414:	0006      	movs	r6, r0
   16416:	e678      	b.n	1610a <__aeabi_dadd+0x1ce>
   16418:	4327      	orrs	r7, r4
   1641a:	1e7c      	subs	r4, r7, #1
   1641c:	41a7      	sbcs	r7, r4
   1641e:	2400      	movs	r4, #0
   16420:	e737      	b.n	16292 <__aeabi_dadd+0x356>
   16422:	4e4c      	ldr	r6, [pc, #304]	; (16554 <__aeabi_dadd+0x618>)
   16424:	42b0      	cmp	r0, r6
   16426:	d036      	beq.n	16496 <__aeabi_dadd+0x55a>
   16428:	2680      	movs	r6, #128	; 0x80
   1642a:	425b      	negs	r3, r3
   1642c:	0436      	lsls	r6, r6, #16
   1642e:	469a      	mov	sl, r3
   16430:	4334      	orrs	r4, r6
   16432:	e7cf      	b.n	163d4 <__aeabi_dadd+0x498>
   16434:	0018      	movs	r0, r3
   16436:	4310      	orrs	r0, r2
   16438:	d100      	bne.n	1643c <__aeabi_dadd+0x500>
   1643a:	e603      	b.n	16044 <__aeabi_dadd+0x108>
   1643c:	1ab8      	subs	r0, r7, r2
   1643e:	4684      	mov	ip, r0
   16440:	4567      	cmp	r7, ip
   16442:	41ad      	sbcs	r5, r5
   16444:	1ae0      	subs	r0, r4, r3
   16446:	426d      	negs	r5, r5
   16448:	1b40      	subs	r0, r0, r5
   1644a:	0205      	lsls	r5, r0, #8
   1644c:	d400      	bmi.n	16450 <__aeabi_dadd+0x514>
   1644e:	e62c      	b.n	160aa <__aeabi_dadd+0x16e>
   16450:	1bd7      	subs	r7, r2, r7
   16452:	42ba      	cmp	r2, r7
   16454:	4192      	sbcs	r2, r2
   16456:	1b1c      	subs	r4, r3, r4
   16458:	4252      	negs	r2, r2
   1645a:	1aa4      	subs	r4, r4, r2
   1645c:	46d8      	mov	r8, fp
   1645e:	e5f1      	b.n	16044 <__aeabi_dadd+0x108>
   16460:	0018      	movs	r0, r3
   16462:	4310      	orrs	r0, r2
   16464:	d100      	bne.n	16468 <__aeabi_dadd+0x52c>
   16466:	e763      	b.n	16330 <__aeabi_dadd+0x3f4>
   16468:	08f8      	lsrs	r0, r7, #3
   1646a:	0767      	lsls	r7, r4, #29
   1646c:	4307      	orrs	r7, r0
   1646e:	2080      	movs	r0, #128	; 0x80
   16470:	08e4      	lsrs	r4, r4, #3
   16472:	0300      	lsls	r0, r0, #12
   16474:	4204      	tst	r4, r0
   16476:	d008      	beq.n	1648a <__aeabi_dadd+0x54e>
   16478:	08dd      	lsrs	r5, r3, #3
   1647a:	4205      	tst	r5, r0
   1647c:	d105      	bne.n	1648a <__aeabi_dadd+0x54e>
   1647e:	08d2      	lsrs	r2, r2, #3
   16480:	0759      	lsls	r1, r3, #29
   16482:	4311      	orrs	r1, r2
   16484:	000f      	movs	r7, r1
   16486:	002c      	movs	r4, r5
   16488:	46d8      	mov	r8, fp
   1648a:	0f7b      	lsrs	r3, r7, #29
   1648c:	00e4      	lsls	r4, r4, #3
   1648e:	431c      	orrs	r4, r3
   16490:	00ff      	lsls	r7, r7, #3
   16492:	4e30      	ldr	r6, [pc, #192]	; (16554 <__aeabi_dadd+0x618>)
   16494:	e5d6      	b.n	16044 <__aeabi_dadd+0x108>
   16496:	000c      	movs	r4, r1
   16498:	0017      	movs	r7, r2
   1649a:	0006      	movs	r6, r0
   1649c:	e5d2      	b.n	16044 <__aeabi_dadd+0x108>
   1649e:	2b00      	cmp	r3, #0
   164a0:	d038      	beq.n	16514 <__aeabi_dadd+0x5d8>
   164a2:	000b      	movs	r3, r1
   164a4:	4313      	orrs	r3, r2
   164a6:	d100      	bne.n	164aa <__aeabi_dadd+0x56e>
   164a8:	e742      	b.n	16330 <__aeabi_dadd+0x3f4>
   164aa:	08f8      	lsrs	r0, r7, #3
   164ac:	0767      	lsls	r7, r4, #29
   164ae:	4307      	orrs	r7, r0
   164b0:	2080      	movs	r0, #128	; 0x80
   164b2:	08e4      	lsrs	r4, r4, #3
   164b4:	0300      	lsls	r0, r0, #12
   164b6:	4204      	tst	r4, r0
   164b8:	d0e7      	beq.n	1648a <__aeabi_dadd+0x54e>
   164ba:	08cb      	lsrs	r3, r1, #3
   164bc:	4203      	tst	r3, r0
   164be:	d1e4      	bne.n	1648a <__aeabi_dadd+0x54e>
   164c0:	08d2      	lsrs	r2, r2, #3
   164c2:	0749      	lsls	r1, r1, #29
   164c4:	4311      	orrs	r1, r2
   164c6:	000f      	movs	r7, r1
   164c8:	001c      	movs	r4, r3
   164ca:	e7de      	b.n	1648a <__aeabi_dadd+0x54e>
   164cc:	2700      	movs	r7, #0
   164ce:	2400      	movs	r4, #0
   164d0:	e5d5      	b.n	1607e <__aeabi_dadd+0x142>
   164d2:	2100      	movs	r1, #0
   164d4:	e76b      	b.n	163ae <__aeabi_dadd+0x472>
   164d6:	2500      	movs	r5, #0
   164d8:	2700      	movs	r7, #0
   164da:	e5f3      	b.n	160c4 <__aeabi_dadd+0x188>
   164dc:	464e      	mov	r6, r9
   164de:	0025      	movs	r5, r4
   164e0:	3e20      	subs	r6, #32
   164e2:	40f5      	lsrs	r5, r6
   164e4:	464b      	mov	r3, r9
   164e6:	002e      	movs	r6, r5
   164e8:	2b20      	cmp	r3, #32
   164ea:	d02d      	beq.n	16548 <__aeabi_dadd+0x60c>
   164ec:	2540      	movs	r5, #64	; 0x40
   164ee:	1aed      	subs	r5, r5, r3
   164f0:	40ac      	lsls	r4, r5
   164f2:	4327      	orrs	r7, r4
   164f4:	1e7c      	subs	r4, r7, #1
   164f6:	41a7      	sbcs	r7, r4
   164f8:	2400      	movs	r4, #0
   164fa:	4337      	orrs	r7, r6
   164fc:	e6c9      	b.n	16292 <__aeabi_dadd+0x356>
   164fe:	2480      	movs	r4, #128	; 0x80
   16500:	2500      	movs	r5, #0
   16502:	0324      	lsls	r4, r4, #12
   16504:	4e13      	ldr	r6, [pc, #76]	; (16554 <__aeabi_dadd+0x618>)
   16506:	2700      	movs	r7, #0
   16508:	e5dc      	b.n	160c4 <__aeabi_dadd+0x188>
   1650a:	4327      	orrs	r7, r4
   1650c:	1e7c      	subs	r4, r7, #1
   1650e:	41a7      	sbcs	r7, r4
   16510:	2400      	movs	r4, #0
   16512:	e779      	b.n	16408 <__aeabi_dadd+0x4cc>
   16514:	000c      	movs	r4, r1
   16516:	0017      	movs	r7, r2
   16518:	4e0e      	ldr	r6, [pc, #56]	; (16554 <__aeabi_dadd+0x618>)
   1651a:	e593      	b.n	16044 <__aeabi_dadd+0x108>
   1651c:	000c      	movs	r4, r1
   1651e:	0017      	movs	r7, r2
   16520:	e590      	b.n	16044 <__aeabi_dadd+0x108>
   16522:	4656      	mov	r6, sl
   16524:	0023      	movs	r3, r4
   16526:	3e20      	subs	r6, #32
   16528:	40f3      	lsrs	r3, r6
   1652a:	4699      	mov	r9, r3
   1652c:	4653      	mov	r3, sl
   1652e:	2b20      	cmp	r3, #32
   16530:	d00e      	beq.n	16550 <__aeabi_dadd+0x614>
   16532:	2340      	movs	r3, #64	; 0x40
   16534:	4656      	mov	r6, sl
   16536:	1b9b      	subs	r3, r3, r6
   16538:	409c      	lsls	r4, r3
   1653a:	4327      	orrs	r7, r4
   1653c:	1e7c      	subs	r4, r7, #1
   1653e:	41a7      	sbcs	r7, r4
   16540:	464b      	mov	r3, r9
   16542:	2400      	movs	r4, #0
   16544:	431f      	orrs	r7, r3
   16546:	e75f      	b.n	16408 <__aeabi_dadd+0x4cc>
   16548:	2400      	movs	r4, #0
   1654a:	e7d2      	b.n	164f2 <__aeabi_dadd+0x5b6>
   1654c:	0017      	movs	r7, r2
   1654e:	e5b2      	b.n	160b6 <__aeabi_dadd+0x17a>
   16550:	2400      	movs	r4, #0
   16552:	e7f2      	b.n	1653a <__aeabi_dadd+0x5fe>
   16554:	000007ff 	.word	0x000007ff
   16558:	ff7fffff 	.word	0xff7fffff

0001655c <__aeabi_ddiv>:
   1655c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1655e:	4657      	mov	r7, sl
   16560:	4645      	mov	r5, r8
   16562:	46de      	mov	lr, fp
   16564:	464e      	mov	r6, r9
   16566:	b5e0      	push	{r5, r6, r7, lr}
   16568:	004c      	lsls	r4, r1, #1
   1656a:	030e      	lsls	r6, r1, #12
   1656c:	b087      	sub	sp, #28
   1656e:	4683      	mov	fp, r0
   16570:	4692      	mov	sl, r2
   16572:	001d      	movs	r5, r3
   16574:	4680      	mov	r8, r0
   16576:	0b36      	lsrs	r6, r6, #12
   16578:	0d64      	lsrs	r4, r4, #21
   1657a:	0fcf      	lsrs	r7, r1, #31
   1657c:	2c00      	cmp	r4, #0
   1657e:	d04f      	beq.n	16620 <__aeabi_ddiv+0xc4>
   16580:	4b6f      	ldr	r3, [pc, #444]	; (16740 <__aeabi_ddiv+0x1e4>)
   16582:	429c      	cmp	r4, r3
   16584:	d035      	beq.n	165f2 <__aeabi_ddiv+0x96>
   16586:	2380      	movs	r3, #128	; 0x80
   16588:	0f42      	lsrs	r2, r0, #29
   1658a:	041b      	lsls	r3, r3, #16
   1658c:	00f6      	lsls	r6, r6, #3
   1658e:	4313      	orrs	r3, r2
   16590:	4333      	orrs	r3, r6
   16592:	4699      	mov	r9, r3
   16594:	00c3      	lsls	r3, r0, #3
   16596:	4698      	mov	r8, r3
   16598:	4b6a      	ldr	r3, [pc, #424]	; (16744 <__aeabi_ddiv+0x1e8>)
   1659a:	2600      	movs	r6, #0
   1659c:	469c      	mov	ip, r3
   1659e:	2300      	movs	r3, #0
   165a0:	4464      	add	r4, ip
   165a2:	9303      	str	r3, [sp, #12]
   165a4:	032b      	lsls	r3, r5, #12
   165a6:	0b1b      	lsrs	r3, r3, #12
   165a8:	469b      	mov	fp, r3
   165aa:	006b      	lsls	r3, r5, #1
   165ac:	0fed      	lsrs	r5, r5, #31
   165ae:	4650      	mov	r0, sl
   165b0:	0d5b      	lsrs	r3, r3, #21
   165b2:	9501      	str	r5, [sp, #4]
   165b4:	d05e      	beq.n	16674 <__aeabi_ddiv+0x118>
   165b6:	4a62      	ldr	r2, [pc, #392]	; (16740 <__aeabi_ddiv+0x1e4>)
   165b8:	4293      	cmp	r3, r2
   165ba:	d053      	beq.n	16664 <__aeabi_ddiv+0x108>
   165bc:	465a      	mov	r2, fp
   165be:	00d1      	lsls	r1, r2, #3
   165c0:	2280      	movs	r2, #128	; 0x80
   165c2:	0f40      	lsrs	r0, r0, #29
   165c4:	0412      	lsls	r2, r2, #16
   165c6:	4302      	orrs	r2, r0
   165c8:	430a      	orrs	r2, r1
   165ca:	4693      	mov	fp, r2
   165cc:	4652      	mov	r2, sl
   165ce:	00d1      	lsls	r1, r2, #3
   165d0:	4a5c      	ldr	r2, [pc, #368]	; (16744 <__aeabi_ddiv+0x1e8>)
   165d2:	4694      	mov	ip, r2
   165d4:	2200      	movs	r2, #0
   165d6:	4463      	add	r3, ip
   165d8:	0038      	movs	r0, r7
   165da:	4068      	eors	r0, r5
   165dc:	4684      	mov	ip, r0
   165de:	9002      	str	r0, [sp, #8]
   165e0:	1ae4      	subs	r4, r4, r3
   165e2:	4316      	orrs	r6, r2
   165e4:	2e0f      	cmp	r6, #15
   165e6:	d900      	bls.n	165ea <__aeabi_ddiv+0x8e>
   165e8:	e0b4      	b.n	16754 <__aeabi_ddiv+0x1f8>
   165ea:	4b57      	ldr	r3, [pc, #348]	; (16748 <__aeabi_ddiv+0x1ec>)
   165ec:	00b6      	lsls	r6, r6, #2
   165ee:	599b      	ldr	r3, [r3, r6]
   165f0:	469f      	mov	pc, r3
   165f2:	0003      	movs	r3, r0
   165f4:	4333      	orrs	r3, r6
   165f6:	4699      	mov	r9, r3
   165f8:	d16c      	bne.n	166d4 <__aeabi_ddiv+0x178>
   165fa:	2300      	movs	r3, #0
   165fc:	4698      	mov	r8, r3
   165fe:	3302      	adds	r3, #2
   16600:	2608      	movs	r6, #8
   16602:	9303      	str	r3, [sp, #12]
   16604:	e7ce      	b.n	165a4 <__aeabi_ddiv+0x48>
   16606:	46cb      	mov	fp, r9
   16608:	4641      	mov	r1, r8
   1660a:	9a03      	ldr	r2, [sp, #12]
   1660c:	9701      	str	r7, [sp, #4]
   1660e:	2a02      	cmp	r2, #2
   16610:	d165      	bne.n	166de <__aeabi_ddiv+0x182>
   16612:	9b01      	ldr	r3, [sp, #4]
   16614:	4c4a      	ldr	r4, [pc, #296]	; (16740 <__aeabi_ddiv+0x1e4>)
   16616:	469c      	mov	ip, r3
   16618:	2300      	movs	r3, #0
   1661a:	2200      	movs	r2, #0
   1661c:	4698      	mov	r8, r3
   1661e:	e06b      	b.n	166f8 <__aeabi_ddiv+0x19c>
   16620:	0003      	movs	r3, r0
   16622:	4333      	orrs	r3, r6
   16624:	4699      	mov	r9, r3
   16626:	d04e      	beq.n	166c6 <__aeabi_ddiv+0x16a>
   16628:	2e00      	cmp	r6, #0
   1662a:	d100      	bne.n	1662e <__aeabi_ddiv+0xd2>
   1662c:	e1bc      	b.n	169a8 <__aeabi_ddiv+0x44c>
   1662e:	0030      	movs	r0, r6
   16630:	f001 f91c 	bl	1786c <__clzsi2>
   16634:	0003      	movs	r3, r0
   16636:	3b0b      	subs	r3, #11
   16638:	2b1c      	cmp	r3, #28
   1663a:	dd00      	ble.n	1663e <__aeabi_ddiv+0xe2>
   1663c:	e1ac      	b.n	16998 <__aeabi_ddiv+0x43c>
   1663e:	221d      	movs	r2, #29
   16640:	1ad3      	subs	r3, r2, r3
   16642:	465a      	mov	r2, fp
   16644:	0001      	movs	r1, r0
   16646:	40da      	lsrs	r2, r3
   16648:	3908      	subs	r1, #8
   1664a:	408e      	lsls	r6, r1
   1664c:	0013      	movs	r3, r2
   1664e:	4333      	orrs	r3, r6
   16650:	4699      	mov	r9, r3
   16652:	465b      	mov	r3, fp
   16654:	408b      	lsls	r3, r1
   16656:	4698      	mov	r8, r3
   16658:	2300      	movs	r3, #0
   1665a:	4c3c      	ldr	r4, [pc, #240]	; (1674c <__aeabi_ddiv+0x1f0>)
   1665c:	2600      	movs	r6, #0
   1665e:	1a24      	subs	r4, r4, r0
   16660:	9303      	str	r3, [sp, #12]
   16662:	e79f      	b.n	165a4 <__aeabi_ddiv+0x48>
   16664:	4651      	mov	r1, sl
   16666:	465a      	mov	r2, fp
   16668:	4311      	orrs	r1, r2
   1666a:	d129      	bne.n	166c0 <__aeabi_ddiv+0x164>
   1666c:	2200      	movs	r2, #0
   1666e:	4693      	mov	fp, r2
   16670:	3202      	adds	r2, #2
   16672:	e7b1      	b.n	165d8 <__aeabi_ddiv+0x7c>
   16674:	4659      	mov	r1, fp
   16676:	4301      	orrs	r1, r0
   16678:	d01e      	beq.n	166b8 <__aeabi_ddiv+0x15c>
   1667a:	465b      	mov	r3, fp
   1667c:	2b00      	cmp	r3, #0
   1667e:	d100      	bne.n	16682 <__aeabi_ddiv+0x126>
   16680:	e19e      	b.n	169c0 <__aeabi_ddiv+0x464>
   16682:	4658      	mov	r0, fp
   16684:	f001 f8f2 	bl	1786c <__clzsi2>
   16688:	0003      	movs	r3, r0
   1668a:	3b0b      	subs	r3, #11
   1668c:	2b1c      	cmp	r3, #28
   1668e:	dd00      	ble.n	16692 <__aeabi_ddiv+0x136>
   16690:	e18f      	b.n	169b2 <__aeabi_ddiv+0x456>
   16692:	0002      	movs	r2, r0
   16694:	4659      	mov	r1, fp
   16696:	3a08      	subs	r2, #8
   16698:	4091      	lsls	r1, r2
   1669a:	468b      	mov	fp, r1
   1669c:	211d      	movs	r1, #29
   1669e:	1acb      	subs	r3, r1, r3
   166a0:	4651      	mov	r1, sl
   166a2:	40d9      	lsrs	r1, r3
   166a4:	000b      	movs	r3, r1
   166a6:	4659      	mov	r1, fp
   166a8:	430b      	orrs	r3, r1
   166aa:	4651      	mov	r1, sl
   166ac:	469b      	mov	fp, r3
   166ae:	4091      	lsls	r1, r2
   166b0:	4b26      	ldr	r3, [pc, #152]	; (1674c <__aeabi_ddiv+0x1f0>)
   166b2:	2200      	movs	r2, #0
   166b4:	1a1b      	subs	r3, r3, r0
   166b6:	e78f      	b.n	165d8 <__aeabi_ddiv+0x7c>
   166b8:	2300      	movs	r3, #0
   166ba:	2201      	movs	r2, #1
   166bc:	469b      	mov	fp, r3
   166be:	e78b      	b.n	165d8 <__aeabi_ddiv+0x7c>
   166c0:	4651      	mov	r1, sl
   166c2:	2203      	movs	r2, #3
   166c4:	e788      	b.n	165d8 <__aeabi_ddiv+0x7c>
   166c6:	2300      	movs	r3, #0
   166c8:	4698      	mov	r8, r3
   166ca:	3301      	adds	r3, #1
   166cc:	2604      	movs	r6, #4
   166ce:	2400      	movs	r4, #0
   166d0:	9303      	str	r3, [sp, #12]
   166d2:	e767      	b.n	165a4 <__aeabi_ddiv+0x48>
   166d4:	2303      	movs	r3, #3
   166d6:	46b1      	mov	r9, r6
   166d8:	9303      	str	r3, [sp, #12]
   166da:	260c      	movs	r6, #12
   166dc:	e762      	b.n	165a4 <__aeabi_ddiv+0x48>
   166de:	2a03      	cmp	r2, #3
   166e0:	d100      	bne.n	166e4 <__aeabi_ddiv+0x188>
   166e2:	e25c      	b.n	16b9e <__aeabi_ddiv+0x642>
   166e4:	9b01      	ldr	r3, [sp, #4]
   166e6:	2a01      	cmp	r2, #1
   166e8:	d000      	beq.n	166ec <__aeabi_ddiv+0x190>
   166ea:	e1e4      	b.n	16ab6 <__aeabi_ddiv+0x55a>
   166ec:	4013      	ands	r3, r2
   166ee:	469c      	mov	ip, r3
   166f0:	2300      	movs	r3, #0
   166f2:	2400      	movs	r4, #0
   166f4:	2200      	movs	r2, #0
   166f6:	4698      	mov	r8, r3
   166f8:	2100      	movs	r1, #0
   166fa:	0312      	lsls	r2, r2, #12
   166fc:	0b13      	lsrs	r3, r2, #12
   166fe:	0d0a      	lsrs	r2, r1, #20
   16700:	0512      	lsls	r2, r2, #20
   16702:	431a      	orrs	r2, r3
   16704:	0523      	lsls	r3, r4, #20
   16706:	4c12      	ldr	r4, [pc, #72]	; (16750 <__aeabi_ddiv+0x1f4>)
   16708:	4640      	mov	r0, r8
   1670a:	4022      	ands	r2, r4
   1670c:	4313      	orrs	r3, r2
   1670e:	4662      	mov	r2, ip
   16710:	005b      	lsls	r3, r3, #1
   16712:	07d2      	lsls	r2, r2, #31
   16714:	085b      	lsrs	r3, r3, #1
   16716:	4313      	orrs	r3, r2
   16718:	0019      	movs	r1, r3
   1671a:	b007      	add	sp, #28
   1671c:	bc3c      	pop	{r2, r3, r4, r5}
   1671e:	4690      	mov	r8, r2
   16720:	4699      	mov	r9, r3
   16722:	46a2      	mov	sl, r4
   16724:	46ab      	mov	fp, r5
   16726:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16728:	2300      	movs	r3, #0
   1672a:	2280      	movs	r2, #128	; 0x80
   1672c:	469c      	mov	ip, r3
   1672e:	0312      	lsls	r2, r2, #12
   16730:	4698      	mov	r8, r3
   16732:	4c03      	ldr	r4, [pc, #12]	; (16740 <__aeabi_ddiv+0x1e4>)
   16734:	e7e0      	b.n	166f8 <__aeabi_ddiv+0x19c>
   16736:	2300      	movs	r3, #0
   16738:	4c01      	ldr	r4, [pc, #4]	; (16740 <__aeabi_ddiv+0x1e4>)
   1673a:	2200      	movs	r2, #0
   1673c:	4698      	mov	r8, r3
   1673e:	e7db      	b.n	166f8 <__aeabi_ddiv+0x19c>
   16740:	000007ff 	.word	0x000007ff
   16744:	fffffc01 	.word	0xfffffc01
   16748:	0001f828 	.word	0x0001f828
   1674c:	fffffc0d 	.word	0xfffffc0d
   16750:	800fffff 	.word	0x800fffff
   16754:	45d9      	cmp	r9, fp
   16756:	d900      	bls.n	1675a <__aeabi_ddiv+0x1fe>
   16758:	e139      	b.n	169ce <__aeabi_ddiv+0x472>
   1675a:	d100      	bne.n	1675e <__aeabi_ddiv+0x202>
   1675c:	e134      	b.n	169c8 <__aeabi_ddiv+0x46c>
   1675e:	2300      	movs	r3, #0
   16760:	4646      	mov	r6, r8
   16762:	464d      	mov	r5, r9
   16764:	469a      	mov	sl, r3
   16766:	3c01      	subs	r4, #1
   16768:	465b      	mov	r3, fp
   1676a:	0e0a      	lsrs	r2, r1, #24
   1676c:	021b      	lsls	r3, r3, #8
   1676e:	431a      	orrs	r2, r3
   16770:	020b      	lsls	r3, r1, #8
   16772:	0c17      	lsrs	r7, r2, #16
   16774:	9303      	str	r3, [sp, #12]
   16776:	0413      	lsls	r3, r2, #16
   16778:	0c1b      	lsrs	r3, r3, #16
   1677a:	0039      	movs	r1, r7
   1677c:	0028      	movs	r0, r5
   1677e:	4690      	mov	r8, r2
   16780:	9301      	str	r3, [sp, #4]
   16782:	f7fe f9f5 	bl	14b70 <__udivsi3>
   16786:	0002      	movs	r2, r0
   16788:	9b01      	ldr	r3, [sp, #4]
   1678a:	4683      	mov	fp, r0
   1678c:	435a      	muls	r2, r3
   1678e:	0028      	movs	r0, r5
   16790:	0039      	movs	r1, r7
   16792:	4691      	mov	r9, r2
   16794:	f7fe fa72 	bl	14c7c <__aeabi_uidivmod>
   16798:	0c35      	lsrs	r5, r6, #16
   1679a:	0409      	lsls	r1, r1, #16
   1679c:	430d      	orrs	r5, r1
   1679e:	45a9      	cmp	r9, r5
   167a0:	d90d      	bls.n	167be <__aeabi_ddiv+0x262>
   167a2:	465b      	mov	r3, fp
   167a4:	4445      	add	r5, r8
   167a6:	3b01      	subs	r3, #1
   167a8:	45a8      	cmp	r8, r5
   167aa:	d900      	bls.n	167ae <__aeabi_ddiv+0x252>
   167ac:	e13a      	b.n	16a24 <__aeabi_ddiv+0x4c8>
   167ae:	45a9      	cmp	r9, r5
   167b0:	d800      	bhi.n	167b4 <__aeabi_ddiv+0x258>
   167b2:	e137      	b.n	16a24 <__aeabi_ddiv+0x4c8>
   167b4:	2302      	movs	r3, #2
   167b6:	425b      	negs	r3, r3
   167b8:	469c      	mov	ip, r3
   167ba:	4445      	add	r5, r8
   167bc:	44e3      	add	fp, ip
   167be:	464b      	mov	r3, r9
   167c0:	1aeb      	subs	r3, r5, r3
   167c2:	0039      	movs	r1, r7
   167c4:	0018      	movs	r0, r3
   167c6:	9304      	str	r3, [sp, #16]
   167c8:	f7fe f9d2 	bl	14b70 <__udivsi3>
   167cc:	9b01      	ldr	r3, [sp, #4]
   167ce:	0005      	movs	r5, r0
   167d0:	4343      	muls	r3, r0
   167d2:	0039      	movs	r1, r7
   167d4:	9804      	ldr	r0, [sp, #16]
   167d6:	4699      	mov	r9, r3
   167d8:	f7fe fa50 	bl	14c7c <__aeabi_uidivmod>
   167dc:	0433      	lsls	r3, r6, #16
   167de:	0409      	lsls	r1, r1, #16
   167e0:	0c1b      	lsrs	r3, r3, #16
   167e2:	430b      	orrs	r3, r1
   167e4:	4599      	cmp	r9, r3
   167e6:	d909      	bls.n	167fc <__aeabi_ddiv+0x2a0>
   167e8:	4443      	add	r3, r8
   167ea:	1e6a      	subs	r2, r5, #1
   167ec:	4598      	cmp	r8, r3
   167ee:	d900      	bls.n	167f2 <__aeabi_ddiv+0x296>
   167f0:	e11a      	b.n	16a28 <__aeabi_ddiv+0x4cc>
   167f2:	4599      	cmp	r9, r3
   167f4:	d800      	bhi.n	167f8 <__aeabi_ddiv+0x29c>
   167f6:	e117      	b.n	16a28 <__aeabi_ddiv+0x4cc>
   167f8:	3d02      	subs	r5, #2
   167fa:	4443      	add	r3, r8
   167fc:	464a      	mov	r2, r9
   167fe:	1a9b      	subs	r3, r3, r2
   16800:	465a      	mov	r2, fp
   16802:	0412      	lsls	r2, r2, #16
   16804:	432a      	orrs	r2, r5
   16806:	9903      	ldr	r1, [sp, #12]
   16808:	4693      	mov	fp, r2
   1680a:	0c10      	lsrs	r0, r2, #16
   1680c:	0c0a      	lsrs	r2, r1, #16
   1680e:	4691      	mov	r9, r2
   16810:	0409      	lsls	r1, r1, #16
   16812:	465a      	mov	r2, fp
   16814:	0c09      	lsrs	r1, r1, #16
   16816:	464e      	mov	r6, r9
   16818:	000d      	movs	r5, r1
   1681a:	0412      	lsls	r2, r2, #16
   1681c:	0c12      	lsrs	r2, r2, #16
   1681e:	4345      	muls	r5, r0
   16820:	9105      	str	r1, [sp, #20]
   16822:	4351      	muls	r1, r2
   16824:	4372      	muls	r2, r6
   16826:	4370      	muls	r0, r6
   16828:	1952      	adds	r2, r2, r5
   1682a:	0c0e      	lsrs	r6, r1, #16
   1682c:	18b2      	adds	r2, r6, r2
   1682e:	4295      	cmp	r5, r2
   16830:	d903      	bls.n	1683a <__aeabi_ddiv+0x2de>
   16832:	2580      	movs	r5, #128	; 0x80
   16834:	026d      	lsls	r5, r5, #9
   16836:	46ac      	mov	ip, r5
   16838:	4460      	add	r0, ip
   1683a:	0c15      	lsrs	r5, r2, #16
   1683c:	0409      	lsls	r1, r1, #16
   1683e:	0412      	lsls	r2, r2, #16
   16840:	0c09      	lsrs	r1, r1, #16
   16842:	1828      	adds	r0, r5, r0
   16844:	1852      	adds	r2, r2, r1
   16846:	4283      	cmp	r3, r0
   16848:	d200      	bcs.n	1684c <__aeabi_ddiv+0x2f0>
   1684a:	e0ce      	b.n	169ea <__aeabi_ddiv+0x48e>
   1684c:	d100      	bne.n	16850 <__aeabi_ddiv+0x2f4>
   1684e:	e0c8      	b.n	169e2 <__aeabi_ddiv+0x486>
   16850:	1a1d      	subs	r5, r3, r0
   16852:	4653      	mov	r3, sl
   16854:	1a9e      	subs	r6, r3, r2
   16856:	45b2      	cmp	sl, r6
   16858:	4192      	sbcs	r2, r2
   1685a:	4252      	negs	r2, r2
   1685c:	1aab      	subs	r3, r5, r2
   1685e:	469a      	mov	sl, r3
   16860:	4598      	cmp	r8, r3
   16862:	d100      	bne.n	16866 <__aeabi_ddiv+0x30a>
   16864:	e117      	b.n	16a96 <__aeabi_ddiv+0x53a>
   16866:	0039      	movs	r1, r7
   16868:	0018      	movs	r0, r3
   1686a:	f7fe f981 	bl	14b70 <__udivsi3>
   1686e:	9b01      	ldr	r3, [sp, #4]
   16870:	0005      	movs	r5, r0
   16872:	4343      	muls	r3, r0
   16874:	0039      	movs	r1, r7
   16876:	4650      	mov	r0, sl
   16878:	9304      	str	r3, [sp, #16]
   1687a:	f7fe f9ff 	bl	14c7c <__aeabi_uidivmod>
   1687e:	9804      	ldr	r0, [sp, #16]
   16880:	040b      	lsls	r3, r1, #16
   16882:	0c31      	lsrs	r1, r6, #16
   16884:	4319      	orrs	r1, r3
   16886:	4288      	cmp	r0, r1
   16888:	d909      	bls.n	1689e <__aeabi_ddiv+0x342>
   1688a:	4441      	add	r1, r8
   1688c:	1e6b      	subs	r3, r5, #1
   1688e:	4588      	cmp	r8, r1
   16890:	d900      	bls.n	16894 <__aeabi_ddiv+0x338>
   16892:	e107      	b.n	16aa4 <__aeabi_ddiv+0x548>
   16894:	4288      	cmp	r0, r1
   16896:	d800      	bhi.n	1689a <__aeabi_ddiv+0x33e>
   16898:	e104      	b.n	16aa4 <__aeabi_ddiv+0x548>
   1689a:	3d02      	subs	r5, #2
   1689c:	4441      	add	r1, r8
   1689e:	9b04      	ldr	r3, [sp, #16]
   168a0:	1acb      	subs	r3, r1, r3
   168a2:	0018      	movs	r0, r3
   168a4:	0039      	movs	r1, r7
   168a6:	9304      	str	r3, [sp, #16]
   168a8:	f7fe f962 	bl	14b70 <__udivsi3>
   168ac:	9b01      	ldr	r3, [sp, #4]
   168ae:	4682      	mov	sl, r0
   168b0:	4343      	muls	r3, r0
   168b2:	0039      	movs	r1, r7
   168b4:	9804      	ldr	r0, [sp, #16]
   168b6:	9301      	str	r3, [sp, #4]
   168b8:	f7fe f9e0 	bl	14c7c <__aeabi_uidivmod>
   168bc:	9801      	ldr	r0, [sp, #4]
   168be:	040b      	lsls	r3, r1, #16
   168c0:	0431      	lsls	r1, r6, #16
   168c2:	0c09      	lsrs	r1, r1, #16
   168c4:	4319      	orrs	r1, r3
   168c6:	4288      	cmp	r0, r1
   168c8:	d90d      	bls.n	168e6 <__aeabi_ddiv+0x38a>
   168ca:	4653      	mov	r3, sl
   168cc:	4441      	add	r1, r8
   168ce:	3b01      	subs	r3, #1
   168d0:	4588      	cmp	r8, r1
   168d2:	d900      	bls.n	168d6 <__aeabi_ddiv+0x37a>
   168d4:	e0e8      	b.n	16aa8 <__aeabi_ddiv+0x54c>
   168d6:	4288      	cmp	r0, r1
   168d8:	d800      	bhi.n	168dc <__aeabi_ddiv+0x380>
   168da:	e0e5      	b.n	16aa8 <__aeabi_ddiv+0x54c>
   168dc:	2302      	movs	r3, #2
   168de:	425b      	negs	r3, r3
   168e0:	469c      	mov	ip, r3
   168e2:	4441      	add	r1, r8
   168e4:	44e2      	add	sl, ip
   168e6:	9b01      	ldr	r3, [sp, #4]
   168e8:	042d      	lsls	r5, r5, #16
   168ea:	1ace      	subs	r6, r1, r3
   168ec:	4651      	mov	r1, sl
   168ee:	4329      	orrs	r1, r5
   168f0:	9d05      	ldr	r5, [sp, #20]
   168f2:	464f      	mov	r7, r9
   168f4:	002a      	movs	r2, r5
   168f6:	040b      	lsls	r3, r1, #16
   168f8:	0c08      	lsrs	r0, r1, #16
   168fa:	0c1b      	lsrs	r3, r3, #16
   168fc:	435a      	muls	r2, r3
   168fe:	4345      	muls	r5, r0
   16900:	437b      	muls	r3, r7
   16902:	4378      	muls	r0, r7
   16904:	195b      	adds	r3, r3, r5
   16906:	0c17      	lsrs	r7, r2, #16
   16908:	18fb      	adds	r3, r7, r3
   1690a:	429d      	cmp	r5, r3
   1690c:	d903      	bls.n	16916 <__aeabi_ddiv+0x3ba>
   1690e:	2580      	movs	r5, #128	; 0x80
   16910:	026d      	lsls	r5, r5, #9
   16912:	46ac      	mov	ip, r5
   16914:	4460      	add	r0, ip
   16916:	0c1d      	lsrs	r5, r3, #16
   16918:	0412      	lsls	r2, r2, #16
   1691a:	041b      	lsls	r3, r3, #16
   1691c:	0c12      	lsrs	r2, r2, #16
   1691e:	1828      	adds	r0, r5, r0
   16920:	189b      	adds	r3, r3, r2
   16922:	4286      	cmp	r6, r0
   16924:	d200      	bcs.n	16928 <__aeabi_ddiv+0x3cc>
   16926:	e093      	b.n	16a50 <__aeabi_ddiv+0x4f4>
   16928:	d100      	bne.n	1692c <__aeabi_ddiv+0x3d0>
   1692a:	e08e      	b.n	16a4a <__aeabi_ddiv+0x4ee>
   1692c:	2301      	movs	r3, #1
   1692e:	4319      	orrs	r1, r3
   16930:	4ba0      	ldr	r3, [pc, #640]	; (16bb4 <__aeabi_ddiv+0x658>)
   16932:	18e3      	adds	r3, r4, r3
   16934:	2b00      	cmp	r3, #0
   16936:	dc00      	bgt.n	1693a <__aeabi_ddiv+0x3de>
   16938:	e099      	b.n	16a6e <__aeabi_ddiv+0x512>
   1693a:	074a      	lsls	r2, r1, #29
   1693c:	d000      	beq.n	16940 <__aeabi_ddiv+0x3e4>
   1693e:	e09e      	b.n	16a7e <__aeabi_ddiv+0x522>
   16940:	465a      	mov	r2, fp
   16942:	01d2      	lsls	r2, r2, #7
   16944:	d506      	bpl.n	16954 <__aeabi_ddiv+0x3f8>
   16946:	465a      	mov	r2, fp
   16948:	4b9b      	ldr	r3, [pc, #620]	; (16bb8 <__aeabi_ddiv+0x65c>)
   1694a:	401a      	ands	r2, r3
   1694c:	2380      	movs	r3, #128	; 0x80
   1694e:	4693      	mov	fp, r2
   16950:	00db      	lsls	r3, r3, #3
   16952:	18e3      	adds	r3, r4, r3
   16954:	4a99      	ldr	r2, [pc, #612]	; (16bbc <__aeabi_ddiv+0x660>)
   16956:	4293      	cmp	r3, r2
   16958:	dd68      	ble.n	16a2c <__aeabi_ddiv+0x4d0>
   1695a:	2301      	movs	r3, #1
   1695c:	9a02      	ldr	r2, [sp, #8]
   1695e:	4c98      	ldr	r4, [pc, #608]	; (16bc0 <__aeabi_ddiv+0x664>)
   16960:	401a      	ands	r2, r3
   16962:	2300      	movs	r3, #0
   16964:	4694      	mov	ip, r2
   16966:	4698      	mov	r8, r3
   16968:	2200      	movs	r2, #0
   1696a:	e6c5      	b.n	166f8 <__aeabi_ddiv+0x19c>
   1696c:	2280      	movs	r2, #128	; 0x80
   1696e:	464b      	mov	r3, r9
   16970:	0312      	lsls	r2, r2, #12
   16972:	4213      	tst	r3, r2
   16974:	d00a      	beq.n	1698c <__aeabi_ddiv+0x430>
   16976:	465b      	mov	r3, fp
   16978:	4213      	tst	r3, r2
   1697a:	d106      	bne.n	1698a <__aeabi_ddiv+0x42e>
   1697c:	431a      	orrs	r2, r3
   1697e:	0312      	lsls	r2, r2, #12
   16980:	0b12      	lsrs	r2, r2, #12
   16982:	46ac      	mov	ip, r5
   16984:	4688      	mov	r8, r1
   16986:	4c8e      	ldr	r4, [pc, #568]	; (16bc0 <__aeabi_ddiv+0x664>)
   16988:	e6b6      	b.n	166f8 <__aeabi_ddiv+0x19c>
   1698a:	464b      	mov	r3, r9
   1698c:	431a      	orrs	r2, r3
   1698e:	0312      	lsls	r2, r2, #12
   16990:	0b12      	lsrs	r2, r2, #12
   16992:	46bc      	mov	ip, r7
   16994:	4c8a      	ldr	r4, [pc, #552]	; (16bc0 <__aeabi_ddiv+0x664>)
   16996:	e6af      	b.n	166f8 <__aeabi_ddiv+0x19c>
   16998:	0003      	movs	r3, r0
   1699a:	465a      	mov	r2, fp
   1699c:	3b28      	subs	r3, #40	; 0x28
   1699e:	409a      	lsls	r2, r3
   169a0:	2300      	movs	r3, #0
   169a2:	4691      	mov	r9, r2
   169a4:	4698      	mov	r8, r3
   169a6:	e657      	b.n	16658 <__aeabi_ddiv+0xfc>
   169a8:	4658      	mov	r0, fp
   169aa:	f000 ff5f 	bl	1786c <__clzsi2>
   169ae:	3020      	adds	r0, #32
   169b0:	e640      	b.n	16634 <__aeabi_ddiv+0xd8>
   169b2:	0003      	movs	r3, r0
   169b4:	4652      	mov	r2, sl
   169b6:	3b28      	subs	r3, #40	; 0x28
   169b8:	409a      	lsls	r2, r3
   169ba:	2100      	movs	r1, #0
   169bc:	4693      	mov	fp, r2
   169be:	e677      	b.n	166b0 <__aeabi_ddiv+0x154>
   169c0:	f000 ff54 	bl	1786c <__clzsi2>
   169c4:	3020      	adds	r0, #32
   169c6:	e65f      	b.n	16688 <__aeabi_ddiv+0x12c>
   169c8:	4588      	cmp	r8, r1
   169ca:	d200      	bcs.n	169ce <__aeabi_ddiv+0x472>
   169cc:	e6c7      	b.n	1675e <__aeabi_ddiv+0x202>
   169ce:	464b      	mov	r3, r9
   169d0:	07de      	lsls	r6, r3, #31
   169d2:	085d      	lsrs	r5, r3, #1
   169d4:	4643      	mov	r3, r8
   169d6:	085b      	lsrs	r3, r3, #1
   169d8:	431e      	orrs	r6, r3
   169da:	4643      	mov	r3, r8
   169dc:	07db      	lsls	r3, r3, #31
   169de:	469a      	mov	sl, r3
   169e0:	e6c2      	b.n	16768 <__aeabi_ddiv+0x20c>
   169e2:	2500      	movs	r5, #0
   169e4:	4592      	cmp	sl, r2
   169e6:	d300      	bcc.n	169ea <__aeabi_ddiv+0x48e>
   169e8:	e733      	b.n	16852 <__aeabi_ddiv+0x2f6>
   169ea:	9e03      	ldr	r6, [sp, #12]
   169ec:	4659      	mov	r1, fp
   169ee:	46b4      	mov	ip, r6
   169f0:	44e2      	add	sl, ip
   169f2:	45b2      	cmp	sl, r6
   169f4:	41ad      	sbcs	r5, r5
   169f6:	426d      	negs	r5, r5
   169f8:	4445      	add	r5, r8
   169fa:	18eb      	adds	r3, r5, r3
   169fc:	3901      	subs	r1, #1
   169fe:	4598      	cmp	r8, r3
   16a00:	d207      	bcs.n	16a12 <__aeabi_ddiv+0x4b6>
   16a02:	4298      	cmp	r0, r3
   16a04:	d900      	bls.n	16a08 <__aeabi_ddiv+0x4ac>
   16a06:	e07f      	b.n	16b08 <__aeabi_ddiv+0x5ac>
   16a08:	d100      	bne.n	16a0c <__aeabi_ddiv+0x4b0>
   16a0a:	e0bc      	b.n	16b86 <__aeabi_ddiv+0x62a>
   16a0c:	1a1d      	subs	r5, r3, r0
   16a0e:	468b      	mov	fp, r1
   16a10:	e71f      	b.n	16852 <__aeabi_ddiv+0x2f6>
   16a12:	4598      	cmp	r8, r3
   16a14:	d1fa      	bne.n	16a0c <__aeabi_ddiv+0x4b0>
   16a16:	9d03      	ldr	r5, [sp, #12]
   16a18:	4555      	cmp	r5, sl
   16a1a:	d9f2      	bls.n	16a02 <__aeabi_ddiv+0x4a6>
   16a1c:	4643      	mov	r3, r8
   16a1e:	468b      	mov	fp, r1
   16a20:	1a1d      	subs	r5, r3, r0
   16a22:	e716      	b.n	16852 <__aeabi_ddiv+0x2f6>
   16a24:	469b      	mov	fp, r3
   16a26:	e6ca      	b.n	167be <__aeabi_ddiv+0x262>
   16a28:	0015      	movs	r5, r2
   16a2a:	e6e7      	b.n	167fc <__aeabi_ddiv+0x2a0>
   16a2c:	465a      	mov	r2, fp
   16a2e:	08c9      	lsrs	r1, r1, #3
   16a30:	0752      	lsls	r2, r2, #29
   16a32:	430a      	orrs	r2, r1
   16a34:	055b      	lsls	r3, r3, #21
   16a36:	4690      	mov	r8, r2
   16a38:	0d5c      	lsrs	r4, r3, #21
   16a3a:	465a      	mov	r2, fp
   16a3c:	2301      	movs	r3, #1
   16a3e:	9902      	ldr	r1, [sp, #8]
   16a40:	0252      	lsls	r2, r2, #9
   16a42:	4019      	ands	r1, r3
   16a44:	0b12      	lsrs	r2, r2, #12
   16a46:	468c      	mov	ip, r1
   16a48:	e656      	b.n	166f8 <__aeabi_ddiv+0x19c>
   16a4a:	2b00      	cmp	r3, #0
   16a4c:	d100      	bne.n	16a50 <__aeabi_ddiv+0x4f4>
   16a4e:	e76f      	b.n	16930 <__aeabi_ddiv+0x3d4>
   16a50:	4446      	add	r6, r8
   16a52:	1e4a      	subs	r2, r1, #1
   16a54:	45b0      	cmp	r8, r6
   16a56:	d929      	bls.n	16aac <__aeabi_ddiv+0x550>
   16a58:	0011      	movs	r1, r2
   16a5a:	4286      	cmp	r6, r0
   16a5c:	d000      	beq.n	16a60 <__aeabi_ddiv+0x504>
   16a5e:	e765      	b.n	1692c <__aeabi_ddiv+0x3d0>
   16a60:	9a03      	ldr	r2, [sp, #12]
   16a62:	4293      	cmp	r3, r2
   16a64:	d000      	beq.n	16a68 <__aeabi_ddiv+0x50c>
   16a66:	e761      	b.n	1692c <__aeabi_ddiv+0x3d0>
   16a68:	e762      	b.n	16930 <__aeabi_ddiv+0x3d4>
   16a6a:	2101      	movs	r1, #1
   16a6c:	4249      	negs	r1, r1
   16a6e:	2001      	movs	r0, #1
   16a70:	1ac2      	subs	r2, r0, r3
   16a72:	2a38      	cmp	r2, #56	; 0x38
   16a74:	dd21      	ble.n	16aba <__aeabi_ddiv+0x55e>
   16a76:	9b02      	ldr	r3, [sp, #8]
   16a78:	4003      	ands	r3, r0
   16a7a:	469c      	mov	ip, r3
   16a7c:	e638      	b.n	166f0 <__aeabi_ddiv+0x194>
   16a7e:	220f      	movs	r2, #15
   16a80:	400a      	ands	r2, r1
   16a82:	2a04      	cmp	r2, #4
   16a84:	d100      	bne.n	16a88 <__aeabi_ddiv+0x52c>
   16a86:	e75b      	b.n	16940 <__aeabi_ddiv+0x3e4>
   16a88:	000a      	movs	r2, r1
   16a8a:	1d11      	adds	r1, r2, #4
   16a8c:	4291      	cmp	r1, r2
   16a8e:	4192      	sbcs	r2, r2
   16a90:	4252      	negs	r2, r2
   16a92:	4493      	add	fp, r2
   16a94:	e754      	b.n	16940 <__aeabi_ddiv+0x3e4>
   16a96:	4b47      	ldr	r3, [pc, #284]	; (16bb4 <__aeabi_ddiv+0x658>)
   16a98:	18e3      	adds	r3, r4, r3
   16a9a:	2b00      	cmp	r3, #0
   16a9c:	dde5      	ble.n	16a6a <__aeabi_ddiv+0x50e>
   16a9e:	2201      	movs	r2, #1
   16aa0:	4252      	negs	r2, r2
   16aa2:	e7f2      	b.n	16a8a <__aeabi_ddiv+0x52e>
   16aa4:	001d      	movs	r5, r3
   16aa6:	e6fa      	b.n	1689e <__aeabi_ddiv+0x342>
   16aa8:	469a      	mov	sl, r3
   16aaa:	e71c      	b.n	168e6 <__aeabi_ddiv+0x38a>
   16aac:	42b0      	cmp	r0, r6
   16aae:	d839      	bhi.n	16b24 <__aeabi_ddiv+0x5c8>
   16ab0:	d06e      	beq.n	16b90 <__aeabi_ddiv+0x634>
   16ab2:	0011      	movs	r1, r2
   16ab4:	e73a      	b.n	1692c <__aeabi_ddiv+0x3d0>
   16ab6:	9302      	str	r3, [sp, #8]
   16ab8:	e73a      	b.n	16930 <__aeabi_ddiv+0x3d4>
   16aba:	2a1f      	cmp	r2, #31
   16abc:	dc3c      	bgt.n	16b38 <__aeabi_ddiv+0x5dc>
   16abe:	2320      	movs	r3, #32
   16ac0:	1a9b      	subs	r3, r3, r2
   16ac2:	000c      	movs	r4, r1
   16ac4:	4658      	mov	r0, fp
   16ac6:	4099      	lsls	r1, r3
   16ac8:	4098      	lsls	r0, r3
   16aca:	1e4b      	subs	r3, r1, #1
   16acc:	4199      	sbcs	r1, r3
   16ace:	465b      	mov	r3, fp
   16ad0:	40d4      	lsrs	r4, r2
   16ad2:	40d3      	lsrs	r3, r2
   16ad4:	4320      	orrs	r0, r4
   16ad6:	4308      	orrs	r0, r1
   16ad8:	001a      	movs	r2, r3
   16ada:	0743      	lsls	r3, r0, #29
   16adc:	d009      	beq.n	16af2 <__aeabi_ddiv+0x596>
   16ade:	230f      	movs	r3, #15
   16ae0:	4003      	ands	r3, r0
   16ae2:	2b04      	cmp	r3, #4
   16ae4:	d005      	beq.n	16af2 <__aeabi_ddiv+0x596>
   16ae6:	0001      	movs	r1, r0
   16ae8:	1d08      	adds	r0, r1, #4
   16aea:	4288      	cmp	r0, r1
   16aec:	419b      	sbcs	r3, r3
   16aee:	425b      	negs	r3, r3
   16af0:	18d2      	adds	r2, r2, r3
   16af2:	0213      	lsls	r3, r2, #8
   16af4:	d53a      	bpl.n	16b6c <__aeabi_ddiv+0x610>
   16af6:	2301      	movs	r3, #1
   16af8:	9a02      	ldr	r2, [sp, #8]
   16afa:	2401      	movs	r4, #1
   16afc:	401a      	ands	r2, r3
   16afe:	2300      	movs	r3, #0
   16b00:	4694      	mov	ip, r2
   16b02:	4698      	mov	r8, r3
   16b04:	2200      	movs	r2, #0
   16b06:	e5f7      	b.n	166f8 <__aeabi_ddiv+0x19c>
   16b08:	2102      	movs	r1, #2
   16b0a:	4249      	negs	r1, r1
   16b0c:	468c      	mov	ip, r1
   16b0e:	9d03      	ldr	r5, [sp, #12]
   16b10:	44e3      	add	fp, ip
   16b12:	46ac      	mov	ip, r5
   16b14:	44e2      	add	sl, ip
   16b16:	45aa      	cmp	sl, r5
   16b18:	41ad      	sbcs	r5, r5
   16b1a:	426d      	negs	r5, r5
   16b1c:	4445      	add	r5, r8
   16b1e:	18ed      	adds	r5, r5, r3
   16b20:	1a2d      	subs	r5, r5, r0
   16b22:	e696      	b.n	16852 <__aeabi_ddiv+0x2f6>
   16b24:	1e8a      	subs	r2, r1, #2
   16b26:	9903      	ldr	r1, [sp, #12]
   16b28:	004d      	lsls	r5, r1, #1
   16b2a:	428d      	cmp	r5, r1
   16b2c:	4189      	sbcs	r1, r1
   16b2e:	4249      	negs	r1, r1
   16b30:	4441      	add	r1, r8
   16b32:	1876      	adds	r6, r6, r1
   16b34:	9503      	str	r5, [sp, #12]
   16b36:	e78f      	b.n	16a58 <__aeabi_ddiv+0x4fc>
   16b38:	201f      	movs	r0, #31
   16b3a:	4240      	negs	r0, r0
   16b3c:	1ac3      	subs	r3, r0, r3
   16b3e:	4658      	mov	r0, fp
   16b40:	40d8      	lsrs	r0, r3
   16b42:	0003      	movs	r3, r0
   16b44:	2a20      	cmp	r2, #32
   16b46:	d028      	beq.n	16b9a <__aeabi_ddiv+0x63e>
   16b48:	2040      	movs	r0, #64	; 0x40
   16b4a:	465d      	mov	r5, fp
   16b4c:	1a82      	subs	r2, r0, r2
   16b4e:	4095      	lsls	r5, r2
   16b50:	4329      	orrs	r1, r5
   16b52:	1e4a      	subs	r2, r1, #1
   16b54:	4191      	sbcs	r1, r2
   16b56:	4319      	orrs	r1, r3
   16b58:	2307      	movs	r3, #7
   16b5a:	2200      	movs	r2, #0
   16b5c:	400b      	ands	r3, r1
   16b5e:	d009      	beq.n	16b74 <__aeabi_ddiv+0x618>
   16b60:	230f      	movs	r3, #15
   16b62:	2200      	movs	r2, #0
   16b64:	400b      	ands	r3, r1
   16b66:	0008      	movs	r0, r1
   16b68:	2b04      	cmp	r3, #4
   16b6a:	d1bd      	bne.n	16ae8 <__aeabi_ddiv+0x58c>
   16b6c:	0001      	movs	r1, r0
   16b6e:	0753      	lsls	r3, r2, #29
   16b70:	0252      	lsls	r2, r2, #9
   16b72:	0b12      	lsrs	r2, r2, #12
   16b74:	08c9      	lsrs	r1, r1, #3
   16b76:	4319      	orrs	r1, r3
   16b78:	2301      	movs	r3, #1
   16b7a:	4688      	mov	r8, r1
   16b7c:	9902      	ldr	r1, [sp, #8]
   16b7e:	2400      	movs	r4, #0
   16b80:	4019      	ands	r1, r3
   16b82:	468c      	mov	ip, r1
   16b84:	e5b8      	b.n	166f8 <__aeabi_ddiv+0x19c>
   16b86:	4552      	cmp	r2, sl
   16b88:	d8be      	bhi.n	16b08 <__aeabi_ddiv+0x5ac>
   16b8a:	468b      	mov	fp, r1
   16b8c:	2500      	movs	r5, #0
   16b8e:	e660      	b.n	16852 <__aeabi_ddiv+0x2f6>
   16b90:	9d03      	ldr	r5, [sp, #12]
   16b92:	429d      	cmp	r5, r3
   16b94:	d3c6      	bcc.n	16b24 <__aeabi_ddiv+0x5c8>
   16b96:	0011      	movs	r1, r2
   16b98:	e762      	b.n	16a60 <__aeabi_ddiv+0x504>
   16b9a:	2500      	movs	r5, #0
   16b9c:	e7d8      	b.n	16b50 <__aeabi_ddiv+0x5f4>
   16b9e:	2280      	movs	r2, #128	; 0x80
   16ba0:	465b      	mov	r3, fp
   16ba2:	0312      	lsls	r2, r2, #12
   16ba4:	431a      	orrs	r2, r3
   16ba6:	9b01      	ldr	r3, [sp, #4]
   16ba8:	0312      	lsls	r2, r2, #12
   16baa:	0b12      	lsrs	r2, r2, #12
   16bac:	469c      	mov	ip, r3
   16bae:	4688      	mov	r8, r1
   16bb0:	4c03      	ldr	r4, [pc, #12]	; (16bc0 <__aeabi_ddiv+0x664>)
   16bb2:	e5a1      	b.n	166f8 <__aeabi_ddiv+0x19c>
   16bb4:	000003ff 	.word	0x000003ff
   16bb8:	feffffff 	.word	0xfeffffff
   16bbc:	000007fe 	.word	0x000007fe
   16bc0:	000007ff 	.word	0x000007ff

00016bc4 <__aeabi_dmul>:
   16bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bc6:	4657      	mov	r7, sl
   16bc8:	4645      	mov	r5, r8
   16bca:	46de      	mov	lr, fp
   16bcc:	464e      	mov	r6, r9
   16bce:	b5e0      	push	{r5, r6, r7, lr}
   16bd0:	030c      	lsls	r4, r1, #12
   16bd2:	4698      	mov	r8, r3
   16bd4:	004e      	lsls	r6, r1, #1
   16bd6:	0b23      	lsrs	r3, r4, #12
   16bd8:	b087      	sub	sp, #28
   16bda:	0007      	movs	r7, r0
   16bdc:	4692      	mov	sl, r2
   16bde:	469b      	mov	fp, r3
   16be0:	0d76      	lsrs	r6, r6, #21
   16be2:	0fcd      	lsrs	r5, r1, #31
   16be4:	2e00      	cmp	r6, #0
   16be6:	d06b      	beq.n	16cc0 <__aeabi_dmul+0xfc>
   16be8:	4b6d      	ldr	r3, [pc, #436]	; (16da0 <__aeabi_dmul+0x1dc>)
   16bea:	429e      	cmp	r6, r3
   16bec:	d035      	beq.n	16c5a <__aeabi_dmul+0x96>
   16bee:	2480      	movs	r4, #128	; 0x80
   16bf0:	465b      	mov	r3, fp
   16bf2:	0f42      	lsrs	r2, r0, #29
   16bf4:	0424      	lsls	r4, r4, #16
   16bf6:	00db      	lsls	r3, r3, #3
   16bf8:	4314      	orrs	r4, r2
   16bfa:	431c      	orrs	r4, r3
   16bfc:	00c3      	lsls	r3, r0, #3
   16bfe:	4699      	mov	r9, r3
   16c00:	4b68      	ldr	r3, [pc, #416]	; (16da4 <__aeabi_dmul+0x1e0>)
   16c02:	46a3      	mov	fp, r4
   16c04:	469c      	mov	ip, r3
   16c06:	2300      	movs	r3, #0
   16c08:	2700      	movs	r7, #0
   16c0a:	4466      	add	r6, ip
   16c0c:	9302      	str	r3, [sp, #8]
   16c0e:	4643      	mov	r3, r8
   16c10:	031c      	lsls	r4, r3, #12
   16c12:	005a      	lsls	r2, r3, #1
   16c14:	0fdb      	lsrs	r3, r3, #31
   16c16:	4650      	mov	r0, sl
   16c18:	0b24      	lsrs	r4, r4, #12
   16c1a:	0d52      	lsrs	r2, r2, #21
   16c1c:	4698      	mov	r8, r3
   16c1e:	d100      	bne.n	16c22 <__aeabi_dmul+0x5e>
   16c20:	e076      	b.n	16d10 <__aeabi_dmul+0x14c>
   16c22:	4b5f      	ldr	r3, [pc, #380]	; (16da0 <__aeabi_dmul+0x1dc>)
   16c24:	429a      	cmp	r2, r3
   16c26:	d06d      	beq.n	16d04 <__aeabi_dmul+0x140>
   16c28:	2380      	movs	r3, #128	; 0x80
   16c2a:	0f41      	lsrs	r1, r0, #29
   16c2c:	041b      	lsls	r3, r3, #16
   16c2e:	430b      	orrs	r3, r1
   16c30:	495c      	ldr	r1, [pc, #368]	; (16da4 <__aeabi_dmul+0x1e0>)
   16c32:	00e4      	lsls	r4, r4, #3
   16c34:	468c      	mov	ip, r1
   16c36:	431c      	orrs	r4, r3
   16c38:	00c3      	lsls	r3, r0, #3
   16c3a:	2000      	movs	r0, #0
   16c3c:	4462      	add	r2, ip
   16c3e:	4641      	mov	r1, r8
   16c40:	18b6      	adds	r6, r6, r2
   16c42:	4069      	eors	r1, r5
   16c44:	1c72      	adds	r2, r6, #1
   16c46:	9101      	str	r1, [sp, #4]
   16c48:	4694      	mov	ip, r2
   16c4a:	4307      	orrs	r7, r0
   16c4c:	2f0f      	cmp	r7, #15
   16c4e:	d900      	bls.n	16c52 <__aeabi_dmul+0x8e>
   16c50:	e0b0      	b.n	16db4 <__aeabi_dmul+0x1f0>
   16c52:	4a55      	ldr	r2, [pc, #340]	; (16da8 <__aeabi_dmul+0x1e4>)
   16c54:	00bf      	lsls	r7, r7, #2
   16c56:	59d2      	ldr	r2, [r2, r7]
   16c58:	4697      	mov	pc, r2
   16c5a:	465b      	mov	r3, fp
   16c5c:	4303      	orrs	r3, r0
   16c5e:	4699      	mov	r9, r3
   16c60:	d000      	beq.n	16c64 <__aeabi_dmul+0xa0>
   16c62:	e087      	b.n	16d74 <__aeabi_dmul+0x1b0>
   16c64:	2300      	movs	r3, #0
   16c66:	469b      	mov	fp, r3
   16c68:	3302      	adds	r3, #2
   16c6a:	2708      	movs	r7, #8
   16c6c:	9302      	str	r3, [sp, #8]
   16c6e:	e7ce      	b.n	16c0e <__aeabi_dmul+0x4a>
   16c70:	4642      	mov	r2, r8
   16c72:	9201      	str	r2, [sp, #4]
   16c74:	2802      	cmp	r0, #2
   16c76:	d067      	beq.n	16d48 <__aeabi_dmul+0x184>
   16c78:	2803      	cmp	r0, #3
   16c7a:	d100      	bne.n	16c7e <__aeabi_dmul+0xba>
   16c7c:	e20e      	b.n	1709c <__aeabi_dmul+0x4d8>
   16c7e:	2801      	cmp	r0, #1
   16c80:	d000      	beq.n	16c84 <__aeabi_dmul+0xc0>
   16c82:	e162      	b.n	16f4a <__aeabi_dmul+0x386>
   16c84:	2300      	movs	r3, #0
   16c86:	2400      	movs	r4, #0
   16c88:	2200      	movs	r2, #0
   16c8a:	4699      	mov	r9, r3
   16c8c:	9901      	ldr	r1, [sp, #4]
   16c8e:	4001      	ands	r1, r0
   16c90:	b2cd      	uxtb	r5, r1
   16c92:	2100      	movs	r1, #0
   16c94:	0312      	lsls	r2, r2, #12
   16c96:	0d0b      	lsrs	r3, r1, #20
   16c98:	0b12      	lsrs	r2, r2, #12
   16c9a:	051b      	lsls	r3, r3, #20
   16c9c:	4313      	orrs	r3, r2
   16c9e:	4a43      	ldr	r2, [pc, #268]	; (16dac <__aeabi_dmul+0x1e8>)
   16ca0:	0524      	lsls	r4, r4, #20
   16ca2:	4013      	ands	r3, r2
   16ca4:	431c      	orrs	r4, r3
   16ca6:	0064      	lsls	r4, r4, #1
   16ca8:	07ed      	lsls	r5, r5, #31
   16caa:	0864      	lsrs	r4, r4, #1
   16cac:	432c      	orrs	r4, r5
   16cae:	4648      	mov	r0, r9
   16cb0:	0021      	movs	r1, r4
   16cb2:	b007      	add	sp, #28
   16cb4:	bc3c      	pop	{r2, r3, r4, r5}
   16cb6:	4690      	mov	r8, r2
   16cb8:	4699      	mov	r9, r3
   16cba:	46a2      	mov	sl, r4
   16cbc:	46ab      	mov	fp, r5
   16cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16cc0:	4303      	orrs	r3, r0
   16cc2:	4699      	mov	r9, r3
   16cc4:	d04f      	beq.n	16d66 <__aeabi_dmul+0x1a2>
   16cc6:	465b      	mov	r3, fp
   16cc8:	2b00      	cmp	r3, #0
   16cca:	d100      	bne.n	16cce <__aeabi_dmul+0x10a>
   16ccc:	e189      	b.n	16fe2 <__aeabi_dmul+0x41e>
   16cce:	4658      	mov	r0, fp
   16cd0:	f000 fdcc 	bl	1786c <__clzsi2>
   16cd4:	0003      	movs	r3, r0
   16cd6:	3b0b      	subs	r3, #11
   16cd8:	2b1c      	cmp	r3, #28
   16cda:	dd00      	ble.n	16cde <__aeabi_dmul+0x11a>
   16cdc:	e17a      	b.n	16fd4 <__aeabi_dmul+0x410>
   16cde:	221d      	movs	r2, #29
   16ce0:	1ad3      	subs	r3, r2, r3
   16ce2:	003a      	movs	r2, r7
   16ce4:	0001      	movs	r1, r0
   16ce6:	465c      	mov	r4, fp
   16ce8:	40da      	lsrs	r2, r3
   16cea:	3908      	subs	r1, #8
   16cec:	408c      	lsls	r4, r1
   16cee:	0013      	movs	r3, r2
   16cf0:	408f      	lsls	r7, r1
   16cf2:	4323      	orrs	r3, r4
   16cf4:	469b      	mov	fp, r3
   16cf6:	46b9      	mov	r9, r7
   16cf8:	2300      	movs	r3, #0
   16cfa:	4e2d      	ldr	r6, [pc, #180]	; (16db0 <__aeabi_dmul+0x1ec>)
   16cfc:	2700      	movs	r7, #0
   16cfe:	1a36      	subs	r6, r6, r0
   16d00:	9302      	str	r3, [sp, #8]
   16d02:	e784      	b.n	16c0e <__aeabi_dmul+0x4a>
   16d04:	4653      	mov	r3, sl
   16d06:	4323      	orrs	r3, r4
   16d08:	d12a      	bne.n	16d60 <__aeabi_dmul+0x19c>
   16d0a:	2400      	movs	r4, #0
   16d0c:	2002      	movs	r0, #2
   16d0e:	e796      	b.n	16c3e <__aeabi_dmul+0x7a>
   16d10:	4653      	mov	r3, sl
   16d12:	4323      	orrs	r3, r4
   16d14:	d020      	beq.n	16d58 <__aeabi_dmul+0x194>
   16d16:	2c00      	cmp	r4, #0
   16d18:	d100      	bne.n	16d1c <__aeabi_dmul+0x158>
   16d1a:	e157      	b.n	16fcc <__aeabi_dmul+0x408>
   16d1c:	0020      	movs	r0, r4
   16d1e:	f000 fda5 	bl	1786c <__clzsi2>
   16d22:	0003      	movs	r3, r0
   16d24:	3b0b      	subs	r3, #11
   16d26:	2b1c      	cmp	r3, #28
   16d28:	dd00      	ble.n	16d2c <__aeabi_dmul+0x168>
   16d2a:	e149      	b.n	16fc0 <__aeabi_dmul+0x3fc>
   16d2c:	211d      	movs	r1, #29
   16d2e:	1acb      	subs	r3, r1, r3
   16d30:	4651      	mov	r1, sl
   16d32:	0002      	movs	r2, r0
   16d34:	40d9      	lsrs	r1, r3
   16d36:	4653      	mov	r3, sl
   16d38:	3a08      	subs	r2, #8
   16d3a:	4094      	lsls	r4, r2
   16d3c:	4093      	lsls	r3, r2
   16d3e:	430c      	orrs	r4, r1
   16d40:	4a1b      	ldr	r2, [pc, #108]	; (16db0 <__aeabi_dmul+0x1ec>)
   16d42:	1a12      	subs	r2, r2, r0
   16d44:	2000      	movs	r0, #0
   16d46:	e77a      	b.n	16c3e <__aeabi_dmul+0x7a>
   16d48:	2501      	movs	r5, #1
   16d4a:	9b01      	ldr	r3, [sp, #4]
   16d4c:	4c14      	ldr	r4, [pc, #80]	; (16da0 <__aeabi_dmul+0x1dc>)
   16d4e:	401d      	ands	r5, r3
   16d50:	2300      	movs	r3, #0
   16d52:	2200      	movs	r2, #0
   16d54:	4699      	mov	r9, r3
   16d56:	e79c      	b.n	16c92 <__aeabi_dmul+0xce>
   16d58:	2400      	movs	r4, #0
   16d5a:	2200      	movs	r2, #0
   16d5c:	2001      	movs	r0, #1
   16d5e:	e76e      	b.n	16c3e <__aeabi_dmul+0x7a>
   16d60:	4653      	mov	r3, sl
   16d62:	2003      	movs	r0, #3
   16d64:	e76b      	b.n	16c3e <__aeabi_dmul+0x7a>
   16d66:	2300      	movs	r3, #0
   16d68:	469b      	mov	fp, r3
   16d6a:	3301      	adds	r3, #1
   16d6c:	2704      	movs	r7, #4
   16d6e:	2600      	movs	r6, #0
   16d70:	9302      	str	r3, [sp, #8]
   16d72:	e74c      	b.n	16c0e <__aeabi_dmul+0x4a>
   16d74:	2303      	movs	r3, #3
   16d76:	4681      	mov	r9, r0
   16d78:	270c      	movs	r7, #12
   16d7a:	9302      	str	r3, [sp, #8]
   16d7c:	e747      	b.n	16c0e <__aeabi_dmul+0x4a>
   16d7e:	2280      	movs	r2, #128	; 0x80
   16d80:	2300      	movs	r3, #0
   16d82:	2500      	movs	r5, #0
   16d84:	0312      	lsls	r2, r2, #12
   16d86:	4699      	mov	r9, r3
   16d88:	4c05      	ldr	r4, [pc, #20]	; (16da0 <__aeabi_dmul+0x1dc>)
   16d8a:	e782      	b.n	16c92 <__aeabi_dmul+0xce>
   16d8c:	465c      	mov	r4, fp
   16d8e:	464b      	mov	r3, r9
   16d90:	9802      	ldr	r0, [sp, #8]
   16d92:	e76f      	b.n	16c74 <__aeabi_dmul+0xb0>
   16d94:	465c      	mov	r4, fp
   16d96:	464b      	mov	r3, r9
   16d98:	9501      	str	r5, [sp, #4]
   16d9a:	9802      	ldr	r0, [sp, #8]
   16d9c:	e76a      	b.n	16c74 <__aeabi_dmul+0xb0>
   16d9e:	46c0      	nop			; (mov r8, r8)
   16da0:	000007ff 	.word	0x000007ff
   16da4:	fffffc01 	.word	0xfffffc01
   16da8:	0001f868 	.word	0x0001f868
   16dac:	800fffff 	.word	0x800fffff
   16db0:	fffffc0d 	.word	0xfffffc0d
   16db4:	464a      	mov	r2, r9
   16db6:	4649      	mov	r1, r9
   16db8:	0c17      	lsrs	r7, r2, #16
   16dba:	0c1a      	lsrs	r2, r3, #16
   16dbc:	041b      	lsls	r3, r3, #16
   16dbe:	0c1b      	lsrs	r3, r3, #16
   16dc0:	0408      	lsls	r0, r1, #16
   16dc2:	0019      	movs	r1, r3
   16dc4:	0c00      	lsrs	r0, r0, #16
   16dc6:	4341      	muls	r1, r0
   16dc8:	0015      	movs	r5, r2
   16dca:	4688      	mov	r8, r1
   16dcc:	0019      	movs	r1, r3
   16dce:	437d      	muls	r5, r7
   16dd0:	4379      	muls	r1, r7
   16dd2:	9503      	str	r5, [sp, #12]
   16dd4:	4689      	mov	r9, r1
   16dd6:	0029      	movs	r1, r5
   16dd8:	0015      	movs	r5, r2
   16dda:	4345      	muls	r5, r0
   16ddc:	444d      	add	r5, r9
   16dde:	9502      	str	r5, [sp, #8]
   16de0:	4645      	mov	r5, r8
   16de2:	0c2d      	lsrs	r5, r5, #16
   16de4:	46aa      	mov	sl, r5
   16de6:	9d02      	ldr	r5, [sp, #8]
   16de8:	4455      	add	r5, sl
   16dea:	45a9      	cmp	r9, r5
   16dec:	d906      	bls.n	16dfc <__aeabi_dmul+0x238>
   16dee:	468a      	mov	sl, r1
   16df0:	2180      	movs	r1, #128	; 0x80
   16df2:	0249      	lsls	r1, r1, #9
   16df4:	4689      	mov	r9, r1
   16df6:	44ca      	add	sl, r9
   16df8:	4651      	mov	r1, sl
   16dfa:	9103      	str	r1, [sp, #12]
   16dfc:	0c29      	lsrs	r1, r5, #16
   16dfe:	9104      	str	r1, [sp, #16]
   16e00:	4641      	mov	r1, r8
   16e02:	0409      	lsls	r1, r1, #16
   16e04:	042d      	lsls	r5, r5, #16
   16e06:	0c09      	lsrs	r1, r1, #16
   16e08:	4688      	mov	r8, r1
   16e0a:	0029      	movs	r1, r5
   16e0c:	0c25      	lsrs	r5, r4, #16
   16e0e:	0424      	lsls	r4, r4, #16
   16e10:	4441      	add	r1, r8
   16e12:	0c24      	lsrs	r4, r4, #16
   16e14:	9105      	str	r1, [sp, #20]
   16e16:	0021      	movs	r1, r4
   16e18:	4341      	muls	r1, r0
   16e1a:	4688      	mov	r8, r1
   16e1c:	0021      	movs	r1, r4
   16e1e:	4379      	muls	r1, r7
   16e20:	468a      	mov	sl, r1
   16e22:	4368      	muls	r0, r5
   16e24:	4641      	mov	r1, r8
   16e26:	4450      	add	r0, sl
   16e28:	4681      	mov	r9, r0
   16e2a:	0c08      	lsrs	r0, r1, #16
   16e2c:	4448      	add	r0, r9
   16e2e:	436f      	muls	r7, r5
   16e30:	4582      	cmp	sl, r0
   16e32:	d903      	bls.n	16e3c <__aeabi_dmul+0x278>
   16e34:	2180      	movs	r1, #128	; 0x80
   16e36:	0249      	lsls	r1, r1, #9
   16e38:	4689      	mov	r9, r1
   16e3a:	444f      	add	r7, r9
   16e3c:	0c01      	lsrs	r1, r0, #16
   16e3e:	4689      	mov	r9, r1
   16e40:	0039      	movs	r1, r7
   16e42:	4449      	add	r1, r9
   16e44:	9102      	str	r1, [sp, #8]
   16e46:	4641      	mov	r1, r8
   16e48:	040f      	lsls	r7, r1, #16
   16e4a:	9904      	ldr	r1, [sp, #16]
   16e4c:	0c3f      	lsrs	r7, r7, #16
   16e4e:	4688      	mov	r8, r1
   16e50:	0400      	lsls	r0, r0, #16
   16e52:	19c0      	adds	r0, r0, r7
   16e54:	4480      	add	r8, r0
   16e56:	4641      	mov	r1, r8
   16e58:	9104      	str	r1, [sp, #16]
   16e5a:	4659      	mov	r1, fp
   16e5c:	0c0f      	lsrs	r7, r1, #16
   16e5e:	0409      	lsls	r1, r1, #16
   16e60:	0c09      	lsrs	r1, r1, #16
   16e62:	4688      	mov	r8, r1
   16e64:	4359      	muls	r1, r3
   16e66:	468a      	mov	sl, r1
   16e68:	0039      	movs	r1, r7
   16e6a:	4351      	muls	r1, r2
   16e6c:	4689      	mov	r9, r1
   16e6e:	4641      	mov	r1, r8
   16e70:	434a      	muls	r2, r1
   16e72:	4651      	mov	r1, sl
   16e74:	0c09      	lsrs	r1, r1, #16
   16e76:	468b      	mov	fp, r1
   16e78:	437b      	muls	r3, r7
   16e7a:	18d2      	adds	r2, r2, r3
   16e7c:	445a      	add	r2, fp
   16e7e:	4293      	cmp	r3, r2
   16e80:	d903      	bls.n	16e8a <__aeabi_dmul+0x2c6>
   16e82:	2380      	movs	r3, #128	; 0x80
   16e84:	025b      	lsls	r3, r3, #9
   16e86:	469b      	mov	fp, r3
   16e88:	44d9      	add	r9, fp
   16e8a:	4651      	mov	r1, sl
   16e8c:	0409      	lsls	r1, r1, #16
   16e8e:	0c09      	lsrs	r1, r1, #16
   16e90:	468a      	mov	sl, r1
   16e92:	4641      	mov	r1, r8
   16e94:	4361      	muls	r1, r4
   16e96:	437c      	muls	r4, r7
   16e98:	0c13      	lsrs	r3, r2, #16
   16e9a:	0412      	lsls	r2, r2, #16
   16e9c:	444b      	add	r3, r9
   16e9e:	4452      	add	r2, sl
   16ea0:	46a1      	mov	r9, r4
   16ea2:	468a      	mov	sl, r1
   16ea4:	003c      	movs	r4, r7
   16ea6:	4641      	mov	r1, r8
   16ea8:	436c      	muls	r4, r5
   16eaa:	434d      	muls	r5, r1
   16eac:	4651      	mov	r1, sl
   16eae:	444d      	add	r5, r9
   16eb0:	0c0f      	lsrs	r7, r1, #16
   16eb2:	197d      	adds	r5, r7, r5
   16eb4:	45a9      	cmp	r9, r5
   16eb6:	d903      	bls.n	16ec0 <__aeabi_dmul+0x2fc>
   16eb8:	2180      	movs	r1, #128	; 0x80
   16eba:	0249      	lsls	r1, r1, #9
   16ebc:	4688      	mov	r8, r1
   16ebe:	4444      	add	r4, r8
   16ec0:	9f04      	ldr	r7, [sp, #16]
   16ec2:	9903      	ldr	r1, [sp, #12]
   16ec4:	46b8      	mov	r8, r7
   16ec6:	4441      	add	r1, r8
   16ec8:	468b      	mov	fp, r1
   16eca:	4583      	cmp	fp, r0
   16ecc:	4180      	sbcs	r0, r0
   16ece:	4241      	negs	r1, r0
   16ed0:	4688      	mov	r8, r1
   16ed2:	4651      	mov	r1, sl
   16ed4:	0408      	lsls	r0, r1, #16
   16ed6:	042f      	lsls	r7, r5, #16
   16ed8:	0c00      	lsrs	r0, r0, #16
   16eda:	183f      	adds	r7, r7, r0
   16edc:	4658      	mov	r0, fp
   16ede:	9902      	ldr	r1, [sp, #8]
   16ee0:	1810      	adds	r0, r2, r0
   16ee2:	4689      	mov	r9, r1
   16ee4:	4290      	cmp	r0, r2
   16ee6:	4192      	sbcs	r2, r2
   16ee8:	444f      	add	r7, r9
   16eea:	46ba      	mov	sl, r7
   16eec:	4252      	negs	r2, r2
   16eee:	4699      	mov	r9, r3
   16ef0:	4693      	mov	fp, r2
   16ef2:	44c2      	add	sl, r8
   16ef4:	44d1      	add	r9, sl
   16ef6:	44cb      	add	fp, r9
   16ef8:	428f      	cmp	r7, r1
   16efa:	41bf      	sbcs	r7, r7
   16efc:	45c2      	cmp	sl, r8
   16efe:	4189      	sbcs	r1, r1
   16f00:	4599      	cmp	r9, r3
   16f02:	419b      	sbcs	r3, r3
   16f04:	4593      	cmp	fp, r2
   16f06:	4192      	sbcs	r2, r2
   16f08:	427f      	negs	r7, r7
   16f0a:	4249      	negs	r1, r1
   16f0c:	0c2d      	lsrs	r5, r5, #16
   16f0e:	4252      	negs	r2, r2
   16f10:	430f      	orrs	r7, r1
   16f12:	425b      	negs	r3, r3
   16f14:	4313      	orrs	r3, r2
   16f16:	197f      	adds	r7, r7, r5
   16f18:	18ff      	adds	r7, r7, r3
   16f1a:	465b      	mov	r3, fp
   16f1c:	193c      	adds	r4, r7, r4
   16f1e:	0ddb      	lsrs	r3, r3, #23
   16f20:	9a05      	ldr	r2, [sp, #20]
   16f22:	0264      	lsls	r4, r4, #9
   16f24:	431c      	orrs	r4, r3
   16f26:	0243      	lsls	r3, r0, #9
   16f28:	4313      	orrs	r3, r2
   16f2a:	1e5d      	subs	r5, r3, #1
   16f2c:	41ab      	sbcs	r3, r5
   16f2e:	465a      	mov	r2, fp
   16f30:	0dc0      	lsrs	r0, r0, #23
   16f32:	4303      	orrs	r3, r0
   16f34:	0252      	lsls	r2, r2, #9
   16f36:	4313      	orrs	r3, r2
   16f38:	01e2      	lsls	r2, r4, #7
   16f3a:	d556      	bpl.n	16fea <__aeabi_dmul+0x426>
   16f3c:	2001      	movs	r0, #1
   16f3e:	085a      	lsrs	r2, r3, #1
   16f40:	4003      	ands	r3, r0
   16f42:	4313      	orrs	r3, r2
   16f44:	07e2      	lsls	r2, r4, #31
   16f46:	4313      	orrs	r3, r2
   16f48:	0864      	lsrs	r4, r4, #1
   16f4a:	485a      	ldr	r0, [pc, #360]	; (170b4 <__aeabi_dmul+0x4f0>)
   16f4c:	4460      	add	r0, ip
   16f4e:	2800      	cmp	r0, #0
   16f50:	dd4d      	ble.n	16fee <__aeabi_dmul+0x42a>
   16f52:	075a      	lsls	r2, r3, #29
   16f54:	d009      	beq.n	16f6a <__aeabi_dmul+0x3a6>
   16f56:	220f      	movs	r2, #15
   16f58:	401a      	ands	r2, r3
   16f5a:	2a04      	cmp	r2, #4
   16f5c:	d005      	beq.n	16f6a <__aeabi_dmul+0x3a6>
   16f5e:	1d1a      	adds	r2, r3, #4
   16f60:	429a      	cmp	r2, r3
   16f62:	419b      	sbcs	r3, r3
   16f64:	425b      	negs	r3, r3
   16f66:	18e4      	adds	r4, r4, r3
   16f68:	0013      	movs	r3, r2
   16f6a:	01e2      	lsls	r2, r4, #7
   16f6c:	d504      	bpl.n	16f78 <__aeabi_dmul+0x3b4>
   16f6e:	2080      	movs	r0, #128	; 0x80
   16f70:	4a51      	ldr	r2, [pc, #324]	; (170b8 <__aeabi_dmul+0x4f4>)
   16f72:	00c0      	lsls	r0, r0, #3
   16f74:	4014      	ands	r4, r2
   16f76:	4460      	add	r0, ip
   16f78:	4a50      	ldr	r2, [pc, #320]	; (170bc <__aeabi_dmul+0x4f8>)
   16f7a:	4290      	cmp	r0, r2
   16f7c:	dd00      	ble.n	16f80 <__aeabi_dmul+0x3bc>
   16f7e:	e6e3      	b.n	16d48 <__aeabi_dmul+0x184>
   16f80:	2501      	movs	r5, #1
   16f82:	08db      	lsrs	r3, r3, #3
   16f84:	0762      	lsls	r2, r4, #29
   16f86:	431a      	orrs	r2, r3
   16f88:	0264      	lsls	r4, r4, #9
   16f8a:	9b01      	ldr	r3, [sp, #4]
   16f8c:	4691      	mov	r9, r2
   16f8e:	0b22      	lsrs	r2, r4, #12
   16f90:	0544      	lsls	r4, r0, #21
   16f92:	0d64      	lsrs	r4, r4, #21
   16f94:	401d      	ands	r5, r3
   16f96:	e67c      	b.n	16c92 <__aeabi_dmul+0xce>
   16f98:	2280      	movs	r2, #128	; 0x80
   16f9a:	4659      	mov	r1, fp
   16f9c:	0312      	lsls	r2, r2, #12
   16f9e:	4211      	tst	r1, r2
   16fa0:	d008      	beq.n	16fb4 <__aeabi_dmul+0x3f0>
   16fa2:	4214      	tst	r4, r2
   16fa4:	d106      	bne.n	16fb4 <__aeabi_dmul+0x3f0>
   16fa6:	4322      	orrs	r2, r4
   16fa8:	0312      	lsls	r2, r2, #12
   16faa:	0b12      	lsrs	r2, r2, #12
   16fac:	4645      	mov	r5, r8
   16fae:	4699      	mov	r9, r3
   16fb0:	4c43      	ldr	r4, [pc, #268]	; (170c0 <__aeabi_dmul+0x4fc>)
   16fb2:	e66e      	b.n	16c92 <__aeabi_dmul+0xce>
   16fb4:	465b      	mov	r3, fp
   16fb6:	431a      	orrs	r2, r3
   16fb8:	0312      	lsls	r2, r2, #12
   16fba:	0b12      	lsrs	r2, r2, #12
   16fbc:	4c40      	ldr	r4, [pc, #256]	; (170c0 <__aeabi_dmul+0x4fc>)
   16fbe:	e668      	b.n	16c92 <__aeabi_dmul+0xce>
   16fc0:	0003      	movs	r3, r0
   16fc2:	4654      	mov	r4, sl
   16fc4:	3b28      	subs	r3, #40	; 0x28
   16fc6:	409c      	lsls	r4, r3
   16fc8:	2300      	movs	r3, #0
   16fca:	e6b9      	b.n	16d40 <__aeabi_dmul+0x17c>
   16fcc:	f000 fc4e 	bl	1786c <__clzsi2>
   16fd0:	3020      	adds	r0, #32
   16fd2:	e6a6      	b.n	16d22 <__aeabi_dmul+0x15e>
   16fd4:	0003      	movs	r3, r0
   16fd6:	3b28      	subs	r3, #40	; 0x28
   16fd8:	409f      	lsls	r7, r3
   16fda:	2300      	movs	r3, #0
   16fdc:	46bb      	mov	fp, r7
   16fde:	4699      	mov	r9, r3
   16fe0:	e68a      	b.n	16cf8 <__aeabi_dmul+0x134>
   16fe2:	f000 fc43 	bl	1786c <__clzsi2>
   16fe6:	3020      	adds	r0, #32
   16fe8:	e674      	b.n	16cd4 <__aeabi_dmul+0x110>
   16fea:	46b4      	mov	ip, r6
   16fec:	e7ad      	b.n	16f4a <__aeabi_dmul+0x386>
   16fee:	2501      	movs	r5, #1
   16ff0:	1a2a      	subs	r2, r5, r0
   16ff2:	2a38      	cmp	r2, #56	; 0x38
   16ff4:	dd06      	ble.n	17004 <__aeabi_dmul+0x440>
   16ff6:	9b01      	ldr	r3, [sp, #4]
   16ff8:	2400      	movs	r4, #0
   16ffa:	401d      	ands	r5, r3
   16ffc:	2300      	movs	r3, #0
   16ffe:	2200      	movs	r2, #0
   17000:	4699      	mov	r9, r3
   17002:	e646      	b.n	16c92 <__aeabi_dmul+0xce>
   17004:	2a1f      	cmp	r2, #31
   17006:	dc21      	bgt.n	1704c <__aeabi_dmul+0x488>
   17008:	2520      	movs	r5, #32
   1700a:	0020      	movs	r0, r4
   1700c:	1aad      	subs	r5, r5, r2
   1700e:	001e      	movs	r6, r3
   17010:	40ab      	lsls	r3, r5
   17012:	40a8      	lsls	r0, r5
   17014:	40d6      	lsrs	r6, r2
   17016:	1e5d      	subs	r5, r3, #1
   17018:	41ab      	sbcs	r3, r5
   1701a:	4330      	orrs	r0, r6
   1701c:	4318      	orrs	r0, r3
   1701e:	40d4      	lsrs	r4, r2
   17020:	0743      	lsls	r3, r0, #29
   17022:	d009      	beq.n	17038 <__aeabi_dmul+0x474>
   17024:	230f      	movs	r3, #15
   17026:	4003      	ands	r3, r0
   17028:	2b04      	cmp	r3, #4
   1702a:	d005      	beq.n	17038 <__aeabi_dmul+0x474>
   1702c:	0003      	movs	r3, r0
   1702e:	1d18      	adds	r0, r3, #4
   17030:	4298      	cmp	r0, r3
   17032:	419b      	sbcs	r3, r3
   17034:	425b      	negs	r3, r3
   17036:	18e4      	adds	r4, r4, r3
   17038:	0223      	lsls	r3, r4, #8
   1703a:	d521      	bpl.n	17080 <__aeabi_dmul+0x4bc>
   1703c:	2501      	movs	r5, #1
   1703e:	9b01      	ldr	r3, [sp, #4]
   17040:	2401      	movs	r4, #1
   17042:	401d      	ands	r5, r3
   17044:	2300      	movs	r3, #0
   17046:	2200      	movs	r2, #0
   17048:	4699      	mov	r9, r3
   1704a:	e622      	b.n	16c92 <__aeabi_dmul+0xce>
   1704c:	251f      	movs	r5, #31
   1704e:	0021      	movs	r1, r4
   17050:	426d      	negs	r5, r5
   17052:	1a28      	subs	r0, r5, r0
   17054:	40c1      	lsrs	r1, r0
   17056:	0008      	movs	r0, r1
   17058:	2a20      	cmp	r2, #32
   1705a:	d01d      	beq.n	17098 <__aeabi_dmul+0x4d4>
   1705c:	355f      	adds	r5, #95	; 0x5f
   1705e:	1aaa      	subs	r2, r5, r2
   17060:	4094      	lsls	r4, r2
   17062:	4323      	orrs	r3, r4
   17064:	1e5c      	subs	r4, r3, #1
   17066:	41a3      	sbcs	r3, r4
   17068:	2507      	movs	r5, #7
   1706a:	4303      	orrs	r3, r0
   1706c:	401d      	ands	r5, r3
   1706e:	2200      	movs	r2, #0
   17070:	2d00      	cmp	r5, #0
   17072:	d009      	beq.n	17088 <__aeabi_dmul+0x4c4>
   17074:	220f      	movs	r2, #15
   17076:	2400      	movs	r4, #0
   17078:	401a      	ands	r2, r3
   1707a:	0018      	movs	r0, r3
   1707c:	2a04      	cmp	r2, #4
   1707e:	d1d6      	bne.n	1702e <__aeabi_dmul+0x46a>
   17080:	0003      	movs	r3, r0
   17082:	0765      	lsls	r5, r4, #29
   17084:	0264      	lsls	r4, r4, #9
   17086:	0b22      	lsrs	r2, r4, #12
   17088:	08db      	lsrs	r3, r3, #3
   1708a:	432b      	orrs	r3, r5
   1708c:	2501      	movs	r5, #1
   1708e:	4699      	mov	r9, r3
   17090:	9b01      	ldr	r3, [sp, #4]
   17092:	2400      	movs	r4, #0
   17094:	401d      	ands	r5, r3
   17096:	e5fc      	b.n	16c92 <__aeabi_dmul+0xce>
   17098:	2400      	movs	r4, #0
   1709a:	e7e2      	b.n	17062 <__aeabi_dmul+0x49e>
   1709c:	2280      	movs	r2, #128	; 0x80
   1709e:	2501      	movs	r5, #1
   170a0:	0312      	lsls	r2, r2, #12
   170a2:	4322      	orrs	r2, r4
   170a4:	9901      	ldr	r1, [sp, #4]
   170a6:	0312      	lsls	r2, r2, #12
   170a8:	0b12      	lsrs	r2, r2, #12
   170aa:	400d      	ands	r5, r1
   170ac:	4699      	mov	r9, r3
   170ae:	4c04      	ldr	r4, [pc, #16]	; (170c0 <__aeabi_dmul+0x4fc>)
   170b0:	e5ef      	b.n	16c92 <__aeabi_dmul+0xce>
   170b2:	46c0      	nop			; (mov r8, r8)
   170b4:	000003ff 	.word	0x000003ff
   170b8:	feffffff 	.word	0xfeffffff
   170bc:	000007fe 	.word	0x000007fe
   170c0:	000007ff 	.word	0x000007ff

000170c4 <__aeabi_dsub>:
   170c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   170c6:	4646      	mov	r6, r8
   170c8:	46d6      	mov	lr, sl
   170ca:	464f      	mov	r7, r9
   170cc:	030c      	lsls	r4, r1, #12
   170ce:	b5c0      	push	{r6, r7, lr}
   170d0:	0fcd      	lsrs	r5, r1, #31
   170d2:	004e      	lsls	r6, r1, #1
   170d4:	0a61      	lsrs	r1, r4, #9
   170d6:	0f44      	lsrs	r4, r0, #29
   170d8:	430c      	orrs	r4, r1
   170da:	00c1      	lsls	r1, r0, #3
   170dc:	0058      	lsls	r0, r3, #1
   170de:	0d40      	lsrs	r0, r0, #21
   170e0:	4684      	mov	ip, r0
   170e2:	468a      	mov	sl, r1
   170e4:	000f      	movs	r7, r1
   170e6:	0319      	lsls	r1, r3, #12
   170e8:	0f50      	lsrs	r0, r2, #29
   170ea:	0a49      	lsrs	r1, r1, #9
   170ec:	4301      	orrs	r1, r0
   170ee:	48c6      	ldr	r0, [pc, #792]	; (17408 <__aeabi_dsub+0x344>)
   170f0:	0d76      	lsrs	r6, r6, #21
   170f2:	46a8      	mov	r8, r5
   170f4:	0fdb      	lsrs	r3, r3, #31
   170f6:	00d2      	lsls	r2, r2, #3
   170f8:	4584      	cmp	ip, r0
   170fa:	d100      	bne.n	170fe <__aeabi_dsub+0x3a>
   170fc:	e0d8      	b.n	172b0 <__aeabi_dsub+0x1ec>
   170fe:	2001      	movs	r0, #1
   17100:	4043      	eors	r3, r0
   17102:	42ab      	cmp	r3, r5
   17104:	d100      	bne.n	17108 <__aeabi_dsub+0x44>
   17106:	e0a6      	b.n	17256 <__aeabi_dsub+0x192>
   17108:	4660      	mov	r0, ip
   1710a:	1a35      	subs	r5, r6, r0
   1710c:	2d00      	cmp	r5, #0
   1710e:	dc00      	bgt.n	17112 <__aeabi_dsub+0x4e>
   17110:	e105      	b.n	1731e <__aeabi_dsub+0x25a>
   17112:	2800      	cmp	r0, #0
   17114:	d110      	bne.n	17138 <__aeabi_dsub+0x74>
   17116:	000b      	movs	r3, r1
   17118:	4313      	orrs	r3, r2
   1711a:	d100      	bne.n	1711e <__aeabi_dsub+0x5a>
   1711c:	e0d7      	b.n	172ce <__aeabi_dsub+0x20a>
   1711e:	1e6b      	subs	r3, r5, #1
   17120:	2b00      	cmp	r3, #0
   17122:	d000      	beq.n	17126 <__aeabi_dsub+0x62>
   17124:	e14b      	b.n	173be <__aeabi_dsub+0x2fa>
   17126:	4653      	mov	r3, sl
   17128:	1a9f      	subs	r7, r3, r2
   1712a:	45ba      	cmp	sl, r7
   1712c:	4180      	sbcs	r0, r0
   1712e:	1a64      	subs	r4, r4, r1
   17130:	4240      	negs	r0, r0
   17132:	1a24      	subs	r4, r4, r0
   17134:	2601      	movs	r6, #1
   17136:	e01e      	b.n	17176 <__aeabi_dsub+0xb2>
   17138:	4bb3      	ldr	r3, [pc, #716]	; (17408 <__aeabi_dsub+0x344>)
   1713a:	429e      	cmp	r6, r3
   1713c:	d048      	beq.n	171d0 <__aeabi_dsub+0x10c>
   1713e:	2380      	movs	r3, #128	; 0x80
   17140:	041b      	lsls	r3, r3, #16
   17142:	4319      	orrs	r1, r3
   17144:	2d38      	cmp	r5, #56	; 0x38
   17146:	dd00      	ble.n	1714a <__aeabi_dsub+0x86>
   17148:	e119      	b.n	1737e <__aeabi_dsub+0x2ba>
   1714a:	2d1f      	cmp	r5, #31
   1714c:	dd00      	ble.n	17150 <__aeabi_dsub+0x8c>
   1714e:	e14c      	b.n	173ea <__aeabi_dsub+0x326>
   17150:	2320      	movs	r3, #32
   17152:	000f      	movs	r7, r1
   17154:	1b5b      	subs	r3, r3, r5
   17156:	0010      	movs	r0, r2
   17158:	409a      	lsls	r2, r3
   1715a:	409f      	lsls	r7, r3
   1715c:	40e8      	lsrs	r0, r5
   1715e:	1e53      	subs	r3, r2, #1
   17160:	419a      	sbcs	r2, r3
   17162:	40e9      	lsrs	r1, r5
   17164:	4307      	orrs	r7, r0
   17166:	4317      	orrs	r7, r2
   17168:	4653      	mov	r3, sl
   1716a:	1bdf      	subs	r7, r3, r7
   1716c:	1a61      	subs	r1, r4, r1
   1716e:	45ba      	cmp	sl, r7
   17170:	41a4      	sbcs	r4, r4
   17172:	4264      	negs	r4, r4
   17174:	1b0c      	subs	r4, r1, r4
   17176:	0223      	lsls	r3, r4, #8
   17178:	d400      	bmi.n	1717c <__aeabi_dsub+0xb8>
   1717a:	e0c5      	b.n	17308 <__aeabi_dsub+0x244>
   1717c:	0264      	lsls	r4, r4, #9
   1717e:	0a65      	lsrs	r5, r4, #9
   17180:	2d00      	cmp	r5, #0
   17182:	d100      	bne.n	17186 <__aeabi_dsub+0xc2>
   17184:	e0f6      	b.n	17374 <__aeabi_dsub+0x2b0>
   17186:	0028      	movs	r0, r5
   17188:	f000 fb70 	bl	1786c <__clzsi2>
   1718c:	0003      	movs	r3, r0
   1718e:	3b08      	subs	r3, #8
   17190:	2b1f      	cmp	r3, #31
   17192:	dd00      	ble.n	17196 <__aeabi_dsub+0xd2>
   17194:	e0e9      	b.n	1736a <__aeabi_dsub+0x2a6>
   17196:	2220      	movs	r2, #32
   17198:	003c      	movs	r4, r7
   1719a:	1ad2      	subs	r2, r2, r3
   1719c:	409d      	lsls	r5, r3
   1719e:	40d4      	lsrs	r4, r2
   171a0:	409f      	lsls	r7, r3
   171a2:	4325      	orrs	r5, r4
   171a4:	429e      	cmp	r6, r3
   171a6:	dd00      	ble.n	171aa <__aeabi_dsub+0xe6>
   171a8:	e0db      	b.n	17362 <__aeabi_dsub+0x29e>
   171aa:	1b9e      	subs	r6, r3, r6
   171ac:	1c73      	adds	r3, r6, #1
   171ae:	2b1f      	cmp	r3, #31
   171b0:	dd00      	ble.n	171b4 <__aeabi_dsub+0xf0>
   171b2:	e10a      	b.n	173ca <__aeabi_dsub+0x306>
   171b4:	2220      	movs	r2, #32
   171b6:	0038      	movs	r0, r7
   171b8:	1ad2      	subs	r2, r2, r3
   171ba:	0029      	movs	r1, r5
   171bc:	4097      	lsls	r7, r2
   171be:	002c      	movs	r4, r5
   171c0:	4091      	lsls	r1, r2
   171c2:	40d8      	lsrs	r0, r3
   171c4:	1e7a      	subs	r2, r7, #1
   171c6:	4197      	sbcs	r7, r2
   171c8:	40dc      	lsrs	r4, r3
   171ca:	2600      	movs	r6, #0
   171cc:	4301      	orrs	r1, r0
   171ce:	430f      	orrs	r7, r1
   171d0:	077b      	lsls	r3, r7, #29
   171d2:	d009      	beq.n	171e8 <__aeabi_dsub+0x124>
   171d4:	230f      	movs	r3, #15
   171d6:	403b      	ands	r3, r7
   171d8:	2b04      	cmp	r3, #4
   171da:	d005      	beq.n	171e8 <__aeabi_dsub+0x124>
   171dc:	1d3b      	adds	r3, r7, #4
   171de:	42bb      	cmp	r3, r7
   171e0:	41bf      	sbcs	r7, r7
   171e2:	427f      	negs	r7, r7
   171e4:	19e4      	adds	r4, r4, r7
   171e6:	001f      	movs	r7, r3
   171e8:	0223      	lsls	r3, r4, #8
   171ea:	d525      	bpl.n	17238 <__aeabi_dsub+0x174>
   171ec:	4b86      	ldr	r3, [pc, #536]	; (17408 <__aeabi_dsub+0x344>)
   171ee:	3601      	adds	r6, #1
   171f0:	429e      	cmp	r6, r3
   171f2:	d100      	bne.n	171f6 <__aeabi_dsub+0x132>
   171f4:	e0af      	b.n	17356 <__aeabi_dsub+0x292>
   171f6:	4b85      	ldr	r3, [pc, #532]	; (1740c <__aeabi_dsub+0x348>)
   171f8:	2501      	movs	r5, #1
   171fa:	401c      	ands	r4, r3
   171fc:	4643      	mov	r3, r8
   171fe:	0762      	lsls	r2, r4, #29
   17200:	08ff      	lsrs	r7, r7, #3
   17202:	0264      	lsls	r4, r4, #9
   17204:	0576      	lsls	r6, r6, #21
   17206:	4317      	orrs	r7, r2
   17208:	0b24      	lsrs	r4, r4, #12
   1720a:	0d76      	lsrs	r6, r6, #21
   1720c:	401d      	ands	r5, r3
   1720e:	2100      	movs	r1, #0
   17210:	0324      	lsls	r4, r4, #12
   17212:	0b23      	lsrs	r3, r4, #12
   17214:	0d0c      	lsrs	r4, r1, #20
   17216:	4a7e      	ldr	r2, [pc, #504]	; (17410 <__aeabi_dsub+0x34c>)
   17218:	0524      	lsls	r4, r4, #20
   1721a:	431c      	orrs	r4, r3
   1721c:	4014      	ands	r4, r2
   1721e:	0533      	lsls	r3, r6, #20
   17220:	4323      	orrs	r3, r4
   17222:	005b      	lsls	r3, r3, #1
   17224:	07ed      	lsls	r5, r5, #31
   17226:	085b      	lsrs	r3, r3, #1
   17228:	432b      	orrs	r3, r5
   1722a:	0038      	movs	r0, r7
   1722c:	0019      	movs	r1, r3
   1722e:	bc1c      	pop	{r2, r3, r4}
   17230:	4690      	mov	r8, r2
   17232:	4699      	mov	r9, r3
   17234:	46a2      	mov	sl, r4
   17236:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17238:	2501      	movs	r5, #1
   1723a:	4643      	mov	r3, r8
   1723c:	0762      	lsls	r2, r4, #29
   1723e:	08ff      	lsrs	r7, r7, #3
   17240:	4317      	orrs	r7, r2
   17242:	08e4      	lsrs	r4, r4, #3
   17244:	401d      	ands	r5, r3
   17246:	4b70      	ldr	r3, [pc, #448]	; (17408 <__aeabi_dsub+0x344>)
   17248:	429e      	cmp	r6, r3
   1724a:	d036      	beq.n	172ba <__aeabi_dsub+0x1f6>
   1724c:	0324      	lsls	r4, r4, #12
   1724e:	0576      	lsls	r6, r6, #21
   17250:	0b24      	lsrs	r4, r4, #12
   17252:	0d76      	lsrs	r6, r6, #21
   17254:	e7db      	b.n	1720e <__aeabi_dsub+0x14a>
   17256:	4663      	mov	r3, ip
   17258:	1af3      	subs	r3, r6, r3
   1725a:	2b00      	cmp	r3, #0
   1725c:	dc00      	bgt.n	17260 <__aeabi_dsub+0x19c>
   1725e:	e094      	b.n	1738a <__aeabi_dsub+0x2c6>
   17260:	4660      	mov	r0, ip
   17262:	2800      	cmp	r0, #0
   17264:	d035      	beq.n	172d2 <__aeabi_dsub+0x20e>
   17266:	4868      	ldr	r0, [pc, #416]	; (17408 <__aeabi_dsub+0x344>)
   17268:	4286      	cmp	r6, r0
   1726a:	d0b1      	beq.n	171d0 <__aeabi_dsub+0x10c>
   1726c:	2780      	movs	r7, #128	; 0x80
   1726e:	043f      	lsls	r7, r7, #16
   17270:	4339      	orrs	r1, r7
   17272:	2b38      	cmp	r3, #56	; 0x38
   17274:	dc00      	bgt.n	17278 <__aeabi_dsub+0x1b4>
   17276:	e0fd      	b.n	17474 <__aeabi_dsub+0x3b0>
   17278:	430a      	orrs	r2, r1
   1727a:	0017      	movs	r7, r2
   1727c:	2100      	movs	r1, #0
   1727e:	1e7a      	subs	r2, r7, #1
   17280:	4197      	sbcs	r7, r2
   17282:	4457      	add	r7, sl
   17284:	4557      	cmp	r7, sl
   17286:	4180      	sbcs	r0, r0
   17288:	1909      	adds	r1, r1, r4
   1728a:	4244      	negs	r4, r0
   1728c:	190c      	adds	r4, r1, r4
   1728e:	0223      	lsls	r3, r4, #8
   17290:	d53a      	bpl.n	17308 <__aeabi_dsub+0x244>
   17292:	4b5d      	ldr	r3, [pc, #372]	; (17408 <__aeabi_dsub+0x344>)
   17294:	3601      	adds	r6, #1
   17296:	429e      	cmp	r6, r3
   17298:	d100      	bne.n	1729c <__aeabi_dsub+0x1d8>
   1729a:	e14b      	b.n	17534 <__aeabi_dsub+0x470>
   1729c:	2201      	movs	r2, #1
   1729e:	4b5b      	ldr	r3, [pc, #364]	; (1740c <__aeabi_dsub+0x348>)
   172a0:	401c      	ands	r4, r3
   172a2:	087b      	lsrs	r3, r7, #1
   172a4:	4017      	ands	r7, r2
   172a6:	431f      	orrs	r7, r3
   172a8:	07e2      	lsls	r2, r4, #31
   172aa:	4317      	orrs	r7, r2
   172ac:	0864      	lsrs	r4, r4, #1
   172ae:	e78f      	b.n	171d0 <__aeabi_dsub+0x10c>
   172b0:	0008      	movs	r0, r1
   172b2:	4310      	orrs	r0, r2
   172b4:	d000      	beq.n	172b8 <__aeabi_dsub+0x1f4>
   172b6:	e724      	b.n	17102 <__aeabi_dsub+0x3e>
   172b8:	e721      	b.n	170fe <__aeabi_dsub+0x3a>
   172ba:	0023      	movs	r3, r4
   172bc:	433b      	orrs	r3, r7
   172be:	d100      	bne.n	172c2 <__aeabi_dsub+0x1fe>
   172c0:	e1b9      	b.n	17636 <__aeabi_dsub+0x572>
   172c2:	2280      	movs	r2, #128	; 0x80
   172c4:	0312      	lsls	r2, r2, #12
   172c6:	4314      	orrs	r4, r2
   172c8:	0324      	lsls	r4, r4, #12
   172ca:	0b24      	lsrs	r4, r4, #12
   172cc:	e79f      	b.n	1720e <__aeabi_dsub+0x14a>
   172ce:	002e      	movs	r6, r5
   172d0:	e77e      	b.n	171d0 <__aeabi_dsub+0x10c>
   172d2:	0008      	movs	r0, r1
   172d4:	4310      	orrs	r0, r2
   172d6:	d100      	bne.n	172da <__aeabi_dsub+0x216>
   172d8:	e0ca      	b.n	17470 <__aeabi_dsub+0x3ac>
   172da:	1e58      	subs	r0, r3, #1
   172dc:	4684      	mov	ip, r0
   172de:	2800      	cmp	r0, #0
   172e0:	d000      	beq.n	172e4 <__aeabi_dsub+0x220>
   172e2:	e0e7      	b.n	174b4 <__aeabi_dsub+0x3f0>
   172e4:	4452      	add	r2, sl
   172e6:	4552      	cmp	r2, sl
   172e8:	4180      	sbcs	r0, r0
   172ea:	1864      	adds	r4, r4, r1
   172ec:	4240      	negs	r0, r0
   172ee:	1824      	adds	r4, r4, r0
   172f0:	0017      	movs	r7, r2
   172f2:	2601      	movs	r6, #1
   172f4:	0223      	lsls	r3, r4, #8
   172f6:	d507      	bpl.n	17308 <__aeabi_dsub+0x244>
   172f8:	2602      	movs	r6, #2
   172fa:	e7cf      	b.n	1729c <__aeabi_dsub+0x1d8>
   172fc:	4664      	mov	r4, ip
   172fe:	432c      	orrs	r4, r5
   17300:	d100      	bne.n	17304 <__aeabi_dsub+0x240>
   17302:	e1b3      	b.n	1766c <__aeabi_dsub+0x5a8>
   17304:	002c      	movs	r4, r5
   17306:	4667      	mov	r7, ip
   17308:	077b      	lsls	r3, r7, #29
   1730a:	d000      	beq.n	1730e <__aeabi_dsub+0x24a>
   1730c:	e762      	b.n	171d4 <__aeabi_dsub+0x110>
   1730e:	0763      	lsls	r3, r4, #29
   17310:	08ff      	lsrs	r7, r7, #3
   17312:	431f      	orrs	r7, r3
   17314:	2501      	movs	r5, #1
   17316:	4643      	mov	r3, r8
   17318:	08e4      	lsrs	r4, r4, #3
   1731a:	401d      	ands	r5, r3
   1731c:	e793      	b.n	17246 <__aeabi_dsub+0x182>
   1731e:	2d00      	cmp	r5, #0
   17320:	d178      	bne.n	17414 <__aeabi_dsub+0x350>
   17322:	1c75      	adds	r5, r6, #1
   17324:	056d      	lsls	r5, r5, #21
   17326:	0d6d      	lsrs	r5, r5, #21
   17328:	2d01      	cmp	r5, #1
   1732a:	dc00      	bgt.n	1732e <__aeabi_dsub+0x26a>
   1732c:	e0f2      	b.n	17514 <__aeabi_dsub+0x450>
   1732e:	4650      	mov	r0, sl
   17330:	1a80      	subs	r0, r0, r2
   17332:	4582      	cmp	sl, r0
   17334:	41bf      	sbcs	r7, r7
   17336:	1a65      	subs	r5, r4, r1
   17338:	427f      	negs	r7, r7
   1733a:	1bed      	subs	r5, r5, r7
   1733c:	4684      	mov	ip, r0
   1733e:	0228      	lsls	r0, r5, #8
   17340:	d400      	bmi.n	17344 <__aeabi_dsub+0x280>
   17342:	e08c      	b.n	1745e <__aeabi_dsub+0x39a>
   17344:	4650      	mov	r0, sl
   17346:	1a17      	subs	r7, r2, r0
   17348:	42ba      	cmp	r2, r7
   1734a:	4192      	sbcs	r2, r2
   1734c:	1b0c      	subs	r4, r1, r4
   1734e:	4255      	negs	r5, r2
   17350:	1b65      	subs	r5, r4, r5
   17352:	4698      	mov	r8, r3
   17354:	e714      	b.n	17180 <__aeabi_dsub+0xbc>
   17356:	2501      	movs	r5, #1
   17358:	4643      	mov	r3, r8
   1735a:	2400      	movs	r4, #0
   1735c:	401d      	ands	r5, r3
   1735e:	2700      	movs	r7, #0
   17360:	e755      	b.n	1720e <__aeabi_dsub+0x14a>
   17362:	4c2a      	ldr	r4, [pc, #168]	; (1740c <__aeabi_dsub+0x348>)
   17364:	1af6      	subs	r6, r6, r3
   17366:	402c      	ands	r4, r5
   17368:	e732      	b.n	171d0 <__aeabi_dsub+0x10c>
   1736a:	003d      	movs	r5, r7
   1736c:	3828      	subs	r0, #40	; 0x28
   1736e:	4085      	lsls	r5, r0
   17370:	2700      	movs	r7, #0
   17372:	e717      	b.n	171a4 <__aeabi_dsub+0xe0>
   17374:	0038      	movs	r0, r7
   17376:	f000 fa79 	bl	1786c <__clzsi2>
   1737a:	3020      	adds	r0, #32
   1737c:	e706      	b.n	1718c <__aeabi_dsub+0xc8>
   1737e:	430a      	orrs	r2, r1
   17380:	0017      	movs	r7, r2
   17382:	2100      	movs	r1, #0
   17384:	1e7a      	subs	r2, r7, #1
   17386:	4197      	sbcs	r7, r2
   17388:	e6ee      	b.n	17168 <__aeabi_dsub+0xa4>
   1738a:	2b00      	cmp	r3, #0
   1738c:	d000      	beq.n	17390 <__aeabi_dsub+0x2cc>
   1738e:	e0e5      	b.n	1755c <__aeabi_dsub+0x498>
   17390:	1c73      	adds	r3, r6, #1
   17392:	469c      	mov	ip, r3
   17394:	055b      	lsls	r3, r3, #21
   17396:	0d5b      	lsrs	r3, r3, #21
   17398:	2b01      	cmp	r3, #1
   1739a:	dc00      	bgt.n	1739e <__aeabi_dsub+0x2da>
   1739c:	e09f      	b.n	174de <__aeabi_dsub+0x41a>
   1739e:	4b1a      	ldr	r3, [pc, #104]	; (17408 <__aeabi_dsub+0x344>)
   173a0:	459c      	cmp	ip, r3
   173a2:	d100      	bne.n	173a6 <__aeabi_dsub+0x2e2>
   173a4:	e0c5      	b.n	17532 <__aeabi_dsub+0x46e>
   173a6:	4452      	add	r2, sl
   173a8:	4552      	cmp	r2, sl
   173aa:	4180      	sbcs	r0, r0
   173ac:	1864      	adds	r4, r4, r1
   173ae:	4240      	negs	r0, r0
   173b0:	1824      	adds	r4, r4, r0
   173b2:	07e7      	lsls	r7, r4, #31
   173b4:	0852      	lsrs	r2, r2, #1
   173b6:	4317      	orrs	r7, r2
   173b8:	0864      	lsrs	r4, r4, #1
   173ba:	4666      	mov	r6, ip
   173bc:	e708      	b.n	171d0 <__aeabi_dsub+0x10c>
   173be:	4812      	ldr	r0, [pc, #72]	; (17408 <__aeabi_dsub+0x344>)
   173c0:	4285      	cmp	r5, r0
   173c2:	d100      	bne.n	173c6 <__aeabi_dsub+0x302>
   173c4:	e085      	b.n	174d2 <__aeabi_dsub+0x40e>
   173c6:	001d      	movs	r5, r3
   173c8:	e6bc      	b.n	17144 <__aeabi_dsub+0x80>
   173ca:	0029      	movs	r1, r5
   173cc:	3e1f      	subs	r6, #31
   173ce:	40f1      	lsrs	r1, r6
   173d0:	2b20      	cmp	r3, #32
   173d2:	d100      	bne.n	173d6 <__aeabi_dsub+0x312>
   173d4:	e07f      	b.n	174d6 <__aeabi_dsub+0x412>
   173d6:	2240      	movs	r2, #64	; 0x40
   173d8:	1ad3      	subs	r3, r2, r3
   173da:	409d      	lsls	r5, r3
   173dc:	432f      	orrs	r7, r5
   173de:	1e7d      	subs	r5, r7, #1
   173e0:	41af      	sbcs	r7, r5
   173e2:	2400      	movs	r4, #0
   173e4:	430f      	orrs	r7, r1
   173e6:	2600      	movs	r6, #0
   173e8:	e78e      	b.n	17308 <__aeabi_dsub+0x244>
   173ea:	002b      	movs	r3, r5
   173ec:	000f      	movs	r7, r1
   173ee:	3b20      	subs	r3, #32
   173f0:	40df      	lsrs	r7, r3
   173f2:	2d20      	cmp	r5, #32
   173f4:	d071      	beq.n	174da <__aeabi_dsub+0x416>
   173f6:	2340      	movs	r3, #64	; 0x40
   173f8:	1b5d      	subs	r5, r3, r5
   173fa:	40a9      	lsls	r1, r5
   173fc:	430a      	orrs	r2, r1
   173fe:	1e51      	subs	r1, r2, #1
   17400:	418a      	sbcs	r2, r1
   17402:	2100      	movs	r1, #0
   17404:	4317      	orrs	r7, r2
   17406:	e6af      	b.n	17168 <__aeabi_dsub+0xa4>
   17408:	000007ff 	.word	0x000007ff
   1740c:	ff7fffff 	.word	0xff7fffff
   17410:	800fffff 	.word	0x800fffff
   17414:	2e00      	cmp	r6, #0
   17416:	d03e      	beq.n	17496 <__aeabi_dsub+0x3d2>
   17418:	4eb3      	ldr	r6, [pc, #716]	; (176e8 <__aeabi_dsub+0x624>)
   1741a:	45b4      	cmp	ip, r6
   1741c:	d045      	beq.n	174aa <__aeabi_dsub+0x3e6>
   1741e:	2680      	movs	r6, #128	; 0x80
   17420:	0436      	lsls	r6, r6, #16
   17422:	426d      	negs	r5, r5
   17424:	4334      	orrs	r4, r6
   17426:	2d38      	cmp	r5, #56	; 0x38
   17428:	dd00      	ble.n	1742c <__aeabi_dsub+0x368>
   1742a:	e0a8      	b.n	1757e <__aeabi_dsub+0x4ba>
   1742c:	2d1f      	cmp	r5, #31
   1742e:	dd00      	ble.n	17432 <__aeabi_dsub+0x36e>
   17430:	e11f      	b.n	17672 <__aeabi_dsub+0x5ae>
   17432:	2620      	movs	r6, #32
   17434:	0027      	movs	r7, r4
   17436:	4650      	mov	r0, sl
   17438:	1b76      	subs	r6, r6, r5
   1743a:	40b7      	lsls	r7, r6
   1743c:	40e8      	lsrs	r0, r5
   1743e:	4307      	orrs	r7, r0
   17440:	4650      	mov	r0, sl
   17442:	40b0      	lsls	r0, r6
   17444:	1e46      	subs	r6, r0, #1
   17446:	41b0      	sbcs	r0, r6
   17448:	40ec      	lsrs	r4, r5
   1744a:	4338      	orrs	r0, r7
   1744c:	1a17      	subs	r7, r2, r0
   1744e:	42ba      	cmp	r2, r7
   17450:	4192      	sbcs	r2, r2
   17452:	1b0c      	subs	r4, r1, r4
   17454:	4252      	negs	r2, r2
   17456:	1aa4      	subs	r4, r4, r2
   17458:	4666      	mov	r6, ip
   1745a:	4698      	mov	r8, r3
   1745c:	e68b      	b.n	17176 <__aeabi_dsub+0xb2>
   1745e:	4664      	mov	r4, ip
   17460:	4667      	mov	r7, ip
   17462:	432c      	orrs	r4, r5
   17464:	d000      	beq.n	17468 <__aeabi_dsub+0x3a4>
   17466:	e68b      	b.n	17180 <__aeabi_dsub+0xbc>
   17468:	2500      	movs	r5, #0
   1746a:	2600      	movs	r6, #0
   1746c:	2700      	movs	r7, #0
   1746e:	e6ea      	b.n	17246 <__aeabi_dsub+0x182>
   17470:	001e      	movs	r6, r3
   17472:	e6ad      	b.n	171d0 <__aeabi_dsub+0x10c>
   17474:	2b1f      	cmp	r3, #31
   17476:	dc60      	bgt.n	1753a <__aeabi_dsub+0x476>
   17478:	2720      	movs	r7, #32
   1747a:	1af8      	subs	r0, r7, r3
   1747c:	000f      	movs	r7, r1
   1747e:	4684      	mov	ip, r0
   17480:	4087      	lsls	r7, r0
   17482:	0010      	movs	r0, r2
   17484:	40d8      	lsrs	r0, r3
   17486:	4307      	orrs	r7, r0
   17488:	4660      	mov	r0, ip
   1748a:	4082      	lsls	r2, r0
   1748c:	1e50      	subs	r0, r2, #1
   1748e:	4182      	sbcs	r2, r0
   17490:	40d9      	lsrs	r1, r3
   17492:	4317      	orrs	r7, r2
   17494:	e6f5      	b.n	17282 <__aeabi_dsub+0x1be>
   17496:	0026      	movs	r6, r4
   17498:	4650      	mov	r0, sl
   1749a:	4306      	orrs	r6, r0
   1749c:	d005      	beq.n	174aa <__aeabi_dsub+0x3e6>
   1749e:	43ed      	mvns	r5, r5
   174a0:	2d00      	cmp	r5, #0
   174a2:	d0d3      	beq.n	1744c <__aeabi_dsub+0x388>
   174a4:	4e90      	ldr	r6, [pc, #576]	; (176e8 <__aeabi_dsub+0x624>)
   174a6:	45b4      	cmp	ip, r6
   174a8:	d1bd      	bne.n	17426 <__aeabi_dsub+0x362>
   174aa:	000c      	movs	r4, r1
   174ac:	0017      	movs	r7, r2
   174ae:	4666      	mov	r6, ip
   174b0:	4698      	mov	r8, r3
   174b2:	e68d      	b.n	171d0 <__aeabi_dsub+0x10c>
   174b4:	488c      	ldr	r0, [pc, #560]	; (176e8 <__aeabi_dsub+0x624>)
   174b6:	4283      	cmp	r3, r0
   174b8:	d00b      	beq.n	174d2 <__aeabi_dsub+0x40e>
   174ba:	4663      	mov	r3, ip
   174bc:	e6d9      	b.n	17272 <__aeabi_dsub+0x1ae>
   174be:	2d00      	cmp	r5, #0
   174c0:	d000      	beq.n	174c4 <__aeabi_dsub+0x400>
   174c2:	e096      	b.n	175f2 <__aeabi_dsub+0x52e>
   174c4:	0008      	movs	r0, r1
   174c6:	4310      	orrs	r0, r2
   174c8:	d100      	bne.n	174cc <__aeabi_dsub+0x408>
   174ca:	e0e2      	b.n	17692 <__aeabi_dsub+0x5ce>
   174cc:	000c      	movs	r4, r1
   174ce:	0017      	movs	r7, r2
   174d0:	4698      	mov	r8, r3
   174d2:	4e85      	ldr	r6, [pc, #532]	; (176e8 <__aeabi_dsub+0x624>)
   174d4:	e67c      	b.n	171d0 <__aeabi_dsub+0x10c>
   174d6:	2500      	movs	r5, #0
   174d8:	e780      	b.n	173dc <__aeabi_dsub+0x318>
   174da:	2100      	movs	r1, #0
   174dc:	e78e      	b.n	173fc <__aeabi_dsub+0x338>
   174de:	0023      	movs	r3, r4
   174e0:	4650      	mov	r0, sl
   174e2:	4303      	orrs	r3, r0
   174e4:	2e00      	cmp	r6, #0
   174e6:	d000      	beq.n	174ea <__aeabi_dsub+0x426>
   174e8:	e0a8      	b.n	1763c <__aeabi_dsub+0x578>
   174ea:	2b00      	cmp	r3, #0
   174ec:	d100      	bne.n	174f0 <__aeabi_dsub+0x42c>
   174ee:	e0de      	b.n	176ae <__aeabi_dsub+0x5ea>
   174f0:	000b      	movs	r3, r1
   174f2:	4313      	orrs	r3, r2
   174f4:	d100      	bne.n	174f8 <__aeabi_dsub+0x434>
   174f6:	e66b      	b.n	171d0 <__aeabi_dsub+0x10c>
   174f8:	4452      	add	r2, sl
   174fa:	4552      	cmp	r2, sl
   174fc:	4180      	sbcs	r0, r0
   174fe:	1864      	adds	r4, r4, r1
   17500:	4240      	negs	r0, r0
   17502:	1824      	adds	r4, r4, r0
   17504:	0017      	movs	r7, r2
   17506:	0223      	lsls	r3, r4, #8
   17508:	d400      	bmi.n	1750c <__aeabi_dsub+0x448>
   1750a:	e6fd      	b.n	17308 <__aeabi_dsub+0x244>
   1750c:	4b77      	ldr	r3, [pc, #476]	; (176ec <__aeabi_dsub+0x628>)
   1750e:	4666      	mov	r6, ip
   17510:	401c      	ands	r4, r3
   17512:	e65d      	b.n	171d0 <__aeabi_dsub+0x10c>
   17514:	0025      	movs	r5, r4
   17516:	4650      	mov	r0, sl
   17518:	4305      	orrs	r5, r0
   1751a:	2e00      	cmp	r6, #0
   1751c:	d1cf      	bne.n	174be <__aeabi_dsub+0x3fa>
   1751e:	2d00      	cmp	r5, #0
   17520:	d14f      	bne.n	175c2 <__aeabi_dsub+0x4fe>
   17522:	000c      	movs	r4, r1
   17524:	4314      	orrs	r4, r2
   17526:	d100      	bne.n	1752a <__aeabi_dsub+0x466>
   17528:	e0a0      	b.n	1766c <__aeabi_dsub+0x5a8>
   1752a:	000c      	movs	r4, r1
   1752c:	0017      	movs	r7, r2
   1752e:	4698      	mov	r8, r3
   17530:	e64e      	b.n	171d0 <__aeabi_dsub+0x10c>
   17532:	4666      	mov	r6, ip
   17534:	2400      	movs	r4, #0
   17536:	2700      	movs	r7, #0
   17538:	e685      	b.n	17246 <__aeabi_dsub+0x182>
   1753a:	001f      	movs	r7, r3
   1753c:	0008      	movs	r0, r1
   1753e:	3f20      	subs	r7, #32
   17540:	40f8      	lsrs	r0, r7
   17542:	0007      	movs	r7, r0
   17544:	2b20      	cmp	r3, #32
   17546:	d100      	bne.n	1754a <__aeabi_dsub+0x486>
   17548:	e08e      	b.n	17668 <__aeabi_dsub+0x5a4>
   1754a:	2040      	movs	r0, #64	; 0x40
   1754c:	1ac3      	subs	r3, r0, r3
   1754e:	4099      	lsls	r1, r3
   17550:	430a      	orrs	r2, r1
   17552:	1e51      	subs	r1, r2, #1
   17554:	418a      	sbcs	r2, r1
   17556:	2100      	movs	r1, #0
   17558:	4317      	orrs	r7, r2
   1755a:	e692      	b.n	17282 <__aeabi_dsub+0x1be>
   1755c:	2e00      	cmp	r6, #0
   1755e:	d114      	bne.n	1758a <__aeabi_dsub+0x4c6>
   17560:	0026      	movs	r6, r4
   17562:	4650      	mov	r0, sl
   17564:	4306      	orrs	r6, r0
   17566:	d062      	beq.n	1762e <__aeabi_dsub+0x56a>
   17568:	43db      	mvns	r3, r3
   1756a:	2b00      	cmp	r3, #0
   1756c:	d15c      	bne.n	17628 <__aeabi_dsub+0x564>
   1756e:	1887      	adds	r7, r0, r2
   17570:	4297      	cmp	r7, r2
   17572:	4192      	sbcs	r2, r2
   17574:	1864      	adds	r4, r4, r1
   17576:	4252      	negs	r2, r2
   17578:	18a4      	adds	r4, r4, r2
   1757a:	4666      	mov	r6, ip
   1757c:	e687      	b.n	1728e <__aeabi_dsub+0x1ca>
   1757e:	4650      	mov	r0, sl
   17580:	4320      	orrs	r0, r4
   17582:	1e44      	subs	r4, r0, #1
   17584:	41a0      	sbcs	r0, r4
   17586:	2400      	movs	r4, #0
   17588:	e760      	b.n	1744c <__aeabi_dsub+0x388>
   1758a:	4e57      	ldr	r6, [pc, #348]	; (176e8 <__aeabi_dsub+0x624>)
   1758c:	45b4      	cmp	ip, r6
   1758e:	d04e      	beq.n	1762e <__aeabi_dsub+0x56a>
   17590:	2680      	movs	r6, #128	; 0x80
   17592:	0436      	lsls	r6, r6, #16
   17594:	425b      	negs	r3, r3
   17596:	4334      	orrs	r4, r6
   17598:	2b38      	cmp	r3, #56	; 0x38
   1759a:	dd00      	ble.n	1759e <__aeabi_dsub+0x4da>
   1759c:	e07f      	b.n	1769e <__aeabi_dsub+0x5da>
   1759e:	2b1f      	cmp	r3, #31
   175a0:	dd00      	ble.n	175a4 <__aeabi_dsub+0x4e0>
   175a2:	e08b      	b.n	176bc <__aeabi_dsub+0x5f8>
   175a4:	2620      	movs	r6, #32
   175a6:	0027      	movs	r7, r4
   175a8:	4650      	mov	r0, sl
   175aa:	1af6      	subs	r6, r6, r3
   175ac:	40b7      	lsls	r7, r6
   175ae:	40d8      	lsrs	r0, r3
   175b0:	4307      	orrs	r7, r0
   175b2:	4650      	mov	r0, sl
   175b4:	40b0      	lsls	r0, r6
   175b6:	1e46      	subs	r6, r0, #1
   175b8:	41b0      	sbcs	r0, r6
   175ba:	4307      	orrs	r7, r0
   175bc:	40dc      	lsrs	r4, r3
   175be:	18bf      	adds	r7, r7, r2
   175c0:	e7d6      	b.n	17570 <__aeabi_dsub+0x4ac>
   175c2:	000d      	movs	r5, r1
   175c4:	4315      	orrs	r5, r2
   175c6:	d100      	bne.n	175ca <__aeabi_dsub+0x506>
   175c8:	e602      	b.n	171d0 <__aeabi_dsub+0x10c>
   175ca:	4650      	mov	r0, sl
   175cc:	1a80      	subs	r0, r0, r2
   175ce:	4582      	cmp	sl, r0
   175d0:	41bf      	sbcs	r7, r7
   175d2:	1a65      	subs	r5, r4, r1
   175d4:	427f      	negs	r7, r7
   175d6:	1bed      	subs	r5, r5, r7
   175d8:	4684      	mov	ip, r0
   175da:	0228      	lsls	r0, r5, #8
   175dc:	d400      	bmi.n	175e0 <__aeabi_dsub+0x51c>
   175de:	e68d      	b.n	172fc <__aeabi_dsub+0x238>
   175e0:	4650      	mov	r0, sl
   175e2:	1a17      	subs	r7, r2, r0
   175e4:	42ba      	cmp	r2, r7
   175e6:	4192      	sbcs	r2, r2
   175e8:	1b0c      	subs	r4, r1, r4
   175ea:	4252      	negs	r2, r2
   175ec:	1aa4      	subs	r4, r4, r2
   175ee:	4698      	mov	r8, r3
   175f0:	e5ee      	b.n	171d0 <__aeabi_dsub+0x10c>
   175f2:	000d      	movs	r5, r1
   175f4:	4315      	orrs	r5, r2
   175f6:	d100      	bne.n	175fa <__aeabi_dsub+0x536>
   175f8:	e76b      	b.n	174d2 <__aeabi_dsub+0x40e>
   175fa:	4650      	mov	r0, sl
   175fc:	0767      	lsls	r7, r4, #29
   175fe:	08c0      	lsrs	r0, r0, #3
   17600:	4307      	orrs	r7, r0
   17602:	2080      	movs	r0, #128	; 0x80
   17604:	08e4      	lsrs	r4, r4, #3
   17606:	0300      	lsls	r0, r0, #12
   17608:	4204      	tst	r4, r0
   1760a:	d007      	beq.n	1761c <__aeabi_dsub+0x558>
   1760c:	08cd      	lsrs	r5, r1, #3
   1760e:	4205      	tst	r5, r0
   17610:	d104      	bne.n	1761c <__aeabi_dsub+0x558>
   17612:	002c      	movs	r4, r5
   17614:	4698      	mov	r8, r3
   17616:	08d7      	lsrs	r7, r2, #3
   17618:	0749      	lsls	r1, r1, #29
   1761a:	430f      	orrs	r7, r1
   1761c:	0f7b      	lsrs	r3, r7, #29
   1761e:	00e4      	lsls	r4, r4, #3
   17620:	431c      	orrs	r4, r3
   17622:	00ff      	lsls	r7, r7, #3
   17624:	4e30      	ldr	r6, [pc, #192]	; (176e8 <__aeabi_dsub+0x624>)
   17626:	e5d3      	b.n	171d0 <__aeabi_dsub+0x10c>
   17628:	4e2f      	ldr	r6, [pc, #188]	; (176e8 <__aeabi_dsub+0x624>)
   1762a:	45b4      	cmp	ip, r6
   1762c:	d1b4      	bne.n	17598 <__aeabi_dsub+0x4d4>
   1762e:	000c      	movs	r4, r1
   17630:	0017      	movs	r7, r2
   17632:	4666      	mov	r6, ip
   17634:	e5cc      	b.n	171d0 <__aeabi_dsub+0x10c>
   17636:	2700      	movs	r7, #0
   17638:	2400      	movs	r4, #0
   1763a:	e5e8      	b.n	1720e <__aeabi_dsub+0x14a>
   1763c:	2b00      	cmp	r3, #0
   1763e:	d039      	beq.n	176b4 <__aeabi_dsub+0x5f0>
   17640:	000b      	movs	r3, r1
   17642:	4313      	orrs	r3, r2
   17644:	d100      	bne.n	17648 <__aeabi_dsub+0x584>
   17646:	e744      	b.n	174d2 <__aeabi_dsub+0x40e>
   17648:	08c0      	lsrs	r0, r0, #3
   1764a:	0767      	lsls	r7, r4, #29
   1764c:	4307      	orrs	r7, r0
   1764e:	2080      	movs	r0, #128	; 0x80
   17650:	08e4      	lsrs	r4, r4, #3
   17652:	0300      	lsls	r0, r0, #12
   17654:	4204      	tst	r4, r0
   17656:	d0e1      	beq.n	1761c <__aeabi_dsub+0x558>
   17658:	08cb      	lsrs	r3, r1, #3
   1765a:	4203      	tst	r3, r0
   1765c:	d1de      	bne.n	1761c <__aeabi_dsub+0x558>
   1765e:	08d7      	lsrs	r7, r2, #3
   17660:	0749      	lsls	r1, r1, #29
   17662:	430f      	orrs	r7, r1
   17664:	001c      	movs	r4, r3
   17666:	e7d9      	b.n	1761c <__aeabi_dsub+0x558>
   17668:	2100      	movs	r1, #0
   1766a:	e771      	b.n	17550 <__aeabi_dsub+0x48c>
   1766c:	2500      	movs	r5, #0
   1766e:	2700      	movs	r7, #0
   17670:	e5e9      	b.n	17246 <__aeabi_dsub+0x182>
   17672:	002e      	movs	r6, r5
   17674:	0027      	movs	r7, r4
   17676:	3e20      	subs	r6, #32
   17678:	40f7      	lsrs	r7, r6
   1767a:	2d20      	cmp	r5, #32
   1767c:	d02f      	beq.n	176de <__aeabi_dsub+0x61a>
   1767e:	2640      	movs	r6, #64	; 0x40
   17680:	1b75      	subs	r5, r6, r5
   17682:	40ac      	lsls	r4, r5
   17684:	4650      	mov	r0, sl
   17686:	4320      	orrs	r0, r4
   17688:	1e44      	subs	r4, r0, #1
   1768a:	41a0      	sbcs	r0, r4
   1768c:	2400      	movs	r4, #0
   1768e:	4338      	orrs	r0, r7
   17690:	e6dc      	b.n	1744c <__aeabi_dsub+0x388>
   17692:	2480      	movs	r4, #128	; 0x80
   17694:	2500      	movs	r5, #0
   17696:	0324      	lsls	r4, r4, #12
   17698:	4e13      	ldr	r6, [pc, #76]	; (176e8 <__aeabi_dsub+0x624>)
   1769a:	2700      	movs	r7, #0
   1769c:	e5d3      	b.n	17246 <__aeabi_dsub+0x182>
   1769e:	4650      	mov	r0, sl
   176a0:	4320      	orrs	r0, r4
   176a2:	0007      	movs	r7, r0
   176a4:	1e78      	subs	r0, r7, #1
   176a6:	4187      	sbcs	r7, r0
   176a8:	2400      	movs	r4, #0
   176aa:	18bf      	adds	r7, r7, r2
   176ac:	e760      	b.n	17570 <__aeabi_dsub+0x4ac>
   176ae:	000c      	movs	r4, r1
   176b0:	0017      	movs	r7, r2
   176b2:	e58d      	b.n	171d0 <__aeabi_dsub+0x10c>
   176b4:	000c      	movs	r4, r1
   176b6:	0017      	movs	r7, r2
   176b8:	4e0b      	ldr	r6, [pc, #44]	; (176e8 <__aeabi_dsub+0x624>)
   176ba:	e589      	b.n	171d0 <__aeabi_dsub+0x10c>
   176bc:	001e      	movs	r6, r3
   176be:	0027      	movs	r7, r4
   176c0:	3e20      	subs	r6, #32
   176c2:	40f7      	lsrs	r7, r6
   176c4:	2b20      	cmp	r3, #32
   176c6:	d00c      	beq.n	176e2 <__aeabi_dsub+0x61e>
   176c8:	2640      	movs	r6, #64	; 0x40
   176ca:	1af3      	subs	r3, r6, r3
   176cc:	409c      	lsls	r4, r3
   176ce:	4650      	mov	r0, sl
   176d0:	4320      	orrs	r0, r4
   176d2:	1e44      	subs	r4, r0, #1
   176d4:	41a0      	sbcs	r0, r4
   176d6:	4307      	orrs	r7, r0
   176d8:	2400      	movs	r4, #0
   176da:	18bf      	adds	r7, r7, r2
   176dc:	e748      	b.n	17570 <__aeabi_dsub+0x4ac>
   176de:	2400      	movs	r4, #0
   176e0:	e7d0      	b.n	17684 <__aeabi_dsub+0x5c0>
   176e2:	2400      	movs	r4, #0
   176e4:	e7f3      	b.n	176ce <__aeabi_dsub+0x60a>
   176e6:	46c0      	nop			; (mov r8, r8)
   176e8:	000007ff 	.word	0x000007ff
   176ec:	ff7fffff 	.word	0xff7fffff

000176f0 <__aeabi_d2iz>:
   176f0:	b530      	push	{r4, r5, lr}
   176f2:	4d13      	ldr	r5, [pc, #76]	; (17740 <__aeabi_d2iz+0x50>)
   176f4:	030a      	lsls	r2, r1, #12
   176f6:	004b      	lsls	r3, r1, #1
   176f8:	0b12      	lsrs	r2, r2, #12
   176fa:	0d5b      	lsrs	r3, r3, #21
   176fc:	0fc9      	lsrs	r1, r1, #31
   176fe:	2400      	movs	r4, #0
   17700:	42ab      	cmp	r3, r5
   17702:	dd10      	ble.n	17726 <__aeabi_d2iz+0x36>
   17704:	4c0f      	ldr	r4, [pc, #60]	; (17744 <__aeabi_d2iz+0x54>)
   17706:	42a3      	cmp	r3, r4
   17708:	dc0f      	bgt.n	1772a <__aeabi_d2iz+0x3a>
   1770a:	2480      	movs	r4, #128	; 0x80
   1770c:	4d0e      	ldr	r5, [pc, #56]	; (17748 <__aeabi_d2iz+0x58>)
   1770e:	0364      	lsls	r4, r4, #13
   17710:	4322      	orrs	r2, r4
   17712:	1aed      	subs	r5, r5, r3
   17714:	2d1f      	cmp	r5, #31
   17716:	dd0b      	ble.n	17730 <__aeabi_d2iz+0x40>
   17718:	480c      	ldr	r0, [pc, #48]	; (1774c <__aeabi_d2iz+0x5c>)
   1771a:	1ac3      	subs	r3, r0, r3
   1771c:	40da      	lsrs	r2, r3
   1771e:	4254      	negs	r4, r2
   17720:	2900      	cmp	r1, #0
   17722:	d100      	bne.n	17726 <__aeabi_d2iz+0x36>
   17724:	0014      	movs	r4, r2
   17726:	0020      	movs	r0, r4
   17728:	bd30      	pop	{r4, r5, pc}
   1772a:	4b09      	ldr	r3, [pc, #36]	; (17750 <__aeabi_d2iz+0x60>)
   1772c:	18cc      	adds	r4, r1, r3
   1772e:	e7fa      	b.n	17726 <__aeabi_d2iz+0x36>
   17730:	4c08      	ldr	r4, [pc, #32]	; (17754 <__aeabi_d2iz+0x64>)
   17732:	40e8      	lsrs	r0, r5
   17734:	46a4      	mov	ip, r4
   17736:	4463      	add	r3, ip
   17738:	409a      	lsls	r2, r3
   1773a:	4302      	orrs	r2, r0
   1773c:	e7ef      	b.n	1771e <__aeabi_d2iz+0x2e>
   1773e:	46c0      	nop			; (mov r8, r8)
   17740:	000003fe 	.word	0x000003fe
   17744:	0000041d 	.word	0x0000041d
   17748:	00000433 	.word	0x00000433
   1774c:	00000413 	.word	0x00000413
   17750:	7fffffff 	.word	0x7fffffff
   17754:	fffffbed 	.word	0xfffffbed

00017758 <__aeabi_ui2d>:
   17758:	b510      	push	{r4, lr}
   1775a:	1e04      	subs	r4, r0, #0
   1775c:	d028      	beq.n	177b0 <__aeabi_ui2d+0x58>
   1775e:	f000 f885 	bl	1786c <__clzsi2>
   17762:	4b15      	ldr	r3, [pc, #84]	; (177b8 <__aeabi_ui2d+0x60>)
   17764:	4a15      	ldr	r2, [pc, #84]	; (177bc <__aeabi_ui2d+0x64>)
   17766:	1a1b      	subs	r3, r3, r0
   17768:	1ad2      	subs	r2, r2, r3
   1776a:	2a1f      	cmp	r2, #31
   1776c:	dd15      	ble.n	1779a <__aeabi_ui2d+0x42>
   1776e:	4a14      	ldr	r2, [pc, #80]	; (177c0 <__aeabi_ui2d+0x68>)
   17770:	1ad2      	subs	r2, r2, r3
   17772:	4094      	lsls	r4, r2
   17774:	2200      	movs	r2, #0
   17776:	0324      	lsls	r4, r4, #12
   17778:	055b      	lsls	r3, r3, #21
   1777a:	0b24      	lsrs	r4, r4, #12
   1777c:	0d5b      	lsrs	r3, r3, #21
   1777e:	2100      	movs	r1, #0
   17780:	0010      	movs	r0, r2
   17782:	0324      	lsls	r4, r4, #12
   17784:	0d0a      	lsrs	r2, r1, #20
   17786:	0b24      	lsrs	r4, r4, #12
   17788:	0512      	lsls	r2, r2, #20
   1778a:	4322      	orrs	r2, r4
   1778c:	4c0d      	ldr	r4, [pc, #52]	; (177c4 <__aeabi_ui2d+0x6c>)
   1778e:	051b      	lsls	r3, r3, #20
   17790:	4022      	ands	r2, r4
   17792:	4313      	orrs	r3, r2
   17794:	005b      	lsls	r3, r3, #1
   17796:	0859      	lsrs	r1, r3, #1
   17798:	bd10      	pop	{r4, pc}
   1779a:	0021      	movs	r1, r4
   1779c:	4091      	lsls	r1, r2
   1779e:	000a      	movs	r2, r1
   177a0:	210b      	movs	r1, #11
   177a2:	1a08      	subs	r0, r1, r0
   177a4:	40c4      	lsrs	r4, r0
   177a6:	055b      	lsls	r3, r3, #21
   177a8:	0324      	lsls	r4, r4, #12
   177aa:	0b24      	lsrs	r4, r4, #12
   177ac:	0d5b      	lsrs	r3, r3, #21
   177ae:	e7e6      	b.n	1777e <__aeabi_ui2d+0x26>
   177b0:	2300      	movs	r3, #0
   177b2:	2400      	movs	r4, #0
   177b4:	2200      	movs	r2, #0
   177b6:	e7e2      	b.n	1777e <__aeabi_ui2d+0x26>
   177b8:	0000041e 	.word	0x0000041e
   177bc:	00000433 	.word	0x00000433
   177c0:	00000413 	.word	0x00000413
   177c4:	800fffff 	.word	0x800fffff

000177c8 <__aeabi_f2d>:
   177c8:	0041      	lsls	r1, r0, #1
   177ca:	0e09      	lsrs	r1, r1, #24
   177cc:	1c4b      	adds	r3, r1, #1
   177ce:	b570      	push	{r4, r5, r6, lr}
   177d0:	b2db      	uxtb	r3, r3
   177d2:	0246      	lsls	r6, r0, #9
   177d4:	0a75      	lsrs	r5, r6, #9
   177d6:	0fc4      	lsrs	r4, r0, #31
   177d8:	2b01      	cmp	r3, #1
   177da:	dd14      	ble.n	17806 <__aeabi_f2d+0x3e>
   177dc:	23e0      	movs	r3, #224	; 0xe0
   177de:	009b      	lsls	r3, r3, #2
   177e0:	076d      	lsls	r5, r5, #29
   177e2:	0b36      	lsrs	r6, r6, #12
   177e4:	18cb      	adds	r3, r1, r3
   177e6:	2100      	movs	r1, #0
   177e8:	0d0a      	lsrs	r2, r1, #20
   177ea:	0028      	movs	r0, r5
   177ec:	0512      	lsls	r2, r2, #20
   177ee:	4d1c      	ldr	r5, [pc, #112]	; (17860 <__aeabi_f2d+0x98>)
   177f0:	4332      	orrs	r2, r6
   177f2:	055b      	lsls	r3, r3, #21
   177f4:	402a      	ands	r2, r5
   177f6:	085b      	lsrs	r3, r3, #1
   177f8:	4313      	orrs	r3, r2
   177fa:	005b      	lsls	r3, r3, #1
   177fc:	07e4      	lsls	r4, r4, #31
   177fe:	085b      	lsrs	r3, r3, #1
   17800:	4323      	orrs	r3, r4
   17802:	0019      	movs	r1, r3
   17804:	bd70      	pop	{r4, r5, r6, pc}
   17806:	2900      	cmp	r1, #0
   17808:	d114      	bne.n	17834 <__aeabi_f2d+0x6c>
   1780a:	2d00      	cmp	r5, #0
   1780c:	d01e      	beq.n	1784c <__aeabi_f2d+0x84>
   1780e:	0028      	movs	r0, r5
   17810:	f000 f82c 	bl	1786c <__clzsi2>
   17814:	280a      	cmp	r0, #10
   17816:	dc1c      	bgt.n	17852 <__aeabi_f2d+0x8a>
   17818:	230b      	movs	r3, #11
   1781a:	002a      	movs	r2, r5
   1781c:	1a1b      	subs	r3, r3, r0
   1781e:	40da      	lsrs	r2, r3
   17820:	0003      	movs	r3, r0
   17822:	3315      	adds	r3, #21
   17824:	409d      	lsls	r5, r3
   17826:	4b0f      	ldr	r3, [pc, #60]	; (17864 <__aeabi_f2d+0x9c>)
   17828:	0312      	lsls	r2, r2, #12
   1782a:	1a1b      	subs	r3, r3, r0
   1782c:	055b      	lsls	r3, r3, #21
   1782e:	0b16      	lsrs	r6, r2, #12
   17830:	0d5b      	lsrs	r3, r3, #21
   17832:	e7d8      	b.n	177e6 <__aeabi_f2d+0x1e>
   17834:	2d00      	cmp	r5, #0
   17836:	d006      	beq.n	17846 <__aeabi_f2d+0x7e>
   17838:	0b32      	lsrs	r2, r6, #12
   1783a:	2680      	movs	r6, #128	; 0x80
   1783c:	0336      	lsls	r6, r6, #12
   1783e:	076d      	lsls	r5, r5, #29
   17840:	4316      	orrs	r6, r2
   17842:	4b09      	ldr	r3, [pc, #36]	; (17868 <__aeabi_f2d+0xa0>)
   17844:	e7cf      	b.n	177e6 <__aeabi_f2d+0x1e>
   17846:	4b08      	ldr	r3, [pc, #32]	; (17868 <__aeabi_f2d+0xa0>)
   17848:	2600      	movs	r6, #0
   1784a:	e7cc      	b.n	177e6 <__aeabi_f2d+0x1e>
   1784c:	2300      	movs	r3, #0
   1784e:	2600      	movs	r6, #0
   17850:	e7c9      	b.n	177e6 <__aeabi_f2d+0x1e>
   17852:	0003      	movs	r3, r0
   17854:	002a      	movs	r2, r5
   17856:	3b0b      	subs	r3, #11
   17858:	409a      	lsls	r2, r3
   1785a:	2500      	movs	r5, #0
   1785c:	e7e3      	b.n	17826 <__aeabi_f2d+0x5e>
   1785e:	46c0      	nop			; (mov r8, r8)
   17860:	800fffff 	.word	0x800fffff
   17864:	00000389 	.word	0x00000389
   17868:	000007ff 	.word	0x000007ff

0001786c <__clzsi2>:
   1786c:	211c      	movs	r1, #28
   1786e:	2301      	movs	r3, #1
   17870:	041b      	lsls	r3, r3, #16
   17872:	4298      	cmp	r0, r3
   17874:	d301      	bcc.n	1787a <__clzsi2+0xe>
   17876:	0c00      	lsrs	r0, r0, #16
   17878:	3910      	subs	r1, #16
   1787a:	0a1b      	lsrs	r3, r3, #8
   1787c:	4298      	cmp	r0, r3
   1787e:	d301      	bcc.n	17884 <__clzsi2+0x18>
   17880:	0a00      	lsrs	r0, r0, #8
   17882:	3908      	subs	r1, #8
   17884:	091b      	lsrs	r3, r3, #4
   17886:	4298      	cmp	r0, r3
   17888:	d301      	bcc.n	1788e <__clzsi2+0x22>
   1788a:	0900      	lsrs	r0, r0, #4
   1788c:	3904      	subs	r1, #4
   1788e:	a202      	add	r2, pc, #8	; (adr r2, 17898 <__clzsi2+0x2c>)
   17890:	5c10      	ldrb	r0, [r2, r0]
   17892:	1840      	adds	r0, r0, r1
   17894:	4770      	bx	lr
   17896:	46c0      	nop			; (mov r8, r8)
   17898:	02020304 	.word	0x02020304
   1789c:	01010101 	.word	0x01010101
	...

000178a8 <__clzdi2>:
   178a8:	b510      	push	{r4, lr}
   178aa:	2900      	cmp	r1, #0
   178ac:	d103      	bne.n	178b6 <__clzdi2+0xe>
   178ae:	f7ff ffdd 	bl	1786c <__clzsi2>
   178b2:	3020      	adds	r0, #32
   178b4:	e002      	b.n	178bc <__clzdi2+0x14>
   178b6:	1c08      	adds	r0, r1, #0
   178b8:	f7ff ffd8 	bl	1786c <__clzsi2>
   178bc:	bd10      	pop	{r4, pc}
   178be:	46c0      	nop			; (mov r8, r8)

000178c0 <__aeabi_d2uiz>:
   178c0:	b570      	push	{r4, r5, r6, lr}
   178c2:	2200      	movs	r2, #0
   178c4:	4b0c      	ldr	r3, [pc, #48]	; (178f8 <__aeabi_d2uiz+0x38>)
   178c6:	0004      	movs	r4, r0
   178c8:	000d      	movs	r5, r1
   178ca:	f000 f84b 	bl	17964 <__aeabi_dcmpge>
   178ce:	2800      	cmp	r0, #0
   178d0:	d104      	bne.n	178dc <__aeabi_d2uiz+0x1c>
   178d2:	0020      	movs	r0, r4
   178d4:	0029      	movs	r1, r5
   178d6:	f7ff ff0b 	bl	176f0 <__aeabi_d2iz>
   178da:	bd70      	pop	{r4, r5, r6, pc}
   178dc:	4b06      	ldr	r3, [pc, #24]	; (178f8 <__aeabi_d2uiz+0x38>)
   178de:	2200      	movs	r2, #0
   178e0:	0020      	movs	r0, r4
   178e2:	0029      	movs	r1, r5
   178e4:	f7ff fbee 	bl	170c4 <__aeabi_dsub>
   178e8:	f7ff ff02 	bl	176f0 <__aeabi_d2iz>
   178ec:	2380      	movs	r3, #128	; 0x80
   178ee:	061b      	lsls	r3, r3, #24
   178f0:	469c      	mov	ip, r3
   178f2:	4460      	add	r0, ip
   178f4:	e7f1      	b.n	178da <__aeabi_d2uiz+0x1a>
   178f6:	46c0      	nop			; (mov r8, r8)
   178f8:	41e00000 	.word	0x41e00000

000178fc <__aeabi_cdrcmple>:
   178fc:	4684      	mov	ip, r0
   178fe:	1c10      	adds	r0, r2, #0
   17900:	4662      	mov	r2, ip
   17902:	468c      	mov	ip, r1
   17904:	1c19      	adds	r1, r3, #0
   17906:	4663      	mov	r3, ip
   17908:	e000      	b.n	1790c <__aeabi_cdcmpeq>
   1790a:	46c0      	nop			; (mov r8, r8)

0001790c <__aeabi_cdcmpeq>:
   1790c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1790e:	f000 f8d1 	bl	17ab4 <__ledf2>
   17912:	2800      	cmp	r0, #0
   17914:	d401      	bmi.n	1791a <__aeabi_cdcmpeq+0xe>
   17916:	2100      	movs	r1, #0
   17918:	42c8      	cmn	r0, r1
   1791a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0001791c <__aeabi_dcmpeq>:
   1791c:	b510      	push	{r4, lr}
   1791e:	f000 f82b 	bl	17978 <__eqdf2>
   17922:	4240      	negs	r0, r0
   17924:	3001      	adds	r0, #1
   17926:	bd10      	pop	{r4, pc}

00017928 <__aeabi_dcmplt>:
   17928:	b510      	push	{r4, lr}
   1792a:	f000 f8c3 	bl	17ab4 <__ledf2>
   1792e:	2800      	cmp	r0, #0
   17930:	db01      	blt.n	17936 <__aeabi_dcmplt+0xe>
   17932:	2000      	movs	r0, #0
   17934:	bd10      	pop	{r4, pc}
   17936:	2001      	movs	r0, #1
   17938:	bd10      	pop	{r4, pc}
   1793a:	46c0      	nop			; (mov r8, r8)

0001793c <__aeabi_dcmple>:
   1793c:	b510      	push	{r4, lr}
   1793e:	f000 f8b9 	bl	17ab4 <__ledf2>
   17942:	2800      	cmp	r0, #0
   17944:	dd01      	ble.n	1794a <__aeabi_dcmple+0xe>
   17946:	2000      	movs	r0, #0
   17948:	bd10      	pop	{r4, pc}
   1794a:	2001      	movs	r0, #1
   1794c:	bd10      	pop	{r4, pc}
   1794e:	46c0      	nop			; (mov r8, r8)

00017950 <__aeabi_dcmpgt>:
   17950:	b510      	push	{r4, lr}
   17952:	f000 f84b 	bl	179ec <__gedf2>
   17956:	2800      	cmp	r0, #0
   17958:	dc01      	bgt.n	1795e <__aeabi_dcmpgt+0xe>
   1795a:	2000      	movs	r0, #0
   1795c:	bd10      	pop	{r4, pc}
   1795e:	2001      	movs	r0, #1
   17960:	bd10      	pop	{r4, pc}
   17962:	46c0      	nop			; (mov r8, r8)

00017964 <__aeabi_dcmpge>:
   17964:	b510      	push	{r4, lr}
   17966:	f000 f841 	bl	179ec <__gedf2>
   1796a:	2800      	cmp	r0, #0
   1796c:	da01      	bge.n	17972 <__aeabi_dcmpge+0xe>
   1796e:	2000      	movs	r0, #0
   17970:	bd10      	pop	{r4, pc}
   17972:	2001      	movs	r0, #1
   17974:	bd10      	pop	{r4, pc}
   17976:	46c0      	nop			; (mov r8, r8)

00017978 <__eqdf2>:
   17978:	b5f0      	push	{r4, r5, r6, r7, lr}
   1797a:	464f      	mov	r7, r9
   1797c:	4646      	mov	r6, r8
   1797e:	46d6      	mov	lr, sl
   17980:	005c      	lsls	r4, r3, #1
   17982:	b5c0      	push	{r6, r7, lr}
   17984:	031f      	lsls	r7, r3, #12
   17986:	0fdb      	lsrs	r3, r3, #31
   17988:	469a      	mov	sl, r3
   1798a:	4b17      	ldr	r3, [pc, #92]	; (179e8 <__eqdf2+0x70>)
   1798c:	030e      	lsls	r6, r1, #12
   1798e:	004d      	lsls	r5, r1, #1
   17990:	4684      	mov	ip, r0
   17992:	4680      	mov	r8, r0
   17994:	0b36      	lsrs	r6, r6, #12
   17996:	0d6d      	lsrs	r5, r5, #21
   17998:	0fc9      	lsrs	r1, r1, #31
   1799a:	4691      	mov	r9, r2
   1799c:	0b3f      	lsrs	r7, r7, #12
   1799e:	0d64      	lsrs	r4, r4, #21
   179a0:	2001      	movs	r0, #1
   179a2:	429d      	cmp	r5, r3
   179a4:	d008      	beq.n	179b8 <__eqdf2+0x40>
   179a6:	429c      	cmp	r4, r3
   179a8:	d001      	beq.n	179ae <__eqdf2+0x36>
   179aa:	42a5      	cmp	r5, r4
   179ac:	d00b      	beq.n	179c6 <__eqdf2+0x4e>
   179ae:	bc1c      	pop	{r2, r3, r4}
   179b0:	4690      	mov	r8, r2
   179b2:	4699      	mov	r9, r3
   179b4:	46a2      	mov	sl, r4
   179b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   179b8:	4663      	mov	r3, ip
   179ba:	4333      	orrs	r3, r6
   179bc:	d1f7      	bne.n	179ae <__eqdf2+0x36>
   179be:	42ac      	cmp	r4, r5
   179c0:	d1f5      	bne.n	179ae <__eqdf2+0x36>
   179c2:	433a      	orrs	r2, r7
   179c4:	d1f3      	bne.n	179ae <__eqdf2+0x36>
   179c6:	2001      	movs	r0, #1
   179c8:	42be      	cmp	r6, r7
   179ca:	d1f0      	bne.n	179ae <__eqdf2+0x36>
   179cc:	45c8      	cmp	r8, r9
   179ce:	d1ee      	bne.n	179ae <__eqdf2+0x36>
   179d0:	4551      	cmp	r1, sl
   179d2:	d007      	beq.n	179e4 <__eqdf2+0x6c>
   179d4:	2d00      	cmp	r5, #0
   179d6:	d1ea      	bne.n	179ae <__eqdf2+0x36>
   179d8:	4663      	mov	r3, ip
   179da:	431e      	orrs	r6, r3
   179dc:	0030      	movs	r0, r6
   179de:	1e46      	subs	r6, r0, #1
   179e0:	41b0      	sbcs	r0, r6
   179e2:	e7e4      	b.n	179ae <__eqdf2+0x36>
   179e4:	2000      	movs	r0, #0
   179e6:	e7e2      	b.n	179ae <__eqdf2+0x36>
   179e8:	000007ff 	.word	0x000007ff

000179ec <__gedf2>:
   179ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   179ee:	4645      	mov	r5, r8
   179f0:	46de      	mov	lr, fp
   179f2:	4657      	mov	r7, sl
   179f4:	464e      	mov	r6, r9
   179f6:	b5e0      	push	{r5, r6, r7, lr}
   179f8:	031f      	lsls	r7, r3, #12
   179fa:	0b3d      	lsrs	r5, r7, #12
   179fc:	4f2c      	ldr	r7, [pc, #176]	; (17ab0 <__gedf2+0xc4>)
   179fe:	030e      	lsls	r6, r1, #12
   17a00:	004c      	lsls	r4, r1, #1
   17a02:	46ab      	mov	fp, r5
   17a04:	005d      	lsls	r5, r3, #1
   17a06:	4684      	mov	ip, r0
   17a08:	0b36      	lsrs	r6, r6, #12
   17a0a:	0d64      	lsrs	r4, r4, #21
   17a0c:	0fc9      	lsrs	r1, r1, #31
   17a0e:	4690      	mov	r8, r2
   17a10:	0d6d      	lsrs	r5, r5, #21
   17a12:	0fdb      	lsrs	r3, r3, #31
   17a14:	42bc      	cmp	r4, r7
   17a16:	d02a      	beq.n	17a6e <__gedf2+0x82>
   17a18:	4f25      	ldr	r7, [pc, #148]	; (17ab0 <__gedf2+0xc4>)
   17a1a:	42bd      	cmp	r5, r7
   17a1c:	d02d      	beq.n	17a7a <__gedf2+0x8e>
   17a1e:	2c00      	cmp	r4, #0
   17a20:	d10f      	bne.n	17a42 <__gedf2+0x56>
   17a22:	4330      	orrs	r0, r6
   17a24:	0007      	movs	r7, r0
   17a26:	4681      	mov	r9, r0
   17a28:	4278      	negs	r0, r7
   17a2a:	4178      	adcs	r0, r7
   17a2c:	b2c0      	uxtb	r0, r0
   17a2e:	2d00      	cmp	r5, #0
   17a30:	d117      	bne.n	17a62 <__gedf2+0x76>
   17a32:	465f      	mov	r7, fp
   17a34:	433a      	orrs	r2, r7
   17a36:	d114      	bne.n	17a62 <__gedf2+0x76>
   17a38:	464b      	mov	r3, r9
   17a3a:	2000      	movs	r0, #0
   17a3c:	2b00      	cmp	r3, #0
   17a3e:	d00a      	beq.n	17a56 <__gedf2+0x6a>
   17a40:	e006      	b.n	17a50 <__gedf2+0x64>
   17a42:	2d00      	cmp	r5, #0
   17a44:	d102      	bne.n	17a4c <__gedf2+0x60>
   17a46:	4658      	mov	r0, fp
   17a48:	4302      	orrs	r2, r0
   17a4a:	d001      	beq.n	17a50 <__gedf2+0x64>
   17a4c:	4299      	cmp	r1, r3
   17a4e:	d018      	beq.n	17a82 <__gedf2+0x96>
   17a50:	4248      	negs	r0, r1
   17a52:	2101      	movs	r1, #1
   17a54:	4308      	orrs	r0, r1
   17a56:	bc3c      	pop	{r2, r3, r4, r5}
   17a58:	4690      	mov	r8, r2
   17a5a:	4699      	mov	r9, r3
   17a5c:	46a2      	mov	sl, r4
   17a5e:	46ab      	mov	fp, r5
   17a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17a62:	2800      	cmp	r0, #0
   17a64:	d0f2      	beq.n	17a4c <__gedf2+0x60>
   17a66:	2001      	movs	r0, #1
   17a68:	3b01      	subs	r3, #1
   17a6a:	4318      	orrs	r0, r3
   17a6c:	e7f3      	b.n	17a56 <__gedf2+0x6a>
   17a6e:	0037      	movs	r7, r6
   17a70:	4307      	orrs	r7, r0
   17a72:	d0d1      	beq.n	17a18 <__gedf2+0x2c>
   17a74:	2002      	movs	r0, #2
   17a76:	4240      	negs	r0, r0
   17a78:	e7ed      	b.n	17a56 <__gedf2+0x6a>
   17a7a:	465f      	mov	r7, fp
   17a7c:	4317      	orrs	r7, r2
   17a7e:	d0ce      	beq.n	17a1e <__gedf2+0x32>
   17a80:	e7f8      	b.n	17a74 <__gedf2+0x88>
   17a82:	42ac      	cmp	r4, r5
   17a84:	dce4      	bgt.n	17a50 <__gedf2+0x64>
   17a86:	da03      	bge.n	17a90 <__gedf2+0xa4>
   17a88:	1e48      	subs	r0, r1, #1
   17a8a:	2101      	movs	r1, #1
   17a8c:	4308      	orrs	r0, r1
   17a8e:	e7e2      	b.n	17a56 <__gedf2+0x6a>
   17a90:	455e      	cmp	r6, fp
   17a92:	d8dd      	bhi.n	17a50 <__gedf2+0x64>
   17a94:	d006      	beq.n	17aa4 <__gedf2+0xb8>
   17a96:	2000      	movs	r0, #0
   17a98:	455e      	cmp	r6, fp
   17a9a:	d2dc      	bcs.n	17a56 <__gedf2+0x6a>
   17a9c:	2301      	movs	r3, #1
   17a9e:	1e48      	subs	r0, r1, #1
   17aa0:	4318      	orrs	r0, r3
   17aa2:	e7d8      	b.n	17a56 <__gedf2+0x6a>
   17aa4:	45c4      	cmp	ip, r8
   17aa6:	d8d3      	bhi.n	17a50 <__gedf2+0x64>
   17aa8:	2000      	movs	r0, #0
   17aaa:	45c4      	cmp	ip, r8
   17aac:	d3f6      	bcc.n	17a9c <__gedf2+0xb0>
   17aae:	e7d2      	b.n	17a56 <__gedf2+0x6a>
   17ab0:	000007ff 	.word	0x000007ff

00017ab4 <__ledf2>:
   17ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   17ab6:	464e      	mov	r6, r9
   17ab8:	4645      	mov	r5, r8
   17aba:	46de      	mov	lr, fp
   17abc:	4657      	mov	r7, sl
   17abe:	005c      	lsls	r4, r3, #1
   17ac0:	b5e0      	push	{r5, r6, r7, lr}
   17ac2:	031f      	lsls	r7, r3, #12
   17ac4:	0fdb      	lsrs	r3, r3, #31
   17ac6:	4699      	mov	r9, r3
   17ac8:	4b2a      	ldr	r3, [pc, #168]	; (17b74 <__ledf2+0xc0>)
   17aca:	030e      	lsls	r6, r1, #12
   17acc:	004d      	lsls	r5, r1, #1
   17ace:	0fc9      	lsrs	r1, r1, #31
   17ad0:	4684      	mov	ip, r0
   17ad2:	0b36      	lsrs	r6, r6, #12
   17ad4:	0d6d      	lsrs	r5, r5, #21
   17ad6:	468b      	mov	fp, r1
   17ad8:	4690      	mov	r8, r2
   17ada:	0b3f      	lsrs	r7, r7, #12
   17adc:	0d64      	lsrs	r4, r4, #21
   17ade:	429d      	cmp	r5, r3
   17ae0:	d020      	beq.n	17b24 <__ledf2+0x70>
   17ae2:	4b24      	ldr	r3, [pc, #144]	; (17b74 <__ledf2+0xc0>)
   17ae4:	429c      	cmp	r4, r3
   17ae6:	d022      	beq.n	17b2e <__ledf2+0x7a>
   17ae8:	2d00      	cmp	r5, #0
   17aea:	d112      	bne.n	17b12 <__ledf2+0x5e>
   17aec:	4330      	orrs	r0, r6
   17aee:	4243      	negs	r3, r0
   17af0:	4143      	adcs	r3, r0
   17af2:	b2db      	uxtb	r3, r3
   17af4:	2c00      	cmp	r4, #0
   17af6:	d01f      	beq.n	17b38 <__ledf2+0x84>
   17af8:	2b00      	cmp	r3, #0
   17afa:	d00c      	beq.n	17b16 <__ledf2+0x62>
   17afc:	464b      	mov	r3, r9
   17afe:	2001      	movs	r0, #1
   17b00:	3b01      	subs	r3, #1
   17b02:	4303      	orrs	r3, r0
   17b04:	0018      	movs	r0, r3
   17b06:	bc3c      	pop	{r2, r3, r4, r5}
   17b08:	4690      	mov	r8, r2
   17b0a:	4699      	mov	r9, r3
   17b0c:	46a2      	mov	sl, r4
   17b0e:	46ab      	mov	fp, r5
   17b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17b12:	2c00      	cmp	r4, #0
   17b14:	d016      	beq.n	17b44 <__ledf2+0x90>
   17b16:	45cb      	cmp	fp, r9
   17b18:	d017      	beq.n	17b4a <__ledf2+0x96>
   17b1a:	465b      	mov	r3, fp
   17b1c:	4259      	negs	r1, r3
   17b1e:	2301      	movs	r3, #1
   17b20:	430b      	orrs	r3, r1
   17b22:	e7ef      	b.n	17b04 <__ledf2+0x50>
   17b24:	0031      	movs	r1, r6
   17b26:	2302      	movs	r3, #2
   17b28:	4301      	orrs	r1, r0
   17b2a:	d1eb      	bne.n	17b04 <__ledf2+0x50>
   17b2c:	e7d9      	b.n	17ae2 <__ledf2+0x2e>
   17b2e:	0039      	movs	r1, r7
   17b30:	2302      	movs	r3, #2
   17b32:	4311      	orrs	r1, r2
   17b34:	d1e6      	bne.n	17b04 <__ledf2+0x50>
   17b36:	e7d7      	b.n	17ae8 <__ledf2+0x34>
   17b38:	433a      	orrs	r2, r7
   17b3a:	d1dd      	bne.n	17af8 <__ledf2+0x44>
   17b3c:	2300      	movs	r3, #0
   17b3e:	2800      	cmp	r0, #0
   17b40:	d0e0      	beq.n	17b04 <__ledf2+0x50>
   17b42:	e7ea      	b.n	17b1a <__ledf2+0x66>
   17b44:	433a      	orrs	r2, r7
   17b46:	d1e6      	bne.n	17b16 <__ledf2+0x62>
   17b48:	e7e7      	b.n	17b1a <__ledf2+0x66>
   17b4a:	42a5      	cmp	r5, r4
   17b4c:	dce5      	bgt.n	17b1a <__ledf2+0x66>
   17b4e:	db05      	blt.n	17b5c <__ledf2+0xa8>
   17b50:	42be      	cmp	r6, r7
   17b52:	d8e2      	bhi.n	17b1a <__ledf2+0x66>
   17b54:	d007      	beq.n	17b66 <__ledf2+0xb2>
   17b56:	2300      	movs	r3, #0
   17b58:	42be      	cmp	r6, r7
   17b5a:	d2d3      	bcs.n	17b04 <__ledf2+0x50>
   17b5c:	4659      	mov	r1, fp
   17b5e:	2301      	movs	r3, #1
   17b60:	3901      	subs	r1, #1
   17b62:	430b      	orrs	r3, r1
   17b64:	e7ce      	b.n	17b04 <__ledf2+0x50>
   17b66:	45c4      	cmp	ip, r8
   17b68:	d8d7      	bhi.n	17b1a <__ledf2+0x66>
   17b6a:	2300      	movs	r3, #0
   17b6c:	45c4      	cmp	ip, r8
   17b6e:	d3f5      	bcc.n	17b5c <__ledf2+0xa8>
   17b70:	e7c8      	b.n	17b04 <__ledf2+0x50>
   17b72:	46c0      	nop			; (mov r8, r8)
   17b74:	000007ff 	.word	0x000007ff

00017b78 <atoi>:
   17b78:	b510      	push	{r4, lr}
   17b7a:	220a      	movs	r2, #10
   17b7c:	2100      	movs	r1, #0
   17b7e:	f000 fdf5 	bl	1876c <strtol>
   17b82:	bd10      	pop	{r4, pc}

00017b84 <__libc_init_array>:
   17b84:	b570      	push	{r4, r5, r6, lr}
   17b86:	4e0d      	ldr	r6, [pc, #52]	; (17bbc <__libc_init_array+0x38>)
   17b88:	4d0d      	ldr	r5, [pc, #52]	; (17bc0 <__libc_init_array+0x3c>)
   17b8a:	2400      	movs	r4, #0
   17b8c:	1bad      	subs	r5, r5, r6
   17b8e:	10ad      	asrs	r5, r5, #2
   17b90:	d005      	beq.n	17b9e <__libc_init_array+0x1a>
   17b92:	00a3      	lsls	r3, r4, #2
   17b94:	58f3      	ldr	r3, [r6, r3]
   17b96:	3401      	adds	r4, #1
   17b98:	4798      	blx	r3
   17b9a:	42a5      	cmp	r5, r4
   17b9c:	d1f9      	bne.n	17b92 <__libc_init_array+0xe>
   17b9e:	f008 f877 	bl	1fc90 <_init>
   17ba2:	4e08      	ldr	r6, [pc, #32]	; (17bc4 <__libc_init_array+0x40>)
   17ba4:	4d08      	ldr	r5, [pc, #32]	; (17bc8 <__libc_init_array+0x44>)
   17ba6:	2400      	movs	r4, #0
   17ba8:	1bad      	subs	r5, r5, r6
   17baa:	10ad      	asrs	r5, r5, #2
   17bac:	d005      	beq.n	17bba <__libc_init_array+0x36>
   17bae:	00a3      	lsls	r3, r4, #2
   17bb0:	58f3      	ldr	r3, [r6, r3]
   17bb2:	3401      	adds	r4, #1
   17bb4:	4798      	blx	r3
   17bb6:	42a5      	cmp	r5, r4
   17bb8:	d1f9      	bne.n	17bae <__libc_init_array+0x2a>
   17bba:	bd70      	pop	{r4, r5, r6, pc}
   17bbc:	0001fc9c 	.word	0x0001fc9c
   17bc0:	0001fc9c 	.word	0x0001fc9c
   17bc4:	0001fc9c 	.word	0x0001fc9c
   17bc8:	0001fca4 	.word	0x0001fca4

00017bcc <malloc>:
   17bcc:	b510      	push	{r4, lr}
   17bce:	4b03      	ldr	r3, [pc, #12]	; (17bdc <malloc+0x10>)
   17bd0:	0001      	movs	r1, r0
   17bd2:	6818      	ldr	r0, [r3, #0]
   17bd4:	f000 f804 	bl	17be0 <_malloc_r>
   17bd8:	bd10      	pop	{r4, pc}
   17bda:	46c0      	nop			; (mov r8, r8)
   17bdc:	200000d8 	.word	0x200000d8

00017be0 <_malloc_r>:
   17be0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17be2:	4657      	mov	r7, sl
   17be4:	4645      	mov	r5, r8
   17be6:	46de      	mov	lr, fp
   17be8:	464e      	mov	r6, r9
   17bea:	b5e0      	push	{r5, r6, r7, lr}
   17bec:	000d      	movs	r5, r1
   17bee:	350b      	adds	r5, #11
   17bf0:	b083      	sub	sp, #12
   17bf2:	0007      	movs	r7, r0
   17bf4:	2d16      	cmp	r5, #22
   17bf6:	d800      	bhi.n	17bfa <_malloc_r+0x1a>
   17bf8:	e09f      	b.n	17d3a <_malloc_r+0x15a>
   17bfa:	2307      	movs	r3, #7
   17bfc:	439d      	bics	r5, r3
   17bfe:	d500      	bpl.n	17c02 <_malloc_r+0x22>
   17c00:	e0c4      	b.n	17d8c <_malloc_r+0x1ac>
   17c02:	42a9      	cmp	r1, r5
   17c04:	d900      	bls.n	17c08 <_malloc_r+0x28>
   17c06:	e0c1      	b.n	17d8c <_malloc_r+0x1ac>
   17c08:	f000 fb50 	bl	182ac <__malloc_lock>
   17c0c:	23f8      	movs	r3, #248	; 0xf8
   17c0e:	33ff      	adds	r3, #255	; 0xff
   17c10:	429d      	cmp	r5, r3
   17c12:	d800      	bhi.n	17c16 <_malloc_r+0x36>
   17c14:	e28f      	b.n	18136 <_malloc_r+0x556>
   17c16:	0a68      	lsrs	r0, r5, #9
   17c18:	d100      	bne.n	17c1c <_malloc_r+0x3c>
   17c1a:	e0bb      	b.n	17d94 <_malloc_r+0x1b4>
   17c1c:	2804      	cmp	r0, #4
   17c1e:	d900      	bls.n	17c22 <_malloc_r+0x42>
   17c20:	e162      	b.n	17ee8 <_malloc_r+0x308>
   17c22:	2338      	movs	r3, #56	; 0x38
   17c24:	4698      	mov	r8, r3
   17c26:	09a8      	lsrs	r0, r5, #6
   17c28:	4480      	add	r8, r0
   17c2a:	3039      	adds	r0, #57	; 0x39
   17c2c:	00c1      	lsls	r1, r0, #3
   17c2e:	4ed2      	ldr	r6, [pc, #840]	; (17f78 <_malloc_r+0x398>)
   17c30:	1871      	adds	r1, r6, r1
   17c32:	3908      	subs	r1, #8
   17c34:	68cc      	ldr	r4, [r1, #12]
   17c36:	42a1      	cmp	r1, r4
   17c38:	d019      	beq.n	17c6e <_malloc_r+0x8e>
   17c3a:	2303      	movs	r3, #3
   17c3c:	6862      	ldr	r2, [r4, #4]
   17c3e:	439a      	bics	r2, r3
   17c40:	0013      	movs	r3, r2
   17c42:	1b52      	subs	r2, r2, r5
   17c44:	2a0f      	cmp	r2, #15
   17c46:	dd00      	ble.n	17c4a <_malloc_r+0x6a>
   17c48:	e0aa      	b.n	17da0 <_malloc_r+0x1c0>
   17c4a:	2a00      	cmp	r2, #0
   17c4c:	db00      	blt.n	17c50 <_malloc_r+0x70>
   17c4e:	e088      	b.n	17d62 <_malloc_r+0x182>
   17c50:	2303      	movs	r3, #3
   17c52:	469c      	mov	ip, r3
   17c54:	e008      	b.n	17c68 <_malloc_r+0x88>
   17c56:	4662      	mov	r2, ip
   17c58:	6863      	ldr	r3, [r4, #4]
   17c5a:	4393      	bics	r3, r2
   17c5c:	1b5a      	subs	r2, r3, r5
   17c5e:	2a0f      	cmp	r2, #15
   17c60:	dd00      	ble.n	17c64 <_malloc_r+0x84>
   17c62:	e09d      	b.n	17da0 <_malloc_r+0x1c0>
   17c64:	2a00      	cmp	r2, #0
   17c66:	da7c      	bge.n	17d62 <_malloc_r+0x182>
   17c68:	68e4      	ldr	r4, [r4, #12]
   17c6a:	42a1      	cmp	r1, r4
   17c6c:	d1f3      	bne.n	17c56 <_malloc_r+0x76>
   17c6e:	0032      	movs	r2, r6
   17c70:	6934      	ldr	r4, [r6, #16]
   17c72:	3208      	adds	r2, #8
   17c74:	4294      	cmp	r4, r2
   17c76:	d100      	bne.n	17c7a <_malloc_r+0x9a>
   17c78:	e190      	b.n	17f9c <_malloc_r+0x3bc>
   17c7a:	2303      	movs	r3, #3
   17c7c:	6861      	ldr	r1, [r4, #4]
   17c7e:	4399      	bics	r1, r3
   17c80:	4689      	mov	r9, r1
   17c82:	1b49      	subs	r1, r1, r5
   17c84:	290f      	cmp	r1, #15
   17c86:	dd00      	ble.n	17c8a <_malloc_r+0xaa>
   17c88:	e162      	b.n	17f50 <_malloc_r+0x370>
   17c8a:	6172      	str	r2, [r6, #20]
   17c8c:	6132      	str	r2, [r6, #16]
   17c8e:	2900      	cmp	r1, #0
   17c90:	db00      	blt.n	17c94 <_malloc_r+0xb4>
   17c92:	e087      	b.n	17da4 <_malloc_r+0x1c4>
   17c94:	4ab9      	ldr	r2, [pc, #740]	; (17f7c <_malloc_r+0x39c>)
   17c96:	464b      	mov	r3, r9
   17c98:	4591      	cmp	r9, r2
   17c9a:	d900      	bls.n	17c9e <_malloc_r+0xbe>
   17c9c:	e130      	b.n	17f00 <_malloc_r+0x320>
   17c9e:	08db      	lsrs	r3, r3, #3
   17ca0:	3aff      	subs	r2, #255	; 0xff
   17ca2:	1099      	asrs	r1, r3, #2
   17ca4:	3aff      	subs	r2, #255	; 0xff
   17ca6:	408a      	lsls	r2, r1
   17ca8:	00db      	lsls	r3, r3, #3
   17caa:	6871      	ldr	r1, [r6, #4]
   17cac:	199b      	adds	r3, r3, r6
   17cae:	430a      	orrs	r2, r1
   17cb0:	6899      	ldr	r1, [r3, #8]
   17cb2:	6072      	str	r2, [r6, #4]
   17cb4:	60e3      	str	r3, [r4, #12]
   17cb6:	60a1      	str	r1, [r4, #8]
   17cb8:	609c      	str	r4, [r3, #8]
   17cba:	0013      	movs	r3, r2
   17cbc:	60cc      	str	r4, [r1, #12]
   17cbe:	2101      	movs	r1, #1
   17cc0:	1082      	asrs	r2, r0, #2
   17cc2:	4091      	lsls	r1, r2
   17cc4:	4299      	cmp	r1, r3
   17cc6:	d86f      	bhi.n	17da8 <_malloc_r+0x1c8>
   17cc8:	420b      	tst	r3, r1
   17cca:	d105      	bne.n	17cd8 <_malloc_r+0xf8>
   17ccc:	2203      	movs	r2, #3
   17cce:	4390      	bics	r0, r2
   17cd0:	0049      	lsls	r1, r1, #1
   17cd2:	3004      	adds	r0, #4
   17cd4:	420b      	tst	r3, r1
   17cd6:	d0fb      	beq.n	17cd0 <_malloc_r+0xf0>
   17cd8:	2303      	movs	r3, #3
   17cda:	4698      	mov	r8, r3
   17cdc:	00c3      	lsls	r3, r0, #3
   17cde:	4699      	mov	r9, r3
   17ce0:	44b1      	add	r9, r6
   17ce2:	46cc      	mov	ip, r9
   17ce4:	4682      	mov	sl, r0
   17ce6:	4663      	mov	r3, ip
   17ce8:	68dc      	ldr	r4, [r3, #12]
   17cea:	45a4      	cmp	ip, r4
   17cec:	d107      	bne.n	17cfe <_malloc_r+0x11e>
   17cee:	e157      	b.n	17fa0 <_malloc_r+0x3c0>
   17cf0:	2a00      	cmp	r2, #0
   17cf2:	db00      	blt.n	17cf6 <_malloc_r+0x116>
   17cf4:	e166      	b.n	17fc4 <_malloc_r+0x3e4>
   17cf6:	68e4      	ldr	r4, [r4, #12]
   17cf8:	45a4      	cmp	ip, r4
   17cfa:	d100      	bne.n	17cfe <_malloc_r+0x11e>
   17cfc:	e150      	b.n	17fa0 <_malloc_r+0x3c0>
   17cfe:	4642      	mov	r2, r8
   17d00:	6863      	ldr	r3, [r4, #4]
   17d02:	4393      	bics	r3, r2
   17d04:	1b5a      	subs	r2, r3, r5
   17d06:	2a0f      	cmp	r2, #15
   17d08:	ddf2      	ble.n	17cf0 <_malloc_r+0x110>
   17d0a:	2001      	movs	r0, #1
   17d0c:	4680      	mov	r8, r0
   17d0e:	1961      	adds	r1, r4, r5
   17d10:	4305      	orrs	r5, r0
   17d12:	6065      	str	r5, [r4, #4]
   17d14:	68a0      	ldr	r0, [r4, #8]
   17d16:	68e5      	ldr	r5, [r4, #12]
   17d18:	3608      	adds	r6, #8
   17d1a:	60c5      	str	r5, [r0, #12]
   17d1c:	60a8      	str	r0, [r5, #8]
   17d1e:	4640      	mov	r0, r8
   17d20:	60f1      	str	r1, [r6, #12]
   17d22:	60b1      	str	r1, [r6, #8]
   17d24:	4310      	orrs	r0, r2
   17d26:	6048      	str	r0, [r1, #4]
   17d28:	60ce      	str	r6, [r1, #12]
   17d2a:	608e      	str	r6, [r1, #8]
   17d2c:	0038      	movs	r0, r7
   17d2e:	50e2      	str	r2, [r4, r3]
   17d30:	f000 fac4 	bl	182bc <__malloc_unlock>
   17d34:	0020      	movs	r0, r4
   17d36:	3008      	adds	r0, #8
   17d38:	e021      	b.n	17d7e <_malloc_r+0x19e>
   17d3a:	2910      	cmp	r1, #16
   17d3c:	d826      	bhi.n	17d8c <_malloc_r+0x1ac>
   17d3e:	0038      	movs	r0, r7
   17d40:	f000 fab4 	bl	182ac <__malloc_lock>
   17d44:	2510      	movs	r5, #16
   17d46:	2318      	movs	r3, #24
   17d48:	2002      	movs	r0, #2
   17d4a:	4e8b      	ldr	r6, [pc, #556]	; (17f78 <_malloc_r+0x398>)
   17d4c:	18f3      	adds	r3, r6, r3
   17d4e:	001a      	movs	r2, r3
   17d50:	685c      	ldr	r4, [r3, #4]
   17d52:	3a08      	subs	r2, #8
   17d54:	4294      	cmp	r4, r2
   17d56:	d100      	bne.n	17d5a <_malloc_r+0x17a>
   17d58:	e12e      	b.n	17fb8 <_malloc_r+0x3d8>
   17d5a:	2303      	movs	r3, #3
   17d5c:	6862      	ldr	r2, [r4, #4]
   17d5e:	439a      	bics	r2, r3
   17d60:	0013      	movs	r3, r2
   17d62:	68e2      	ldr	r2, [r4, #12]
   17d64:	68a1      	ldr	r1, [r4, #8]
   17d66:	60ca      	str	r2, [r1, #12]
   17d68:	6091      	str	r1, [r2, #8]
   17d6a:	2201      	movs	r2, #1
   17d6c:	18e3      	adds	r3, r4, r3
   17d6e:	6859      	ldr	r1, [r3, #4]
   17d70:	0038      	movs	r0, r7
   17d72:	430a      	orrs	r2, r1
   17d74:	605a      	str	r2, [r3, #4]
   17d76:	f000 faa1 	bl	182bc <__malloc_unlock>
   17d7a:	0020      	movs	r0, r4
   17d7c:	3008      	adds	r0, #8
   17d7e:	b003      	add	sp, #12
   17d80:	bc3c      	pop	{r2, r3, r4, r5}
   17d82:	4690      	mov	r8, r2
   17d84:	4699      	mov	r9, r3
   17d86:	46a2      	mov	sl, r4
   17d88:	46ab      	mov	fp, r5
   17d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17d8c:	230c      	movs	r3, #12
   17d8e:	2000      	movs	r0, #0
   17d90:	603b      	str	r3, [r7, #0]
   17d92:	e7f4      	b.n	17d7e <_malloc_r+0x19e>
   17d94:	2180      	movs	r1, #128	; 0x80
   17d96:	233f      	movs	r3, #63	; 0x3f
   17d98:	2040      	movs	r0, #64	; 0x40
   17d9a:	0089      	lsls	r1, r1, #2
   17d9c:	4698      	mov	r8, r3
   17d9e:	e746      	b.n	17c2e <_malloc_r+0x4e>
   17da0:	4640      	mov	r0, r8
   17da2:	e764      	b.n	17c6e <_malloc_r+0x8e>
   17da4:	464b      	mov	r3, r9
   17da6:	e7e0      	b.n	17d6a <_malloc_r+0x18a>
   17da8:	2303      	movs	r3, #3
   17daa:	68b4      	ldr	r4, [r6, #8]
   17dac:	6862      	ldr	r2, [r4, #4]
   17dae:	439a      	bics	r2, r3
   17db0:	4690      	mov	r8, r2
   17db2:	42aa      	cmp	r2, r5
   17db4:	d303      	bcc.n	17dbe <_malloc_r+0x1de>
   17db6:	1b53      	subs	r3, r2, r5
   17db8:	2b0f      	cmp	r3, #15
   17dba:	dd00      	ble.n	17dbe <_malloc_r+0x1de>
   17dbc:	e086      	b.n	17ecc <_malloc_r+0x2ec>
   17dbe:	0023      	movs	r3, r4
   17dc0:	4443      	add	r3, r8
   17dc2:	4a6f      	ldr	r2, [pc, #444]	; (17f80 <_malloc_r+0x3a0>)
   17dc4:	9301      	str	r3, [sp, #4]
   17dc6:	4b6f      	ldr	r3, [pc, #444]	; (17f84 <_malloc_r+0x3a4>)
   17dc8:	4693      	mov	fp, r2
   17dca:	681b      	ldr	r3, [r3, #0]
   17dcc:	6812      	ldr	r2, [r2, #0]
   17dce:	18eb      	adds	r3, r5, r3
   17dd0:	3201      	adds	r2, #1
   17dd2:	d100      	bne.n	17dd6 <_malloc_r+0x1f6>
   17dd4:	e168      	b.n	180a8 <_malloc_r+0x4c8>
   17dd6:	4a6c      	ldr	r2, [pc, #432]	; (17f88 <_malloc_r+0x3a8>)
   17dd8:	4694      	mov	ip, r2
   17dda:	4463      	add	r3, ip
   17ddc:	0b1b      	lsrs	r3, r3, #12
   17dde:	031b      	lsls	r3, r3, #12
   17de0:	9300      	str	r3, [sp, #0]
   17de2:	9900      	ldr	r1, [sp, #0]
   17de4:	0038      	movs	r0, r7
   17de6:	f000 fb0b 	bl	18400 <_sbrk_r>
   17dea:	0003      	movs	r3, r0
   17dec:	4681      	mov	r9, r0
   17dee:	3301      	adds	r3, #1
   17df0:	d061      	beq.n	17eb6 <_malloc_r+0x2d6>
   17df2:	9b01      	ldr	r3, [sp, #4]
   17df4:	4283      	cmp	r3, r0
   17df6:	d900      	bls.n	17dfa <_malloc_r+0x21a>
   17df8:	e0ff      	b.n	17ffa <_malloc_r+0x41a>
   17dfa:	4b64      	ldr	r3, [pc, #400]	; (17f8c <_malloc_r+0x3ac>)
   17dfc:	9a00      	ldr	r2, [sp, #0]
   17dfe:	469a      	mov	sl, r3
   17e00:	681b      	ldr	r3, [r3, #0]
   17e02:	469c      	mov	ip, r3
   17e04:	4653      	mov	r3, sl
   17e06:	4462      	add	r2, ip
   17e08:	601a      	str	r2, [r3, #0]
   17e0a:	9b01      	ldr	r3, [sp, #4]
   17e0c:	0011      	movs	r1, r2
   17e0e:	4283      	cmp	r3, r0
   17e10:	d100      	bne.n	17e14 <_malloc_r+0x234>
   17e12:	e155      	b.n	180c0 <_malloc_r+0x4e0>
   17e14:	465b      	mov	r3, fp
   17e16:	681b      	ldr	r3, [r3, #0]
   17e18:	3301      	adds	r3, #1
   17e1a:	d100      	bne.n	17e1e <_malloc_r+0x23e>
   17e1c:	e16c      	b.n	180f8 <_malloc_r+0x518>
   17e1e:	464b      	mov	r3, r9
   17e20:	9a01      	ldr	r2, [sp, #4]
   17e22:	1a9b      	subs	r3, r3, r2
   17e24:	1859      	adds	r1, r3, r1
   17e26:	4653      	mov	r3, sl
   17e28:	6019      	str	r1, [r3, #0]
   17e2a:	2307      	movs	r3, #7
   17e2c:	464a      	mov	r2, r9
   17e2e:	4013      	ands	r3, r2
   17e30:	d100      	bne.n	17e34 <_malloc_r+0x254>
   17e32:	e124      	b.n	1807e <_malloc_r+0x49e>
   17e34:	2108      	movs	r1, #8
   17e36:	4689      	mov	r9, r1
   17e38:	4955      	ldr	r1, [pc, #340]	; (17f90 <_malloc_r+0x3b0>)
   17e3a:	1ad2      	subs	r2, r2, r3
   17e3c:	4491      	add	r9, r2
   17e3e:	1acb      	subs	r3, r1, r3
   17e40:	9a00      	ldr	r2, [sp, #0]
   17e42:	0038      	movs	r0, r7
   17e44:	444a      	add	r2, r9
   17e46:	0511      	lsls	r1, r2, #20
   17e48:	0d09      	lsrs	r1, r1, #20
   17e4a:	1a5b      	subs	r3, r3, r1
   17e4c:	0019      	movs	r1, r3
   17e4e:	469b      	mov	fp, r3
   17e50:	f000 fad6 	bl	18400 <_sbrk_r>
   17e54:	1c43      	adds	r3, r0, #1
   17e56:	d100      	bne.n	17e5a <_malloc_r+0x27a>
   17e58:	e142      	b.n	180e0 <_malloc_r+0x500>
   17e5a:	464b      	mov	r3, r9
   17e5c:	1ac0      	subs	r0, r0, r3
   17e5e:	2301      	movs	r3, #1
   17e60:	4458      	add	r0, fp
   17e62:	4318      	orrs	r0, r3
   17e64:	4653      	mov	r3, sl
   17e66:	681b      	ldr	r3, [r3, #0]
   17e68:	445b      	add	r3, fp
   17e6a:	0019      	movs	r1, r3
   17e6c:	4653      	mov	r3, sl
   17e6e:	6019      	str	r1, [r3, #0]
   17e70:	464b      	mov	r3, r9
   17e72:	60b3      	str	r3, [r6, #8]
   17e74:	6058      	str	r0, [r3, #4]
   17e76:	42b4      	cmp	r4, r6
   17e78:	d013      	beq.n	17ea2 <_malloc_r+0x2c2>
   17e7a:	4643      	mov	r3, r8
   17e7c:	2b0f      	cmp	r3, #15
   17e7e:	d800      	bhi.n	17e82 <_malloc_r+0x2a2>
   17e80:	e0e8      	b.n	18054 <_malloc_r+0x474>
   17e82:	4643      	mov	r3, r8
   17e84:	2207      	movs	r2, #7
   17e86:	6860      	ldr	r0, [r4, #4]
   17e88:	3b0c      	subs	r3, #12
   17e8a:	4393      	bics	r3, r2
   17e8c:	3a06      	subs	r2, #6
   17e8e:	4002      	ands	r2, r0
   17e90:	2005      	movs	r0, #5
   17e92:	431a      	orrs	r2, r3
   17e94:	6062      	str	r2, [r4, #4]
   17e96:	18e2      	adds	r2, r4, r3
   17e98:	6050      	str	r0, [r2, #4]
   17e9a:	6090      	str	r0, [r2, #8]
   17e9c:	2b0f      	cmp	r3, #15
   17e9e:	d900      	bls.n	17ea2 <_malloc_r+0x2c2>
   17ea0:	e122      	b.n	180e8 <_malloc_r+0x508>
   17ea2:	4b3c      	ldr	r3, [pc, #240]	; (17f94 <_malloc_r+0x3b4>)
   17ea4:	681a      	ldr	r2, [r3, #0]
   17ea6:	4291      	cmp	r1, r2
   17ea8:	d900      	bls.n	17eac <_malloc_r+0x2cc>
   17eaa:	6019      	str	r1, [r3, #0]
   17eac:	4b3a      	ldr	r3, [pc, #232]	; (17f98 <_malloc_r+0x3b8>)
   17eae:	681a      	ldr	r2, [r3, #0]
   17eb0:	4291      	cmp	r1, r2
   17eb2:	d900      	bls.n	17eb6 <_malloc_r+0x2d6>
   17eb4:	6019      	str	r1, [r3, #0]
   17eb6:	2303      	movs	r3, #3
   17eb8:	68b4      	ldr	r4, [r6, #8]
   17eba:	6862      	ldr	r2, [r4, #4]
   17ebc:	439a      	bics	r2, r3
   17ebe:	1b53      	subs	r3, r2, r5
   17ec0:	4295      	cmp	r5, r2
   17ec2:	d900      	bls.n	17ec6 <_malloc_r+0x2e6>
   17ec4:	e0c9      	b.n	1805a <_malloc_r+0x47a>
   17ec6:	2b0f      	cmp	r3, #15
   17ec8:	dc00      	bgt.n	17ecc <_malloc_r+0x2ec>
   17eca:	e0c6      	b.n	1805a <_malloc_r+0x47a>
   17ecc:	2201      	movs	r2, #1
   17ece:	0029      	movs	r1, r5
   17ed0:	4313      	orrs	r3, r2
   17ed2:	4311      	orrs	r1, r2
   17ed4:	1965      	adds	r5, r4, r5
   17ed6:	6061      	str	r1, [r4, #4]
   17ed8:	0038      	movs	r0, r7
   17eda:	60b5      	str	r5, [r6, #8]
   17edc:	606b      	str	r3, [r5, #4]
   17ede:	f000 f9ed 	bl	182bc <__malloc_unlock>
   17ee2:	0020      	movs	r0, r4
   17ee4:	3008      	adds	r0, #8
   17ee6:	e74a      	b.n	17d7e <_malloc_r+0x19e>
   17ee8:	2814      	cmp	r0, #20
   17eea:	d97a      	bls.n	17fe2 <_malloc_r+0x402>
   17eec:	2854      	cmp	r0, #84	; 0x54
   17eee:	d900      	bls.n	17ef2 <_malloc_r+0x312>
   17ef0:	e0ba      	b.n	18068 <_malloc_r+0x488>
   17ef2:	236e      	movs	r3, #110	; 0x6e
   17ef4:	4698      	mov	r8, r3
   17ef6:	0b28      	lsrs	r0, r5, #12
   17ef8:	4480      	add	r8, r0
   17efa:	306f      	adds	r0, #111	; 0x6f
   17efc:	00c1      	lsls	r1, r0, #3
   17efe:	e696      	b.n	17c2e <_malloc_r+0x4e>
   17f00:	0a5a      	lsrs	r2, r3, #9
   17f02:	2a04      	cmp	r2, #4
   17f04:	d973      	bls.n	17fee <_malloc_r+0x40e>
   17f06:	2a14      	cmp	r2, #20
   17f08:	d900      	bls.n	17f0c <_malloc_r+0x32c>
   17f0a:	e0d0      	b.n	180ae <_malloc_r+0x4ce>
   17f0c:	0011      	movs	r1, r2
   17f0e:	325c      	adds	r2, #92	; 0x5c
   17f10:	315b      	adds	r1, #91	; 0x5b
   17f12:	00d2      	lsls	r2, r2, #3
   17f14:	2308      	movs	r3, #8
   17f16:	425b      	negs	r3, r3
   17f18:	469c      	mov	ip, r3
   17f1a:	18b2      	adds	r2, r6, r2
   17f1c:	4494      	add	ip, r2
   17f1e:	4663      	mov	r3, ip
   17f20:	689a      	ldr	r2, [r3, #8]
   17f22:	2303      	movs	r3, #3
   17f24:	4698      	mov	r8, r3
   17f26:	4594      	cmp	ip, r2
   17f28:	d100      	bne.n	17f2c <_malloc_r+0x34c>
   17f2a:	e0ab      	b.n	18084 <_malloc_r+0x4a4>
   17f2c:	4643      	mov	r3, r8
   17f2e:	6851      	ldr	r1, [r2, #4]
   17f30:	4399      	bics	r1, r3
   17f32:	4589      	cmp	r9, r1
   17f34:	d300      	bcc.n	17f38 <_malloc_r+0x358>
   17f36:	e095      	b.n	18064 <_malloc_r+0x484>
   17f38:	6892      	ldr	r2, [r2, #8]
   17f3a:	4594      	cmp	ip, r2
   17f3c:	d1f6      	bne.n	17f2c <_malloc_r+0x34c>
   17f3e:	4663      	mov	r3, ip
   17f40:	68da      	ldr	r2, [r3, #12]
   17f42:	6873      	ldr	r3, [r6, #4]
   17f44:	4661      	mov	r1, ip
   17f46:	60e2      	str	r2, [r4, #12]
   17f48:	60a1      	str	r1, [r4, #8]
   17f4a:	6094      	str	r4, [r2, #8]
   17f4c:	60cc      	str	r4, [r1, #12]
   17f4e:	e6b6      	b.n	17cbe <_malloc_r+0xde>
   17f50:	2301      	movs	r3, #1
   17f52:	1960      	adds	r0, r4, r5
   17f54:	431d      	orrs	r5, r3
   17f56:	6065      	str	r5, [r4, #4]
   17f58:	6170      	str	r0, [r6, #20]
   17f5a:	6130      	str	r0, [r6, #16]
   17f5c:	60c2      	str	r2, [r0, #12]
   17f5e:	6082      	str	r2, [r0, #8]
   17f60:	001a      	movs	r2, r3
   17f62:	464b      	mov	r3, r9
   17f64:	430a      	orrs	r2, r1
   17f66:	6042      	str	r2, [r0, #4]
   17f68:	0038      	movs	r0, r7
   17f6a:	50e1      	str	r1, [r4, r3]
   17f6c:	f000 f9a6 	bl	182bc <__malloc_unlock>
   17f70:	0020      	movs	r0, r4
   17f72:	3008      	adds	r0, #8
   17f74:	e703      	b.n	17d7e <_malloc_r+0x19e>
   17f76:	46c0      	nop			; (mov r8, r8)
   17f78:	20000508 	.word	0x20000508
   17f7c:	000001ff 	.word	0x000001ff
   17f80:	20000910 	.word	0x20000910
   17f84:	200010e0 	.word	0x200010e0
   17f88:	0000100f 	.word	0x0000100f
   17f8c:	200010b0 	.word	0x200010b0
   17f90:	00001008 	.word	0x00001008
   17f94:	200010d8 	.word	0x200010d8
   17f98:	200010dc 	.word	0x200010dc
   17f9c:	6873      	ldr	r3, [r6, #4]
   17f9e:	e68e      	b.n	17cbe <_malloc_r+0xde>
   17fa0:	2308      	movs	r3, #8
   17fa2:	469b      	mov	fp, r3
   17fa4:	3b07      	subs	r3, #7
   17fa6:	44dc      	add	ip, fp
   17fa8:	469b      	mov	fp, r3
   17faa:	44da      	add	sl, fp
   17fac:	4643      	mov	r3, r8
   17fae:	4652      	mov	r2, sl
   17fb0:	4213      	tst	r3, r2
   17fb2:	d000      	beq.n	17fb6 <_malloc_r+0x3d6>
   17fb4:	e697      	b.n	17ce6 <_malloc_r+0x106>
   17fb6:	e037      	b.n	18028 <_malloc_r+0x448>
   17fb8:	68dc      	ldr	r4, [r3, #12]
   17fba:	3002      	adds	r0, #2
   17fbc:	42a3      	cmp	r3, r4
   17fbe:	d100      	bne.n	17fc2 <_malloc_r+0x3e2>
   17fc0:	e655      	b.n	17c6e <_malloc_r+0x8e>
   17fc2:	e6ca      	b.n	17d5a <_malloc_r+0x17a>
   17fc4:	2201      	movs	r2, #1
   17fc6:	18e3      	adds	r3, r4, r3
   17fc8:	6859      	ldr	r1, [r3, #4]
   17fca:	0038      	movs	r0, r7
   17fcc:	430a      	orrs	r2, r1
   17fce:	605a      	str	r2, [r3, #4]
   17fd0:	68e3      	ldr	r3, [r4, #12]
   17fd2:	68a2      	ldr	r2, [r4, #8]
   17fd4:	60d3      	str	r3, [r2, #12]
   17fd6:	609a      	str	r2, [r3, #8]
   17fd8:	f000 f970 	bl	182bc <__malloc_unlock>
   17fdc:	0020      	movs	r0, r4
   17fde:	3008      	adds	r0, #8
   17fe0:	e6cd      	b.n	17d7e <_malloc_r+0x19e>
   17fe2:	235b      	movs	r3, #91	; 0x5b
   17fe4:	4698      	mov	r8, r3
   17fe6:	4480      	add	r8, r0
   17fe8:	305c      	adds	r0, #92	; 0x5c
   17fea:	00c1      	lsls	r1, r0, #3
   17fec:	e61f      	b.n	17c2e <_malloc_r+0x4e>
   17fee:	099a      	lsrs	r2, r3, #6
   17ff0:	0011      	movs	r1, r2
   17ff2:	3239      	adds	r2, #57	; 0x39
   17ff4:	3138      	adds	r1, #56	; 0x38
   17ff6:	00d2      	lsls	r2, r2, #3
   17ff8:	e78c      	b.n	17f14 <_malloc_r+0x334>
   17ffa:	42b4      	cmp	r4, r6
   17ffc:	d000      	beq.n	18000 <_malloc_r+0x420>
   17ffe:	e75a      	b.n	17eb6 <_malloc_r+0x2d6>
   18000:	4b4f      	ldr	r3, [pc, #316]	; (18140 <_malloc_r+0x560>)
   18002:	9a00      	ldr	r2, [sp, #0]
   18004:	469a      	mov	sl, r3
   18006:	681b      	ldr	r3, [r3, #0]
   18008:	469c      	mov	ip, r3
   1800a:	4653      	mov	r3, sl
   1800c:	4462      	add	r2, ip
   1800e:	0011      	movs	r1, r2
   18010:	601a      	str	r2, [r3, #0]
   18012:	e6ff      	b.n	17e14 <_malloc_r+0x234>
   18014:	2308      	movs	r3, #8
   18016:	425b      	negs	r3, r3
   18018:	469c      	mov	ip, r3
   1801a:	44e1      	add	r9, ip
   1801c:	464b      	mov	r3, r9
   1801e:	689b      	ldr	r3, [r3, #8]
   18020:	3801      	subs	r0, #1
   18022:	4599      	cmp	r9, r3
   18024:	d000      	beq.n	18028 <_malloc_r+0x448>
   18026:	e084      	b.n	18132 <_malloc_r+0x552>
   18028:	4643      	mov	r3, r8
   1802a:	4203      	tst	r3, r0
   1802c:	d1f2      	bne.n	18014 <_malloc_r+0x434>
   1802e:	6873      	ldr	r3, [r6, #4]
   18030:	438b      	bics	r3, r1
   18032:	6073      	str	r3, [r6, #4]
   18034:	0049      	lsls	r1, r1, #1
   18036:	4299      	cmp	r1, r3
   18038:	d900      	bls.n	1803c <_malloc_r+0x45c>
   1803a:	e6b5      	b.n	17da8 <_malloc_r+0x1c8>
   1803c:	2900      	cmp	r1, #0
   1803e:	d100      	bne.n	18042 <_malloc_r+0x462>
   18040:	e6b2      	b.n	17da8 <_malloc_r+0x1c8>
   18042:	4650      	mov	r0, sl
   18044:	420b      	tst	r3, r1
   18046:	d000      	beq.n	1804a <_malloc_r+0x46a>
   18048:	e648      	b.n	17cdc <_malloc_r+0xfc>
   1804a:	0049      	lsls	r1, r1, #1
   1804c:	3004      	adds	r0, #4
   1804e:	420b      	tst	r3, r1
   18050:	d0fb      	beq.n	1804a <_malloc_r+0x46a>
   18052:	e643      	b.n	17cdc <_malloc_r+0xfc>
   18054:	2301      	movs	r3, #1
   18056:	464a      	mov	r2, r9
   18058:	6053      	str	r3, [r2, #4]
   1805a:	0038      	movs	r0, r7
   1805c:	f000 f92e 	bl	182bc <__malloc_unlock>
   18060:	2000      	movs	r0, #0
   18062:	e68c      	b.n	17d7e <_malloc_r+0x19e>
   18064:	4694      	mov	ip, r2
   18066:	e76a      	b.n	17f3e <_malloc_r+0x35e>
   18068:	23aa      	movs	r3, #170	; 0xaa
   1806a:	005b      	lsls	r3, r3, #1
   1806c:	4298      	cmp	r0, r3
   1806e:	d811      	bhi.n	18094 <_malloc_r+0x4b4>
   18070:	3bdd      	subs	r3, #221	; 0xdd
   18072:	4698      	mov	r8, r3
   18074:	0be8      	lsrs	r0, r5, #15
   18076:	4480      	add	r8, r0
   18078:	3078      	adds	r0, #120	; 0x78
   1807a:	00c1      	lsls	r1, r0, #3
   1807c:	e5d7      	b.n	17c2e <_malloc_r+0x4e>
   1807e:	2380      	movs	r3, #128	; 0x80
   18080:	015b      	lsls	r3, r3, #5
   18082:	e6dd      	b.n	17e40 <_malloc_r+0x260>
   18084:	1089      	asrs	r1, r1, #2
   18086:	3b02      	subs	r3, #2
   18088:	408b      	lsls	r3, r1
   1808a:	6872      	ldr	r2, [r6, #4]
   1808c:	4313      	orrs	r3, r2
   1808e:	6073      	str	r3, [r6, #4]
   18090:	4662      	mov	r2, ip
   18092:	e757      	b.n	17f44 <_malloc_r+0x364>
   18094:	4b2b      	ldr	r3, [pc, #172]	; (18144 <_malloc_r+0x564>)
   18096:	4298      	cmp	r0, r3
   18098:	d81c      	bhi.n	180d4 <_malloc_r+0x4f4>
   1809a:	237c      	movs	r3, #124	; 0x7c
   1809c:	4698      	mov	r8, r3
   1809e:	0ca8      	lsrs	r0, r5, #18
   180a0:	4480      	add	r8, r0
   180a2:	307d      	adds	r0, #125	; 0x7d
   180a4:	00c1      	lsls	r1, r0, #3
   180a6:	e5c2      	b.n	17c2e <_malloc_r+0x4e>
   180a8:	3310      	adds	r3, #16
   180aa:	9300      	str	r3, [sp, #0]
   180ac:	e699      	b.n	17de2 <_malloc_r+0x202>
   180ae:	2a54      	cmp	r2, #84	; 0x54
   180b0:	d826      	bhi.n	18100 <_malloc_r+0x520>
   180b2:	464b      	mov	r3, r9
   180b4:	0b1a      	lsrs	r2, r3, #12
   180b6:	0011      	movs	r1, r2
   180b8:	326f      	adds	r2, #111	; 0x6f
   180ba:	316e      	adds	r1, #110	; 0x6e
   180bc:	00d2      	lsls	r2, r2, #3
   180be:	e729      	b.n	17f14 <_malloc_r+0x334>
   180c0:	051b      	lsls	r3, r3, #20
   180c2:	d000      	beq.n	180c6 <_malloc_r+0x4e6>
   180c4:	e6a6      	b.n	17e14 <_malloc_r+0x234>
   180c6:	2001      	movs	r0, #1
   180c8:	9b00      	ldr	r3, [sp, #0]
   180ca:	68b2      	ldr	r2, [r6, #8]
   180cc:	4443      	add	r3, r8
   180ce:	4303      	orrs	r3, r0
   180d0:	6053      	str	r3, [r2, #4]
   180d2:	e6e6      	b.n	17ea2 <_malloc_r+0x2c2>
   180d4:	21fe      	movs	r1, #254	; 0xfe
   180d6:	237e      	movs	r3, #126	; 0x7e
   180d8:	207f      	movs	r0, #127	; 0x7f
   180da:	0089      	lsls	r1, r1, #2
   180dc:	4698      	mov	r8, r3
   180de:	e5a6      	b.n	17c2e <_malloc_r+0x4e>
   180e0:	2300      	movs	r3, #0
   180e2:	2001      	movs	r0, #1
   180e4:	469b      	mov	fp, r3
   180e6:	e6bd      	b.n	17e64 <_malloc_r+0x284>
   180e8:	0021      	movs	r1, r4
   180ea:	0038      	movs	r0, r7
   180ec:	3108      	adds	r1, #8
   180ee:	f003 f99b 	bl	1b428 <_free_r>
   180f2:	4653      	mov	r3, sl
   180f4:	6819      	ldr	r1, [r3, #0]
   180f6:	e6d4      	b.n	17ea2 <_malloc_r+0x2c2>
   180f8:	465b      	mov	r3, fp
   180fa:	464a      	mov	r2, r9
   180fc:	601a      	str	r2, [r3, #0]
   180fe:	e694      	b.n	17e2a <_malloc_r+0x24a>
   18100:	21aa      	movs	r1, #170	; 0xaa
   18102:	0049      	lsls	r1, r1, #1
   18104:	428a      	cmp	r2, r1
   18106:	d806      	bhi.n	18116 <_malloc_r+0x536>
   18108:	464b      	mov	r3, r9
   1810a:	0bda      	lsrs	r2, r3, #15
   1810c:	0011      	movs	r1, r2
   1810e:	3278      	adds	r2, #120	; 0x78
   18110:	3177      	adds	r1, #119	; 0x77
   18112:	00d2      	lsls	r2, r2, #3
   18114:	e6fe      	b.n	17f14 <_malloc_r+0x334>
   18116:	490b      	ldr	r1, [pc, #44]	; (18144 <_malloc_r+0x564>)
   18118:	428a      	cmp	r2, r1
   1811a:	d806      	bhi.n	1812a <_malloc_r+0x54a>
   1811c:	464b      	mov	r3, r9
   1811e:	0c9a      	lsrs	r2, r3, #18
   18120:	0011      	movs	r1, r2
   18122:	327d      	adds	r2, #125	; 0x7d
   18124:	317c      	adds	r1, #124	; 0x7c
   18126:	00d2      	lsls	r2, r2, #3
   18128:	e6f4      	b.n	17f14 <_malloc_r+0x334>
   1812a:	22fe      	movs	r2, #254	; 0xfe
   1812c:	217e      	movs	r1, #126	; 0x7e
   1812e:	0092      	lsls	r2, r2, #2
   18130:	e6f0      	b.n	17f14 <_malloc_r+0x334>
   18132:	6873      	ldr	r3, [r6, #4]
   18134:	e77e      	b.n	18034 <_malloc_r+0x454>
   18136:	002b      	movs	r3, r5
   18138:	08e8      	lsrs	r0, r5, #3
   1813a:	3308      	adds	r3, #8
   1813c:	e605      	b.n	17d4a <_malloc_r+0x16a>
   1813e:	46c0      	nop			; (mov r8, r8)
   18140:	200010b0 	.word	0x200010b0
   18144:	00000554 	.word	0x00000554

00018148 <memcmp>:
   18148:	b510      	push	{r4, lr}
   1814a:	2a03      	cmp	r2, #3
   1814c:	d91c      	bls.n	18188 <memcmp+0x40>
   1814e:	0003      	movs	r3, r0
   18150:	430b      	orrs	r3, r1
   18152:	079b      	lsls	r3, r3, #30
   18154:	d00f      	beq.n	18176 <memcmp+0x2e>
   18156:	7803      	ldrb	r3, [r0, #0]
   18158:	780c      	ldrb	r4, [r1, #0]
   1815a:	1882      	adds	r2, r0, r2
   1815c:	42a3      	cmp	r3, r4
   1815e:	d004      	beq.n	1816a <memcmp+0x22>
   18160:	e015      	b.n	1818e <memcmp+0x46>
   18162:	7803      	ldrb	r3, [r0, #0]
   18164:	780c      	ldrb	r4, [r1, #0]
   18166:	42a3      	cmp	r3, r4
   18168:	d111      	bne.n	1818e <memcmp+0x46>
   1816a:	3001      	adds	r0, #1
   1816c:	3101      	adds	r1, #1
   1816e:	4282      	cmp	r2, r0
   18170:	d1f7      	bne.n	18162 <memcmp+0x1a>
   18172:	2000      	movs	r0, #0
   18174:	bd10      	pop	{r4, pc}
   18176:	6803      	ldr	r3, [r0, #0]
   18178:	680c      	ldr	r4, [r1, #0]
   1817a:	42a3      	cmp	r3, r4
   1817c:	d1eb      	bne.n	18156 <memcmp+0xe>
   1817e:	3a04      	subs	r2, #4
   18180:	3004      	adds	r0, #4
   18182:	3104      	adds	r1, #4
   18184:	2a03      	cmp	r2, #3
   18186:	d8f6      	bhi.n	18176 <memcmp+0x2e>
   18188:	2a00      	cmp	r2, #0
   1818a:	d1e4      	bne.n	18156 <memcmp+0xe>
   1818c:	e7f1      	b.n	18172 <memcmp+0x2a>
   1818e:	1b18      	subs	r0, r3, r4
   18190:	e7f0      	b.n	18174 <memcmp+0x2c>
   18192:	46c0      	nop			; (mov r8, r8)

00018194 <memcpy>:
   18194:	b5f0      	push	{r4, r5, r6, r7, lr}
   18196:	0005      	movs	r5, r0
   18198:	2a0f      	cmp	r2, #15
   1819a:	d92f      	bls.n	181fc <memcpy+0x68>
   1819c:	000b      	movs	r3, r1
   1819e:	4303      	orrs	r3, r0
   181a0:	079b      	lsls	r3, r3, #30
   181a2:	d134      	bne.n	1820e <memcpy+0x7a>
   181a4:	0016      	movs	r6, r2
   181a6:	000c      	movs	r4, r1
   181a8:	0003      	movs	r3, r0
   181aa:	3e10      	subs	r6, #16
   181ac:	0935      	lsrs	r5, r6, #4
   181ae:	3501      	adds	r5, #1
   181b0:	012d      	lsls	r5, r5, #4
   181b2:	1945      	adds	r5, r0, r5
   181b4:	6827      	ldr	r7, [r4, #0]
   181b6:	601f      	str	r7, [r3, #0]
   181b8:	6867      	ldr	r7, [r4, #4]
   181ba:	605f      	str	r7, [r3, #4]
   181bc:	68a7      	ldr	r7, [r4, #8]
   181be:	609f      	str	r7, [r3, #8]
   181c0:	68e7      	ldr	r7, [r4, #12]
   181c2:	3410      	adds	r4, #16
   181c4:	60df      	str	r7, [r3, #12]
   181c6:	3310      	adds	r3, #16
   181c8:	429d      	cmp	r5, r3
   181ca:	d1f3      	bne.n	181b4 <memcpy+0x20>
   181cc:	230f      	movs	r3, #15
   181ce:	439e      	bics	r6, r3
   181d0:	3610      	adds	r6, #16
   181d2:	1985      	adds	r5, r0, r6
   181d4:	1989      	adds	r1, r1, r6
   181d6:	4013      	ands	r3, r2
   181d8:	2b03      	cmp	r3, #3
   181da:	d91a      	bls.n	18212 <memcpy+0x7e>
   181dc:	1f1e      	subs	r6, r3, #4
   181de:	2300      	movs	r3, #0
   181e0:	08b4      	lsrs	r4, r6, #2
   181e2:	3401      	adds	r4, #1
   181e4:	00a4      	lsls	r4, r4, #2
   181e6:	58cf      	ldr	r7, [r1, r3]
   181e8:	50ef      	str	r7, [r5, r3]
   181ea:	3304      	adds	r3, #4
   181ec:	42a3      	cmp	r3, r4
   181ee:	d1fa      	bne.n	181e6 <memcpy+0x52>
   181f0:	2403      	movs	r4, #3
   181f2:	43a6      	bics	r6, r4
   181f4:	1d33      	adds	r3, r6, #4
   181f6:	4022      	ands	r2, r4
   181f8:	18c9      	adds	r1, r1, r3
   181fa:	18ed      	adds	r5, r5, r3
   181fc:	2a00      	cmp	r2, #0
   181fe:	d005      	beq.n	1820c <memcpy+0x78>
   18200:	2300      	movs	r3, #0
   18202:	5ccc      	ldrb	r4, [r1, r3]
   18204:	54ec      	strb	r4, [r5, r3]
   18206:	3301      	adds	r3, #1
   18208:	4293      	cmp	r3, r2
   1820a:	d1fa      	bne.n	18202 <memcpy+0x6e>
   1820c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1820e:	0005      	movs	r5, r0
   18210:	e7f6      	b.n	18200 <memcpy+0x6c>
   18212:	001a      	movs	r2, r3
   18214:	e7f2      	b.n	181fc <memcpy+0x68>
   18216:	46c0      	nop			; (mov r8, r8)

00018218 <memset>:
   18218:	b5f0      	push	{r4, r5, r6, r7, lr}
   1821a:	0783      	lsls	r3, r0, #30
   1821c:	d043      	beq.n	182a6 <memset+0x8e>
   1821e:	1e54      	subs	r4, r2, #1
   18220:	2a00      	cmp	r2, #0
   18222:	d03f      	beq.n	182a4 <memset+0x8c>
   18224:	b2ce      	uxtb	r6, r1
   18226:	0002      	movs	r2, r0
   18228:	2503      	movs	r5, #3
   1822a:	e002      	b.n	18232 <memset+0x1a>
   1822c:	001a      	movs	r2, r3
   1822e:	3c01      	subs	r4, #1
   18230:	d338      	bcc.n	182a4 <memset+0x8c>
   18232:	1c53      	adds	r3, r2, #1
   18234:	7016      	strb	r6, [r2, #0]
   18236:	422b      	tst	r3, r5
   18238:	d1f8      	bne.n	1822c <memset+0x14>
   1823a:	2c03      	cmp	r4, #3
   1823c:	d92a      	bls.n	18294 <memset+0x7c>
   1823e:	22ff      	movs	r2, #255	; 0xff
   18240:	400a      	ands	r2, r1
   18242:	0215      	lsls	r5, r2, #8
   18244:	4315      	orrs	r5, r2
   18246:	042a      	lsls	r2, r5, #16
   18248:	4315      	orrs	r5, r2
   1824a:	2c0f      	cmp	r4, #15
   1824c:	d914      	bls.n	18278 <memset+0x60>
   1824e:	0027      	movs	r7, r4
   18250:	001a      	movs	r2, r3
   18252:	3f10      	subs	r7, #16
   18254:	093e      	lsrs	r6, r7, #4
   18256:	3601      	adds	r6, #1
   18258:	0136      	lsls	r6, r6, #4
   1825a:	199e      	adds	r6, r3, r6
   1825c:	6015      	str	r5, [r2, #0]
   1825e:	6055      	str	r5, [r2, #4]
   18260:	6095      	str	r5, [r2, #8]
   18262:	60d5      	str	r5, [r2, #12]
   18264:	3210      	adds	r2, #16
   18266:	4296      	cmp	r6, r2
   18268:	d1f8      	bne.n	1825c <memset+0x44>
   1826a:	220f      	movs	r2, #15
   1826c:	4397      	bics	r7, r2
   1826e:	3710      	adds	r7, #16
   18270:	19db      	adds	r3, r3, r7
   18272:	4014      	ands	r4, r2
   18274:	2c03      	cmp	r4, #3
   18276:	d90d      	bls.n	18294 <memset+0x7c>
   18278:	001a      	movs	r2, r3
   1827a:	1f27      	subs	r7, r4, #4
   1827c:	08be      	lsrs	r6, r7, #2
   1827e:	3601      	adds	r6, #1
   18280:	00b6      	lsls	r6, r6, #2
   18282:	199e      	adds	r6, r3, r6
   18284:	c220      	stmia	r2!, {r5}
   18286:	42b2      	cmp	r2, r6
   18288:	d1fc      	bne.n	18284 <memset+0x6c>
   1828a:	2203      	movs	r2, #3
   1828c:	4397      	bics	r7, r2
   1828e:	3704      	adds	r7, #4
   18290:	19db      	adds	r3, r3, r7
   18292:	4014      	ands	r4, r2
   18294:	2c00      	cmp	r4, #0
   18296:	d005      	beq.n	182a4 <memset+0x8c>
   18298:	b2c9      	uxtb	r1, r1
   1829a:	191c      	adds	r4, r3, r4
   1829c:	7019      	strb	r1, [r3, #0]
   1829e:	3301      	adds	r3, #1
   182a0:	429c      	cmp	r4, r3
   182a2:	d1fb      	bne.n	1829c <memset+0x84>
   182a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   182a6:	0014      	movs	r4, r2
   182a8:	0003      	movs	r3, r0
   182aa:	e7c6      	b.n	1823a <memset+0x22>

000182ac <__malloc_lock>:
   182ac:	b510      	push	{r4, lr}
   182ae:	4802      	ldr	r0, [pc, #8]	; (182b8 <__malloc_lock+0xc>)
   182b0:	f003 fb66 	bl	1b980 <__retarget_lock_acquire_recursive>
   182b4:	bd10      	pop	{r4, pc}
   182b6:	46c0      	nop			; (mov r8, r8)
   182b8:	20002010 	.word	0x20002010

000182bc <__malloc_unlock>:
   182bc:	b510      	push	{r4, lr}
   182be:	4802      	ldr	r0, [pc, #8]	; (182c8 <__malloc_unlock+0xc>)
   182c0:	f003 fb60 	bl	1b984 <__retarget_lock_release_recursive>
   182c4:	bd10      	pop	{r4, pc}
   182c6:	46c0      	nop			; (mov r8, r8)
   182c8:	20002010 	.word	0x20002010

000182cc <printf>:
   182cc:	b40f      	push	{r0, r1, r2, r3}
   182ce:	b500      	push	{lr}
   182d0:	4906      	ldr	r1, [pc, #24]	; (182ec <printf+0x20>)
   182d2:	b083      	sub	sp, #12
   182d4:	ab04      	add	r3, sp, #16
   182d6:	6808      	ldr	r0, [r1, #0]
   182d8:	cb04      	ldmia	r3!, {r2}
   182da:	6881      	ldr	r1, [r0, #8]
   182dc:	9301      	str	r3, [sp, #4]
   182de:	f000 fa5b 	bl	18798 <_vfprintf_r>
   182e2:	b003      	add	sp, #12
   182e4:	bc08      	pop	{r3}
   182e6:	b004      	add	sp, #16
   182e8:	4718      	bx	r3
   182ea:	46c0      	nop			; (mov r8, r8)
   182ec:	200000d8 	.word	0x200000d8

000182f0 <putchar>:
   182f0:	b510      	push	{r4, lr}
   182f2:	4b03      	ldr	r3, [pc, #12]	; (18300 <putchar+0x10>)
   182f4:	0001      	movs	r1, r0
   182f6:	6818      	ldr	r0, [r3, #0]
   182f8:	6882      	ldr	r2, [r0, #8]
   182fa:	f003 ffab 	bl	1c254 <_putc_r>
   182fe:	bd10      	pop	{r4, pc}
   18300:	200000d8 	.word	0x200000d8

00018304 <_puts_r>:
   18304:	b530      	push	{r4, r5, lr}
   18306:	0004      	movs	r4, r0
   18308:	b089      	sub	sp, #36	; 0x24
   1830a:	0008      	movs	r0, r1
   1830c:	000d      	movs	r5, r1
   1830e:	f000 f963 	bl	185d8 <strlen>
   18312:	ab04      	add	r3, sp, #16
   18314:	4a21      	ldr	r2, [pc, #132]	; (1839c <_puts_r+0x98>)
   18316:	9301      	str	r3, [sp, #4]
   18318:	2302      	movs	r3, #2
   1831a:	9206      	str	r2, [sp, #24]
   1831c:	2201      	movs	r2, #1
   1831e:	9302      	str	r3, [sp, #8]
   18320:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18322:	9005      	str	r0, [sp, #20]
   18324:	3001      	adds	r0, #1
   18326:	9504      	str	r5, [sp, #16]
   18328:	9207      	str	r2, [sp, #28]
   1832a:	9003      	str	r0, [sp, #12]
   1832c:	68a5      	ldr	r5, [r4, #8]
   1832e:	2b00      	cmp	r3, #0
   18330:	d02f      	beq.n	18392 <_puts_r+0x8e>
   18332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   18334:	07db      	lsls	r3, r3, #31
   18336:	d424      	bmi.n	18382 <_puts_r+0x7e>
   18338:	230c      	movs	r3, #12
   1833a:	5eea      	ldrsh	r2, [r5, r3]
   1833c:	b291      	uxth	r1, r2
   1833e:	058b      	lsls	r3, r1, #22
   18340:	d51c      	bpl.n	1837c <_puts_r+0x78>
   18342:	2380      	movs	r3, #128	; 0x80
   18344:	019b      	lsls	r3, r3, #6
   18346:	4219      	tst	r1, r3
   18348:	d105      	bne.n	18356 <_puts_r+0x52>
   1834a:	4313      	orrs	r3, r2
   1834c:	81ab      	strh	r3, [r5, #12]
   1834e:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   18350:	4b13      	ldr	r3, [pc, #76]	; (183a0 <_puts_r+0x9c>)
   18352:	4013      	ands	r3, r2
   18354:	666b      	str	r3, [r5, #100]	; 0x64
   18356:	0020      	movs	r0, r4
   18358:	aa01      	add	r2, sp, #4
   1835a:	0029      	movs	r1, r5
   1835c:	f003 f942 	bl	1b5e4 <__sfvwrite_r>
   18360:	1e44      	subs	r4, r0, #1
   18362:	41a0      	sbcs	r0, r4
   18364:	4244      	negs	r4, r0
   18366:	200a      	movs	r0, #10
   18368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1836a:	4304      	orrs	r4, r0
   1836c:	07db      	lsls	r3, r3, #31
   1836e:	d402      	bmi.n	18376 <_puts_r+0x72>
   18370:	89ab      	ldrh	r3, [r5, #12]
   18372:	059b      	lsls	r3, r3, #22
   18374:	d509      	bpl.n	1838a <_puts_r+0x86>
   18376:	0020      	movs	r0, r4
   18378:	b009      	add	sp, #36	; 0x24
   1837a:	bd30      	pop	{r4, r5, pc}
   1837c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1837e:	f003 faff 	bl	1b980 <__retarget_lock_acquire_recursive>
   18382:	230c      	movs	r3, #12
   18384:	5eea      	ldrsh	r2, [r5, r3]
   18386:	b291      	uxth	r1, r2
   18388:	e7db      	b.n	18342 <_puts_r+0x3e>
   1838a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   1838c:	f003 fafa 	bl	1b984 <__retarget_lock_release_recursive>
   18390:	e7f1      	b.n	18376 <_puts_r+0x72>
   18392:	0020      	movs	r0, r4
   18394:	f002 ff9e 	bl	1b2d4 <__sinit>
   18398:	e7cb      	b.n	18332 <_puts_r+0x2e>
   1839a:	46c0      	nop			; (mov r8, r8)
   1839c:	0001f568 	.word	0x0001f568
   183a0:	ffffdfff 	.word	0xffffdfff

000183a4 <puts>:
   183a4:	b510      	push	{r4, lr}
   183a6:	4b03      	ldr	r3, [pc, #12]	; (183b4 <puts+0x10>)
   183a8:	0001      	movs	r1, r0
   183aa:	6818      	ldr	r0, [r3, #0]
   183ac:	f7ff ffaa 	bl	18304 <_puts_r>
   183b0:	bd10      	pop	{r4, pc}
   183b2:	46c0      	nop			; (mov r8, r8)
   183b4:	200000d8 	.word	0x200000d8

000183b8 <srand>:
   183b8:	2200      	movs	r2, #0
   183ba:	4b03      	ldr	r3, [pc, #12]	; (183c8 <srand+0x10>)
   183bc:	681b      	ldr	r3, [r3, #0]
   183be:	33a8      	adds	r3, #168	; 0xa8
   183c0:	6018      	str	r0, [r3, #0]
   183c2:	605a      	str	r2, [r3, #4]
   183c4:	4770      	bx	lr
   183c6:	46c0      	nop			; (mov r8, r8)
   183c8:	200000d8 	.word	0x200000d8

000183cc <rand>:
   183cc:	b510      	push	{r4, lr}
   183ce:	4b09      	ldr	r3, [pc, #36]	; (183f4 <rand+0x28>)
   183d0:	4a09      	ldr	r2, [pc, #36]	; (183f8 <rand+0x2c>)
   183d2:	681c      	ldr	r4, [r3, #0]
   183d4:	4b09      	ldr	r3, [pc, #36]	; (183fc <rand+0x30>)
   183d6:	34a8      	adds	r4, #168	; 0xa8
   183d8:	6820      	ldr	r0, [r4, #0]
   183da:	6861      	ldr	r1, [r4, #4]
   183dc:	f7fc fd98 	bl	14f10 <__aeabi_lmul>
   183e0:	2201      	movs	r2, #1
   183e2:	2300      	movs	r3, #0
   183e4:	1880      	adds	r0, r0, r2
   183e6:	4159      	adcs	r1, r3
   183e8:	6020      	str	r0, [r4, #0]
   183ea:	6061      	str	r1, [r4, #4]
   183ec:	0048      	lsls	r0, r1, #1
   183ee:	0840      	lsrs	r0, r0, #1
   183f0:	bd10      	pop	{r4, pc}
   183f2:	46c0      	nop			; (mov r8, r8)
   183f4:	200000d8 	.word	0x200000d8
   183f8:	4c957f2d 	.word	0x4c957f2d
   183fc:	5851f42d 	.word	0x5851f42d

00018400 <_sbrk_r>:
   18400:	2300      	movs	r3, #0
   18402:	b570      	push	{r4, r5, r6, lr}
   18404:	4c06      	ldr	r4, [pc, #24]	; (18420 <_sbrk_r+0x20>)
   18406:	0005      	movs	r5, r0
   18408:	0008      	movs	r0, r1
   1840a:	6023      	str	r3, [r4, #0]
   1840c:	f7ed fe62 	bl	60d4 <_sbrk>
   18410:	1c43      	adds	r3, r0, #1
   18412:	d000      	beq.n	18416 <_sbrk_r+0x16>
   18414:	bd70      	pop	{r4, r5, r6, pc}
   18416:	6823      	ldr	r3, [r4, #0]
   18418:	2b00      	cmp	r3, #0
   1841a:	d0fb      	beq.n	18414 <_sbrk_r+0x14>
   1841c:	602b      	str	r3, [r5, #0]
   1841e:	e7f9      	b.n	18414 <_sbrk_r+0x14>
   18420:	20002024 	.word	0x20002024

00018424 <setbuf>:
   18424:	424a      	negs	r2, r1
   18426:	414a      	adcs	r2, r1
   18428:	2380      	movs	r3, #128	; 0x80
   1842a:	b510      	push	{r4, lr}
   1842c:	0052      	lsls	r2, r2, #1
   1842e:	00db      	lsls	r3, r3, #3
   18430:	f000 f802 	bl	18438 <setvbuf>
   18434:	bd10      	pop	{r4, pc}
   18436:	46c0      	nop			; (mov r8, r8)

00018438 <setvbuf>:
   18438:	b5f0      	push	{r4, r5, r6, r7, lr}
   1843a:	4647      	mov	r7, r8
   1843c:	46ce      	mov	lr, r9
   1843e:	b580      	push	{r7, lr}
   18440:	001f      	movs	r7, r3
   18442:	4b63      	ldr	r3, [pc, #396]	; (185d0 <setvbuf+0x198>)
   18444:	b083      	sub	sp, #12
   18446:	681d      	ldr	r5, [r3, #0]
   18448:	0004      	movs	r4, r0
   1844a:	4688      	mov	r8, r1
   1844c:	0016      	movs	r6, r2
   1844e:	2d00      	cmp	r5, #0
   18450:	d002      	beq.n	18458 <setvbuf+0x20>
   18452:	6bab      	ldr	r3, [r5, #56]	; 0x38
   18454:	2b00      	cmp	r3, #0
   18456:	d066      	beq.n	18526 <setvbuf+0xee>
   18458:	2e02      	cmp	r6, #2
   1845a:	d005      	beq.n	18468 <setvbuf+0x30>
   1845c:	2e01      	cmp	r6, #1
   1845e:	d900      	bls.n	18462 <setvbuf+0x2a>
   18460:	e0a1      	b.n	185a6 <setvbuf+0x16e>
   18462:	2f00      	cmp	r7, #0
   18464:	da00      	bge.n	18468 <setvbuf+0x30>
   18466:	e09e      	b.n	185a6 <setvbuf+0x16e>
   18468:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1846a:	07db      	lsls	r3, r3, #31
   1846c:	d533      	bpl.n	184d6 <setvbuf+0x9e>
   1846e:	0021      	movs	r1, r4
   18470:	0028      	movs	r0, r5
   18472:	f002 fed5 	bl	1b220 <_fflush_r>
   18476:	6b21      	ldr	r1, [r4, #48]	; 0x30
   18478:	2900      	cmp	r1, #0
   1847a:	d008      	beq.n	1848e <setvbuf+0x56>
   1847c:	0023      	movs	r3, r4
   1847e:	3340      	adds	r3, #64	; 0x40
   18480:	4299      	cmp	r1, r3
   18482:	d002      	beq.n	1848a <setvbuf+0x52>
   18484:	0028      	movs	r0, r5
   18486:	f002 ffcf 	bl	1b428 <_free_r>
   1848a:	2300      	movs	r3, #0
   1848c:	6323      	str	r3, [r4, #48]	; 0x30
   1848e:	2300      	movs	r3, #0
   18490:	61a3      	str	r3, [r4, #24]
   18492:	6063      	str	r3, [r4, #4]
   18494:	220c      	movs	r2, #12
   18496:	5ea3      	ldrsh	r3, [r4, r2]
   18498:	061a      	lsls	r2, r3, #24
   1849a:	d43d      	bmi.n	18518 <setvbuf+0xe0>
   1849c:	4a4d      	ldr	r2, [pc, #308]	; (185d4 <setvbuf+0x19c>)
   1849e:	4013      	ands	r3, r2
   184a0:	81a3      	strh	r3, [r4, #12]
   184a2:	2e02      	cmp	r6, #2
   184a4:	d01e      	beq.n	184e4 <setvbuf+0xac>
   184a6:	ab01      	add	r3, sp, #4
   184a8:	466a      	mov	r2, sp
   184aa:	0021      	movs	r1, r4
   184ac:	0028      	movs	r0, r5
   184ae:	f003 fa6b 	bl	1b988 <__swhatbuf_r>
   184b2:	89a3      	ldrh	r3, [r4, #12]
   184b4:	4318      	orrs	r0, r3
   184b6:	81a0      	strh	r0, [r4, #12]
   184b8:	2f00      	cmp	r7, #0
   184ba:	d138      	bne.n	1852e <setvbuf+0xf6>
   184bc:	9f00      	ldr	r7, [sp, #0]
   184be:	0038      	movs	r0, r7
   184c0:	f7ff fb84 	bl	17bcc <malloc>
   184c4:	4680      	mov	r8, r0
   184c6:	2800      	cmp	r0, #0
   184c8:	d100      	bne.n	184cc <setvbuf+0x94>
   184ca:	e06f      	b.n	185ac <setvbuf+0x174>
   184cc:	2280      	movs	r2, #128	; 0x80
   184ce:	89a3      	ldrh	r3, [r4, #12]
   184d0:	4313      	orrs	r3, r2
   184d2:	81a3      	strh	r3, [r4, #12]
   184d4:	e02e      	b.n	18534 <setvbuf+0xfc>
   184d6:	89a3      	ldrh	r3, [r4, #12]
   184d8:	059b      	lsls	r3, r3, #22
   184da:	d4c8      	bmi.n	1846e <setvbuf+0x36>
   184dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   184de:	f003 fa4f 	bl	1b980 <__retarget_lock_acquire_recursive>
   184e2:	e7c4      	b.n	1846e <setvbuf+0x36>
   184e4:	2500      	movs	r5, #0
   184e6:	2202      	movs	r2, #2
   184e8:	4313      	orrs	r3, r2
   184ea:	2200      	movs	r2, #0
   184ec:	60a2      	str	r2, [r4, #8]
   184ee:	0022      	movs	r2, r4
   184f0:	3243      	adds	r2, #67	; 0x43
   184f2:	6022      	str	r2, [r4, #0]
   184f4:	6122      	str	r2, [r4, #16]
   184f6:	2201      	movs	r2, #1
   184f8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   184fa:	81a3      	strh	r3, [r4, #12]
   184fc:	6162      	str	r2, [r4, #20]
   184fe:	4211      	tst	r1, r2
   18500:	d104      	bne.n	1850c <setvbuf+0xd4>
   18502:	059b      	lsls	r3, r3, #22
   18504:	d402      	bmi.n	1850c <setvbuf+0xd4>
   18506:	6da0      	ldr	r0, [r4, #88]	; 0x58
   18508:	f003 fa3c 	bl	1b984 <__retarget_lock_release_recursive>
   1850c:	0028      	movs	r0, r5
   1850e:	b003      	add	sp, #12
   18510:	bc0c      	pop	{r2, r3}
   18512:	4690      	mov	r8, r2
   18514:	4699      	mov	r9, r3
   18516:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18518:	6921      	ldr	r1, [r4, #16]
   1851a:	0028      	movs	r0, r5
   1851c:	f002 ff84 	bl	1b428 <_free_r>
   18520:	220c      	movs	r2, #12
   18522:	5ea3      	ldrsh	r3, [r4, r2]
   18524:	e7ba      	b.n	1849c <setvbuf+0x64>
   18526:	0028      	movs	r0, r5
   18528:	f002 fed4 	bl	1b2d4 <__sinit>
   1852c:	e794      	b.n	18458 <setvbuf+0x20>
   1852e:	4643      	mov	r3, r8
   18530:	2b00      	cmp	r3, #0
   18532:	d0c4      	beq.n	184be <setvbuf+0x86>
   18534:	6bab      	ldr	r3, [r5, #56]	; 0x38
   18536:	2b00      	cmp	r3, #0
   18538:	d027      	beq.n	1858a <setvbuf+0x152>
   1853a:	9b00      	ldr	r3, [sp, #0]
   1853c:	429f      	cmp	r7, r3
   1853e:	d02a      	beq.n	18596 <setvbuf+0x15e>
   18540:	2380      	movs	r3, #128	; 0x80
   18542:	89a2      	ldrh	r2, [r4, #12]
   18544:	011b      	lsls	r3, r3, #4
   18546:	4313      	orrs	r3, r2
   18548:	b21b      	sxth	r3, r3
   1854a:	81a3      	strh	r3, [r4, #12]
   1854c:	2e01      	cmp	r6, #1
   1854e:	d026      	beq.n	1859e <setvbuf+0x166>
   18550:	4642      	mov	r2, r8
   18552:	6022      	str	r2, [r4, #0]
   18554:	6122      	str	r2, [r4, #16]
   18556:	2208      	movs	r2, #8
   18558:	b29b      	uxth	r3, r3
   1855a:	6167      	str	r7, [r4, #20]
   1855c:	401a      	ands	r2, r3
   1855e:	d00b      	beq.n	18578 <setvbuf+0x140>
   18560:	07da      	lsls	r2, r3, #31
   18562:	d510      	bpl.n	18586 <setvbuf+0x14e>
   18564:	2200      	movs	r2, #0
   18566:	2501      	movs	r5, #1
   18568:	60a2      	str	r2, [r4, #8]
   1856a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1856c:	427f      	negs	r7, r7
   1856e:	61a7      	str	r7, [r4, #24]
   18570:	4015      	ands	r5, r2
   18572:	d0c6      	beq.n	18502 <setvbuf+0xca>
   18574:	2500      	movs	r5, #0
   18576:	e7c9      	b.n	1850c <setvbuf+0xd4>
   18578:	60a2      	str	r2, [r4, #8]
   1857a:	2501      	movs	r5, #1
   1857c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1857e:	4015      	ands	r5, r2
   18580:	d0bf      	beq.n	18502 <setvbuf+0xca>
   18582:	2500      	movs	r5, #0
   18584:	e7c2      	b.n	1850c <setvbuf+0xd4>
   18586:	60a7      	str	r7, [r4, #8]
   18588:	e7f7      	b.n	1857a <setvbuf+0x142>
   1858a:	0028      	movs	r0, r5
   1858c:	f002 fea2 	bl	1b2d4 <__sinit>
   18590:	9b00      	ldr	r3, [sp, #0]
   18592:	429f      	cmp	r7, r3
   18594:	d1d4      	bne.n	18540 <setvbuf+0x108>
   18596:	220c      	movs	r2, #12
   18598:	5ea3      	ldrsh	r3, [r4, r2]
   1859a:	2e01      	cmp	r6, #1
   1859c:	d1d8      	bne.n	18550 <setvbuf+0x118>
   1859e:	2201      	movs	r2, #1
   185a0:	4313      	orrs	r3, r2
   185a2:	81a3      	strh	r3, [r4, #12]
   185a4:	e7d4      	b.n	18550 <setvbuf+0x118>
   185a6:	2501      	movs	r5, #1
   185a8:	426d      	negs	r5, r5
   185aa:	e7af      	b.n	1850c <setvbuf+0xd4>
   185ac:	9b00      	ldr	r3, [sp, #0]
   185ae:	4699      	mov	r9, r3
   185b0:	42bb      	cmp	r3, r7
   185b2:	d005      	beq.n	185c0 <setvbuf+0x188>
   185b4:	0018      	movs	r0, r3
   185b6:	f7ff fb09 	bl	17bcc <malloc>
   185ba:	4680      	mov	r8, r0
   185bc:	2800      	cmp	r0, #0
   185be:	d104      	bne.n	185ca <setvbuf+0x192>
   185c0:	2501      	movs	r5, #1
   185c2:	220c      	movs	r2, #12
   185c4:	5ea3      	ldrsh	r3, [r4, r2]
   185c6:	426d      	negs	r5, r5
   185c8:	e78d      	b.n	184e6 <setvbuf+0xae>
   185ca:	464f      	mov	r7, r9
   185cc:	e77e      	b.n	184cc <setvbuf+0x94>
   185ce:	46c0      	nop			; (mov r8, r8)
   185d0:	200000d8 	.word	0x200000d8
   185d4:	fffff35c 	.word	0xfffff35c

000185d8 <strlen>:
   185d8:	b510      	push	{r4, lr}
   185da:	0783      	lsls	r3, r0, #30
   185dc:	d025      	beq.n	1862a <strlen+0x52>
   185de:	7803      	ldrb	r3, [r0, #0]
   185e0:	2b00      	cmp	r3, #0
   185e2:	d024      	beq.n	1862e <strlen+0x56>
   185e4:	0003      	movs	r3, r0
   185e6:	2103      	movs	r1, #3
   185e8:	e002      	b.n	185f0 <strlen+0x18>
   185ea:	781a      	ldrb	r2, [r3, #0]
   185ec:	2a00      	cmp	r2, #0
   185ee:	d01a      	beq.n	18626 <strlen+0x4e>
   185f0:	3301      	adds	r3, #1
   185f2:	420b      	tst	r3, r1
   185f4:	d1f9      	bne.n	185ea <strlen+0x12>
   185f6:	6819      	ldr	r1, [r3, #0]
   185f8:	4a0e      	ldr	r2, [pc, #56]	; (18634 <strlen+0x5c>)
   185fa:	4c0f      	ldr	r4, [pc, #60]	; (18638 <strlen+0x60>)
   185fc:	188a      	adds	r2, r1, r2
   185fe:	438a      	bics	r2, r1
   18600:	4222      	tst	r2, r4
   18602:	d106      	bne.n	18612 <strlen+0x3a>
   18604:	3304      	adds	r3, #4
   18606:	6819      	ldr	r1, [r3, #0]
   18608:	4a0a      	ldr	r2, [pc, #40]	; (18634 <strlen+0x5c>)
   1860a:	188a      	adds	r2, r1, r2
   1860c:	438a      	bics	r2, r1
   1860e:	4222      	tst	r2, r4
   18610:	d0f8      	beq.n	18604 <strlen+0x2c>
   18612:	001a      	movs	r2, r3
   18614:	781b      	ldrb	r3, [r3, #0]
   18616:	2b00      	cmp	r3, #0
   18618:	d003      	beq.n	18622 <strlen+0x4a>
   1861a:	3201      	adds	r2, #1
   1861c:	7811      	ldrb	r1, [r2, #0]
   1861e:	2900      	cmp	r1, #0
   18620:	d1fb      	bne.n	1861a <strlen+0x42>
   18622:	1a10      	subs	r0, r2, r0
   18624:	bd10      	pop	{r4, pc}
   18626:	1a18      	subs	r0, r3, r0
   18628:	e7fc      	b.n	18624 <strlen+0x4c>
   1862a:	0003      	movs	r3, r0
   1862c:	e7e3      	b.n	185f6 <strlen+0x1e>
   1862e:	2000      	movs	r0, #0
   18630:	e7f8      	b.n	18624 <strlen+0x4c>
   18632:	46c0      	nop			; (mov r8, r8)
   18634:	fefefeff 	.word	0xfefefeff
   18638:	80808080 	.word	0x80808080

0001863c <_strtol_l.isra.0>:
   1863c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1863e:	4657      	mov	r7, sl
   18640:	464e      	mov	r6, r9
   18642:	46de      	mov	lr, fp
   18644:	4645      	mov	r5, r8
   18646:	b5e0      	push	{r5, r6, r7, lr}
   18648:	001e      	movs	r6, r3
   1864a:	2308      	movs	r3, #8
   1864c:	b083      	sub	sp, #12
   1864e:	9001      	str	r0, [sp, #4]
   18650:	9100      	str	r1, [sp, #0]
   18652:	4692      	mov	sl, r2
   18654:	000f      	movs	r7, r1
   18656:	4699      	mov	r9, r3
   18658:	e000      	b.n	1865c <_strtol_l.isra.0+0x20>
   1865a:	002f      	movs	r7, r5
   1865c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1865e:	783c      	ldrb	r4, [r7, #0]
   18660:	f003 f978 	bl	1b954 <__locale_ctype_ptr_l>
   18664:	464a      	mov	r2, r9
   18666:	1900      	adds	r0, r0, r4
   18668:	7843      	ldrb	r3, [r0, #1]
   1866a:	1c7d      	adds	r5, r7, #1
   1866c:	421a      	tst	r2, r3
   1866e:	d1f4      	bne.n	1865a <_strtol_l.isra.0+0x1e>
   18670:	2c2d      	cmp	r4, #45	; 0x2d
   18672:	d04f      	beq.n	18714 <_strtol_l.isra.0+0xd8>
   18674:	2300      	movs	r3, #0
   18676:	4698      	mov	r8, r3
   18678:	2c2b      	cmp	r4, #43	; 0x2b
   1867a:	d05c      	beq.n	18736 <_strtol_l.isra.0+0xfa>
   1867c:	2e00      	cmp	r6, #0
   1867e:	d003      	beq.n	18688 <_strtol_l.isra.0+0x4c>
   18680:	2e10      	cmp	r6, #16
   18682:	d05b      	beq.n	1873c <_strtol_l.isra.0+0x100>
   18684:	0037      	movs	r7, r6
   18686:	e003      	b.n	18690 <_strtol_l.isra.0+0x54>
   18688:	2c30      	cmp	r4, #48	; 0x30
   1868a:	d063      	beq.n	18754 <_strtol_l.isra.0+0x118>
   1868c:	270a      	movs	r7, #10
   1868e:	260a      	movs	r6, #10
   18690:	4b35      	ldr	r3, [pc, #212]	; (18768 <_strtol_l.isra.0+0x12c>)
   18692:	0039      	movs	r1, r7
   18694:	4443      	add	r3, r8
   18696:	0018      	movs	r0, r3
   18698:	4699      	mov	r9, r3
   1869a:	f7fc faef 	bl	14c7c <__aeabi_uidivmod>
   1869e:	4648      	mov	r0, r9
   186a0:	468b      	mov	fp, r1
   186a2:	0039      	movs	r1, r7
   186a4:	f7fc fa64 	bl	14b70 <__udivsi3>
   186a8:	2200      	movs	r2, #0
   186aa:	0001      	movs	r1, r0
   186ac:	2000      	movs	r0, #0
   186ae:	0023      	movs	r3, r4
   186b0:	3b30      	subs	r3, #48	; 0x30
   186b2:	2b09      	cmp	r3, #9
   186b4:	d907      	bls.n	186c6 <_strtol_l.isra.0+0x8a>
   186b6:	3b11      	subs	r3, #17
   186b8:	2b19      	cmp	r3, #25
   186ba:	d903      	bls.n	186c4 <_strtol_l.isra.0+0x88>
   186bc:	0023      	movs	r3, r4
   186be:	3b61      	subs	r3, #97	; 0x61
   186c0:	2b19      	cmp	r3, #25
   186c2:	d80d      	bhi.n	186e0 <_strtol_l.isra.0+0xa4>
   186c4:	330a      	adds	r3, #10
   186c6:	429e      	cmp	r6, r3
   186c8:	dd0a      	ble.n	186e0 <_strtol_l.isra.0+0xa4>
   186ca:	1c54      	adds	r4, r2, #1
   186cc:	d005      	beq.n	186da <_strtol_l.isra.0+0x9e>
   186ce:	4281      	cmp	r1, r0
   186d0:	d31d      	bcc.n	1870e <_strtol_l.isra.0+0xd2>
   186d2:	d01a      	beq.n	1870a <_strtol_l.isra.0+0xce>
   186d4:	2201      	movs	r2, #1
   186d6:	4378      	muls	r0, r7
   186d8:	1818      	adds	r0, r3, r0
   186da:	782c      	ldrb	r4, [r5, #0]
   186dc:	3501      	adds	r5, #1
   186de:	e7e6      	b.n	186ae <_strtol_l.isra.0+0x72>
   186e0:	1c53      	adds	r3, r2, #1
   186e2:	d01c      	beq.n	1871e <_strtol_l.isra.0+0xe2>
   186e4:	4643      	mov	r3, r8
   186e6:	2b00      	cmp	r3, #0
   186e8:	d000      	beq.n	186ec <_strtol_l.isra.0+0xb0>
   186ea:	4240      	negs	r0, r0
   186ec:	4653      	mov	r3, sl
   186ee:	2b00      	cmp	r3, #0
   186f0:	d004      	beq.n	186fc <_strtol_l.isra.0+0xc0>
   186f2:	9b00      	ldr	r3, [sp, #0]
   186f4:	2a00      	cmp	r2, #0
   186f6:	d11c      	bne.n	18732 <_strtol_l.isra.0+0xf6>
   186f8:	4652      	mov	r2, sl
   186fa:	6013      	str	r3, [r2, #0]
   186fc:	b003      	add	sp, #12
   186fe:	bc3c      	pop	{r2, r3, r4, r5}
   18700:	4690      	mov	r8, r2
   18702:	4699      	mov	r9, r3
   18704:	46a2      	mov	sl, r4
   18706:	46ab      	mov	fp, r5
   18708:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1870a:	459b      	cmp	fp, r3
   1870c:	dae2      	bge.n	186d4 <_strtol_l.isra.0+0x98>
   1870e:	2201      	movs	r2, #1
   18710:	4252      	negs	r2, r2
   18712:	e7e2      	b.n	186da <_strtol_l.isra.0+0x9e>
   18714:	2301      	movs	r3, #1
   18716:	782c      	ldrb	r4, [r5, #0]
   18718:	4698      	mov	r8, r3
   1871a:	1cbd      	adds	r5, r7, #2
   1871c:	e7ae      	b.n	1867c <_strtol_l.isra.0+0x40>
   1871e:	2322      	movs	r3, #34	; 0x22
   18720:	9a01      	ldr	r2, [sp, #4]
   18722:	4648      	mov	r0, r9
   18724:	6013      	str	r3, [r2, #0]
   18726:	4653      	mov	r3, sl
   18728:	2b00      	cmp	r3, #0
   1872a:	d0e7      	beq.n	186fc <_strtol_l.isra.0+0xc0>
   1872c:	1e6b      	subs	r3, r5, #1
   1872e:	4648      	mov	r0, r9
   18730:	e7e2      	b.n	186f8 <_strtol_l.isra.0+0xbc>
   18732:	4681      	mov	r9, r0
   18734:	e7fa      	b.n	1872c <_strtol_l.isra.0+0xf0>
   18736:	782c      	ldrb	r4, [r5, #0]
   18738:	1cbd      	adds	r5, r7, #2
   1873a:	e79f      	b.n	1867c <_strtol_l.isra.0+0x40>
   1873c:	2c30      	cmp	r4, #48	; 0x30
   1873e:	d111      	bne.n	18764 <_strtol_l.isra.0+0x128>
   18740:	2220      	movs	r2, #32
   18742:	782b      	ldrb	r3, [r5, #0]
   18744:	4393      	bics	r3, r2
   18746:	2b58      	cmp	r3, #88	; 0x58
   18748:	d10c      	bne.n	18764 <_strtol_l.isra.0+0x128>
   1874a:	786c      	ldrb	r4, [r5, #1]
   1874c:	2710      	movs	r7, #16
   1874e:	3502      	adds	r5, #2
   18750:	2610      	movs	r6, #16
   18752:	e79d      	b.n	18690 <_strtol_l.isra.0+0x54>
   18754:	2220      	movs	r2, #32
   18756:	782b      	ldrb	r3, [r5, #0]
   18758:	4393      	bics	r3, r2
   1875a:	2b58      	cmp	r3, #88	; 0x58
   1875c:	d0f5      	beq.n	1874a <_strtol_l.isra.0+0x10e>
   1875e:	2708      	movs	r7, #8
   18760:	2608      	movs	r6, #8
   18762:	e795      	b.n	18690 <_strtol_l.isra.0+0x54>
   18764:	2710      	movs	r7, #16
   18766:	e793      	b.n	18690 <_strtol_l.isra.0+0x54>
   18768:	7fffffff 	.word	0x7fffffff

0001876c <strtol>:
   1876c:	0013      	movs	r3, r2
   1876e:	4a08      	ldr	r2, [pc, #32]	; (18790 <strtol+0x24>)
   18770:	b530      	push	{r4, r5, lr}
   18772:	0005      	movs	r5, r0
   18774:	6810      	ldr	r0, [r2, #0]
   18776:	b083      	sub	sp, #12
   18778:	6b44      	ldr	r4, [r0, #52]	; 0x34
   1877a:	2c00      	cmp	r4, #0
   1877c:	d006      	beq.n	1878c <strtol+0x20>
   1877e:	000a      	movs	r2, r1
   18780:	9400      	str	r4, [sp, #0]
   18782:	0029      	movs	r1, r5
   18784:	f7ff ff5a 	bl	1863c <_strtol_l.isra.0>
   18788:	b003      	add	sp, #12
   1878a:	bd30      	pop	{r4, r5, pc}
   1878c:	4c01      	ldr	r4, [pc, #4]	; (18794 <strtol+0x28>)
   1878e:	e7f6      	b.n	1877e <strtol+0x12>
   18790:	200000d8 	.word	0x200000d8
   18794:	2000091c 	.word	0x2000091c

00018798 <_vfprintf_r>:
   18798:	b5f0      	push	{r4, r5, r6, r7, lr}
   1879a:	46de      	mov	lr, fp
   1879c:	464e      	mov	r6, r9
   1879e:	4645      	mov	r5, r8
   187a0:	4657      	mov	r7, sl
   187a2:	b5e0      	push	{r5, r6, r7, lr}
   187a4:	b0c3      	sub	sp, #268	; 0x10c
   187a6:	4689      	mov	r9, r1
   187a8:	0014      	movs	r4, r2
   187aa:	001d      	movs	r5, r3
   187ac:	930f      	str	r3, [sp, #60]	; 0x3c
   187ae:	0006      	movs	r6, r0
   187b0:	9006      	str	r0, [sp, #24]
   187b2:	f003 f8d3 	bl	1b95c <_localeconv_r>
   187b6:	6803      	ldr	r3, [r0, #0]
   187b8:	0018      	movs	r0, r3
   187ba:	9318      	str	r3, [sp, #96]	; 0x60
   187bc:	f7ff ff0c 	bl	185d8 <strlen>
   187c0:	9017      	str	r0, [sp, #92]	; 0x5c
   187c2:	2e00      	cmp	r6, #0
   187c4:	d004      	beq.n	187d0 <_vfprintf_r+0x38>
   187c6:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   187c8:	9307      	str	r3, [sp, #28]
   187ca:	2b00      	cmp	r3, #0
   187cc:	d100      	bne.n	187d0 <_vfprintf_r+0x38>
   187ce:	e0a7      	b.n	18920 <_vfprintf_r+0x188>
   187d0:	464b      	mov	r3, r9
   187d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   187d4:	07db      	lsls	r3, r3, #31
   187d6:	d478      	bmi.n	188ca <_vfprintf_r+0x132>
   187d8:	464b      	mov	r3, r9
   187da:	210c      	movs	r1, #12
   187dc:	5e59      	ldrsh	r1, [r3, r1]
   187de:	b28b      	uxth	r3, r1
   187e0:	059a      	lsls	r2, r3, #22
   187e2:	d56e      	bpl.n	188c2 <_vfprintf_r+0x12a>
   187e4:	2280      	movs	r2, #128	; 0x80
   187e6:	0192      	lsls	r2, r2, #6
   187e8:	4213      	tst	r3, r2
   187ea:	d109      	bne.n	18800 <_vfprintf_r+0x68>
   187ec:	430a      	orrs	r2, r1
   187ee:	464b      	mov	r3, r9
   187f0:	4649      	mov	r1, r9
   187f2:	819a      	strh	r2, [r3, #12]
   187f4:	6e49      	ldr	r1, [r1, #100]	; 0x64
   187f6:	4bcc      	ldr	r3, [pc, #816]	; (18b28 <_vfprintf_r+0x390>)
   187f8:	400b      	ands	r3, r1
   187fa:	4649      	mov	r1, r9
   187fc:	664b      	str	r3, [r1, #100]	; 0x64
   187fe:	b293      	uxth	r3, r2
   18800:	071a      	lsls	r2, r3, #28
   18802:	d567      	bpl.n	188d4 <_vfprintf_r+0x13c>
   18804:	464a      	mov	r2, r9
   18806:	6912      	ldr	r2, [r2, #16]
   18808:	2a00      	cmp	r2, #0
   1880a:	d063      	beq.n	188d4 <_vfprintf_r+0x13c>
   1880c:	221a      	movs	r2, #26
   1880e:	401a      	ands	r2, r3
   18810:	2a0a      	cmp	r2, #10
   18812:	d100      	bne.n	18816 <_vfprintf_r+0x7e>
   18814:	e088      	b.n	18928 <_vfprintf_r+0x190>
   18816:	ab32      	add	r3, sp, #200	; 0xc8
   18818:	9325      	str	r3, [sp, #148]	; 0x94
   1881a:	2300      	movs	r3, #0
   1881c:	46cb      	mov	fp, r9
   1881e:	af25      	add	r7, sp, #148	; 0x94
   18820:	60bb      	str	r3, [r7, #8]
   18822:	607b      	str	r3, [r7, #4]
   18824:	9407      	str	r4, [sp, #28]
   18826:	9314      	str	r3, [sp, #80]	; 0x50
   18828:	9316      	str	r3, [sp, #88]	; 0x58
   1882a:	9315      	str	r3, [sp, #84]	; 0x54
   1882c:	ae32      	add	r6, sp, #200	; 0xc8
   1882e:	9319      	str	r3, [sp, #100]	; 0x64
   18830:	931a      	str	r3, [sp, #104]	; 0x68
   18832:	930a      	str	r3, [sp, #40]	; 0x28
   18834:	9c07      	ldr	r4, [sp, #28]
   18836:	7823      	ldrb	r3, [r4, #0]
   18838:	2b00      	cmp	r3, #0
   1883a:	d101      	bne.n	18840 <_vfprintf_r+0xa8>
   1883c:	f000 fd9e 	bl	1937c <_vfprintf_r+0xbe4>
   18840:	2b25      	cmp	r3, #37	; 0x25
   18842:	d103      	bne.n	1884c <_vfprintf_r+0xb4>
   18844:	f000 fd9a 	bl	1937c <_vfprintf_r+0xbe4>
   18848:	2b25      	cmp	r3, #37	; 0x25
   1884a:	d003      	beq.n	18854 <_vfprintf_r+0xbc>
   1884c:	3401      	adds	r4, #1
   1884e:	7823      	ldrb	r3, [r4, #0]
   18850:	2b00      	cmp	r3, #0
   18852:	d1f9      	bne.n	18848 <_vfprintf_r+0xb0>
   18854:	9b07      	ldr	r3, [sp, #28]
   18856:	1ae5      	subs	r5, r4, r3
   18858:	d010      	beq.n	1887c <_vfprintf_r+0xe4>
   1885a:	9b07      	ldr	r3, [sp, #28]
   1885c:	6075      	str	r5, [r6, #4]
   1885e:	6033      	str	r3, [r6, #0]
   18860:	68bb      	ldr	r3, [r7, #8]
   18862:	195b      	adds	r3, r3, r5
   18864:	60bb      	str	r3, [r7, #8]
   18866:	687b      	ldr	r3, [r7, #4]
   18868:	3301      	adds	r3, #1
   1886a:	607b      	str	r3, [r7, #4]
   1886c:	2b07      	cmp	r3, #7
   1886e:	dc4c      	bgt.n	1890a <_vfprintf_r+0x172>
   18870:	3608      	adds	r6, #8
   18872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18874:	469c      	mov	ip, r3
   18876:	44ac      	add	ip, r5
   18878:	4663      	mov	r3, ip
   1887a:	930a      	str	r3, [sp, #40]	; 0x28
   1887c:	7823      	ldrb	r3, [r4, #0]
   1887e:	2b00      	cmp	r3, #0
   18880:	d101      	bne.n	18886 <_vfprintf_r+0xee>
   18882:	f000 fc99 	bl	191b8 <_vfprintf_r+0xa20>
   18886:	1c63      	adds	r3, r4, #1
   18888:	9307      	str	r3, [sp, #28]
   1888a:	2300      	movs	r3, #0
   1888c:	aa16      	add	r2, sp, #88	; 0x58
   1888e:	77d3      	strb	r3, [r2, #31]
   18890:	2201      	movs	r2, #1
   18892:	4252      	negs	r2, r2
   18894:	4692      	mov	sl, r2
   18896:	2200      	movs	r2, #0
   18898:	920b      	str	r2, [sp, #44]	; 0x2c
   1889a:	3220      	adds	r2, #32
   1889c:	4691      	mov	r9, r2
   1889e:	3220      	adds	r2, #32
   188a0:	7863      	ldrb	r3, [r4, #1]
   188a2:	2100      	movs	r1, #0
   188a4:	2000      	movs	r0, #0
   188a6:	2400      	movs	r4, #0
   188a8:	4694      	mov	ip, r2
   188aa:	9a07      	ldr	r2, [sp, #28]
   188ac:	3201      	adds	r2, #1
   188ae:	9207      	str	r2, [sp, #28]
   188b0:	001a      	movs	r2, r3
   188b2:	3a20      	subs	r2, #32
   188b4:	2a58      	cmp	r2, #88	; 0x58
   188b6:	d900      	bls.n	188ba <_vfprintf_r+0x122>
   188b8:	e2e7      	b.n	18e8a <_vfprintf_r+0x6f2>
   188ba:	4d9c      	ldr	r5, [pc, #624]	; (18b2c <_vfprintf_r+0x394>)
   188bc:	0092      	lsls	r2, r2, #2
   188be:	58aa      	ldr	r2, [r5, r2]
   188c0:	4697      	mov	pc, r2
   188c2:	464b      	mov	r3, r9
   188c4:	6d98      	ldr	r0, [r3, #88]	; 0x58
   188c6:	f003 f85b 	bl	1b980 <__retarget_lock_acquire_recursive>
   188ca:	464b      	mov	r3, r9
   188cc:	210c      	movs	r1, #12
   188ce:	5e59      	ldrsh	r1, [r3, r1]
   188d0:	b28b      	uxth	r3, r1
   188d2:	e787      	b.n	187e4 <_vfprintf_r+0x4c>
   188d4:	4649      	mov	r1, r9
   188d6:	9806      	ldr	r0, [sp, #24]
   188d8:	f001 fb0e 	bl	19ef8 <__swsetup_r>
   188dc:	464b      	mov	r3, r9
   188de:	2800      	cmp	r0, #0
   188e0:	d03a      	beq.n	18958 <_vfprintf_r+0x1c0>
   188e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   188e4:	07db      	lsls	r3, r3, #31
   188e6:	d405      	bmi.n	188f4 <_vfprintf_r+0x15c>
   188e8:	464b      	mov	r3, r9
   188ea:	899b      	ldrh	r3, [r3, #12]
   188ec:	059b      	lsls	r3, r3, #22
   188ee:	d401      	bmi.n	188f4 <_vfprintf_r+0x15c>
   188f0:	f000 ffcf 	bl	19892 <_vfprintf_r+0x10fa>
   188f4:	2301      	movs	r3, #1
   188f6:	425b      	negs	r3, r3
   188f8:	930a      	str	r3, [sp, #40]	; 0x28
   188fa:	980a      	ldr	r0, [sp, #40]	; 0x28
   188fc:	b043      	add	sp, #268	; 0x10c
   188fe:	bc3c      	pop	{r2, r3, r4, r5}
   18900:	4690      	mov	r8, r2
   18902:	4699      	mov	r9, r3
   18904:	46a2      	mov	sl, r4
   18906:	46ab      	mov	fp, r5
   18908:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1890a:	003a      	movs	r2, r7
   1890c:	4659      	mov	r1, fp
   1890e:	9806      	ldr	r0, [sp, #24]
   18910:	f003 ff28 	bl	1c764 <__sprint_r>
   18914:	2800      	cmp	r0, #0
   18916:	d001      	beq.n	1891c <_vfprintf_r+0x184>
   18918:	f000 fcce 	bl	192b8 <_vfprintf_r+0xb20>
   1891c:	ae32      	add	r6, sp, #200	; 0xc8
   1891e:	e7a8      	b.n	18872 <_vfprintf_r+0xda>
   18920:	9806      	ldr	r0, [sp, #24]
   18922:	f002 fcd7 	bl	1b2d4 <__sinit>
   18926:	e753      	b.n	187d0 <_vfprintf_r+0x38>
   18928:	464a      	mov	r2, r9
   1892a:	210e      	movs	r1, #14
   1892c:	5e52      	ldrsh	r2, [r2, r1]
   1892e:	2a00      	cmp	r2, #0
   18930:	da00      	bge.n	18934 <_vfprintf_r+0x19c>
   18932:	e770      	b.n	18816 <_vfprintf_r+0x7e>
   18934:	464a      	mov	r2, r9
   18936:	6e52      	ldr	r2, [r2, #100]	; 0x64
   18938:	07d2      	lsls	r2, r2, #31
   1893a:	d405      	bmi.n	18948 <_vfprintf_r+0x1b0>
   1893c:	059b      	lsls	r3, r3, #22
   1893e:	d403      	bmi.n	18948 <_vfprintf_r+0x1b0>
   18940:	464b      	mov	r3, r9
   18942:	6d98      	ldr	r0, [r3, #88]	; 0x58
   18944:	f003 f81e 	bl	1b984 <__retarget_lock_release_recursive>
   18948:	002b      	movs	r3, r5
   1894a:	0022      	movs	r2, r4
   1894c:	4649      	mov	r1, r9
   1894e:	9806      	ldr	r0, [sp, #24]
   18950:	f001 fa8e 	bl	19e70 <__sbprintf>
   18954:	900a      	str	r0, [sp, #40]	; 0x28
   18956:	e7d0      	b.n	188fa <_vfprintf_r+0x162>
   18958:	899b      	ldrh	r3, [r3, #12]
   1895a:	e757      	b.n	1880c <_vfprintf_r+0x74>
   1895c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1895e:	920f      	str	r2, [sp, #60]	; 0x3c
   18960:	425b      	negs	r3, r3
   18962:	930b      	str	r3, [sp, #44]	; 0x2c
   18964:	2304      	movs	r3, #4
   18966:	431c      	orrs	r4, r3
   18968:	9b07      	ldr	r3, [sp, #28]
   1896a:	781b      	ldrb	r3, [r3, #0]
   1896c:	e79d      	b.n	188aa <_vfprintf_r+0x112>
   1896e:	9b07      	ldr	r3, [sp, #28]
   18970:	2101      	movs	r1, #1
   18972:	781b      	ldrb	r3, [r3, #0]
   18974:	202b      	movs	r0, #43	; 0x2b
   18976:	e798      	b.n	188aa <_vfprintf_r+0x112>
   18978:	9b07      	ldr	r3, [sp, #28]
   1897a:	1c5a      	adds	r2, r3, #1
   1897c:	781b      	ldrb	r3, [r3, #0]
   1897e:	4690      	mov	r8, r2
   18980:	2b2a      	cmp	r3, #42	; 0x2a
   18982:	d101      	bne.n	18988 <_vfprintf_r+0x1f0>
   18984:	f001 fa38 	bl	19df8 <_vfprintf_r+0x1660>
   18988:	001a      	movs	r2, r3
   1898a:	2500      	movs	r5, #0
   1898c:	3a30      	subs	r2, #48	; 0x30
   1898e:	46aa      	mov	sl, r5
   18990:	2a09      	cmp	r2, #9
   18992:	d901      	bls.n	18998 <_vfprintf_r+0x200>
   18994:	f001 f96d 	bl	19c72 <_vfprintf_r+0x14da>
   18998:	0025      	movs	r5, r4
   1899a:	4643      	mov	r3, r8
   1899c:	4654      	mov	r4, sl
   1899e:	4688      	mov	r8, r1
   189a0:	4682      	mov	sl, r0
   189a2:	00a1      	lsls	r1, r4, #2
   189a4:	190c      	adds	r4, r1, r4
   189a6:	7818      	ldrb	r0, [r3, #0]
   189a8:	0064      	lsls	r4, r4, #1
   189aa:	18a4      	adds	r4, r4, r2
   189ac:	0002      	movs	r2, r0
   189ae:	1c59      	adds	r1, r3, #1
   189b0:	3a30      	subs	r2, #48	; 0x30
   189b2:	000b      	movs	r3, r1
   189b4:	2a09      	cmp	r2, #9
   189b6:	d9f4      	bls.n	189a2 <_vfprintf_r+0x20a>
   189b8:	9107      	str	r1, [sp, #28]
   189ba:	0003      	movs	r3, r0
   189bc:	4641      	mov	r1, r8
   189be:	4650      	mov	r0, sl
   189c0:	46a2      	mov	sl, r4
   189c2:	002c      	movs	r4, r5
   189c4:	e774      	b.n	188b0 <_vfprintf_r+0x118>
   189c6:	9312      	str	r3, [sp, #72]	; 0x48
   189c8:	2900      	cmp	r1, #0
   189ca:	d001      	beq.n	189d0 <_vfprintf_r+0x238>
   189cc:	f001 fa2e 	bl	19e2c <_vfprintf_r+0x1694>
   189d0:	4b57      	ldr	r3, [pc, #348]	; (18b30 <_vfprintf_r+0x398>)
   189d2:	9319      	str	r3, [sp, #100]	; 0x64
   189d4:	06a3      	lsls	r3, r4, #26
   189d6:	d501      	bpl.n	189dc <_vfprintf_r+0x244>
   189d8:	f000 fe9a 	bl	19710 <_vfprintf_r+0xf78>
   189dc:	06e3      	lsls	r3, r4, #27
   189de:	d501      	bpl.n	189e4 <_vfprintf_r+0x24c>
   189e0:	f000 fd9a 	bl	19518 <_vfprintf_r+0xd80>
   189e4:	0663      	lsls	r3, r4, #25
   189e6:	d401      	bmi.n	189ec <_vfprintf_r+0x254>
   189e8:	f000 fd96 	bl	19518 <_vfprintf_r+0xd80>
   189ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   189ee:	881a      	ldrh	r2, [r3, #0]
   189f0:	920c      	str	r2, [sp, #48]	; 0x30
   189f2:	2200      	movs	r2, #0
   189f4:	3304      	adds	r3, #4
   189f6:	920d      	str	r2, [sp, #52]	; 0x34
   189f8:	930f      	str	r3, [sp, #60]	; 0x3c
   189fa:	07e3      	lsls	r3, r4, #31
   189fc:	d401      	bmi.n	18a02 <_vfprintf_r+0x26a>
   189fe:	f000 fd76 	bl	194ee <_vfprintf_r+0xd56>
   18a02:	990c      	ldr	r1, [sp, #48]	; 0x30
   18a04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   18a06:	000b      	movs	r3, r1
   18a08:	4313      	orrs	r3, r2
   18a0a:	001a      	movs	r2, r3
   18a0c:	2302      	movs	r3, #2
   18a0e:	2a00      	cmp	r2, #0
   18a10:	d008      	beq.n	18a24 <_vfprintf_r+0x28c>
   18a12:	2030      	movs	r0, #48	; 0x30
   18a14:	a91e      	add	r1, sp, #120	; 0x78
   18a16:	7008      	strb	r0, [r1, #0]
   18a18:	2548      	movs	r5, #72	; 0x48
   18a1a:	4668      	mov	r0, sp
   18a1c:	1940      	adds	r0, r0, r5
   18a1e:	7800      	ldrb	r0, [r0, #0]
   18a20:	431c      	orrs	r4, r3
   18a22:	7048      	strb	r0, [r1, #1]
   18a24:	2100      	movs	r1, #0
   18a26:	4688      	mov	r8, r1
   18a28:	a816      	add	r0, sp, #88	; 0x58
   18a2a:	77c1      	strb	r1, [r0, #31]
   18a2c:	4651      	mov	r1, sl
   18a2e:	3101      	adds	r1, #1
   18a30:	d100      	bne.n	18a34 <_vfprintf_r+0x29c>
   18a32:	e0e6      	b.n	18c02 <_vfprintf_r+0x46a>
   18a34:	2180      	movs	r1, #128	; 0x80
   18a36:	0020      	movs	r0, r4
   18a38:	4388      	bics	r0, r1
   18a3a:	9009      	str	r0, [sp, #36]	; 0x24
   18a3c:	2a00      	cmp	r2, #0
   18a3e:	d000      	beq.n	18a42 <_vfprintf_r+0x2aa>
   18a40:	e0e3      	b.n	18c0a <_vfprintf_r+0x472>
   18a42:	4652      	mov	r2, sl
   18a44:	2a00      	cmp	r2, #0
   18a46:	d001      	beq.n	18a4c <_vfprintf_r+0x2b4>
   18a48:	f000 fc38 	bl	192bc <_vfprintf_r+0xb24>
   18a4c:	2b00      	cmp	r3, #0
   18a4e:	d001      	beq.n	18a54 <_vfprintf_r+0x2bc>
   18a50:	f000 fd0c 	bl	1946c <_vfprintf_r+0xcd4>
   18a54:	2001      	movs	r0, #1
   18a56:	ab32      	add	r3, sp, #200	; 0xc8
   18a58:	4020      	ands	r0, r4
   18a5a:	900e      	str	r0, [sp, #56]	; 0x38
   18a5c:	9311      	str	r3, [sp, #68]	; 0x44
   18a5e:	d008      	beq.n	18a72 <_vfprintf_r+0x2da>
   18a60:	2327      	movs	r3, #39	; 0x27
   18a62:	2130      	movs	r1, #48	; 0x30
   18a64:	aa28      	add	r2, sp, #160	; 0xa0
   18a66:	54d1      	strb	r1, [r2, r3]
   18a68:	aa16      	add	r2, sp, #88	; 0x58
   18a6a:	4694      	mov	ip, r2
   18a6c:	3348      	adds	r3, #72	; 0x48
   18a6e:	4463      	add	r3, ip
   18a70:	9311      	str	r3, [sp, #68]	; 0x44
   18a72:	4653      	mov	r3, sl
   18a74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18a76:	9308      	str	r3, [sp, #32]
   18a78:	4592      	cmp	sl, r2
   18a7a:	da00      	bge.n	18a7e <_vfprintf_r+0x2e6>
   18a7c:	9208      	str	r2, [sp, #32]
   18a7e:	2300      	movs	r3, #0
   18a80:	9313      	str	r3, [sp, #76]	; 0x4c
   18a82:	4643      	mov	r3, r8
   18a84:	2b00      	cmp	r3, #0
   18a86:	d002      	beq.n	18a8e <_vfprintf_r+0x2f6>
   18a88:	9b08      	ldr	r3, [sp, #32]
   18a8a:	3301      	adds	r3, #1
   18a8c:	9308      	str	r3, [sp, #32]
   18a8e:	2302      	movs	r3, #2
   18a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18a92:	401a      	ands	r2, r3
   18a94:	4691      	mov	r9, r2
   18a96:	d002      	beq.n	18a9e <_vfprintf_r+0x306>
   18a98:	9b08      	ldr	r3, [sp, #32]
   18a9a:	3302      	adds	r3, #2
   18a9c:	9308      	str	r3, [sp, #32]
   18a9e:	2384      	movs	r3, #132	; 0x84
   18aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18aa2:	401a      	ands	r2, r3
   18aa4:	9210      	str	r2, [sp, #64]	; 0x40
   18aa6:	d000      	beq.n	18aaa <_vfprintf_r+0x312>
   18aa8:	e207      	b.n	18eba <_vfprintf_r+0x722>
   18aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18aac:	9a08      	ldr	r2, [sp, #32]
   18aae:	1a9c      	subs	r4, r3, r2
   18ab0:	2c00      	cmp	r4, #0
   18ab2:	dc00      	bgt.n	18ab6 <_vfprintf_r+0x31e>
   18ab4:	e201      	b.n	18eba <_vfprintf_r+0x722>
   18ab6:	491f      	ldr	r1, [pc, #124]	; (18b34 <_vfprintf_r+0x39c>)
   18ab8:	68ba      	ldr	r2, [r7, #8]
   18aba:	687b      	ldr	r3, [r7, #4]
   18abc:	4688      	mov	r8, r1
   18abe:	2c10      	cmp	r4, #16
   18ac0:	dd21      	ble.n	18b06 <_vfprintf_r+0x36e>
   18ac2:	0031      	movs	r1, r6
   18ac4:	2510      	movs	r5, #16
   18ac6:	465e      	mov	r6, fp
   18ac8:	e003      	b.n	18ad2 <_vfprintf_r+0x33a>
   18aca:	3c10      	subs	r4, #16
   18acc:	3108      	adds	r1, #8
   18ace:	2c10      	cmp	r4, #16
   18ad0:	dd17      	ble.n	18b02 <_vfprintf_r+0x36a>
   18ad2:	4640      	mov	r0, r8
   18ad4:	3210      	adds	r2, #16
   18ad6:	3301      	adds	r3, #1
   18ad8:	6008      	str	r0, [r1, #0]
   18ada:	604d      	str	r5, [r1, #4]
   18adc:	60ba      	str	r2, [r7, #8]
   18ade:	607b      	str	r3, [r7, #4]
   18ae0:	2b07      	cmp	r3, #7
   18ae2:	ddf2      	ble.n	18aca <_vfprintf_r+0x332>
   18ae4:	003a      	movs	r2, r7
   18ae6:	0031      	movs	r1, r6
   18ae8:	9806      	ldr	r0, [sp, #24]
   18aea:	f003 fe3b 	bl	1c764 <__sprint_r>
   18aee:	2800      	cmp	r0, #0
   18af0:	d001      	beq.n	18af6 <_vfprintf_r+0x35e>
   18af2:	f000 fccf 	bl	19494 <_vfprintf_r+0xcfc>
   18af6:	3c10      	subs	r4, #16
   18af8:	68ba      	ldr	r2, [r7, #8]
   18afa:	687b      	ldr	r3, [r7, #4]
   18afc:	a932      	add	r1, sp, #200	; 0xc8
   18afe:	2c10      	cmp	r4, #16
   18b00:	dce7      	bgt.n	18ad2 <_vfprintf_r+0x33a>
   18b02:	46b3      	mov	fp, r6
   18b04:	000e      	movs	r6, r1
   18b06:	4641      	mov	r1, r8
   18b08:	6074      	str	r4, [r6, #4]
   18b0a:	3301      	adds	r3, #1
   18b0c:	18a4      	adds	r4, r4, r2
   18b0e:	6031      	str	r1, [r6, #0]
   18b10:	60bc      	str	r4, [r7, #8]
   18b12:	607b      	str	r3, [r7, #4]
   18b14:	2b07      	cmp	r3, #7
   18b16:	dd01      	ble.n	18b1c <_vfprintf_r+0x384>
   18b18:	f000 fcae 	bl	19478 <_vfprintf_r+0xce0>
   18b1c:	ab16      	add	r3, sp, #88	; 0x58
   18b1e:	7fdb      	ldrb	r3, [r3, #31]
   18b20:	3608      	adds	r6, #8
   18b22:	4698      	mov	r8, r3
   18b24:	e1ca      	b.n	18ebc <_vfprintf_r+0x724>
   18b26:	46c0      	nop			; (mov r8, r8)
   18b28:	ffffdfff 	.word	0xffffdfff
   18b2c:	0001f8ac 	.word	0x0001f8ac
   18b30:	0001fa34 	.word	0x0001fa34
   18b34:	0001fa50 	.word	0x0001fa50
   18b38:	2200      	movs	r2, #0
   18b3a:	9d07      	ldr	r5, [sp, #28]
   18b3c:	3b30      	subs	r3, #48	; 0x30
   18b3e:	46a8      	mov	r8, r5
   18b40:	920b      	str	r2, [sp, #44]	; 0x2c
   18b42:	001a      	movs	r2, r3
   18b44:	9408      	str	r4, [sp, #32]
   18b46:	002c      	movs	r4, r5
   18b48:	4655      	mov	r5, sl
   18b4a:	4682      	mov	sl, r0
   18b4c:	4640      	mov	r0, r8
   18b4e:	4688      	mov	r8, r1
   18b50:	0011      	movs	r1, r2
   18b52:	2200      	movs	r2, #0
   18b54:	0093      	lsls	r3, r2, #2
   18b56:	189a      	adds	r2, r3, r2
   18b58:	7803      	ldrb	r3, [r0, #0]
   18b5a:	0052      	lsls	r2, r2, #1
   18b5c:	188a      	adds	r2, r1, r2
   18b5e:	0019      	movs	r1, r3
   18b60:	3401      	adds	r4, #1
   18b62:	3930      	subs	r1, #48	; 0x30
   18b64:	0020      	movs	r0, r4
   18b66:	2909      	cmp	r1, #9
   18b68:	d9f4      	bls.n	18b54 <_vfprintf_r+0x3bc>
   18b6a:	9407      	str	r4, [sp, #28]
   18b6c:	4650      	mov	r0, sl
   18b6e:	9c08      	ldr	r4, [sp, #32]
   18b70:	920b      	str	r2, [sp, #44]	; 0x2c
   18b72:	4641      	mov	r1, r8
   18b74:	46aa      	mov	sl, r5
   18b76:	e69b      	b.n	188b0 <_vfprintf_r+0x118>
   18b78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   18b7a:	9312      	str	r3, [sp, #72]	; 0x48
   18b7c:	6813      	ldr	r3, [r2, #0]
   18b7e:	2120      	movs	r1, #32
   18b80:	9308      	str	r3, [sp, #32]
   18b82:	466b      	mov	r3, sp
   18b84:	185b      	adds	r3, r3, r1
   18b86:	781b      	ldrb	r3, [r3, #0]
   18b88:	ad28      	add	r5, sp, #160	; 0xa0
   18b8a:	702b      	strb	r3, [r5, #0]
   18b8c:	2300      	movs	r3, #0
   18b8e:	a916      	add	r1, sp, #88	; 0x58
   18b90:	77cb      	strb	r3, [r1, #31]
   18b92:	0013      	movs	r3, r2
   18b94:	3304      	adds	r3, #4
   18b96:	930f      	str	r3, [sp, #60]	; 0x3c
   18b98:	2300      	movs	r3, #0
   18b9a:	9409      	str	r4, [sp, #36]	; 0x24
   18b9c:	4698      	mov	r8, r3
   18b9e:	3301      	adds	r3, #1
   18ba0:	9308      	str	r3, [sp, #32]
   18ba2:	930e      	str	r3, [sp, #56]	; 0x38
   18ba4:	2300      	movs	r3, #0
   18ba6:	9511      	str	r5, [sp, #68]	; 0x44
   18ba8:	469a      	mov	sl, r3
   18baa:	9313      	str	r3, [sp, #76]	; 0x4c
   18bac:	e76f      	b.n	18a8e <_vfprintf_r+0x2f6>
   18bae:	9312      	str	r3, [sp, #72]	; 0x48
   18bb0:	2900      	cmp	r1, #0
   18bb2:	d001      	beq.n	18bb8 <_vfprintf_r+0x420>
   18bb4:	f001 f94d 	bl	19e52 <_vfprintf_r+0x16ba>
   18bb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   18bba:	06a3      	lsls	r3, r4, #26
   18bbc:	d501      	bpl.n	18bc2 <_vfprintf_r+0x42a>
   18bbe:	f000 fd5a 	bl	19676 <_vfprintf_r+0xede>
   18bc2:	06e3      	lsls	r3, r4, #27
   18bc4:	d501      	bpl.n	18bca <_vfprintf_r+0x432>
   18bc6:	f000 fcab 	bl	19520 <_vfprintf_r+0xd88>
   18bca:	0663      	lsls	r3, r4, #25
   18bcc:	d401      	bmi.n	18bd2 <_vfprintf_r+0x43a>
   18bce:	f000 fca7 	bl	19520 <_vfprintf_r+0xd88>
   18bd2:	2100      	movs	r1, #0
   18bd4:	5e53      	ldrsh	r3, [r2, r1]
   18bd6:	930c      	str	r3, [sp, #48]	; 0x30
   18bd8:	3204      	adds	r2, #4
   18bda:	17db      	asrs	r3, r3, #31
   18bdc:	930d      	str	r3, [sp, #52]	; 0x34
   18bde:	920f      	str	r2, [sp, #60]	; 0x3c
   18be0:	2b00      	cmp	r3, #0
   18be2:	da01      	bge.n	18be8 <_vfprintf_r+0x450>
   18be4:	f000 fdb2 	bl	1974c <_vfprintf_r+0xfb4>
   18be8:	990c      	ldr	r1, [sp, #48]	; 0x30
   18bea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   18bec:	0008      	movs	r0, r1
   18bee:	4651      	mov	r1, sl
   18bf0:	ab16      	add	r3, sp, #88	; 0x58
   18bf2:	7fdb      	ldrb	r3, [r3, #31]
   18bf4:	4310      	orrs	r0, r2
   18bf6:	4698      	mov	r8, r3
   18bf8:	0002      	movs	r2, r0
   18bfa:	2301      	movs	r3, #1
   18bfc:	3101      	adds	r1, #1
   18bfe:	d000      	beq.n	18c02 <_vfprintf_r+0x46a>
   18c00:	e718      	b.n	18a34 <_vfprintf_r+0x29c>
   18c02:	2a00      	cmp	r2, #0
   18c04:	d100      	bne.n	18c08 <_vfprintf_r+0x470>
   18c06:	e35a      	b.n	192be <_vfprintf_r+0xb26>
   18c08:	9409      	str	r4, [sp, #36]	; 0x24
   18c0a:	2b01      	cmp	r3, #1
   18c0c:	d101      	bne.n	18c12 <_vfprintf_r+0x47a>
   18c0e:	f000 fc06 	bl	1941e <_vfprintf_r+0xc86>
   18c12:	2b02      	cmp	r3, #2
   18c14:	d000      	beq.n	18c18 <_vfprintf_r+0x480>
   18c16:	e380      	b.n	1931a <_vfprintf_r+0xb82>
   18c18:	9c19      	ldr	r4, [sp, #100]	; 0x64
   18c1a:	200f      	movs	r0, #15
   18c1c:	46a1      	mov	r9, r4
   18c1e:	46b4      	mov	ip, r6
   18c20:	ab32      	add	r3, sp, #200	; 0xc8
   18c22:	0019      	movs	r1, r3
   18c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18c28:	0004      	movs	r4, r0
   18c2a:	464d      	mov	r5, r9
   18c2c:	4014      	ands	r4, r2
   18c2e:	5d2c      	ldrb	r4, [r5, r4]
   18c30:	071e      	lsls	r6, r3, #28
   18c32:	0915      	lsrs	r5, r2, #4
   18c34:	3901      	subs	r1, #1
   18c36:	432e      	orrs	r6, r5
   18c38:	700c      	strb	r4, [r1, #0]
   18c3a:	091c      	lsrs	r4, r3, #4
   18c3c:	0023      	movs	r3, r4
   18c3e:	0034      	movs	r4, r6
   18c40:	0032      	movs	r2, r6
   18c42:	431c      	orrs	r4, r3
   18c44:	d1f0      	bne.n	18c28 <_vfprintf_r+0x490>
   18c46:	920c      	str	r2, [sp, #48]	; 0x30
   18c48:	930d      	str	r3, [sp, #52]	; 0x34
   18c4a:	ab32      	add	r3, sp, #200	; 0xc8
   18c4c:	1a5b      	subs	r3, r3, r1
   18c4e:	9111      	str	r1, [sp, #68]	; 0x44
   18c50:	4666      	mov	r6, ip
   18c52:	930e      	str	r3, [sp, #56]	; 0x38
   18c54:	e70d      	b.n	18a72 <_vfprintf_r+0x2da>
   18c56:	4663      	mov	r3, ip
   18c58:	431c      	orrs	r4, r3
   18c5a:	9b07      	ldr	r3, [sp, #28]
   18c5c:	781b      	ldrb	r3, [r3, #0]
   18c5e:	e624      	b.n	188aa <_vfprintf_r+0x112>
   18c60:	9b07      	ldr	r3, [sp, #28]
   18c62:	781b      	ldrb	r3, [r3, #0]
   18c64:	2b6c      	cmp	r3, #108	; 0x6c
   18c66:	d101      	bne.n	18c6c <_vfprintf_r+0x4d4>
   18c68:	f000 fe8c 	bl	19984 <_vfprintf_r+0x11ec>
   18c6c:	2210      	movs	r2, #16
   18c6e:	4314      	orrs	r4, r2
   18c70:	e61b      	b.n	188aa <_vfprintf_r+0x112>
   18c72:	2900      	cmp	r1, #0
   18c74:	d001      	beq.n	18c7a <_vfprintf_r+0x4e2>
   18c76:	f001 f8d5 	bl	19e24 <_vfprintf_r+0x168c>
   18c7a:	06a3      	lsls	r3, r4, #26
   18c7c:	d501      	bpl.n	18c82 <_vfprintf_r+0x4ea>
   18c7e:	f000 fe76 	bl	1996e <_vfprintf_r+0x11d6>
   18c82:	06e3      	lsls	r3, r4, #27
   18c84:	d500      	bpl.n	18c88 <_vfprintf_r+0x4f0>
   18c86:	e110      	b.n	18eaa <_vfprintf_r+0x712>
   18c88:	0663      	lsls	r3, r4, #25
   18c8a:	d400      	bmi.n	18c8e <_vfprintf_r+0x4f6>
   18c8c:	e10d      	b.n	18eaa <_vfprintf_r+0x712>
   18c8e:	4669      	mov	r1, sp
   18c90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18c92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   18c94:	681a      	ldr	r2, [r3, #0]
   18c96:	3304      	adds	r3, #4
   18c98:	9208      	str	r2, [sp, #32]
   18c9a:	8011      	strh	r1, [r2, #0]
   18c9c:	930f      	str	r3, [sp, #60]	; 0x3c
   18c9e:	e5c9      	b.n	18834 <_vfprintf_r+0x9c>
   18ca0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   18ca2:	2230      	movs	r2, #48	; 0x30
   18ca4:	680b      	ldr	r3, [r1, #0]
   18ca6:	930c      	str	r3, [sp, #48]	; 0x30
   18ca8:	2300      	movs	r3, #0
   18caa:	930d      	str	r3, [sp, #52]	; 0x34
   18cac:	3302      	adds	r3, #2
   18cae:	431c      	orrs	r4, r3
   18cb0:	ab1e      	add	r3, sp, #120	; 0x78
   18cb2:	701a      	strb	r2, [r3, #0]
   18cb4:	3248      	adds	r2, #72	; 0x48
   18cb6:	705a      	strb	r2, [r3, #1]
   18cb8:	000b      	movs	r3, r1
   18cba:	3304      	adds	r3, #4
   18cbc:	930f      	str	r3, [sp, #60]	; 0x3c
   18cbe:	4bc1      	ldr	r3, [pc, #772]	; (18fc4 <_vfprintf_r+0x82c>)
   18cc0:	9212      	str	r2, [sp, #72]	; 0x48
   18cc2:	9319      	str	r3, [sp, #100]	; 0x64
   18cc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18cc6:	2302      	movs	r3, #2
   18cc8:	e6ac      	b.n	18a24 <_vfprintf_r+0x28c>
   18cca:	464b      	mov	r3, r9
   18ccc:	431c      	orrs	r4, r3
   18cce:	9b07      	ldr	r3, [sp, #28]
   18cd0:	781b      	ldrb	r3, [r3, #0]
   18cd2:	e5ea      	b.n	188aa <_vfprintf_r+0x112>
   18cd4:	9312      	str	r3, [sp, #72]	; 0x48
   18cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18cd8:	a916      	add	r1, sp, #88	; 0x58
   18cda:	1d1d      	adds	r5, r3, #4
   18cdc:	681b      	ldr	r3, [r3, #0]
   18cde:	001a      	movs	r2, r3
   18ce0:	9311      	str	r3, [sp, #68]	; 0x44
   18ce2:	2300      	movs	r3, #0
   18ce4:	77cb      	strb	r3, [r1, #31]
   18ce6:	2a00      	cmp	r2, #0
   18ce8:	d101      	bne.n	18cee <_vfprintf_r+0x556>
   18cea:	f000 ff01 	bl	19af0 <_vfprintf_r+0x1358>
   18cee:	4653      	mov	r3, sl
   18cf0:	3301      	adds	r3, #1
   18cf2:	d101      	bne.n	18cf8 <_vfprintf_r+0x560>
   18cf4:	f000 fe64 	bl	199c0 <_vfprintf_r+0x1228>
   18cf8:	4652      	mov	r2, sl
   18cfa:	2100      	movs	r1, #0
   18cfc:	9811      	ldr	r0, [sp, #68]	; 0x44
   18cfe:	f002 fed1 	bl	1baa4 <memchr>
   18d02:	2800      	cmp	r0, #0
   18d04:	d101      	bne.n	18d0a <_vfprintf_r+0x572>
   18d06:	f000 ff78 	bl	19bfa <_vfprintf_r+0x1462>
   18d0a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18d0c:	1ac3      	subs	r3, r0, r3
   18d0e:	001a      	movs	r2, r3
   18d10:	930e      	str	r3, [sp, #56]	; 0x38
   18d12:	43db      	mvns	r3, r3
   18d14:	17db      	asrs	r3, r3, #31
   18d16:	401a      	ands	r2, r3
   18d18:	ab16      	add	r3, sp, #88	; 0x58
   18d1a:	7fdb      	ldrb	r3, [r3, #31]
   18d1c:	9208      	str	r2, [sp, #32]
   18d1e:	4698      	mov	r8, r3
   18d20:	2300      	movs	r3, #0
   18d22:	950f      	str	r5, [sp, #60]	; 0x3c
   18d24:	9409      	str	r4, [sp, #36]	; 0x24
   18d26:	469a      	mov	sl, r3
   18d28:	9313      	str	r3, [sp, #76]	; 0x4c
   18d2a:	e6aa      	b.n	18a82 <_vfprintf_r+0x2ea>
   18d2c:	2308      	movs	r3, #8
   18d2e:	431c      	orrs	r4, r3
   18d30:	9b07      	ldr	r3, [sp, #28]
   18d32:	781b      	ldrb	r3, [r3, #0]
   18d34:	e5b9      	b.n	188aa <_vfprintf_r+0x112>
   18d36:	9312      	str	r3, [sp, #72]	; 0x48
   18d38:	2310      	movs	r3, #16
   18d3a:	431c      	orrs	r4, r3
   18d3c:	06a3      	lsls	r3, r4, #26
   18d3e:	d501      	bpl.n	18d44 <_vfprintf_r+0x5ac>
   18d40:	f000 fca7 	bl	19692 <_vfprintf_r+0xefa>
   18d44:	06e3      	lsls	r3, r4, #27
   18d46:	d500      	bpl.n	18d4a <_vfprintf_r+0x5b2>
   18d48:	e3ee      	b.n	19528 <_vfprintf_r+0xd90>
   18d4a:	0663      	lsls	r3, r4, #25
   18d4c:	d400      	bmi.n	18d50 <_vfprintf_r+0x5b8>
   18d4e:	e3eb      	b.n	19528 <_vfprintf_r+0xd90>
   18d50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18d52:	881a      	ldrh	r2, [r3, #0]
   18d54:	920c      	str	r2, [sp, #48]	; 0x30
   18d56:	2200      	movs	r2, #0
   18d58:	3304      	adds	r3, #4
   18d5a:	920d      	str	r2, [sp, #52]	; 0x34
   18d5c:	930f      	str	r3, [sp, #60]	; 0x3c
   18d5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18d60:	2300      	movs	r3, #0
   18d62:	e65f      	b.n	18a24 <_vfprintf_r+0x28c>
   18d64:	9312      	str	r3, [sp, #72]	; 0x48
   18d66:	2310      	movs	r3, #16
   18d68:	431c      	orrs	r4, r3
   18d6a:	06a3      	lsls	r3, r4, #26
   18d6c:	d501      	bpl.n	18d72 <_vfprintf_r+0x5da>
   18d6e:	f000 fcba 	bl	196e6 <_vfprintf_r+0xf4e>
   18d72:	06e3      	lsls	r3, r4, #27
   18d74:	d500      	bpl.n	18d78 <_vfprintf_r+0x5e0>
   18d76:	e3da      	b.n	1952e <_vfprintf_r+0xd96>
   18d78:	0663      	lsls	r3, r4, #25
   18d7a:	d400      	bmi.n	18d7e <_vfprintf_r+0x5e6>
   18d7c:	e3d7      	b.n	1952e <_vfprintf_r+0xd96>
   18d7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18d80:	881a      	ldrh	r2, [r3, #0]
   18d82:	920c      	str	r2, [sp, #48]	; 0x30
   18d84:	2200      	movs	r2, #0
   18d86:	3304      	adds	r3, #4
   18d88:	920d      	str	r2, [sp, #52]	; 0x34
   18d8a:	930f      	str	r3, [sp, #60]	; 0x3c
   18d8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18d8e:	2301      	movs	r3, #1
   18d90:	e648      	b.n	18a24 <_vfprintf_r+0x28c>
   18d92:	9312      	str	r3, [sp, #72]	; 0x48
   18d94:	2900      	cmp	r1, #0
   18d96:	d001      	beq.n	18d9c <_vfprintf_r+0x604>
   18d98:	f001 f857 	bl	19e4a <_vfprintf_r+0x16b2>
   18d9c:	4b8a      	ldr	r3, [pc, #552]	; (18fc8 <_vfprintf_r+0x830>)
   18d9e:	9319      	str	r3, [sp, #100]	; 0x64
   18da0:	e618      	b.n	189d4 <_vfprintf_r+0x23c>
   18da2:	2301      	movs	r3, #1
   18da4:	431c      	orrs	r4, r3
   18da6:	9b07      	ldr	r3, [sp, #28]
   18da8:	781b      	ldrb	r3, [r3, #0]
   18daa:	e57e      	b.n	188aa <_vfprintf_r+0x112>
   18dac:	2380      	movs	r3, #128	; 0x80
   18dae:	431c      	orrs	r4, r3
   18db0:	9b07      	ldr	r3, [sp, #28]
   18db2:	781b      	ldrb	r3, [r3, #0]
   18db4:	e579      	b.n	188aa <_vfprintf_r+0x112>
   18db6:	9b07      	ldr	r3, [sp, #28]
   18db8:	781b      	ldrb	r3, [r3, #0]
   18dba:	2800      	cmp	r0, #0
   18dbc:	d000      	beq.n	18dc0 <_vfprintf_r+0x628>
   18dbe:	e574      	b.n	188aa <_vfprintf_r+0x112>
   18dc0:	2101      	movs	r1, #1
   18dc2:	3020      	adds	r0, #32
   18dc4:	e571      	b.n	188aa <_vfprintf_r+0x112>
   18dc6:	9312      	str	r3, [sp, #72]	; 0x48
   18dc8:	2900      	cmp	r1, #0
   18dca:	d001      	beq.n	18dd0 <_vfprintf_r+0x638>
   18dcc:	f001 f839 	bl	19e42 <_vfprintf_r+0x16aa>
   18dd0:	2207      	movs	r2, #7
   18dd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18dd4:	3307      	adds	r3, #7
   18dd6:	4393      	bics	r3, r2
   18dd8:	3201      	adds	r2, #1
   18dda:	4694      	mov	ip, r2
   18ddc:	449c      	add	ip, r3
   18dde:	4662      	mov	r2, ip
   18de0:	920f      	str	r2, [sp, #60]	; 0x3c
   18de2:	681a      	ldr	r2, [r3, #0]
   18de4:	9216      	str	r2, [sp, #88]	; 0x58
   18de6:	685b      	ldr	r3, [r3, #4]
   18de8:	2201      	movs	r2, #1
   18dea:	9315      	str	r3, [sp, #84]	; 0x54
   18dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
   18dee:	9d16      	ldr	r5, [sp, #88]	; 0x58
   18df0:	005b      	lsls	r3, r3, #1
   18df2:	085b      	lsrs	r3, r3, #1
   18df4:	4698      	mov	r8, r3
   18df6:	4252      	negs	r2, r2
   18df8:	4b74      	ldr	r3, [pc, #464]	; (18fcc <_vfprintf_r+0x834>)
   18dfa:	0028      	movs	r0, r5
   18dfc:	4641      	mov	r1, r8
   18dfe:	f003 ff4b 	bl	1cc98 <__aeabi_dcmpun>
   18e02:	2800      	cmp	r0, #0
   18e04:	d001      	beq.n	18e0a <_vfprintf_r+0x672>
   18e06:	f000 fcb4 	bl	19772 <_vfprintf_r+0xfda>
   18e0a:	2201      	movs	r2, #1
   18e0c:	4b6f      	ldr	r3, [pc, #444]	; (18fcc <_vfprintf_r+0x834>)
   18e0e:	4252      	negs	r2, r2
   18e10:	0028      	movs	r0, r5
   18e12:	4641      	mov	r1, r8
   18e14:	f7fe fd92 	bl	1793c <__aeabi_dcmple>
   18e18:	2800      	cmp	r0, #0
   18e1a:	d001      	beq.n	18e20 <_vfprintf_r+0x688>
   18e1c:	f000 fca9 	bl	19772 <_vfprintf_r+0xfda>
   18e20:	2200      	movs	r2, #0
   18e22:	2300      	movs	r3, #0
   18e24:	9816      	ldr	r0, [sp, #88]	; 0x58
   18e26:	9915      	ldr	r1, [sp, #84]	; 0x54
   18e28:	f7fe fd7e 	bl	17928 <__aeabi_dcmplt>
   18e2c:	2800      	cmp	r0, #0
   18e2e:	d001      	beq.n	18e34 <_vfprintf_r+0x69c>
   18e30:	f000 fd55 	bl	198de <_vfprintf_r+0x1146>
   18e34:	ab16      	add	r3, sp, #88	; 0x58
   18e36:	7fdb      	ldrb	r3, [r3, #31]
   18e38:	4698      	mov	r8, r3
   18e3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18e3c:	2b47      	cmp	r3, #71	; 0x47
   18e3e:	dd01      	ble.n	18e44 <_vfprintf_r+0x6ac>
   18e40:	f000 fdb4 	bl	199ac <_vfprintf_r+0x1214>
   18e44:	4b62      	ldr	r3, [pc, #392]	; (18fd0 <_vfprintf_r+0x838>)
   18e46:	9311      	str	r3, [sp, #68]	; 0x44
   18e48:	2380      	movs	r3, #128	; 0x80
   18e4a:	439c      	bics	r4, r3
   18e4c:	3b7d      	subs	r3, #125	; 0x7d
   18e4e:	9308      	str	r3, [sp, #32]
   18e50:	930e      	str	r3, [sp, #56]	; 0x38
   18e52:	2300      	movs	r3, #0
   18e54:	9409      	str	r4, [sp, #36]	; 0x24
   18e56:	469a      	mov	sl, r3
   18e58:	9313      	str	r3, [sp, #76]	; 0x4c
   18e5a:	e612      	b.n	18a82 <_vfprintf_r+0x2ea>
   18e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18e5e:	1d1a      	adds	r2, r3, #4
   18e60:	681b      	ldr	r3, [r3, #0]
   18e62:	930b      	str	r3, [sp, #44]	; 0x2c
   18e64:	2b00      	cmp	r3, #0
   18e66:	da00      	bge.n	18e6a <_vfprintf_r+0x6d2>
   18e68:	e578      	b.n	1895c <_vfprintf_r+0x1c4>
   18e6a:	9b07      	ldr	r3, [sp, #28]
   18e6c:	920f      	str	r2, [sp, #60]	; 0x3c
   18e6e:	781b      	ldrb	r3, [r3, #0]
   18e70:	e51b      	b.n	188aa <_vfprintf_r+0x112>
   18e72:	9312      	str	r3, [sp, #72]	; 0x48
   18e74:	2900      	cmp	r1, #0
   18e76:	d001      	beq.n	18e7c <_vfprintf_r+0x6e4>
   18e78:	f000 ffcc 	bl	19e14 <_vfprintf_r+0x167c>
   18e7c:	2310      	movs	r3, #16
   18e7e:	431c      	orrs	r4, r3
   18e80:	e69a      	b.n	18bb8 <_vfprintf_r+0x420>
   18e82:	9312      	str	r3, [sp, #72]	; 0x48
   18e84:	e771      	b.n	18d6a <_vfprintf_r+0x5d2>
   18e86:	9312      	str	r3, [sp, #72]	; 0x48
   18e88:	e758      	b.n	18d3c <_vfprintf_r+0x5a4>
   18e8a:	9312      	str	r3, [sp, #72]	; 0x48
   18e8c:	2900      	cmp	r1, #0
   18e8e:	d001      	beq.n	18e94 <_vfprintf_r+0x6fc>
   18e90:	f000 ffd3 	bl	19e3a <_vfprintf_r+0x16a2>
   18e94:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18e96:	2b00      	cmp	r3, #0
   18e98:	d100      	bne.n	18e9c <_vfprintf_r+0x704>
   18e9a:	e18d      	b.n	191b8 <_vfprintf_r+0xa20>
   18e9c:	ad28      	add	r5, sp, #160	; 0xa0
   18e9e:	702b      	strb	r3, [r5, #0]
   18ea0:	2300      	movs	r3, #0
   18ea2:	aa16      	add	r2, sp, #88	; 0x58
   18ea4:	77d3      	strb	r3, [r2, #31]
   18ea6:	9409      	str	r4, [sp, #36]	; 0x24
   18ea8:	e678      	b.n	18b9c <_vfprintf_r+0x404>
   18eaa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   18eac:	990a      	ldr	r1, [sp, #40]	; 0x28
   18eae:	6813      	ldr	r3, [r2, #0]
   18eb0:	6019      	str	r1, [r3, #0]
   18eb2:	0013      	movs	r3, r2
   18eb4:	3304      	adds	r3, #4
   18eb6:	930f      	str	r3, [sp, #60]	; 0x3c
   18eb8:	e4bc      	b.n	18834 <_vfprintf_r+0x9c>
   18eba:	68bc      	ldr	r4, [r7, #8]
   18ebc:	4643      	mov	r3, r8
   18ebe:	2b00      	cmp	r3, #0
   18ec0:	d00f      	beq.n	18ee2 <_vfprintf_r+0x74a>
   18ec2:	aa16      	add	r2, sp, #88	; 0x58
   18ec4:	231f      	movs	r3, #31
   18ec6:	4694      	mov	ip, r2
   18ec8:	4463      	add	r3, ip
   18eca:	6033      	str	r3, [r6, #0]
   18ecc:	2301      	movs	r3, #1
   18ece:	6073      	str	r3, [r6, #4]
   18ed0:	687b      	ldr	r3, [r7, #4]
   18ed2:	3401      	adds	r4, #1
   18ed4:	3301      	adds	r3, #1
   18ed6:	60bc      	str	r4, [r7, #8]
   18ed8:	607b      	str	r3, [r7, #4]
   18eda:	2b07      	cmp	r3, #7
   18edc:	dd00      	ble.n	18ee0 <_vfprintf_r+0x748>
   18ede:	e203      	b.n	192e8 <_vfprintf_r+0xb50>
   18ee0:	3608      	adds	r6, #8
   18ee2:	464b      	mov	r3, r9
   18ee4:	2b00      	cmp	r3, #0
   18ee6:	d00c      	beq.n	18f02 <_vfprintf_r+0x76a>
   18ee8:	ab1e      	add	r3, sp, #120	; 0x78
   18eea:	6033      	str	r3, [r6, #0]
   18eec:	2302      	movs	r3, #2
   18eee:	6073      	str	r3, [r6, #4]
   18ef0:	687b      	ldr	r3, [r7, #4]
   18ef2:	3402      	adds	r4, #2
   18ef4:	3301      	adds	r3, #1
   18ef6:	60bc      	str	r4, [r7, #8]
   18ef8:	607b      	str	r3, [r7, #4]
   18efa:	2b07      	cmp	r3, #7
   18efc:	dd00      	ble.n	18f00 <_vfprintf_r+0x768>
   18efe:	e1fd      	b.n	192fc <_vfprintf_r+0xb64>
   18f00:	3608      	adds	r6, #8
   18f02:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18f04:	2b80      	cmp	r3, #128	; 0x80
   18f06:	d100      	bne.n	18f0a <_vfprintf_r+0x772>
   18f08:	e173      	b.n	191f2 <_vfprintf_r+0xa5a>
   18f0a:	4653      	mov	r3, sl
   18f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18f0e:	1a9d      	subs	r5, r3, r2
   18f10:	2d00      	cmp	r5, #0
   18f12:	dd32      	ble.n	18f7a <_vfprintf_r+0x7e2>
   18f14:	4a2f      	ldr	r2, [pc, #188]	; (18fd4 <_vfprintf_r+0x83c>)
   18f16:	687b      	ldr	r3, [r7, #4]
   18f18:	4691      	mov	r9, r2
   18f1a:	2d10      	cmp	r5, #16
   18f1c:	dd22      	ble.n	18f64 <_vfprintf_r+0x7cc>
   18f1e:	2210      	movs	r2, #16
   18f20:	4692      	mov	sl, r2
   18f22:	0022      	movs	r2, r4
   18f24:	465c      	mov	r4, fp
   18f26:	e003      	b.n	18f30 <_vfprintf_r+0x798>
   18f28:	3d10      	subs	r5, #16
   18f2a:	3608      	adds	r6, #8
   18f2c:	2d10      	cmp	r5, #16
   18f2e:	dd17      	ble.n	18f60 <_vfprintf_r+0x7c8>
   18f30:	4649      	mov	r1, r9
   18f32:	6031      	str	r1, [r6, #0]
   18f34:	4651      	mov	r1, sl
   18f36:	3210      	adds	r2, #16
   18f38:	3301      	adds	r3, #1
   18f3a:	6071      	str	r1, [r6, #4]
   18f3c:	60ba      	str	r2, [r7, #8]
   18f3e:	607b      	str	r3, [r7, #4]
   18f40:	2b07      	cmp	r3, #7
   18f42:	ddf1      	ble.n	18f28 <_vfprintf_r+0x790>
   18f44:	003a      	movs	r2, r7
   18f46:	0021      	movs	r1, r4
   18f48:	9806      	ldr	r0, [sp, #24]
   18f4a:	f003 fc0b 	bl	1c764 <__sprint_r>
   18f4e:	2800      	cmp	r0, #0
   18f50:	d000      	beq.n	18f54 <_vfprintf_r+0x7bc>
   18f52:	e18a      	b.n	1926a <_vfprintf_r+0xad2>
   18f54:	3d10      	subs	r5, #16
   18f56:	68ba      	ldr	r2, [r7, #8]
   18f58:	687b      	ldr	r3, [r7, #4]
   18f5a:	ae32      	add	r6, sp, #200	; 0xc8
   18f5c:	2d10      	cmp	r5, #16
   18f5e:	dce7      	bgt.n	18f30 <_vfprintf_r+0x798>
   18f60:	46a3      	mov	fp, r4
   18f62:	0014      	movs	r4, r2
   18f64:	464a      	mov	r2, r9
   18f66:	1964      	adds	r4, r4, r5
   18f68:	3301      	adds	r3, #1
   18f6a:	6032      	str	r2, [r6, #0]
   18f6c:	6075      	str	r5, [r6, #4]
   18f6e:	60bc      	str	r4, [r7, #8]
   18f70:	607b      	str	r3, [r7, #4]
   18f72:	2b07      	cmp	r3, #7
   18f74:	dd00      	ble.n	18f78 <_vfprintf_r+0x7e0>
   18f76:	e1ad      	b.n	192d4 <_vfprintf_r+0xb3c>
   18f78:	3608      	adds	r6, #8
   18f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18f7c:	05db      	lsls	r3, r3, #23
   18f7e:	d500      	bpl.n	18f82 <_vfprintf_r+0x7ea>
   18f80:	e0be      	b.n	19100 <_vfprintf_r+0x968>
   18f82:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18f84:	6033      	str	r3, [r6, #0]
   18f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18f88:	469c      	mov	ip, r3
   18f8a:	6073      	str	r3, [r6, #4]
   18f8c:	687b      	ldr	r3, [r7, #4]
   18f8e:	4464      	add	r4, ip
   18f90:	3301      	adds	r3, #1
   18f92:	60bc      	str	r4, [r7, #8]
   18f94:	607b      	str	r3, [r7, #4]
   18f96:	2b07      	cmp	r3, #7
   18f98:	dd00      	ble.n	18f9c <_vfprintf_r+0x804>
   18f9a:	e0a6      	b.n	190ea <_vfprintf_r+0x952>
   18f9c:	3608      	adds	r6, #8
   18f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18fa0:	075b      	lsls	r3, r3, #29
   18fa2:	d54a      	bpl.n	1903a <_vfprintf_r+0x8a2>
   18fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   18fa6:	9a08      	ldr	r2, [sp, #32]
   18fa8:	1a9d      	subs	r5, r3, r2
   18faa:	2d00      	cmp	r5, #0
   18fac:	dd45      	ble.n	1903a <_vfprintf_r+0x8a2>
   18fae:	4a0a      	ldr	r2, [pc, #40]	; (18fd8 <_vfprintf_r+0x840>)
   18fb0:	687b      	ldr	r3, [r7, #4]
   18fb2:	4690      	mov	r8, r2
   18fb4:	2d10      	cmp	r5, #16
   18fb6:	dd2f      	ble.n	19018 <_vfprintf_r+0x880>
   18fb8:	2210      	movs	r2, #16
   18fba:	4691      	mov	r9, r2
   18fbc:	0022      	movs	r2, r4
   18fbe:	465c      	mov	r4, fp
   18fc0:	e010      	b.n	18fe4 <_vfprintf_r+0x84c>
   18fc2:	46c0      	nop			; (mov r8, r8)
   18fc4:	0001fa34 	.word	0x0001fa34
   18fc8:	0001fa20 	.word	0x0001fa20
   18fcc:	7fefffff 	.word	0x7fefffff
   18fd0:	0001fa10 	.word	0x0001fa10
   18fd4:	0001fa60 	.word	0x0001fa60
   18fd8:	0001fa50 	.word	0x0001fa50
   18fdc:	3d10      	subs	r5, #16
   18fde:	3608      	adds	r6, #8
   18fe0:	2d10      	cmp	r5, #16
   18fe2:	dd17      	ble.n	19014 <_vfprintf_r+0x87c>
   18fe4:	49d1      	ldr	r1, [pc, #836]	; (1932c <_vfprintf_r+0xb94>)
   18fe6:	3210      	adds	r2, #16
   18fe8:	6031      	str	r1, [r6, #0]
   18fea:	4649      	mov	r1, r9
   18fec:	3301      	adds	r3, #1
   18fee:	6071      	str	r1, [r6, #4]
   18ff0:	60ba      	str	r2, [r7, #8]
   18ff2:	607b      	str	r3, [r7, #4]
   18ff4:	2b07      	cmp	r3, #7
   18ff6:	ddf1      	ble.n	18fdc <_vfprintf_r+0x844>
   18ff8:	003a      	movs	r2, r7
   18ffa:	0021      	movs	r1, r4
   18ffc:	9806      	ldr	r0, [sp, #24]
   18ffe:	f003 fbb1 	bl	1c764 <__sprint_r>
   19002:	2800      	cmp	r0, #0
   19004:	d000      	beq.n	19008 <_vfprintf_r+0x870>
   19006:	e130      	b.n	1926a <_vfprintf_r+0xad2>
   19008:	3d10      	subs	r5, #16
   1900a:	68ba      	ldr	r2, [r7, #8]
   1900c:	687b      	ldr	r3, [r7, #4]
   1900e:	ae32      	add	r6, sp, #200	; 0xc8
   19010:	2d10      	cmp	r5, #16
   19012:	dce7      	bgt.n	18fe4 <_vfprintf_r+0x84c>
   19014:	46a3      	mov	fp, r4
   19016:	0014      	movs	r4, r2
   19018:	4642      	mov	r2, r8
   1901a:	1964      	adds	r4, r4, r5
   1901c:	3301      	adds	r3, #1
   1901e:	c624      	stmia	r6!, {r2, r5}
   19020:	60bc      	str	r4, [r7, #8]
   19022:	607b      	str	r3, [r7, #4]
   19024:	2b07      	cmp	r3, #7
   19026:	dd08      	ble.n	1903a <_vfprintf_r+0x8a2>
   19028:	003a      	movs	r2, r7
   1902a:	4659      	mov	r1, fp
   1902c:	9806      	ldr	r0, [sp, #24]
   1902e:	f003 fb99 	bl	1c764 <__sprint_r>
   19032:	2800      	cmp	r0, #0
   19034:	d000      	beq.n	19038 <_vfprintf_r+0x8a0>
   19036:	e13f      	b.n	192b8 <_vfprintf_r+0xb20>
   19038:	68bc      	ldr	r4, [r7, #8]
   1903a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1903c:	9908      	ldr	r1, [sp, #32]
   1903e:	428b      	cmp	r3, r1
   19040:	da00      	bge.n	19044 <_vfprintf_r+0x8ac>
   19042:	000b      	movs	r3, r1
   19044:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19046:	4694      	mov	ip, r2
   19048:	449c      	add	ip, r3
   1904a:	4663      	mov	r3, ip
   1904c:	930a      	str	r3, [sp, #40]	; 0x28
   1904e:	2c00      	cmp	r4, #0
   19050:	d000      	beq.n	19054 <_vfprintf_r+0x8bc>
   19052:	e129      	b.n	192a8 <_vfprintf_r+0xb10>
   19054:	2300      	movs	r3, #0
   19056:	ae32      	add	r6, sp, #200	; 0xc8
   19058:	607b      	str	r3, [r7, #4]
   1905a:	f7ff fbeb 	bl	18834 <_vfprintf_r+0x9c>
   1905e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19060:	2b01      	cmp	r3, #1
   19062:	dc00      	bgt.n	19066 <_vfprintf_r+0x8ce>
   19064:	e103      	b.n	1926e <_vfprintf_r+0xad6>
   19066:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19068:	3401      	adds	r4, #1
   1906a:	6033      	str	r3, [r6, #0]
   1906c:	2301      	movs	r3, #1
   1906e:	6073      	str	r3, [r6, #4]
   19070:	687b      	ldr	r3, [r7, #4]
   19072:	60bc      	str	r4, [r7, #8]
   19074:	3301      	adds	r3, #1
   19076:	607b      	str	r3, [r7, #4]
   19078:	2b07      	cmp	r3, #7
   1907a:	dd00      	ble.n	1907e <_vfprintf_r+0x8e6>
   1907c:	e2ef      	b.n	1965e <_vfprintf_r+0xec6>
   1907e:	3608      	adds	r6, #8
   19080:	9a18      	ldr	r2, [sp, #96]	; 0x60
   19082:	3301      	adds	r3, #1
   19084:	6032      	str	r2, [r6, #0]
   19086:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   19088:	4698      	mov	r8, r3
   1908a:	4694      	mov	ip, r2
   1908c:	4464      	add	r4, ip
   1908e:	6072      	str	r2, [r6, #4]
   19090:	60bc      	str	r4, [r7, #8]
   19092:	607b      	str	r3, [r7, #4]
   19094:	2b07      	cmp	r3, #7
   19096:	dd00      	ble.n	1909a <_vfprintf_r+0x902>
   19098:	e318      	b.n	196cc <_vfprintf_r+0xf34>
   1909a:	3608      	adds	r6, #8
   1909c:	2200      	movs	r2, #0
   1909e:	2300      	movs	r3, #0
   190a0:	9816      	ldr	r0, [sp, #88]	; 0x58
   190a2:	9915      	ldr	r1, [sp, #84]	; 0x54
   190a4:	f7fe fc3a 	bl	1791c <__aeabi_dcmpeq>
   190a8:	2800      	cmp	r0, #0
   190aa:	d000      	beq.n	190ae <_vfprintf_r+0x916>
   190ac:	e1f4      	b.n	19498 <_vfprintf_r+0xd00>
   190ae:	9d11      	ldr	r5, [sp, #68]	; 0x44
   190b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   190b2:	3501      	adds	r5, #1
   190b4:	3b01      	subs	r3, #1
   190b6:	6035      	str	r5, [r6, #0]
   190b8:	6073      	str	r3, [r6, #4]
   190ba:	18e4      	adds	r4, r4, r3
   190bc:	2301      	movs	r3, #1
   190be:	469c      	mov	ip, r3
   190c0:	44e0      	add	r8, ip
   190c2:	4643      	mov	r3, r8
   190c4:	60bc      	str	r4, [r7, #8]
   190c6:	607b      	str	r3, [r7, #4]
   190c8:	2b07      	cmp	r3, #7
   190ca:	dd00      	ble.n	190ce <_vfprintf_r+0x936>
   190cc:	e0e0      	b.n	19290 <_vfprintf_r+0xaf8>
   190ce:	3608      	adds	r6, #8
   190d0:	ab21      	add	r3, sp, #132	; 0x84
   190d2:	6033      	str	r3, [r6, #0]
   190d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   190d6:	469c      	mov	ip, r3
   190d8:	6073      	str	r3, [r6, #4]
   190da:	4643      	mov	r3, r8
   190dc:	4464      	add	r4, ip
   190de:	3301      	adds	r3, #1
   190e0:	60bc      	str	r4, [r7, #8]
   190e2:	607b      	str	r3, [r7, #4]
   190e4:	2b07      	cmp	r3, #7
   190e6:	dc00      	bgt.n	190ea <_vfprintf_r+0x952>
   190e8:	e758      	b.n	18f9c <_vfprintf_r+0x804>
   190ea:	003a      	movs	r2, r7
   190ec:	4659      	mov	r1, fp
   190ee:	9806      	ldr	r0, [sp, #24]
   190f0:	f003 fb38 	bl	1c764 <__sprint_r>
   190f4:	2800      	cmp	r0, #0
   190f6:	d000      	beq.n	190fa <_vfprintf_r+0x962>
   190f8:	e0de      	b.n	192b8 <_vfprintf_r+0xb20>
   190fa:	68bc      	ldr	r4, [r7, #8]
   190fc:	ae32      	add	r6, sp, #200	; 0xc8
   190fe:	e74e      	b.n	18f9e <_vfprintf_r+0x806>
   19100:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19102:	2b65      	cmp	r3, #101	; 0x65
   19104:	ddab      	ble.n	1905e <_vfprintf_r+0x8c6>
   19106:	2200      	movs	r2, #0
   19108:	2300      	movs	r3, #0
   1910a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1910c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1910e:	f7fe fc05 	bl	1791c <__aeabi_dcmpeq>
   19112:	2800      	cmp	r0, #0
   19114:	d100      	bne.n	19118 <_vfprintf_r+0x980>
   19116:	e134      	b.n	19382 <_vfprintf_r+0xbea>
   19118:	4b85      	ldr	r3, [pc, #532]	; (19330 <_vfprintf_r+0xb98>)
   1911a:	3401      	adds	r4, #1
   1911c:	6033      	str	r3, [r6, #0]
   1911e:	2301      	movs	r3, #1
   19120:	6073      	str	r3, [r6, #4]
   19122:	687b      	ldr	r3, [r7, #4]
   19124:	60bc      	str	r4, [r7, #8]
   19126:	3301      	adds	r3, #1
   19128:	607b      	str	r3, [r7, #4]
   1912a:	2b07      	cmp	r3, #7
   1912c:	dd00      	ble.n	19130 <_vfprintf_r+0x998>
   1912e:	e3dc      	b.n	198ea <_vfprintf_r+0x1152>
   19130:	3608      	adds	r6, #8
   19132:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   19134:	9a14      	ldr	r2, [sp, #80]	; 0x50
   19136:	4293      	cmp	r3, r2
   19138:	db03      	blt.n	19142 <_vfprintf_r+0x9aa>
   1913a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1913c:	07db      	lsls	r3, r3, #31
   1913e:	d400      	bmi.n	19142 <_vfprintf_r+0x9aa>
   19140:	e3b7      	b.n	198b2 <_vfprintf_r+0x111a>
   19142:	9b18      	ldr	r3, [sp, #96]	; 0x60
   19144:	68ba      	ldr	r2, [r7, #8]
   19146:	6033      	str	r3, [r6, #0]
   19148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1914a:	469c      	mov	ip, r3
   1914c:	6073      	str	r3, [r6, #4]
   1914e:	687b      	ldr	r3, [r7, #4]
   19150:	4462      	add	r2, ip
   19152:	3301      	adds	r3, #1
   19154:	0014      	movs	r4, r2
   19156:	60ba      	str	r2, [r7, #8]
   19158:	607b      	str	r3, [r7, #4]
   1915a:	2b07      	cmp	r3, #7
   1915c:	dd01      	ble.n	19162 <_vfprintf_r+0x9ca>
   1915e:	f000 fc19 	bl	19994 <_vfprintf_r+0x11fc>
   19162:	3608      	adds	r6, #8
   19164:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19166:	1e5d      	subs	r5, r3, #1
   19168:	2d00      	cmp	r5, #0
   1916a:	dc00      	bgt.n	1916e <_vfprintf_r+0x9d6>
   1916c:	e717      	b.n	18f9e <_vfprintf_r+0x806>
   1916e:	4a71      	ldr	r2, [pc, #452]	; (19334 <_vfprintf_r+0xb9c>)
   19170:	687b      	ldr	r3, [r7, #4]
   19172:	4691      	mov	r9, r2
   19174:	2d10      	cmp	r5, #16
   19176:	dc00      	bgt.n	1917a <_vfprintf_r+0x9e2>
   19178:	e1c3      	b.n	19502 <_vfprintf_r+0xd6a>
   1917a:	2210      	movs	r2, #16
   1917c:	4690      	mov	r8, r2
   1917e:	0022      	movs	r2, r4
   19180:	464c      	mov	r4, r9
   19182:	46d9      	mov	r9, fp
   19184:	e004      	b.n	19190 <_vfprintf_r+0x9f8>
   19186:	3608      	adds	r6, #8
   19188:	3d10      	subs	r5, #16
   1918a:	2d10      	cmp	r5, #16
   1918c:	dc00      	bgt.n	19190 <_vfprintf_r+0x9f8>
   1918e:	e37c      	b.n	1988a <_vfprintf_r+0x10f2>
   19190:	4641      	mov	r1, r8
   19192:	3210      	adds	r2, #16
   19194:	3301      	adds	r3, #1
   19196:	6034      	str	r4, [r6, #0]
   19198:	6071      	str	r1, [r6, #4]
   1919a:	60ba      	str	r2, [r7, #8]
   1919c:	607b      	str	r3, [r7, #4]
   1919e:	2b07      	cmp	r3, #7
   191a0:	ddf1      	ble.n	19186 <_vfprintf_r+0x9ee>
   191a2:	003a      	movs	r2, r7
   191a4:	4649      	mov	r1, r9
   191a6:	9806      	ldr	r0, [sp, #24]
   191a8:	f003 fadc 	bl	1c764 <__sprint_r>
   191ac:	2800      	cmp	r0, #0
   191ae:	d10b      	bne.n	191c8 <_vfprintf_r+0xa30>
   191b0:	68ba      	ldr	r2, [r7, #8]
   191b2:	687b      	ldr	r3, [r7, #4]
   191b4:	ae32      	add	r6, sp, #200	; 0xc8
   191b6:	e7e7      	b.n	19188 <_vfprintf_r+0x9f0>
   191b8:	68bb      	ldr	r3, [r7, #8]
   191ba:	46d9      	mov	r9, fp
   191bc:	2b00      	cmp	r3, #0
   191be:	d001      	beq.n	191c4 <_vfprintf_r+0xa2c>
   191c0:	f000 fd4c 	bl	19c5c <_vfprintf_r+0x14c4>
   191c4:	2300      	movs	r3, #0
   191c6:	607b      	str	r3, [r7, #4]
   191c8:	464b      	mov	r3, r9
   191ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   191cc:	07db      	lsls	r3, r3, #31
   191ce:	d40d      	bmi.n	191ec <_vfprintf_r+0xa54>
   191d0:	464b      	mov	r3, r9
   191d2:	899b      	ldrh	r3, [r3, #12]
   191d4:	059a      	lsls	r2, r3, #22
   191d6:	d505      	bpl.n	191e4 <_vfprintf_r+0xa4c>
   191d8:	065b      	lsls	r3, r3, #25
   191da:	d401      	bmi.n	191e0 <_vfprintf_r+0xa48>
   191dc:	f7ff fb8d 	bl	188fa <_vfprintf_r+0x162>
   191e0:	f7ff fb88 	bl	188f4 <_vfprintf_r+0x15c>
   191e4:	464b      	mov	r3, r9
   191e6:	6d98      	ldr	r0, [r3, #88]	; 0x58
   191e8:	f002 fbcc 	bl	1b984 <__retarget_lock_release_recursive>
   191ec:	464b      	mov	r3, r9
   191ee:	899b      	ldrh	r3, [r3, #12]
   191f0:	e7f2      	b.n	191d8 <_vfprintf_r+0xa40>
   191f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   191f4:	9a08      	ldr	r2, [sp, #32]
   191f6:	1a9d      	subs	r5, r3, r2
   191f8:	2d00      	cmp	r5, #0
   191fa:	dc00      	bgt.n	191fe <_vfprintf_r+0xa66>
   191fc:	e685      	b.n	18f0a <_vfprintf_r+0x772>
   191fe:	4a4d      	ldr	r2, [pc, #308]	; (19334 <_vfprintf_r+0xb9c>)
   19200:	687b      	ldr	r3, [r7, #4]
   19202:	4691      	mov	r9, r2
   19204:	2d10      	cmp	r5, #16
   19206:	dd24      	ble.n	19252 <_vfprintf_r+0xaba>
   19208:	2210      	movs	r2, #16
   1920a:	0021      	movs	r1, r4
   1920c:	4690      	mov	r8, r2
   1920e:	465c      	mov	r4, fp
   19210:	0032      	movs	r2, r6
   19212:	464e      	mov	r6, r9
   19214:	e003      	b.n	1921e <_vfprintf_r+0xa86>
   19216:	3d10      	subs	r5, #16
   19218:	3208      	adds	r2, #8
   1921a:	2d10      	cmp	r5, #16
   1921c:	dd15      	ble.n	1924a <_vfprintf_r+0xab2>
   1921e:	4640      	mov	r0, r8
   19220:	3110      	adds	r1, #16
   19222:	3301      	adds	r3, #1
   19224:	6016      	str	r6, [r2, #0]
   19226:	6050      	str	r0, [r2, #4]
   19228:	60b9      	str	r1, [r7, #8]
   1922a:	607b      	str	r3, [r7, #4]
   1922c:	2b07      	cmp	r3, #7
   1922e:	ddf2      	ble.n	19216 <_vfprintf_r+0xa7e>
   19230:	003a      	movs	r2, r7
   19232:	0021      	movs	r1, r4
   19234:	9806      	ldr	r0, [sp, #24]
   19236:	f003 fa95 	bl	1c764 <__sprint_r>
   1923a:	2800      	cmp	r0, #0
   1923c:	d115      	bne.n	1926a <_vfprintf_r+0xad2>
   1923e:	3d10      	subs	r5, #16
   19240:	68b9      	ldr	r1, [r7, #8]
   19242:	687b      	ldr	r3, [r7, #4]
   19244:	aa32      	add	r2, sp, #200	; 0xc8
   19246:	2d10      	cmp	r5, #16
   19248:	dce9      	bgt.n	1921e <_vfprintf_r+0xa86>
   1924a:	46a3      	mov	fp, r4
   1924c:	46b1      	mov	r9, r6
   1924e:	000c      	movs	r4, r1
   19250:	0016      	movs	r6, r2
   19252:	464a      	mov	r2, r9
   19254:	1964      	adds	r4, r4, r5
   19256:	3301      	adds	r3, #1
   19258:	6032      	str	r2, [r6, #0]
   1925a:	6075      	str	r5, [r6, #4]
   1925c:	60bc      	str	r4, [r7, #8]
   1925e:	607b      	str	r3, [r7, #4]
   19260:	2b07      	cmp	r3, #7
   19262:	dd00      	ble.n	19266 <_vfprintf_r+0xace>
   19264:	e263      	b.n	1972e <_vfprintf_r+0xf96>
   19266:	3608      	adds	r6, #8
   19268:	e64f      	b.n	18f0a <_vfprintf_r+0x772>
   1926a:	46a1      	mov	r9, r4
   1926c:	e7ac      	b.n	191c8 <_vfprintf_r+0xa30>
   1926e:	2301      	movs	r3, #1
   19270:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19272:	4213      	tst	r3, r2
   19274:	d000      	beq.n	19278 <_vfprintf_r+0xae0>
   19276:	e6f6      	b.n	19066 <_vfprintf_r+0x8ce>
   19278:	6073      	str	r3, [r6, #4]
   1927a:	687b      	ldr	r3, [r7, #4]
   1927c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1927e:	3301      	adds	r3, #1
   19280:	3401      	adds	r4, #1
   19282:	6032      	str	r2, [r6, #0]
   19284:	60bc      	str	r4, [r7, #8]
   19286:	4698      	mov	r8, r3
   19288:	607b      	str	r3, [r7, #4]
   1928a:	2b07      	cmp	r3, #7
   1928c:	dc00      	bgt.n	19290 <_vfprintf_r+0xaf8>
   1928e:	e71e      	b.n	190ce <_vfprintf_r+0x936>
   19290:	003a      	movs	r2, r7
   19292:	4659      	mov	r1, fp
   19294:	9806      	ldr	r0, [sp, #24]
   19296:	f003 fa65 	bl	1c764 <__sprint_r>
   1929a:	2800      	cmp	r0, #0
   1929c:	d10c      	bne.n	192b8 <_vfprintf_r+0xb20>
   1929e:	687b      	ldr	r3, [r7, #4]
   192a0:	68bc      	ldr	r4, [r7, #8]
   192a2:	4698      	mov	r8, r3
   192a4:	ae32      	add	r6, sp, #200	; 0xc8
   192a6:	e713      	b.n	190d0 <_vfprintf_r+0x938>
   192a8:	003a      	movs	r2, r7
   192aa:	4659      	mov	r1, fp
   192ac:	9806      	ldr	r0, [sp, #24]
   192ae:	f003 fa59 	bl	1c764 <__sprint_r>
   192b2:	2800      	cmp	r0, #0
   192b4:	d100      	bne.n	192b8 <_vfprintf_r+0xb20>
   192b6:	e6cd      	b.n	19054 <_vfprintf_r+0x8bc>
   192b8:	46d9      	mov	r9, fp
   192ba:	e785      	b.n	191c8 <_vfprintf_r+0xa30>
   192bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   192be:	2b01      	cmp	r3, #1
   192c0:	d100      	bne.n	192c4 <_vfprintf_r+0xb2c>
   192c2:	e148      	b.n	19556 <_vfprintf_r+0xdbe>
   192c4:	2b02      	cmp	r3, #2
   192c6:	d123      	bne.n	19310 <_vfprintf_r+0xb78>
   192c8:	9409      	str	r4, [sp, #36]	; 0x24
   192ca:	2300      	movs	r3, #0
   192cc:	2400      	movs	r4, #0
   192ce:	930c      	str	r3, [sp, #48]	; 0x30
   192d0:	940d      	str	r4, [sp, #52]	; 0x34
   192d2:	e4a1      	b.n	18c18 <_vfprintf_r+0x480>
   192d4:	003a      	movs	r2, r7
   192d6:	4659      	mov	r1, fp
   192d8:	9806      	ldr	r0, [sp, #24]
   192da:	f003 fa43 	bl	1c764 <__sprint_r>
   192de:	2800      	cmp	r0, #0
   192e0:	d1ea      	bne.n	192b8 <_vfprintf_r+0xb20>
   192e2:	68bc      	ldr	r4, [r7, #8]
   192e4:	ae32      	add	r6, sp, #200	; 0xc8
   192e6:	e648      	b.n	18f7a <_vfprintf_r+0x7e2>
   192e8:	003a      	movs	r2, r7
   192ea:	4659      	mov	r1, fp
   192ec:	9806      	ldr	r0, [sp, #24]
   192ee:	f003 fa39 	bl	1c764 <__sprint_r>
   192f2:	2800      	cmp	r0, #0
   192f4:	d1e0      	bne.n	192b8 <_vfprintf_r+0xb20>
   192f6:	68bc      	ldr	r4, [r7, #8]
   192f8:	ae32      	add	r6, sp, #200	; 0xc8
   192fa:	e5f2      	b.n	18ee2 <_vfprintf_r+0x74a>
   192fc:	003a      	movs	r2, r7
   192fe:	4659      	mov	r1, fp
   19300:	9806      	ldr	r0, [sp, #24]
   19302:	f003 fa2f 	bl	1c764 <__sprint_r>
   19306:	2800      	cmp	r0, #0
   19308:	d1d6      	bne.n	192b8 <_vfprintf_r+0xb20>
   1930a:	68bc      	ldr	r4, [r7, #8]
   1930c:	ae32      	add	r6, sp, #200	; 0xc8
   1930e:	e5f8      	b.n	18f02 <_vfprintf_r+0x76a>
   19310:	9409      	str	r4, [sp, #36]	; 0x24
   19312:	2300      	movs	r3, #0
   19314:	2400      	movs	r4, #0
   19316:	930c      	str	r3, [sp, #48]	; 0x30
   19318:	940d      	str	r4, [sp, #52]	; 0x34
   1931a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1931c:	990d      	ldr	r1, [sp, #52]	; 0x34
   1931e:	4653      	mov	r3, sl
   19320:	aa32      	add	r2, sp, #200	; 0xc8
   19322:	4691      	mov	r9, r2
   19324:	9308      	str	r3, [sp, #32]
   19326:	46b2      	mov	sl, r6
   19328:	e007      	b.n	1933a <_vfprintf_r+0xba2>
   1932a:	46c0      	nop			; (mov r8, r8)
   1932c:	0001fa50 	.word	0x0001fa50
   19330:	0001f450 	.word	0x0001f450
   19334:	0001fa60 	.word	0x0001fa60
   19338:	46a1      	mov	r9, r4
   1933a:	074a      	lsls	r2, r1, #29
   1933c:	4694      	mov	ip, r2
   1933e:	464b      	mov	r3, r9
   19340:	4665      	mov	r5, ip
   19342:	1e5c      	subs	r4, r3, #1
   19344:	08c6      	lsrs	r6, r0, #3
   19346:	2307      	movs	r3, #7
   19348:	08ca      	lsrs	r2, r1, #3
   1934a:	4335      	orrs	r5, r6
   1934c:	0011      	movs	r1, r2
   1934e:	002a      	movs	r2, r5
   19350:	4003      	ands	r3, r0
   19352:	3330      	adds	r3, #48	; 0x30
   19354:	7023      	strb	r3, [r4, #0]
   19356:	0028      	movs	r0, r5
   19358:	430a      	orrs	r2, r1
   1935a:	d1ed      	bne.n	19338 <_vfprintf_r+0xba0>
   1935c:	900c      	str	r0, [sp, #48]	; 0x30
   1935e:	910d      	str	r1, [sp, #52]	; 0x34
   19360:	9908      	ldr	r1, [sp, #32]
   19362:	4656      	mov	r6, sl
   19364:	468a      	mov	sl, r1
   19366:	9909      	ldr	r1, [sp, #36]	; 0x24
   19368:	464a      	mov	r2, r9
   1936a:	9411      	str	r4, [sp, #68]	; 0x44
   1936c:	07c9      	lsls	r1, r1, #31
   1936e:	d500      	bpl.n	19372 <_vfprintf_r+0xbda>
   19370:	e0e0      	b.n	19534 <_vfprintf_r+0xd9c>
   19372:	ab32      	add	r3, sp, #200	; 0xc8
   19374:	1b1b      	subs	r3, r3, r4
   19376:	930e      	str	r3, [sp, #56]	; 0x38
   19378:	f7ff fb7b 	bl	18a72 <_vfprintf_r+0x2da>
   1937c:	9c07      	ldr	r4, [sp, #28]
   1937e:	f7ff fa7d 	bl	1887c <_vfprintf_r+0xe4>
   19382:	981f      	ldr	r0, [sp, #124]	; 0x7c
   19384:	2800      	cmp	r0, #0
   19386:	dc00      	bgt.n	1938a <_vfprintf_r+0xbf2>
   19388:	e2b9      	b.n	198fe <_vfprintf_r+0x1166>
   1938a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1938c:	9914      	ldr	r1, [sp, #80]	; 0x50
   1938e:	0013      	movs	r3, r2
   19390:	4690      	mov	r8, r2
   19392:	428b      	cmp	r3, r1
   19394:	dd00      	ble.n	19398 <_vfprintf_r+0xc00>
   19396:	4688      	mov	r8, r1
   19398:	4643      	mov	r3, r8
   1939a:	2b00      	cmp	r3, #0
   1939c:	dd0c      	ble.n	193b8 <_vfprintf_r+0xc20>
   1939e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   193a0:	4444      	add	r4, r8
   193a2:	6033      	str	r3, [r6, #0]
   193a4:	4643      	mov	r3, r8
   193a6:	6073      	str	r3, [r6, #4]
   193a8:	687b      	ldr	r3, [r7, #4]
   193aa:	60bc      	str	r4, [r7, #8]
   193ac:	3301      	adds	r3, #1
   193ae:	607b      	str	r3, [r7, #4]
   193b0:	2b07      	cmp	r3, #7
   193b2:	dd00      	ble.n	193b6 <_vfprintf_r+0xc1e>
   193b4:	e389      	b.n	19aca <_vfprintf_r+0x1332>
   193b6:	3608      	adds	r6, #8
   193b8:	4643      	mov	r3, r8
   193ba:	43db      	mvns	r3, r3
   193bc:	4642      	mov	r2, r8
   193be:	17db      	asrs	r3, r3, #31
   193c0:	4013      	ands	r3, r2
   193c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   193c4:	1ad3      	subs	r3, r2, r3
   193c6:	4698      	mov	r8, r3
   193c8:	2b00      	cmp	r3, #0
   193ca:	dc00      	bgt.n	193ce <_vfprintf_r+0xc36>
   193cc:	e0eb      	b.n	195a6 <_vfprintf_r+0xe0e>
   193ce:	2b10      	cmp	r3, #16
   193d0:	dc01      	bgt.n	193d6 <_vfprintf_r+0xc3e>
   193d2:	f000 fcd9 	bl	19d88 <_vfprintf_r+0x15f0>
   193d6:	4adc      	ldr	r2, [pc, #880]	; (19748 <_vfprintf_r+0xfb0>)
   193d8:	687b      	ldr	r3, [r7, #4]
   193da:	4691      	mov	r9, r2
   193dc:	2210      	movs	r2, #16
   193de:	464d      	mov	r5, r9
   193e0:	4692      	mov	sl, r2
   193e2:	0022      	movs	r2, r4
   193e4:	4644      	mov	r4, r8
   193e6:	46d8      	mov	r8, fp
   193e8:	e004      	b.n	193f4 <_vfprintf_r+0xc5c>
   193ea:	3608      	adds	r6, #8
   193ec:	3c10      	subs	r4, #16
   193ee:	2c10      	cmp	r4, #16
   193f0:	dc00      	bgt.n	193f4 <_vfprintf_r+0xc5c>
   193f2:	e0bf      	b.n	19574 <_vfprintf_r+0xddc>
   193f4:	4651      	mov	r1, sl
   193f6:	3210      	adds	r2, #16
   193f8:	3301      	adds	r3, #1
   193fa:	6035      	str	r5, [r6, #0]
   193fc:	6071      	str	r1, [r6, #4]
   193fe:	60ba      	str	r2, [r7, #8]
   19400:	607b      	str	r3, [r7, #4]
   19402:	2b07      	cmp	r3, #7
   19404:	ddf1      	ble.n	193ea <_vfprintf_r+0xc52>
   19406:	003a      	movs	r2, r7
   19408:	4641      	mov	r1, r8
   1940a:	9806      	ldr	r0, [sp, #24]
   1940c:	f003 f9aa 	bl	1c764 <__sprint_r>
   19410:	2800      	cmp	r0, #0
   19412:	d000      	beq.n	19416 <_vfprintf_r+0xc7e>
   19414:	e3b6      	b.n	19b84 <_vfprintf_r+0x13ec>
   19416:	68ba      	ldr	r2, [r7, #8]
   19418:	687b      	ldr	r3, [r7, #4]
   1941a:	ae32      	add	r6, sp, #200	; 0xc8
   1941c:	e7e6      	b.n	193ec <_vfprintf_r+0xc54>
   1941e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19420:	2b00      	cmp	r3, #0
   19422:	d100      	bne.n	19426 <_vfprintf_r+0xc8e>
   19424:	e092      	b.n	1954c <_vfprintf_r+0xdb4>
   19426:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19428:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1942a:	ab32      	add	r3, sp, #200	; 0xc8
   1942c:	46b1      	mov	r9, r6
   1942e:	001e      	movs	r6, r3
   19430:	0020      	movs	r0, r4
   19432:	0029      	movs	r1, r5
   19434:	220a      	movs	r2, #10
   19436:	2300      	movs	r3, #0
   19438:	f7fb fd4a 	bl	14ed0 <__aeabi_uldivmod>
   1943c:	3e01      	subs	r6, #1
   1943e:	3230      	adds	r2, #48	; 0x30
   19440:	7032      	strb	r2, [r6, #0]
   19442:	2300      	movs	r3, #0
   19444:	0020      	movs	r0, r4
   19446:	0029      	movs	r1, r5
   19448:	220a      	movs	r2, #10
   1944a:	f7fb fd41 	bl	14ed0 <__aeabi_uldivmod>
   1944e:	0003      	movs	r3, r0
   19450:	0004      	movs	r4, r0
   19452:	000d      	movs	r5, r1
   19454:	430b      	orrs	r3, r1
   19456:	d1eb      	bne.n	19430 <_vfprintf_r+0xc98>
   19458:	0032      	movs	r2, r6
   1945a:	ab32      	add	r3, sp, #200	; 0xc8
   1945c:	1a9b      	subs	r3, r3, r2
   1945e:	9611      	str	r6, [sp, #68]	; 0x44
   19460:	940c      	str	r4, [sp, #48]	; 0x30
   19462:	950d      	str	r5, [sp, #52]	; 0x34
   19464:	464e      	mov	r6, r9
   19466:	930e      	str	r3, [sp, #56]	; 0x38
   19468:	f7ff fb03 	bl	18a72 <_vfprintf_r+0x2da>
   1946c:	2300      	movs	r3, #0
   1946e:	930e      	str	r3, [sp, #56]	; 0x38
   19470:	ab32      	add	r3, sp, #200	; 0xc8
   19472:	9311      	str	r3, [sp, #68]	; 0x44
   19474:	f7ff fafd 	bl	18a72 <_vfprintf_r+0x2da>
   19478:	003a      	movs	r2, r7
   1947a:	4659      	mov	r1, fp
   1947c:	9806      	ldr	r0, [sp, #24]
   1947e:	f003 f971 	bl	1c764 <__sprint_r>
   19482:	2800      	cmp	r0, #0
   19484:	d000      	beq.n	19488 <_vfprintf_r+0xcf0>
   19486:	e717      	b.n	192b8 <_vfprintf_r+0xb20>
   19488:	ab16      	add	r3, sp, #88	; 0x58
   1948a:	7fdb      	ldrb	r3, [r3, #31]
   1948c:	68bc      	ldr	r4, [r7, #8]
   1948e:	4698      	mov	r8, r3
   19490:	ae32      	add	r6, sp, #200	; 0xc8
   19492:	e513      	b.n	18ebc <_vfprintf_r+0x724>
   19494:	46b1      	mov	r9, r6
   19496:	e697      	b.n	191c8 <_vfprintf_r+0xa30>
   19498:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1949a:	1e5d      	subs	r5, r3, #1
   1949c:	2d00      	cmp	r5, #0
   1949e:	dc00      	bgt.n	194a2 <_vfprintf_r+0xd0a>
   194a0:	e616      	b.n	190d0 <_vfprintf_r+0x938>
   194a2:	4ba9      	ldr	r3, [pc, #676]	; (19748 <_vfprintf_r+0xfb0>)
   194a4:	4699      	mov	r9, r3
   194a6:	2d10      	cmp	r5, #16
   194a8:	dc00      	bgt.n	194ac <_vfprintf_r+0xd14>
   194aa:	e10a      	b.n	196c2 <_vfprintf_r+0xf2a>
   194ac:	2310      	movs	r3, #16
   194ae:	0022      	movs	r2, r4
   194b0:	469a      	mov	sl, r3
   194b2:	465c      	mov	r4, fp
   194b4:	4643      	mov	r3, r8
   194b6:	e004      	b.n	194c2 <_vfprintf_r+0xd2a>
   194b8:	3608      	adds	r6, #8
   194ba:	3d10      	subs	r5, #16
   194bc:	2d10      	cmp	r5, #16
   194be:	dc00      	bgt.n	194c2 <_vfprintf_r+0xd2a>
   194c0:	e0fc      	b.n	196bc <_vfprintf_r+0xf24>
   194c2:	4649      	mov	r1, r9
   194c4:	6031      	str	r1, [r6, #0]
   194c6:	4651      	mov	r1, sl
   194c8:	3210      	adds	r2, #16
   194ca:	3301      	adds	r3, #1
   194cc:	6071      	str	r1, [r6, #4]
   194ce:	60ba      	str	r2, [r7, #8]
   194d0:	607b      	str	r3, [r7, #4]
   194d2:	2b07      	cmp	r3, #7
   194d4:	ddf0      	ble.n	194b8 <_vfprintf_r+0xd20>
   194d6:	003a      	movs	r2, r7
   194d8:	0021      	movs	r1, r4
   194da:	9806      	ldr	r0, [sp, #24]
   194dc:	f003 f942 	bl	1c764 <__sprint_r>
   194e0:	2800      	cmp	r0, #0
   194e2:	d000      	beq.n	194e6 <_vfprintf_r+0xd4e>
   194e4:	e6c1      	b.n	1926a <_vfprintf_r+0xad2>
   194e6:	68ba      	ldr	r2, [r7, #8]
   194e8:	687b      	ldr	r3, [r7, #4]
   194ea:	ae32      	add	r6, sp, #200	; 0xc8
   194ec:	e7e5      	b.n	194ba <_vfprintf_r+0xd22>
   194ee:	990c      	ldr	r1, [sp, #48]	; 0x30
   194f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   194f2:	0008      	movs	r0, r1
   194f4:	4310      	orrs	r0, r2
   194f6:	2302      	movs	r3, #2
   194f8:	0002      	movs	r2, r0
   194fa:	f7ff fa93 	bl	18a24 <_vfprintf_r+0x28c>
   194fe:	46a3      	mov	fp, r4
   19500:	0014      	movs	r4, r2
   19502:	464a      	mov	r2, r9
   19504:	1964      	adds	r4, r4, r5
   19506:	3301      	adds	r3, #1
   19508:	6032      	str	r2, [r6, #0]
   1950a:	6075      	str	r5, [r6, #4]
   1950c:	60bc      	str	r4, [r7, #8]
   1950e:	607b      	str	r3, [r7, #4]
   19510:	2b07      	cmp	r3, #7
   19512:	dc00      	bgt.n	19516 <_vfprintf_r+0xd7e>
   19514:	e542      	b.n	18f9c <_vfprintf_r+0x804>
   19516:	e5e8      	b.n	190ea <_vfprintf_r+0x952>
   19518:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1951a:	681a      	ldr	r2, [r3, #0]
   1951c:	f7ff fa68 	bl	189f0 <_vfprintf_r+0x258>
   19520:	6813      	ldr	r3, [r2, #0]
   19522:	9308      	str	r3, [sp, #32]
   19524:	f7ff fb57 	bl	18bd6 <_vfprintf_r+0x43e>
   19528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1952a:	681a      	ldr	r2, [r3, #0]
   1952c:	e412      	b.n	18d54 <_vfprintf_r+0x5bc>
   1952e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19530:	681a      	ldr	r2, [r3, #0]
   19532:	e426      	b.n	18d82 <_vfprintf_r+0x5ea>
   19534:	2b30      	cmp	r3, #48	; 0x30
   19536:	d100      	bne.n	1953a <_vfprintf_r+0xda2>
   19538:	e23c      	b.n	199b4 <_vfprintf_r+0x121c>
   1953a:	2330      	movs	r3, #48	; 0x30
   1953c:	3a02      	subs	r2, #2
   1953e:	7013      	strb	r3, [r2, #0]
   19540:	ab32      	add	r3, sp, #200	; 0xc8
   19542:	1a9b      	subs	r3, r3, r2
   19544:	930e      	str	r3, [sp, #56]	; 0x38
   19546:	9211      	str	r2, [sp, #68]	; 0x44
   19548:	f7ff fa93 	bl	18a72 <_vfprintf_r+0x2da>
   1954c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1954e:	2b09      	cmp	r3, #9
   19550:	d900      	bls.n	19554 <_vfprintf_r+0xdbc>
   19552:	e768      	b.n	19426 <_vfprintf_r+0xc8e>
   19554:	9c09      	ldr	r4, [sp, #36]	; 0x24
   19556:	2227      	movs	r2, #39	; 0x27
   19558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1955a:	a928      	add	r1, sp, #160	; 0xa0
   1955c:	3330      	adds	r3, #48	; 0x30
   1955e:	548b      	strb	r3, [r1, r2]
   19560:	2301      	movs	r3, #1
   19562:	aa16      	add	r2, sp, #88	; 0x58
   19564:	4694      	mov	ip, r2
   19566:	930e      	str	r3, [sp, #56]	; 0x38
   19568:	336e      	adds	r3, #110	; 0x6e
   1956a:	4463      	add	r3, ip
   1956c:	9409      	str	r4, [sp, #36]	; 0x24
   1956e:	9311      	str	r3, [sp, #68]	; 0x44
   19570:	f7ff fa7f 	bl	18a72 <_vfprintf_r+0x2da>
   19574:	46c3      	mov	fp, r8
   19576:	46a9      	mov	r9, r5
   19578:	46a0      	mov	r8, r4
   1957a:	0014      	movs	r4, r2
   1957c:	464a      	mov	r2, r9
   1957e:	6032      	str	r2, [r6, #0]
   19580:	4642      	mov	r2, r8
   19582:	4444      	add	r4, r8
   19584:	3301      	adds	r3, #1
   19586:	6072      	str	r2, [r6, #4]
   19588:	60bc      	str	r4, [r7, #8]
   1958a:	607b      	str	r3, [r7, #4]
   1958c:	2b07      	cmp	r3, #7
   1958e:	dc00      	bgt.n	19592 <_vfprintf_r+0xdfa>
   19590:	e18d      	b.n	198ae <_vfprintf_r+0x1116>
   19592:	003a      	movs	r2, r7
   19594:	4659      	mov	r1, fp
   19596:	9806      	ldr	r0, [sp, #24]
   19598:	f003 f8e4 	bl	1c764 <__sprint_r>
   1959c:	2800      	cmp	r0, #0
   1959e:	d000      	beq.n	195a2 <_vfprintf_r+0xe0a>
   195a0:	e68a      	b.n	192b8 <_vfprintf_r+0xb20>
   195a2:	68bc      	ldr	r4, [r7, #8]
   195a4:	ae32      	add	r6, sp, #200	; 0xc8
   195a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   195a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   195aa:	4293      	cmp	r3, r2
   195ac:	db00      	blt.n	195b0 <_vfprintf_r+0xe18>
   195ae:	e179      	b.n	198a4 <_vfprintf_r+0x110c>
   195b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   195b2:	6032      	str	r2, [r6, #0]
   195b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   195b6:	4694      	mov	ip, r2
   195b8:	6072      	str	r2, [r6, #4]
   195ba:	687a      	ldr	r2, [r7, #4]
   195bc:	4464      	add	r4, ip
   195be:	3201      	adds	r2, #1
   195c0:	60bc      	str	r4, [r7, #8]
   195c2:	607a      	str	r2, [r7, #4]
   195c4:	2a07      	cmp	r2, #7
   195c6:	dd00      	ble.n	195ca <_vfprintf_r+0xe32>
   195c8:	e176      	b.n	198b8 <_vfprintf_r+0x1120>
   195ca:	3608      	adds	r6, #8
   195cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   195ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
   195d0:	1ad3      	subs	r3, r2, r3
   195d2:	1a52      	subs	r2, r2, r1
   195d4:	4690      	mov	r8, r2
   195d6:	429a      	cmp	r2, r3
   195d8:	dd00      	ble.n	195dc <_vfprintf_r+0xe44>
   195da:	4698      	mov	r8, r3
   195dc:	4642      	mov	r2, r8
   195de:	2a00      	cmp	r2, #0
   195e0:	dd0f      	ble.n	19602 <_vfprintf_r+0xe6a>
   195e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   195e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   195e6:	468c      	mov	ip, r1
   195e8:	4462      	add	r2, ip
   195ea:	6032      	str	r2, [r6, #0]
   195ec:	4642      	mov	r2, r8
   195ee:	6072      	str	r2, [r6, #4]
   195f0:	687a      	ldr	r2, [r7, #4]
   195f2:	4444      	add	r4, r8
   195f4:	3201      	adds	r2, #1
   195f6:	60bc      	str	r4, [r7, #8]
   195f8:	607a      	str	r2, [r7, #4]
   195fa:	2a07      	cmp	r2, #7
   195fc:	dd00      	ble.n	19600 <_vfprintf_r+0xe68>
   195fe:	e289      	b.n	19b14 <_vfprintf_r+0x137c>
   19600:	3608      	adds	r6, #8
   19602:	4642      	mov	r2, r8
   19604:	43d5      	mvns	r5, r2
   19606:	17ed      	asrs	r5, r5, #31
   19608:	4015      	ands	r5, r2
   1960a:	1b5d      	subs	r5, r3, r5
   1960c:	2d00      	cmp	r5, #0
   1960e:	dc00      	bgt.n	19612 <_vfprintf_r+0xe7a>
   19610:	e4c5      	b.n	18f9e <_vfprintf_r+0x806>
   19612:	4a4d      	ldr	r2, [pc, #308]	; (19748 <_vfprintf_r+0xfb0>)
   19614:	687b      	ldr	r3, [r7, #4]
   19616:	4691      	mov	r9, r2
   19618:	2d10      	cmp	r5, #16
   1961a:	dc00      	bgt.n	1961e <_vfprintf_r+0xe86>
   1961c:	e771      	b.n	19502 <_vfprintf_r+0xd6a>
   1961e:	2210      	movs	r2, #16
   19620:	4690      	mov	r8, r2
   19622:	0022      	movs	r2, r4
   19624:	465c      	mov	r4, fp
   19626:	e004      	b.n	19632 <_vfprintf_r+0xe9a>
   19628:	3608      	adds	r6, #8
   1962a:	3d10      	subs	r5, #16
   1962c:	2d10      	cmp	r5, #16
   1962e:	dc00      	bgt.n	19632 <_vfprintf_r+0xe9a>
   19630:	e765      	b.n	194fe <_vfprintf_r+0xd66>
   19632:	4649      	mov	r1, r9
   19634:	6031      	str	r1, [r6, #0]
   19636:	4641      	mov	r1, r8
   19638:	3210      	adds	r2, #16
   1963a:	3301      	adds	r3, #1
   1963c:	6071      	str	r1, [r6, #4]
   1963e:	60ba      	str	r2, [r7, #8]
   19640:	607b      	str	r3, [r7, #4]
   19642:	2b07      	cmp	r3, #7
   19644:	ddf0      	ble.n	19628 <_vfprintf_r+0xe90>
   19646:	003a      	movs	r2, r7
   19648:	0021      	movs	r1, r4
   1964a:	9806      	ldr	r0, [sp, #24]
   1964c:	f003 f88a 	bl	1c764 <__sprint_r>
   19650:	2800      	cmp	r0, #0
   19652:	d000      	beq.n	19656 <_vfprintf_r+0xebe>
   19654:	e609      	b.n	1926a <_vfprintf_r+0xad2>
   19656:	68ba      	ldr	r2, [r7, #8]
   19658:	687b      	ldr	r3, [r7, #4]
   1965a:	ae32      	add	r6, sp, #200	; 0xc8
   1965c:	e7e5      	b.n	1962a <_vfprintf_r+0xe92>
   1965e:	003a      	movs	r2, r7
   19660:	4659      	mov	r1, fp
   19662:	9806      	ldr	r0, [sp, #24]
   19664:	f003 f87e 	bl	1c764 <__sprint_r>
   19668:	2800      	cmp	r0, #0
   1966a:	d000      	beq.n	1966e <_vfprintf_r+0xed6>
   1966c:	e624      	b.n	192b8 <_vfprintf_r+0xb20>
   1966e:	68bc      	ldr	r4, [r7, #8]
   19670:	687b      	ldr	r3, [r7, #4]
   19672:	ae32      	add	r6, sp, #200	; 0xc8
   19674:	e504      	b.n	19080 <_vfprintf_r+0x8e8>
   19676:	2307      	movs	r3, #7
   19678:	3207      	adds	r2, #7
   1967a:	439a      	bics	r2, r3
   1967c:	3301      	adds	r3, #1
   1967e:	469c      	mov	ip, r3
   19680:	4494      	add	ip, r2
   19682:	4663      	mov	r3, ip
   19684:	930f      	str	r3, [sp, #60]	; 0x3c
   19686:	6853      	ldr	r3, [r2, #4]
   19688:	6812      	ldr	r2, [r2, #0]
   1968a:	930d      	str	r3, [sp, #52]	; 0x34
   1968c:	920c      	str	r2, [sp, #48]	; 0x30
   1968e:	f7ff faa7 	bl	18be0 <_vfprintf_r+0x448>
   19692:	2207      	movs	r2, #7
   19694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19696:	3307      	adds	r3, #7
   19698:	4393      	bics	r3, r2
   1969a:	3201      	adds	r2, #1
   1969c:	4694      	mov	ip, r2
   1969e:	449c      	add	ip, r3
   196a0:	4662      	mov	r2, ip
   196a2:	920f      	str	r2, [sp, #60]	; 0x3c
   196a4:	681a      	ldr	r2, [r3, #0]
   196a6:	685b      	ldr	r3, [r3, #4]
   196a8:	0011      	movs	r1, r2
   196aa:	001a      	movs	r2, r3
   196ac:	0008      	movs	r0, r1
   196ae:	4310      	orrs	r0, r2
   196b0:	910c      	str	r1, [sp, #48]	; 0x30
   196b2:	920d      	str	r2, [sp, #52]	; 0x34
   196b4:	2300      	movs	r3, #0
   196b6:	0002      	movs	r2, r0
   196b8:	f7ff f9b4 	bl	18a24 <_vfprintf_r+0x28c>
   196bc:	46a3      	mov	fp, r4
   196be:	4698      	mov	r8, r3
   196c0:	0014      	movs	r4, r2
   196c2:	464b      	mov	r3, r9
   196c4:	6075      	str	r5, [r6, #4]
   196c6:	6033      	str	r3, [r6, #0]
   196c8:	1964      	adds	r4, r4, r5
   196ca:	e4f7      	b.n	190bc <_vfprintf_r+0x924>
   196cc:	003a      	movs	r2, r7
   196ce:	4659      	mov	r1, fp
   196d0:	9806      	ldr	r0, [sp, #24]
   196d2:	f003 f847 	bl	1c764 <__sprint_r>
   196d6:	2800      	cmp	r0, #0
   196d8:	d000      	beq.n	196dc <_vfprintf_r+0xf44>
   196da:	e5ed      	b.n	192b8 <_vfprintf_r+0xb20>
   196dc:	687b      	ldr	r3, [r7, #4]
   196de:	68bc      	ldr	r4, [r7, #8]
   196e0:	4698      	mov	r8, r3
   196e2:	ae32      	add	r6, sp, #200	; 0xc8
   196e4:	e4da      	b.n	1909c <_vfprintf_r+0x904>
   196e6:	2207      	movs	r2, #7
   196e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   196ea:	3307      	adds	r3, #7
   196ec:	4393      	bics	r3, r2
   196ee:	3201      	adds	r2, #1
   196f0:	4694      	mov	ip, r2
   196f2:	449c      	add	ip, r3
   196f4:	4662      	mov	r2, ip
   196f6:	920f      	str	r2, [sp, #60]	; 0x3c
   196f8:	681a      	ldr	r2, [r3, #0]
   196fa:	685b      	ldr	r3, [r3, #4]
   196fc:	0011      	movs	r1, r2
   196fe:	001a      	movs	r2, r3
   19700:	0008      	movs	r0, r1
   19702:	4310      	orrs	r0, r2
   19704:	910c      	str	r1, [sp, #48]	; 0x30
   19706:	920d      	str	r2, [sp, #52]	; 0x34
   19708:	2301      	movs	r3, #1
   1970a:	0002      	movs	r2, r0
   1970c:	f7ff f98a 	bl	18a24 <_vfprintf_r+0x28c>
   19710:	2207      	movs	r2, #7
   19712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19714:	3307      	adds	r3, #7
   19716:	4393      	bics	r3, r2
   19718:	3201      	adds	r2, #1
   1971a:	4694      	mov	ip, r2
   1971c:	449c      	add	ip, r3
   1971e:	4662      	mov	r2, ip
   19720:	920f      	str	r2, [sp, #60]	; 0x3c
   19722:	681a      	ldr	r2, [r3, #0]
   19724:	685b      	ldr	r3, [r3, #4]
   19726:	920c      	str	r2, [sp, #48]	; 0x30
   19728:	930d      	str	r3, [sp, #52]	; 0x34
   1972a:	f7ff f966 	bl	189fa <_vfprintf_r+0x262>
   1972e:	003a      	movs	r2, r7
   19730:	4659      	mov	r1, fp
   19732:	9806      	ldr	r0, [sp, #24]
   19734:	f003 f816 	bl	1c764 <__sprint_r>
   19738:	2800      	cmp	r0, #0
   1973a:	d000      	beq.n	1973e <_vfprintf_r+0xfa6>
   1973c:	e5bc      	b.n	192b8 <_vfprintf_r+0xb20>
   1973e:	68bc      	ldr	r4, [r7, #8]
   19740:	ae32      	add	r6, sp, #200	; 0xc8
   19742:	f7ff fbe2 	bl	18f0a <_vfprintf_r+0x772>
   19746:	46c0      	nop			; (mov r8, r8)
   19748:	0001fa60 	.word	0x0001fa60
   1974c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1974e:	990d      	ldr	r1, [sp, #52]	; 0x34
   19750:	2300      	movs	r3, #0
   19752:	4242      	negs	r2, r0
   19754:	418b      	sbcs	r3, r1
   19756:	0011      	movs	r1, r2
   19758:	001a      	movs	r2, r3
   1975a:	232d      	movs	r3, #45	; 0x2d
   1975c:	a816      	add	r0, sp, #88	; 0x58
   1975e:	77c3      	strb	r3, [r0, #31]
   19760:	0008      	movs	r0, r1
   19762:	4310      	orrs	r0, r2
   19764:	910c      	str	r1, [sp, #48]	; 0x30
   19766:	920d      	str	r2, [sp, #52]	; 0x34
   19768:	4698      	mov	r8, r3
   1976a:	0002      	movs	r2, r0
   1976c:	3b2c      	subs	r3, #44	; 0x2c
   1976e:	f7ff f95d 	bl	18a2c <_vfprintf_r+0x294>
   19772:	9916      	ldr	r1, [sp, #88]	; 0x58
   19774:	9d15      	ldr	r5, [sp, #84]	; 0x54
   19776:	000a      	movs	r2, r1
   19778:	0008      	movs	r0, r1
   1977a:	002b      	movs	r3, r5
   1977c:	0029      	movs	r1, r5
   1977e:	f003 fa8b 	bl	1cc98 <__aeabi_dcmpun>
   19782:	2800      	cmp	r0, #0
   19784:	d000      	beq.n	19788 <_vfprintf_r+0xff0>
   19786:	e2c6      	b.n	19d16 <_vfprintf_r+0x157e>
   19788:	4653      	mov	r3, sl
   1978a:	3301      	adds	r3, #1
   1978c:	d100      	bne.n	19790 <_vfprintf_r+0xff8>
   1978e:	e09f      	b.n	198d0 <_vfprintf_r+0x1138>
   19790:	2320      	movs	r3, #32
   19792:	9a12      	ldr	r2, [sp, #72]	; 0x48
   19794:	439a      	bics	r2, r3
   19796:	920e      	str	r2, [sp, #56]	; 0x38
   19798:	2a47      	cmp	r2, #71	; 0x47
   1979a:	d100      	bne.n	1979e <_vfprintf_r+0x1006>
   1979c:	e1a1      	b.n	19ae2 <_vfprintf_r+0x134a>
   1979e:	2380      	movs	r3, #128	; 0x80
   197a0:	005b      	lsls	r3, r3, #1
   197a2:	4323      	orrs	r3, r4
   197a4:	9309      	str	r3, [sp, #36]	; 0x24
   197a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   197a8:	2b00      	cmp	r3, #0
   197aa:	da00      	bge.n	197ae <_vfprintf_r+0x1016>
   197ac:	e1ed      	b.n	19b8a <_vfprintf_r+0x13f2>
   197ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
   197b0:	9308      	str	r3, [sp, #32]
   197b2:	2300      	movs	r3, #0
   197b4:	4691      	mov	r9, r2
   197b6:	9310      	str	r3, [sp, #64]	; 0x40
   197b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   197ba:	2b66      	cmp	r3, #102	; 0x66
   197bc:	d100      	bne.n	197c0 <_vfprintf_r+0x1028>
   197be:	e1b8      	b.n	19b32 <_vfprintf_r+0x139a>
   197c0:	2b46      	cmp	r3, #70	; 0x46
   197c2:	d100      	bne.n	197c6 <_vfprintf_r+0x102e>
   197c4:	e237      	b.n	19c36 <_vfprintf_r+0x149e>
   197c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   197c8:	9806      	ldr	r0, [sp, #24]
   197ca:	3a45      	subs	r2, #69	; 0x45
   197cc:	0013      	movs	r3, r2
   197ce:	4259      	negs	r1, r3
   197d0:	4159      	adcs	r1, r3
   197d2:	ab20      	add	r3, sp, #128	; 0x80
   197d4:	000d      	movs	r5, r1
   197d6:	9303      	str	r3, [sp, #12]
   197d8:	ab1f      	add	r3, sp, #124	; 0x7c
   197da:	9302      	str	r3, [sp, #8]
   197dc:	2302      	movs	r3, #2
   197de:	aa23      	add	r2, sp, #140	; 0x8c
   197e0:	4455      	add	r5, sl
   197e2:	921b      	str	r2, [sp, #108]	; 0x6c
   197e4:	9204      	str	r2, [sp, #16]
   197e6:	9300      	str	r3, [sp, #0]
   197e8:	9501      	str	r5, [sp, #4]
   197ea:	9b08      	ldr	r3, [sp, #32]
   197ec:	464a      	mov	r2, r9
   197ee:	f000 fcab 	bl	1a148 <_dtoa_r>
   197f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   197f4:	9011      	str	r0, [sp, #68]	; 0x44
   197f6:	2b67      	cmp	r3, #103	; 0x67
   197f8:	d000      	beq.n	197fc <_vfprintf_r+0x1064>
   197fa:	e20b      	b.n	19c14 <_vfprintf_r+0x147c>
   197fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   197fe:	4698      	mov	r8, r3
   19800:	44a8      	add	r8, r5
   19802:	07e3      	lsls	r3, r4, #31
   19804:	d400      	bmi.n	19808 <_vfprintf_r+0x1070>
   19806:	e277      	b.n	19cf8 <_vfprintf_r+0x1560>
   19808:	2300      	movs	r3, #0
   1980a:	2200      	movs	r2, #0
   1980c:	4648      	mov	r0, r9
   1980e:	9908      	ldr	r1, [sp, #32]
   19810:	f7fe f884 	bl	1791c <__aeabi_dcmpeq>
   19814:	4643      	mov	r3, r8
   19816:	2800      	cmp	r0, #0
   19818:	d10a      	bne.n	19830 <_vfprintf_r+0x1098>
   1981a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1981c:	4543      	cmp	r3, r8
   1981e:	d207      	bcs.n	19830 <_vfprintf_r+0x1098>
   19820:	2130      	movs	r1, #48	; 0x30
   19822:	4640      	mov	r0, r8
   19824:	1c5a      	adds	r2, r3, #1
   19826:	9223      	str	r2, [sp, #140]	; 0x8c
   19828:	7019      	strb	r1, [r3, #0]
   1982a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1982c:	4298      	cmp	r0, r3
   1982e:	d8f9      	bhi.n	19824 <_vfprintf_r+0x108c>
   19830:	9a11      	ldr	r2, [sp, #68]	; 0x44
   19832:	1a9b      	subs	r3, r3, r2
   19834:	9314      	str	r3, [sp, #80]	; 0x50
   19836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19838:	2b47      	cmp	r3, #71	; 0x47
   1983a:	d100      	bne.n	1983e <_vfprintf_r+0x10a6>
   1983c:	e0d0      	b.n	199e0 <_vfprintf_r+0x1248>
   1983e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19840:	2b65      	cmp	r3, #101	; 0x65
   19842:	dc00      	bgt.n	19846 <_vfprintf_r+0x10ae>
   19844:	e2d5      	b.n	19df2 <_vfprintf_r+0x165a>
   19846:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19848:	2b66      	cmp	r3, #102	; 0x66
   1984a:	d100      	bne.n	1984e <_vfprintf_r+0x10b6>
   1984c:	e1c6      	b.n	19bdc <_vfprintf_r+0x1444>
   1984e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   19850:	9313      	str	r3, [sp, #76]	; 0x4c
   19852:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19854:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   19856:	0019      	movs	r1, r3
   19858:	4291      	cmp	r1, r2
   1985a:	dd00      	ble.n	1985e <_vfprintf_r+0x10c6>
   1985c:	e1a0      	b.n	19ba0 <_vfprintf_r+0x1408>
   1985e:	07e3      	lsls	r3, r4, #31
   19860:	d500      	bpl.n	19864 <_vfprintf_r+0x10cc>
   19862:	e242      	b.n	19cea <_vfprintf_r+0x1552>
   19864:	43d3      	mvns	r3, r2
   19866:	17db      	asrs	r3, r3, #31
   19868:	0011      	movs	r1, r2
   1986a:	401a      	ands	r2, r3
   1986c:	2367      	movs	r3, #103	; 0x67
   1986e:	9208      	str	r2, [sp, #32]
   19870:	910e      	str	r1, [sp, #56]	; 0x38
   19872:	9312      	str	r3, [sp, #72]	; 0x48
   19874:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19876:	2b00      	cmp	r3, #0
   19878:	d000      	beq.n	1987c <_vfprintf_r+0x10e4>
   1987a:	e0a9      	b.n	199d0 <_vfprintf_r+0x1238>
   1987c:	ab16      	add	r3, sp, #88	; 0x58
   1987e:	7fdb      	ldrb	r3, [r3, #31]
   19880:	4698      	mov	r8, r3
   19882:	2300      	movs	r3, #0
   19884:	469a      	mov	sl, r3
   19886:	f7ff f8fc 	bl	18a82 <_vfprintf_r+0x2ea>
   1988a:	46cb      	mov	fp, r9
   1988c:	46a1      	mov	r9, r4
   1988e:	0014      	movs	r4, r2
   19890:	e637      	b.n	19502 <_vfprintf_r+0xd6a>
   19892:	464b      	mov	r3, r9
   19894:	6d98      	ldr	r0, [r3, #88]	; 0x58
   19896:	f002 f875 	bl	1b984 <__retarget_lock_release_recursive>
   1989a:	2301      	movs	r3, #1
   1989c:	425b      	negs	r3, r3
   1989e:	930a      	str	r3, [sp, #40]	; 0x28
   198a0:	f7ff f82b 	bl	188fa <_vfprintf_r+0x162>
   198a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   198a6:	07d2      	lsls	r2, r2, #31
   198a8:	d400      	bmi.n	198ac <_vfprintf_r+0x1114>
   198aa:	e68f      	b.n	195cc <_vfprintf_r+0xe34>
   198ac:	e680      	b.n	195b0 <_vfprintf_r+0xe18>
   198ae:	3608      	adds	r6, #8
   198b0:	e679      	b.n	195a6 <_vfprintf_r+0xe0e>
   198b2:	68bc      	ldr	r4, [r7, #8]
   198b4:	f7ff fb73 	bl	18f9e <_vfprintf_r+0x806>
   198b8:	003a      	movs	r2, r7
   198ba:	4659      	mov	r1, fp
   198bc:	9806      	ldr	r0, [sp, #24]
   198be:	f002 ff51 	bl	1c764 <__sprint_r>
   198c2:	2800      	cmp	r0, #0
   198c4:	d000      	beq.n	198c8 <_vfprintf_r+0x1130>
   198c6:	e4f7      	b.n	192b8 <_vfprintf_r+0xb20>
   198c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   198ca:	68bc      	ldr	r4, [r7, #8]
   198cc:	ae32      	add	r6, sp, #200	; 0xc8
   198ce:	e67d      	b.n	195cc <_vfprintf_r+0xe34>
   198d0:	2320      	movs	r3, #32
   198d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   198d4:	439a      	bics	r2, r3
   198d6:	3b1a      	subs	r3, #26
   198d8:	920e      	str	r2, [sp, #56]	; 0x38
   198da:	469a      	mov	sl, r3
   198dc:	e75f      	b.n	1979e <_vfprintf_r+0x1006>
   198de:	232d      	movs	r3, #45	; 0x2d
   198e0:	aa16      	add	r2, sp, #88	; 0x58
   198e2:	77d3      	strb	r3, [r2, #31]
   198e4:	4698      	mov	r8, r3
   198e6:	f7ff faa8 	bl	18e3a <_vfprintf_r+0x6a2>
   198ea:	003a      	movs	r2, r7
   198ec:	4659      	mov	r1, fp
   198ee:	9806      	ldr	r0, [sp, #24]
   198f0:	f002 ff38 	bl	1c764 <__sprint_r>
   198f4:	2800      	cmp	r0, #0
   198f6:	d000      	beq.n	198fa <_vfprintf_r+0x1162>
   198f8:	e4de      	b.n	192b8 <_vfprintf_r+0xb20>
   198fa:	ae32      	add	r6, sp, #200	; 0xc8
   198fc:	e419      	b.n	19132 <_vfprintf_r+0x99a>
   198fe:	4be3      	ldr	r3, [pc, #908]	; (19c8c <_vfprintf_r+0x14f4>)
   19900:	3401      	adds	r4, #1
   19902:	6033      	str	r3, [r6, #0]
   19904:	2301      	movs	r3, #1
   19906:	6073      	str	r3, [r6, #4]
   19908:	687b      	ldr	r3, [r7, #4]
   1990a:	60bc      	str	r4, [r7, #8]
   1990c:	3301      	adds	r3, #1
   1990e:	607b      	str	r3, [r7, #4]
   19910:	2b07      	cmp	r3, #7
   19912:	dd00      	ble.n	19916 <_vfprintf_r+0x117e>
   19914:	e155      	b.n	19bc2 <_vfprintf_r+0x142a>
   19916:	3608      	adds	r6, #8
   19918:	2800      	cmp	r0, #0
   1991a:	d107      	bne.n	1992c <_vfprintf_r+0x1194>
   1991c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1991e:	2b00      	cmp	r3, #0
   19920:	d104      	bne.n	1992c <_vfprintf_r+0x1194>
   19922:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19924:	07db      	lsls	r3, r3, #31
   19926:	d401      	bmi.n	1992c <_vfprintf_r+0x1194>
   19928:	f7ff fb39 	bl	18f9e <_vfprintf_r+0x806>
   1992c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1992e:	6033      	str	r3, [r6, #0]
   19930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19932:	1919      	adds	r1, r3, r4
   19934:	6073      	str	r3, [r6, #4]
   19936:	687b      	ldr	r3, [r7, #4]
   19938:	60b9      	str	r1, [r7, #8]
   1993a:	3301      	adds	r3, #1
   1993c:	607b      	str	r3, [r7, #4]
   1993e:	2b07      	cmp	r3, #7
   19940:	dd00      	ble.n	19944 <_vfprintf_r+0x11ac>
   19942:	e1c4      	b.n	19cce <_vfprintf_r+0x1536>
   19944:	0032      	movs	r2, r6
   19946:	3208      	adds	r2, #8
   19948:	2800      	cmp	r0, #0
   1994a:	da00      	bge.n	1994e <_vfprintf_r+0x11b6>
   1994c:	e195      	b.n	19c7a <_vfprintf_r+0x14e2>
   1994e:	9811      	ldr	r0, [sp, #68]	; 0x44
   19950:	3301      	adds	r3, #1
   19952:	6010      	str	r0, [r2, #0]
   19954:	9814      	ldr	r0, [sp, #80]	; 0x50
   19956:	607b      	str	r3, [r7, #4]
   19958:	1844      	adds	r4, r0, r1
   1995a:	6050      	str	r0, [r2, #4]
   1995c:	60bc      	str	r4, [r7, #8]
   1995e:	2b07      	cmp	r3, #7
   19960:	dd01      	ble.n	19966 <_vfprintf_r+0x11ce>
   19962:	f7ff fbc2 	bl	190ea <_vfprintf_r+0x952>
   19966:	3208      	adds	r2, #8
   19968:	0016      	movs	r6, r2
   1996a:	f7ff fb18 	bl	18f9e <_vfprintf_r+0x806>
   1996e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   19970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19972:	680b      	ldr	r3, [r1, #0]
   19974:	601a      	str	r2, [r3, #0]
   19976:	17d2      	asrs	r2, r2, #31
   19978:	605a      	str	r2, [r3, #4]
   1997a:	000b      	movs	r3, r1
   1997c:	3304      	adds	r3, #4
   1997e:	930f      	str	r3, [sp, #60]	; 0x3c
   19980:	f7fe ff58 	bl	18834 <_vfprintf_r+0x9c>
   19984:	464b      	mov	r3, r9
   19986:	9a07      	ldr	r2, [sp, #28]
   19988:	431c      	orrs	r4, r3
   1998a:	3201      	adds	r2, #1
   1998c:	7813      	ldrb	r3, [r2, #0]
   1998e:	9207      	str	r2, [sp, #28]
   19990:	f7fe ff8b 	bl	188aa <_vfprintf_r+0x112>
   19994:	003a      	movs	r2, r7
   19996:	4659      	mov	r1, fp
   19998:	9806      	ldr	r0, [sp, #24]
   1999a:	f002 fee3 	bl	1c764 <__sprint_r>
   1999e:	2800      	cmp	r0, #0
   199a0:	d000      	beq.n	199a4 <_vfprintf_r+0x120c>
   199a2:	e489      	b.n	192b8 <_vfprintf_r+0xb20>
   199a4:	68bc      	ldr	r4, [r7, #8]
   199a6:	ae32      	add	r6, sp, #200	; 0xc8
   199a8:	f7ff fbdc 	bl	19164 <_vfprintf_r+0x9cc>
   199ac:	4bb8      	ldr	r3, [pc, #736]	; (19c90 <_vfprintf_r+0x14f8>)
   199ae:	9311      	str	r3, [sp, #68]	; 0x44
   199b0:	f7ff fa4a 	bl	18e48 <_vfprintf_r+0x6b0>
   199b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   199b6:	ab32      	add	r3, sp, #200	; 0xc8
   199b8:	1a9b      	subs	r3, r3, r2
   199ba:	930e      	str	r3, [sp, #56]	; 0x38
   199bc:	f7ff f859 	bl	18a72 <_vfprintf_r+0x2da>
   199c0:	9811      	ldr	r0, [sp, #68]	; 0x44
   199c2:	f7fe fe09 	bl	185d8 <strlen>
   199c6:	0002      	movs	r2, r0
   199c8:	900e      	str	r0, [sp, #56]	; 0x38
   199ca:	0003      	movs	r3, r0
   199cc:	f7ff f9a1 	bl	18d12 <_vfprintf_r+0x57a>
   199d0:	232d      	movs	r3, #45	; 0x2d
   199d2:	aa16      	add	r2, sp, #88	; 0x58
   199d4:	77d3      	strb	r3, [r2, #31]
   199d6:	4698      	mov	r8, r3
   199d8:	2300      	movs	r3, #0
   199da:	469a      	mov	sl, r3
   199dc:	f7ff f854 	bl	18a88 <_vfprintf_r+0x2f0>
   199e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   199e2:	9313      	str	r3, [sp, #76]	; 0x4c
   199e4:	1cda      	adds	r2, r3, #3
   199e6:	db02      	blt.n	199ee <_vfprintf_r+0x1256>
   199e8:	459a      	cmp	sl, r3
   199ea:	db00      	blt.n	199ee <_vfprintf_r+0x1256>
   199ec:	e731      	b.n	19852 <_vfprintf_r+0x10ba>
   199ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   199f0:	3b02      	subs	r3, #2
   199f2:	9312      	str	r3, [sp, #72]	; 0x48
   199f4:	222c      	movs	r2, #44	; 0x2c
   199f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   199f8:	2148      	movs	r1, #72	; 0x48
   199fa:	1e5d      	subs	r5, r3, #1
   199fc:	ab16      	add	r3, sp, #88	; 0x58
   199fe:	189b      	adds	r3, r3, r2
   19a00:	466a      	mov	r2, sp
   19a02:	1852      	adds	r2, r2, r1
   19a04:	7812      	ldrb	r2, [r2, #0]
   19a06:	951f      	str	r5, [sp, #124]	; 0x7c
   19a08:	701a      	strb	r2, [r3, #0]
   19a0a:	2d00      	cmp	r5, #0
   19a0c:	da00      	bge.n	19a10 <_vfprintf_r+0x1278>
   19a0e:	e1cb      	b.n	19da8 <_vfprintf_r+0x1610>
   19a10:	212d      	movs	r1, #45	; 0x2d
   19a12:	232b      	movs	r3, #43	; 0x2b
   19a14:	aa16      	add	r2, sp, #88	; 0x58
   19a16:	1852      	adds	r2, r2, r1
   19a18:	7013      	strb	r3, [r2, #0]
   19a1a:	2d09      	cmp	r5, #9
   19a1c:	dc00      	bgt.n	19a20 <_vfprintf_r+0x1288>
   19a1e:	e16d      	b.n	19cfc <_vfprintf_r+0x1564>
   19a20:	aa16      	add	r2, sp, #88	; 0x58
   19a22:	233b      	movs	r3, #59	; 0x3b
   19a24:	4694      	mov	ip, r2
   19a26:	4463      	add	r3, ip
   19a28:	469a      	mov	sl, r3
   19a2a:	46b1      	mov	r9, r6
   19a2c:	46a0      	mov	r8, r4
   19a2e:	4656      	mov	r6, sl
   19a30:	e000      	b.n	19a34 <_vfprintf_r+0x129c>
   19a32:	0026      	movs	r6, r4
   19a34:	0028      	movs	r0, r5
   19a36:	210a      	movs	r1, #10
   19a38:	f7fb fa0a 	bl	14e50 <__aeabi_idivmod>
   19a3c:	1e74      	subs	r4, r6, #1
   19a3e:	3130      	adds	r1, #48	; 0x30
   19a40:	7021      	strb	r1, [r4, #0]
   19a42:	0028      	movs	r0, r5
   19a44:	210a      	movs	r1, #10
   19a46:	f7fb f91d 	bl	14c84 <__divsi3>
   19a4a:	0005      	movs	r5, r0
   19a4c:	2809      	cmp	r0, #9
   19a4e:	dcf0      	bgt.n	19a32 <_vfprintf_r+0x129a>
   19a50:	0023      	movs	r3, r4
   19a52:	4644      	mov	r4, r8
   19a54:	46b0      	mov	r8, r6
   19a56:	464e      	mov	r6, r9
   19a58:	4699      	mov	r9, r3
   19a5a:	0003      	movs	r3, r0
   19a5c:	3330      	adds	r3, #48	; 0x30
   19a5e:	b2d8      	uxtb	r0, r3
   19a60:	4643      	mov	r3, r8
   19a62:	3b02      	subs	r3, #2
   19a64:	7018      	strb	r0, [r3, #0]
   19a66:	459a      	cmp	sl, r3
   19a68:	d800      	bhi.n	19a6c <_vfprintf_r+0x12d4>
   19a6a:	e1f6      	b.n	19e5a <_vfprintf_r+0x16c2>
   19a6c:	4642      	mov	r2, r8
   19a6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   19a70:	4645      	mov	r5, r8
   19a72:	1a99      	subs	r1, r3, r2
   19a74:	2301      	movs	r3, #1
   19a76:	3107      	adds	r1, #7
   19a78:	425b      	negs	r3, r3
   19a7a:	e001      	b.n	19a80 <_vfprintf_r+0x12e8>
   19a7c:	5ce8      	ldrb	r0, [r5, r3]
   19a7e:	3301      	adds	r3, #1
   19a80:	aa21      	add	r2, sp, #132	; 0x84
   19a82:	18d2      	adds	r2, r2, r3
   19a84:	70d0      	strb	r0, [r2, #3]
   19a86:	428b      	cmp	r3, r1
   19a88:	d1f8      	bne.n	19a7c <_vfprintf_r+0x12e4>
   19a8a:	a916      	add	r1, sp, #88	; 0x58
   19a8c:	468c      	mov	ip, r1
   19a8e:	222e      	movs	r2, #46	; 0x2e
   19a90:	464b      	mov	r3, r9
   19a92:	4462      	add	r2, ip
   19a94:	4694      	mov	ip, r2
   19a96:	1afb      	subs	r3, r7, r3
   19a98:	4463      	add	r3, ip
   19a9a:	aa21      	add	r2, sp, #132	; 0x84
   19a9c:	9914      	ldr	r1, [sp, #80]	; 0x50
   19a9e:	1a9b      	subs	r3, r3, r2
   19aa0:	469c      	mov	ip, r3
   19aa2:	000a      	movs	r2, r1
   19aa4:	4462      	add	r2, ip
   19aa6:	931a      	str	r3, [sp, #104]	; 0x68
   19aa8:	920e      	str	r2, [sp, #56]	; 0x38
   19aaa:	2901      	cmp	r1, #1
   19aac:	dc00      	bgt.n	19ab0 <_vfprintf_r+0x1318>
   19aae:	e170      	b.n	19d92 <_vfprintf_r+0x15fa>
   19ab0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   19ab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19ab4:	4694      	mov	ip, r2
   19ab6:	4463      	add	r3, ip
   19ab8:	001a      	movs	r2, r3
   19aba:	930e      	str	r3, [sp, #56]	; 0x38
   19abc:	43db      	mvns	r3, r3
   19abe:	17db      	asrs	r3, r3, #31
   19ac0:	401a      	ands	r2, r3
   19ac2:	2300      	movs	r3, #0
   19ac4:	9208      	str	r2, [sp, #32]
   19ac6:	9313      	str	r3, [sp, #76]	; 0x4c
   19ac8:	e6d4      	b.n	19874 <_vfprintf_r+0x10dc>
   19aca:	003a      	movs	r2, r7
   19acc:	4659      	mov	r1, fp
   19ace:	9806      	ldr	r0, [sp, #24]
   19ad0:	f002 fe48 	bl	1c764 <__sprint_r>
   19ad4:	2800      	cmp	r0, #0
   19ad6:	d001      	beq.n	19adc <_vfprintf_r+0x1344>
   19ad8:	f7ff fbee 	bl	192b8 <_vfprintf_r+0xb20>
   19adc:	68bc      	ldr	r4, [r7, #8]
   19ade:	ae32      	add	r6, sp, #200	; 0xc8
   19ae0:	e46a      	b.n	193b8 <_vfprintf_r+0xc20>
   19ae2:	4653      	mov	r3, sl
   19ae4:	2b00      	cmp	r3, #0
   19ae6:	d000      	beq.n	19aea <_vfprintf_r+0x1352>
   19ae8:	e659      	b.n	1979e <_vfprintf_r+0x1006>
   19aea:	3301      	adds	r3, #1
   19aec:	469a      	mov	sl, r3
   19aee:	e656      	b.n	1979e <_vfprintf_r+0x1006>
   19af0:	4653      	mov	r3, sl
   19af2:	9308      	str	r3, [sp, #32]
   19af4:	2b06      	cmp	r3, #6
   19af6:	d901      	bls.n	19afc <_vfprintf_r+0x1364>
   19af8:	2306      	movs	r3, #6
   19afa:	9308      	str	r3, [sp, #32]
   19afc:	9b08      	ldr	r3, [sp, #32]
   19afe:	950f      	str	r5, [sp, #60]	; 0x3c
   19b00:	930e      	str	r3, [sp, #56]	; 0x38
   19b02:	2300      	movs	r3, #0
   19b04:	4698      	mov	r8, r3
   19b06:	469a      	mov	sl, r3
   19b08:	9313      	str	r3, [sp, #76]	; 0x4c
   19b0a:	4b62      	ldr	r3, [pc, #392]	; (19c94 <_vfprintf_r+0x14fc>)
   19b0c:	9409      	str	r4, [sp, #36]	; 0x24
   19b0e:	9311      	str	r3, [sp, #68]	; 0x44
   19b10:	f7fe ffbd 	bl	18a8e <_vfprintf_r+0x2f6>
   19b14:	003a      	movs	r2, r7
   19b16:	4659      	mov	r1, fp
   19b18:	9806      	ldr	r0, [sp, #24]
   19b1a:	f002 fe23 	bl	1c764 <__sprint_r>
   19b1e:	2800      	cmp	r0, #0
   19b20:	d001      	beq.n	19b26 <_vfprintf_r+0x138e>
   19b22:	f7ff fbc9 	bl	192b8 <_vfprintf_r+0xb20>
   19b26:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19b28:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   19b2a:	68bc      	ldr	r4, [r7, #8]
   19b2c:	1a9b      	subs	r3, r3, r2
   19b2e:	ae32      	add	r6, sp, #200	; 0xc8
   19b30:	e567      	b.n	19602 <_vfprintf_r+0xe6a>
   19b32:	ab23      	add	r3, sp, #140	; 0x8c
   19b34:	931b      	str	r3, [sp, #108]	; 0x6c
   19b36:	9304      	str	r3, [sp, #16]
   19b38:	ab20      	add	r3, sp, #128	; 0x80
   19b3a:	9303      	str	r3, [sp, #12]
   19b3c:	ab1f      	add	r3, sp, #124	; 0x7c
   19b3e:	9302      	str	r3, [sp, #8]
   19b40:	4653      	mov	r3, sl
   19b42:	9301      	str	r3, [sp, #4]
   19b44:	2303      	movs	r3, #3
   19b46:	464a      	mov	r2, r9
   19b48:	9300      	str	r3, [sp, #0]
   19b4a:	9806      	ldr	r0, [sp, #24]
   19b4c:	9b08      	ldr	r3, [sp, #32]
   19b4e:	f000 fafb 	bl	1a148 <_dtoa_r>
   19b52:	0003      	movs	r3, r0
   19b54:	4453      	add	r3, sl
   19b56:	4698      	mov	r8, r3
   19b58:	4655      	mov	r5, sl
   19b5a:	9011      	str	r0, [sp, #68]	; 0x44
   19b5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19b5e:	781b      	ldrb	r3, [r3, #0]
   19b60:	2b30      	cmp	r3, #48	; 0x30
   19b62:	d002      	beq.n	19b6a <_vfprintf_r+0x13d2>
   19b64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   19b66:	4498      	add	r8, r3
   19b68:	e64e      	b.n	19808 <_vfprintf_r+0x1070>
   19b6a:	2200      	movs	r2, #0
   19b6c:	2300      	movs	r3, #0
   19b6e:	4648      	mov	r0, r9
   19b70:	9908      	ldr	r1, [sp, #32]
   19b72:	f7fd fed3 	bl	1791c <__aeabi_dcmpeq>
   19b76:	2800      	cmp	r0, #0
   19b78:	d1f4      	bne.n	19b64 <_vfprintf_r+0x13cc>
   19b7a:	2301      	movs	r3, #1
   19b7c:	1b5b      	subs	r3, r3, r5
   19b7e:	931f      	str	r3, [sp, #124]	; 0x7c
   19b80:	4498      	add	r8, r3
   19b82:	e641      	b.n	19808 <_vfprintf_r+0x1070>
   19b84:	46c1      	mov	r9, r8
   19b86:	f7ff fb1f 	bl	191c8 <_vfprintf_r+0xa30>
   19b8a:	2280      	movs	r2, #128	; 0x80
   19b8c:	0612      	lsls	r2, r2, #24
   19b8e:	4694      	mov	ip, r2
   19b90:	9b16      	ldr	r3, [sp, #88]	; 0x58
   19b92:	4699      	mov	r9, r3
   19b94:	9b15      	ldr	r3, [sp, #84]	; 0x54
   19b96:	4463      	add	r3, ip
   19b98:	9308      	str	r3, [sp, #32]
   19b9a:	232d      	movs	r3, #45	; 0x2d
   19b9c:	9310      	str	r3, [sp, #64]	; 0x40
   19b9e:	e60b      	b.n	197b8 <_vfprintf_r+0x1020>
   19ba0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   19ba2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19ba4:	4694      	mov	ip, r2
   19ba6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   19ba8:	4463      	add	r3, ip
   19baa:	930e      	str	r3, [sp, #56]	; 0x38
   19bac:	2a00      	cmp	r2, #0
   19bae:	dc00      	bgt.n	19bb2 <_vfprintf_r+0x141a>
   19bb0:	e0e3      	b.n	19d7a <_vfprintf_r+0x15e2>
   19bb2:	001a      	movs	r2, r3
   19bb4:	43db      	mvns	r3, r3
   19bb6:	17db      	asrs	r3, r3, #31
   19bb8:	401a      	ands	r2, r3
   19bba:	2367      	movs	r3, #103	; 0x67
   19bbc:	9208      	str	r2, [sp, #32]
   19bbe:	9312      	str	r3, [sp, #72]	; 0x48
   19bc0:	e658      	b.n	19874 <_vfprintf_r+0x10dc>
   19bc2:	003a      	movs	r2, r7
   19bc4:	4659      	mov	r1, fp
   19bc6:	9806      	ldr	r0, [sp, #24]
   19bc8:	f002 fdcc 	bl	1c764 <__sprint_r>
   19bcc:	2800      	cmp	r0, #0
   19bce:	d001      	beq.n	19bd4 <_vfprintf_r+0x143c>
   19bd0:	f7ff fb72 	bl	192b8 <_vfprintf_r+0xb20>
   19bd4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   19bd6:	68bc      	ldr	r4, [r7, #8]
   19bd8:	ae32      	add	r6, sp, #200	; 0xc8
   19bda:	e69d      	b.n	19918 <_vfprintf_r+0x1180>
   19bdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   19bde:	9313      	str	r3, [sp, #76]	; 0x4c
   19be0:	2b00      	cmp	r3, #0
   19be2:	dc00      	bgt.n	19be6 <_vfprintf_r+0x144e>
   19be4:	e0f2      	b.n	19dcc <_vfprintf_r+0x1634>
   19be6:	4652      	mov	r2, sl
   19be8:	2a00      	cmp	r2, #0
   19bea:	d000      	beq.n	19bee <_vfprintf_r+0x1456>
   19bec:	e0a0      	b.n	19d30 <_vfprintf_r+0x1598>
   19bee:	07e2      	lsls	r2, r4, #31
   19bf0:	d500      	bpl.n	19bf4 <_vfprintf_r+0x145c>
   19bf2:	e09d      	b.n	19d30 <_vfprintf_r+0x1598>
   19bf4:	9308      	str	r3, [sp, #32]
   19bf6:	930e      	str	r3, [sp, #56]	; 0x38
   19bf8:	e63c      	b.n	19874 <_vfprintf_r+0x10dc>
   19bfa:	ab16      	add	r3, sp, #88	; 0x58
   19bfc:	7fdb      	ldrb	r3, [r3, #31]
   19bfe:	950f      	str	r5, [sp, #60]	; 0x3c
   19c00:	4698      	mov	r8, r3
   19c02:	4653      	mov	r3, sl
   19c04:	9308      	str	r3, [sp, #32]
   19c06:	930e      	str	r3, [sp, #56]	; 0x38
   19c08:	2300      	movs	r3, #0
   19c0a:	9409      	str	r4, [sp, #36]	; 0x24
   19c0c:	469a      	mov	sl, r3
   19c0e:	9313      	str	r3, [sp, #76]	; 0x4c
   19c10:	f7fe ff37 	bl	18a82 <_vfprintf_r+0x2ea>
   19c14:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19c16:	4698      	mov	r8, r3
   19c18:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19c1a:	44a8      	add	r8, r5
   19c1c:	2b47      	cmp	r3, #71	; 0x47
   19c1e:	d000      	beq.n	19c22 <_vfprintf_r+0x148a>
   19c20:	e5f2      	b.n	19808 <_vfprintf_r+0x1070>
   19c22:	07e3      	lsls	r3, r4, #31
   19c24:	d400      	bmi.n	19c28 <_vfprintf_r+0x1490>
   19c26:	e0dc      	b.n	19de2 <_vfprintf_r+0x164a>
   19c28:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19c2a:	4698      	mov	r8, r3
   19c2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19c2e:	44a8      	add	r8, r5
   19c30:	2b46      	cmp	r3, #70	; 0x46
   19c32:	d093      	beq.n	19b5c <_vfprintf_r+0x13c4>
   19c34:	e5e8      	b.n	19808 <_vfprintf_r+0x1070>
   19c36:	ab23      	add	r3, sp, #140	; 0x8c
   19c38:	931b      	str	r3, [sp, #108]	; 0x6c
   19c3a:	9304      	str	r3, [sp, #16]
   19c3c:	ab20      	add	r3, sp, #128	; 0x80
   19c3e:	9303      	str	r3, [sp, #12]
   19c40:	ab1f      	add	r3, sp, #124	; 0x7c
   19c42:	9302      	str	r3, [sp, #8]
   19c44:	4653      	mov	r3, sl
   19c46:	9301      	str	r3, [sp, #4]
   19c48:	2303      	movs	r3, #3
   19c4a:	464a      	mov	r2, r9
   19c4c:	9300      	str	r3, [sp, #0]
   19c4e:	9806      	ldr	r0, [sp, #24]
   19c50:	9b08      	ldr	r3, [sp, #32]
   19c52:	f000 fa79 	bl	1a148 <_dtoa_r>
   19c56:	4655      	mov	r5, sl
   19c58:	9011      	str	r0, [sp, #68]	; 0x44
   19c5a:	e7e5      	b.n	19c28 <_vfprintf_r+0x1490>
   19c5c:	003a      	movs	r2, r7
   19c5e:	4659      	mov	r1, fp
   19c60:	9806      	ldr	r0, [sp, #24]
   19c62:	f002 fd7f 	bl	1c764 <__sprint_r>
   19c66:	2800      	cmp	r0, #0
   19c68:	d101      	bne.n	19c6e <_vfprintf_r+0x14d6>
   19c6a:	f7ff faab 	bl	191c4 <_vfprintf_r+0xa2c>
   19c6e:	f7ff faab 	bl	191c8 <_vfprintf_r+0xa30>
   19c72:	4642      	mov	r2, r8
   19c74:	9207      	str	r2, [sp, #28]
   19c76:	f7fe fe1b 	bl	188b0 <_vfprintf_r+0x118>
   19c7a:	4244      	negs	r4, r0
   19c7c:	3010      	adds	r0, #16
   19c7e:	db00      	blt.n	19c82 <_vfprintf_r+0x14ea>
   19c80:	e0d8      	b.n	19e34 <_vfprintf_r+0x169c>
   19c82:	4805      	ldr	r0, [pc, #20]	; (19c98 <_vfprintf_r+0x1500>)
   19c84:	2610      	movs	r6, #16
   19c86:	0005      	movs	r5, r0
   19c88:	e00c      	b.n	19ca4 <_vfprintf_r+0x150c>
   19c8a:	46c0      	nop			; (mov r8, r8)
   19c8c:	0001f450 	.word	0x0001f450
   19c90:	0001fa14 	.word	0x0001fa14
   19c94:	0001fa48 	.word	0x0001fa48
   19c98:	0001fa60 	.word	0x0001fa60
   19c9c:	3208      	adds	r2, #8
   19c9e:	3c10      	subs	r4, #16
   19ca0:	2c10      	cmp	r4, #16
   19ca2:	dd51      	ble.n	19d48 <_vfprintf_r+0x15b0>
   19ca4:	3110      	adds	r1, #16
   19ca6:	3301      	adds	r3, #1
   19ca8:	6015      	str	r5, [r2, #0]
   19caa:	6056      	str	r6, [r2, #4]
   19cac:	60b9      	str	r1, [r7, #8]
   19cae:	607b      	str	r3, [r7, #4]
   19cb0:	2b07      	cmp	r3, #7
   19cb2:	ddf3      	ble.n	19c9c <_vfprintf_r+0x1504>
   19cb4:	003a      	movs	r2, r7
   19cb6:	4659      	mov	r1, fp
   19cb8:	9806      	ldr	r0, [sp, #24]
   19cba:	f002 fd53 	bl	1c764 <__sprint_r>
   19cbe:	2800      	cmp	r0, #0
   19cc0:	d001      	beq.n	19cc6 <_vfprintf_r+0x152e>
   19cc2:	f7ff faf9 	bl	192b8 <_vfprintf_r+0xb20>
   19cc6:	68b9      	ldr	r1, [r7, #8]
   19cc8:	687b      	ldr	r3, [r7, #4]
   19cca:	aa32      	add	r2, sp, #200	; 0xc8
   19ccc:	e7e7      	b.n	19c9e <_vfprintf_r+0x1506>
   19cce:	003a      	movs	r2, r7
   19cd0:	4659      	mov	r1, fp
   19cd2:	9806      	ldr	r0, [sp, #24]
   19cd4:	f002 fd46 	bl	1c764 <__sprint_r>
   19cd8:	2800      	cmp	r0, #0
   19cda:	d001      	beq.n	19ce0 <_vfprintf_r+0x1548>
   19cdc:	f7ff faec 	bl	192b8 <_vfprintf_r+0xb20>
   19ce0:	981f      	ldr	r0, [sp, #124]	; 0x7c
   19ce2:	68b9      	ldr	r1, [r7, #8]
   19ce4:	687b      	ldr	r3, [r7, #4]
   19ce6:	aa32      	add	r2, sp, #200	; 0xc8
   19ce8:	e62e      	b.n	19948 <_vfprintf_r+0x11b0>
   19cea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   19cec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19cee:	4694      	mov	ip, r2
   19cf0:	4463      	add	r3, ip
   19cf2:	001a      	movs	r2, r3
   19cf4:	930e      	str	r3, [sp, #56]	; 0x38
   19cf6:	e75d      	b.n	19bb4 <_vfprintf_r+0x141c>
   19cf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19cfa:	e599      	b.n	19830 <_vfprintf_r+0x1098>
   19cfc:	212e      	movs	r1, #46	; 0x2e
   19cfe:	2330      	movs	r3, #48	; 0x30
   19d00:	aa16      	add	r2, sp, #88	; 0x58
   19d02:	1852      	adds	r2, r2, r1
   19d04:	7013      	strb	r3, [r2, #0]
   19d06:	002b      	movs	r3, r5
   19d08:	aa16      	add	r2, sp, #88	; 0x58
   19d0a:	3101      	adds	r1, #1
   19d0c:	3330      	adds	r3, #48	; 0x30
   19d0e:	1852      	adds	r2, r2, r1
   19d10:	7013      	strb	r3, [r2, #0]
   19d12:	ab22      	add	r3, sp, #136	; 0x88
   19d14:	e6c1      	b.n	19a9a <_vfprintf_r+0x1302>
   19d16:	9b15      	ldr	r3, [sp, #84]	; 0x54
   19d18:	2b00      	cmp	r3, #0
   19d1a:	db52      	blt.n	19dc2 <_vfprintf_r+0x162a>
   19d1c:	ab16      	add	r3, sp, #88	; 0x58
   19d1e:	7fdb      	ldrb	r3, [r3, #31]
   19d20:	4698      	mov	r8, r3
   19d22:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19d24:	2b47      	cmp	r3, #71	; 0x47
   19d26:	dc48      	bgt.n	19dba <_vfprintf_r+0x1622>
   19d28:	4b4e      	ldr	r3, [pc, #312]	; (19e64 <_vfprintf_r+0x16cc>)
   19d2a:	9311      	str	r3, [sp, #68]	; 0x44
   19d2c:	f7ff f88c 	bl	18e48 <_vfprintf_r+0x6b0>
   19d30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   19d32:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19d34:	4694      	mov	ip, r2
   19d36:	4463      	add	r3, ip
   19d38:	4453      	add	r3, sl
   19d3a:	001a      	movs	r2, r3
   19d3c:	930e      	str	r3, [sp, #56]	; 0x38
   19d3e:	43db      	mvns	r3, r3
   19d40:	17db      	asrs	r3, r3, #31
   19d42:	401a      	ands	r2, r3
   19d44:	9208      	str	r2, [sp, #32]
   19d46:	e595      	b.n	19874 <_vfprintf_r+0x10dc>
   19d48:	46a9      	mov	r9, r5
   19d4a:	4648      	mov	r0, r9
   19d4c:	1909      	adds	r1, r1, r4
   19d4e:	3301      	adds	r3, #1
   19d50:	6010      	str	r0, [r2, #0]
   19d52:	6054      	str	r4, [r2, #4]
   19d54:	60b9      	str	r1, [r7, #8]
   19d56:	3208      	adds	r2, #8
   19d58:	607b      	str	r3, [r7, #4]
   19d5a:	2b07      	cmp	r3, #7
   19d5c:	dc00      	bgt.n	19d60 <_vfprintf_r+0x15c8>
   19d5e:	e5f6      	b.n	1994e <_vfprintf_r+0x11b6>
   19d60:	003a      	movs	r2, r7
   19d62:	4659      	mov	r1, fp
   19d64:	9806      	ldr	r0, [sp, #24]
   19d66:	f002 fcfd 	bl	1c764 <__sprint_r>
   19d6a:	2800      	cmp	r0, #0
   19d6c:	d001      	beq.n	19d72 <_vfprintf_r+0x15da>
   19d6e:	f7ff faa3 	bl	192b8 <_vfprintf_r+0xb20>
   19d72:	68b9      	ldr	r1, [r7, #8]
   19d74:	687b      	ldr	r3, [r7, #4]
   19d76:	aa32      	add	r2, sp, #200	; 0xc8
   19d78:	e5e9      	b.n	1994e <_vfprintf_r+0x11b6>
   19d7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19d7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   19d7e:	1a98      	subs	r0, r3, r2
   19d80:	1c43      	adds	r3, r0, #1
   19d82:	001a      	movs	r2, r3
   19d84:	930e      	str	r3, [sp, #56]	; 0x38
   19d86:	e715      	b.n	19bb4 <_vfprintf_r+0x141c>
   19d88:	4a37      	ldr	r2, [pc, #220]	; (19e68 <_vfprintf_r+0x16d0>)
   19d8a:	687b      	ldr	r3, [r7, #4]
   19d8c:	4691      	mov	r9, r2
   19d8e:	f7ff fbf5 	bl	1957c <_vfprintf_r+0xde4>
   19d92:	2301      	movs	r3, #1
   19d94:	4023      	ands	r3, r4
   19d96:	9313      	str	r3, [sp, #76]	; 0x4c
   19d98:	d000      	beq.n	19d9c <_vfprintf_r+0x1604>
   19d9a:	e689      	b.n	19ab0 <_vfprintf_r+0x1318>
   19d9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19d9e:	43d3      	mvns	r3, r2
   19da0:	17db      	asrs	r3, r3, #31
   19da2:	401a      	ands	r2, r3
   19da4:	9208      	str	r2, [sp, #32]
   19da6:	e565      	b.n	19874 <_vfprintf_r+0x10dc>
   19da8:	2301      	movs	r3, #1
   19daa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   19dac:	391b      	subs	r1, #27
   19dae:	1a9d      	subs	r5, r3, r2
   19db0:	aa16      	add	r2, sp, #88	; 0x58
   19db2:	332c      	adds	r3, #44	; 0x2c
   19db4:	1852      	adds	r2, r2, r1
   19db6:	7013      	strb	r3, [r2, #0]
   19db8:	e62f      	b.n	19a1a <_vfprintf_r+0x1282>
   19dba:	4b2c      	ldr	r3, [pc, #176]	; (19e6c <_vfprintf_r+0x16d4>)
   19dbc:	9311      	str	r3, [sp, #68]	; 0x44
   19dbe:	f7ff f843 	bl	18e48 <_vfprintf_r+0x6b0>
   19dc2:	232d      	movs	r3, #45	; 0x2d
   19dc4:	aa16      	add	r2, sp, #88	; 0x58
   19dc6:	77d3      	strb	r3, [r2, #31]
   19dc8:	4698      	mov	r8, r3
   19dca:	e7aa      	b.n	19d22 <_vfprintf_r+0x158a>
   19dcc:	4653      	mov	r3, sl
   19dce:	2b00      	cmp	r3, #0
   19dd0:	d101      	bne.n	19dd6 <_vfprintf_r+0x163e>
   19dd2:	07e3      	lsls	r3, r4, #31
   19dd4:	d503      	bpl.n	19dde <_vfprintf_r+0x1646>
   19dd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19dd8:	1c58      	adds	r0, r3, #1
   19dda:	0003      	movs	r3, r0
   19ddc:	e7ac      	b.n	19d38 <_vfprintf_r+0x15a0>
   19dde:	2301      	movs	r3, #1
   19de0:	e708      	b.n	19bf4 <_vfprintf_r+0x145c>
   19de2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19de4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   19de6:	1a9b      	subs	r3, r3, r2
   19de8:	9314      	str	r3, [sp, #80]	; 0x50
   19dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19dec:	2b47      	cmp	r3, #71	; 0x47
   19dee:	d100      	bne.n	19df2 <_vfprintf_r+0x165a>
   19df0:	e5f6      	b.n	199e0 <_vfprintf_r+0x1248>
   19df2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   19df4:	9313      	str	r3, [sp, #76]	; 0x4c
   19df6:	e5fd      	b.n	199f4 <_vfprintf_r+0x125c>
   19df8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19dfa:	1d1d      	adds	r5, r3, #4
   19dfc:	681b      	ldr	r3, [r3, #0]
   19dfe:	46a8      	mov	r8, r5
   19e00:	469a      	mov	sl, r3
   19e02:	2b00      	cmp	r3, #0
   19e04:	db0a      	blt.n	19e1c <_vfprintf_r+0x1684>
   19e06:	4645      	mov	r5, r8
   19e08:	9b07      	ldr	r3, [sp, #28]
   19e0a:	950f      	str	r5, [sp, #60]	; 0x3c
   19e0c:	785b      	ldrb	r3, [r3, #1]
   19e0e:	9207      	str	r2, [sp, #28]
   19e10:	f7fe fd4b 	bl	188aa <_vfprintf_r+0x112>
   19e14:	ab16      	add	r3, sp, #88	; 0x58
   19e16:	77d8      	strb	r0, [r3, #31]
   19e18:	f7ff f830 	bl	18e7c <_vfprintf_r+0x6e4>
   19e1c:	2301      	movs	r3, #1
   19e1e:	425b      	negs	r3, r3
   19e20:	469a      	mov	sl, r3
   19e22:	e7f0      	b.n	19e06 <_vfprintf_r+0x166e>
   19e24:	ab16      	add	r3, sp, #88	; 0x58
   19e26:	77d8      	strb	r0, [r3, #31]
   19e28:	f7fe ff27 	bl	18c7a <_vfprintf_r+0x4e2>
   19e2c:	ab16      	add	r3, sp, #88	; 0x58
   19e2e:	77d8      	strb	r0, [r3, #31]
   19e30:	f7fe fdce 	bl	189d0 <_vfprintf_r+0x238>
   19e34:	480c      	ldr	r0, [pc, #48]	; (19e68 <_vfprintf_r+0x16d0>)
   19e36:	4681      	mov	r9, r0
   19e38:	e787      	b.n	19d4a <_vfprintf_r+0x15b2>
   19e3a:	ab16      	add	r3, sp, #88	; 0x58
   19e3c:	77d8      	strb	r0, [r3, #31]
   19e3e:	f7ff f829 	bl	18e94 <_vfprintf_r+0x6fc>
   19e42:	ab16      	add	r3, sp, #88	; 0x58
   19e44:	77d8      	strb	r0, [r3, #31]
   19e46:	f7fe ffc3 	bl	18dd0 <_vfprintf_r+0x638>
   19e4a:	ab16      	add	r3, sp, #88	; 0x58
   19e4c:	77d8      	strb	r0, [r3, #31]
   19e4e:	f7fe ffa5 	bl	18d9c <_vfprintf_r+0x604>
   19e52:	ab16      	add	r3, sp, #88	; 0x58
   19e54:	77d8      	strb	r0, [r3, #31]
   19e56:	f7fe feaf 	bl	18bb8 <_vfprintf_r+0x420>
   19e5a:	aa16      	add	r2, sp, #88	; 0x58
   19e5c:	232e      	movs	r3, #46	; 0x2e
   19e5e:	4694      	mov	ip, r2
   19e60:	4463      	add	r3, ip
   19e62:	e61a      	b.n	19a9a <_vfprintf_r+0x1302>
   19e64:	0001fa18 	.word	0x0001fa18
   19e68:	0001fa60 	.word	0x0001fa60
   19e6c:	0001fa1c 	.word	0x0001fa1c

00019e70 <__sbprintf>:
   19e70:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e72:	0015      	movs	r5, r2
   19e74:	2202      	movs	r2, #2
   19e76:	4c1e      	ldr	r4, [pc, #120]	; (19ef0 <__sbprintf+0x80>)
   19e78:	001f      	movs	r7, r3
   19e7a:	898b      	ldrh	r3, [r1, #12]
   19e7c:	44a5      	add	sp, r4
   19e7e:	4393      	bics	r3, r2
   19e80:	466a      	mov	r2, sp
   19e82:	8193      	strh	r3, [r2, #12]
   19e84:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   19e86:	0006      	movs	r6, r0
   19e88:	9319      	str	r3, [sp, #100]	; 0x64
   19e8a:	89cb      	ldrh	r3, [r1, #14]
   19e8c:	a816      	add	r0, sp, #88	; 0x58
   19e8e:	81d3      	strh	r3, [r2, #14]
   19e90:	69cb      	ldr	r3, [r1, #28]
   19e92:	000c      	movs	r4, r1
   19e94:	9307      	str	r3, [sp, #28]
   19e96:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   19e98:	9309      	str	r3, [sp, #36]	; 0x24
   19e9a:	ab1a      	add	r3, sp, #104	; 0x68
   19e9c:	9300      	str	r3, [sp, #0]
   19e9e:	9304      	str	r3, [sp, #16]
   19ea0:	2380      	movs	r3, #128	; 0x80
   19ea2:	00db      	lsls	r3, r3, #3
   19ea4:	9302      	str	r3, [sp, #8]
   19ea6:	9305      	str	r3, [sp, #20]
   19ea8:	2300      	movs	r3, #0
   19eaa:	9306      	str	r3, [sp, #24]
   19eac:	f001 fd64 	bl	1b978 <__retarget_lock_init_recursive>
   19eb0:	002a      	movs	r2, r5
   19eb2:	003b      	movs	r3, r7
   19eb4:	4669      	mov	r1, sp
   19eb6:	0030      	movs	r0, r6
   19eb8:	f7fe fc6e 	bl	18798 <_vfprintf_r>
   19ebc:	1e05      	subs	r5, r0, #0
   19ebe:	db05      	blt.n	19ecc <__sbprintf+0x5c>
   19ec0:	4669      	mov	r1, sp
   19ec2:	0030      	movs	r0, r6
   19ec4:	f001 f9ac 	bl	1b220 <_fflush_r>
   19ec8:	2800      	cmp	r0, #0
   19eca:	d10e      	bne.n	19eea <__sbprintf+0x7a>
   19ecc:	466b      	mov	r3, sp
   19ece:	899b      	ldrh	r3, [r3, #12]
   19ed0:	065b      	lsls	r3, r3, #25
   19ed2:	d503      	bpl.n	19edc <__sbprintf+0x6c>
   19ed4:	2240      	movs	r2, #64	; 0x40
   19ed6:	89a3      	ldrh	r3, [r4, #12]
   19ed8:	4313      	orrs	r3, r2
   19eda:	81a3      	strh	r3, [r4, #12]
   19edc:	9816      	ldr	r0, [sp, #88]	; 0x58
   19ede:	f001 fd4d 	bl	1b97c <__retarget_lock_close_recursive>
   19ee2:	0028      	movs	r0, r5
   19ee4:	4b03      	ldr	r3, [pc, #12]	; (19ef4 <__sbprintf+0x84>)
   19ee6:	449d      	add	sp, r3
   19ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19eea:	2501      	movs	r5, #1
   19eec:	426d      	negs	r5, r5
   19eee:	e7ed      	b.n	19ecc <__sbprintf+0x5c>
   19ef0:	fffffb94 	.word	0xfffffb94
   19ef4:	0000046c 	.word	0x0000046c

00019ef8 <__swsetup_r>:
   19ef8:	4b33      	ldr	r3, [pc, #204]	; (19fc8 <__swsetup_r+0xd0>)
   19efa:	b570      	push	{r4, r5, r6, lr}
   19efc:	0005      	movs	r5, r0
   19efe:	6818      	ldr	r0, [r3, #0]
   19f00:	000c      	movs	r4, r1
   19f02:	2800      	cmp	r0, #0
   19f04:	d002      	beq.n	19f0c <__swsetup_r+0x14>
   19f06:	6b83      	ldr	r3, [r0, #56]	; 0x38
   19f08:	2b00      	cmp	r3, #0
   19f0a:	d03c      	beq.n	19f86 <__swsetup_r+0x8e>
   19f0c:	230c      	movs	r3, #12
   19f0e:	5ee2      	ldrsh	r2, [r4, r3]
   19f10:	b293      	uxth	r3, r2
   19f12:	0719      	lsls	r1, r3, #28
   19f14:	d50d      	bpl.n	19f32 <__swsetup_r+0x3a>
   19f16:	6921      	ldr	r1, [r4, #16]
   19f18:	2900      	cmp	r1, #0
   19f1a:	d015      	beq.n	19f48 <__swsetup_r+0x50>
   19f1c:	07da      	lsls	r2, r3, #31
   19f1e:	d521      	bpl.n	19f64 <__swsetup_r+0x6c>
   19f20:	2300      	movs	r3, #0
   19f22:	60a3      	str	r3, [r4, #8]
   19f24:	6963      	ldr	r3, [r4, #20]
   19f26:	2000      	movs	r0, #0
   19f28:	425b      	negs	r3, r3
   19f2a:	61a3      	str	r3, [r4, #24]
   19f2c:	2900      	cmp	r1, #0
   19f2e:	d021      	beq.n	19f74 <__swsetup_r+0x7c>
   19f30:	bd70      	pop	{r4, r5, r6, pc}
   19f32:	06d9      	lsls	r1, r3, #27
   19f34:	d53f      	bpl.n	19fb6 <__swsetup_r+0xbe>
   19f36:	075b      	lsls	r3, r3, #29
   19f38:	d428      	bmi.n	19f8c <__swsetup_r+0x94>
   19f3a:	6921      	ldr	r1, [r4, #16]
   19f3c:	2308      	movs	r3, #8
   19f3e:	4313      	orrs	r3, r2
   19f40:	81a3      	strh	r3, [r4, #12]
   19f42:	b29b      	uxth	r3, r3
   19f44:	2900      	cmp	r1, #0
   19f46:	d1e9      	bne.n	19f1c <__swsetup_r+0x24>
   19f48:	22a0      	movs	r2, #160	; 0xa0
   19f4a:	2080      	movs	r0, #128	; 0x80
   19f4c:	0092      	lsls	r2, r2, #2
   19f4e:	0080      	lsls	r0, r0, #2
   19f50:	401a      	ands	r2, r3
   19f52:	4282      	cmp	r2, r0
   19f54:	d0e2      	beq.n	19f1c <__swsetup_r+0x24>
   19f56:	0021      	movs	r1, r4
   19f58:	0028      	movs	r0, r5
   19f5a:	f001 fd45 	bl	1b9e8 <__smakebuf_r>
   19f5e:	89a3      	ldrh	r3, [r4, #12]
   19f60:	6921      	ldr	r1, [r4, #16]
   19f62:	e7db      	b.n	19f1c <__swsetup_r+0x24>
   19f64:	2200      	movs	r2, #0
   19f66:	079b      	lsls	r3, r3, #30
   19f68:	d400      	bmi.n	19f6c <__swsetup_r+0x74>
   19f6a:	6962      	ldr	r2, [r4, #20]
   19f6c:	60a2      	str	r2, [r4, #8]
   19f6e:	2000      	movs	r0, #0
   19f70:	2900      	cmp	r1, #0
   19f72:	d1dd      	bne.n	19f30 <__swsetup_r+0x38>
   19f74:	220c      	movs	r2, #12
   19f76:	5ea3      	ldrsh	r3, [r4, r2]
   19f78:	061a      	lsls	r2, r3, #24
   19f7a:	d5d9      	bpl.n	19f30 <__swsetup_r+0x38>
   19f7c:	2240      	movs	r2, #64	; 0x40
   19f7e:	4313      	orrs	r3, r2
   19f80:	81a3      	strh	r3, [r4, #12]
   19f82:	3801      	subs	r0, #1
   19f84:	e7d4      	b.n	19f30 <__swsetup_r+0x38>
   19f86:	f001 f9a5 	bl	1b2d4 <__sinit>
   19f8a:	e7bf      	b.n	19f0c <__swsetup_r+0x14>
   19f8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   19f8e:	2900      	cmp	r1, #0
   19f90:	d00a      	beq.n	19fa8 <__swsetup_r+0xb0>
   19f92:	0023      	movs	r3, r4
   19f94:	3340      	adds	r3, #64	; 0x40
   19f96:	4299      	cmp	r1, r3
   19f98:	d004      	beq.n	19fa4 <__swsetup_r+0xac>
   19f9a:	0028      	movs	r0, r5
   19f9c:	f001 fa44 	bl	1b428 <_free_r>
   19fa0:	230c      	movs	r3, #12
   19fa2:	5ee2      	ldrsh	r2, [r4, r3]
   19fa4:	2300      	movs	r3, #0
   19fa6:	6323      	str	r3, [r4, #48]	; 0x30
   19fa8:	2324      	movs	r3, #36	; 0x24
   19faa:	439a      	bics	r2, r3
   19fac:	2300      	movs	r3, #0
   19fae:	6921      	ldr	r1, [r4, #16]
   19fb0:	6063      	str	r3, [r4, #4]
   19fb2:	6021      	str	r1, [r4, #0]
   19fb4:	e7c2      	b.n	19f3c <__swsetup_r+0x44>
   19fb6:	2309      	movs	r3, #9
   19fb8:	602b      	str	r3, [r5, #0]
   19fba:	2340      	movs	r3, #64	; 0x40
   19fbc:	2001      	movs	r0, #1
   19fbe:	431a      	orrs	r2, r3
   19fc0:	81a2      	strh	r2, [r4, #12]
   19fc2:	4240      	negs	r0, r0
   19fc4:	e7b4      	b.n	19f30 <__swsetup_r+0x38>
   19fc6:	46c0      	nop			; (mov r8, r8)
   19fc8:	200000d8 	.word	0x200000d8

00019fcc <register_fini>:
   19fcc:	4b03      	ldr	r3, [pc, #12]	; (19fdc <register_fini+0x10>)
   19fce:	b510      	push	{r4, lr}
   19fd0:	2b00      	cmp	r3, #0
   19fd2:	d002      	beq.n	19fda <register_fini+0xe>
   19fd4:	4802      	ldr	r0, [pc, #8]	; (19fe0 <register_fini+0x14>)
   19fd6:	f000 f805 	bl	19fe4 <atexit>
   19fda:	bd10      	pop	{r4, pc}
   19fdc:	00000000 	.word	0x00000000
   19fe0:	0001b355 	.word	0x0001b355

00019fe4 <atexit>:
   19fe4:	b510      	push	{r4, lr}
   19fe6:	0001      	movs	r1, r0
   19fe8:	2300      	movs	r3, #0
   19fea:	2200      	movs	r2, #0
   19fec:	2000      	movs	r0, #0
   19fee:	f002 fc43 	bl	1c878 <__register_exitproc>
   19ff2:	bd10      	pop	{r4, pc}

00019ff4 <quorem>:
   19ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
   19ff6:	4645      	mov	r5, r8
   19ff8:	4680      	mov	r8, r0
   19ffa:	46de      	mov	lr, fp
   19ffc:	4657      	mov	r7, sl
   19ffe:	464e      	mov	r6, r9
   1a000:	4642      	mov	r2, r8
   1a002:	b5e0      	push	{r5, r6, r7, lr}
   1a004:	690c      	ldr	r4, [r1, #16]
   1a006:	6912      	ldr	r2, [r2, #16]
   1a008:	b085      	sub	sp, #20
   1a00a:	000b      	movs	r3, r1
   1a00c:	9102      	str	r1, [sp, #8]
   1a00e:	2000      	movs	r0, #0
   1a010:	4294      	cmp	r4, r2
   1a012:	dd00      	ble.n	1a016 <quorem+0x22>
   1a014:	e090      	b.n	1a138 <quorem+0x144>
   1a016:	2214      	movs	r2, #20
   1a018:	4694      	mov	ip, r2
   1a01a:	4463      	add	r3, ip
   1a01c:	4699      	mov	r9, r3
   1a01e:	464a      	mov	r2, r9
   1a020:	3c01      	subs	r4, #1
   1a022:	00a3      	lsls	r3, r4, #2
   1a024:	18d6      	adds	r6, r2, r3
   1a026:	2214      	movs	r2, #20
   1a028:	4442      	add	r2, r8
   1a02a:	4693      	mov	fp, r2
   1a02c:	449b      	add	fp, r3
   1a02e:	6833      	ldr	r3, [r6, #0]
   1a030:	0015      	movs	r5, r2
   1a032:	1c59      	adds	r1, r3, #1
   1a034:	465b      	mov	r3, fp
   1a036:	6818      	ldr	r0, [r3, #0]
   1a038:	9201      	str	r2, [sp, #4]
   1a03a:	f7fa fd99 	bl	14b70 <__udivsi3>
   1a03e:	1e03      	subs	r3, r0, #0
   1a040:	9000      	str	r0, [sp, #0]
   1a042:	d042      	beq.n	1a0ca <quorem+0xd6>
   1a044:	0029      	movs	r1, r5
   1a046:	2700      	movs	r7, #0
   1a048:	464d      	mov	r5, r9
   1a04a:	2000      	movs	r0, #0
   1a04c:	46b1      	mov	r9, r6
   1a04e:	46a2      	mov	sl, r4
   1a050:	003e      	movs	r6, r7
   1a052:	0004      	movs	r4, r0
   1a054:	469c      	mov	ip, r3
   1a056:	002f      	movs	r7, r5
   1a058:	0008      	movs	r0, r1
   1a05a:	9503      	str	r5, [sp, #12]
   1a05c:	4663      	mov	r3, ip
   1a05e:	cf04      	ldmia	r7!, {r2}
   1a060:	0415      	lsls	r5, r2, #16
   1a062:	0c2d      	lsrs	r5, r5, #16
   1a064:	435d      	muls	r5, r3
   1a066:	0c12      	lsrs	r2, r2, #16
   1a068:	435a      	muls	r2, r3
   1a06a:	19ad      	adds	r5, r5, r6
   1a06c:	0c2b      	lsrs	r3, r5, #16
   1a06e:	18d2      	adds	r2, r2, r3
   1a070:	6803      	ldr	r3, [r0, #0]
   1a072:	042d      	lsls	r5, r5, #16
   1a074:	0419      	lsls	r1, r3, #16
   1a076:	0c09      	lsrs	r1, r1, #16
   1a078:	1909      	adds	r1, r1, r4
   1a07a:	0c16      	lsrs	r6, r2, #16
   1a07c:	0c2d      	lsrs	r5, r5, #16
   1a07e:	0412      	lsls	r2, r2, #16
   1a080:	1b49      	subs	r1, r1, r5
   1a082:	0c12      	lsrs	r2, r2, #16
   1a084:	0c1b      	lsrs	r3, r3, #16
   1a086:	1a9b      	subs	r3, r3, r2
   1a088:	140a      	asrs	r2, r1, #16
   1a08a:	189b      	adds	r3, r3, r2
   1a08c:	0409      	lsls	r1, r1, #16
   1a08e:	141c      	asrs	r4, r3, #16
   1a090:	0c09      	lsrs	r1, r1, #16
   1a092:	041b      	lsls	r3, r3, #16
   1a094:	4319      	orrs	r1, r3
   1a096:	c002      	stmia	r0!, {r1}
   1a098:	45b9      	cmp	r9, r7
   1a09a:	d2df      	bcs.n	1a05c <quorem+0x68>
   1a09c:	9b03      	ldr	r3, [sp, #12]
   1a09e:	464e      	mov	r6, r9
   1a0a0:	4699      	mov	r9, r3
   1a0a2:	465b      	mov	r3, fp
   1a0a4:	681b      	ldr	r3, [r3, #0]
   1a0a6:	4654      	mov	r4, sl
   1a0a8:	2b00      	cmp	r3, #0
   1a0aa:	d10e      	bne.n	1a0ca <quorem+0xd6>
   1a0ac:	465b      	mov	r3, fp
   1a0ae:	9a01      	ldr	r2, [sp, #4]
   1a0b0:	3b04      	subs	r3, #4
   1a0b2:	429a      	cmp	r2, r3
   1a0b4:	d304      	bcc.n	1a0c0 <quorem+0xcc>
   1a0b6:	e006      	b.n	1a0c6 <quorem+0xd2>
   1a0b8:	3b04      	subs	r3, #4
   1a0ba:	3c01      	subs	r4, #1
   1a0bc:	429a      	cmp	r2, r3
   1a0be:	d202      	bcs.n	1a0c6 <quorem+0xd2>
   1a0c0:	6819      	ldr	r1, [r3, #0]
   1a0c2:	2900      	cmp	r1, #0
   1a0c4:	d0f8      	beq.n	1a0b8 <quorem+0xc4>
   1a0c6:	4643      	mov	r3, r8
   1a0c8:	611c      	str	r4, [r3, #16]
   1a0ca:	9902      	ldr	r1, [sp, #8]
   1a0cc:	4640      	mov	r0, r8
   1a0ce:	f001 ffad 	bl	1c02c <__mcmp>
   1a0d2:	2800      	cmp	r0, #0
   1a0d4:	db2f      	blt.n	1a136 <quorem+0x142>
   1a0d6:	464f      	mov	r7, r9
   1a0d8:	2000      	movs	r0, #0
   1a0da:	9b00      	ldr	r3, [sp, #0]
   1a0dc:	9d01      	ldr	r5, [sp, #4]
   1a0de:	3301      	adds	r3, #1
   1a0e0:	9300      	str	r3, [sp, #0]
   1a0e2:	682b      	ldr	r3, [r5, #0]
   1a0e4:	cf02      	ldmia	r7!, {r1}
   1a0e6:	041a      	lsls	r2, r3, #16
   1a0e8:	0c12      	lsrs	r2, r2, #16
   1a0ea:	1810      	adds	r0, r2, r0
   1a0ec:	040a      	lsls	r2, r1, #16
   1a0ee:	0c12      	lsrs	r2, r2, #16
   1a0f0:	1a82      	subs	r2, r0, r2
   1a0f2:	0c09      	lsrs	r1, r1, #16
   1a0f4:	0c1b      	lsrs	r3, r3, #16
   1a0f6:	1a5b      	subs	r3, r3, r1
   1a0f8:	1411      	asrs	r1, r2, #16
   1a0fa:	185b      	adds	r3, r3, r1
   1a0fc:	0412      	lsls	r2, r2, #16
   1a0fe:	1418      	asrs	r0, r3, #16
   1a100:	0c12      	lsrs	r2, r2, #16
   1a102:	041b      	lsls	r3, r3, #16
   1a104:	4313      	orrs	r3, r2
   1a106:	c508      	stmia	r5!, {r3}
   1a108:	42be      	cmp	r6, r7
   1a10a:	d2ea      	bcs.n	1a0e2 <quorem+0xee>
   1a10c:	9901      	ldr	r1, [sp, #4]
   1a10e:	00a3      	lsls	r3, r4, #2
   1a110:	468c      	mov	ip, r1
   1a112:	4463      	add	r3, ip
   1a114:	681a      	ldr	r2, [r3, #0]
   1a116:	2a00      	cmp	r2, #0
   1a118:	d10d      	bne.n	1a136 <quorem+0x142>
   1a11a:	3b04      	subs	r3, #4
   1a11c:	000a      	movs	r2, r1
   1a11e:	4299      	cmp	r1, r3
   1a120:	d304      	bcc.n	1a12c <quorem+0x138>
   1a122:	e006      	b.n	1a132 <quorem+0x13e>
   1a124:	3b04      	subs	r3, #4
   1a126:	3c01      	subs	r4, #1
   1a128:	429a      	cmp	r2, r3
   1a12a:	d202      	bcs.n	1a132 <quorem+0x13e>
   1a12c:	6819      	ldr	r1, [r3, #0]
   1a12e:	2900      	cmp	r1, #0
   1a130:	d0f8      	beq.n	1a124 <quorem+0x130>
   1a132:	4643      	mov	r3, r8
   1a134:	611c      	str	r4, [r3, #16]
   1a136:	9800      	ldr	r0, [sp, #0]
   1a138:	b005      	add	sp, #20
   1a13a:	bc3c      	pop	{r2, r3, r4, r5}
   1a13c:	4690      	mov	r8, r2
   1a13e:	4699      	mov	r9, r3
   1a140:	46a2      	mov	sl, r4
   1a142:	46ab      	mov	fp, r5
   1a144:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a146:	46c0      	nop			; (mov r8, r8)

0001a148 <_dtoa_r>:
   1a148:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a14a:	4657      	mov	r7, sl
   1a14c:	464e      	mov	r6, r9
   1a14e:	4645      	mov	r5, r8
   1a150:	46de      	mov	lr, fp
   1a152:	b5e0      	push	{r5, r6, r7, lr}
   1a154:	6c01      	ldr	r1, [r0, #64]	; 0x40
   1a156:	b099      	sub	sp, #100	; 0x64
   1a158:	4682      	mov	sl, r0
   1a15a:	001d      	movs	r5, r3
   1a15c:	0016      	movs	r6, r2
   1a15e:	001f      	movs	r7, r3
   1a160:	2900      	cmp	r1, #0
   1a162:	d009      	beq.n	1a178 <_dtoa_r+0x30>
   1a164:	2301      	movs	r3, #1
   1a166:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1a168:	4093      	lsls	r3, r2
   1a16a:	604a      	str	r2, [r1, #4]
   1a16c:	608b      	str	r3, [r1, #8]
   1a16e:	f001 fd51 	bl	1bc14 <_Bfree>
   1a172:	2300      	movs	r3, #0
   1a174:	4652      	mov	r2, sl
   1a176:	6413      	str	r3, [r2, #64]	; 0x40
   1a178:	46b8      	mov	r8, r7
   1a17a:	2f00      	cmp	r7, #0
   1a17c:	db37      	blt.n	1a1ee <_dtoa_r+0xa6>
   1a17e:	2300      	movs	r3, #0
   1a180:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1a182:	6013      	str	r3, [r2, #0]
   1a184:	4642      	mov	r2, r8
   1a186:	4bd6      	ldr	r3, [pc, #856]	; (1a4e0 <_dtoa_r+0x398>)
   1a188:	401a      	ands	r2, r3
   1a18a:	429a      	cmp	r2, r3
   1a18c:	d018      	beq.n	1a1c0 <_dtoa_r+0x78>
   1a18e:	2200      	movs	r2, #0
   1a190:	2300      	movs	r3, #0
   1a192:	0030      	movs	r0, r6
   1a194:	0039      	movs	r1, r7
   1a196:	f7fd fbc1 	bl	1791c <__aeabi_dcmpeq>
   1a19a:	2800      	cmp	r0, #0
   1a19c:	d02f      	beq.n	1a1fe <_dtoa_r+0xb6>
   1a19e:	2301      	movs	r3, #1
   1a1a0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1a1a2:	6013      	str	r3, [r2, #0]
   1a1a4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a1a6:	2b00      	cmp	r3, #0
   1a1a8:	d100      	bne.n	1a1ac <_dtoa_r+0x64>
   1a1aa:	e22a      	b.n	1a602 <_dtoa_r+0x4ba>
   1a1ac:	48cd      	ldr	r0, [pc, #820]	; (1a4e4 <_dtoa_r+0x39c>)
   1a1ae:	6018      	str	r0, [r3, #0]
   1a1b0:	3801      	subs	r0, #1
   1a1b2:	b019      	add	sp, #100	; 0x64
   1a1b4:	bc3c      	pop	{r2, r3, r4, r5}
   1a1b6:	4690      	mov	r8, r2
   1a1b8:	4699      	mov	r9, r3
   1a1ba:	46a2      	mov	sl, r4
   1a1bc:	46ab      	mov	fp, r5
   1a1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a1c0:	4bc9      	ldr	r3, [pc, #804]	; (1a4e8 <_dtoa_r+0x3a0>)
   1a1c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1a1c4:	6013      	str	r3, [r2, #0]
   1a1c6:	2e00      	cmp	r6, #0
   1a1c8:	d10b      	bne.n	1a1e2 <_dtoa_r+0x9a>
   1a1ca:	4643      	mov	r3, r8
   1a1cc:	0318      	lsls	r0, r3, #12
   1a1ce:	d108      	bne.n	1a1e2 <_dtoa_r+0x9a>
   1a1d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a1d2:	48c6      	ldr	r0, [pc, #792]	; (1a4ec <_dtoa_r+0x3a4>)
   1a1d4:	2b00      	cmp	r3, #0
   1a1d6:	d0ec      	beq.n	1a1b2 <_dtoa_r+0x6a>
   1a1d8:	0003      	movs	r3, r0
   1a1da:	3308      	adds	r3, #8
   1a1dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1a1de:	6013      	str	r3, [r2, #0]
   1a1e0:	e7e7      	b.n	1a1b2 <_dtoa_r+0x6a>
   1a1e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a1e4:	48c2      	ldr	r0, [pc, #776]	; (1a4f0 <_dtoa_r+0x3a8>)
   1a1e6:	2b00      	cmp	r3, #0
   1a1e8:	d0e3      	beq.n	1a1b2 <_dtoa_r+0x6a>
   1a1ea:	1cc3      	adds	r3, r0, #3
   1a1ec:	e7f6      	b.n	1a1dc <_dtoa_r+0x94>
   1a1ee:	2301      	movs	r3, #1
   1a1f0:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1a1f2:	0068      	lsls	r0, r5, #1
   1a1f4:	6013      	str	r3, [r2, #0]
   1a1f6:	0843      	lsrs	r3, r0, #1
   1a1f8:	4698      	mov	r8, r3
   1a1fa:	001f      	movs	r7, r3
   1a1fc:	e7c2      	b.n	1a184 <_dtoa_r+0x3c>
   1a1fe:	ab16      	add	r3, sp, #88	; 0x58
   1a200:	9301      	str	r3, [sp, #4]
   1a202:	ab17      	add	r3, sp, #92	; 0x5c
   1a204:	9300      	str	r3, [sp, #0]
   1a206:	0032      	movs	r2, r6
   1a208:	003b      	movs	r3, r7
   1a20a:	4650      	mov	r0, sl
   1a20c:	f001 ffc4 	bl	1c198 <__d2b>
   1a210:	4643      	mov	r3, r8
   1a212:	4683      	mov	fp, r0
   1a214:	0d1a      	lsrs	r2, r3, #20
   1a216:	d100      	bne.n	1a21a <_dtoa_r+0xd2>
   1a218:	e1d6      	b.n	1a5c8 <_dtoa_r+0x480>
   1a21a:	033b      	lsls	r3, r7, #12
   1a21c:	4cb5      	ldr	r4, [pc, #724]	; (1a4f4 <_dtoa_r+0x3ac>)
   1a21e:	0b1b      	lsrs	r3, r3, #12
   1a220:	431c      	orrs	r4, r3
   1a222:	4bb5      	ldr	r3, [pc, #724]	; (1a4f8 <_dtoa_r+0x3b0>)
   1a224:	0030      	movs	r0, r6
   1a226:	4698      	mov	r8, r3
   1a228:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1a22a:	0021      	movs	r1, r4
   1a22c:	4699      	mov	r9, r3
   1a22e:	2300      	movs	r3, #0
   1a230:	4490      	add	r8, r2
   1a232:	930f      	str	r3, [sp, #60]	; 0x3c
   1a234:	2200      	movs	r2, #0
   1a236:	4bb1      	ldr	r3, [pc, #708]	; (1a4fc <_dtoa_r+0x3b4>)
   1a238:	f7fc ff44 	bl	170c4 <__aeabi_dsub>
   1a23c:	4ab0      	ldr	r2, [pc, #704]	; (1a500 <_dtoa_r+0x3b8>)
   1a23e:	4bb1      	ldr	r3, [pc, #708]	; (1a504 <_dtoa_r+0x3bc>)
   1a240:	f7fc fcc0 	bl	16bc4 <__aeabi_dmul>
   1a244:	4ab0      	ldr	r2, [pc, #704]	; (1a508 <_dtoa_r+0x3c0>)
   1a246:	4bb1      	ldr	r3, [pc, #708]	; (1a50c <_dtoa_r+0x3c4>)
   1a248:	f7fb fe78 	bl	15f3c <__aeabi_dadd>
   1a24c:	0004      	movs	r4, r0
   1a24e:	4640      	mov	r0, r8
   1a250:	000d      	movs	r5, r1
   1a252:	f002 fd41 	bl	1ccd8 <__aeabi_i2d>
   1a256:	4aae      	ldr	r2, [pc, #696]	; (1a510 <_dtoa_r+0x3c8>)
   1a258:	4bae      	ldr	r3, [pc, #696]	; (1a514 <_dtoa_r+0x3cc>)
   1a25a:	f7fc fcb3 	bl	16bc4 <__aeabi_dmul>
   1a25e:	0002      	movs	r2, r0
   1a260:	000b      	movs	r3, r1
   1a262:	0020      	movs	r0, r4
   1a264:	0029      	movs	r1, r5
   1a266:	f7fb fe69 	bl	15f3c <__aeabi_dadd>
   1a26a:	0004      	movs	r4, r0
   1a26c:	000d      	movs	r5, r1
   1a26e:	f7fd fa3f 	bl	176f0 <__aeabi_d2iz>
   1a272:	2200      	movs	r2, #0
   1a274:	9003      	str	r0, [sp, #12]
   1a276:	2300      	movs	r3, #0
   1a278:	0020      	movs	r0, r4
   1a27a:	0029      	movs	r1, r5
   1a27c:	f7fd fb54 	bl	17928 <__aeabi_dcmplt>
   1a280:	2800      	cmp	r0, #0
   1a282:	d000      	beq.n	1a286 <_dtoa_r+0x13e>
   1a284:	e2b1      	b.n	1a7ea <_dtoa_r+0x6a2>
   1a286:	2301      	movs	r3, #1
   1a288:	9c03      	ldr	r4, [sp, #12]
   1a28a:	930c      	str	r3, [sp, #48]	; 0x30
   1a28c:	2c16      	cmp	r4, #22
   1a28e:	d810      	bhi.n	1a2b2 <_dtoa_r+0x16a>
   1a290:	49a1      	ldr	r1, [pc, #644]	; (1a518 <_dtoa_r+0x3d0>)
   1a292:	00e3      	lsls	r3, r4, #3
   1a294:	18c9      	adds	r1, r1, r3
   1a296:	0032      	movs	r2, r6
   1a298:	6808      	ldr	r0, [r1, #0]
   1a29a:	6849      	ldr	r1, [r1, #4]
   1a29c:	003b      	movs	r3, r7
   1a29e:	f7fd fb57 	bl	17950 <__aeabi_dcmpgt>
   1a2a2:	2800      	cmp	r0, #0
   1a2a4:	d100      	bne.n	1a2a8 <_dtoa_r+0x160>
   1a2a6:	e31d      	b.n	1a8e4 <_dtoa_r+0x79c>
   1a2a8:	0023      	movs	r3, r4
   1a2aa:	3b01      	subs	r3, #1
   1a2ac:	9303      	str	r3, [sp, #12]
   1a2ae:	2300      	movs	r3, #0
   1a2b0:	930c      	str	r3, [sp, #48]	; 0x30
   1a2b2:	464b      	mov	r3, r9
   1a2b4:	4642      	mov	r2, r8
   1a2b6:	1a9a      	subs	r2, r3, r2
   1a2b8:	2300      	movs	r3, #0
   1a2ba:	9306      	str	r3, [sp, #24]
   1a2bc:	0013      	movs	r3, r2
   1a2be:	3b01      	subs	r3, #1
   1a2c0:	9304      	str	r3, [sp, #16]
   1a2c2:	d500      	bpl.n	1a2c6 <_dtoa_r+0x17e>
   1a2c4:	e2a1      	b.n	1a80a <_dtoa_r+0x6c2>
   1a2c6:	9b03      	ldr	r3, [sp, #12]
   1a2c8:	2b00      	cmp	r3, #0
   1a2ca:	da00      	bge.n	1a2ce <_dtoa_r+0x186>
   1a2cc:	e284      	b.n	1a7d8 <_dtoa_r+0x690>
   1a2ce:	469c      	mov	ip, r3
   1a2d0:	930d      	str	r3, [sp, #52]	; 0x34
   1a2d2:	2300      	movs	r3, #0
   1a2d4:	9a04      	ldr	r2, [sp, #16]
   1a2d6:	4699      	mov	r9, r3
   1a2d8:	0011      	movs	r1, r2
   1a2da:	4461      	add	r1, ip
   1a2dc:	9104      	str	r1, [sp, #16]
   1a2de:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a2e0:	2b09      	cmp	r3, #9
   1a2e2:	d900      	bls.n	1a2e6 <_dtoa_r+0x19e>
   1a2e4:	e18f      	b.n	1a606 <_dtoa_r+0x4be>
   1a2e6:	2401      	movs	r4, #1
   1a2e8:	2b05      	cmp	r3, #5
   1a2ea:	dd02      	ble.n	1a2f2 <_dtoa_r+0x1aa>
   1a2ec:	2400      	movs	r4, #0
   1a2ee:	3b04      	subs	r3, #4
   1a2f0:	9322      	str	r3, [sp, #136]	; 0x88
   1a2f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a2f4:	2b03      	cmp	r3, #3
   1a2f6:	d101      	bne.n	1a2fc <_dtoa_r+0x1b4>
   1a2f8:	f000 fcce 	bl	1ac98 <_dtoa_r+0xb50>
   1a2fc:	dc01      	bgt.n	1a302 <_dtoa_r+0x1ba>
   1a2fe:	f000 fc92 	bl	1ac26 <_dtoa_r+0xade>
   1a302:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a304:	2b04      	cmp	r3, #4
   1a306:	d101      	bne.n	1a30c <_dtoa_r+0x1c4>
   1a308:	f000 fc40 	bl	1ab8c <_dtoa_r+0xa44>
   1a30c:	2301      	movs	r3, #1
   1a30e:	930b      	str	r3, [sp, #44]	; 0x2c
   1a310:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a312:	2b05      	cmp	r3, #5
   1a314:	d001      	beq.n	1a31a <_dtoa_r+0x1d2>
   1a316:	f000 fc8b 	bl	1ac30 <_dtoa_r+0xae8>
   1a31a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1a31c:	9b03      	ldr	r3, [sp, #12]
   1a31e:	4694      	mov	ip, r2
   1a320:	4463      	add	r3, ip
   1a322:	930e      	str	r3, [sp, #56]	; 0x38
   1a324:	3301      	adds	r3, #1
   1a326:	9307      	str	r3, [sp, #28]
   1a328:	1e1d      	subs	r5, r3, #0
   1a32a:	dc01      	bgt.n	1a330 <_dtoa_r+0x1e8>
   1a32c:	f000 fd49 	bl	1adc2 <_dtoa_r+0xc7a>
   1a330:	9b07      	ldr	r3, [sp, #28]
   1a332:	4698      	mov	r8, r3
   1a334:	2300      	movs	r3, #0
   1a336:	4652      	mov	r2, sl
   1a338:	2100      	movs	r1, #0
   1a33a:	6453      	str	r3, [r2, #68]	; 0x44
   1a33c:	2d17      	cmp	r5, #23
   1a33e:	d90a      	bls.n	1a356 <_dtoa_r+0x20e>
   1a340:	2201      	movs	r2, #1
   1a342:	3304      	adds	r3, #4
   1a344:	005b      	lsls	r3, r3, #1
   1a346:	0018      	movs	r0, r3
   1a348:	3014      	adds	r0, #20
   1a34a:	0011      	movs	r1, r2
   1a34c:	3201      	adds	r2, #1
   1a34e:	4285      	cmp	r5, r0
   1a350:	d2f8      	bcs.n	1a344 <_dtoa_r+0x1fc>
   1a352:	4653      	mov	r3, sl
   1a354:	6459      	str	r1, [r3, #68]	; 0x44
   1a356:	4650      	mov	r0, sl
   1a358:	f001 fc34 	bl	1bbc4 <_Balloc>
   1a35c:	4653      	mov	r3, sl
   1a35e:	6418      	str	r0, [r3, #64]	; 0x40
   1a360:	4643      	mov	r3, r8
   1a362:	900a      	str	r0, [sp, #40]	; 0x28
   1a364:	2b0e      	cmp	r3, #14
   1a366:	d900      	bls.n	1a36a <_dtoa_r+0x222>
   1a368:	e161      	b.n	1a62e <_dtoa_r+0x4e6>
   1a36a:	2c00      	cmp	r4, #0
   1a36c:	d100      	bne.n	1a370 <_dtoa_r+0x228>
   1a36e:	e15e      	b.n	1a62e <_dtoa_r+0x4e6>
   1a370:	9610      	str	r6, [sp, #64]	; 0x40
   1a372:	9711      	str	r7, [sp, #68]	; 0x44
   1a374:	9e03      	ldr	r6, [sp, #12]
   1a376:	2e00      	cmp	r6, #0
   1a378:	dc01      	bgt.n	1a37e <_dtoa_r+0x236>
   1a37a:	f000 fd25 	bl	1adc8 <_dtoa_r+0xc80>
   1a37e:	0032      	movs	r2, r6
   1a380:	210f      	movs	r1, #15
   1a382:	4b65      	ldr	r3, [pc, #404]	; (1a518 <_dtoa_r+0x3d0>)
   1a384:	400a      	ands	r2, r1
   1a386:	00d2      	lsls	r2, r2, #3
   1a388:	189b      	adds	r3, r3, r2
   1a38a:	1136      	asrs	r6, r6, #4
   1a38c:	681c      	ldr	r4, [r3, #0]
   1a38e:	685d      	ldr	r5, [r3, #4]
   1a390:	06f3      	lsls	r3, r6, #27
   1a392:	d401      	bmi.n	1a398 <_dtoa_r+0x250>
   1a394:	f000 fcca 	bl	1ad2c <_dtoa_r+0xbe4>
   1a398:	4b60      	ldr	r3, [pc, #384]	; (1a51c <_dtoa_r+0x3d4>)
   1a39a:	400e      	ands	r6, r1
   1a39c:	6a1a      	ldr	r2, [r3, #32]
   1a39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a3a0:	9810      	ldr	r0, [sp, #64]	; 0x40
   1a3a2:	9911      	ldr	r1, [sp, #68]	; 0x44
   1a3a4:	f7fc f8da 	bl	1655c <__aeabi_ddiv>
   1a3a8:	2303      	movs	r3, #3
   1a3aa:	4698      	mov	r8, r3
   1a3ac:	9008      	str	r0, [sp, #32]
   1a3ae:	9109      	str	r1, [sp, #36]	; 0x24
   1a3b0:	2e00      	cmp	r6, #0
   1a3b2:	d011      	beq.n	1a3d8 <_dtoa_r+0x290>
   1a3b4:	4f59      	ldr	r7, [pc, #356]	; (1a51c <_dtoa_r+0x3d4>)
   1a3b6:	2301      	movs	r3, #1
   1a3b8:	4233      	tst	r3, r6
   1a3ba:	d009      	beq.n	1a3d0 <_dtoa_r+0x288>
   1a3bc:	469c      	mov	ip, r3
   1a3be:	683a      	ldr	r2, [r7, #0]
   1a3c0:	687b      	ldr	r3, [r7, #4]
   1a3c2:	0020      	movs	r0, r4
   1a3c4:	0029      	movs	r1, r5
   1a3c6:	44e0      	add	r8, ip
   1a3c8:	f7fc fbfc 	bl	16bc4 <__aeabi_dmul>
   1a3cc:	0004      	movs	r4, r0
   1a3ce:	000d      	movs	r5, r1
   1a3d0:	1076      	asrs	r6, r6, #1
   1a3d2:	3708      	adds	r7, #8
   1a3d4:	2e00      	cmp	r6, #0
   1a3d6:	d1ee      	bne.n	1a3b6 <_dtoa_r+0x26e>
   1a3d8:	0022      	movs	r2, r4
   1a3da:	9808      	ldr	r0, [sp, #32]
   1a3dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a3de:	002b      	movs	r3, r5
   1a3e0:	f7fc f8bc 	bl	1655c <__aeabi_ddiv>
   1a3e4:	0006      	movs	r6, r0
   1a3e6:	000f      	movs	r7, r1
   1a3e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a3ea:	2b00      	cmp	r3, #0
   1a3ec:	d009      	beq.n	1a402 <_dtoa_r+0x2ba>
   1a3ee:	2200      	movs	r2, #0
   1a3f0:	4b40      	ldr	r3, [pc, #256]	; (1a4f4 <_dtoa_r+0x3ac>)
   1a3f2:	0030      	movs	r0, r6
   1a3f4:	0039      	movs	r1, r7
   1a3f6:	f7fd fa97 	bl	17928 <__aeabi_dcmplt>
   1a3fa:	2800      	cmp	r0, #0
   1a3fc:	d001      	beq.n	1a402 <_dtoa_r+0x2ba>
   1a3fe:	f000 fdc2 	bl	1af86 <_dtoa_r+0xe3e>
   1a402:	4640      	mov	r0, r8
   1a404:	f002 fc68 	bl	1ccd8 <__aeabi_i2d>
   1a408:	0032      	movs	r2, r6
   1a40a:	003b      	movs	r3, r7
   1a40c:	f7fc fbda 	bl	16bc4 <__aeabi_dmul>
   1a410:	2200      	movs	r2, #0
   1a412:	4b43      	ldr	r3, [pc, #268]	; (1a520 <_dtoa_r+0x3d8>)
   1a414:	f7fb fd92 	bl	15f3c <__aeabi_dadd>
   1a418:	4a42      	ldr	r2, [pc, #264]	; (1a524 <_dtoa_r+0x3dc>)
   1a41a:	000b      	movs	r3, r1
   1a41c:	4694      	mov	ip, r2
   1a41e:	4463      	add	r3, ip
   1a420:	9008      	str	r0, [sp, #32]
   1a422:	9109      	str	r1, [sp, #36]	; 0x24
   1a424:	9309      	str	r3, [sp, #36]	; 0x24
   1a426:	9b07      	ldr	r3, [sp, #28]
   1a428:	2b00      	cmp	r3, #0
   1a42a:	d101      	bne.n	1a430 <_dtoa_r+0x2e8>
   1a42c:	f000 fc50 	bl	1acd0 <_dtoa_r+0xb88>
   1a430:	9b03      	ldr	r3, [sp, #12]
   1a432:	9313      	str	r3, [sp, #76]	; 0x4c
   1a434:	9b07      	ldr	r3, [sp, #28]
   1a436:	9312      	str	r3, [sp, #72]	; 0x48
   1a438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a43a:	2b00      	cmp	r3, #0
   1a43c:	d101      	bne.n	1a442 <_dtoa_r+0x2fa>
   1a43e:	f000 fd1d 	bl	1ae7c <_dtoa_r+0xd34>
   1a442:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a444:	2000      	movs	r0, #0
   1a446:	1e5a      	subs	r2, r3, #1
   1a448:	4b33      	ldr	r3, [pc, #204]	; (1a518 <_dtoa_r+0x3d0>)
   1a44a:	00d2      	lsls	r2, r2, #3
   1a44c:	189b      	adds	r3, r3, r2
   1a44e:	681a      	ldr	r2, [r3, #0]
   1a450:	685b      	ldr	r3, [r3, #4]
   1a452:	4935      	ldr	r1, [pc, #212]	; (1a528 <_dtoa_r+0x3e0>)
   1a454:	f7fc f882 	bl	1655c <__aeabi_ddiv>
   1a458:	9a08      	ldr	r2, [sp, #32]
   1a45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a45c:	f7fc fe32 	bl	170c4 <__aeabi_dsub>
   1a460:	9008      	str	r0, [sp, #32]
   1a462:	9109      	str	r1, [sp, #36]	; 0x24
   1a464:	0039      	movs	r1, r7
   1a466:	0030      	movs	r0, r6
   1a468:	f7fd f942 	bl	176f0 <__aeabi_d2iz>
   1a46c:	0004      	movs	r4, r0
   1a46e:	f002 fc33 	bl	1ccd8 <__aeabi_i2d>
   1a472:	0002      	movs	r2, r0
   1a474:	000b      	movs	r3, r1
   1a476:	0030      	movs	r0, r6
   1a478:	0039      	movs	r1, r7
   1a47a:	f7fc fe23 	bl	170c4 <__aeabi_dsub>
   1a47e:	0005      	movs	r5, r0
   1a480:	000e      	movs	r6, r1
   1a482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a484:	3430      	adds	r4, #48	; 0x30
   1a486:	1c51      	adds	r1, r2, #1
   1a488:	b2e7      	uxtb	r7, r4
   1a48a:	9114      	str	r1, [sp, #80]	; 0x50
   1a48c:	7017      	strb	r7, [r2, #0]
   1a48e:	0033      	movs	r3, r6
   1a490:	9808      	ldr	r0, [sp, #32]
   1a492:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a494:	002a      	movs	r2, r5
   1a496:	f7fd fa5b 	bl	17950 <__aeabi_dcmpgt>
   1a49a:	2800      	cmp	r0, #0
   1a49c:	d001      	beq.n	1a4a2 <_dtoa_r+0x35a>
   1a49e:	f000 fdfe 	bl	1b09e <_dtoa_r+0xf56>
   1a4a2:	002a      	movs	r2, r5
   1a4a4:	0033      	movs	r3, r6
   1a4a6:	2000      	movs	r0, #0
   1a4a8:	4912      	ldr	r1, [pc, #72]	; (1a4f4 <_dtoa_r+0x3ac>)
   1a4aa:	f7fc fe0b 	bl	170c4 <__aeabi_dsub>
   1a4ae:	0002      	movs	r2, r0
   1a4b0:	000b      	movs	r3, r1
   1a4b2:	9808      	ldr	r0, [sp, #32]
   1a4b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a4b6:	f7fd fa4b 	bl	17950 <__aeabi_dcmpgt>
   1a4ba:	2800      	cmp	r0, #0
   1a4bc:	d001      	beq.n	1a4c2 <_dtoa_r+0x37a>
   1a4be:	f000 fde7 	bl	1b090 <_dtoa_r+0xf48>
   1a4c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a4c4:	2b01      	cmp	r3, #1
   1a4c6:	d101      	bne.n	1a4cc <_dtoa_r+0x384>
   1a4c8:	f000 fc78 	bl	1adbc <_dtoa_r+0xc74>
   1a4cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a4ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a4d0:	4694      	mov	ip, r2
   1a4d2:	4463      	add	r3, ip
   1a4d4:	4698      	mov	r8, r3
   1a4d6:	464b      	mov	r3, r9
   1a4d8:	9312      	str	r3, [sp, #72]	; 0x48
   1a4da:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1a4dc:	4699      	mov	r9, r3
   1a4de:	e038      	b.n	1a552 <_dtoa_r+0x40a>
   1a4e0:	7ff00000 	.word	0x7ff00000
   1a4e4:	0001f451 	.word	0x0001f451
   1a4e8:	0000270f 	.word	0x0000270f
   1a4ec:	0001fa70 	.word	0x0001fa70
   1a4f0:	0001fa7c 	.word	0x0001fa7c
   1a4f4:	3ff00000 	.word	0x3ff00000
   1a4f8:	fffffc01 	.word	0xfffffc01
   1a4fc:	3ff80000 	.word	0x3ff80000
   1a500:	636f4361 	.word	0x636f4361
   1a504:	3fd287a7 	.word	0x3fd287a7
   1a508:	8b60c8b3 	.word	0x8b60c8b3
   1a50c:	3fc68a28 	.word	0x3fc68a28
   1a510:	509f79fb 	.word	0x509f79fb
   1a514:	3fd34413 	.word	0x3fd34413
   1a518:	0001fab8 	.word	0x0001fab8
   1a51c:	0001fa90 	.word	0x0001fa90
   1a520:	401c0000 	.word	0x401c0000
   1a524:	fcc00000 	.word	0xfcc00000
   1a528:	3fe00000 	.word	0x3fe00000
   1a52c:	002a      	movs	r2, r5
   1a52e:	0033      	movs	r3, r6
   1a530:	2000      	movs	r0, #0
   1a532:	49b9      	ldr	r1, [pc, #740]	; (1a818 <_dtoa_r+0x6d0>)
   1a534:	f7fc fdc6 	bl	170c4 <__aeabi_dsub>
   1a538:	9a08      	ldr	r2, [sp, #32]
   1a53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a53c:	f7fd f9f4 	bl	17928 <__aeabi_dcmplt>
   1a540:	2800      	cmp	r0, #0
   1a542:	d001      	beq.n	1a548 <_dtoa_r+0x400>
   1a544:	f000 fd74 	bl	1b030 <_dtoa_r+0xee8>
   1a548:	46a1      	mov	r9, r4
   1a54a:	4544      	cmp	r4, r8
   1a54c:	d101      	bne.n	1a552 <_dtoa_r+0x40a>
   1a54e:	f000 fc33 	bl	1adb8 <_dtoa_r+0xc70>
   1a552:	9808      	ldr	r0, [sp, #32]
   1a554:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a556:	2200      	movs	r2, #0
   1a558:	4bb0      	ldr	r3, [pc, #704]	; (1a81c <_dtoa_r+0x6d4>)
   1a55a:	f7fc fb33 	bl	16bc4 <__aeabi_dmul>
   1a55e:	2200      	movs	r2, #0
   1a560:	4bae      	ldr	r3, [pc, #696]	; (1a81c <_dtoa_r+0x6d4>)
   1a562:	9008      	str	r0, [sp, #32]
   1a564:	9109      	str	r1, [sp, #36]	; 0x24
   1a566:	0028      	movs	r0, r5
   1a568:	0031      	movs	r1, r6
   1a56a:	f7fc fb2b 	bl	16bc4 <__aeabi_dmul>
   1a56e:	000d      	movs	r5, r1
   1a570:	0004      	movs	r4, r0
   1a572:	f7fd f8bd 	bl	176f0 <__aeabi_d2iz>
   1a576:	0007      	movs	r7, r0
   1a578:	f002 fbae 	bl	1ccd8 <__aeabi_i2d>
   1a57c:	0002      	movs	r2, r0
   1a57e:	000b      	movs	r3, r1
   1a580:	0020      	movs	r0, r4
   1a582:	0029      	movs	r1, r5
   1a584:	f7fc fd9e 	bl	170c4 <__aeabi_dsub>
   1a588:	464b      	mov	r3, r9
   1a58a:	3730      	adds	r7, #48	; 0x30
   1a58c:	b2ff      	uxtb	r7, r7
   1a58e:	1c5c      	adds	r4, r3, #1
   1a590:	701f      	strb	r7, [r3, #0]
   1a592:	9a08      	ldr	r2, [sp, #32]
   1a594:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a596:	0005      	movs	r5, r0
   1a598:	000e      	movs	r6, r1
   1a59a:	f7fd f9c5 	bl	17928 <__aeabi_dcmplt>
   1a59e:	2800      	cmp	r0, #0
   1a5a0:	d0c4      	beq.n	1a52c <_dtoa_r+0x3e4>
   1a5a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a5a4:	9303      	str	r3, [sp, #12]
   1a5a6:	4659      	mov	r1, fp
   1a5a8:	4650      	mov	r0, sl
   1a5aa:	f001 fb33 	bl	1bc14 <_Bfree>
   1a5ae:	2300      	movs	r3, #0
   1a5b0:	7023      	strb	r3, [r4, #0]
   1a5b2:	9b03      	ldr	r3, [sp, #12]
   1a5b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1a5b6:	3301      	adds	r3, #1
   1a5b8:	6013      	str	r3, [r2, #0]
   1a5ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1a5bc:	2b00      	cmp	r3, #0
   1a5be:	d100      	bne.n	1a5c2 <_dtoa_r+0x47a>
   1a5c0:	e3a8      	b.n	1ad14 <_dtoa_r+0xbcc>
   1a5c2:	601c      	str	r4, [r3, #0]
   1a5c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1a5c6:	e5f4      	b.n	1a1b2 <_dtoa_r+0x6a>
   1a5c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1a5ca:	4699      	mov	r9, r3
   1a5cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1a5ce:	444b      	add	r3, r9
   1a5d0:	001c      	movs	r4, r3
   1a5d2:	4b93      	ldr	r3, [pc, #588]	; (1a820 <_dtoa_r+0x6d8>)
   1a5d4:	18e3      	adds	r3, r4, r3
   1a5d6:	2b20      	cmp	r3, #32
   1a5d8:	dc00      	bgt.n	1a5dc <_dtoa_r+0x494>
   1a5da:	e17e      	b.n	1a8da <_dtoa_r+0x792>
   1a5dc:	0031      	movs	r1, r6
   1a5de:	4a91      	ldr	r2, [pc, #580]	; (1a824 <_dtoa_r+0x6dc>)
   1a5e0:	4640      	mov	r0, r8
   1a5e2:	18a2      	adds	r2, r4, r2
   1a5e4:	40d1      	lsrs	r1, r2
   1a5e6:	000a      	movs	r2, r1
   1a5e8:	2140      	movs	r1, #64	; 0x40
   1a5ea:	1acb      	subs	r3, r1, r3
   1a5ec:	4098      	lsls	r0, r3
   1a5ee:	4310      	orrs	r0, r2
   1a5f0:	f7fd f8b2 	bl	17758 <__aeabi_ui2d>
   1a5f4:	1e63      	subs	r3, r4, #1
   1a5f6:	4698      	mov	r8, r3
   1a5f8:	2301      	movs	r3, #1
   1a5fa:	4d8b      	ldr	r5, [pc, #556]	; (1a828 <_dtoa_r+0x6e0>)
   1a5fc:	930f      	str	r3, [sp, #60]	; 0x3c
   1a5fe:	1949      	adds	r1, r1, r5
   1a600:	e618      	b.n	1a234 <_dtoa_r+0xec>
   1a602:	488a      	ldr	r0, [pc, #552]	; (1a82c <_dtoa_r+0x6e4>)
   1a604:	e5d5      	b.n	1a1b2 <_dtoa_r+0x6a>
   1a606:	2300      	movs	r3, #0
   1a608:	4652      	mov	r2, sl
   1a60a:	2100      	movs	r1, #0
   1a60c:	6453      	str	r3, [r2, #68]	; 0x44
   1a60e:	4650      	mov	r0, sl
   1a610:	f001 fad8 	bl	1bbc4 <_Balloc>
   1a614:	4653      	mov	r3, sl
   1a616:	6418      	str	r0, [r3, #64]	; 0x40
   1a618:	2301      	movs	r3, #1
   1a61a:	425b      	negs	r3, r3
   1a61c:	9307      	str	r3, [sp, #28]
   1a61e:	930e      	str	r3, [sp, #56]	; 0x38
   1a620:	3302      	adds	r3, #2
   1a622:	2200      	movs	r2, #0
   1a624:	930b      	str	r3, [sp, #44]	; 0x2c
   1a626:	2300      	movs	r3, #0
   1a628:	900a      	str	r0, [sp, #40]	; 0x28
   1a62a:	9223      	str	r2, [sp, #140]	; 0x8c
   1a62c:	9322      	str	r3, [sp, #136]	; 0x88
   1a62e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1a630:	2b00      	cmp	r3, #0
   1a632:	da00      	bge.n	1a636 <_dtoa_r+0x4ee>
   1a634:	e0ab      	b.n	1a78e <_dtoa_r+0x646>
   1a636:	9a03      	ldr	r2, [sp, #12]
   1a638:	2a0e      	cmp	r2, #14
   1a63a:	dd00      	ble.n	1a63e <_dtoa_r+0x4f6>
   1a63c:	e0a7      	b.n	1a78e <_dtoa_r+0x646>
   1a63e:	4b7c      	ldr	r3, [pc, #496]	; (1a830 <_dtoa_r+0x6e8>)
   1a640:	00d2      	lsls	r2, r2, #3
   1a642:	189b      	adds	r3, r3, r2
   1a644:	685c      	ldr	r4, [r3, #4]
   1a646:	681b      	ldr	r3, [r3, #0]
   1a648:	9304      	str	r3, [sp, #16]
   1a64a:	9405      	str	r4, [sp, #20]
   1a64c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1a64e:	2b00      	cmp	r3, #0
   1a650:	da00      	bge.n	1a654 <_dtoa_r+0x50c>
   1a652:	e2a7      	b.n	1aba4 <_dtoa_r+0xa5c>
   1a654:	9c04      	ldr	r4, [sp, #16]
   1a656:	9d05      	ldr	r5, [sp, #20]
   1a658:	0030      	movs	r0, r6
   1a65a:	0022      	movs	r2, r4
   1a65c:	002b      	movs	r3, r5
   1a65e:	0039      	movs	r1, r7
   1a660:	f7fb ff7c 	bl	1655c <__aeabi_ddiv>
   1a664:	f7fd f844 	bl	176f0 <__aeabi_d2iz>
   1a668:	4680      	mov	r8, r0
   1a66a:	f002 fb35 	bl	1ccd8 <__aeabi_i2d>
   1a66e:	0022      	movs	r2, r4
   1a670:	002b      	movs	r3, r5
   1a672:	f7fc faa7 	bl	16bc4 <__aeabi_dmul>
   1a676:	0002      	movs	r2, r0
   1a678:	000b      	movs	r3, r1
   1a67a:	0030      	movs	r0, r6
   1a67c:	0039      	movs	r1, r7
   1a67e:	f7fc fd21 	bl	170c4 <__aeabi_dsub>
   1a682:	4643      	mov	r3, r8
   1a684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a686:	3330      	adds	r3, #48	; 0x30
   1a688:	7013      	strb	r3, [r2, #0]
   1a68a:	9b07      	ldr	r3, [sp, #28]
   1a68c:	0006      	movs	r6, r0
   1a68e:	000f      	movs	r7, r1
   1a690:	1c54      	adds	r4, r2, #1
   1a692:	2b01      	cmp	r3, #1
   1a694:	d04e      	beq.n	1a734 <_dtoa_r+0x5ec>
   1a696:	2200      	movs	r2, #0
   1a698:	4b60      	ldr	r3, [pc, #384]	; (1a81c <_dtoa_r+0x6d4>)
   1a69a:	f7fc fa93 	bl	16bc4 <__aeabi_dmul>
   1a69e:	2200      	movs	r2, #0
   1a6a0:	2300      	movs	r3, #0
   1a6a2:	0006      	movs	r6, r0
   1a6a4:	000f      	movs	r7, r1
   1a6a6:	f7fd f939 	bl	1791c <__aeabi_dcmpeq>
   1a6aa:	2800      	cmp	r0, #0
   1a6ac:	d000      	beq.n	1a6b0 <_dtoa_r+0x568>
   1a6ae:	e77a      	b.n	1a5a6 <_dtoa_r+0x45e>
   1a6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a6b2:	9a07      	ldr	r2, [sp, #28]
   1a6b4:	1c9d      	adds	r5, r3, #2
   1a6b6:	469c      	mov	ip, r3
   1a6b8:	465b      	mov	r3, fp
   1a6ba:	9306      	str	r3, [sp, #24]
   1a6bc:	4653      	mov	r3, sl
   1a6be:	4462      	add	r2, ip
   1a6c0:	46aa      	mov	sl, r5
   1a6c2:	9c04      	ldr	r4, [sp, #16]
   1a6c4:	9d05      	ldr	r5, [sp, #20]
   1a6c6:	4691      	mov	r9, r2
   1a6c8:	9307      	str	r3, [sp, #28]
   1a6ca:	e00f      	b.n	1a6ec <_dtoa_r+0x5a4>
   1a6cc:	2200      	movs	r2, #0
   1a6ce:	4b53      	ldr	r3, [pc, #332]	; (1a81c <_dtoa_r+0x6d4>)
   1a6d0:	f7fc fa78 	bl	16bc4 <__aeabi_dmul>
   1a6d4:	2301      	movs	r3, #1
   1a6d6:	469c      	mov	ip, r3
   1a6d8:	2200      	movs	r2, #0
   1a6da:	2300      	movs	r3, #0
   1a6dc:	0006      	movs	r6, r0
   1a6de:	000f      	movs	r7, r1
   1a6e0:	44e2      	add	sl, ip
   1a6e2:	f7fd f91b 	bl	1791c <__aeabi_dcmpeq>
   1a6e6:	2800      	cmp	r0, #0
   1a6e8:	d000      	beq.n	1a6ec <_dtoa_r+0x5a4>
   1a6ea:	e2d9      	b.n	1aca0 <_dtoa_r+0xb58>
   1a6ec:	0022      	movs	r2, r4
   1a6ee:	002b      	movs	r3, r5
   1a6f0:	0030      	movs	r0, r6
   1a6f2:	0039      	movs	r1, r7
   1a6f4:	f7fb ff32 	bl	1655c <__aeabi_ddiv>
   1a6f8:	f7fc fffa 	bl	176f0 <__aeabi_d2iz>
   1a6fc:	4680      	mov	r8, r0
   1a6fe:	f002 faeb 	bl	1ccd8 <__aeabi_i2d>
   1a702:	0022      	movs	r2, r4
   1a704:	002b      	movs	r3, r5
   1a706:	f7fc fa5d 	bl	16bc4 <__aeabi_dmul>
   1a70a:	0002      	movs	r2, r0
   1a70c:	000b      	movs	r3, r1
   1a70e:	0030      	movs	r0, r6
   1a710:	0039      	movs	r1, r7
   1a712:	f7fc fcd7 	bl	170c4 <__aeabi_dsub>
   1a716:	4653      	mov	r3, sl
   1a718:	4642      	mov	r2, r8
   1a71a:	3b01      	subs	r3, #1
   1a71c:	3230      	adds	r2, #48	; 0x30
   1a71e:	0006      	movs	r6, r0
   1a720:	000f      	movs	r7, r1
   1a722:	46d3      	mov	fp, sl
   1a724:	701a      	strb	r2, [r3, #0]
   1a726:	45d1      	cmp	r9, sl
   1a728:	d1d0      	bne.n	1a6cc <_dtoa_r+0x584>
   1a72a:	9b06      	ldr	r3, [sp, #24]
   1a72c:	4654      	mov	r4, sl
   1a72e:	469b      	mov	fp, r3
   1a730:	9b07      	ldr	r3, [sp, #28]
   1a732:	469a      	mov	sl, r3
   1a734:	0032      	movs	r2, r6
   1a736:	003b      	movs	r3, r7
   1a738:	0030      	movs	r0, r6
   1a73a:	0039      	movs	r1, r7
   1a73c:	f7fb fbfe 	bl	15f3c <__aeabi_dadd>
   1a740:	0006      	movs	r6, r0
   1a742:	000f      	movs	r7, r1
   1a744:	0002      	movs	r2, r0
   1a746:	000b      	movs	r3, r1
   1a748:	9804      	ldr	r0, [sp, #16]
   1a74a:	9905      	ldr	r1, [sp, #20]
   1a74c:	f7fd f8ec 	bl	17928 <__aeabi_dcmplt>
   1a750:	2800      	cmp	r0, #0
   1a752:	d10c      	bne.n	1a76e <_dtoa_r+0x626>
   1a754:	9804      	ldr	r0, [sp, #16]
   1a756:	9905      	ldr	r1, [sp, #20]
   1a758:	0032      	movs	r2, r6
   1a75a:	003b      	movs	r3, r7
   1a75c:	f7fd f8de 	bl	1791c <__aeabi_dcmpeq>
   1a760:	2800      	cmp	r0, #0
   1a762:	d100      	bne.n	1a766 <_dtoa_r+0x61e>
   1a764:	e71f      	b.n	1a5a6 <_dtoa_r+0x45e>
   1a766:	4643      	mov	r3, r8
   1a768:	07db      	lsls	r3, r3, #31
   1a76a:	d400      	bmi.n	1a76e <_dtoa_r+0x626>
   1a76c:	e71b      	b.n	1a5a6 <_dtoa_r+0x45e>
   1a76e:	1e65      	subs	r5, r4, #1
   1a770:	782f      	ldrb	r7, [r5, #0]
   1a772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a774:	e006      	b.n	1a784 <_dtoa_r+0x63c>
   1a776:	429d      	cmp	r5, r3
   1a778:	d100      	bne.n	1a77c <_dtoa_r+0x634>
   1a77a:	e351      	b.n	1ae20 <_dtoa_r+0xcd8>
   1a77c:	3c02      	subs	r4, #2
   1a77e:	7827      	ldrb	r7, [r4, #0]
   1a780:	002c      	movs	r4, r5
   1a782:	3d01      	subs	r5, #1
   1a784:	2f39      	cmp	r7, #57	; 0x39
   1a786:	d0f6      	beq.n	1a776 <_dtoa_r+0x62e>
   1a788:	3701      	adds	r7, #1
   1a78a:	702f      	strb	r7, [r5, #0]
   1a78c:	e70b      	b.n	1a5a6 <_dtoa_r+0x45e>
   1a78e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a790:	2a00      	cmp	r2, #0
   1a792:	d04f      	beq.n	1a834 <_dtoa_r+0x6ec>
   1a794:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1a796:	2a01      	cmp	r2, #1
   1a798:	dc00      	bgt.n	1a79c <_dtoa_r+0x654>
   1a79a:	e22c      	b.n	1abf6 <_dtoa_r+0xaae>
   1a79c:	9b07      	ldr	r3, [sp, #28]
   1a79e:	1e5c      	subs	r4, r3, #1
   1a7a0:	464b      	mov	r3, r9
   1a7a2:	45a1      	cmp	r9, r4
   1a7a4:	da00      	bge.n	1a7a8 <_dtoa_r+0x660>
   1a7a6:	e2b8      	b.n	1ad1a <_dtoa_r+0xbd2>
   1a7a8:	1b1c      	subs	r4, r3, r4
   1a7aa:	9b07      	ldr	r3, [sp, #28]
   1a7ac:	2b00      	cmp	r3, #0
   1a7ae:	da00      	bge.n	1a7b2 <_dtoa_r+0x66a>
   1a7b0:	e3d4      	b.n	1af5c <_dtoa_r+0xe14>
   1a7b2:	9b06      	ldr	r3, [sp, #24]
   1a7b4:	9308      	str	r3, [sp, #32]
   1a7b6:	9b07      	ldr	r3, [sp, #28]
   1a7b8:	9a06      	ldr	r2, [sp, #24]
   1a7ba:	2101      	movs	r1, #1
   1a7bc:	4694      	mov	ip, r2
   1a7be:	449c      	add	ip, r3
   1a7c0:	4662      	mov	r2, ip
   1a7c2:	9206      	str	r2, [sp, #24]
   1a7c4:	9a04      	ldr	r2, [sp, #16]
   1a7c6:	4650      	mov	r0, sl
   1a7c8:	4694      	mov	ip, r2
   1a7ca:	449c      	add	ip, r3
   1a7cc:	4663      	mov	r3, ip
   1a7ce:	9304      	str	r3, [sp, #16]
   1a7d0:	f001 fab8 	bl	1bd44 <__i2b>
   1a7d4:	4680      	mov	r8, r0
   1a7d6:	e032      	b.n	1a83e <_dtoa_r+0x6f6>
   1a7d8:	9a06      	ldr	r2, [sp, #24]
   1a7da:	9b03      	ldr	r3, [sp, #12]
   1a7dc:	1ad2      	subs	r2, r2, r3
   1a7de:	425b      	negs	r3, r3
   1a7e0:	4699      	mov	r9, r3
   1a7e2:	2300      	movs	r3, #0
   1a7e4:	9206      	str	r2, [sp, #24]
   1a7e6:	930d      	str	r3, [sp, #52]	; 0x34
   1a7e8:	e579      	b.n	1a2de <_dtoa_r+0x196>
   1a7ea:	9803      	ldr	r0, [sp, #12]
   1a7ec:	f002 fa74 	bl	1ccd8 <__aeabi_i2d>
   1a7f0:	000b      	movs	r3, r1
   1a7f2:	0002      	movs	r2, r0
   1a7f4:	0029      	movs	r1, r5
   1a7f6:	0020      	movs	r0, r4
   1a7f8:	f7fd f890 	bl	1791c <__aeabi_dcmpeq>
   1a7fc:	0002      	movs	r2, r0
   1a7fe:	4250      	negs	r0, r2
   1a800:	4150      	adcs	r0, r2
   1a802:	9b03      	ldr	r3, [sp, #12]
   1a804:	1a1b      	subs	r3, r3, r0
   1a806:	9303      	str	r3, [sp, #12]
   1a808:	e53d      	b.n	1a286 <_dtoa_r+0x13e>
   1a80a:	2301      	movs	r3, #1
   1a80c:	1a9b      	subs	r3, r3, r2
   1a80e:	9306      	str	r3, [sp, #24]
   1a810:	2300      	movs	r3, #0
   1a812:	9304      	str	r3, [sp, #16]
   1a814:	e557      	b.n	1a2c6 <_dtoa_r+0x17e>
   1a816:	46c0      	nop			; (mov r8, r8)
   1a818:	3ff00000 	.word	0x3ff00000
   1a81c:	40240000 	.word	0x40240000
   1a820:	00000432 	.word	0x00000432
   1a824:	00000412 	.word	0x00000412
   1a828:	fe100000 	.word	0xfe100000
   1a82c:	0001f450 	.word	0x0001f450
   1a830:	0001fab8 	.word	0x0001fab8
   1a834:	9b06      	ldr	r3, [sp, #24]
   1a836:	464c      	mov	r4, r9
   1a838:	9308      	str	r3, [sp, #32]
   1a83a:	2300      	movs	r3, #0
   1a83c:	4698      	mov	r8, r3
   1a83e:	9908      	ldr	r1, [sp, #32]
   1a840:	1e0b      	subs	r3, r1, #0
   1a842:	dd0e      	ble.n	1a862 <_dtoa_r+0x71a>
   1a844:	9a04      	ldr	r2, [sp, #16]
   1a846:	2a00      	cmp	r2, #0
   1a848:	dd0b      	ble.n	1a862 <_dtoa_r+0x71a>
   1a84a:	4293      	cmp	r3, r2
   1a84c:	dd00      	ble.n	1a850 <_dtoa_r+0x708>
   1a84e:	e187      	b.n	1ab60 <_dtoa_r+0xa18>
   1a850:	9a06      	ldr	r2, [sp, #24]
   1a852:	1ad2      	subs	r2, r2, r3
   1a854:	9206      	str	r2, [sp, #24]
   1a856:	9a08      	ldr	r2, [sp, #32]
   1a858:	1ad2      	subs	r2, r2, r3
   1a85a:	9208      	str	r2, [sp, #32]
   1a85c:	9a04      	ldr	r2, [sp, #16]
   1a85e:	1ad3      	subs	r3, r2, r3
   1a860:	9304      	str	r3, [sp, #16]
   1a862:	464b      	mov	r3, r9
   1a864:	2b00      	cmp	r3, #0
   1a866:	d01a      	beq.n	1a89e <_dtoa_r+0x756>
   1a868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a86a:	2b00      	cmp	r3, #0
   1a86c:	d100      	bne.n	1a870 <_dtoa_r+0x728>
   1a86e:	e1bb      	b.n	1abe8 <_dtoa_r+0xaa0>
   1a870:	2c00      	cmp	r4, #0
   1a872:	dd10      	ble.n	1a896 <_dtoa_r+0x74e>
   1a874:	4641      	mov	r1, r8
   1a876:	0022      	movs	r2, r4
   1a878:	4650      	mov	r0, sl
   1a87a:	f001 fb17 	bl	1beac <__pow5mult>
   1a87e:	465a      	mov	r2, fp
   1a880:	0001      	movs	r1, r0
   1a882:	4680      	mov	r8, r0
   1a884:	4650      	mov	r0, sl
   1a886:	f001 fa67 	bl	1bd58 <__multiply>
   1a88a:	0005      	movs	r5, r0
   1a88c:	4659      	mov	r1, fp
   1a88e:	4650      	mov	r0, sl
   1a890:	f001 f9c0 	bl	1bc14 <_Bfree>
   1a894:	46ab      	mov	fp, r5
   1a896:	464b      	mov	r3, r9
   1a898:	1b1a      	subs	r2, r3, r4
   1a89a:	d000      	beq.n	1a89e <_dtoa_r+0x756>
   1a89c:	e1a5      	b.n	1abea <_dtoa_r+0xaa2>
   1a89e:	2101      	movs	r1, #1
   1a8a0:	4650      	mov	r0, sl
   1a8a2:	f001 fa4f 	bl	1bd44 <__i2b>
   1a8a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a8a8:	4681      	mov	r9, r0
   1a8aa:	2b00      	cmp	r3, #0
   1a8ac:	dd1d      	ble.n	1a8ea <_dtoa_r+0x7a2>
   1a8ae:	001a      	movs	r2, r3
   1a8b0:	0001      	movs	r1, r0
   1a8b2:	4650      	mov	r0, sl
   1a8b4:	f001 fafa 	bl	1beac <__pow5mult>
   1a8b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a8ba:	4681      	mov	r9, r0
   1a8bc:	2b01      	cmp	r3, #1
   1a8be:	dc00      	bgt.n	1a8c2 <_dtoa_r+0x77a>
   1a8c0:	e150      	b.n	1ab64 <_dtoa_r+0xa1c>
   1a8c2:	2400      	movs	r4, #0
   1a8c4:	464b      	mov	r3, r9
   1a8c6:	691b      	ldr	r3, [r3, #16]
   1a8c8:	3303      	adds	r3, #3
   1a8ca:	009b      	lsls	r3, r3, #2
   1a8cc:	444b      	add	r3, r9
   1a8ce:	6858      	ldr	r0, [r3, #4]
   1a8d0:	f001 f9f0 	bl	1bcb4 <__hi0bits>
   1a8d4:	2320      	movs	r3, #32
   1a8d6:	1a1b      	subs	r3, r3, r0
   1a8d8:	e010      	b.n	1a8fc <_dtoa_r+0x7b4>
   1a8da:	2220      	movs	r2, #32
   1a8dc:	0030      	movs	r0, r6
   1a8de:	1ad3      	subs	r3, r2, r3
   1a8e0:	4098      	lsls	r0, r3
   1a8e2:	e685      	b.n	1a5f0 <_dtoa_r+0x4a8>
   1a8e4:	2300      	movs	r3, #0
   1a8e6:	930c      	str	r3, [sp, #48]	; 0x30
   1a8e8:	e4e3      	b.n	1a2b2 <_dtoa_r+0x16a>
   1a8ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a8ec:	2400      	movs	r4, #0
   1a8ee:	2b01      	cmp	r3, #1
   1a8f0:	dc00      	bgt.n	1a8f4 <_dtoa_r+0x7ac>
   1a8f2:	e18b      	b.n	1ac0c <_dtoa_r+0xac4>
   1a8f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1a8f6:	2301      	movs	r3, #1
   1a8f8:	2a00      	cmp	r2, #0
   1a8fa:	d1e3      	bne.n	1a8c4 <_dtoa_r+0x77c>
   1a8fc:	9904      	ldr	r1, [sp, #16]
   1a8fe:	201f      	movs	r0, #31
   1a900:	468c      	mov	ip, r1
   1a902:	4463      	add	r3, ip
   1a904:	4018      	ands	r0, r3
   1a906:	d100      	bne.n	1a90a <_dtoa_r+0x7c2>
   1a908:	e0ae      	b.n	1aa68 <_dtoa_r+0x920>
   1a90a:	2320      	movs	r3, #32
   1a90c:	1a1b      	subs	r3, r3, r0
   1a90e:	2b04      	cmp	r3, #4
   1a910:	dc00      	bgt.n	1a914 <_dtoa_r+0x7cc>
   1a912:	e3cc      	b.n	1b0ae <_dtoa_r+0xf66>
   1a914:	231c      	movs	r3, #28
   1a916:	1a18      	subs	r0, r3, r0
   1a918:	9b06      	ldr	r3, [sp, #24]
   1a91a:	469c      	mov	ip, r3
   1a91c:	4484      	add	ip, r0
   1a91e:	4663      	mov	r3, ip
   1a920:	9306      	str	r3, [sp, #24]
   1a922:	9b08      	ldr	r3, [sp, #32]
   1a924:	469c      	mov	ip, r3
   1a926:	4484      	add	ip, r0
   1a928:	4663      	mov	r3, ip
   1a92a:	468c      	mov	ip, r1
   1a92c:	4484      	add	ip, r0
   1a92e:	9308      	str	r3, [sp, #32]
   1a930:	4663      	mov	r3, ip
   1a932:	9304      	str	r3, [sp, #16]
   1a934:	9b06      	ldr	r3, [sp, #24]
   1a936:	2b00      	cmp	r3, #0
   1a938:	dd05      	ble.n	1a946 <_dtoa_r+0x7fe>
   1a93a:	4659      	mov	r1, fp
   1a93c:	001a      	movs	r2, r3
   1a93e:	4650      	mov	r0, sl
   1a940:	f001 fb14 	bl	1bf6c <__lshift>
   1a944:	4683      	mov	fp, r0
   1a946:	9b04      	ldr	r3, [sp, #16]
   1a948:	2b00      	cmp	r3, #0
   1a94a:	dd05      	ble.n	1a958 <_dtoa_r+0x810>
   1a94c:	4649      	mov	r1, r9
   1a94e:	001a      	movs	r2, r3
   1a950:	4650      	mov	r0, sl
   1a952:	f001 fb0b 	bl	1bf6c <__lshift>
   1a956:	4681      	mov	r9, r0
   1a958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a95a:	2b00      	cmp	r3, #0
   1a95c:	d000      	beq.n	1a960 <_dtoa_r+0x818>
   1a95e:	e094      	b.n	1aa8a <_dtoa_r+0x942>
   1a960:	9b07      	ldr	r3, [sp, #28]
   1a962:	2b00      	cmp	r3, #0
   1a964:	dc00      	bgt.n	1a968 <_dtoa_r+0x820>
   1a966:	e175      	b.n	1ac54 <_dtoa_r+0xb0c>
   1a968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1a96a:	2b00      	cmp	r3, #0
   1a96c:	d100      	bne.n	1a970 <_dtoa_r+0x828>
   1a96e:	e0a6      	b.n	1aabe <_dtoa_r+0x976>
   1a970:	9b08      	ldr	r3, [sp, #32]
   1a972:	2b00      	cmp	r3, #0
   1a974:	dd05      	ble.n	1a982 <_dtoa_r+0x83a>
   1a976:	4641      	mov	r1, r8
   1a978:	001a      	movs	r2, r3
   1a97a:	4650      	mov	r0, sl
   1a97c:	f001 faf6 	bl	1bf6c <__lshift>
   1a980:	4680      	mov	r8, r0
   1a982:	4643      	mov	r3, r8
   1a984:	930c      	str	r3, [sp, #48]	; 0x30
   1a986:	2c00      	cmp	r4, #0
   1a988:	d000      	beq.n	1a98c <_dtoa_r+0x844>
   1a98a:	e250      	b.n	1ae2e <_dtoa_r+0xce6>
   1a98c:	9c07      	ldr	r4, [sp, #28]
   1a98e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a990:	3c01      	subs	r4, #1
   1a992:	0023      	movs	r3, r4
   1a994:	4694      	mov	ip, r2
   1a996:	4463      	add	r3, ip
   1a998:	9308      	str	r3, [sp, #32]
   1a99a:	2301      	movs	r3, #1
   1a99c:	4033      	ands	r3, r6
   1a99e:	9307      	str	r3, [sp, #28]
   1a9a0:	464b      	mov	r3, r9
   1a9a2:	9306      	str	r3, [sp, #24]
   1a9a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a9a6:	4657      	mov	r7, sl
   1a9a8:	4645      	mov	r5, r8
   1a9aa:	465e      	mov	r6, fp
   1a9ac:	4692      	mov	sl, r2
   1a9ae:	4698      	mov	r8, r3
   1a9b0:	9b06      	ldr	r3, [sp, #24]
   1a9b2:	0030      	movs	r0, r6
   1a9b4:	0019      	movs	r1, r3
   1a9b6:	4699      	mov	r9, r3
   1a9b8:	f7ff fb1c 	bl	19ff4 <quorem>
   1a9bc:	0003      	movs	r3, r0
   1a9be:	900b      	str	r0, [sp, #44]	; 0x2c
   1a9c0:	3330      	adds	r3, #48	; 0x30
   1a9c2:	0029      	movs	r1, r5
   1a9c4:	0030      	movs	r0, r6
   1a9c6:	9304      	str	r3, [sp, #16]
   1a9c8:	f001 fb30 	bl	1c02c <__mcmp>
   1a9cc:	4649      	mov	r1, r9
   1a9ce:	0004      	movs	r4, r0
   1a9d0:	4642      	mov	r2, r8
   1a9d2:	0038      	movs	r0, r7
   1a9d4:	f001 fb44 	bl	1c060 <__mdiff>
   1a9d8:	68c3      	ldr	r3, [r0, #12]
   1a9da:	4681      	mov	r9, r0
   1a9dc:	2b00      	cmp	r3, #0
   1a9de:	d000      	beq.n	1a9e2 <_dtoa_r+0x89a>
   1a9e0:	e11e      	b.n	1ac20 <_dtoa_r+0xad8>
   1a9e2:	0001      	movs	r1, r0
   1a9e4:	0030      	movs	r0, r6
   1a9e6:	f001 fb21 	bl	1c02c <__mcmp>
   1a9ea:	4683      	mov	fp, r0
   1a9ec:	4649      	mov	r1, r9
   1a9ee:	0038      	movs	r0, r7
   1a9f0:	f001 f910 	bl	1bc14 <_Bfree>
   1a9f4:	465b      	mov	r3, fp
   1a9f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1a9f8:	4313      	orrs	r3, r2
   1a9fa:	d103      	bne.n	1aa04 <_dtoa_r+0x8bc>
   1a9fc:	9b07      	ldr	r3, [sp, #28]
   1a9fe:	2b00      	cmp	r3, #0
   1aa00:	d100      	bne.n	1aa04 <_dtoa_r+0x8bc>
   1aa02:	e306      	b.n	1b012 <_dtoa_r+0xeca>
   1aa04:	2c00      	cmp	r4, #0
   1aa06:	da00      	bge.n	1aa0a <_dtoa_r+0x8c2>
   1aa08:	e1a8      	b.n	1ad5c <_dtoa_r+0xc14>
   1aa0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1aa0c:	431c      	orrs	r4, r3
   1aa0e:	d103      	bne.n	1aa18 <_dtoa_r+0x8d0>
   1aa10:	9b07      	ldr	r3, [sp, #28]
   1aa12:	2b00      	cmp	r3, #0
   1aa14:	d100      	bne.n	1aa18 <_dtoa_r+0x8d0>
   1aa16:	e1a1      	b.n	1ad5c <_dtoa_r+0xc14>
   1aa18:	465b      	mov	r3, fp
   1aa1a:	2b00      	cmp	r3, #0
   1aa1c:	dd00      	ble.n	1aa20 <_dtoa_r+0x8d8>
   1aa1e:	e282      	b.n	1af26 <_dtoa_r+0xdde>
   1aa20:	4669      	mov	r1, sp
   1aa22:	4652      	mov	r2, sl
   1aa24:	4653      	mov	r3, sl
   1aa26:	7c09      	ldrb	r1, [r1, #16]
   1aa28:	1c5c      	adds	r4, r3, #1
   1aa2a:	7011      	strb	r1, [r2, #0]
   1aa2c:	9a08      	ldr	r2, [sp, #32]
   1aa2e:	4552      	cmp	r2, sl
   1aa30:	d100      	bne.n	1aa34 <_dtoa_r+0x8ec>
   1aa32:	e28a      	b.n	1af4a <_dtoa_r+0xe02>
   1aa34:	0031      	movs	r1, r6
   1aa36:	2300      	movs	r3, #0
   1aa38:	220a      	movs	r2, #10
   1aa3a:	0038      	movs	r0, r7
   1aa3c:	f001 f8f4 	bl	1bc28 <__multadd>
   1aa40:	2300      	movs	r3, #0
   1aa42:	0006      	movs	r6, r0
   1aa44:	220a      	movs	r2, #10
   1aa46:	0029      	movs	r1, r5
   1aa48:	0038      	movs	r0, r7
   1aa4a:	4545      	cmp	r5, r8
   1aa4c:	d100      	bne.n	1aa50 <_dtoa_r+0x908>
   1aa4e:	e0e1      	b.n	1ac14 <_dtoa_r+0xacc>
   1aa50:	f001 f8ea 	bl	1bc28 <__multadd>
   1aa54:	4641      	mov	r1, r8
   1aa56:	0005      	movs	r5, r0
   1aa58:	2300      	movs	r3, #0
   1aa5a:	220a      	movs	r2, #10
   1aa5c:	0038      	movs	r0, r7
   1aa5e:	f001 f8e3 	bl	1bc28 <__multadd>
   1aa62:	46a2      	mov	sl, r4
   1aa64:	4680      	mov	r8, r0
   1aa66:	e7a3      	b.n	1a9b0 <_dtoa_r+0x868>
   1aa68:	201c      	movs	r0, #28
   1aa6a:	9b06      	ldr	r3, [sp, #24]
   1aa6c:	469c      	mov	ip, r3
   1aa6e:	4484      	add	ip, r0
   1aa70:	4663      	mov	r3, ip
   1aa72:	9306      	str	r3, [sp, #24]
   1aa74:	9b08      	ldr	r3, [sp, #32]
   1aa76:	469c      	mov	ip, r3
   1aa78:	4484      	add	ip, r0
   1aa7a:	4663      	mov	r3, ip
   1aa7c:	9308      	str	r3, [sp, #32]
   1aa7e:	9b04      	ldr	r3, [sp, #16]
   1aa80:	469c      	mov	ip, r3
   1aa82:	4484      	add	ip, r0
   1aa84:	4663      	mov	r3, ip
   1aa86:	9304      	str	r3, [sp, #16]
   1aa88:	e754      	b.n	1a934 <_dtoa_r+0x7ec>
   1aa8a:	4649      	mov	r1, r9
   1aa8c:	4658      	mov	r0, fp
   1aa8e:	f001 facd 	bl	1c02c <__mcmp>
   1aa92:	2800      	cmp	r0, #0
   1aa94:	db00      	blt.n	1aa98 <_dtoa_r+0x950>
   1aa96:	e763      	b.n	1a960 <_dtoa_r+0x818>
   1aa98:	9b03      	ldr	r3, [sp, #12]
   1aa9a:	4659      	mov	r1, fp
   1aa9c:	3b01      	subs	r3, #1
   1aa9e:	9303      	str	r3, [sp, #12]
   1aaa0:	220a      	movs	r2, #10
   1aaa2:	2300      	movs	r3, #0
   1aaa4:	4650      	mov	r0, sl
   1aaa6:	f001 f8bf 	bl	1bc28 <__multadd>
   1aaaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1aaac:	4683      	mov	fp, r0
   1aaae:	2b00      	cmp	r3, #0
   1aab0:	d000      	beq.n	1aab4 <_dtoa_r+0x96c>
   1aab2:	e2ca      	b.n	1b04a <_dtoa_r+0xf02>
   1aab4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1aab6:	2b00      	cmp	r3, #0
   1aab8:	dc00      	bgt.n	1aabc <_dtoa_r+0x974>
   1aaba:	e2d8      	b.n	1b06e <_dtoa_r+0xf26>
   1aabc:	9307      	str	r3, [sp, #28]
   1aabe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1aac0:	465d      	mov	r5, fp
   1aac2:	2400      	movs	r4, #0
   1aac4:	9f07      	ldr	r7, [sp, #28]
   1aac6:	469b      	mov	fp, r3
   1aac8:	e006      	b.n	1aad8 <_dtoa_r+0x990>
   1aaca:	0029      	movs	r1, r5
   1aacc:	2300      	movs	r3, #0
   1aace:	220a      	movs	r2, #10
   1aad0:	4650      	mov	r0, sl
   1aad2:	f001 f8a9 	bl	1bc28 <__multadd>
   1aad6:	0005      	movs	r5, r0
   1aad8:	4649      	mov	r1, r9
   1aada:	0028      	movs	r0, r5
   1aadc:	f7ff fa8a 	bl	19ff4 <quorem>
   1aae0:	465b      	mov	r3, fp
   1aae2:	3030      	adds	r0, #48	; 0x30
   1aae4:	5518      	strb	r0, [r3, r4]
   1aae6:	3401      	adds	r4, #1
   1aae8:	42bc      	cmp	r4, r7
   1aaea:	dbee      	blt.n	1aaca <_dtoa_r+0x982>
   1aaec:	46ab      	mov	fp, r5
   1aaee:	0006      	movs	r6, r0
   1aaf0:	9c07      	ldr	r4, [sp, #28]
   1aaf2:	2c00      	cmp	r4, #0
   1aaf4:	dc00      	bgt.n	1aaf8 <_dtoa_r+0x9b0>
   1aaf6:	e237      	b.n	1af68 <_dtoa_r+0xe20>
   1aaf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1aafa:	2700      	movs	r7, #0
   1aafc:	469c      	mov	ip, r3
   1aafe:	4464      	add	r4, ip
   1ab00:	4659      	mov	r1, fp
   1ab02:	2201      	movs	r2, #1
   1ab04:	4650      	mov	r0, sl
   1ab06:	f001 fa31 	bl	1bf6c <__lshift>
   1ab0a:	4649      	mov	r1, r9
   1ab0c:	4683      	mov	fp, r0
   1ab0e:	f001 fa8d 	bl	1c02c <__mcmp>
   1ab12:	2800      	cmp	r0, #0
   1ab14:	dc00      	bgt.n	1ab18 <_dtoa_r+0x9d0>
   1ab16:	e144      	b.n	1ada2 <_dtoa_r+0xc5a>
   1ab18:	1e65      	subs	r5, r4, #1
   1ab1a:	782b      	ldrb	r3, [r5, #0]
   1ab1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ab1e:	e006      	b.n	1ab2e <_dtoa_r+0x9e6>
   1ab20:	4295      	cmp	r5, r2
   1ab22:	d100      	bne.n	1ab26 <_dtoa_r+0x9de>
   1ab24:	e0b1      	b.n	1ac8a <_dtoa_r+0xb42>
   1ab26:	3c02      	subs	r4, #2
   1ab28:	7823      	ldrb	r3, [r4, #0]
   1ab2a:	002c      	movs	r4, r5
   1ab2c:	3d01      	subs	r5, #1
   1ab2e:	2b39      	cmp	r3, #57	; 0x39
   1ab30:	d0f6      	beq.n	1ab20 <_dtoa_r+0x9d8>
   1ab32:	3301      	adds	r3, #1
   1ab34:	702b      	strb	r3, [r5, #0]
   1ab36:	4649      	mov	r1, r9
   1ab38:	4650      	mov	r0, sl
   1ab3a:	f001 f86b 	bl	1bc14 <_Bfree>
   1ab3e:	4643      	mov	r3, r8
   1ab40:	2b00      	cmp	r3, #0
   1ab42:	d100      	bne.n	1ab46 <_dtoa_r+0x9fe>
   1ab44:	e52f      	b.n	1a5a6 <_dtoa_r+0x45e>
   1ab46:	2f00      	cmp	r7, #0
   1ab48:	d005      	beq.n	1ab56 <_dtoa_r+0xa0e>
   1ab4a:	4547      	cmp	r7, r8
   1ab4c:	d003      	beq.n	1ab56 <_dtoa_r+0xa0e>
   1ab4e:	0039      	movs	r1, r7
   1ab50:	4650      	mov	r0, sl
   1ab52:	f001 f85f 	bl	1bc14 <_Bfree>
   1ab56:	4641      	mov	r1, r8
   1ab58:	4650      	mov	r0, sl
   1ab5a:	f001 f85b 	bl	1bc14 <_Bfree>
   1ab5e:	e522      	b.n	1a5a6 <_dtoa_r+0x45e>
   1ab60:	0013      	movs	r3, r2
   1ab62:	e675      	b.n	1a850 <_dtoa_r+0x708>
   1ab64:	2e00      	cmp	r6, #0
   1ab66:	d000      	beq.n	1ab6a <_dtoa_r+0xa22>
   1ab68:	e6ab      	b.n	1a8c2 <_dtoa_r+0x77a>
   1ab6a:	033b      	lsls	r3, r7, #12
   1ab6c:	2400      	movs	r4, #0
   1ab6e:	2b00      	cmp	r3, #0
   1ab70:	d000      	beq.n	1ab74 <_dtoa_r+0xa2c>
   1ab72:	e6bf      	b.n	1a8f4 <_dtoa_r+0x7ac>
   1ab74:	4bba      	ldr	r3, [pc, #744]	; (1ae60 <_dtoa_r+0xd18>)
   1ab76:	423b      	tst	r3, r7
   1ab78:	d100      	bne.n	1ab7c <_dtoa_r+0xa34>
   1ab7a:	e6bb      	b.n	1a8f4 <_dtoa_r+0x7ac>
   1ab7c:	9b06      	ldr	r3, [sp, #24]
   1ab7e:	3401      	adds	r4, #1
   1ab80:	3301      	adds	r3, #1
   1ab82:	9306      	str	r3, [sp, #24]
   1ab84:	9b04      	ldr	r3, [sp, #16]
   1ab86:	3301      	adds	r3, #1
   1ab88:	9304      	str	r3, [sp, #16]
   1ab8a:	e6b3      	b.n	1a8f4 <_dtoa_r+0x7ac>
   1ab8c:	2301      	movs	r3, #1
   1ab8e:	930b      	str	r3, [sp, #44]	; 0x2c
   1ab90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1ab92:	2b00      	cmp	r3, #0
   1ab94:	dc00      	bgt.n	1ab98 <_dtoa_r+0xa50>
   1ab96:	e0d1      	b.n	1ad3c <_dtoa_r+0xbf4>
   1ab98:	001d      	movs	r5, r3
   1ab9a:	4698      	mov	r8, r3
   1ab9c:	930e      	str	r3, [sp, #56]	; 0x38
   1ab9e:	9307      	str	r3, [sp, #28]
   1aba0:	f7ff fbc8 	bl	1a334 <_dtoa_r+0x1ec>
   1aba4:	9b07      	ldr	r3, [sp, #28]
   1aba6:	2b00      	cmp	r3, #0
   1aba8:	dd00      	ble.n	1abac <_dtoa_r+0xa64>
   1abaa:	e553      	b.n	1a654 <_dtoa_r+0x50c>
   1abac:	d000      	beq.n	1abb0 <_dtoa_r+0xa68>
   1abae:	e0ad      	b.n	1ad0c <_dtoa_r+0xbc4>
   1abb0:	9804      	ldr	r0, [sp, #16]
   1abb2:	9905      	ldr	r1, [sp, #20]
   1abb4:	2200      	movs	r2, #0
   1abb6:	4bab      	ldr	r3, [pc, #684]	; (1ae64 <_dtoa_r+0xd1c>)
   1abb8:	f7fc f804 	bl	16bc4 <__aeabi_dmul>
   1abbc:	003b      	movs	r3, r7
   1abbe:	0032      	movs	r2, r6
   1abc0:	f7fc fed0 	bl	17964 <__aeabi_dcmpge>
   1abc4:	2300      	movs	r3, #0
   1abc6:	4699      	mov	r9, r3
   1abc8:	4698      	mov	r8, r3
   1abca:	2800      	cmp	r0, #0
   1abcc:	d055      	beq.n	1ac7a <_dtoa_r+0xb32>
   1abce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1abd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1abd2:	43db      	mvns	r3, r3
   1abd4:	9303      	str	r3, [sp, #12]
   1abd6:	4649      	mov	r1, r9
   1abd8:	4650      	mov	r0, sl
   1abda:	f001 f81b 	bl	1bc14 <_Bfree>
   1abde:	4643      	mov	r3, r8
   1abe0:	2b00      	cmp	r3, #0
   1abe2:	d100      	bne.n	1abe6 <_dtoa_r+0xa9e>
   1abe4:	e4df      	b.n	1a5a6 <_dtoa_r+0x45e>
   1abe6:	e7b6      	b.n	1ab56 <_dtoa_r+0xa0e>
   1abe8:	464a      	mov	r2, r9
   1abea:	4659      	mov	r1, fp
   1abec:	4650      	mov	r0, sl
   1abee:	f001 f95d 	bl	1beac <__pow5mult>
   1abf2:	4683      	mov	fp, r0
   1abf4:	e653      	b.n	1a89e <_dtoa_r+0x756>
   1abf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1abf8:	2a00      	cmp	r2, #0
   1abfa:	d100      	bne.n	1abfe <_dtoa_r+0xab6>
   1abfc:	e1b6      	b.n	1af6c <_dtoa_r+0xe24>
   1abfe:	4a9a      	ldr	r2, [pc, #616]	; (1ae68 <_dtoa_r+0xd20>)
   1ac00:	464c      	mov	r4, r9
   1ac02:	4694      	mov	ip, r2
   1ac04:	9a06      	ldr	r2, [sp, #24]
   1ac06:	4463      	add	r3, ip
   1ac08:	9208      	str	r2, [sp, #32]
   1ac0a:	e5d5      	b.n	1a7b8 <_dtoa_r+0x670>
   1ac0c:	2e00      	cmp	r6, #0
   1ac0e:	d000      	beq.n	1ac12 <_dtoa_r+0xaca>
   1ac10:	e670      	b.n	1a8f4 <_dtoa_r+0x7ac>
   1ac12:	e7aa      	b.n	1ab6a <_dtoa_r+0xa22>
   1ac14:	f001 f808 	bl	1bc28 <__multadd>
   1ac18:	46a2      	mov	sl, r4
   1ac1a:	0005      	movs	r5, r0
   1ac1c:	4680      	mov	r8, r0
   1ac1e:	e6c7      	b.n	1a9b0 <_dtoa_r+0x868>
   1ac20:	2301      	movs	r3, #1
   1ac22:	469b      	mov	fp, r3
   1ac24:	e6e2      	b.n	1a9ec <_dtoa_r+0x8a4>
   1ac26:	2300      	movs	r3, #0
   1ac28:	930b      	str	r3, [sp, #44]	; 0x2c
   1ac2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ac2c:	2b02      	cmp	r3, #2
   1ac2e:	d0af      	beq.n	1ab90 <_dtoa_r+0xa48>
   1ac30:	2400      	movs	r4, #0
   1ac32:	4653      	mov	r3, sl
   1ac34:	0021      	movs	r1, r4
   1ac36:	645c      	str	r4, [r3, #68]	; 0x44
   1ac38:	4650      	mov	r0, sl
   1ac3a:	f000 ffc3 	bl	1bbc4 <_Balloc>
   1ac3e:	4653      	mov	r3, sl
   1ac40:	6418      	str	r0, [r3, #64]	; 0x40
   1ac42:	2301      	movs	r3, #1
   1ac44:	425b      	negs	r3, r3
   1ac46:	9307      	str	r3, [sp, #28]
   1ac48:	930e      	str	r3, [sp, #56]	; 0x38
   1ac4a:	3302      	adds	r3, #2
   1ac4c:	900a      	str	r0, [sp, #40]	; 0x28
   1ac4e:	9423      	str	r4, [sp, #140]	; 0x8c
   1ac50:	930b      	str	r3, [sp, #44]	; 0x2c
   1ac52:	e4ec      	b.n	1a62e <_dtoa_r+0x4e6>
   1ac54:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1ac56:	2b02      	cmp	r3, #2
   1ac58:	dc00      	bgt.n	1ac5c <_dtoa_r+0xb14>
   1ac5a:	e685      	b.n	1a968 <_dtoa_r+0x820>
   1ac5c:	9b07      	ldr	r3, [sp, #28]
   1ac5e:	2b00      	cmp	r3, #0
   1ac60:	d1b5      	bne.n	1abce <_dtoa_r+0xa86>
   1ac62:	4649      	mov	r1, r9
   1ac64:	2205      	movs	r2, #5
   1ac66:	4650      	mov	r0, sl
   1ac68:	f000 ffde 	bl	1bc28 <__multadd>
   1ac6c:	4681      	mov	r9, r0
   1ac6e:	0001      	movs	r1, r0
   1ac70:	4658      	mov	r0, fp
   1ac72:	f001 f9db 	bl	1c02c <__mcmp>
   1ac76:	2800      	cmp	r0, #0
   1ac78:	dda9      	ble.n	1abce <_dtoa_r+0xa86>
   1ac7a:	2331      	movs	r3, #49	; 0x31
   1ac7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ac7e:	7013      	strb	r3, [r2, #0]
   1ac80:	9b03      	ldr	r3, [sp, #12]
   1ac82:	1c54      	adds	r4, r2, #1
   1ac84:	3301      	adds	r3, #1
   1ac86:	9303      	str	r3, [sp, #12]
   1ac88:	e7a5      	b.n	1abd6 <_dtoa_r+0xa8e>
   1ac8a:	9b03      	ldr	r3, [sp, #12]
   1ac8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ac8e:	3301      	adds	r3, #1
   1ac90:	9303      	str	r3, [sp, #12]
   1ac92:	2331      	movs	r3, #49	; 0x31
   1ac94:	7013      	strb	r3, [r2, #0]
   1ac96:	e74e      	b.n	1ab36 <_dtoa_r+0x9ee>
   1ac98:	2300      	movs	r3, #0
   1ac9a:	930b      	str	r3, [sp, #44]	; 0x2c
   1ac9c:	f7ff fb3d 	bl	1a31a <_dtoa_r+0x1d2>
   1aca0:	9b06      	ldr	r3, [sp, #24]
   1aca2:	465c      	mov	r4, fp
   1aca4:	469b      	mov	fp, r3
   1aca6:	9b07      	ldr	r3, [sp, #28]
   1aca8:	469a      	mov	sl, r3
   1acaa:	e47c      	b.n	1a5a6 <_dtoa_r+0x45e>
   1acac:	4640      	mov	r0, r8
   1acae:	f002 f813 	bl	1ccd8 <__aeabi_i2d>
   1acb2:	0032      	movs	r2, r6
   1acb4:	003b      	movs	r3, r7
   1acb6:	f7fb ff85 	bl	16bc4 <__aeabi_dmul>
   1acba:	2200      	movs	r2, #0
   1acbc:	4b6b      	ldr	r3, [pc, #428]	; (1ae6c <_dtoa_r+0xd24>)
   1acbe:	f7fb f93d 	bl	15f3c <__aeabi_dadd>
   1acc2:	4a6b      	ldr	r2, [pc, #428]	; (1ae70 <_dtoa_r+0xd28>)
   1acc4:	000b      	movs	r3, r1
   1acc6:	4694      	mov	ip, r2
   1acc8:	4463      	add	r3, ip
   1acca:	9008      	str	r0, [sp, #32]
   1accc:	9109      	str	r1, [sp, #36]	; 0x24
   1acce:	9309      	str	r3, [sp, #36]	; 0x24
   1acd0:	2200      	movs	r2, #0
   1acd2:	4b64      	ldr	r3, [pc, #400]	; (1ae64 <_dtoa_r+0xd1c>)
   1acd4:	0030      	movs	r0, r6
   1acd6:	0039      	movs	r1, r7
   1acd8:	f7fc f9f4 	bl	170c4 <__aeabi_dsub>
   1acdc:	9e08      	ldr	r6, [sp, #32]
   1acde:	9f09      	ldr	r7, [sp, #36]	; 0x24
   1ace0:	0032      	movs	r2, r6
   1ace2:	003b      	movs	r3, r7
   1ace4:	0004      	movs	r4, r0
   1ace6:	000d      	movs	r5, r1
   1ace8:	f7fc fe32 	bl	17950 <__aeabi_dcmpgt>
   1acec:	2800      	cmp	r0, #0
   1acee:	d000      	beq.n	1acf2 <_dtoa_r+0xbaa>
   1acf0:	e0b2      	b.n	1ae58 <_dtoa_r+0xd10>
   1acf2:	2080      	movs	r0, #128	; 0x80
   1acf4:	0600      	lsls	r0, r0, #24
   1acf6:	4684      	mov	ip, r0
   1acf8:	0039      	movs	r1, r7
   1acfa:	4461      	add	r1, ip
   1acfc:	000b      	movs	r3, r1
   1acfe:	0032      	movs	r2, r6
   1ad00:	0020      	movs	r0, r4
   1ad02:	0029      	movs	r1, r5
   1ad04:	f7fc fe10 	bl	17928 <__aeabi_dcmplt>
   1ad08:	2800      	cmp	r0, #0
   1ad0a:	d057      	beq.n	1adbc <_dtoa_r+0xc74>
   1ad0c:	2300      	movs	r3, #0
   1ad0e:	4699      	mov	r9, r3
   1ad10:	4698      	mov	r8, r3
   1ad12:	e75c      	b.n	1abce <_dtoa_r+0xa86>
   1ad14:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ad16:	f7ff fa4c 	bl	1a1b2 <_dtoa_r+0x6a>
   1ad1a:	1ae2      	subs	r2, r4, r3
   1ad1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ad1e:	46a1      	mov	r9, r4
   1ad20:	469c      	mov	ip, r3
   1ad22:	4494      	add	ip, r2
   1ad24:	4663      	mov	r3, ip
   1ad26:	2400      	movs	r4, #0
   1ad28:	930d      	str	r3, [sp, #52]	; 0x34
   1ad2a:	e53e      	b.n	1a7aa <_dtoa_r+0x662>
   1ad2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1ad2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ad30:	9208      	str	r2, [sp, #32]
   1ad32:	9309      	str	r3, [sp, #36]	; 0x24
   1ad34:	2302      	movs	r3, #2
   1ad36:	4698      	mov	r8, r3
   1ad38:	f7ff fb3a 	bl	1a3b0 <_dtoa_r+0x268>
   1ad3c:	2300      	movs	r3, #0
   1ad3e:	4652      	mov	r2, sl
   1ad40:	2100      	movs	r1, #0
   1ad42:	6453      	str	r3, [r2, #68]	; 0x44
   1ad44:	4650      	mov	r0, sl
   1ad46:	f000 ff3d 	bl	1bbc4 <_Balloc>
   1ad4a:	4653      	mov	r3, sl
   1ad4c:	6418      	str	r0, [r3, #64]	; 0x40
   1ad4e:	2301      	movs	r3, #1
   1ad50:	900a      	str	r0, [sp, #40]	; 0x28
   1ad52:	9307      	str	r3, [sp, #28]
   1ad54:	9323      	str	r3, [sp, #140]	; 0x8c
   1ad56:	930e      	str	r3, [sp, #56]	; 0x38
   1ad58:	f7ff fb07 	bl	1a36a <_dtoa_r+0x222>
   1ad5c:	4643      	mov	r3, r8
   1ad5e:	930c      	str	r3, [sp, #48]	; 0x30
   1ad60:	465b      	mov	r3, fp
   1ad62:	9a06      	ldr	r2, [sp, #24]
   1ad64:	46a8      	mov	r8, r5
   1ad66:	46b3      	mov	fp, r6
   1ad68:	4655      	mov	r5, sl
   1ad6a:	9e04      	ldr	r6, [sp, #16]
   1ad6c:	4691      	mov	r9, r2
   1ad6e:	46ba      	mov	sl, r7
   1ad70:	2b00      	cmp	r3, #0
   1ad72:	dd10      	ble.n	1ad96 <_dtoa_r+0xc4e>
   1ad74:	4659      	mov	r1, fp
   1ad76:	2201      	movs	r2, #1
   1ad78:	0038      	movs	r0, r7
   1ad7a:	f001 f8f7 	bl	1bf6c <__lshift>
   1ad7e:	4649      	mov	r1, r9
   1ad80:	4683      	mov	fp, r0
   1ad82:	f001 f953 	bl	1c02c <__mcmp>
   1ad86:	2800      	cmp	r0, #0
   1ad88:	dc00      	bgt.n	1ad8c <_dtoa_r+0xc44>
   1ad8a:	e157      	b.n	1b03c <_dtoa_r+0xef4>
   1ad8c:	2e39      	cmp	r6, #57	; 0x39
   1ad8e:	d100      	bne.n	1ad92 <_dtoa_r+0xc4a>
   1ad90:	e122      	b.n	1afd8 <_dtoa_r+0xe90>
   1ad92:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1ad94:	3631      	adds	r6, #49	; 0x31
   1ad96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ad98:	4647      	mov	r7, r8
   1ad9a:	1c6c      	adds	r4, r5, #1
   1ad9c:	702e      	strb	r6, [r5, #0]
   1ad9e:	4698      	mov	r8, r3
   1ada0:	e6c9      	b.n	1ab36 <_dtoa_r+0x9ee>
   1ada2:	2800      	cmp	r0, #0
   1ada4:	d103      	bne.n	1adae <_dtoa_r+0xc66>
   1ada6:	07f3      	lsls	r3, r6, #31
   1ada8:	d501      	bpl.n	1adae <_dtoa_r+0xc66>
   1adaa:	e6b5      	b.n	1ab18 <_dtoa_r+0x9d0>
   1adac:	001c      	movs	r4, r3
   1adae:	1e63      	subs	r3, r4, #1
   1adb0:	781a      	ldrb	r2, [r3, #0]
   1adb2:	2a30      	cmp	r2, #48	; 0x30
   1adb4:	d0fa      	beq.n	1adac <_dtoa_r+0xc64>
   1adb6:	e6be      	b.n	1ab36 <_dtoa_r+0x9ee>
   1adb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1adba:	4699      	mov	r9, r3
   1adbc:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1adbe:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1adc0:	e435      	b.n	1a62e <_dtoa_r+0x4e6>
   1adc2:	2501      	movs	r5, #1
   1adc4:	f7ff fab4 	bl	1a330 <_dtoa_r+0x1e8>
   1adc8:	9b03      	ldr	r3, [sp, #12]
   1adca:	2b00      	cmp	r3, #0
   1adcc:	d100      	bne.n	1add0 <_dtoa_r+0xc88>
   1adce:	e0d4      	b.n	1af7a <_dtoa_r+0xe32>
   1add0:	9810      	ldr	r0, [sp, #64]	; 0x40
   1add2:	9911      	ldr	r1, [sp, #68]	; 0x44
   1add4:	425c      	negs	r4, r3
   1add6:	230f      	movs	r3, #15
   1add8:	4a26      	ldr	r2, [pc, #152]	; (1ae74 <_dtoa_r+0xd2c>)
   1adda:	4023      	ands	r3, r4
   1addc:	00db      	lsls	r3, r3, #3
   1adde:	18d3      	adds	r3, r2, r3
   1ade0:	681a      	ldr	r2, [r3, #0]
   1ade2:	685b      	ldr	r3, [r3, #4]
   1ade4:	f7fb feee 	bl	16bc4 <__aeabi_dmul>
   1ade8:	1124      	asrs	r4, r4, #4
   1adea:	0006      	movs	r6, r0
   1adec:	000f      	movs	r7, r1
   1adee:	2c00      	cmp	r4, #0
   1adf0:	d100      	bne.n	1adf4 <_dtoa_r+0xcac>
   1adf2:	e149      	b.n	1b088 <_dtoa_r+0xf40>
   1adf4:	2302      	movs	r3, #2
   1adf6:	4698      	mov	r8, r3
   1adf8:	4d1f      	ldr	r5, [pc, #124]	; (1ae78 <_dtoa_r+0xd30>)
   1adfa:	2301      	movs	r3, #1
   1adfc:	4223      	tst	r3, r4
   1adfe:	d009      	beq.n	1ae14 <_dtoa_r+0xccc>
   1ae00:	469c      	mov	ip, r3
   1ae02:	682a      	ldr	r2, [r5, #0]
   1ae04:	686b      	ldr	r3, [r5, #4]
   1ae06:	0030      	movs	r0, r6
   1ae08:	0039      	movs	r1, r7
   1ae0a:	44e0      	add	r8, ip
   1ae0c:	f7fb feda 	bl	16bc4 <__aeabi_dmul>
   1ae10:	0006      	movs	r6, r0
   1ae12:	000f      	movs	r7, r1
   1ae14:	1064      	asrs	r4, r4, #1
   1ae16:	3508      	adds	r5, #8
   1ae18:	2c00      	cmp	r4, #0
   1ae1a:	d1ee      	bne.n	1adfa <_dtoa_r+0xcb2>
   1ae1c:	f7ff fae4 	bl	1a3e8 <_dtoa_r+0x2a0>
   1ae20:	9b03      	ldr	r3, [sp, #12]
   1ae22:	2730      	movs	r7, #48	; 0x30
   1ae24:	3301      	adds	r3, #1
   1ae26:	9303      	str	r3, [sp, #12]
   1ae28:	2330      	movs	r3, #48	; 0x30
   1ae2a:	702b      	strb	r3, [r5, #0]
   1ae2c:	e4ac      	b.n	1a788 <_dtoa_r+0x640>
   1ae2e:	6859      	ldr	r1, [r3, #4]
   1ae30:	4650      	mov	r0, sl
   1ae32:	f000 fec7 	bl	1bbc4 <_Balloc>
   1ae36:	4643      	mov	r3, r8
   1ae38:	4641      	mov	r1, r8
   1ae3a:	0004      	movs	r4, r0
   1ae3c:	691b      	ldr	r3, [r3, #16]
   1ae3e:	310c      	adds	r1, #12
   1ae40:	1c9a      	adds	r2, r3, #2
   1ae42:	0092      	lsls	r2, r2, #2
   1ae44:	300c      	adds	r0, #12
   1ae46:	f7fd f9a5 	bl	18194 <memcpy>
   1ae4a:	2201      	movs	r2, #1
   1ae4c:	0021      	movs	r1, r4
   1ae4e:	4650      	mov	r0, sl
   1ae50:	f001 f88c 	bl	1bf6c <__lshift>
   1ae54:	900c      	str	r0, [sp, #48]	; 0x30
   1ae56:	e599      	b.n	1a98c <_dtoa_r+0x844>
   1ae58:	2300      	movs	r3, #0
   1ae5a:	4699      	mov	r9, r3
   1ae5c:	4698      	mov	r8, r3
   1ae5e:	e70c      	b.n	1ac7a <_dtoa_r+0xb32>
   1ae60:	7ff00000 	.word	0x7ff00000
   1ae64:	40140000 	.word	0x40140000
   1ae68:	00000433 	.word	0x00000433
   1ae6c:	401c0000 	.word	0x401c0000
   1ae70:	fcc00000 	.word	0xfcc00000
   1ae74:	0001fab8 	.word	0x0001fab8
   1ae78:	0001fa90 	.word	0x0001fa90
   1ae7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1ae7e:	498f      	ldr	r1, [pc, #572]	; (1b0bc <_dtoa_r+0xf74>)
   1ae80:	3b01      	subs	r3, #1
   1ae82:	00db      	lsls	r3, r3, #3
   1ae84:	18c9      	adds	r1, r1, r3
   1ae86:	6808      	ldr	r0, [r1, #0]
   1ae88:	6849      	ldr	r1, [r1, #4]
   1ae8a:	9a08      	ldr	r2, [sp, #32]
   1ae8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ae8e:	f7fb fe99 	bl	16bc4 <__aeabi_dmul>
   1ae92:	9014      	str	r0, [sp, #80]	; 0x50
   1ae94:	9115      	str	r1, [sp, #84]	; 0x54
   1ae96:	0039      	movs	r1, r7
   1ae98:	0030      	movs	r0, r6
   1ae9a:	f7fc fc29 	bl	176f0 <__aeabi_d2iz>
   1ae9e:	0005      	movs	r5, r0
   1aea0:	f001 ff1a 	bl	1ccd8 <__aeabi_i2d>
   1aea4:	0002      	movs	r2, r0
   1aea6:	000b      	movs	r3, r1
   1aea8:	0030      	movs	r0, r6
   1aeaa:	0039      	movs	r1, r7
   1aeac:	f7fc f90a 	bl	170c4 <__aeabi_dsub>
   1aeb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1aeb2:	9008      	str	r0, [sp, #32]
   1aeb4:	9109      	str	r1, [sp, #36]	; 0x24
   1aeb6:	990a      	ldr	r1, [sp, #40]	; 0x28
   1aeb8:	001a      	movs	r2, r3
   1aeba:	468c      	mov	ip, r1
   1aebc:	3530      	adds	r5, #48	; 0x30
   1aebe:	4462      	add	r2, ip
   1aec0:	1c4c      	adds	r4, r1, #1
   1aec2:	700d      	strb	r5, [r1, #0]
   1aec4:	4690      	mov	r8, r2
   1aec6:	2b01      	cmp	r3, #1
   1aec8:	d01b      	beq.n	1af02 <_dtoa_r+0xdba>
   1aeca:	9808      	ldr	r0, [sp, #32]
   1aecc:	9909      	ldr	r1, [sp, #36]	; 0x24
   1aece:	0025      	movs	r5, r4
   1aed0:	2200      	movs	r2, #0
   1aed2:	4b7b      	ldr	r3, [pc, #492]	; (1b0c0 <_dtoa_r+0xf78>)
   1aed4:	f7fb fe76 	bl	16bc4 <__aeabi_dmul>
   1aed8:	000f      	movs	r7, r1
   1aeda:	0006      	movs	r6, r0
   1aedc:	f7fc fc08 	bl	176f0 <__aeabi_d2iz>
   1aee0:	0004      	movs	r4, r0
   1aee2:	f001 fef9 	bl	1ccd8 <__aeabi_i2d>
   1aee6:	3430      	adds	r4, #48	; 0x30
   1aee8:	0002      	movs	r2, r0
   1aeea:	000b      	movs	r3, r1
   1aeec:	0030      	movs	r0, r6
   1aeee:	0039      	movs	r1, r7
   1aef0:	f7fc f8e8 	bl	170c4 <__aeabi_dsub>
   1aef4:	702c      	strb	r4, [r5, #0]
   1aef6:	3501      	adds	r5, #1
   1aef8:	45a8      	cmp	r8, r5
   1aefa:	d1e9      	bne.n	1aed0 <_dtoa_r+0xd88>
   1aefc:	4644      	mov	r4, r8
   1aefe:	9008      	str	r0, [sp, #32]
   1af00:	9109      	str	r1, [sp, #36]	; 0x24
   1af02:	9814      	ldr	r0, [sp, #80]	; 0x50
   1af04:	9915      	ldr	r1, [sp, #84]	; 0x54
   1af06:	2200      	movs	r2, #0
   1af08:	4b6e      	ldr	r3, [pc, #440]	; (1b0c4 <_dtoa_r+0xf7c>)
   1af0a:	f7fb f817 	bl	15f3c <__aeabi_dadd>
   1af0e:	9a08      	ldr	r2, [sp, #32]
   1af10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1af12:	f7fc fd09 	bl	17928 <__aeabi_dcmplt>
   1af16:	2800      	cmp	r0, #0
   1af18:	d067      	beq.n	1afea <_dtoa_r+0xea2>
   1af1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1af1c:	1e65      	subs	r5, r4, #1
   1af1e:	9303      	str	r3, [sp, #12]
   1af20:	782f      	ldrb	r7, [r5, #0]
   1af22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1af24:	e42e      	b.n	1a784 <_dtoa_r+0x63c>
   1af26:	4643      	mov	r3, r8
   1af28:	46b3      	mov	fp, r6
   1af2a:	930c      	str	r3, [sp, #48]	; 0x30
   1af2c:	9e04      	ldr	r6, [sp, #16]
   1af2e:	9b06      	ldr	r3, [sp, #24]
   1af30:	46a8      	mov	r8, r5
   1af32:	4699      	mov	r9, r3
   1af34:	4655      	mov	r5, sl
   1af36:	46ba      	mov	sl, r7
   1af38:	2e39      	cmp	r6, #57	; 0x39
   1af3a:	d04d      	beq.n	1afd8 <_dtoa_r+0xe90>
   1af3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1af3e:	3601      	adds	r6, #1
   1af40:	4647      	mov	r7, r8
   1af42:	1c6c      	adds	r4, r5, #1
   1af44:	702e      	strb	r6, [r5, #0]
   1af46:	4698      	mov	r8, r3
   1af48:	e5f5      	b.n	1ab36 <_dtoa_r+0x9ee>
   1af4a:	4642      	mov	r2, r8
   1af4c:	9b06      	ldr	r3, [sp, #24]
   1af4e:	46b3      	mov	fp, r6
   1af50:	46ba      	mov	sl, r7
   1af52:	9e04      	ldr	r6, [sp, #16]
   1af54:	4699      	mov	r9, r3
   1af56:	002f      	movs	r7, r5
   1af58:	4690      	mov	r8, r2
   1af5a:	e5d1      	b.n	1ab00 <_dtoa_r+0x9b8>
   1af5c:	9b06      	ldr	r3, [sp, #24]
   1af5e:	9a07      	ldr	r2, [sp, #28]
   1af60:	1a9b      	subs	r3, r3, r2
   1af62:	9308      	str	r3, [sp, #32]
   1af64:	2300      	movs	r3, #0
   1af66:	e427      	b.n	1a7b8 <_dtoa_r+0x670>
   1af68:	2401      	movs	r4, #1
   1af6a:	e5c5      	b.n	1aaf8 <_dtoa_r+0x9b0>
   1af6c:	2336      	movs	r3, #54	; 0x36
   1af6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1af70:	464c      	mov	r4, r9
   1af72:	1a9b      	subs	r3, r3, r2
   1af74:	9a06      	ldr	r2, [sp, #24]
   1af76:	9208      	str	r2, [sp, #32]
   1af78:	e41e      	b.n	1a7b8 <_dtoa_r+0x670>
   1af7a:	2302      	movs	r3, #2
   1af7c:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1af7e:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1af80:	4698      	mov	r8, r3
   1af82:	f7ff fa31 	bl	1a3e8 <_dtoa_r+0x2a0>
   1af86:	9b07      	ldr	r3, [sp, #28]
   1af88:	2b00      	cmp	r3, #0
   1af8a:	d100      	bne.n	1af8e <_dtoa_r+0xe46>
   1af8c:	e68e      	b.n	1acac <_dtoa_r+0xb64>
   1af8e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1af90:	2c00      	cmp	r4, #0
   1af92:	dc00      	bgt.n	1af96 <_dtoa_r+0xe4e>
   1af94:	e712      	b.n	1adbc <_dtoa_r+0xc74>
   1af96:	9b03      	ldr	r3, [sp, #12]
   1af98:	2200      	movs	r2, #0
   1af9a:	3b01      	subs	r3, #1
   1af9c:	9313      	str	r3, [sp, #76]	; 0x4c
   1af9e:	0030      	movs	r0, r6
   1afa0:	4b47      	ldr	r3, [pc, #284]	; (1b0c0 <_dtoa_r+0xf78>)
   1afa2:	0039      	movs	r1, r7
   1afa4:	f7fb fe0e 	bl	16bc4 <__aeabi_dmul>
   1afa8:	0006      	movs	r6, r0
   1afaa:	4640      	mov	r0, r8
   1afac:	000f      	movs	r7, r1
   1afae:	3001      	adds	r0, #1
   1afb0:	f001 fe92 	bl	1ccd8 <__aeabi_i2d>
   1afb4:	0032      	movs	r2, r6
   1afb6:	003b      	movs	r3, r7
   1afb8:	f7fb fe04 	bl	16bc4 <__aeabi_dmul>
   1afbc:	2200      	movs	r2, #0
   1afbe:	4b42      	ldr	r3, [pc, #264]	; (1b0c8 <_dtoa_r+0xf80>)
   1afc0:	f7fa ffbc 	bl	15f3c <__aeabi_dadd>
   1afc4:	4a41      	ldr	r2, [pc, #260]	; (1b0cc <_dtoa_r+0xf84>)
   1afc6:	000b      	movs	r3, r1
   1afc8:	4694      	mov	ip, r2
   1afca:	4463      	add	r3, ip
   1afcc:	9008      	str	r0, [sp, #32]
   1afce:	9109      	str	r1, [sp, #36]	; 0x24
   1afd0:	9412      	str	r4, [sp, #72]	; 0x48
   1afd2:	9309      	str	r3, [sp, #36]	; 0x24
   1afd4:	f7ff fa30 	bl	1a438 <_dtoa_r+0x2f0>
   1afd8:	2339      	movs	r3, #57	; 0x39
   1afda:	702b      	strb	r3, [r5, #0]
   1afdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1afde:	4647      	mov	r7, r8
   1afe0:	1c6c      	adds	r4, r5, #1
   1afe2:	4698      	mov	r8, r3
   1afe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1afe6:	2339      	movs	r3, #57	; 0x39
   1afe8:	e5a1      	b.n	1ab2e <_dtoa_r+0x9e6>
   1afea:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1afec:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1afee:	2000      	movs	r0, #0
   1aff0:	4934      	ldr	r1, [pc, #208]	; (1b0c4 <_dtoa_r+0xf7c>)
   1aff2:	f7fc f867 	bl	170c4 <__aeabi_dsub>
   1aff6:	9a08      	ldr	r2, [sp, #32]
   1aff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1affa:	f7fc fca9 	bl	17950 <__aeabi_dcmpgt>
   1affe:	2800      	cmp	r0, #0
   1b000:	d101      	bne.n	1b006 <_dtoa_r+0xebe>
   1b002:	e6db      	b.n	1adbc <_dtoa_r+0xc74>
   1b004:	001c      	movs	r4, r3
   1b006:	1e63      	subs	r3, r4, #1
   1b008:	781a      	ldrb	r2, [r3, #0]
   1b00a:	2a30      	cmp	r2, #48	; 0x30
   1b00c:	d0fa      	beq.n	1b004 <_dtoa_r+0xebc>
   1b00e:	f7ff fac8 	bl	1a5a2 <_dtoa_r+0x45a>
   1b012:	4643      	mov	r3, r8
   1b014:	46b3      	mov	fp, r6
   1b016:	930c      	str	r3, [sp, #48]	; 0x30
   1b018:	9e04      	ldr	r6, [sp, #16]
   1b01a:	9b06      	ldr	r3, [sp, #24]
   1b01c:	46a8      	mov	r8, r5
   1b01e:	4699      	mov	r9, r3
   1b020:	4655      	mov	r5, sl
   1b022:	46ba      	mov	sl, r7
   1b024:	2e39      	cmp	r6, #57	; 0x39
   1b026:	d0d7      	beq.n	1afd8 <_dtoa_r+0xe90>
   1b028:	2c00      	cmp	r4, #0
   1b02a:	dd00      	ble.n	1b02e <_dtoa_r+0xee6>
   1b02c:	e6b1      	b.n	1ad92 <_dtoa_r+0xc4a>
   1b02e:	e6b2      	b.n	1ad96 <_dtoa_r+0xc4e>
   1b030:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1b032:	464d      	mov	r5, r9
   1b034:	9203      	str	r2, [sp, #12]
   1b036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b038:	f7ff fba4 	bl	1a784 <_dtoa_r+0x63c>
   1b03c:	2800      	cmp	r0, #0
   1b03e:	d000      	beq.n	1b042 <_dtoa_r+0xefa>
   1b040:	e6a9      	b.n	1ad96 <_dtoa_r+0xc4e>
   1b042:	07f3      	lsls	r3, r6, #31
   1b044:	d400      	bmi.n	1b048 <_dtoa_r+0xf00>
   1b046:	e6a6      	b.n	1ad96 <_dtoa_r+0xc4e>
   1b048:	e6a0      	b.n	1ad8c <_dtoa_r+0xc44>
   1b04a:	2300      	movs	r3, #0
   1b04c:	4641      	mov	r1, r8
   1b04e:	220a      	movs	r2, #10
   1b050:	4650      	mov	r0, sl
   1b052:	f000 fde9 	bl	1bc28 <__multadd>
   1b056:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b058:	4680      	mov	r8, r0
   1b05a:	2b00      	cmp	r3, #0
   1b05c:	dd01      	ble.n	1b062 <_dtoa_r+0xf1a>
   1b05e:	9307      	str	r3, [sp, #28]
   1b060:	e486      	b.n	1a970 <_dtoa_r+0x828>
   1b062:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1b064:	2b02      	cmp	r3, #2
   1b066:	dc1f      	bgt.n	1b0a8 <_dtoa_r+0xf60>
   1b068:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b06a:	9307      	str	r3, [sp, #28]
   1b06c:	e480      	b.n	1a970 <_dtoa_r+0x828>
   1b06e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1b070:	2b02      	cmp	r3, #2
   1b072:	dc19      	bgt.n	1b0a8 <_dtoa_r+0xf60>
   1b074:	4649      	mov	r1, r9
   1b076:	f7fe ffbd 	bl	19ff4 <quorem>
   1b07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b07c:	3030      	adds	r0, #48	; 0x30
   1b07e:	7018      	strb	r0, [r3, #0]
   1b080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b082:	0006      	movs	r6, r0
   1b084:	9307      	str	r3, [sp, #28]
   1b086:	e533      	b.n	1aaf0 <_dtoa_r+0x9a8>
   1b088:	2302      	movs	r3, #2
   1b08a:	4698      	mov	r8, r3
   1b08c:	f7ff f9ac 	bl	1a3e8 <_dtoa_r+0x2a0>
   1b090:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b092:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1b094:	9303      	str	r3, [sp, #12]
   1b096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b098:	001d      	movs	r5, r3
   1b09a:	f7ff fb73 	bl	1a784 <_dtoa_r+0x63c>
   1b09e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b0a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1b0a2:	9303      	str	r3, [sp, #12]
   1b0a4:	f7ff fa7f 	bl	1a5a6 <_dtoa_r+0x45e>
   1b0a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1b0aa:	9307      	str	r3, [sp, #28]
   1b0ac:	e5d6      	b.n	1ac5c <_dtoa_r+0xb14>
   1b0ae:	2b04      	cmp	r3, #4
   1b0b0:	d100      	bne.n	1b0b4 <_dtoa_r+0xf6c>
   1b0b2:	e43f      	b.n	1a934 <_dtoa_r+0x7ec>
   1b0b4:	233c      	movs	r3, #60	; 0x3c
   1b0b6:	1a18      	subs	r0, r3, r0
   1b0b8:	e4d7      	b.n	1aa6a <_dtoa_r+0x922>
   1b0ba:	46c0      	nop			; (mov r8, r8)
   1b0bc:	0001fab8 	.word	0x0001fab8
   1b0c0:	40240000 	.word	0x40240000
   1b0c4:	3fe00000 	.word	0x3fe00000
   1b0c8:	401c0000 	.word	0x401c0000
   1b0cc:	fcc00000 	.word	0xfcc00000

0001b0d0 <__sflush_r>:
   1b0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0d2:	46c6      	mov	lr, r8
   1b0d4:	b500      	push	{lr}
   1b0d6:	230c      	movs	r3, #12
   1b0d8:	5eca      	ldrsh	r2, [r1, r3]
   1b0da:	4680      	mov	r8, r0
   1b0dc:	b293      	uxth	r3, r2
   1b0de:	000c      	movs	r4, r1
   1b0e0:	0719      	lsls	r1, r3, #28
   1b0e2:	d440      	bmi.n	1b166 <__sflush_r+0x96>
   1b0e4:	2380      	movs	r3, #128	; 0x80
   1b0e6:	011b      	lsls	r3, r3, #4
   1b0e8:	4313      	orrs	r3, r2
   1b0ea:	6862      	ldr	r2, [r4, #4]
   1b0ec:	81a3      	strh	r3, [r4, #12]
   1b0ee:	2a00      	cmp	r2, #0
   1b0f0:	dc00      	bgt.n	1b0f4 <__sflush_r+0x24>
   1b0f2:	e070      	b.n	1b1d6 <__sflush_r+0x106>
   1b0f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1b0f6:	2e00      	cmp	r6, #0
   1b0f8:	d031      	beq.n	1b15e <__sflush_r+0x8e>
   1b0fa:	4642      	mov	r2, r8
   1b0fc:	4641      	mov	r1, r8
   1b0fe:	6815      	ldr	r5, [r2, #0]
   1b100:	2200      	movs	r2, #0
   1b102:	b29b      	uxth	r3, r3
   1b104:	600a      	str	r2, [r1, #0]
   1b106:	04da      	lsls	r2, r3, #19
   1b108:	d400      	bmi.n	1b10c <__sflush_r+0x3c>
   1b10a:	e069      	b.n	1b1e0 <__sflush_r+0x110>
   1b10c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1b10e:	075b      	lsls	r3, r3, #29
   1b110:	d506      	bpl.n	1b120 <__sflush_r+0x50>
   1b112:	6863      	ldr	r3, [r4, #4]
   1b114:	1ad2      	subs	r2, r2, r3
   1b116:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1b118:	2b00      	cmp	r3, #0
   1b11a:	d001      	beq.n	1b120 <__sflush_r+0x50>
   1b11c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1b11e:	1ad2      	subs	r2, r2, r3
   1b120:	2300      	movs	r3, #0
   1b122:	69e1      	ldr	r1, [r4, #28]
   1b124:	4640      	mov	r0, r8
   1b126:	47b0      	blx	r6
   1b128:	1c43      	adds	r3, r0, #1
   1b12a:	d03d      	beq.n	1b1a8 <__sflush_r+0xd8>
   1b12c:	89a3      	ldrh	r3, [r4, #12]
   1b12e:	4a3a      	ldr	r2, [pc, #232]	; (1b218 <__sflush_r+0x148>)
   1b130:	4013      	ands	r3, r2
   1b132:	2200      	movs	r2, #0
   1b134:	6062      	str	r2, [r4, #4]
   1b136:	6922      	ldr	r2, [r4, #16]
   1b138:	b21b      	sxth	r3, r3
   1b13a:	81a3      	strh	r3, [r4, #12]
   1b13c:	6022      	str	r2, [r4, #0]
   1b13e:	04db      	lsls	r3, r3, #19
   1b140:	d447      	bmi.n	1b1d2 <__sflush_r+0x102>
   1b142:	4643      	mov	r3, r8
   1b144:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1b146:	601d      	str	r5, [r3, #0]
   1b148:	2900      	cmp	r1, #0
   1b14a:	d008      	beq.n	1b15e <__sflush_r+0x8e>
   1b14c:	0023      	movs	r3, r4
   1b14e:	3340      	adds	r3, #64	; 0x40
   1b150:	4299      	cmp	r1, r3
   1b152:	d002      	beq.n	1b15a <__sflush_r+0x8a>
   1b154:	4640      	mov	r0, r8
   1b156:	f000 f967 	bl	1b428 <_free_r>
   1b15a:	2300      	movs	r3, #0
   1b15c:	6323      	str	r3, [r4, #48]	; 0x30
   1b15e:	2000      	movs	r0, #0
   1b160:	bc04      	pop	{r2}
   1b162:	4690      	mov	r8, r2
   1b164:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b166:	6926      	ldr	r6, [r4, #16]
   1b168:	2e00      	cmp	r6, #0
   1b16a:	d0f8      	beq.n	1b15e <__sflush_r+0x8e>
   1b16c:	6822      	ldr	r2, [r4, #0]
   1b16e:	6026      	str	r6, [r4, #0]
   1b170:	1b95      	subs	r5, r2, r6
   1b172:	2200      	movs	r2, #0
   1b174:	079b      	lsls	r3, r3, #30
   1b176:	d100      	bne.n	1b17a <__sflush_r+0xaa>
   1b178:	6962      	ldr	r2, [r4, #20]
   1b17a:	60a2      	str	r2, [r4, #8]
   1b17c:	2d00      	cmp	r5, #0
   1b17e:	dc04      	bgt.n	1b18a <__sflush_r+0xba>
   1b180:	e7ed      	b.n	1b15e <__sflush_r+0x8e>
   1b182:	1836      	adds	r6, r6, r0
   1b184:	1a2d      	subs	r5, r5, r0
   1b186:	2d00      	cmp	r5, #0
   1b188:	dde9      	ble.n	1b15e <__sflush_r+0x8e>
   1b18a:	002b      	movs	r3, r5
   1b18c:	0032      	movs	r2, r6
   1b18e:	69e1      	ldr	r1, [r4, #28]
   1b190:	4640      	mov	r0, r8
   1b192:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1b194:	47b8      	blx	r7
   1b196:	2800      	cmp	r0, #0
   1b198:	dcf3      	bgt.n	1b182 <__sflush_r+0xb2>
   1b19a:	2240      	movs	r2, #64	; 0x40
   1b19c:	2001      	movs	r0, #1
   1b19e:	89a3      	ldrh	r3, [r4, #12]
   1b1a0:	4240      	negs	r0, r0
   1b1a2:	4313      	orrs	r3, r2
   1b1a4:	81a3      	strh	r3, [r4, #12]
   1b1a6:	e7db      	b.n	1b160 <__sflush_r+0x90>
   1b1a8:	4643      	mov	r3, r8
   1b1aa:	6819      	ldr	r1, [r3, #0]
   1b1ac:	291d      	cmp	r1, #29
   1b1ae:	d8f4      	bhi.n	1b19a <__sflush_r+0xca>
   1b1b0:	4b1a      	ldr	r3, [pc, #104]	; (1b21c <__sflush_r+0x14c>)
   1b1b2:	2201      	movs	r2, #1
   1b1b4:	40cb      	lsrs	r3, r1
   1b1b6:	439a      	bics	r2, r3
   1b1b8:	d1ef      	bne.n	1b19a <__sflush_r+0xca>
   1b1ba:	89a3      	ldrh	r3, [r4, #12]
   1b1bc:	4e16      	ldr	r6, [pc, #88]	; (1b218 <__sflush_r+0x148>)
   1b1be:	6062      	str	r2, [r4, #4]
   1b1c0:	4033      	ands	r3, r6
   1b1c2:	6922      	ldr	r2, [r4, #16]
   1b1c4:	b21b      	sxth	r3, r3
   1b1c6:	81a3      	strh	r3, [r4, #12]
   1b1c8:	6022      	str	r2, [r4, #0]
   1b1ca:	04db      	lsls	r3, r3, #19
   1b1cc:	d5b9      	bpl.n	1b142 <__sflush_r+0x72>
   1b1ce:	2900      	cmp	r1, #0
   1b1d0:	d1b7      	bne.n	1b142 <__sflush_r+0x72>
   1b1d2:	6520      	str	r0, [r4, #80]	; 0x50
   1b1d4:	e7b5      	b.n	1b142 <__sflush_r+0x72>
   1b1d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1b1d8:	2a00      	cmp	r2, #0
   1b1da:	dd00      	ble.n	1b1de <__sflush_r+0x10e>
   1b1dc:	e78a      	b.n	1b0f4 <__sflush_r+0x24>
   1b1de:	e7be      	b.n	1b15e <__sflush_r+0x8e>
   1b1e0:	2200      	movs	r2, #0
   1b1e2:	2301      	movs	r3, #1
   1b1e4:	69e1      	ldr	r1, [r4, #28]
   1b1e6:	4640      	mov	r0, r8
   1b1e8:	47b0      	blx	r6
   1b1ea:	0002      	movs	r2, r0
   1b1ec:	1c43      	adds	r3, r0, #1
   1b1ee:	d002      	beq.n	1b1f6 <__sflush_r+0x126>
   1b1f0:	89a3      	ldrh	r3, [r4, #12]
   1b1f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1b1f4:	e78b      	b.n	1b10e <__sflush_r+0x3e>
   1b1f6:	4643      	mov	r3, r8
   1b1f8:	681b      	ldr	r3, [r3, #0]
   1b1fa:	2b00      	cmp	r3, #0
   1b1fc:	d0f8      	beq.n	1b1f0 <__sflush_r+0x120>
   1b1fe:	2b1d      	cmp	r3, #29
   1b200:	d001      	beq.n	1b206 <__sflush_r+0x136>
   1b202:	2b16      	cmp	r3, #22
   1b204:	d103      	bne.n	1b20e <__sflush_r+0x13e>
   1b206:	4643      	mov	r3, r8
   1b208:	2000      	movs	r0, #0
   1b20a:	601d      	str	r5, [r3, #0]
   1b20c:	e7a8      	b.n	1b160 <__sflush_r+0x90>
   1b20e:	2140      	movs	r1, #64	; 0x40
   1b210:	89a3      	ldrh	r3, [r4, #12]
   1b212:	430b      	orrs	r3, r1
   1b214:	81a3      	strh	r3, [r4, #12]
   1b216:	e7a3      	b.n	1b160 <__sflush_r+0x90>
   1b218:	fffff7ff 	.word	0xfffff7ff
   1b21c:	20400001 	.word	0x20400001

0001b220 <_fflush_r>:
   1b220:	b570      	push	{r4, r5, r6, lr}
   1b222:	0005      	movs	r5, r0
   1b224:	000c      	movs	r4, r1
   1b226:	2800      	cmp	r0, #0
   1b228:	d002      	beq.n	1b230 <_fflush_r+0x10>
   1b22a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1b22c:	2b00      	cmp	r3, #0
   1b22e:	d016      	beq.n	1b25e <_fflush_r+0x3e>
   1b230:	220c      	movs	r2, #12
   1b232:	5ea3      	ldrsh	r3, [r4, r2]
   1b234:	2600      	movs	r6, #0
   1b236:	2b00      	cmp	r3, #0
   1b238:	d00f      	beq.n	1b25a <_fflush_r+0x3a>
   1b23a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1b23c:	07d2      	lsls	r2, r2, #31
   1b23e:	d401      	bmi.n	1b244 <_fflush_r+0x24>
   1b240:	059b      	lsls	r3, r3, #22
   1b242:	d513      	bpl.n	1b26c <_fflush_r+0x4c>
   1b244:	0021      	movs	r1, r4
   1b246:	0028      	movs	r0, r5
   1b248:	f7ff ff42 	bl	1b0d0 <__sflush_r>
   1b24c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1b24e:	0006      	movs	r6, r0
   1b250:	07db      	lsls	r3, r3, #31
   1b252:	d402      	bmi.n	1b25a <_fflush_r+0x3a>
   1b254:	89a3      	ldrh	r3, [r4, #12]
   1b256:	059b      	lsls	r3, r3, #22
   1b258:	d504      	bpl.n	1b264 <_fflush_r+0x44>
   1b25a:	0030      	movs	r0, r6
   1b25c:	bd70      	pop	{r4, r5, r6, pc}
   1b25e:	f000 f839 	bl	1b2d4 <__sinit>
   1b262:	e7e5      	b.n	1b230 <_fflush_r+0x10>
   1b264:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1b266:	f000 fb8d 	bl	1b984 <__retarget_lock_release_recursive>
   1b26a:	e7f6      	b.n	1b25a <_fflush_r+0x3a>
   1b26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1b26e:	f000 fb87 	bl	1b980 <__retarget_lock_acquire_recursive>
   1b272:	e7e7      	b.n	1b244 <_fflush_r+0x24>

0001b274 <_cleanup_r>:
   1b274:	b510      	push	{r4, lr}
   1b276:	4902      	ldr	r1, [pc, #8]	; (1b280 <_cleanup_r+0xc>)
   1b278:	f000 fb36 	bl	1b8e8 <_fwalk_reent>
   1b27c:	bd10      	pop	{r4, pc}
   1b27e:	46c0      	nop			; (mov r8, r8)
   1b280:	0001c9e9 	.word	0x0001c9e9

0001b284 <std.isra.0>:
   1b284:	2300      	movs	r3, #0
   1b286:	b510      	push	{r4, lr}
   1b288:	0004      	movs	r4, r0
   1b28a:	6003      	str	r3, [r0, #0]
   1b28c:	6043      	str	r3, [r0, #4]
   1b28e:	6083      	str	r3, [r0, #8]
   1b290:	8181      	strh	r1, [r0, #12]
   1b292:	6643      	str	r3, [r0, #100]	; 0x64
   1b294:	81c2      	strh	r2, [r0, #14]
   1b296:	6103      	str	r3, [r0, #16]
   1b298:	6143      	str	r3, [r0, #20]
   1b29a:	6183      	str	r3, [r0, #24]
   1b29c:	2208      	movs	r2, #8
   1b29e:	2100      	movs	r1, #0
   1b2a0:	305c      	adds	r0, #92	; 0x5c
   1b2a2:	f7fc ffb9 	bl	18218 <memset>
   1b2a6:	0020      	movs	r0, r4
   1b2a8:	4b06      	ldr	r3, [pc, #24]	; (1b2c4 <std.isra.0+0x40>)
   1b2aa:	61e4      	str	r4, [r4, #28]
   1b2ac:	6223      	str	r3, [r4, #32]
   1b2ae:	4b06      	ldr	r3, [pc, #24]	; (1b2c8 <std.isra.0+0x44>)
   1b2b0:	3058      	adds	r0, #88	; 0x58
   1b2b2:	6263      	str	r3, [r4, #36]	; 0x24
   1b2b4:	4b05      	ldr	r3, [pc, #20]	; (1b2cc <std.isra.0+0x48>)
   1b2b6:	62a3      	str	r3, [r4, #40]	; 0x28
   1b2b8:	4b05      	ldr	r3, [pc, #20]	; (1b2d0 <std.isra.0+0x4c>)
   1b2ba:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b2bc:	f000 fb5c 	bl	1b978 <__retarget_lock_init_recursive>
   1b2c0:	bd10      	pop	{r4, pc}
   1b2c2:	46c0      	nop			; (mov r8, r8)
   1b2c4:	0001c645 	.word	0x0001c645
   1b2c8:	0001c66d 	.word	0x0001c66d
   1b2cc:	0001c6a9 	.word	0x0001c6a9
   1b2d0:	0001c6d5 	.word	0x0001c6d5

0001b2d4 <__sinit>:
   1b2d4:	b570      	push	{r4, r5, r6, lr}
   1b2d6:	0004      	movs	r4, r0
   1b2d8:	4d14      	ldr	r5, [pc, #80]	; (1b32c <__sinit+0x58>)
   1b2da:	0028      	movs	r0, r5
   1b2dc:	f000 fb50 	bl	1b980 <__retarget_lock_acquire_recursive>
   1b2e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1b2e2:	2b00      	cmp	r3, #0
   1b2e4:	d11d      	bne.n	1b322 <__sinit+0x4e>
   1b2e6:	4a12      	ldr	r2, [pc, #72]	; (1b330 <__sinit+0x5c>)
   1b2e8:	2104      	movs	r1, #4
   1b2ea:	63e2      	str	r2, [r4, #60]	; 0x3c
   1b2ec:	22b8      	movs	r2, #184	; 0xb8
   1b2ee:	0092      	lsls	r2, r2, #2
   1b2f0:	50a3      	str	r3, [r4, r2]
   1b2f2:	23b9      	movs	r3, #185	; 0xb9
   1b2f4:	2203      	movs	r2, #3
   1b2f6:	009b      	lsls	r3, r3, #2
   1b2f8:	50e2      	str	r2, [r4, r3]
   1b2fa:	3308      	adds	r3, #8
   1b2fc:	18e2      	adds	r2, r4, r3
   1b2fe:	3b04      	subs	r3, #4
   1b300:	50e2      	str	r2, [r4, r3]
   1b302:	6860      	ldr	r0, [r4, #4]
   1b304:	2200      	movs	r2, #0
   1b306:	f7ff ffbd 	bl	1b284 <std.isra.0>
   1b30a:	2201      	movs	r2, #1
   1b30c:	2109      	movs	r1, #9
   1b30e:	68a0      	ldr	r0, [r4, #8]
   1b310:	f7ff ffb8 	bl	1b284 <std.isra.0>
   1b314:	2202      	movs	r2, #2
   1b316:	2112      	movs	r1, #18
   1b318:	68e0      	ldr	r0, [r4, #12]
   1b31a:	f7ff ffb3 	bl	1b284 <std.isra.0>
   1b31e:	2301      	movs	r3, #1
   1b320:	63a3      	str	r3, [r4, #56]	; 0x38
   1b322:	0028      	movs	r0, r5
   1b324:	f000 fb2e 	bl	1b984 <__retarget_lock_release_recursive>
   1b328:	bd70      	pop	{r4, r5, r6, pc}
   1b32a:	46c0      	nop			; (mov r8, r8)
   1b32c:	2000200c 	.word	0x2000200c
   1b330:	0001b275 	.word	0x0001b275

0001b334 <__sfp_lock_acquire>:
   1b334:	b510      	push	{r4, lr}
   1b336:	4802      	ldr	r0, [pc, #8]	; (1b340 <__sfp_lock_acquire+0xc>)
   1b338:	f000 fb22 	bl	1b980 <__retarget_lock_acquire_recursive>
   1b33c:	bd10      	pop	{r4, pc}
   1b33e:	46c0      	nop			; (mov r8, r8)
   1b340:	20002020 	.word	0x20002020

0001b344 <__sfp_lock_release>:
   1b344:	b510      	push	{r4, lr}
   1b346:	4802      	ldr	r0, [pc, #8]	; (1b350 <__sfp_lock_release+0xc>)
   1b348:	f000 fb1c 	bl	1b984 <__retarget_lock_release_recursive>
   1b34c:	bd10      	pop	{r4, pc}
   1b34e:	46c0      	nop			; (mov r8, r8)
   1b350:	20002020 	.word	0x20002020

0001b354 <__libc_fini_array>:
   1b354:	b570      	push	{r4, r5, r6, lr}
   1b356:	4b09      	ldr	r3, [pc, #36]	; (1b37c <__libc_fini_array+0x28>)
   1b358:	4c09      	ldr	r4, [pc, #36]	; (1b380 <__libc_fini_array+0x2c>)
   1b35a:	1ae4      	subs	r4, r4, r3
   1b35c:	10a4      	asrs	r4, r4, #2
   1b35e:	d009      	beq.n	1b374 <__libc_fini_array+0x20>
   1b360:	4a08      	ldr	r2, [pc, #32]	; (1b384 <__libc_fini_array+0x30>)
   1b362:	18a5      	adds	r5, r4, r2
   1b364:	00ad      	lsls	r5, r5, #2
   1b366:	18ed      	adds	r5, r5, r3
   1b368:	682b      	ldr	r3, [r5, #0]
   1b36a:	3c01      	subs	r4, #1
   1b36c:	4798      	blx	r3
   1b36e:	3d04      	subs	r5, #4
   1b370:	2c00      	cmp	r4, #0
   1b372:	d1f9      	bne.n	1b368 <__libc_fini_array+0x14>
   1b374:	f004 fc96 	bl	1fca4 <_fini>
   1b378:	bd70      	pop	{r4, r5, r6, pc}
   1b37a:	46c0      	nop			; (mov r8, r8)
   1b37c:	0001fcb0 	.word	0x0001fcb0
   1b380:	0001fcb4 	.word	0x0001fcb4
   1b384:	3fffffff 	.word	0x3fffffff

0001b388 <_malloc_trim_r>:
   1b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b38a:	000c      	movs	r4, r1
   1b38c:	0006      	movs	r6, r0
   1b38e:	f7fc ff8d 	bl	182ac <__malloc_lock>
   1b392:	4f20      	ldr	r7, [pc, #128]	; (1b414 <_malloc_trim_r+0x8c>)
   1b394:	68bb      	ldr	r3, [r7, #8]
   1b396:	685d      	ldr	r5, [r3, #4]
   1b398:	2303      	movs	r3, #3
   1b39a:	439d      	bics	r5, r3
   1b39c:	4b1e      	ldr	r3, [pc, #120]	; (1b418 <_malloc_trim_r+0x90>)
   1b39e:	1b2c      	subs	r4, r5, r4
   1b3a0:	469c      	mov	ip, r3
   1b3a2:	4464      	add	r4, ip
   1b3a4:	0b24      	lsrs	r4, r4, #12
   1b3a6:	4b1d      	ldr	r3, [pc, #116]	; (1b41c <_malloc_trim_r+0x94>)
   1b3a8:	3c01      	subs	r4, #1
   1b3aa:	0324      	lsls	r4, r4, #12
   1b3ac:	429c      	cmp	r4, r3
   1b3ae:	dd07      	ble.n	1b3c0 <_malloc_trim_r+0x38>
   1b3b0:	2100      	movs	r1, #0
   1b3b2:	0030      	movs	r0, r6
   1b3b4:	f7fd f824 	bl	18400 <_sbrk_r>
   1b3b8:	68bb      	ldr	r3, [r7, #8]
   1b3ba:	195b      	adds	r3, r3, r5
   1b3bc:	4298      	cmp	r0, r3
   1b3be:	d004      	beq.n	1b3ca <_malloc_trim_r+0x42>
   1b3c0:	0030      	movs	r0, r6
   1b3c2:	f7fc ff7b 	bl	182bc <__malloc_unlock>
   1b3c6:	2000      	movs	r0, #0
   1b3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b3ca:	4261      	negs	r1, r4
   1b3cc:	0030      	movs	r0, r6
   1b3ce:	f7fd f817 	bl	18400 <_sbrk_r>
   1b3d2:	1c43      	adds	r3, r0, #1
   1b3d4:	d00d      	beq.n	1b3f2 <_malloc_trim_r+0x6a>
   1b3d6:	2201      	movs	r2, #1
   1b3d8:	68bb      	ldr	r3, [r7, #8]
   1b3da:	1b2d      	subs	r5, r5, r4
   1b3dc:	4315      	orrs	r5, r2
   1b3de:	605d      	str	r5, [r3, #4]
   1b3e0:	4b0f      	ldr	r3, [pc, #60]	; (1b420 <_malloc_trim_r+0x98>)
   1b3e2:	0030      	movs	r0, r6
   1b3e4:	681a      	ldr	r2, [r3, #0]
   1b3e6:	1b14      	subs	r4, r2, r4
   1b3e8:	601c      	str	r4, [r3, #0]
   1b3ea:	f7fc ff67 	bl	182bc <__malloc_unlock>
   1b3ee:	2001      	movs	r0, #1
   1b3f0:	e7ea      	b.n	1b3c8 <_malloc_trim_r+0x40>
   1b3f2:	2100      	movs	r1, #0
   1b3f4:	0030      	movs	r0, r6
   1b3f6:	f7fd f803 	bl	18400 <_sbrk_r>
   1b3fa:	68ba      	ldr	r2, [r7, #8]
   1b3fc:	1a83      	subs	r3, r0, r2
   1b3fe:	2b0f      	cmp	r3, #15
   1b400:	ddde      	ble.n	1b3c0 <_malloc_trim_r+0x38>
   1b402:	4908      	ldr	r1, [pc, #32]	; (1b424 <_malloc_trim_r+0x9c>)
   1b404:	6809      	ldr	r1, [r1, #0]
   1b406:	1a40      	subs	r0, r0, r1
   1b408:	4905      	ldr	r1, [pc, #20]	; (1b420 <_malloc_trim_r+0x98>)
   1b40a:	6008      	str	r0, [r1, #0]
   1b40c:	2101      	movs	r1, #1
   1b40e:	430b      	orrs	r3, r1
   1b410:	6053      	str	r3, [r2, #4]
   1b412:	e7d5      	b.n	1b3c0 <_malloc_trim_r+0x38>
   1b414:	20000508 	.word	0x20000508
   1b418:	00000fef 	.word	0x00000fef
   1b41c:	00000fff 	.word	0x00000fff
   1b420:	200010b0 	.word	0x200010b0
   1b424:	20000910 	.word	0x20000910

0001b428 <_free_r>:
   1b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b42a:	0004      	movs	r4, r0
   1b42c:	1e0d      	subs	r5, r1, #0
   1b42e:	d03c      	beq.n	1b4aa <_free_r+0x82>
   1b430:	f7fc ff3c 	bl	182ac <__malloc_lock>
   1b434:	0029      	movs	r1, r5
   1b436:	3908      	subs	r1, #8
   1b438:	6848      	ldr	r0, [r1, #4]
   1b43a:	2301      	movs	r3, #1
   1b43c:	0005      	movs	r5, r0
   1b43e:	2603      	movs	r6, #3
   1b440:	439d      	bics	r5, r3
   1b442:	194a      	adds	r2, r1, r5
   1b444:	469c      	mov	ip, r3
   1b446:	4f61      	ldr	r7, [pc, #388]	; (1b5cc <_free_r+0x1a4>)
   1b448:	6853      	ldr	r3, [r2, #4]
   1b44a:	43b3      	bics	r3, r6
   1b44c:	68be      	ldr	r6, [r7, #8]
   1b44e:	42b2      	cmp	r2, r6
   1b450:	d056      	beq.n	1b500 <_free_r+0xd8>
   1b452:	4666      	mov	r6, ip
   1b454:	6053      	str	r3, [r2, #4]
   1b456:	4206      	tst	r6, r0
   1b458:	d10a      	bne.n	1b470 <_free_r+0x48>
   1b45a:	003e      	movs	r6, r7
   1b45c:	6808      	ldr	r0, [r1, #0]
   1b45e:	3608      	adds	r6, #8
   1b460:	1a09      	subs	r1, r1, r0
   1b462:	182d      	adds	r5, r5, r0
   1b464:	6888      	ldr	r0, [r1, #8]
   1b466:	42b0      	cmp	r0, r6
   1b468:	d065      	beq.n	1b536 <_free_r+0x10e>
   1b46a:	68ce      	ldr	r6, [r1, #12]
   1b46c:	60c6      	str	r6, [r0, #12]
   1b46e:	60b0      	str	r0, [r6, #8]
   1b470:	2001      	movs	r0, #1
   1b472:	18d6      	adds	r6, r2, r3
   1b474:	6876      	ldr	r6, [r6, #4]
   1b476:	4206      	tst	r6, r0
   1b478:	d033      	beq.n	1b4e2 <_free_r+0xba>
   1b47a:	4b55      	ldr	r3, [pc, #340]	; (1b5d0 <_free_r+0x1a8>)
   1b47c:	4328      	orrs	r0, r5
   1b47e:	6048      	str	r0, [r1, #4]
   1b480:	514d      	str	r5, [r1, r5]
   1b482:	429d      	cmp	r5, r3
   1b484:	d812      	bhi.n	1b4ac <_free_r+0x84>
   1b486:	08ed      	lsrs	r5, r5, #3
   1b488:	3bff      	subs	r3, #255	; 0xff
   1b48a:	10aa      	asrs	r2, r5, #2
   1b48c:	3bff      	subs	r3, #255	; 0xff
   1b48e:	4093      	lsls	r3, r2
   1b490:	687a      	ldr	r2, [r7, #4]
   1b492:	00ed      	lsls	r5, r5, #3
   1b494:	4313      	orrs	r3, r2
   1b496:	607b      	str	r3, [r7, #4]
   1b498:	19ef      	adds	r7, r5, r7
   1b49a:	68bb      	ldr	r3, [r7, #8]
   1b49c:	60cf      	str	r7, [r1, #12]
   1b49e:	608b      	str	r3, [r1, #8]
   1b4a0:	60b9      	str	r1, [r7, #8]
   1b4a2:	60d9      	str	r1, [r3, #12]
   1b4a4:	0020      	movs	r0, r4
   1b4a6:	f7fc ff09 	bl	182bc <__malloc_unlock>
   1b4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b4ac:	0a68      	lsrs	r0, r5, #9
   1b4ae:	2804      	cmp	r0, #4
   1b4b0:	d850      	bhi.n	1b554 <_free_r+0x12c>
   1b4b2:	09a8      	lsrs	r0, r5, #6
   1b4b4:	0002      	movs	r2, r0
   1b4b6:	3039      	adds	r0, #57	; 0x39
   1b4b8:	3238      	adds	r2, #56	; 0x38
   1b4ba:	00c0      	lsls	r0, r0, #3
   1b4bc:	1838      	adds	r0, r7, r0
   1b4be:	3808      	subs	r0, #8
   1b4c0:	6883      	ldr	r3, [r0, #8]
   1b4c2:	2603      	movs	r6, #3
   1b4c4:	4298      	cmp	r0, r3
   1b4c6:	d04c      	beq.n	1b562 <_free_r+0x13a>
   1b4c8:	685a      	ldr	r2, [r3, #4]
   1b4ca:	43b2      	bics	r2, r6
   1b4cc:	4295      	cmp	r5, r2
   1b4ce:	d230      	bcs.n	1b532 <_free_r+0x10a>
   1b4d0:	689b      	ldr	r3, [r3, #8]
   1b4d2:	4298      	cmp	r0, r3
   1b4d4:	d1f8      	bne.n	1b4c8 <_free_r+0xa0>
   1b4d6:	68c3      	ldr	r3, [r0, #12]
   1b4d8:	60cb      	str	r3, [r1, #12]
   1b4da:	6088      	str	r0, [r1, #8]
   1b4dc:	6099      	str	r1, [r3, #8]
   1b4de:	60c1      	str	r1, [r0, #12]
   1b4e0:	e7e0      	b.n	1b4a4 <_free_r+0x7c>
   1b4e2:	18ed      	adds	r5, r5, r3
   1b4e4:	4e3b      	ldr	r6, [pc, #236]	; (1b5d4 <_free_r+0x1ac>)
   1b4e6:	6893      	ldr	r3, [r2, #8]
   1b4e8:	42b3      	cmp	r3, r6
   1b4ea:	d042      	beq.n	1b572 <_free_r+0x14a>
   1b4ec:	68d2      	ldr	r2, [r2, #12]
   1b4ee:	4328      	orrs	r0, r5
   1b4f0:	60da      	str	r2, [r3, #12]
   1b4f2:	6093      	str	r3, [r2, #8]
   1b4f4:	4b36      	ldr	r3, [pc, #216]	; (1b5d0 <_free_r+0x1a8>)
   1b4f6:	6048      	str	r0, [r1, #4]
   1b4f8:	514d      	str	r5, [r1, r5]
   1b4fa:	429d      	cmp	r5, r3
   1b4fc:	d8d6      	bhi.n	1b4ac <_free_r+0x84>
   1b4fe:	e7c2      	b.n	1b486 <_free_r+0x5e>
   1b500:	4662      	mov	r2, ip
   1b502:	18eb      	adds	r3, r5, r3
   1b504:	4202      	tst	r2, r0
   1b506:	d106      	bne.n	1b516 <_free_r+0xee>
   1b508:	680a      	ldr	r2, [r1, #0]
   1b50a:	1a89      	subs	r1, r1, r2
   1b50c:	6888      	ldr	r0, [r1, #8]
   1b50e:	189b      	adds	r3, r3, r2
   1b510:	68ca      	ldr	r2, [r1, #12]
   1b512:	60c2      	str	r2, [r0, #12]
   1b514:	6090      	str	r0, [r2, #8]
   1b516:	2201      	movs	r2, #1
   1b518:	431a      	orrs	r2, r3
   1b51a:	604a      	str	r2, [r1, #4]
   1b51c:	4a2e      	ldr	r2, [pc, #184]	; (1b5d8 <_free_r+0x1b0>)
   1b51e:	60b9      	str	r1, [r7, #8]
   1b520:	6812      	ldr	r2, [r2, #0]
   1b522:	4293      	cmp	r3, r2
   1b524:	d3be      	bcc.n	1b4a4 <_free_r+0x7c>
   1b526:	4b2d      	ldr	r3, [pc, #180]	; (1b5dc <_free_r+0x1b4>)
   1b528:	0020      	movs	r0, r4
   1b52a:	6819      	ldr	r1, [r3, #0]
   1b52c:	f7ff ff2c 	bl	1b388 <_malloc_trim_r>
   1b530:	e7b8      	b.n	1b4a4 <_free_r+0x7c>
   1b532:	0018      	movs	r0, r3
   1b534:	e7cf      	b.n	1b4d6 <_free_r+0xae>
   1b536:	4666      	mov	r6, ip
   1b538:	18d0      	adds	r0, r2, r3
   1b53a:	6840      	ldr	r0, [r0, #4]
   1b53c:	4230      	tst	r0, r6
   1b53e:	d13f      	bne.n	1b5c0 <_free_r+0x198>
   1b540:	6890      	ldr	r0, [r2, #8]
   1b542:	195d      	adds	r5, r3, r5
   1b544:	68d3      	ldr	r3, [r2, #12]
   1b546:	60c3      	str	r3, [r0, #12]
   1b548:	6098      	str	r0, [r3, #8]
   1b54a:	4663      	mov	r3, ip
   1b54c:	432b      	orrs	r3, r5
   1b54e:	604b      	str	r3, [r1, #4]
   1b550:	514d      	str	r5, [r1, r5]
   1b552:	e7a7      	b.n	1b4a4 <_free_r+0x7c>
   1b554:	2814      	cmp	r0, #20
   1b556:	d814      	bhi.n	1b582 <_free_r+0x15a>
   1b558:	0002      	movs	r2, r0
   1b55a:	305c      	adds	r0, #92	; 0x5c
   1b55c:	325b      	adds	r2, #91	; 0x5b
   1b55e:	00c0      	lsls	r0, r0, #3
   1b560:	e7ac      	b.n	1b4bc <_free_r+0x94>
   1b562:	2301      	movs	r3, #1
   1b564:	1092      	asrs	r2, r2, #2
   1b566:	4093      	lsls	r3, r2
   1b568:	687a      	ldr	r2, [r7, #4]
   1b56a:	4313      	orrs	r3, r2
   1b56c:	607b      	str	r3, [r7, #4]
   1b56e:	0003      	movs	r3, r0
   1b570:	e7b2      	b.n	1b4d8 <_free_r+0xb0>
   1b572:	4328      	orrs	r0, r5
   1b574:	60d9      	str	r1, [r3, #12]
   1b576:	6099      	str	r1, [r3, #8]
   1b578:	60cb      	str	r3, [r1, #12]
   1b57a:	608b      	str	r3, [r1, #8]
   1b57c:	6048      	str	r0, [r1, #4]
   1b57e:	514d      	str	r5, [r1, r5]
   1b580:	e790      	b.n	1b4a4 <_free_r+0x7c>
   1b582:	2854      	cmp	r0, #84	; 0x54
   1b584:	d805      	bhi.n	1b592 <_free_r+0x16a>
   1b586:	0b28      	lsrs	r0, r5, #12
   1b588:	0002      	movs	r2, r0
   1b58a:	306f      	adds	r0, #111	; 0x6f
   1b58c:	326e      	adds	r2, #110	; 0x6e
   1b58e:	00c0      	lsls	r0, r0, #3
   1b590:	e794      	b.n	1b4bc <_free_r+0x94>
   1b592:	22aa      	movs	r2, #170	; 0xaa
   1b594:	0052      	lsls	r2, r2, #1
   1b596:	4290      	cmp	r0, r2
   1b598:	d805      	bhi.n	1b5a6 <_free_r+0x17e>
   1b59a:	0be8      	lsrs	r0, r5, #15
   1b59c:	0002      	movs	r2, r0
   1b59e:	3078      	adds	r0, #120	; 0x78
   1b5a0:	3277      	adds	r2, #119	; 0x77
   1b5a2:	00c0      	lsls	r0, r0, #3
   1b5a4:	e78a      	b.n	1b4bc <_free_r+0x94>
   1b5a6:	4a0e      	ldr	r2, [pc, #56]	; (1b5e0 <_free_r+0x1b8>)
   1b5a8:	4290      	cmp	r0, r2
   1b5aa:	d805      	bhi.n	1b5b8 <_free_r+0x190>
   1b5ac:	0ca8      	lsrs	r0, r5, #18
   1b5ae:	0002      	movs	r2, r0
   1b5b0:	307d      	adds	r0, #125	; 0x7d
   1b5b2:	327c      	adds	r2, #124	; 0x7c
   1b5b4:	00c0      	lsls	r0, r0, #3
   1b5b6:	e781      	b.n	1b4bc <_free_r+0x94>
   1b5b8:	20fe      	movs	r0, #254	; 0xfe
   1b5ba:	227e      	movs	r2, #126	; 0x7e
   1b5bc:	0080      	lsls	r0, r0, #2
   1b5be:	e77d      	b.n	1b4bc <_free_r+0x94>
   1b5c0:	4663      	mov	r3, ip
   1b5c2:	432b      	orrs	r3, r5
   1b5c4:	604b      	str	r3, [r1, #4]
   1b5c6:	6015      	str	r5, [r2, #0]
   1b5c8:	e76c      	b.n	1b4a4 <_free_r+0x7c>
   1b5ca:	46c0      	nop			; (mov r8, r8)
   1b5cc:	20000508 	.word	0x20000508
   1b5d0:	000001ff 	.word	0x000001ff
   1b5d4:	20000510 	.word	0x20000510
   1b5d8:	20000914 	.word	0x20000914
   1b5dc:	200010e0 	.word	0x200010e0
   1b5e0:	00000554 	.word	0x00000554

0001b5e4 <__sfvwrite_r>:
   1b5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b5e6:	464e      	mov	r6, r9
   1b5e8:	46de      	mov	lr, fp
   1b5ea:	4657      	mov	r7, sl
   1b5ec:	4645      	mov	r5, r8
   1b5ee:	b5e0      	push	{r5, r6, r7, lr}
   1b5f0:	6893      	ldr	r3, [r2, #8]
   1b5f2:	b083      	sub	sp, #12
   1b5f4:	9000      	str	r0, [sp, #0]
   1b5f6:	000c      	movs	r4, r1
   1b5f8:	0016      	movs	r6, r2
   1b5fa:	2b00      	cmp	r3, #0
   1b5fc:	d025      	beq.n	1b64a <__sfvwrite_r+0x66>
   1b5fe:	898b      	ldrh	r3, [r1, #12]
   1b600:	071a      	lsls	r2, r3, #28
   1b602:	d52a      	bpl.n	1b65a <__sfvwrite_r+0x76>
   1b604:	690a      	ldr	r2, [r1, #16]
   1b606:	2a00      	cmp	r2, #0
   1b608:	d027      	beq.n	1b65a <__sfvwrite_r+0x76>
   1b60a:	6832      	ldr	r2, [r6, #0]
   1b60c:	4693      	mov	fp, r2
   1b60e:	079a      	lsls	r2, r3, #30
   1b610:	d52f      	bpl.n	1b672 <__sfvwrite_r+0x8e>
   1b612:	4bb2      	ldr	r3, [pc, #712]	; (1b8dc <__sfvwrite_r+0x2f8>)
   1b614:	2700      	movs	r7, #0
   1b616:	2500      	movs	r5, #0
   1b618:	4698      	mov	r8, r3
   1b61a:	46b1      	mov	r9, r6
   1b61c:	2d00      	cmp	r5, #0
   1b61e:	d100      	bne.n	1b622 <__sfvwrite_r+0x3e>
   1b620:	e072      	b.n	1b708 <__sfvwrite_r+0x124>
   1b622:	002b      	movs	r3, r5
   1b624:	4545      	cmp	r5, r8
   1b626:	d900      	bls.n	1b62a <__sfvwrite_r+0x46>
   1b628:	4bac      	ldr	r3, [pc, #688]	; (1b8dc <__sfvwrite_r+0x2f8>)
   1b62a:	003a      	movs	r2, r7
   1b62c:	69e1      	ldr	r1, [r4, #28]
   1b62e:	9800      	ldr	r0, [sp, #0]
   1b630:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1b632:	47b0      	blx	r6
   1b634:	2800      	cmp	r0, #0
   1b636:	dc00      	bgt.n	1b63a <__sfvwrite_r+0x56>
   1b638:	e073      	b.n	1b722 <__sfvwrite_r+0x13e>
   1b63a:	464b      	mov	r3, r9
   1b63c:	689b      	ldr	r3, [r3, #8]
   1b63e:	183f      	adds	r7, r7, r0
   1b640:	1a2d      	subs	r5, r5, r0
   1b642:	1a18      	subs	r0, r3, r0
   1b644:	464b      	mov	r3, r9
   1b646:	6098      	str	r0, [r3, #8]
   1b648:	d1e8      	bne.n	1b61c <__sfvwrite_r+0x38>
   1b64a:	2000      	movs	r0, #0
   1b64c:	b003      	add	sp, #12
   1b64e:	bc3c      	pop	{r2, r3, r4, r5}
   1b650:	4690      	mov	r8, r2
   1b652:	4699      	mov	r9, r3
   1b654:	46a2      	mov	sl, r4
   1b656:	46ab      	mov	fp, r5
   1b658:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b65a:	0021      	movs	r1, r4
   1b65c:	9800      	ldr	r0, [sp, #0]
   1b65e:	f7fe fc4b 	bl	19ef8 <__swsetup_r>
   1b662:	2800      	cmp	r0, #0
   1b664:	d000      	beq.n	1b668 <__sfvwrite_r+0x84>
   1b666:	e130      	b.n	1b8ca <__sfvwrite_r+0x2e6>
   1b668:	6832      	ldr	r2, [r6, #0]
   1b66a:	89a3      	ldrh	r3, [r4, #12]
   1b66c:	4693      	mov	fp, r2
   1b66e:	079a      	lsls	r2, r3, #30
   1b670:	d4cf      	bmi.n	1b612 <__sfvwrite_r+0x2e>
   1b672:	07da      	lsls	r2, r3, #31
   1b674:	d55d      	bpl.n	1b732 <__sfvwrite_r+0x14e>
   1b676:	2300      	movs	r3, #0
   1b678:	2000      	movs	r0, #0
   1b67a:	469a      	mov	sl, r3
   1b67c:	2700      	movs	r7, #0
   1b67e:	001d      	movs	r5, r3
   1b680:	46b1      	mov	r9, r6
   1b682:	e029      	b.n	1b6d8 <__sfvwrite_r+0xf4>
   1b684:	2800      	cmp	r0, #0
   1b686:	d033      	beq.n	1b6f0 <__sfvwrite_r+0x10c>
   1b688:	46a8      	mov	r8, r5
   1b68a:	42bd      	cmp	r5, r7
   1b68c:	d900      	bls.n	1b690 <__sfvwrite_r+0xac>
   1b68e:	46b8      	mov	r8, r7
   1b690:	6820      	ldr	r0, [r4, #0]
   1b692:	6922      	ldr	r2, [r4, #16]
   1b694:	4646      	mov	r6, r8
   1b696:	6963      	ldr	r3, [r4, #20]
   1b698:	4290      	cmp	r0, r2
   1b69a:	d907      	bls.n	1b6ac <__sfvwrite_r+0xc8>
   1b69c:	68a2      	ldr	r2, [r4, #8]
   1b69e:	4694      	mov	ip, r2
   1b6a0:	449c      	add	ip, r3
   1b6a2:	4662      	mov	r2, ip
   1b6a4:	9201      	str	r2, [sp, #4]
   1b6a6:	45e0      	cmp	r8, ip
   1b6a8:	dd00      	ble.n	1b6ac <__sfvwrite_r+0xc8>
   1b6aa:	e0e9      	b.n	1b880 <__sfvwrite_r+0x29c>
   1b6ac:	4598      	cmp	r8, r3
   1b6ae:	da00      	bge.n	1b6b2 <__sfvwrite_r+0xce>
   1b6b0:	e08f      	b.n	1b7d2 <__sfvwrite_r+0x1ee>
   1b6b2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1b6b4:	4652      	mov	r2, sl
   1b6b6:	69e1      	ldr	r1, [r4, #28]
   1b6b8:	9800      	ldr	r0, [sp, #0]
   1b6ba:	47b0      	blx	r6
   1b6bc:	1e06      	subs	r6, r0, #0
   1b6be:	dd30      	ble.n	1b722 <__sfvwrite_r+0x13e>
   1b6c0:	1bad      	subs	r5, r5, r6
   1b6c2:	2001      	movs	r0, #1
   1b6c4:	2d00      	cmp	r5, #0
   1b6c6:	d026      	beq.n	1b716 <__sfvwrite_r+0x132>
   1b6c8:	464b      	mov	r3, r9
   1b6ca:	689b      	ldr	r3, [r3, #8]
   1b6cc:	44b2      	add	sl, r6
   1b6ce:	1bbf      	subs	r7, r7, r6
   1b6d0:	1b9e      	subs	r6, r3, r6
   1b6d2:	464b      	mov	r3, r9
   1b6d4:	609e      	str	r6, [r3, #8]
   1b6d6:	d0b8      	beq.n	1b64a <__sfvwrite_r+0x66>
   1b6d8:	2f00      	cmp	r7, #0
   1b6da:	d1d3      	bne.n	1b684 <__sfvwrite_r+0xa0>
   1b6dc:	465b      	mov	r3, fp
   1b6de:	681b      	ldr	r3, [r3, #0]
   1b6e0:	469a      	mov	sl, r3
   1b6e2:	465b      	mov	r3, fp
   1b6e4:	685f      	ldr	r7, [r3, #4]
   1b6e6:	2308      	movs	r3, #8
   1b6e8:	469c      	mov	ip, r3
   1b6ea:	44e3      	add	fp, ip
   1b6ec:	2f00      	cmp	r7, #0
   1b6ee:	d0f5      	beq.n	1b6dc <__sfvwrite_r+0xf8>
   1b6f0:	003a      	movs	r2, r7
   1b6f2:	210a      	movs	r1, #10
   1b6f4:	4650      	mov	r0, sl
   1b6f6:	f000 f9d5 	bl	1baa4 <memchr>
   1b6fa:	2800      	cmp	r0, #0
   1b6fc:	d100      	bne.n	1b700 <__sfvwrite_r+0x11c>
   1b6fe:	e0e2      	b.n	1b8c6 <__sfvwrite_r+0x2e2>
   1b700:	4653      	mov	r3, sl
   1b702:	3001      	adds	r0, #1
   1b704:	1ac5      	subs	r5, r0, r3
   1b706:	e7bf      	b.n	1b688 <__sfvwrite_r+0xa4>
   1b708:	465b      	mov	r3, fp
   1b70a:	681f      	ldr	r7, [r3, #0]
   1b70c:	685d      	ldr	r5, [r3, #4]
   1b70e:	2308      	movs	r3, #8
   1b710:	469c      	mov	ip, r3
   1b712:	44e3      	add	fp, ip
   1b714:	e782      	b.n	1b61c <__sfvwrite_r+0x38>
   1b716:	0021      	movs	r1, r4
   1b718:	9800      	ldr	r0, [sp, #0]
   1b71a:	f7ff fd81 	bl	1b220 <_fflush_r>
   1b71e:	2800      	cmp	r0, #0
   1b720:	d0d2      	beq.n	1b6c8 <__sfvwrite_r+0xe4>
   1b722:	220c      	movs	r2, #12
   1b724:	5ea3      	ldrsh	r3, [r4, r2]
   1b726:	2240      	movs	r2, #64	; 0x40
   1b728:	2001      	movs	r0, #1
   1b72a:	4313      	orrs	r3, r2
   1b72c:	81a3      	strh	r3, [r4, #12]
   1b72e:	4240      	negs	r0, r0
   1b730:	e78c      	b.n	1b64c <__sfvwrite_r+0x68>
   1b732:	2200      	movs	r2, #0
   1b734:	4691      	mov	r9, r2
   1b736:	464d      	mov	r5, r9
   1b738:	2d00      	cmp	r5, #0
   1b73a:	d023      	beq.n	1b784 <__sfvwrite_r+0x1a0>
   1b73c:	68a2      	ldr	r2, [r4, #8]
   1b73e:	4690      	mov	r8, r2
   1b740:	2280      	movs	r2, #128	; 0x80
   1b742:	0092      	lsls	r2, r2, #2
   1b744:	4213      	tst	r3, r2
   1b746:	d026      	beq.n	1b796 <__sfvwrite_r+0x1b2>
   1b748:	46c2      	mov	sl, r8
   1b74a:	4545      	cmp	r5, r8
   1b74c:	d34d      	bcc.n	1b7ea <__sfvwrite_r+0x206>
   1b74e:	2290      	movs	r2, #144	; 0x90
   1b750:	00d2      	lsls	r2, r2, #3
   1b752:	4213      	tst	r3, r2
   1b754:	d14e      	bne.n	1b7f4 <__sfvwrite_r+0x210>
   1b756:	002f      	movs	r7, r5
   1b758:	6820      	ldr	r0, [r4, #0]
   1b75a:	4652      	mov	r2, sl
   1b75c:	4649      	mov	r1, r9
   1b75e:	f000 f9e1 	bl	1bb24 <memmove>
   1b762:	4642      	mov	r2, r8
   1b764:	68a3      	ldr	r3, [r4, #8]
   1b766:	1a98      	subs	r0, r3, r2
   1b768:	6823      	ldr	r3, [r4, #0]
   1b76a:	60a0      	str	r0, [r4, #8]
   1b76c:	4453      	add	r3, sl
   1b76e:	6023      	str	r3, [r4, #0]
   1b770:	68b3      	ldr	r3, [r6, #8]
   1b772:	44b9      	add	r9, r7
   1b774:	1bed      	subs	r5, r5, r7
   1b776:	1bdf      	subs	r7, r3, r7
   1b778:	60b7      	str	r7, [r6, #8]
   1b77a:	d100      	bne.n	1b77e <__sfvwrite_r+0x19a>
   1b77c:	e765      	b.n	1b64a <__sfvwrite_r+0x66>
   1b77e:	89a3      	ldrh	r3, [r4, #12]
   1b780:	2d00      	cmp	r5, #0
   1b782:	d1db      	bne.n	1b73c <__sfvwrite_r+0x158>
   1b784:	465a      	mov	r2, fp
   1b786:	6812      	ldr	r2, [r2, #0]
   1b788:	4691      	mov	r9, r2
   1b78a:	465a      	mov	r2, fp
   1b78c:	6855      	ldr	r5, [r2, #4]
   1b78e:	2208      	movs	r2, #8
   1b790:	4694      	mov	ip, r2
   1b792:	44e3      	add	fp, ip
   1b794:	e7d0      	b.n	1b738 <__sfvwrite_r+0x154>
   1b796:	6820      	ldr	r0, [r4, #0]
   1b798:	6923      	ldr	r3, [r4, #16]
   1b79a:	4298      	cmp	r0, r3
   1b79c:	d802      	bhi.n	1b7a4 <__sfvwrite_r+0x1c0>
   1b79e:	6967      	ldr	r7, [r4, #20]
   1b7a0:	42bd      	cmp	r5, r7
   1b7a2:	d259      	bcs.n	1b858 <__sfvwrite_r+0x274>
   1b7a4:	4647      	mov	r7, r8
   1b7a6:	42af      	cmp	r7, r5
   1b7a8:	d900      	bls.n	1b7ac <__sfvwrite_r+0x1c8>
   1b7aa:	002f      	movs	r7, r5
   1b7ac:	003a      	movs	r2, r7
   1b7ae:	4649      	mov	r1, r9
   1b7b0:	f000 f9b8 	bl	1bb24 <memmove>
   1b7b4:	68a3      	ldr	r3, [r4, #8]
   1b7b6:	6822      	ldr	r2, [r4, #0]
   1b7b8:	1bdb      	subs	r3, r3, r7
   1b7ba:	19d2      	adds	r2, r2, r7
   1b7bc:	60a3      	str	r3, [r4, #8]
   1b7be:	6022      	str	r2, [r4, #0]
   1b7c0:	2b00      	cmp	r3, #0
   1b7c2:	d1d5      	bne.n	1b770 <__sfvwrite_r+0x18c>
   1b7c4:	0021      	movs	r1, r4
   1b7c6:	9800      	ldr	r0, [sp, #0]
   1b7c8:	f7ff fd2a 	bl	1b220 <_fflush_r>
   1b7cc:	2800      	cmp	r0, #0
   1b7ce:	d0cf      	beq.n	1b770 <__sfvwrite_r+0x18c>
   1b7d0:	e7a7      	b.n	1b722 <__sfvwrite_r+0x13e>
   1b7d2:	4642      	mov	r2, r8
   1b7d4:	4651      	mov	r1, sl
   1b7d6:	f000 f9a5 	bl	1bb24 <memmove>
   1b7da:	4642      	mov	r2, r8
   1b7dc:	68a3      	ldr	r3, [r4, #8]
   1b7de:	1a9b      	subs	r3, r3, r2
   1b7e0:	60a3      	str	r3, [r4, #8]
   1b7e2:	6823      	ldr	r3, [r4, #0]
   1b7e4:	4443      	add	r3, r8
   1b7e6:	6023      	str	r3, [r4, #0]
   1b7e8:	e76a      	b.n	1b6c0 <__sfvwrite_r+0xdc>
   1b7ea:	46a8      	mov	r8, r5
   1b7ec:	6820      	ldr	r0, [r4, #0]
   1b7ee:	002f      	movs	r7, r5
   1b7f0:	46aa      	mov	sl, r5
   1b7f2:	e7b2      	b.n	1b75a <__sfvwrite_r+0x176>
   1b7f4:	6921      	ldr	r1, [r4, #16]
   1b7f6:	6822      	ldr	r2, [r4, #0]
   1b7f8:	1a52      	subs	r2, r2, r1
   1b7fa:	4692      	mov	sl, r2
   1b7fc:	6962      	ldr	r2, [r4, #20]
   1b7fe:	0057      	lsls	r7, r2, #1
   1b800:	18bf      	adds	r7, r7, r2
   1b802:	0ffa      	lsrs	r2, r7, #31
   1b804:	19d7      	adds	r7, r2, r7
   1b806:	4652      	mov	r2, sl
   1b808:	1c50      	adds	r0, r2, #1
   1b80a:	107f      	asrs	r7, r7, #1
   1b80c:	1940      	adds	r0, r0, r5
   1b80e:	003a      	movs	r2, r7
   1b810:	42b8      	cmp	r0, r7
   1b812:	d901      	bls.n	1b818 <__sfvwrite_r+0x234>
   1b814:	0007      	movs	r7, r0
   1b816:	0002      	movs	r2, r0
   1b818:	055b      	lsls	r3, r3, #21
   1b81a:	d542      	bpl.n	1b8a2 <__sfvwrite_r+0x2be>
   1b81c:	0011      	movs	r1, r2
   1b81e:	9800      	ldr	r0, [sp, #0]
   1b820:	f7fc f9de 	bl	17be0 <_malloc_r>
   1b824:	4680      	mov	r8, r0
   1b826:	1e03      	subs	r3, r0, #0
   1b828:	d052      	beq.n	1b8d0 <__sfvwrite_r+0x2ec>
   1b82a:	4652      	mov	r2, sl
   1b82c:	6921      	ldr	r1, [r4, #16]
   1b82e:	f7fc fcb1 	bl	18194 <memcpy>
   1b832:	89a3      	ldrh	r3, [r4, #12]
   1b834:	4a2a      	ldr	r2, [pc, #168]	; (1b8e0 <__sfvwrite_r+0x2fc>)
   1b836:	4013      	ands	r3, r2
   1b838:	2280      	movs	r2, #128	; 0x80
   1b83a:	4313      	orrs	r3, r2
   1b83c:	81a3      	strh	r3, [r4, #12]
   1b83e:	4643      	mov	r3, r8
   1b840:	4640      	mov	r0, r8
   1b842:	6123      	str	r3, [r4, #16]
   1b844:	4653      	mov	r3, sl
   1b846:	4450      	add	r0, sl
   1b848:	6167      	str	r7, [r4, #20]
   1b84a:	1aff      	subs	r7, r7, r3
   1b84c:	60a7      	str	r7, [r4, #8]
   1b84e:	6020      	str	r0, [r4, #0]
   1b850:	46a8      	mov	r8, r5
   1b852:	002f      	movs	r7, r5
   1b854:	46aa      	mov	sl, r5
   1b856:	e780      	b.n	1b75a <__sfvwrite_r+0x176>
   1b858:	4b22      	ldr	r3, [pc, #136]	; (1b8e4 <__sfvwrite_r+0x300>)
   1b85a:	0028      	movs	r0, r5
   1b85c:	429d      	cmp	r5, r3
   1b85e:	d900      	bls.n	1b862 <__sfvwrite_r+0x27e>
   1b860:	0018      	movs	r0, r3
   1b862:	0039      	movs	r1, r7
   1b864:	f7f9 fa0e 	bl	14c84 <__divsi3>
   1b868:	003b      	movs	r3, r7
   1b86a:	464a      	mov	r2, r9
   1b86c:	4343      	muls	r3, r0
   1b86e:	69e1      	ldr	r1, [r4, #28]
   1b870:	9800      	ldr	r0, [sp, #0]
   1b872:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1b874:	47b8      	blx	r7
   1b876:	2800      	cmp	r0, #0
   1b878:	dc00      	bgt.n	1b87c <__sfvwrite_r+0x298>
   1b87a:	e752      	b.n	1b722 <__sfvwrite_r+0x13e>
   1b87c:	0007      	movs	r7, r0
   1b87e:	e777      	b.n	1b770 <__sfvwrite_r+0x18c>
   1b880:	4666      	mov	r6, ip
   1b882:	4651      	mov	r1, sl
   1b884:	f000 f94e 	bl	1bb24 <memmove>
   1b888:	46b4      	mov	ip, r6
   1b88a:	6823      	ldr	r3, [r4, #0]
   1b88c:	0021      	movs	r1, r4
   1b88e:	4463      	add	r3, ip
   1b890:	6023      	str	r3, [r4, #0]
   1b892:	9800      	ldr	r0, [sp, #0]
   1b894:	f7ff fcc4 	bl	1b220 <_fflush_r>
   1b898:	2800      	cmp	r0, #0
   1b89a:	d000      	beq.n	1b89e <__sfvwrite_r+0x2ba>
   1b89c:	e741      	b.n	1b722 <__sfvwrite_r+0x13e>
   1b89e:	9e01      	ldr	r6, [sp, #4]
   1b8a0:	e70e      	b.n	1b6c0 <__sfvwrite_r+0xdc>
   1b8a2:	9800      	ldr	r0, [sp, #0]
   1b8a4:	f000 fd10 	bl	1c2c8 <_realloc_r>
   1b8a8:	4680      	mov	r8, r0
   1b8aa:	2800      	cmp	r0, #0
   1b8ac:	d1c7      	bne.n	1b83e <__sfvwrite_r+0x25a>
   1b8ae:	9d00      	ldr	r5, [sp, #0]
   1b8b0:	6921      	ldr	r1, [r4, #16]
   1b8b2:	0028      	movs	r0, r5
   1b8b4:	f7ff fdb8 	bl	1b428 <_free_r>
   1b8b8:	2280      	movs	r2, #128	; 0x80
   1b8ba:	89a3      	ldrh	r3, [r4, #12]
   1b8bc:	4393      	bics	r3, r2
   1b8be:	3a74      	subs	r2, #116	; 0x74
   1b8c0:	b21b      	sxth	r3, r3
   1b8c2:	602a      	str	r2, [r5, #0]
   1b8c4:	e72f      	b.n	1b726 <__sfvwrite_r+0x142>
   1b8c6:	1c7d      	adds	r5, r7, #1
   1b8c8:	e6de      	b.n	1b688 <__sfvwrite_r+0xa4>
   1b8ca:	2001      	movs	r0, #1
   1b8cc:	4240      	negs	r0, r0
   1b8ce:	e6bd      	b.n	1b64c <__sfvwrite_r+0x68>
   1b8d0:	9a00      	ldr	r2, [sp, #0]
   1b8d2:	330c      	adds	r3, #12
   1b8d4:	6013      	str	r3, [r2, #0]
   1b8d6:	220c      	movs	r2, #12
   1b8d8:	5ea3      	ldrsh	r3, [r4, r2]
   1b8da:	e724      	b.n	1b726 <__sfvwrite_r+0x142>
   1b8dc:	7ffffc00 	.word	0x7ffffc00
   1b8e0:	fffffb7f 	.word	0xfffffb7f
   1b8e4:	7fffffff 	.word	0x7fffffff

0001b8e8 <_fwalk_reent>:
   1b8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8ea:	4647      	mov	r7, r8
   1b8ec:	46ce      	mov	lr, r9
   1b8ee:	b580      	push	{r7, lr}
   1b8f0:	27b8      	movs	r7, #184	; 0xb8
   1b8f2:	4680      	mov	r8, r0
   1b8f4:	00bf      	lsls	r7, r7, #2
   1b8f6:	4447      	add	r7, r8
   1b8f8:	4689      	mov	r9, r1
   1b8fa:	2600      	movs	r6, #0
   1b8fc:	2f00      	cmp	r7, #0
   1b8fe:	d014      	beq.n	1b92a <_fwalk_reent+0x42>
   1b900:	687b      	ldr	r3, [r7, #4]
   1b902:	68bc      	ldr	r4, [r7, #8]
   1b904:	1e5d      	subs	r5, r3, #1
   1b906:	d40d      	bmi.n	1b924 <_fwalk_reent+0x3c>
   1b908:	89a3      	ldrh	r3, [r4, #12]
   1b90a:	2b01      	cmp	r3, #1
   1b90c:	d907      	bls.n	1b91e <_fwalk_reent+0x36>
   1b90e:	220e      	movs	r2, #14
   1b910:	5ea3      	ldrsh	r3, [r4, r2]
   1b912:	3301      	adds	r3, #1
   1b914:	d003      	beq.n	1b91e <_fwalk_reent+0x36>
   1b916:	0021      	movs	r1, r4
   1b918:	4640      	mov	r0, r8
   1b91a:	47c8      	blx	r9
   1b91c:	4306      	orrs	r6, r0
   1b91e:	3468      	adds	r4, #104	; 0x68
   1b920:	3d01      	subs	r5, #1
   1b922:	d2f1      	bcs.n	1b908 <_fwalk_reent+0x20>
   1b924:	683f      	ldr	r7, [r7, #0]
   1b926:	2f00      	cmp	r7, #0
   1b928:	d1ea      	bne.n	1b900 <_fwalk_reent+0x18>
   1b92a:	0030      	movs	r0, r6
   1b92c:	bc0c      	pop	{r2, r3}
   1b92e:	4690      	mov	r8, r2
   1b930:	4699      	mov	r9, r3
   1b932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b934 <__locale_mb_cur_max>:
   1b934:	4b05      	ldr	r3, [pc, #20]	; (1b94c <__locale_mb_cur_max+0x18>)
   1b936:	681b      	ldr	r3, [r3, #0]
   1b938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1b93a:	2b00      	cmp	r3, #0
   1b93c:	d003      	beq.n	1b946 <__locale_mb_cur_max+0x12>
   1b93e:	2294      	movs	r2, #148	; 0x94
   1b940:	0052      	lsls	r2, r2, #1
   1b942:	5c98      	ldrb	r0, [r3, r2]
   1b944:	4770      	bx	lr
   1b946:	4b02      	ldr	r3, [pc, #8]	; (1b950 <__locale_mb_cur_max+0x1c>)
   1b948:	e7f9      	b.n	1b93e <__locale_mb_cur_max+0xa>
   1b94a:	46c0      	nop			; (mov r8, r8)
   1b94c:	200000d8 	.word	0x200000d8
   1b950:	2000091c 	.word	0x2000091c

0001b954 <__locale_ctype_ptr_l>:
   1b954:	23ec      	movs	r3, #236	; 0xec
   1b956:	58c0      	ldr	r0, [r0, r3]
   1b958:	4770      	bx	lr
   1b95a:	46c0      	nop			; (mov r8, r8)

0001b95c <_localeconv_r>:
   1b95c:	4b04      	ldr	r3, [pc, #16]	; (1b970 <_localeconv_r+0x14>)
   1b95e:	681b      	ldr	r3, [r3, #0]
   1b960:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1b962:	2800      	cmp	r0, #0
   1b964:	d001      	beq.n	1b96a <_localeconv_r+0xe>
   1b966:	30f0      	adds	r0, #240	; 0xf0
   1b968:	4770      	bx	lr
   1b96a:	4802      	ldr	r0, [pc, #8]	; (1b974 <_localeconv_r+0x18>)
   1b96c:	e7fb      	b.n	1b966 <_localeconv_r+0xa>
   1b96e:	46c0      	nop			; (mov r8, r8)
   1b970:	200000d8 	.word	0x200000d8
   1b974:	2000091c 	.word	0x2000091c

0001b978 <__retarget_lock_init_recursive>:
   1b978:	4770      	bx	lr
   1b97a:	46c0      	nop			; (mov r8, r8)

0001b97c <__retarget_lock_close_recursive>:
   1b97c:	4770      	bx	lr
   1b97e:	46c0      	nop			; (mov r8, r8)

0001b980 <__retarget_lock_acquire_recursive>:
   1b980:	4770      	bx	lr
   1b982:	46c0      	nop			; (mov r8, r8)

0001b984 <__retarget_lock_release_recursive>:
   1b984:	4770      	bx	lr
   1b986:	46c0      	nop			; (mov r8, r8)

0001b988 <__swhatbuf_r>:
   1b988:	b570      	push	{r4, r5, r6, lr}
   1b98a:	000c      	movs	r4, r1
   1b98c:	001e      	movs	r6, r3
   1b98e:	230e      	movs	r3, #14
   1b990:	5ec9      	ldrsh	r1, [r1, r3]
   1b992:	b090      	sub	sp, #64	; 0x40
   1b994:	0015      	movs	r5, r2
   1b996:	2900      	cmp	r1, #0
   1b998:	db15      	blt.n	1b9c6 <__swhatbuf_r+0x3e>
   1b99a:	aa01      	add	r2, sp, #4
   1b99c:	f001 f904 	bl	1cba8 <_fstat_r>
   1b9a0:	2800      	cmp	r0, #0
   1b9a2:	db10      	blt.n	1b9c6 <__swhatbuf_r+0x3e>
   1b9a4:	22f0      	movs	r2, #240	; 0xf0
   1b9a6:	9b02      	ldr	r3, [sp, #8]
   1b9a8:	0212      	lsls	r2, r2, #8
   1b9aa:	4013      	ands	r3, r2
   1b9ac:	4a0d      	ldr	r2, [pc, #52]	; (1b9e4 <__swhatbuf_r+0x5c>)
   1b9ae:	2080      	movs	r0, #128	; 0x80
   1b9b0:	4694      	mov	ip, r2
   1b9b2:	4463      	add	r3, ip
   1b9b4:	425a      	negs	r2, r3
   1b9b6:	4153      	adcs	r3, r2
   1b9b8:	6033      	str	r3, [r6, #0]
   1b9ba:	2380      	movs	r3, #128	; 0x80
   1b9bc:	00db      	lsls	r3, r3, #3
   1b9be:	602b      	str	r3, [r5, #0]
   1b9c0:	0100      	lsls	r0, r0, #4
   1b9c2:	b010      	add	sp, #64	; 0x40
   1b9c4:	bd70      	pop	{r4, r5, r6, pc}
   1b9c6:	2300      	movs	r3, #0
   1b9c8:	6033      	str	r3, [r6, #0]
   1b9ca:	89a3      	ldrh	r3, [r4, #12]
   1b9cc:	061b      	lsls	r3, r3, #24
   1b9ce:	d503      	bpl.n	1b9d8 <__swhatbuf_r+0x50>
   1b9d0:	2340      	movs	r3, #64	; 0x40
   1b9d2:	2000      	movs	r0, #0
   1b9d4:	602b      	str	r3, [r5, #0]
   1b9d6:	e7f4      	b.n	1b9c2 <__swhatbuf_r+0x3a>
   1b9d8:	2380      	movs	r3, #128	; 0x80
   1b9da:	00db      	lsls	r3, r3, #3
   1b9dc:	602b      	str	r3, [r5, #0]
   1b9de:	2000      	movs	r0, #0
   1b9e0:	e7ef      	b.n	1b9c2 <__swhatbuf_r+0x3a>
   1b9e2:	46c0      	nop			; (mov r8, r8)
   1b9e4:	ffffe000 	.word	0xffffe000

0001b9e8 <__smakebuf_r>:
   1b9e8:	b570      	push	{r4, r5, r6, lr}
   1b9ea:	898b      	ldrh	r3, [r1, #12]
   1b9ec:	b082      	sub	sp, #8
   1b9ee:	0006      	movs	r6, r0
   1b9f0:	000c      	movs	r4, r1
   1b9f2:	079b      	lsls	r3, r3, #30
   1b9f4:	d507      	bpl.n	1ba06 <__smakebuf_r+0x1e>
   1b9f6:	0023      	movs	r3, r4
   1b9f8:	3343      	adds	r3, #67	; 0x43
   1b9fa:	6023      	str	r3, [r4, #0]
   1b9fc:	6123      	str	r3, [r4, #16]
   1b9fe:	2301      	movs	r3, #1
   1ba00:	6163      	str	r3, [r4, #20]
   1ba02:	b002      	add	sp, #8
   1ba04:	bd70      	pop	{r4, r5, r6, pc}
   1ba06:	ab01      	add	r3, sp, #4
   1ba08:	466a      	mov	r2, sp
   1ba0a:	f7ff ffbd 	bl	1b988 <__swhatbuf_r>
   1ba0e:	9900      	ldr	r1, [sp, #0]
   1ba10:	0005      	movs	r5, r0
   1ba12:	0030      	movs	r0, r6
   1ba14:	f7fc f8e4 	bl	17be0 <_malloc_r>
   1ba18:	2800      	cmp	r0, #0
   1ba1a:	d01e      	beq.n	1ba5a <__smakebuf_r+0x72>
   1ba1c:	2280      	movs	r2, #128	; 0x80
   1ba1e:	4b15      	ldr	r3, [pc, #84]	; (1ba74 <__smakebuf_r+0x8c>)
   1ba20:	63f3      	str	r3, [r6, #60]	; 0x3c
   1ba22:	89a3      	ldrh	r3, [r4, #12]
   1ba24:	6020      	str	r0, [r4, #0]
   1ba26:	4313      	orrs	r3, r2
   1ba28:	9a00      	ldr	r2, [sp, #0]
   1ba2a:	b21b      	sxth	r3, r3
   1ba2c:	6162      	str	r2, [r4, #20]
   1ba2e:	9a01      	ldr	r2, [sp, #4]
   1ba30:	81a3      	strh	r3, [r4, #12]
   1ba32:	6120      	str	r0, [r4, #16]
   1ba34:	2a00      	cmp	r2, #0
   1ba36:	d102      	bne.n	1ba3e <__smakebuf_r+0x56>
   1ba38:	432b      	orrs	r3, r5
   1ba3a:	81a3      	strh	r3, [r4, #12]
   1ba3c:	e7e1      	b.n	1ba02 <__smakebuf_r+0x1a>
   1ba3e:	230e      	movs	r3, #14
   1ba40:	5ee1      	ldrsh	r1, [r4, r3]
   1ba42:	0030      	movs	r0, r6
   1ba44:	f001 f8c4 	bl	1cbd0 <_isatty_r>
   1ba48:	2800      	cmp	r0, #0
   1ba4a:	d010      	beq.n	1ba6e <__smakebuf_r+0x86>
   1ba4c:	2203      	movs	r2, #3
   1ba4e:	89a3      	ldrh	r3, [r4, #12]
   1ba50:	4393      	bics	r3, r2
   1ba52:	2201      	movs	r2, #1
   1ba54:	4313      	orrs	r3, r2
   1ba56:	b21b      	sxth	r3, r3
   1ba58:	e7ee      	b.n	1ba38 <__smakebuf_r+0x50>
   1ba5a:	220c      	movs	r2, #12
   1ba5c:	5ea3      	ldrsh	r3, [r4, r2]
   1ba5e:	059a      	lsls	r2, r3, #22
   1ba60:	d4cf      	bmi.n	1ba02 <__smakebuf_r+0x1a>
   1ba62:	2203      	movs	r2, #3
   1ba64:	4393      	bics	r3, r2
   1ba66:	2202      	movs	r2, #2
   1ba68:	4313      	orrs	r3, r2
   1ba6a:	81a3      	strh	r3, [r4, #12]
   1ba6c:	e7c3      	b.n	1b9f6 <__smakebuf_r+0xe>
   1ba6e:	220c      	movs	r2, #12
   1ba70:	5ea3      	ldrsh	r3, [r4, r2]
   1ba72:	e7e1      	b.n	1ba38 <__smakebuf_r+0x50>
   1ba74:	0001b275 	.word	0x0001b275

0001ba78 <__ascii_mbtowc>:
   1ba78:	b082      	sub	sp, #8
   1ba7a:	2900      	cmp	r1, #0
   1ba7c:	d00a      	beq.n	1ba94 <__ascii_mbtowc+0x1c>
   1ba7e:	2a00      	cmp	r2, #0
   1ba80:	d00b      	beq.n	1ba9a <__ascii_mbtowc+0x22>
   1ba82:	2b00      	cmp	r3, #0
   1ba84:	d00b      	beq.n	1ba9e <__ascii_mbtowc+0x26>
   1ba86:	7813      	ldrb	r3, [r2, #0]
   1ba88:	600b      	str	r3, [r1, #0]
   1ba8a:	7810      	ldrb	r0, [r2, #0]
   1ba8c:	1e43      	subs	r3, r0, #1
   1ba8e:	4198      	sbcs	r0, r3
   1ba90:	b002      	add	sp, #8
   1ba92:	4770      	bx	lr
   1ba94:	a901      	add	r1, sp, #4
   1ba96:	2a00      	cmp	r2, #0
   1ba98:	d1f3      	bne.n	1ba82 <__ascii_mbtowc+0xa>
   1ba9a:	2000      	movs	r0, #0
   1ba9c:	e7f8      	b.n	1ba90 <__ascii_mbtowc+0x18>
   1ba9e:	2002      	movs	r0, #2
   1baa0:	4240      	negs	r0, r0
   1baa2:	e7f5      	b.n	1ba90 <__ascii_mbtowc+0x18>

0001baa4 <memchr>:
   1baa4:	b570      	push	{r4, r5, r6, lr}
   1baa6:	b2cd      	uxtb	r5, r1
   1baa8:	0783      	lsls	r3, r0, #30
   1baaa:	d034      	beq.n	1bb16 <memchr+0x72>
   1baac:	1e54      	subs	r4, r2, #1
   1baae:	2a00      	cmp	r2, #0
   1bab0:	d01b      	beq.n	1baea <memchr+0x46>
   1bab2:	7803      	ldrb	r3, [r0, #0]
   1bab4:	42ab      	cmp	r3, r5
   1bab6:	d019      	beq.n	1baec <memchr+0x48>
   1bab8:	2203      	movs	r2, #3
   1baba:	e004      	b.n	1bac6 <memchr+0x22>
   1babc:	3c01      	subs	r4, #1
   1babe:	d314      	bcc.n	1baea <memchr+0x46>
   1bac0:	7803      	ldrb	r3, [r0, #0]
   1bac2:	42ab      	cmp	r3, r5
   1bac4:	d012      	beq.n	1baec <memchr+0x48>
   1bac6:	3001      	adds	r0, #1
   1bac8:	4210      	tst	r0, r2
   1baca:	d1f7      	bne.n	1babc <memchr+0x18>
   1bacc:	2c03      	cmp	r4, #3
   1bace:	d80e      	bhi.n	1baee <memchr+0x4a>
   1bad0:	2c00      	cmp	r4, #0
   1bad2:	d00a      	beq.n	1baea <memchr+0x46>
   1bad4:	7803      	ldrb	r3, [r0, #0]
   1bad6:	42ab      	cmp	r3, r5
   1bad8:	d008      	beq.n	1baec <memchr+0x48>
   1bada:	1904      	adds	r4, r0, r4
   1badc:	e002      	b.n	1bae4 <memchr+0x40>
   1bade:	7803      	ldrb	r3, [r0, #0]
   1bae0:	42ab      	cmp	r3, r5
   1bae2:	d003      	beq.n	1baec <memchr+0x48>
   1bae4:	3001      	adds	r0, #1
   1bae6:	4284      	cmp	r4, r0
   1bae8:	d1f9      	bne.n	1bade <memchr+0x3a>
   1baea:	2000      	movs	r0, #0
   1baec:	bd70      	pop	{r4, r5, r6, pc}
   1baee:	22ff      	movs	r2, #255	; 0xff
   1baf0:	060b      	lsls	r3, r1, #24
   1baf2:	0c1b      	lsrs	r3, r3, #16
   1baf4:	4011      	ands	r1, r2
   1baf6:	4319      	orrs	r1, r3
   1baf8:	040b      	lsls	r3, r1, #16
   1bafa:	4e08      	ldr	r6, [pc, #32]	; (1bb1c <memchr+0x78>)
   1bafc:	4319      	orrs	r1, r3
   1bafe:	6803      	ldr	r3, [r0, #0]
   1bb00:	4a07      	ldr	r2, [pc, #28]	; (1bb20 <memchr+0x7c>)
   1bb02:	404b      	eors	r3, r1
   1bb04:	189a      	adds	r2, r3, r2
   1bb06:	439a      	bics	r2, r3
   1bb08:	4232      	tst	r2, r6
   1bb0a:	d1e3      	bne.n	1bad4 <memchr+0x30>
   1bb0c:	3c04      	subs	r4, #4
   1bb0e:	3004      	adds	r0, #4
   1bb10:	2c03      	cmp	r4, #3
   1bb12:	d8f4      	bhi.n	1bafe <memchr+0x5a>
   1bb14:	e7dc      	b.n	1bad0 <memchr+0x2c>
   1bb16:	0014      	movs	r4, r2
   1bb18:	e7d8      	b.n	1bacc <memchr+0x28>
   1bb1a:	46c0      	nop			; (mov r8, r8)
   1bb1c:	80808080 	.word	0x80808080
   1bb20:	fefefeff 	.word	0xfefefeff

0001bb24 <memmove>:
   1bb24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bb26:	4288      	cmp	r0, r1
   1bb28:	d90a      	bls.n	1bb40 <memmove+0x1c>
   1bb2a:	188b      	adds	r3, r1, r2
   1bb2c:	4298      	cmp	r0, r3
   1bb2e:	d207      	bcs.n	1bb40 <memmove+0x1c>
   1bb30:	1e53      	subs	r3, r2, #1
   1bb32:	2a00      	cmp	r2, #0
   1bb34:	d003      	beq.n	1bb3e <memmove+0x1a>
   1bb36:	5cca      	ldrb	r2, [r1, r3]
   1bb38:	54c2      	strb	r2, [r0, r3]
   1bb3a:	3b01      	subs	r3, #1
   1bb3c:	d2fb      	bcs.n	1bb36 <memmove+0x12>
   1bb3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bb40:	0005      	movs	r5, r0
   1bb42:	2a0f      	cmp	r2, #15
   1bb44:	d808      	bhi.n	1bb58 <memmove+0x34>
   1bb46:	2a00      	cmp	r2, #0
   1bb48:	d0f9      	beq.n	1bb3e <memmove+0x1a>
   1bb4a:	2300      	movs	r3, #0
   1bb4c:	5ccc      	ldrb	r4, [r1, r3]
   1bb4e:	54ec      	strb	r4, [r5, r3]
   1bb50:	3301      	adds	r3, #1
   1bb52:	4293      	cmp	r3, r2
   1bb54:	d1fa      	bne.n	1bb4c <memmove+0x28>
   1bb56:	e7f2      	b.n	1bb3e <memmove+0x1a>
   1bb58:	000b      	movs	r3, r1
   1bb5a:	4303      	orrs	r3, r0
   1bb5c:	079b      	lsls	r3, r3, #30
   1bb5e:	d12d      	bne.n	1bbbc <memmove+0x98>
   1bb60:	0015      	movs	r5, r2
   1bb62:	000c      	movs	r4, r1
   1bb64:	0003      	movs	r3, r0
   1bb66:	3d10      	subs	r5, #16
   1bb68:	092f      	lsrs	r7, r5, #4
   1bb6a:	3701      	adds	r7, #1
   1bb6c:	013f      	lsls	r7, r7, #4
   1bb6e:	19c7      	adds	r7, r0, r7
   1bb70:	6826      	ldr	r6, [r4, #0]
   1bb72:	601e      	str	r6, [r3, #0]
   1bb74:	6866      	ldr	r6, [r4, #4]
   1bb76:	605e      	str	r6, [r3, #4]
   1bb78:	68a6      	ldr	r6, [r4, #8]
   1bb7a:	609e      	str	r6, [r3, #8]
   1bb7c:	68e6      	ldr	r6, [r4, #12]
   1bb7e:	3410      	adds	r4, #16
   1bb80:	60de      	str	r6, [r3, #12]
   1bb82:	3310      	adds	r3, #16
   1bb84:	429f      	cmp	r7, r3
   1bb86:	d1f3      	bne.n	1bb70 <memmove+0x4c>
   1bb88:	240f      	movs	r4, #15
   1bb8a:	43a5      	bics	r5, r4
   1bb8c:	3510      	adds	r5, #16
   1bb8e:	1949      	adds	r1, r1, r5
   1bb90:	4014      	ands	r4, r2
   1bb92:	1945      	adds	r5, r0, r5
   1bb94:	2c03      	cmp	r4, #3
   1bb96:	d913      	bls.n	1bbc0 <memmove+0x9c>
   1bb98:	2300      	movs	r3, #0
   1bb9a:	1f27      	subs	r7, r4, #4
   1bb9c:	08be      	lsrs	r6, r7, #2
   1bb9e:	3601      	adds	r6, #1
   1bba0:	00b6      	lsls	r6, r6, #2
   1bba2:	58cc      	ldr	r4, [r1, r3]
   1bba4:	50ec      	str	r4, [r5, r3]
   1bba6:	3304      	adds	r3, #4
   1bba8:	42b3      	cmp	r3, r6
   1bbaa:	d1fa      	bne.n	1bba2 <memmove+0x7e>
   1bbac:	2603      	movs	r6, #3
   1bbae:	43b7      	bics	r7, r6
   1bbb0:	1d3c      	adds	r4, r7, #4
   1bbb2:	1909      	adds	r1, r1, r4
   1bbb4:	192d      	adds	r5, r5, r4
   1bbb6:	4032      	ands	r2, r6
   1bbb8:	d1c7      	bne.n	1bb4a <memmove+0x26>
   1bbba:	e7c0      	b.n	1bb3e <memmove+0x1a>
   1bbbc:	0005      	movs	r5, r0
   1bbbe:	e7c4      	b.n	1bb4a <memmove+0x26>
   1bbc0:	0022      	movs	r2, r4
   1bbc2:	e7c0      	b.n	1bb46 <memmove+0x22>

0001bbc4 <_Balloc>:
   1bbc4:	b570      	push	{r4, r5, r6, lr}
   1bbc6:	0004      	movs	r4, r0
   1bbc8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1bbca:	000d      	movs	r5, r1
   1bbcc:	2800      	cmp	r0, #0
   1bbce:	d00a      	beq.n	1bbe6 <_Balloc+0x22>
   1bbd0:	00ab      	lsls	r3, r5, #2
   1bbd2:	18c3      	adds	r3, r0, r3
   1bbd4:	6818      	ldr	r0, [r3, #0]
   1bbd6:	2800      	cmp	r0, #0
   1bbd8:	d00f      	beq.n	1bbfa <_Balloc+0x36>
   1bbda:	6802      	ldr	r2, [r0, #0]
   1bbdc:	601a      	str	r2, [r3, #0]
   1bbde:	2300      	movs	r3, #0
   1bbe0:	6103      	str	r3, [r0, #16]
   1bbe2:	60c3      	str	r3, [r0, #12]
   1bbe4:	bd70      	pop	{r4, r5, r6, pc}
   1bbe6:	2221      	movs	r2, #33	; 0x21
   1bbe8:	2104      	movs	r1, #4
   1bbea:	0020      	movs	r0, r4
   1bbec:	f000 febe 	bl	1c96c <_calloc_r>
   1bbf0:	64e0      	str	r0, [r4, #76]	; 0x4c
   1bbf2:	2800      	cmp	r0, #0
   1bbf4:	d1ec      	bne.n	1bbd0 <_Balloc+0xc>
   1bbf6:	2000      	movs	r0, #0
   1bbf8:	e7f4      	b.n	1bbe4 <_Balloc+0x20>
   1bbfa:	2601      	movs	r6, #1
   1bbfc:	40ae      	lsls	r6, r5
   1bbfe:	1d72      	adds	r2, r6, #5
   1bc00:	0092      	lsls	r2, r2, #2
   1bc02:	2101      	movs	r1, #1
   1bc04:	0020      	movs	r0, r4
   1bc06:	f000 feb1 	bl	1c96c <_calloc_r>
   1bc0a:	2800      	cmp	r0, #0
   1bc0c:	d0f3      	beq.n	1bbf6 <_Balloc+0x32>
   1bc0e:	6045      	str	r5, [r0, #4]
   1bc10:	6086      	str	r6, [r0, #8]
   1bc12:	e7e4      	b.n	1bbde <_Balloc+0x1a>

0001bc14 <_Bfree>:
   1bc14:	2900      	cmp	r1, #0
   1bc16:	d006      	beq.n	1bc26 <_Bfree+0x12>
   1bc18:	684b      	ldr	r3, [r1, #4]
   1bc1a:	009a      	lsls	r2, r3, #2
   1bc1c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1bc1e:	189b      	adds	r3, r3, r2
   1bc20:	681a      	ldr	r2, [r3, #0]
   1bc22:	600a      	str	r2, [r1, #0]
   1bc24:	6019      	str	r1, [r3, #0]
   1bc26:	4770      	bx	lr

0001bc28 <__multadd>:
   1bc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc2a:	46ce      	mov	lr, r9
   1bc2c:	4647      	mov	r7, r8
   1bc2e:	4681      	mov	r9, r0
   1bc30:	0008      	movs	r0, r1
   1bc32:	b580      	push	{r7, lr}
   1bc34:	000d      	movs	r5, r1
   1bc36:	690c      	ldr	r4, [r1, #16]
   1bc38:	001f      	movs	r7, r3
   1bc3a:	2100      	movs	r1, #0
   1bc3c:	3014      	adds	r0, #20
   1bc3e:	6803      	ldr	r3, [r0, #0]
   1bc40:	3101      	adds	r1, #1
   1bc42:	041e      	lsls	r6, r3, #16
   1bc44:	0c36      	lsrs	r6, r6, #16
   1bc46:	4356      	muls	r6, r2
   1bc48:	0c1b      	lsrs	r3, r3, #16
   1bc4a:	4353      	muls	r3, r2
   1bc4c:	19f6      	adds	r6, r6, r7
   1bc4e:	0c37      	lsrs	r7, r6, #16
   1bc50:	19db      	adds	r3, r3, r7
   1bc52:	0436      	lsls	r6, r6, #16
   1bc54:	0c1f      	lsrs	r7, r3, #16
   1bc56:	0c36      	lsrs	r6, r6, #16
   1bc58:	041b      	lsls	r3, r3, #16
   1bc5a:	199b      	adds	r3, r3, r6
   1bc5c:	c008      	stmia	r0!, {r3}
   1bc5e:	428c      	cmp	r4, r1
   1bc60:	dced      	bgt.n	1bc3e <__multadd+0x16>
   1bc62:	2f00      	cmp	r7, #0
   1bc64:	d008      	beq.n	1bc78 <__multadd+0x50>
   1bc66:	68ab      	ldr	r3, [r5, #8]
   1bc68:	429c      	cmp	r4, r3
   1bc6a:	da0a      	bge.n	1bc82 <__multadd+0x5a>
   1bc6c:	1d23      	adds	r3, r4, #4
   1bc6e:	009b      	lsls	r3, r3, #2
   1bc70:	18eb      	adds	r3, r5, r3
   1bc72:	3401      	adds	r4, #1
   1bc74:	605f      	str	r7, [r3, #4]
   1bc76:	612c      	str	r4, [r5, #16]
   1bc78:	0028      	movs	r0, r5
   1bc7a:	bc0c      	pop	{r2, r3}
   1bc7c:	4690      	mov	r8, r2
   1bc7e:	4699      	mov	r9, r3
   1bc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bc82:	686b      	ldr	r3, [r5, #4]
   1bc84:	4648      	mov	r0, r9
   1bc86:	1c59      	adds	r1, r3, #1
   1bc88:	f7ff ff9c 	bl	1bbc4 <_Balloc>
   1bc8c:	0029      	movs	r1, r5
   1bc8e:	692b      	ldr	r3, [r5, #16]
   1bc90:	4680      	mov	r8, r0
   1bc92:	1c9a      	adds	r2, r3, #2
   1bc94:	0092      	lsls	r2, r2, #2
   1bc96:	310c      	adds	r1, #12
   1bc98:	300c      	adds	r0, #12
   1bc9a:	f7fc fa7b 	bl	18194 <memcpy>
   1bc9e:	686b      	ldr	r3, [r5, #4]
   1bca0:	009a      	lsls	r2, r3, #2
   1bca2:	464b      	mov	r3, r9
   1bca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1bca6:	189b      	adds	r3, r3, r2
   1bca8:	681a      	ldr	r2, [r3, #0]
   1bcaa:	602a      	str	r2, [r5, #0]
   1bcac:	601d      	str	r5, [r3, #0]
   1bcae:	4645      	mov	r5, r8
   1bcb0:	e7dc      	b.n	1bc6c <__multadd+0x44>
   1bcb2:	46c0      	nop			; (mov r8, r8)

0001bcb4 <__hi0bits>:
   1bcb4:	0003      	movs	r3, r0
   1bcb6:	0c02      	lsrs	r2, r0, #16
   1bcb8:	2000      	movs	r0, #0
   1bcba:	2a00      	cmp	r2, #0
   1bcbc:	d101      	bne.n	1bcc2 <__hi0bits+0xe>
   1bcbe:	041b      	lsls	r3, r3, #16
   1bcc0:	3010      	adds	r0, #16
   1bcc2:	0e1a      	lsrs	r2, r3, #24
   1bcc4:	d101      	bne.n	1bcca <__hi0bits+0x16>
   1bcc6:	3008      	adds	r0, #8
   1bcc8:	021b      	lsls	r3, r3, #8
   1bcca:	0f1a      	lsrs	r2, r3, #28
   1bccc:	d101      	bne.n	1bcd2 <__hi0bits+0x1e>
   1bcce:	3004      	adds	r0, #4
   1bcd0:	011b      	lsls	r3, r3, #4
   1bcd2:	0f9a      	lsrs	r2, r3, #30
   1bcd4:	d101      	bne.n	1bcda <__hi0bits+0x26>
   1bcd6:	3002      	adds	r0, #2
   1bcd8:	009b      	lsls	r3, r3, #2
   1bcda:	2b00      	cmp	r3, #0
   1bcdc:	db03      	blt.n	1bce6 <__hi0bits+0x32>
   1bcde:	3001      	adds	r0, #1
   1bce0:	005b      	lsls	r3, r3, #1
   1bce2:	d400      	bmi.n	1bce6 <__hi0bits+0x32>
   1bce4:	2020      	movs	r0, #32
   1bce6:	4770      	bx	lr

0001bce8 <__lo0bits>:
   1bce8:	6803      	ldr	r3, [r0, #0]
   1bcea:	075a      	lsls	r2, r3, #29
   1bcec:	d009      	beq.n	1bd02 <__lo0bits+0x1a>
   1bcee:	2200      	movs	r2, #0
   1bcf0:	07d9      	lsls	r1, r3, #31
   1bcf2:	d404      	bmi.n	1bcfe <__lo0bits+0x16>
   1bcf4:	079a      	lsls	r2, r3, #30
   1bcf6:	d420      	bmi.n	1bd3a <__lo0bits+0x52>
   1bcf8:	2202      	movs	r2, #2
   1bcfa:	089b      	lsrs	r3, r3, #2
   1bcfc:	6003      	str	r3, [r0, #0]
   1bcfe:	0010      	movs	r0, r2
   1bd00:	4770      	bx	lr
   1bd02:	0419      	lsls	r1, r3, #16
   1bd04:	2200      	movs	r2, #0
   1bd06:	2900      	cmp	r1, #0
   1bd08:	d101      	bne.n	1bd0e <__lo0bits+0x26>
   1bd0a:	0c1b      	lsrs	r3, r3, #16
   1bd0c:	3210      	adds	r2, #16
   1bd0e:	21ff      	movs	r1, #255	; 0xff
   1bd10:	4219      	tst	r1, r3
   1bd12:	d101      	bne.n	1bd18 <__lo0bits+0x30>
   1bd14:	3208      	adds	r2, #8
   1bd16:	0a1b      	lsrs	r3, r3, #8
   1bd18:	0719      	lsls	r1, r3, #28
   1bd1a:	d101      	bne.n	1bd20 <__lo0bits+0x38>
   1bd1c:	3204      	adds	r2, #4
   1bd1e:	091b      	lsrs	r3, r3, #4
   1bd20:	0799      	lsls	r1, r3, #30
   1bd22:	d101      	bne.n	1bd28 <__lo0bits+0x40>
   1bd24:	3202      	adds	r2, #2
   1bd26:	089b      	lsrs	r3, r3, #2
   1bd28:	07d9      	lsls	r1, r3, #31
   1bd2a:	d404      	bmi.n	1bd36 <__lo0bits+0x4e>
   1bd2c:	085b      	lsrs	r3, r3, #1
   1bd2e:	d101      	bne.n	1bd34 <__lo0bits+0x4c>
   1bd30:	2220      	movs	r2, #32
   1bd32:	e7e4      	b.n	1bcfe <__lo0bits+0x16>
   1bd34:	3201      	adds	r2, #1
   1bd36:	6003      	str	r3, [r0, #0]
   1bd38:	e7e1      	b.n	1bcfe <__lo0bits+0x16>
   1bd3a:	085b      	lsrs	r3, r3, #1
   1bd3c:	6003      	str	r3, [r0, #0]
   1bd3e:	2201      	movs	r2, #1
   1bd40:	e7dd      	b.n	1bcfe <__lo0bits+0x16>
   1bd42:	46c0      	nop			; (mov r8, r8)

0001bd44 <__i2b>:
   1bd44:	b510      	push	{r4, lr}
   1bd46:	000c      	movs	r4, r1
   1bd48:	2101      	movs	r1, #1
   1bd4a:	f7ff ff3b 	bl	1bbc4 <_Balloc>
   1bd4e:	2301      	movs	r3, #1
   1bd50:	6144      	str	r4, [r0, #20]
   1bd52:	6103      	str	r3, [r0, #16]
   1bd54:	bd10      	pop	{r4, pc}
   1bd56:	46c0      	nop			; (mov r8, r8)

0001bd58 <__multiply>:
   1bd58:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bd5a:	4657      	mov	r7, sl
   1bd5c:	464e      	mov	r6, r9
   1bd5e:	4645      	mov	r5, r8
   1bd60:	46de      	mov	lr, fp
   1bd62:	b5e0      	push	{r5, r6, r7, lr}
   1bd64:	6914      	ldr	r4, [r2, #16]
   1bd66:	690e      	ldr	r6, [r1, #16]
   1bd68:	b085      	sub	sp, #20
   1bd6a:	000f      	movs	r7, r1
   1bd6c:	0015      	movs	r5, r2
   1bd6e:	42a6      	cmp	r6, r4
   1bd70:	da04      	bge.n	1bd7c <__multiply+0x24>
   1bd72:	0033      	movs	r3, r6
   1bd74:	0017      	movs	r7, r2
   1bd76:	0026      	movs	r6, r4
   1bd78:	000d      	movs	r5, r1
   1bd7a:	001c      	movs	r4, r3
   1bd7c:	1933      	adds	r3, r6, r4
   1bd7e:	4698      	mov	r8, r3
   1bd80:	68bb      	ldr	r3, [r7, #8]
   1bd82:	6879      	ldr	r1, [r7, #4]
   1bd84:	4598      	cmp	r8, r3
   1bd86:	dd00      	ble.n	1bd8a <__multiply+0x32>
   1bd88:	3101      	adds	r1, #1
   1bd8a:	f7ff ff1b 	bl	1bbc4 <_Balloc>
   1bd8e:	2214      	movs	r2, #20
   1bd90:	0003      	movs	r3, r0
   1bd92:	4694      	mov	ip, r2
   1bd94:	4463      	add	r3, ip
   1bd96:	469b      	mov	fp, r3
   1bd98:	4643      	mov	r3, r8
   1bd9a:	009b      	lsls	r3, r3, #2
   1bd9c:	445b      	add	r3, fp
   1bd9e:	0019      	movs	r1, r3
   1bda0:	9302      	str	r3, [sp, #8]
   1bda2:	9003      	str	r0, [sp, #12]
   1bda4:	465b      	mov	r3, fp
   1bda6:	2200      	movs	r2, #0
   1bda8:	458b      	cmp	fp, r1
   1bdaa:	d203      	bcs.n	1bdb4 <__multiply+0x5c>
   1bdac:	9902      	ldr	r1, [sp, #8]
   1bdae:	c304      	stmia	r3!, {r2}
   1bdb0:	4299      	cmp	r1, r3
   1bdb2:	d8fc      	bhi.n	1bdae <__multiply+0x56>
   1bdb4:	2314      	movs	r3, #20
   1bdb6:	00a4      	lsls	r4, r4, #2
   1bdb8:	469a      	mov	sl, r3
   1bdba:	3714      	adds	r7, #20
   1bdbc:	0023      	movs	r3, r4
   1bdbe:	46bc      	mov	ip, r7
   1bdc0:	44aa      	add	sl, r5
   1bdc2:	00b6      	lsls	r6, r6, #2
   1bdc4:	4453      	add	r3, sl
   1bdc6:	9700      	str	r7, [sp, #0]
   1bdc8:	44b4      	add	ip, r6
   1bdca:	9301      	str	r3, [sp, #4]
   1bdcc:	459a      	cmp	sl, r3
   1bdce:	d24f      	bcs.n	1be70 <__multiply+0x118>
   1bdd0:	4653      	mov	r3, sl
   1bdd2:	681b      	ldr	r3, [r3, #0]
   1bdd4:	041e      	lsls	r6, r3, #16
   1bdd6:	0c36      	lsrs	r6, r6, #16
   1bdd8:	d020      	beq.n	1be1c <__multiply+0xc4>
   1bdda:	465c      	mov	r4, fp
   1bddc:	2700      	movs	r7, #0
   1bdde:	9d00      	ldr	r5, [sp, #0]
   1bde0:	0021      	movs	r1, r4
   1bde2:	cc08      	ldmia	r4!, {r3}
   1bde4:	cd04      	ldmia	r5!, {r2}
   1bde6:	4699      	mov	r9, r3
   1bde8:	4648      	mov	r0, r9
   1bdea:	0413      	lsls	r3, r2, #16
   1bdec:	0c1b      	lsrs	r3, r3, #16
   1bdee:	4373      	muls	r3, r6
   1bdf0:	0400      	lsls	r0, r0, #16
   1bdf2:	0c00      	lsrs	r0, r0, #16
   1bdf4:	181b      	adds	r3, r3, r0
   1bdf6:	19d8      	adds	r0, r3, r7
   1bdf8:	0c13      	lsrs	r3, r2, #16
   1bdfa:	464a      	mov	r2, r9
   1bdfc:	4373      	muls	r3, r6
   1bdfe:	0c12      	lsrs	r2, r2, #16
   1be00:	189b      	adds	r3, r3, r2
   1be02:	0c02      	lsrs	r2, r0, #16
   1be04:	189b      	adds	r3, r3, r2
   1be06:	0402      	lsls	r2, r0, #16
   1be08:	0c1f      	lsrs	r7, r3, #16
   1be0a:	0c12      	lsrs	r2, r2, #16
   1be0c:	041b      	lsls	r3, r3, #16
   1be0e:	4313      	orrs	r3, r2
   1be10:	600b      	str	r3, [r1, #0]
   1be12:	45ac      	cmp	ip, r5
   1be14:	d8e4      	bhi.n	1bde0 <__multiply+0x88>
   1be16:	4653      	mov	r3, sl
   1be18:	6027      	str	r7, [r4, #0]
   1be1a:	681b      	ldr	r3, [r3, #0]
   1be1c:	0c1e      	lsrs	r6, r3, #16
   1be1e:	d020      	beq.n	1be62 <__multiply+0x10a>
   1be20:	465b      	mov	r3, fp
   1be22:	2100      	movs	r1, #0
   1be24:	681b      	ldr	r3, [r3, #0]
   1be26:	465c      	mov	r4, fp
   1be28:	0018      	movs	r0, r3
   1be2a:	000f      	movs	r7, r1
   1be2c:	4662      	mov	r2, ip
   1be2e:	9d00      	ldr	r5, [sp, #0]
   1be30:	8829      	ldrh	r1, [r5, #0]
   1be32:	0c00      	lsrs	r0, r0, #16
   1be34:	4371      	muls	r1, r6
   1be36:	1809      	adds	r1, r1, r0
   1be38:	19c9      	adds	r1, r1, r7
   1be3a:	041b      	lsls	r3, r3, #16
   1be3c:	0408      	lsls	r0, r1, #16
   1be3e:	0c1b      	lsrs	r3, r3, #16
   1be40:	4303      	orrs	r3, r0
   1be42:	6023      	str	r3, [r4, #0]
   1be44:	cd08      	ldmia	r5!, {r3}
   1be46:	6860      	ldr	r0, [r4, #4]
   1be48:	0c1b      	lsrs	r3, r3, #16
   1be4a:	4373      	muls	r3, r6
   1be4c:	0407      	lsls	r7, r0, #16
   1be4e:	0c3f      	lsrs	r7, r7, #16
   1be50:	19db      	adds	r3, r3, r7
   1be52:	0c09      	lsrs	r1, r1, #16
   1be54:	185b      	adds	r3, r3, r1
   1be56:	0c1f      	lsrs	r7, r3, #16
   1be58:	3404      	adds	r4, #4
   1be5a:	42aa      	cmp	r2, r5
   1be5c:	d8e8      	bhi.n	1be30 <__multiply+0xd8>
   1be5e:	4694      	mov	ip, r2
   1be60:	6023      	str	r3, [r4, #0]
   1be62:	2304      	movs	r3, #4
   1be64:	4699      	mov	r9, r3
   1be66:	9b01      	ldr	r3, [sp, #4]
   1be68:	44ca      	add	sl, r9
   1be6a:	44cb      	add	fp, r9
   1be6c:	4553      	cmp	r3, sl
   1be6e:	d8af      	bhi.n	1bdd0 <__multiply+0x78>
   1be70:	4643      	mov	r3, r8
   1be72:	2b00      	cmp	r3, #0
   1be74:	dd0e      	ble.n	1be94 <__multiply+0x13c>
   1be76:	9b02      	ldr	r3, [sp, #8]
   1be78:	3b04      	subs	r3, #4
   1be7a:	681a      	ldr	r2, [r3, #0]
   1be7c:	2a00      	cmp	r2, #0
   1be7e:	d109      	bne.n	1be94 <__multiply+0x13c>
   1be80:	4642      	mov	r2, r8
   1be82:	e003      	b.n	1be8c <__multiply+0x134>
   1be84:	3b04      	subs	r3, #4
   1be86:	6819      	ldr	r1, [r3, #0]
   1be88:	2900      	cmp	r1, #0
   1be8a:	d102      	bne.n	1be92 <__multiply+0x13a>
   1be8c:	3a01      	subs	r2, #1
   1be8e:	2a00      	cmp	r2, #0
   1be90:	d1f8      	bne.n	1be84 <__multiply+0x12c>
   1be92:	4690      	mov	r8, r2
   1be94:	9b03      	ldr	r3, [sp, #12]
   1be96:	4642      	mov	r2, r8
   1be98:	0018      	movs	r0, r3
   1be9a:	611a      	str	r2, [r3, #16]
   1be9c:	b005      	add	sp, #20
   1be9e:	bc3c      	pop	{r2, r3, r4, r5}
   1bea0:	4690      	mov	r8, r2
   1bea2:	4699      	mov	r9, r3
   1bea4:	46a2      	mov	sl, r4
   1bea6:	46ab      	mov	fp, r5
   1bea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1beaa:	46c0      	nop			; (mov r8, r8)

0001beac <__pow5mult>:
   1beac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1beae:	4647      	mov	r7, r8
   1beb0:	46ce      	mov	lr, r9
   1beb2:	2303      	movs	r3, #3
   1beb4:	b580      	push	{r7, lr}
   1beb6:	4680      	mov	r8, r0
   1beb8:	000f      	movs	r7, r1
   1beba:	0014      	movs	r4, r2
   1bebc:	4013      	ands	r3, r2
   1bebe:	d13a      	bne.n	1bf36 <__pow5mult+0x8a>
   1bec0:	10a4      	asrs	r4, r4, #2
   1bec2:	003e      	movs	r6, r7
   1bec4:	2c00      	cmp	r4, #0
   1bec6:	d025      	beq.n	1bf14 <__pow5mult+0x68>
   1bec8:	4643      	mov	r3, r8
   1beca:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1becc:	2d00      	cmp	r5, #0
   1bece:	d03b      	beq.n	1bf48 <__pow5mult+0x9c>
   1bed0:	003e      	movs	r6, r7
   1bed2:	2300      	movs	r3, #0
   1bed4:	2701      	movs	r7, #1
   1bed6:	4699      	mov	r9, r3
   1bed8:	4227      	tst	r7, r4
   1beda:	d107      	bne.n	1beec <__pow5mult+0x40>
   1bedc:	1064      	asrs	r4, r4, #1
   1bede:	d019      	beq.n	1bf14 <__pow5mult+0x68>
   1bee0:	6828      	ldr	r0, [r5, #0]
   1bee2:	2800      	cmp	r0, #0
   1bee4:	d01b      	beq.n	1bf1e <__pow5mult+0x72>
   1bee6:	0005      	movs	r5, r0
   1bee8:	4227      	tst	r7, r4
   1beea:	d0f7      	beq.n	1bedc <__pow5mult+0x30>
   1beec:	002a      	movs	r2, r5
   1beee:	0031      	movs	r1, r6
   1bef0:	4640      	mov	r0, r8
   1bef2:	f7ff ff31 	bl	1bd58 <__multiply>
   1bef6:	2e00      	cmp	r6, #0
   1bef8:	d01b      	beq.n	1bf32 <__pow5mult+0x86>
   1befa:	4642      	mov	r2, r8
   1befc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1befe:	6873      	ldr	r3, [r6, #4]
   1bf00:	4694      	mov	ip, r2
   1bf02:	009b      	lsls	r3, r3, #2
   1bf04:	4463      	add	r3, ip
   1bf06:	681a      	ldr	r2, [r3, #0]
   1bf08:	1064      	asrs	r4, r4, #1
   1bf0a:	6032      	str	r2, [r6, #0]
   1bf0c:	601e      	str	r6, [r3, #0]
   1bf0e:	0006      	movs	r6, r0
   1bf10:	2c00      	cmp	r4, #0
   1bf12:	d1e5      	bne.n	1bee0 <__pow5mult+0x34>
   1bf14:	0030      	movs	r0, r6
   1bf16:	bc0c      	pop	{r2, r3}
   1bf18:	4690      	mov	r8, r2
   1bf1a:	4699      	mov	r9, r3
   1bf1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bf1e:	002a      	movs	r2, r5
   1bf20:	0029      	movs	r1, r5
   1bf22:	4640      	mov	r0, r8
   1bf24:	f7ff ff18 	bl	1bd58 <__multiply>
   1bf28:	464b      	mov	r3, r9
   1bf2a:	6028      	str	r0, [r5, #0]
   1bf2c:	6003      	str	r3, [r0, #0]
   1bf2e:	0005      	movs	r5, r0
   1bf30:	e7da      	b.n	1bee8 <__pow5mult+0x3c>
   1bf32:	0006      	movs	r6, r0
   1bf34:	e7d2      	b.n	1bedc <__pow5mult+0x30>
   1bf36:	4a0b      	ldr	r2, [pc, #44]	; (1bf64 <__pow5mult+0xb8>)
   1bf38:	3b01      	subs	r3, #1
   1bf3a:	009b      	lsls	r3, r3, #2
   1bf3c:	589a      	ldr	r2, [r3, r2]
   1bf3e:	2300      	movs	r3, #0
   1bf40:	f7ff fe72 	bl	1bc28 <__multadd>
   1bf44:	0007      	movs	r7, r0
   1bf46:	e7bb      	b.n	1bec0 <__pow5mult+0x14>
   1bf48:	2101      	movs	r1, #1
   1bf4a:	4640      	mov	r0, r8
   1bf4c:	f7ff fe3a 	bl	1bbc4 <_Balloc>
   1bf50:	4b05      	ldr	r3, [pc, #20]	; (1bf68 <__pow5mult+0xbc>)
   1bf52:	0005      	movs	r5, r0
   1bf54:	6143      	str	r3, [r0, #20]
   1bf56:	2301      	movs	r3, #1
   1bf58:	6103      	str	r3, [r0, #16]
   1bf5a:	4643      	mov	r3, r8
   1bf5c:	6498      	str	r0, [r3, #72]	; 0x48
   1bf5e:	2300      	movs	r3, #0
   1bf60:	6003      	str	r3, [r0, #0]
   1bf62:	e7b5      	b.n	1bed0 <__pow5mult+0x24>
   1bf64:	0001fb80 	.word	0x0001fb80
   1bf68:	00000271 	.word	0x00000271

0001bf6c <__lshift>:
   1bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf6e:	464e      	mov	r6, r9
   1bf70:	4645      	mov	r5, r8
   1bf72:	46de      	mov	lr, fp
   1bf74:	4657      	mov	r7, sl
   1bf76:	b5e0      	push	{r5, r6, r7, lr}
   1bf78:	000e      	movs	r6, r1
   1bf7a:	6933      	ldr	r3, [r6, #16]
   1bf7c:	1154      	asrs	r4, r2, #5
   1bf7e:	4698      	mov	r8, r3
   1bf80:	44a0      	add	r8, r4
   1bf82:	4643      	mov	r3, r8
   1bf84:	1c5d      	adds	r5, r3, #1
   1bf86:	68b3      	ldr	r3, [r6, #8]
   1bf88:	4683      	mov	fp, r0
   1bf8a:	4691      	mov	r9, r2
   1bf8c:	6849      	ldr	r1, [r1, #4]
   1bf8e:	429d      	cmp	r5, r3
   1bf90:	dd03      	ble.n	1bf9a <__lshift+0x2e>
   1bf92:	3101      	adds	r1, #1
   1bf94:	005b      	lsls	r3, r3, #1
   1bf96:	429d      	cmp	r5, r3
   1bf98:	dcfb      	bgt.n	1bf92 <__lshift+0x26>
   1bf9a:	4658      	mov	r0, fp
   1bf9c:	f7ff fe12 	bl	1bbc4 <_Balloc>
   1bfa0:	0003      	movs	r3, r0
   1bfa2:	4684      	mov	ip, r0
   1bfa4:	3314      	adds	r3, #20
   1bfa6:	2c00      	cmp	r4, #0
   1bfa8:	dd06      	ble.n	1bfb8 <__lshift+0x4c>
   1bfaa:	2100      	movs	r1, #0
   1bfac:	00a4      	lsls	r4, r4, #2
   1bfae:	001a      	movs	r2, r3
   1bfb0:	191b      	adds	r3, r3, r4
   1bfb2:	c202      	stmia	r2!, {r1}
   1bfb4:	4293      	cmp	r3, r2
   1bfb6:	d1fc      	bne.n	1bfb2 <__lshift+0x46>
   1bfb8:	6932      	ldr	r2, [r6, #16]
   1bfba:	4648      	mov	r0, r9
   1bfbc:	0097      	lsls	r7, r2, #2
   1bfbe:	0031      	movs	r1, r6
   1bfc0:	221f      	movs	r2, #31
   1bfc2:	3114      	adds	r1, #20
   1bfc4:	4010      	ands	r0, r2
   1bfc6:	19cf      	adds	r7, r1, r7
   1bfc8:	4681      	mov	r9, r0
   1bfca:	2800      	cmp	r0, #0
   1bfcc:	d025      	beq.n	1c01a <__lshift+0xae>
   1bfce:	2220      	movs	r2, #32
   1bfd0:	1a12      	subs	r2, r2, r0
   1bfd2:	4692      	mov	sl, r2
   1bfd4:	2200      	movs	r2, #0
   1bfd6:	4648      	mov	r0, r9
   1bfd8:	680c      	ldr	r4, [r1, #0]
   1bfda:	4084      	lsls	r4, r0
   1bfdc:	4650      	mov	r0, sl
   1bfde:	4314      	orrs	r4, r2
   1bfe0:	601c      	str	r4, [r3, #0]
   1bfe2:	c904      	ldmia	r1!, {r2}
   1bfe4:	3304      	adds	r3, #4
   1bfe6:	40c2      	lsrs	r2, r0
   1bfe8:	428f      	cmp	r7, r1
   1bfea:	d8f4      	bhi.n	1bfd6 <__lshift+0x6a>
   1bfec:	601a      	str	r2, [r3, #0]
   1bfee:	2a00      	cmp	r2, #0
   1bff0:	d001      	beq.n	1bff6 <__lshift+0x8a>
   1bff2:	4645      	mov	r5, r8
   1bff4:	3502      	adds	r5, #2
   1bff6:	4663      	mov	r3, ip
   1bff8:	3d01      	subs	r5, #1
   1bffa:	611d      	str	r5, [r3, #16]
   1bffc:	6873      	ldr	r3, [r6, #4]
   1bffe:	4660      	mov	r0, ip
   1c000:	009a      	lsls	r2, r3, #2
   1c002:	465b      	mov	r3, fp
   1c004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c006:	189b      	adds	r3, r3, r2
   1c008:	681a      	ldr	r2, [r3, #0]
   1c00a:	6032      	str	r2, [r6, #0]
   1c00c:	601e      	str	r6, [r3, #0]
   1c00e:	bc3c      	pop	{r2, r3, r4, r5}
   1c010:	4690      	mov	r8, r2
   1c012:	4699      	mov	r9, r3
   1c014:	46a2      	mov	sl, r4
   1c016:	46ab      	mov	fp, r5
   1c018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c01a:	c904      	ldmia	r1!, {r2}
   1c01c:	c304      	stmia	r3!, {r2}
   1c01e:	428f      	cmp	r7, r1
   1c020:	d9e9      	bls.n	1bff6 <__lshift+0x8a>
   1c022:	c904      	ldmia	r1!, {r2}
   1c024:	c304      	stmia	r3!, {r2}
   1c026:	428f      	cmp	r7, r1
   1c028:	d8f7      	bhi.n	1c01a <__lshift+0xae>
   1c02a:	e7e4      	b.n	1bff6 <__lshift+0x8a>

0001c02c <__mcmp>:
   1c02c:	690a      	ldr	r2, [r1, #16]
   1c02e:	6903      	ldr	r3, [r0, #16]
   1c030:	b530      	push	{r4, r5, lr}
   1c032:	0005      	movs	r5, r0
   1c034:	1a98      	subs	r0, r3, r2
   1c036:	d111      	bne.n	1c05c <__mcmp+0x30>
   1c038:	0092      	lsls	r2, r2, #2
   1c03a:	3514      	adds	r5, #20
   1c03c:	3114      	adds	r1, #20
   1c03e:	18ab      	adds	r3, r5, r2
   1c040:	1889      	adds	r1, r1, r2
   1c042:	e001      	b.n	1c048 <__mcmp+0x1c>
   1c044:	429d      	cmp	r5, r3
   1c046:	d209      	bcs.n	1c05c <__mcmp+0x30>
   1c048:	3b04      	subs	r3, #4
   1c04a:	3904      	subs	r1, #4
   1c04c:	681c      	ldr	r4, [r3, #0]
   1c04e:	680a      	ldr	r2, [r1, #0]
   1c050:	4294      	cmp	r4, r2
   1c052:	d0f7      	beq.n	1c044 <__mcmp+0x18>
   1c054:	4294      	cmp	r4, r2
   1c056:	4180      	sbcs	r0, r0
   1c058:	2201      	movs	r2, #1
   1c05a:	4310      	orrs	r0, r2
   1c05c:	bd30      	pop	{r4, r5, pc}
   1c05e:	46c0      	nop			; (mov r8, r8)

0001c060 <__mdiff>:
   1c060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c062:	4645      	mov	r5, r8
   1c064:	46de      	mov	lr, fp
   1c066:	4657      	mov	r7, sl
   1c068:	464e      	mov	r6, r9
   1c06a:	0014      	movs	r4, r2
   1c06c:	690b      	ldr	r3, [r1, #16]
   1c06e:	6912      	ldr	r2, [r2, #16]
   1c070:	b5e0      	push	{r5, r6, r7, lr}
   1c072:	4688      	mov	r8, r1
   1c074:	1a9d      	subs	r5, r3, r2
   1c076:	d11a      	bne.n	1c0ae <__mdiff+0x4e>
   1c078:	000f      	movs	r7, r1
   1c07a:	2114      	movs	r1, #20
   1c07c:	468c      	mov	ip, r1
   1c07e:	0092      	lsls	r2, r2, #2
   1c080:	3714      	adds	r7, #20
   1c082:	44a4      	add	ip, r4
   1c084:	18bb      	adds	r3, r7, r2
   1c086:	4462      	add	r2, ip
   1c088:	e002      	b.n	1c090 <__mdiff+0x30>
   1c08a:	429f      	cmp	r7, r3
   1c08c:	d300      	bcc.n	1c090 <__mdiff+0x30>
   1c08e:	e070      	b.n	1c172 <__mdiff+0x112>
   1c090:	3b04      	subs	r3, #4
   1c092:	3a04      	subs	r2, #4
   1c094:	681e      	ldr	r6, [r3, #0]
   1c096:	6811      	ldr	r1, [r2, #0]
   1c098:	428e      	cmp	r6, r1
   1c09a:	d0f6      	beq.n	1c08a <__mdiff+0x2a>
   1c09c:	d300      	bcc.n	1c0a0 <__mdiff+0x40>
   1c09e:	e071      	b.n	1c184 <__mdiff+0x124>
   1c0a0:	4643      	mov	r3, r8
   1c0a2:	003e      	movs	r6, r7
   1c0a4:	46a0      	mov	r8, r4
   1c0a6:	4667      	mov	r7, ip
   1c0a8:	001c      	movs	r4, r3
   1c0aa:	2501      	movs	r5, #1
   1c0ac:	e006      	b.n	1c0bc <__mdiff+0x5c>
   1c0ae:	2d00      	cmp	r5, #0
   1c0b0:	db6a      	blt.n	1c188 <__mdiff+0x128>
   1c0b2:	4647      	mov	r7, r8
   1c0b4:	0026      	movs	r6, r4
   1c0b6:	2500      	movs	r5, #0
   1c0b8:	3714      	adds	r7, #20
   1c0ba:	3614      	adds	r6, #20
   1c0bc:	4643      	mov	r3, r8
   1c0be:	6859      	ldr	r1, [r3, #4]
   1c0c0:	f7ff fd80 	bl	1bbc4 <_Balloc>
   1c0c4:	4643      	mov	r3, r8
   1c0c6:	4681      	mov	r9, r0
   1c0c8:	60c5      	str	r5, [r0, #12]
   1c0ca:	6918      	ldr	r0, [r3, #16]
   1c0cc:	464d      	mov	r5, r9
   1c0ce:	0083      	lsls	r3, r0, #2
   1c0d0:	469c      	mov	ip, r3
   1c0d2:	6923      	ldr	r3, [r4, #16]
   1c0d4:	44bc      	add	ip, r7
   1c0d6:	009b      	lsls	r3, r3, #2
   1c0d8:	4698      	mov	r8, r3
   1c0da:	2300      	movs	r3, #0
   1c0dc:	44b0      	add	r8, r6
   1c0de:	3514      	adds	r5, #20
   1c0e0:	469a      	mov	sl, r3
   1c0e2:	e000      	b.n	1c0e6 <__mdiff+0x86>
   1c0e4:	0027      	movs	r7, r4
   1c0e6:	ce04      	ldmia	r6!, {r2}
   1c0e8:	003c      	movs	r4, r7
   1c0ea:	4693      	mov	fp, r2
   1c0ec:	4659      	mov	r1, fp
   1c0ee:	cc08      	ldmia	r4!, {r3}
   1c0f0:	0409      	lsls	r1, r1, #16
   1c0f2:	041a      	lsls	r2, r3, #16
   1c0f4:	0c12      	lsrs	r2, r2, #16
   1c0f6:	4452      	add	r2, sl
   1c0f8:	0c09      	lsrs	r1, r1, #16
   1c0fa:	1a52      	subs	r2, r2, r1
   1c0fc:	0c19      	lsrs	r1, r3, #16
   1c0fe:	465b      	mov	r3, fp
   1c100:	0c1b      	lsrs	r3, r3, #16
   1c102:	1acb      	subs	r3, r1, r3
   1c104:	1411      	asrs	r1, r2, #16
   1c106:	185b      	adds	r3, r3, r1
   1c108:	0412      	lsls	r2, r2, #16
   1c10a:	1419      	asrs	r1, r3, #16
   1c10c:	0c12      	lsrs	r2, r2, #16
   1c10e:	041b      	lsls	r3, r3, #16
   1c110:	468a      	mov	sl, r1
   1c112:	4313      	orrs	r3, r2
   1c114:	1d29      	adds	r1, r5, #4
   1c116:	602b      	str	r3, [r5, #0]
   1c118:	000d      	movs	r5, r1
   1c11a:	45b0      	cmp	r8, r6
   1c11c:	d8e2      	bhi.n	1c0e4 <__mdiff+0x84>
   1c11e:	45a4      	cmp	ip, r4
   1c120:	d916      	bls.n	1c150 <__mdiff+0xf0>
   1c122:	cc08      	ldmia	r4!, {r3}
   1c124:	041a      	lsls	r2, r3, #16
   1c126:	0c12      	lsrs	r2, r2, #16
   1c128:	4452      	add	r2, sl
   1c12a:	1416      	asrs	r6, r2, #16
   1c12c:	0c1b      	lsrs	r3, r3, #16
   1c12e:	199b      	adds	r3, r3, r6
   1c130:	0412      	lsls	r2, r2, #16
   1c132:	141e      	asrs	r6, r3, #16
   1c134:	0c12      	lsrs	r2, r2, #16
   1c136:	041b      	lsls	r3, r3, #16
   1c138:	4313      	orrs	r3, r2
   1c13a:	46b2      	mov	sl, r6
   1c13c:	c508      	stmia	r5!, {r3}
   1c13e:	45a4      	cmp	ip, r4
   1c140:	d8ef      	bhi.n	1c122 <__mdiff+0xc2>
   1c142:	4662      	mov	r2, ip
   1c144:	2403      	movs	r4, #3
   1c146:	1bd2      	subs	r2, r2, r7
   1c148:	3a05      	subs	r2, #5
   1c14a:	43a2      	bics	r2, r4
   1c14c:	3204      	adds	r2, #4
   1c14e:	1889      	adds	r1, r1, r2
   1c150:	3904      	subs	r1, #4
   1c152:	2b00      	cmp	r3, #0
   1c154:	d104      	bne.n	1c160 <__mdiff+0x100>
   1c156:	3904      	subs	r1, #4
   1c158:	680b      	ldr	r3, [r1, #0]
   1c15a:	3801      	subs	r0, #1
   1c15c:	2b00      	cmp	r3, #0
   1c15e:	d0fa      	beq.n	1c156 <__mdiff+0xf6>
   1c160:	464b      	mov	r3, r9
   1c162:	6118      	str	r0, [r3, #16]
   1c164:	4648      	mov	r0, r9
   1c166:	bc3c      	pop	{r2, r3, r4, r5}
   1c168:	4690      	mov	r8, r2
   1c16a:	4699      	mov	r9, r3
   1c16c:	46a2      	mov	sl, r4
   1c16e:	46ab      	mov	fp, r5
   1c170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c172:	2100      	movs	r1, #0
   1c174:	f7ff fd26 	bl	1bbc4 <_Balloc>
   1c178:	2301      	movs	r3, #1
   1c17a:	6103      	str	r3, [r0, #16]
   1c17c:	2300      	movs	r3, #0
   1c17e:	4681      	mov	r9, r0
   1c180:	6143      	str	r3, [r0, #20]
   1c182:	e7ef      	b.n	1c164 <__mdiff+0x104>
   1c184:	4666      	mov	r6, ip
   1c186:	e799      	b.n	1c0bc <__mdiff+0x5c>
   1c188:	0027      	movs	r7, r4
   1c18a:	000e      	movs	r6, r1
   1c18c:	46a0      	mov	r8, r4
   1c18e:	3714      	adds	r7, #20
   1c190:	3614      	adds	r6, #20
   1c192:	000c      	movs	r4, r1
   1c194:	2501      	movs	r5, #1
   1c196:	e791      	b.n	1c0bc <__mdiff+0x5c>

0001c198 <__d2b>:
   1c198:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c19a:	2101      	movs	r1, #1
   1c19c:	001c      	movs	r4, r3
   1c19e:	b083      	sub	sp, #12
   1c1a0:	9e08      	ldr	r6, [sp, #32]
   1c1a2:	0015      	movs	r5, r2
   1c1a4:	f7ff fd0e 	bl	1bbc4 <_Balloc>
   1c1a8:	0323      	lsls	r3, r4, #12
   1c1aa:	0064      	lsls	r4, r4, #1
   1c1ac:	0007      	movs	r7, r0
   1c1ae:	0b1b      	lsrs	r3, r3, #12
   1c1b0:	0d64      	lsrs	r4, r4, #21
   1c1b2:	d002      	beq.n	1c1ba <__d2b+0x22>
   1c1b4:	2280      	movs	r2, #128	; 0x80
   1c1b6:	0352      	lsls	r2, r2, #13
   1c1b8:	4313      	orrs	r3, r2
   1c1ba:	9301      	str	r3, [sp, #4]
   1c1bc:	2d00      	cmp	r5, #0
   1c1be:	d019      	beq.n	1c1f4 <__d2b+0x5c>
   1c1c0:	4668      	mov	r0, sp
   1c1c2:	9500      	str	r5, [sp, #0]
   1c1c4:	f7ff fd90 	bl	1bce8 <__lo0bits>
   1c1c8:	2800      	cmp	r0, #0
   1c1ca:	d130      	bne.n	1c22e <__d2b+0x96>
   1c1cc:	9b00      	ldr	r3, [sp, #0]
   1c1ce:	617b      	str	r3, [r7, #20]
   1c1d0:	9b01      	ldr	r3, [sp, #4]
   1c1d2:	61bb      	str	r3, [r7, #24]
   1c1d4:	1e5a      	subs	r2, r3, #1
   1c1d6:	4193      	sbcs	r3, r2
   1c1d8:	1c5d      	adds	r5, r3, #1
   1c1da:	613d      	str	r5, [r7, #16]
   1c1dc:	2c00      	cmp	r4, #0
   1c1de:	d014      	beq.n	1c20a <__d2b+0x72>
   1c1e0:	4b19      	ldr	r3, [pc, #100]	; (1c248 <__d2b+0xb0>)
   1c1e2:	469c      	mov	ip, r3
   1c1e4:	2335      	movs	r3, #53	; 0x35
   1c1e6:	4464      	add	r4, ip
   1c1e8:	1824      	adds	r4, r4, r0
   1c1ea:	1a18      	subs	r0, r3, r0
   1c1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c1ee:	6034      	str	r4, [r6, #0]
   1c1f0:	6018      	str	r0, [r3, #0]
   1c1f2:	e019      	b.n	1c228 <__d2b+0x90>
   1c1f4:	a801      	add	r0, sp, #4
   1c1f6:	f7ff fd77 	bl	1bce8 <__lo0bits>
   1c1fa:	9b01      	ldr	r3, [sp, #4]
   1c1fc:	3020      	adds	r0, #32
   1c1fe:	617b      	str	r3, [r7, #20]
   1c200:	2301      	movs	r3, #1
   1c202:	2501      	movs	r5, #1
   1c204:	613b      	str	r3, [r7, #16]
   1c206:	2c00      	cmp	r4, #0
   1c208:	d1ea      	bne.n	1c1e0 <__d2b+0x48>
   1c20a:	4b10      	ldr	r3, [pc, #64]	; (1c24c <__d2b+0xb4>)
   1c20c:	469c      	mov	ip, r3
   1c20e:	4b10      	ldr	r3, [pc, #64]	; (1c250 <__d2b+0xb8>)
   1c210:	4460      	add	r0, ip
   1c212:	18eb      	adds	r3, r5, r3
   1c214:	009b      	lsls	r3, r3, #2
   1c216:	18fb      	adds	r3, r7, r3
   1c218:	6030      	str	r0, [r6, #0]
   1c21a:	6958      	ldr	r0, [r3, #20]
   1c21c:	f7ff fd4a 	bl	1bcb4 <__hi0bits>
   1c220:	016b      	lsls	r3, r5, #5
   1c222:	1a18      	subs	r0, r3, r0
   1c224:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c226:	6018      	str	r0, [r3, #0]
   1c228:	0038      	movs	r0, r7
   1c22a:	b003      	add	sp, #12
   1c22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c22e:	9b01      	ldr	r3, [sp, #4]
   1c230:	2220      	movs	r2, #32
   1c232:	0019      	movs	r1, r3
   1c234:	1a12      	subs	r2, r2, r0
   1c236:	4091      	lsls	r1, r2
   1c238:	000a      	movs	r2, r1
   1c23a:	40c3      	lsrs	r3, r0
   1c23c:	9900      	ldr	r1, [sp, #0]
   1c23e:	9301      	str	r3, [sp, #4]
   1c240:	430a      	orrs	r2, r1
   1c242:	617a      	str	r2, [r7, #20]
   1c244:	e7c5      	b.n	1c1d2 <__d2b+0x3a>
   1c246:	46c0      	nop			; (mov r8, r8)
   1c248:	fffffbcd 	.word	0xfffffbcd
   1c24c:	fffffbce 	.word	0xfffffbce
   1c250:	3fffffff 	.word	0x3fffffff

0001c254 <_putc_r>:
   1c254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c256:	0006      	movs	r6, r0
   1c258:	000f      	movs	r7, r1
   1c25a:	0014      	movs	r4, r2
   1c25c:	2800      	cmp	r0, #0
   1c25e:	d002      	beq.n	1c266 <_putc_r+0x12>
   1c260:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1c262:	2b00      	cmp	r3, #0
   1c264:	d029      	beq.n	1c2ba <_putc_r+0x66>
   1c266:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c268:	07db      	lsls	r3, r3, #31
   1c26a:	d402      	bmi.n	1c272 <_putc_r+0x1e>
   1c26c:	89a3      	ldrh	r3, [r4, #12]
   1c26e:	059b      	lsls	r3, r3, #22
   1c270:	d526      	bpl.n	1c2c0 <_putc_r+0x6c>
   1c272:	68a3      	ldr	r3, [r4, #8]
   1c274:	3b01      	subs	r3, #1
   1c276:	60a3      	str	r3, [r4, #8]
   1c278:	2b00      	cmp	r3, #0
   1c27a:	db11      	blt.n	1c2a0 <_putc_r+0x4c>
   1c27c:	25ff      	movs	r5, #255	; 0xff
   1c27e:	6823      	ldr	r3, [r4, #0]
   1c280:	403d      	ands	r5, r7
   1c282:	1c5a      	adds	r2, r3, #1
   1c284:	6022      	str	r2, [r4, #0]
   1c286:	701f      	strb	r7, [r3, #0]
   1c288:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c28a:	07db      	lsls	r3, r3, #31
   1c28c:	d402      	bmi.n	1c294 <_putc_r+0x40>
   1c28e:	89a3      	ldrh	r3, [r4, #12]
   1c290:	059b      	lsls	r3, r3, #22
   1c292:	d501      	bpl.n	1c298 <_putc_r+0x44>
   1c294:	0028      	movs	r0, r5
   1c296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c298:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c29a:	f7ff fb73 	bl	1b984 <__retarget_lock_release_recursive>
   1c29e:	e7f9      	b.n	1c294 <_putc_r+0x40>
   1c2a0:	69a2      	ldr	r2, [r4, #24]
   1c2a2:	4293      	cmp	r3, r2
   1c2a4:	db02      	blt.n	1c2ac <_putc_r+0x58>
   1c2a6:	b2fb      	uxtb	r3, r7
   1c2a8:	2b0a      	cmp	r3, #10
   1c2aa:	d1e7      	bne.n	1c27c <_putc_r+0x28>
   1c2ac:	0022      	movs	r2, r4
   1c2ae:	0039      	movs	r1, r7
   1c2b0:	0030      	movs	r0, r6
   1c2b2:	f000 fa61 	bl	1c778 <__swbuf_r>
   1c2b6:	0005      	movs	r5, r0
   1c2b8:	e7e6      	b.n	1c288 <_putc_r+0x34>
   1c2ba:	f7ff f80b 	bl	1b2d4 <__sinit>
   1c2be:	e7d2      	b.n	1c266 <_putc_r+0x12>
   1c2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c2c2:	f7ff fb5d 	bl	1b980 <__retarget_lock_acquire_recursive>
   1c2c6:	e7d4      	b.n	1c272 <_putc_r+0x1e>

0001c2c8 <_realloc_r>:
   1c2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c2ca:	464e      	mov	r6, r9
   1c2cc:	4645      	mov	r5, r8
   1c2ce:	46de      	mov	lr, fp
   1c2d0:	4657      	mov	r7, sl
   1c2d2:	b5e0      	push	{r5, r6, r7, lr}
   1c2d4:	b085      	sub	sp, #20
   1c2d6:	9001      	str	r0, [sp, #4]
   1c2d8:	000e      	movs	r6, r1
   1c2da:	0015      	movs	r5, r2
   1c2dc:	2900      	cmp	r1, #0
   1c2de:	d100      	bne.n	1c2e2 <_realloc_r+0x1a>
   1c2e0:	e09e      	b.n	1c420 <_realloc_r+0x158>
   1c2e2:	0037      	movs	r7, r6
   1c2e4:	9801      	ldr	r0, [sp, #4]
   1c2e6:	3f08      	subs	r7, #8
   1c2e8:	f7fb ffe0 	bl	182ac <__malloc_lock>
   1c2ec:	687a      	ldr	r2, [r7, #4]
   1c2ee:	2303      	movs	r3, #3
   1c2f0:	0014      	movs	r4, r2
   1c2f2:	439c      	bics	r4, r3
   1c2f4:	002b      	movs	r3, r5
   1c2f6:	330b      	adds	r3, #11
   1c2f8:	46b9      	mov	r9, r7
   1c2fa:	2b16      	cmp	r3, #22
   1c2fc:	d847      	bhi.n	1c38e <_realloc_r+0xc6>
   1c2fe:	2110      	movs	r1, #16
   1c300:	2310      	movs	r3, #16
   1c302:	4688      	mov	r8, r1
   1c304:	4545      	cmp	r5, r8
   1c306:	d846      	bhi.n	1c396 <_realloc_r+0xce>
   1c308:	429c      	cmp	r4, r3
   1c30a:	da49      	bge.n	1c3a0 <_realloc_r+0xd8>
   1c30c:	49cc      	ldr	r1, [pc, #816]	; (1c640 <_realloc_r+0x378>)
   1c30e:	1938      	adds	r0, r7, r4
   1c310:	468b      	mov	fp, r1
   1c312:	6889      	ldr	r1, [r1, #8]
   1c314:	9002      	str	r0, [sp, #8]
   1c316:	4288      	cmp	r0, r1
   1c318:	d100      	bne.n	1c31c <_realloc_r+0x54>
   1c31a:	e0c2      	b.n	1c4a2 <_realloc_r+0x1da>
   1c31c:	2101      	movs	r1, #1
   1c31e:	468a      	mov	sl, r1
   1c320:	6840      	ldr	r0, [r0, #4]
   1c322:	0001      	movs	r1, r0
   1c324:	9003      	str	r0, [sp, #12]
   1c326:	4650      	mov	r0, sl
   1c328:	4381      	bics	r1, r0
   1c32a:	468c      	mov	ip, r1
   1c32c:	9902      	ldr	r1, [sp, #8]
   1c32e:	468b      	mov	fp, r1
   1c330:	44dc      	add	ip, fp
   1c332:	4661      	mov	r1, ip
   1c334:	6849      	ldr	r1, [r1, #4]
   1c336:	4201      	tst	r1, r0
   1c338:	d04d      	beq.n	1c3d6 <_realloc_r+0x10e>
   1c33a:	4210      	tst	r0, r2
   1c33c:	d100      	bne.n	1c340 <_realloc_r+0x78>
   1c33e:	e0a2      	b.n	1c486 <_realloc_r+0x1be>
   1c340:	0029      	movs	r1, r5
   1c342:	9801      	ldr	r0, [sp, #4]
   1c344:	f7fb fc4c 	bl	17be0 <_malloc_r>
   1c348:	1e05      	subs	r5, r0, #0
   1c34a:	d039      	beq.n	1c3c0 <_realloc_r+0xf8>
   1c34c:	2301      	movs	r3, #1
   1c34e:	0002      	movs	r2, r0
   1c350:	6879      	ldr	r1, [r7, #4]
   1c352:	3a08      	subs	r2, #8
   1c354:	4399      	bics	r1, r3
   1c356:	187f      	adds	r7, r7, r1
   1c358:	42ba      	cmp	r2, r7
   1c35a:	d100      	bne.n	1c35e <_realloc_r+0x96>
   1c35c:	e12e      	b.n	1c5bc <_realloc_r+0x2f4>
   1c35e:	1f22      	subs	r2, r4, #4
   1c360:	2a24      	cmp	r2, #36	; 0x24
   1c362:	d900      	bls.n	1c366 <_realloc_r+0x9e>
   1c364:	e114      	b.n	1c590 <_realloc_r+0x2c8>
   1c366:	2a13      	cmp	r2, #19
   1c368:	d900      	bls.n	1c36c <_realloc_r+0xa4>
   1c36a:	e0e8      	b.n	1c53e <_realloc_r+0x276>
   1c36c:	0003      	movs	r3, r0
   1c36e:	0032      	movs	r2, r6
   1c370:	6811      	ldr	r1, [r2, #0]
   1c372:	6019      	str	r1, [r3, #0]
   1c374:	6851      	ldr	r1, [r2, #4]
   1c376:	6059      	str	r1, [r3, #4]
   1c378:	6892      	ldr	r2, [r2, #8]
   1c37a:	609a      	str	r2, [r3, #8]
   1c37c:	9c01      	ldr	r4, [sp, #4]
   1c37e:	0031      	movs	r1, r6
   1c380:	0020      	movs	r0, r4
   1c382:	f7ff f851 	bl	1b428 <_free_r>
   1c386:	0020      	movs	r0, r4
   1c388:	f7fb ff98 	bl	182bc <__malloc_unlock>
   1c38c:	e01b      	b.n	1c3c6 <_realloc_r+0xfe>
   1c38e:	2107      	movs	r1, #7
   1c390:	438b      	bics	r3, r1
   1c392:	4698      	mov	r8, r3
   1c394:	d5b6      	bpl.n	1c304 <_realloc_r+0x3c>
   1c396:	230c      	movs	r3, #12
   1c398:	9a01      	ldr	r2, [sp, #4]
   1c39a:	2500      	movs	r5, #0
   1c39c:	6013      	str	r3, [r2, #0]
   1c39e:	e012      	b.n	1c3c6 <_realloc_r+0xfe>
   1c3a0:	0035      	movs	r5, r6
   1c3a2:	4643      	mov	r3, r8
   1c3a4:	1ae3      	subs	r3, r4, r3
   1c3a6:	2b0f      	cmp	r3, #15
   1c3a8:	d825      	bhi.n	1c3f6 <_realloc_r+0x12e>
   1c3aa:	464b      	mov	r3, r9
   1c3ac:	2201      	movs	r2, #1
   1c3ae:	4649      	mov	r1, r9
   1c3b0:	685b      	ldr	r3, [r3, #4]
   1c3b2:	4013      	ands	r3, r2
   1c3b4:	4323      	orrs	r3, r4
   1c3b6:	604b      	str	r3, [r1, #4]
   1c3b8:	444c      	add	r4, r9
   1c3ba:	6863      	ldr	r3, [r4, #4]
   1c3bc:	431a      	orrs	r2, r3
   1c3be:	6062      	str	r2, [r4, #4]
   1c3c0:	9801      	ldr	r0, [sp, #4]
   1c3c2:	f7fb ff7b 	bl	182bc <__malloc_unlock>
   1c3c6:	0028      	movs	r0, r5
   1c3c8:	b005      	add	sp, #20
   1c3ca:	bc3c      	pop	{r2, r3, r4, r5}
   1c3cc:	4690      	mov	r8, r2
   1c3ce:	4699      	mov	r9, r3
   1c3d0:	46a2      	mov	sl, r4
   1c3d2:	46ab      	mov	fp, r5
   1c3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c3d6:	2103      	movs	r1, #3
   1c3d8:	9803      	ldr	r0, [sp, #12]
   1c3da:	468c      	mov	ip, r1
   1c3dc:	4388      	bics	r0, r1
   1c3de:	1821      	adds	r1, r4, r0
   1c3e0:	468b      	mov	fp, r1
   1c3e2:	4299      	cmp	r1, r3
   1c3e4:	db21      	blt.n	1c42a <_realloc_r+0x162>
   1c3e6:	9a02      	ldr	r2, [sp, #8]
   1c3e8:	0035      	movs	r5, r6
   1c3ea:	68d3      	ldr	r3, [r2, #12]
   1c3ec:	6892      	ldr	r2, [r2, #8]
   1c3ee:	465c      	mov	r4, fp
   1c3f0:	60d3      	str	r3, [r2, #12]
   1c3f2:	609a      	str	r2, [r3, #8]
   1c3f4:	e7d5      	b.n	1c3a2 <_realloc_r+0xda>
   1c3f6:	464a      	mov	r2, r9
   1c3f8:	2001      	movs	r0, #1
   1c3fa:	4646      	mov	r6, r8
   1c3fc:	6852      	ldr	r2, [r2, #4]
   1c3fe:	4649      	mov	r1, r9
   1c400:	4002      	ands	r2, r0
   1c402:	4332      	orrs	r2, r6
   1c404:	464e      	mov	r6, r9
   1c406:	4441      	add	r1, r8
   1c408:	4303      	orrs	r3, r0
   1c40a:	6072      	str	r2, [r6, #4]
   1c40c:	444c      	add	r4, r9
   1c40e:	604b      	str	r3, [r1, #4]
   1c410:	6863      	ldr	r3, [r4, #4]
   1c412:	3108      	adds	r1, #8
   1c414:	4318      	orrs	r0, r3
   1c416:	6060      	str	r0, [r4, #4]
   1c418:	9801      	ldr	r0, [sp, #4]
   1c41a:	f7ff f805 	bl	1b428 <_free_r>
   1c41e:	e7cf      	b.n	1c3c0 <_realloc_r+0xf8>
   1c420:	0011      	movs	r1, r2
   1c422:	f7fb fbdd 	bl	17be0 <_malloc_r>
   1c426:	0005      	movs	r5, r0
   1c428:	e7cd      	b.n	1c3c6 <_realloc_r+0xfe>
   1c42a:	4651      	mov	r1, sl
   1c42c:	4211      	tst	r1, r2
   1c42e:	d000      	beq.n	1c432 <_realloc_r+0x16a>
   1c430:	e786      	b.n	1c340 <_realloc_r+0x78>
   1c432:	4661      	mov	r1, ip
   1c434:	683a      	ldr	r2, [r7, #0]
   1c436:	1aba      	subs	r2, r7, r2
   1c438:	4692      	mov	sl, r2
   1c43a:	6852      	ldr	r2, [r2, #4]
   1c43c:	438a      	bics	r2, r1
   1c43e:	1880      	adds	r0, r0, r2
   1c440:	4683      	mov	fp, r0
   1c442:	44a3      	add	fp, r4
   1c444:	459b      	cmp	fp, r3
   1c446:	db26      	blt.n	1c496 <_realloc_r+0x1ce>
   1c448:	9a02      	ldr	r2, [sp, #8]
   1c44a:	68d3      	ldr	r3, [r2, #12]
   1c44c:	6892      	ldr	r2, [r2, #8]
   1c44e:	60d3      	str	r3, [r2, #12]
   1c450:	609a      	str	r2, [r3, #8]
   1c452:	4653      	mov	r3, sl
   1c454:	4652      	mov	r2, sl
   1c456:	4655      	mov	r5, sl
   1c458:	6892      	ldr	r2, [r2, #8]
   1c45a:	68db      	ldr	r3, [r3, #12]
   1c45c:	3508      	adds	r5, #8
   1c45e:	60d3      	str	r3, [r2, #12]
   1c460:	609a      	str	r2, [r3, #8]
   1c462:	1f22      	subs	r2, r4, #4
   1c464:	2a24      	cmp	r2, #36	; 0x24
   1c466:	d900      	bls.n	1c46a <_realloc_r+0x1a2>
   1c468:	e096      	b.n	1c598 <_realloc_r+0x2d0>
   1c46a:	2a13      	cmp	r2, #19
   1c46c:	d972      	bls.n	1c554 <_realloc_r+0x28c>
   1c46e:	4653      	mov	r3, sl
   1c470:	6831      	ldr	r1, [r6, #0]
   1c472:	6099      	str	r1, [r3, #8]
   1c474:	6871      	ldr	r1, [r6, #4]
   1c476:	60d9      	str	r1, [r3, #12]
   1c478:	2a1b      	cmp	r2, #27
   1c47a:	d900      	bls.n	1c47e <_realloc_r+0x1b6>
   1c47c:	e0a4      	b.n	1c5c8 <_realloc_r+0x300>
   1c47e:	0032      	movs	r2, r6
   1c480:	3310      	adds	r3, #16
   1c482:	3208      	adds	r2, #8
   1c484:	e068      	b.n	1c558 <_realloc_r+0x290>
   1c486:	683a      	ldr	r2, [r7, #0]
   1c488:	1aba      	subs	r2, r7, r2
   1c48a:	4692      	mov	sl, r2
   1c48c:	4651      	mov	r1, sl
   1c48e:	2203      	movs	r2, #3
   1c490:	6849      	ldr	r1, [r1, #4]
   1c492:	4391      	bics	r1, r2
   1c494:	000a      	movs	r2, r1
   1c496:	4693      	mov	fp, r2
   1c498:	44a3      	add	fp, r4
   1c49a:	459b      	cmp	fp, r3
   1c49c:	da00      	bge.n	1c4a0 <_realloc_r+0x1d8>
   1c49e:	e74f      	b.n	1c340 <_realloc_r+0x78>
   1c4a0:	e7d7      	b.n	1c452 <_realloc_r+0x18a>
   1c4a2:	2003      	movs	r0, #3
   1c4a4:	9902      	ldr	r1, [sp, #8]
   1c4a6:	4684      	mov	ip, r0
   1c4a8:	6849      	ldr	r1, [r1, #4]
   1c4aa:	4381      	bics	r1, r0
   1c4ac:	4640      	mov	r0, r8
   1c4ae:	1909      	adds	r1, r1, r4
   1c4b0:	3010      	adds	r0, #16
   1c4b2:	9002      	str	r0, [sp, #8]
   1c4b4:	4281      	cmp	r1, r0
   1c4b6:	da58      	bge.n	1c56a <_realloc_r+0x2a2>
   1c4b8:	07d2      	lsls	r2, r2, #31
   1c4ba:	d500      	bpl.n	1c4be <_realloc_r+0x1f6>
   1c4bc:	e740      	b.n	1c340 <_realloc_r+0x78>
   1c4be:	4660      	mov	r0, ip
   1c4c0:	683a      	ldr	r2, [r7, #0]
   1c4c2:	1aba      	subs	r2, r7, r2
   1c4c4:	4692      	mov	sl, r2
   1c4c6:	6852      	ldr	r2, [r2, #4]
   1c4c8:	4382      	bics	r2, r0
   1c4ca:	9802      	ldr	r0, [sp, #8]
   1c4cc:	1851      	adds	r1, r2, r1
   1c4ce:	9103      	str	r1, [sp, #12]
   1c4d0:	4288      	cmp	r0, r1
   1c4d2:	dce0      	bgt.n	1c496 <_realloc_r+0x1ce>
   1c4d4:	4653      	mov	r3, sl
   1c4d6:	4652      	mov	r2, sl
   1c4d8:	4655      	mov	r5, sl
   1c4da:	6892      	ldr	r2, [r2, #8]
   1c4dc:	68db      	ldr	r3, [r3, #12]
   1c4de:	3508      	adds	r5, #8
   1c4e0:	60d3      	str	r3, [r2, #12]
   1c4e2:	609a      	str	r2, [r3, #8]
   1c4e4:	1f22      	subs	r2, r4, #4
   1c4e6:	2a24      	cmp	r2, #36	; 0x24
   1c4e8:	d900      	bls.n	1c4ec <_realloc_r+0x224>
   1c4ea:	e08e      	b.n	1c60a <_realloc_r+0x342>
   1c4ec:	2a13      	cmp	r2, #19
   1c4ee:	d800      	bhi.n	1c4f2 <_realloc_r+0x22a>
   1c4f0:	e088      	b.n	1c604 <_realloc_r+0x33c>
   1c4f2:	4653      	mov	r3, sl
   1c4f4:	6831      	ldr	r1, [r6, #0]
   1c4f6:	6099      	str	r1, [r3, #8]
   1c4f8:	6871      	ldr	r1, [r6, #4]
   1c4fa:	60d9      	str	r1, [r3, #12]
   1c4fc:	2a1b      	cmp	r2, #27
   1c4fe:	d900      	bls.n	1c502 <_realloc_r+0x23a>
   1c500:	e088      	b.n	1c614 <_realloc_r+0x34c>
   1c502:	0032      	movs	r2, r6
   1c504:	3310      	adds	r3, #16
   1c506:	3208      	adds	r2, #8
   1c508:	6811      	ldr	r1, [r2, #0]
   1c50a:	6019      	str	r1, [r3, #0]
   1c50c:	6851      	ldr	r1, [r2, #4]
   1c50e:	6059      	str	r1, [r3, #4]
   1c510:	6892      	ldr	r2, [r2, #8]
   1c512:	609a      	str	r2, [r3, #8]
   1c514:	4651      	mov	r1, sl
   1c516:	465b      	mov	r3, fp
   1c518:	4642      	mov	r2, r8
   1c51a:	4441      	add	r1, r8
   1c51c:	6099      	str	r1, [r3, #8]
   1c51e:	9b03      	ldr	r3, [sp, #12]
   1c520:	9801      	ldr	r0, [sp, #4]
   1c522:	1a9a      	subs	r2, r3, r2
   1c524:	2301      	movs	r3, #1
   1c526:	431a      	orrs	r2, r3
   1c528:	604a      	str	r2, [r1, #4]
   1c52a:	4652      	mov	r2, sl
   1c52c:	6852      	ldr	r2, [r2, #4]
   1c52e:	4013      	ands	r3, r2
   1c530:	4642      	mov	r2, r8
   1c532:	4313      	orrs	r3, r2
   1c534:	4652      	mov	r2, sl
   1c536:	6053      	str	r3, [r2, #4]
   1c538:	f7fb fec0 	bl	182bc <__malloc_unlock>
   1c53c:	e743      	b.n	1c3c6 <_realloc_r+0xfe>
   1c53e:	6833      	ldr	r3, [r6, #0]
   1c540:	6003      	str	r3, [r0, #0]
   1c542:	6873      	ldr	r3, [r6, #4]
   1c544:	6043      	str	r3, [r0, #4]
   1c546:	2a1b      	cmp	r2, #27
   1c548:	d82d      	bhi.n	1c5a6 <_realloc_r+0x2de>
   1c54a:	0003      	movs	r3, r0
   1c54c:	0032      	movs	r2, r6
   1c54e:	3308      	adds	r3, #8
   1c550:	3208      	adds	r2, #8
   1c552:	e70d      	b.n	1c370 <_realloc_r+0xa8>
   1c554:	002b      	movs	r3, r5
   1c556:	0032      	movs	r2, r6
   1c558:	6811      	ldr	r1, [r2, #0]
   1c55a:	465c      	mov	r4, fp
   1c55c:	6019      	str	r1, [r3, #0]
   1c55e:	6851      	ldr	r1, [r2, #4]
   1c560:	46d1      	mov	r9, sl
   1c562:	6059      	str	r1, [r3, #4]
   1c564:	6892      	ldr	r2, [r2, #8]
   1c566:	609a      	str	r2, [r3, #8]
   1c568:	e71b      	b.n	1c3a2 <_realloc_r+0xda>
   1c56a:	4643      	mov	r3, r8
   1c56c:	18fa      	adds	r2, r7, r3
   1c56e:	465b      	mov	r3, fp
   1c570:	609a      	str	r2, [r3, #8]
   1c572:	4643      	mov	r3, r8
   1c574:	1ac9      	subs	r1, r1, r3
   1c576:	2301      	movs	r3, #1
   1c578:	4319      	orrs	r1, r3
   1c57a:	6051      	str	r1, [r2, #4]
   1c57c:	687a      	ldr	r2, [r7, #4]
   1c57e:	9801      	ldr	r0, [sp, #4]
   1c580:	4013      	ands	r3, r2
   1c582:	4642      	mov	r2, r8
   1c584:	4313      	orrs	r3, r2
   1c586:	607b      	str	r3, [r7, #4]
   1c588:	f7fb fe98 	bl	182bc <__malloc_unlock>
   1c58c:	0035      	movs	r5, r6
   1c58e:	e71a      	b.n	1c3c6 <_realloc_r+0xfe>
   1c590:	0031      	movs	r1, r6
   1c592:	f7ff fac7 	bl	1bb24 <memmove>
   1c596:	e6f1      	b.n	1c37c <_realloc_r+0xb4>
   1c598:	0031      	movs	r1, r6
   1c59a:	0028      	movs	r0, r5
   1c59c:	f7ff fac2 	bl	1bb24 <memmove>
   1c5a0:	465c      	mov	r4, fp
   1c5a2:	46d1      	mov	r9, sl
   1c5a4:	e6fd      	b.n	1c3a2 <_realloc_r+0xda>
   1c5a6:	68b3      	ldr	r3, [r6, #8]
   1c5a8:	6083      	str	r3, [r0, #8]
   1c5aa:	68f3      	ldr	r3, [r6, #12]
   1c5ac:	60c3      	str	r3, [r0, #12]
   1c5ae:	2a24      	cmp	r2, #36	; 0x24
   1c5b0:	d015      	beq.n	1c5de <_realloc_r+0x316>
   1c5b2:	0003      	movs	r3, r0
   1c5b4:	0032      	movs	r2, r6
   1c5b6:	3310      	adds	r3, #16
   1c5b8:	3210      	adds	r2, #16
   1c5ba:	e6d9      	b.n	1c370 <_realloc_r+0xa8>
   1c5bc:	6853      	ldr	r3, [r2, #4]
   1c5be:	2203      	movs	r2, #3
   1c5c0:	4393      	bics	r3, r2
   1c5c2:	18e4      	adds	r4, r4, r3
   1c5c4:	0035      	movs	r5, r6
   1c5c6:	e6ec      	b.n	1c3a2 <_realloc_r+0xda>
   1c5c8:	4653      	mov	r3, sl
   1c5ca:	68b1      	ldr	r1, [r6, #8]
   1c5cc:	6119      	str	r1, [r3, #16]
   1c5ce:	68f1      	ldr	r1, [r6, #12]
   1c5d0:	6159      	str	r1, [r3, #20]
   1c5d2:	2a24      	cmp	r2, #36	; 0x24
   1c5d4:	d00c      	beq.n	1c5f0 <_realloc_r+0x328>
   1c5d6:	0032      	movs	r2, r6
   1c5d8:	3318      	adds	r3, #24
   1c5da:	3210      	adds	r2, #16
   1c5dc:	e7bc      	b.n	1c558 <_realloc_r+0x290>
   1c5de:	6933      	ldr	r3, [r6, #16]
   1c5e0:	0032      	movs	r2, r6
   1c5e2:	6103      	str	r3, [r0, #16]
   1c5e4:	0003      	movs	r3, r0
   1c5e6:	6971      	ldr	r1, [r6, #20]
   1c5e8:	3318      	adds	r3, #24
   1c5ea:	3218      	adds	r2, #24
   1c5ec:	6141      	str	r1, [r0, #20]
   1c5ee:	e6bf      	b.n	1c370 <_realloc_r+0xa8>
   1c5f0:	4653      	mov	r3, sl
   1c5f2:	6932      	ldr	r2, [r6, #16]
   1c5f4:	4651      	mov	r1, sl
   1c5f6:	619a      	str	r2, [r3, #24]
   1c5f8:	0032      	movs	r2, r6
   1c5fa:	6970      	ldr	r0, [r6, #20]
   1c5fc:	3320      	adds	r3, #32
   1c5fe:	3218      	adds	r2, #24
   1c600:	61c8      	str	r0, [r1, #28]
   1c602:	e7a9      	b.n	1c558 <_realloc_r+0x290>
   1c604:	002b      	movs	r3, r5
   1c606:	0032      	movs	r2, r6
   1c608:	e77e      	b.n	1c508 <_realloc_r+0x240>
   1c60a:	0031      	movs	r1, r6
   1c60c:	0028      	movs	r0, r5
   1c60e:	f7ff fa89 	bl	1bb24 <memmove>
   1c612:	e77f      	b.n	1c514 <_realloc_r+0x24c>
   1c614:	4653      	mov	r3, sl
   1c616:	68b1      	ldr	r1, [r6, #8]
   1c618:	6119      	str	r1, [r3, #16]
   1c61a:	68f1      	ldr	r1, [r6, #12]
   1c61c:	6159      	str	r1, [r3, #20]
   1c61e:	2a24      	cmp	r2, #36	; 0x24
   1c620:	d003      	beq.n	1c62a <_realloc_r+0x362>
   1c622:	0032      	movs	r2, r6
   1c624:	3318      	adds	r3, #24
   1c626:	3210      	adds	r2, #16
   1c628:	e76e      	b.n	1c508 <_realloc_r+0x240>
   1c62a:	4653      	mov	r3, sl
   1c62c:	6932      	ldr	r2, [r6, #16]
   1c62e:	4651      	mov	r1, sl
   1c630:	619a      	str	r2, [r3, #24]
   1c632:	0032      	movs	r2, r6
   1c634:	6970      	ldr	r0, [r6, #20]
   1c636:	3320      	adds	r3, #32
   1c638:	3218      	adds	r2, #24
   1c63a:	61c8      	str	r0, [r1, #28]
   1c63c:	e764      	b.n	1c508 <_realloc_r+0x240>
   1c63e:	46c0      	nop			; (mov r8, r8)
   1c640:	20000508 	.word	0x20000508

0001c644 <__sread>:
   1c644:	b570      	push	{r4, r5, r6, lr}
   1c646:	000c      	movs	r4, r1
   1c648:	250e      	movs	r5, #14
   1c64a:	5f49      	ldrsh	r1, [r1, r5]
   1c64c:	f000 fae6 	bl	1cc1c <_read_r>
   1c650:	2800      	cmp	r0, #0
   1c652:	db03      	blt.n	1c65c <__sread+0x18>
   1c654:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1c656:	181b      	adds	r3, r3, r0
   1c658:	6523      	str	r3, [r4, #80]	; 0x50
   1c65a:	bd70      	pop	{r4, r5, r6, pc}
   1c65c:	89a3      	ldrh	r3, [r4, #12]
   1c65e:	4a02      	ldr	r2, [pc, #8]	; (1c668 <__sread+0x24>)
   1c660:	4013      	ands	r3, r2
   1c662:	81a3      	strh	r3, [r4, #12]
   1c664:	e7f9      	b.n	1c65a <__sread+0x16>
   1c666:	46c0      	nop			; (mov r8, r8)
   1c668:	ffffefff 	.word	0xffffefff

0001c66c <__swrite>:
   1c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c66e:	0016      	movs	r6, r2
   1c670:	001f      	movs	r7, r3
   1c672:	220c      	movs	r2, #12
   1c674:	5e8b      	ldrsh	r3, [r1, r2]
   1c676:	0005      	movs	r5, r0
   1c678:	000c      	movs	r4, r1
   1c67a:	05da      	lsls	r2, r3, #23
   1c67c:	d507      	bpl.n	1c68e <__swrite+0x22>
   1c67e:	230e      	movs	r3, #14
   1c680:	5ec9      	ldrsh	r1, [r1, r3]
   1c682:	2200      	movs	r2, #0
   1c684:	2302      	movs	r3, #2
   1c686:	f000 fab5 	bl	1cbf4 <_lseek_r>
   1c68a:	220c      	movs	r2, #12
   1c68c:	5ea3      	ldrsh	r3, [r4, r2]
   1c68e:	4a05      	ldr	r2, [pc, #20]	; (1c6a4 <__swrite+0x38>)
   1c690:	0028      	movs	r0, r5
   1c692:	4013      	ands	r3, r2
   1c694:	81a3      	strh	r3, [r4, #12]
   1c696:	0032      	movs	r2, r6
   1c698:	230e      	movs	r3, #14
   1c69a:	5ee1      	ldrsh	r1, [r4, r3]
   1c69c:	003b      	movs	r3, r7
   1c69e:	f000 f8d7 	bl	1c850 <_write_r>
   1c6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c6a4:	ffffefff 	.word	0xffffefff

0001c6a8 <__sseek>:
   1c6a8:	b570      	push	{r4, r5, r6, lr}
   1c6aa:	000c      	movs	r4, r1
   1c6ac:	250e      	movs	r5, #14
   1c6ae:	5f49      	ldrsh	r1, [r1, r5]
   1c6b0:	f000 faa0 	bl	1cbf4 <_lseek_r>
   1c6b4:	1c43      	adds	r3, r0, #1
   1c6b6:	d006      	beq.n	1c6c6 <__sseek+0x1e>
   1c6b8:	2380      	movs	r3, #128	; 0x80
   1c6ba:	89a2      	ldrh	r2, [r4, #12]
   1c6bc:	015b      	lsls	r3, r3, #5
   1c6be:	4313      	orrs	r3, r2
   1c6c0:	81a3      	strh	r3, [r4, #12]
   1c6c2:	6520      	str	r0, [r4, #80]	; 0x50
   1c6c4:	bd70      	pop	{r4, r5, r6, pc}
   1c6c6:	89a3      	ldrh	r3, [r4, #12]
   1c6c8:	4a01      	ldr	r2, [pc, #4]	; (1c6d0 <__sseek+0x28>)
   1c6ca:	4013      	ands	r3, r2
   1c6cc:	81a3      	strh	r3, [r4, #12]
   1c6ce:	e7f9      	b.n	1c6c4 <__sseek+0x1c>
   1c6d0:	ffffefff 	.word	0xffffefff

0001c6d4 <__sclose>:
   1c6d4:	b510      	push	{r4, lr}
   1c6d6:	230e      	movs	r3, #14
   1c6d8:	5ec9      	ldrsh	r1, [r1, r3]
   1c6da:	f000 f973 	bl	1c9c4 <_close_r>
   1c6de:	bd10      	pop	{r4, pc}

0001c6e0 <__sprint_r.part.0>:
   1c6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c6e2:	464e      	mov	r6, r9
   1c6e4:	4645      	mov	r5, r8
   1c6e6:	46de      	mov	lr, fp
   1c6e8:	4657      	mov	r7, sl
   1c6ea:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1c6ec:	b5e0      	push	{r5, r6, r7, lr}
   1c6ee:	4680      	mov	r8, r0
   1c6f0:	000e      	movs	r6, r1
   1c6f2:	4691      	mov	r9, r2
   1c6f4:	049b      	lsls	r3, r3, #18
   1c6f6:	d531      	bpl.n	1c75c <__sprint_r.part.0+0x7c>
   1c6f8:	6813      	ldr	r3, [r2, #0]
   1c6fa:	469a      	mov	sl, r3
   1c6fc:	6893      	ldr	r3, [r2, #8]
   1c6fe:	2b00      	cmp	r3, #0
   1c700:	d02a      	beq.n	1c758 <__sprint_r.part.0+0x78>
   1c702:	4652      	mov	r2, sl
   1c704:	6852      	ldr	r2, [r2, #4]
   1c706:	2500      	movs	r5, #0
   1c708:	4693      	mov	fp, r2
   1c70a:	0897      	lsrs	r7, r2, #2
   1c70c:	4652      	mov	r2, sl
   1c70e:	6814      	ldr	r4, [r2, #0]
   1c710:	d104      	bne.n	1c71c <__sprint_r.part.0+0x3c>
   1c712:	e016      	b.n	1c742 <__sprint_r.part.0+0x62>
   1c714:	3501      	adds	r5, #1
   1c716:	3404      	adds	r4, #4
   1c718:	42af      	cmp	r7, r5
   1c71a:	d010      	beq.n	1c73e <__sprint_r.part.0+0x5e>
   1c71c:	0032      	movs	r2, r6
   1c71e:	6821      	ldr	r1, [r4, #0]
   1c720:	4640      	mov	r0, r8
   1c722:	f000 fa13 	bl	1cb4c <_fputwc_r>
   1c726:	1c43      	adds	r3, r0, #1
   1c728:	d1f4      	bne.n	1c714 <__sprint_r.part.0+0x34>
   1c72a:	464a      	mov	r2, r9
   1c72c:	2300      	movs	r3, #0
   1c72e:	6093      	str	r3, [r2, #8]
   1c730:	6053      	str	r3, [r2, #4]
   1c732:	bc3c      	pop	{r2, r3, r4, r5}
   1c734:	4690      	mov	r8, r2
   1c736:	4699      	mov	r9, r3
   1c738:	46a2      	mov	sl, r4
   1c73a:	46ab      	mov	fp, r5
   1c73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c73e:	464b      	mov	r3, r9
   1c740:	689b      	ldr	r3, [r3, #8]
   1c742:	465a      	mov	r2, fp
   1c744:	2103      	movs	r1, #3
   1c746:	438a      	bics	r2, r1
   1c748:	1a9b      	subs	r3, r3, r2
   1c74a:	464a      	mov	r2, r9
   1c74c:	6093      	str	r3, [r2, #8]
   1c74e:	2208      	movs	r2, #8
   1c750:	4694      	mov	ip, r2
   1c752:	44e2      	add	sl, ip
   1c754:	2b00      	cmp	r3, #0
   1c756:	d1d4      	bne.n	1c702 <__sprint_r.part.0+0x22>
   1c758:	2000      	movs	r0, #0
   1c75a:	e7e6      	b.n	1c72a <__sprint_r.part.0+0x4a>
   1c75c:	f7fe ff42 	bl	1b5e4 <__sfvwrite_r>
   1c760:	e7e3      	b.n	1c72a <__sprint_r.part.0+0x4a>
   1c762:	46c0      	nop			; (mov r8, r8)

0001c764 <__sprint_r>:
   1c764:	6893      	ldr	r3, [r2, #8]
   1c766:	b510      	push	{r4, lr}
   1c768:	2b00      	cmp	r3, #0
   1c76a:	d002      	beq.n	1c772 <__sprint_r+0xe>
   1c76c:	f7ff ffb8 	bl	1c6e0 <__sprint_r.part.0>
   1c770:	bd10      	pop	{r4, pc}
   1c772:	6053      	str	r3, [r2, #4]
   1c774:	2000      	movs	r0, #0
   1c776:	e7fb      	b.n	1c770 <__sprint_r+0xc>

0001c778 <__swbuf_r>:
   1c778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c77a:	0006      	movs	r6, r0
   1c77c:	000d      	movs	r5, r1
   1c77e:	0014      	movs	r4, r2
   1c780:	2800      	cmp	r0, #0
   1c782:	d002      	beq.n	1c78a <__swbuf_r+0x12>
   1c784:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1c786:	2b00      	cmp	r3, #0
   1c788:	d04e      	beq.n	1c828 <__swbuf_r+0xb0>
   1c78a:	69a3      	ldr	r3, [r4, #24]
   1c78c:	60a3      	str	r3, [r4, #8]
   1c78e:	230c      	movs	r3, #12
   1c790:	5ee0      	ldrsh	r0, [r4, r3]
   1c792:	b281      	uxth	r1, r0
   1c794:	070b      	lsls	r3, r1, #28
   1c796:	d53c      	bpl.n	1c812 <__swbuf_r+0x9a>
   1c798:	6923      	ldr	r3, [r4, #16]
   1c79a:	2b00      	cmp	r3, #0
   1c79c:	d039      	beq.n	1c812 <__swbuf_r+0x9a>
   1c79e:	22ff      	movs	r2, #255	; 0xff
   1c7a0:	b2ef      	uxtb	r7, r5
   1c7a2:	4015      	ands	r5, r2
   1c7a4:	2280      	movs	r2, #128	; 0x80
   1c7a6:	0192      	lsls	r2, r2, #6
   1c7a8:	4211      	tst	r1, r2
   1c7aa:	d015      	beq.n	1c7d8 <__swbuf_r+0x60>
   1c7ac:	6822      	ldr	r2, [r4, #0]
   1c7ae:	6961      	ldr	r1, [r4, #20]
   1c7b0:	1ad3      	subs	r3, r2, r3
   1c7b2:	428b      	cmp	r3, r1
   1c7b4:	da1b      	bge.n	1c7ee <__swbuf_r+0x76>
   1c7b6:	3301      	adds	r3, #1
   1c7b8:	68a1      	ldr	r1, [r4, #8]
   1c7ba:	3901      	subs	r1, #1
   1c7bc:	60a1      	str	r1, [r4, #8]
   1c7be:	1c51      	adds	r1, r2, #1
   1c7c0:	6021      	str	r1, [r4, #0]
   1c7c2:	7017      	strb	r7, [r2, #0]
   1c7c4:	6962      	ldr	r2, [r4, #20]
   1c7c6:	429a      	cmp	r2, r3
   1c7c8:	d01a      	beq.n	1c800 <__swbuf_r+0x88>
   1c7ca:	89a3      	ldrh	r3, [r4, #12]
   1c7cc:	07db      	lsls	r3, r3, #31
   1c7ce:	d501      	bpl.n	1c7d4 <__swbuf_r+0x5c>
   1c7d0:	2d0a      	cmp	r5, #10
   1c7d2:	d015      	beq.n	1c800 <__swbuf_r+0x88>
   1c7d4:	0028      	movs	r0, r5
   1c7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c7d8:	4302      	orrs	r2, r0
   1c7da:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1c7dc:	81a2      	strh	r2, [r4, #12]
   1c7de:	4a14      	ldr	r2, [pc, #80]	; (1c830 <__swbuf_r+0xb8>)
   1c7e0:	400a      	ands	r2, r1
   1c7e2:	6662      	str	r2, [r4, #100]	; 0x64
   1c7e4:	6961      	ldr	r1, [r4, #20]
   1c7e6:	6822      	ldr	r2, [r4, #0]
   1c7e8:	1ad3      	subs	r3, r2, r3
   1c7ea:	428b      	cmp	r3, r1
   1c7ec:	dbe3      	blt.n	1c7b6 <__swbuf_r+0x3e>
   1c7ee:	0021      	movs	r1, r4
   1c7f0:	0030      	movs	r0, r6
   1c7f2:	f7fe fd15 	bl	1b220 <_fflush_r>
   1c7f6:	2800      	cmp	r0, #0
   1c7f8:	d108      	bne.n	1c80c <__swbuf_r+0x94>
   1c7fa:	6822      	ldr	r2, [r4, #0]
   1c7fc:	2301      	movs	r3, #1
   1c7fe:	e7db      	b.n	1c7b8 <__swbuf_r+0x40>
   1c800:	0021      	movs	r1, r4
   1c802:	0030      	movs	r0, r6
   1c804:	f7fe fd0c 	bl	1b220 <_fflush_r>
   1c808:	2800      	cmp	r0, #0
   1c80a:	d0e3      	beq.n	1c7d4 <__swbuf_r+0x5c>
   1c80c:	2501      	movs	r5, #1
   1c80e:	426d      	negs	r5, r5
   1c810:	e7e0      	b.n	1c7d4 <__swbuf_r+0x5c>
   1c812:	0021      	movs	r1, r4
   1c814:	0030      	movs	r0, r6
   1c816:	f7fd fb6f 	bl	19ef8 <__swsetup_r>
   1c81a:	2800      	cmp	r0, #0
   1c81c:	d1f6      	bne.n	1c80c <__swbuf_r+0x94>
   1c81e:	230c      	movs	r3, #12
   1c820:	5ee0      	ldrsh	r0, [r4, r3]
   1c822:	6923      	ldr	r3, [r4, #16]
   1c824:	b281      	uxth	r1, r0
   1c826:	e7ba      	b.n	1c79e <__swbuf_r+0x26>
   1c828:	f7fe fd54 	bl	1b2d4 <__sinit>
   1c82c:	e7ad      	b.n	1c78a <__swbuf_r+0x12>
   1c82e:	46c0      	nop			; (mov r8, r8)
   1c830:	ffffdfff 	.word	0xffffdfff

0001c834 <__ascii_wctomb>:
   1c834:	2900      	cmp	r1, #0
   1c836:	d004      	beq.n	1c842 <__ascii_wctomb+0xe>
   1c838:	2aff      	cmp	r2, #255	; 0xff
   1c83a:	d804      	bhi.n	1c846 <__ascii_wctomb+0x12>
   1c83c:	2001      	movs	r0, #1
   1c83e:	700a      	strb	r2, [r1, #0]
   1c840:	4770      	bx	lr
   1c842:	2000      	movs	r0, #0
   1c844:	e7fc      	b.n	1c840 <__ascii_wctomb+0xc>
   1c846:	238a      	movs	r3, #138	; 0x8a
   1c848:	6003      	str	r3, [r0, #0]
   1c84a:	2001      	movs	r0, #1
   1c84c:	4240      	negs	r0, r0
   1c84e:	e7f7      	b.n	1c840 <__ascii_wctomb+0xc>

0001c850 <_write_r>:
   1c850:	b570      	push	{r4, r5, r6, lr}
   1c852:	0005      	movs	r5, r0
   1c854:	0008      	movs	r0, r1
   1c856:	0011      	movs	r1, r2
   1c858:	2200      	movs	r2, #0
   1c85a:	4c06      	ldr	r4, [pc, #24]	; (1c874 <_write_r+0x24>)
   1c85c:	6022      	str	r2, [r4, #0]
   1c85e:	001a      	movs	r2, r3
   1c860:	f7e9 fc10 	bl	6084 <_write>
   1c864:	1c43      	adds	r3, r0, #1
   1c866:	d000      	beq.n	1c86a <_write_r+0x1a>
   1c868:	bd70      	pop	{r4, r5, r6, pc}
   1c86a:	6823      	ldr	r3, [r4, #0]
   1c86c:	2b00      	cmp	r3, #0
   1c86e:	d0fb      	beq.n	1c868 <_write_r+0x18>
   1c870:	602b      	str	r3, [r5, #0]
   1c872:	e7f9      	b.n	1c868 <_write_r+0x18>
   1c874:	20002024 	.word	0x20002024

0001c878 <__register_exitproc>:
   1c878:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c87a:	464e      	mov	r6, r9
   1c87c:	4645      	mov	r5, r8
   1c87e:	46de      	mov	lr, fp
   1c880:	4657      	mov	r7, sl
   1c882:	b5e0      	push	{r5, r6, r7, lr}
   1c884:	4d36      	ldr	r5, [pc, #216]	; (1c960 <__register_exitproc+0xe8>)
   1c886:	b083      	sub	sp, #12
   1c888:	0006      	movs	r6, r0
   1c88a:	6828      	ldr	r0, [r5, #0]
   1c88c:	4698      	mov	r8, r3
   1c88e:	000f      	movs	r7, r1
   1c890:	4691      	mov	r9, r2
   1c892:	f7ff f875 	bl	1b980 <__retarget_lock_acquire_recursive>
   1c896:	4b33      	ldr	r3, [pc, #204]	; (1c964 <__register_exitproc+0xec>)
   1c898:	681c      	ldr	r4, [r3, #0]
   1c89a:	23a4      	movs	r3, #164	; 0xa4
   1c89c:	005b      	lsls	r3, r3, #1
   1c89e:	58e0      	ldr	r0, [r4, r3]
   1c8a0:	2800      	cmp	r0, #0
   1c8a2:	d052      	beq.n	1c94a <__register_exitproc+0xd2>
   1c8a4:	6843      	ldr	r3, [r0, #4]
   1c8a6:	2b1f      	cmp	r3, #31
   1c8a8:	dc13      	bgt.n	1c8d2 <__register_exitproc+0x5a>
   1c8aa:	1c5a      	adds	r2, r3, #1
   1c8ac:	9201      	str	r2, [sp, #4]
   1c8ae:	2e00      	cmp	r6, #0
   1c8b0:	d128      	bne.n	1c904 <__register_exitproc+0x8c>
   1c8b2:	9a01      	ldr	r2, [sp, #4]
   1c8b4:	3302      	adds	r3, #2
   1c8b6:	009b      	lsls	r3, r3, #2
   1c8b8:	6042      	str	r2, [r0, #4]
   1c8ba:	501f      	str	r7, [r3, r0]
   1c8bc:	6828      	ldr	r0, [r5, #0]
   1c8be:	f7ff f861 	bl	1b984 <__retarget_lock_release_recursive>
   1c8c2:	2000      	movs	r0, #0
   1c8c4:	b003      	add	sp, #12
   1c8c6:	bc3c      	pop	{r2, r3, r4, r5}
   1c8c8:	4690      	mov	r8, r2
   1c8ca:	4699      	mov	r9, r3
   1c8cc:	46a2      	mov	sl, r4
   1c8ce:	46ab      	mov	fp, r5
   1c8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c8d2:	4b25      	ldr	r3, [pc, #148]	; (1c968 <__register_exitproc+0xf0>)
   1c8d4:	2b00      	cmp	r3, #0
   1c8d6:	d03d      	beq.n	1c954 <__register_exitproc+0xdc>
   1c8d8:	20c8      	movs	r0, #200	; 0xc8
   1c8da:	0040      	lsls	r0, r0, #1
   1c8dc:	f7fb f976 	bl	17bcc <malloc>
   1c8e0:	2800      	cmp	r0, #0
   1c8e2:	d037      	beq.n	1c954 <__register_exitproc+0xdc>
   1c8e4:	22a4      	movs	r2, #164	; 0xa4
   1c8e6:	2300      	movs	r3, #0
   1c8e8:	0052      	lsls	r2, r2, #1
   1c8ea:	58a1      	ldr	r1, [r4, r2]
   1c8ec:	6043      	str	r3, [r0, #4]
   1c8ee:	6001      	str	r1, [r0, #0]
   1c8f0:	50a0      	str	r0, [r4, r2]
   1c8f2:	3240      	adds	r2, #64	; 0x40
   1c8f4:	5083      	str	r3, [r0, r2]
   1c8f6:	3204      	adds	r2, #4
   1c8f8:	5083      	str	r3, [r0, r2]
   1c8fa:	3301      	adds	r3, #1
   1c8fc:	9301      	str	r3, [sp, #4]
   1c8fe:	2300      	movs	r3, #0
   1c900:	2e00      	cmp	r6, #0
   1c902:	d0d6      	beq.n	1c8b2 <__register_exitproc+0x3a>
   1c904:	009a      	lsls	r2, r3, #2
   1c906:	4692      	mov	sl, r2
   1c908:	4482      	add	sl, r0
   1c90a:	464a      	mov	r2, r9
   1c90c:	2188      	movs	r1, #136	; 0x88
   1c90e:	4654      	mov	r4, sl
   1c910:	5062      	str	r2, [r4, r1]
   1c912:	22c4      	movs	r2, #196	; 0xc4
   1c914:	0052      	lsls	r2, r2, #1
   1c916:	4691      	mov	r9, r2
   1c918:	4481      	add	r9, r0
   1c91a:	464a      	mov	r2, r9
   1c91c:	3987      	subs	r1, #135	; 0x87
   1c91e:	4099      	lsls	r1, r3
   1c920:	6812      	ldr	r2, [r2, #0]
   1c922:	468b      	mov	fp, r1
   1c924:	430a      	orrs	r2, r1
   1c926:	4694      	mov	ip, r2
   1c928:	464a      	mov	r2, r9
   1c92a:	4661      	mov	r1, ip
   1c92c:	6011      	str	r1, [r2, #0]
   1c92e:	2284      	movs	r2, #132	; 0x84
   1c930:	4641      	mov	r1, r8
   1c932:	0052      	lsls	r2, r2, #1
   1c934:	50a1      	str	r1, [r4, r2]
   1c936:	2e02      	cmp	r6, #2
   1c938:	d1bb      	bne.n	1c8b2 <__register_exitproc+0x3a>
   1c93a:	0002      	movs	r2, r0
   1c93c:	465c      	mov	r4, fp
   1c93e:	328d      	adds	r2, #141	; 0x8d
   1c940:	32ff      	adds	r2, #255	; 0xff
   1c942:	6811      	ldr	r1, [r2, #0]
   1c944:	430c      	orrs	r4, r1
   1c946:	6014      	str	r4, [r2, #0]
   1c948:	e7b3      	b.n	1c8b2 <__register_exitproc+0x3a>
   1c94a:	0020      	movs	r0, r4
   1c94c:	304d      	adds	r0, #77	; 0x4d
   1c94e:	30ff      	adds	r0, #255	; 0xff
   1c950:	50e0      	str	r0, [r4, r3]
   1c952:	e7a7      	b.n	1c8a4 <__register_exitproc+0x2c>
   1c954:	6828      	ldr	r0, [r5, #0]
   1c956:	f7ff f815 	bl	1b984 <__retarget_lock_release_recursive>
   1c95a:	2001      	movs	r0, #1
   1c95c:	4240      	negs	r0, r0
   1c95e:	e7b1      	b.n	1c8c4 <__register_exitproc+0x4c>
   1c960:	20000918 	.word	0x20000918
   1c964:	0001f8a8 	.word	0x0001f8a8
   1c968:	00017bcd 	.word	0x00017bcd

0001c96c <_calloc_r>:
   1c96c:	b510      	push	{r4, lr}
   1c96e:	4351      	muls	r1, r2
   1c970:	f7fb f936 	bl	17be0 <_malloc_r>
   1c974:	1e04      	subs	r4, r0, #0
   1c976:	d01c      	beq.n	1c9b2 <_calloc_r+0x46>
   1c978:	0003      	movs	r3, r0
   1c97a:	3b08      	subs	r3, #8
   1c97c:	685a      	ldr	r2, [r3, #4]
   1c97e:	2303      	movs	r3, #3
   1c980:	439a      	bics	r2, r3
   1c982:	3a04      	subs	r2, #4
   1c984:	2a24      	cmp	r2, #36	; 0x24
   1c986:	d816      	bhi.n	1c9b6 <_calloc_r+0x4a>
   1c988:	0003      	movs	r3, r0
   1c98a:	2a13      	cmp	r2, #19
   1c98c:	d90d      	bls.n	1c9aa <_calloc_r+0x3e>
   1c98e:	2100      	movs	r1, #0
   1c990:	3308      	adds	r3, #8
   1c992:	6001      	str	r1, [r0, #0]
   1c994:	6041      	str	r1, [r0, #4]
   1c996:	2a1b      	cmp	r2, #27
   1c998:	d907      	bls.n	1c9aa <_calloc_r+0x3e>
   1c99a:	6081      	str	r1, [r0, #8]
   1c99c:	60c1      	str	r1, [r0, #12]
   1c99e:	2a24      	cmp	r2, #36	; 0x24
   1c9a0:	d10d      	bne.n	1c9be <_calloc_r+0x52>
   1c9a2:	0003      	movs	r3, r0
   1c9a4:	6101      	str	r1, [r0, #16]
   1c9a6:	3318      	adds	r3, #24
   1c9a8:	6141      	str	r1, [r0, #20]
   1c9aa:	2200      	movs	r2, #0
   1c9ac:	601a      	str	r2, [r3, #0]
   1c9ae:	605a      	str	r2, [r3, #4]
   1c9b0:	609a      	str	r2, [r3, #8]
   1c9b2:	0020      	movs	r0, r4
   1c9b4:	bd10      	pop	{r4, pc}
   1c9b6:	2100      	movs	r1, #0
   1c9b8:	f7fb fc2e 	bl	18218 <memset>
   1c9bc:	e7f9      	b.n	1c9b2 <_calloc_r+0x46>
   1c9be:	0003      	movs	r3, r0
   1c9c0:	3310      	adds	r3, #16
   1c9c2:	e7f2      	b.n	1c9aa <_calloc_r+0x3e>

0001c9c4 <_close_r>:
   1c9c4:	2300      	movs	r3, #0
   1c9c6:	b570      	push	{r4, r5, r6, lr}
   1c9c8:	4c06      	ldr	r4, [pc, #24]	; (1c9e4 <_close_r+0x20>)
   1c9ca:	0005      	movs	r5, r0
   1c9cc:	0008      	movs	r0, r1
   1c9ce:	6023      	str	r3, [r4, #0]
   1c9d0:	f7e9 fb92 	bl	60f8 <_close>
   1c9d4:	1c43      	adds	r3, r0, #1
   1c9d6:	d000      	beq.n	1c9da <_close_r+0x16>
   1c9d8:	bd70      	pop	{r4, r5, r6, pc}
   1c9da:	6823      	ldr	r3, [r4, #0]
   1c9dc:	2b00      	cmp	r3, #0
   1c9de:	d0fb      	beq.n	1c9d8 <_close_r+0x14>
   1c9e0:	602b      	str	r3, [r5, #0]
   1c9e2:	e7f9      	b.n	1c9d8 <_close_r+0x14>
   1c9e4:	20002024 	.word	0x20002024

0001c9e8 <_fclose_r>:
   1c9e8:	b570      	push	{r4, r5, r6, lr}
   1c9ea:	0005      	movs	r5, r0
   1c9ec:	1e0c      	subs	r4, r1, #0
   1c9ee:	d040      	beq.n	1ca72 <_fclose_r+0x8a>
   1c9f0:	2800      	cmp	r0, #0
   1c9f2:	d002      	beq.n	1c9fa <_fclose_r+0x12>
   1c9f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1c9f6:	2b00      	cmp	r3, #0
   1c9f8:	d03e      	beq.n	1ca78 <_fclose_r+0x90>
   1c9fa:	2601      	movs	r6, #1
   1c9fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c9fe:	4233      	tst	r3, r6
   1ca00:	d133      	bne.n	1ca6a <_fclose_r+0x82>
   1ca02:	89a3      	ldrh	r3, [r4, #12]
   1ca04:	059b      	lsls	r3, r3, #22
   1ca06:	d543      	bpl.n	1ca90 <_fclose_r+0xa8>
   1ca08:	0021      	movs	r1, r4
   1ca0a:	0028      	movs	r0, r5
   1ca0c:	f7fe fb60 	bl	1b0d0 <__sflush_r>
   1ca10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ca12:	0006      	movs	r6, r0
   1ca14:	2b00      	cmp	r3, #0
   1ca16:	d004      	beq.n	1ca22 <_fclose_r+0x3a>
   1ca18:	69e1      	ldr	r1, [r4, #28]
   1ca1a:	0028      	movs	r0, r5
   1ca1c:	4798      	blx	r3
   1ca1e:	2800      	cmp	r0, #0
   1ca20:	db44      	blt.n	1caac <_fclose_r+0xc4>
   1ca22:	89a3      	ldrh	r3, [r4, #12]
   1ca24:	061b      	lsls	r3, r3, #24
   1ca26:	d42a      	bmi.n	1ca7e <_fclose_r+0x96>
   1ca28:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1ca2a:	2900      	cmp	r1, #0
   1ca2c:	d008      	beq.n	1ca40 <_fclose_r+0x58>
   1ca2e:	0023      	movs	r3, r4
   1ca30:	3340      	adds	r3, #64	; 0x40
   1ca32:	4299      	cmp	r1, r3
   1ca34:	d002      	beq.n	1ca3c <_fclose_r+0x54>
   1ca36:	0028      	movs	r0, r5
   1ca38:	f7fe fcf6 	bl	1b428 <_free_r>
   1ca3c:	2300      	movs	r3, #0
   1ca3e:	6323      	str	r3, [r4, #48]	; 0x30
   1ca40:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1ca42:	2900      	cmp	r1, #0
   1ca44:	d004      	beq.n	1ca50 <_fclose_r+0x68>
   1ca46:	0028      	movs	r0, r5
   1ca48:	f7fe fcee 	bl	1b428 <_free_r>
   1ca4c:	2300      	movs	r3, #0
   1ca4e:	6463      	str	r3, [r4, #68]	; 0x44
   1ca50:	f7fe fc70 	bl	1b334 <__sfp_lock_acquire>
   1ca54:	2300      	movs	r3, #0
   1ca56:	81a3      	strh	r3, [r4, #12]
   1ca58:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1ca5a:	07db      	lsls	r3, r3, #31
   1ca5c:	d514      	bpl.n	1ca88 <_fclose_r+0xa0>
   1ca5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1ca60:	f7fe ff8c 	bl	1b97c <__retarget_lock_close_recursive>
   1ca64:	f7fe fc6e 	bl	1b344 <__sfp_lock_release>
   1ca68:	e004      	b.n	1ca74 <_fclose_r+0x8c>
   1ca6a:	220c      	movs	r2, #12
   1ca6c:	5ea3      	ldrsh	r3, [r4, r2]
   1ca6e:	2b00      	cmp	r3, #0
   1ca70:	d1ca      	bne.n	1ca08 <_fclose_r+0x20>
   1ca72:	2600      	movs	r6, #0
   1ca74:	0030      	movs	r0, r6
   1ca76:	bd70      	pop	{r4, r5, r6, pc}
   1ca78:	f7fe fc2c 	bl	1b2d4 <__sinit>
   1ca7c:	e7bd      	b.n	1c9fa <_fclose_r+0x12>
   1ca7e:	6921      	ldr	r1, [r4, #16]
   1ca80:	0028      	movs	r0, r5
   1ca82:	f7fe fcd1 	bl	1b428 <_free_r>
   1ca86:	e7cf      	b.n	1ca28 <_fclose_r+0x40>
   1ca88:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1ca8a:	f7fe ff7b 	bl	1b984 <__retarget_lock_release_recursive>
   1ca8e:	e7e6      	b.n	1ca5e <_fclose_r+0x76>
   1ca90:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1ca92:	f7fe ff75 	bl	1b980 <__retarget_lock_acquire_recursive>
   1ca96:	220c      	movs	r2, #12
   1ca98:	5ea3      	ldrsh	r3, [r4, r2]
   1ca9a:	2b00      	cmp	r3, #0
   1ca9c:	d1b4      	bne.n	1ca08 <_fclose_r+0x20>
   1ca9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1caa0:	401e      	ands	r6, r3
   1caa2:	d1e6      	bne.n	1ca72 <_fclose_r+0x8a>
   1caa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1caa6:	f7fe ff6d 	bl	1b984 <__retarget_lock_release_recursive>
   1caaa:	e7e3      	b.n	1ca74 <_fclose_r+0x8c>
   1caac:	2601      	movs	r6, #1
   1caae:	4276      	negs	r6, r6
   1cab0:	e7b7      	b.n	1ca22 <_fclose_r+0x3a>
   1cab2:	46c0      	nop			; (mov r8, r8)

0001cab4 <__fputwc>:
   1cab4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cab6:	46ce      	mov	lr, r9
   1cab8:	4647      	mov	r7, r8
   1caba:	b580      	push	{r7, lr}
   1cabc:	b085      	sub	sp, #20
   1cabe:	4680      	mov	r8, r0
   1cac0:	4689      	mov	r9, r1
   1cac2:	0014      	movs	r4, r2
   1cac4:	f7fe ff36 	bl	1b934 <__locale_mb_cur_max>
   1cac8:	2801      	cmp	r0, #1
   1caca:	d031      	beq.n	1cb30 <__fputwc+0x7c>
   1cacc:	0023      	movs	r3, r4
   1cace:	af03      	add	r7, sp, #12
   1cad0:	335c      	adds	r3, #92	; 0x5c
   1cad2:	464a      	mov	r2, r9
   1cad4:	0039      	movs	r1, r7
   1cad6:	4640      	mov	r0, r8
   1cad8:	f000 f8b4 	bl	1cc44 <_wcrtomb_r>
   1cadc:	0006      	movs	r6, r0
   1cade:	1c43      	adds	r3, r0, #1
   1cae0:	d021      	beq.n	1cb26 <__fputwc+0x72>
   1cae2:	2800      	cmp	r0, #0
   1cae4:	d030      	beq.n	1cb48 <__fputwc+0x94>
   1cae6:	7839      	ldrb	r1, [r7, #0]
   1cae8:	2500      	movs	r5, #0
   1caea:	e007      	b.n	1cafc <__fputwc+0x48>
   1caec:	6823      	ldr	r3, [r4, #0]
   1caee:	1c5a      	adds	r2, r3, #1
   1caf0:	6022      	str	r2, [r4, #0]
   1caf2:	7019      	strb	r1, [r3, #0]
   1caf4:	3501      	adds	r5, #1
   1caf6:	42b5      	cmp	r5, r6
   1caf8:	d226      	bcs.n	1cb48 <__fputwc+0x94>
   1cafa:	5d79      	ldrb	r1, [r7, r5]
   1cafc:	68a3      	ldr	r3, [r4, #8]
   1cafe:	3b01      	subs	r3, #1
   1cb00:	60a3      	str	r3, [r4, #8]
   1cb02:	2b00      	cmp	r3, #0
   1cb04:	daf2      	bge.n	1caec <__fputwc+0x38>
   1cb06:	69a2      	ldr	r2, [r4, #24]
   1cb08:	4293      	cmp	r3, r2
   1cb0a:	db01      	blt.n	1cb10 <__fputwc+0x5c>
   1cb0c:	290a      	cmp	r1, #10
   1cb0e:	d1ed      	bne.n	1caec <__fputwc+0x38>
   1cb10:	0022      	movs	r2, r4
   1cb12:	4640      	mov	r0, r8
   1cb14:	f7ff fe30 	bl	1c778 <__swbuf_r>
   1cb18:	1c43      	adds	r3, r0, #1
   1cb1a:	d1eb      	bne.n	1caf4 <__fputwc+0x40>
   1cb1c:	b005      	add	sp, #20
   1cb1e:	bc0c      	pop	{r2, r3}
   1cb20:	4690      	mov	r8, r2
   1cb22:	4699      	mov	r9, r3
   1cb24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cb26:	2240      	movs	r2, #64	; 0x40
   1cb28:	89a3      	ldrh	r3, [r4, #12]
   1cb2a:	4313      	orrs	r3, r2
   1cb2c:	81a3      	strh	r3, [r4, #12]
   1cb2e:	e7f5      	b.n	1cb1c <__fputwc+0x68>
   1cb30:	464b      	mov	r3, r9
   1cb32:	3b01      	subs	r3, #1
   1cb34:	2bfe      	cmp	r3, #254	; 0xfe
   1cb36:	d8c9      	bhi.n	1cacc <__fputwc+0x18>
   1cb38:	466a      	mov	r2, sp
   1cb3a:	464b      	mov	r3, r9
   1cb3c:	71d3      	strb	r3, [r2, #7]
   1cb3e:	79d1      	ldrb	r1, [r2, #7]
   1cb40:	af03      	add	r7, sp, #12
   1cb42:	7039      	strb	r1, [r7, #0]
   1cb44:	2601      	movs	r6, #1
   1cb46:	e7cf      	b.n	1cae8 <__fputwc+0x34>
   1cb48:	4648      	mov	r0, r9
   1cb4a:	e7e7      	b.n	1cb1c <__fputwc+0x68>

0001cb4c <_fputwc_r>:
   1cb4c:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1cb4e:	b570      	push	{r4, r5, r6, lr}
   1cb50:	0005      	movs	r5, r0
   1cb52:	000e      	movs	r6, r1
   1cb54:	0014      	movs	r4, r2
   1cb56:	07db      	lsls	r3, r3, #31
   1cb58:	d41e      	bmi.n	1cb98 <_fputwc_r+0x4c>
   1cb5a:	230c      	movs	r3, #12
   1cb5c:	5ed2      	ldrsh	r2, [r2, r3]
   1cb5e:	b291      	uxth	r1, r2
   1cb60:	058b      	lsls	r3, r1, #22
   1cb62:	d516      	bpl.n	1cb92 <_fputwc_r+0x46>
   1cb64:	2380      	movs	r3, #128	; 0x80
   1cb66:	019b      	lsls	r3, r3, #6
   1cb68:	4219      	tst	r1, r3
   1cb6a:	d104      	bne.n	1cb76 <_fputwc_r+0x2a>
   1cb6c:	431a      	orrs	r2, r3
   1cb6e:	81a2      	strh	r2, [r4, #12]
   1cb70:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1cb72:	4313      	orrs	r3, r2
   1cb74:	6663      	str	r3, [r4, #100]	; 0x64
   1cb76:	0028      	movs	r0, r5
   1cb78:	0022      	movs	r2, r4
   1cb7a:	0031      	movs	r1, r6
   1cb7c:	f7ff ff9a 	bl	1cab4 <__fputwc>
   1cb80:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1cb82:	0005      	movs	r5, r0
   1cb84:	07db      	lsls	r3, r3, #31
   1cb86:	d402      	bmi.n	1cb8e <_fputwc_r+0x42>
   1cb88:	89a3      	ldrh	r3, [r4, #12]
   1cb8a:	059b      	lsls	r3, r3, #22
   1cb8c:	d508      	bpl.n	1cba0 <_fputwc_r+0x54>
   1cb8e:	0028      	movs	r0, r5
   1cb90:	bd70      	pop	{r4, r5, r6, pc}
   1cb92:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1cb94:	f7fe fef4 	bl	1b980 <__retarget_lock_acquire_recursive>
   1cb98:	230c      	movs	r3, #12
   1cb9a:	5ee2      	ldrsh	r2, [r4, r3]
   1cb9c:	b291      	uxth	r1, r2
   1cb9e:	e7e1      	b.n	1cb64 <_fputwc_r+0x18>
   1cba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1cba2:	f7fe feef 	bl	1b984 <__retarget_lock_release_recursive>
   1cba6:	e7f2      	b.n	1cb8e <_fputwc_r+0x42>

0001cba8 <_fstat_r>:
   1cba8:	2300      	movs	r3, #0
   1cbaa:	b570      	push	{r4, r5, r6, lr}
   1cbac:	4c07      	ldr	r4, [pc, #28]	; (1cbcc <_fstat_r+0x24>)
   1cbae:	0005      	movs	r5, r0
   1cbb0:	0008      	movs	r0, r1
   1cbb2:	0011      	movs	r1, r2
   1cbb4:	6023      	str	r3, [r4, #0]
   1cbb6:	f7e9 faa2 	bl	60fe <_fstat>
   1cbba:	1c43      	adds	r3, r0, #1
   1cbbc:	d000      	beq.n	1cbc0 <_fstat_r+0x18>
   1cbbe:	bd70      	pop	{r4, r5, r6, pc}
   1cbc0:	6823      	ldr	r3, [r4, #0]
   1cbc2:	2b00      	cmp	r3, #0
   1cbc4:	d0fb      	beq.n	1cbbe <_fstat_r+0x16>
   1cbc6:	602b      	str	r3, [r5, #0]
   1cbc8:	e7f9      	b.n	1cbbe <_fstat_r+0x16>
   1cbca:	46c0      	nop			; (mov r8, r8)
   1cbcc:	20002024 	.word	0x20002024

0001cbd0 <_isatty_r>:
   1cbd0:	2300      	movs	r3, #0
   1cbd2:	b570      	push	{r4, r5, r6, lr}
   1cbd4:	4c06      	ldr	r4, [pc, #24]	; (1cbf0 <_isatty_r+0x20>)
   1cbd6:	0005      	movs	r5, r0
   1cbd8:	0008      	movs	r0, r1
   1cbda:	6023      	str	r3, [r4, #0]
   1cbdc:	f7e9 fa94 	bl	6108 <_isatty>
   1cbe0:	1c43      	adds	r3, r0, #1
   1cbe2:	d000      	beq.n	1cbe6 <_isatty_r+0x16>
   1cbe4:	bd70      	pop	{r4, r5, r6, pc}
   1cbe6:	6823      	ldr	r3, [r4, #0]
   1cbe8:	2b00      	cmp	r3, #0
   1cbea:	d0fb      	beq.n	1cbe4 <_isatty_r+0x14>
   1cbec:	602b      	str	r3, [r5, #0]
   1cbee:	e7f9      	b.n	1cbe4 <_isatty_r+0x14>
   1cbf0:	20002024 	.word	0x20002024

0001cbf4 <_lseek_r>:
   1cbf4:	b570      	push	{r4, r5, r6, lr}
   1cbf6:	0005      	movs	r5, r0
   1cbf8:	0008      	movs	r0, r1
   1cbfa:	0011      	movs	r1, r2
   1cbfc:	2200      	movs	r2, #0
   1cbfe:	4c06      	ldr	r4, [pc, #24]	; (1cc18 <_lseek_r+0x24>)
   1cc00:	6022      	str	r2, [r4, #0]
   1cc02:	001a      	movs	r2, r3
   1cc04:	f7e9 fa82 	bl	610c <_lseek>
   1cc08:	1c43      	adds	r3, r0, #1
   1cc0a:	d000      	beq.n	1cc0e <_lseek_r+0x1a>
   1cc0c:	bd70      	pop	{r4, r5, r6, pc}
   1cc0e:	6823      	ldr	r3, [r4, #0]
   1cc10:	2b00      	cmp	r3, #0
   1cc12:	d0fb      	beq.n	1cc0c <_lseek_r+0x18>
   1cc14:	602b      	str	r3, [r5, #0]
   1cc16:	e7f9      	b.n	1cc0c <_lseek_r+0x18>
   1cc18:	20002024 	.word	0x20002024

0001cc1c <_read_r>:
   1cc1c:	b570      	push	{r4, r5, r6, lr}
   1cc1e:	0005      	movs	r5, r0
   1cc20:	0008      	movs	r0, r1
   1cc22:	0011      	movs	r1, r2
   1cc24:	2200      	movs	r2, #0
   1cc26:	4c06      	ldr	r4, [pc, #24]	; (1cc40 <_read_r+0x24>)
   1cc28:	6022      	str	r2, [r4, #0]
   1cc2a:	001a      	movs	r2, r3
   1cc2c:	f7e9 fa08 	bl	6040 <_read>
   1cc30:	1c43      	adds	r3, r0, #1
   1cc32:	d000      	beq.n	1cc36 <_read_r+0x1a>
   1cc34:	bd70      	pop	{r4, r5, r6, pc}
   1cc36:	6823      	ldr	r3, [r4, #0]
   1cc38:	2b00      	cmp	r3, #0
   1cc3a:	d0fb      	beq.n	1cc34 <_read_r+0x18>
   1cc3c:	602b      	str	r3, [r5, #0]
   1cc3e:	e7f9      	b.n	1cc34 <_read_r+0x18>
   1cc40:	20002024 	.word	0x20002024

0001cc44 <_wcrtomb_r>:
   1cc44:	b570      	push	{r4, r5, r6, lr}
   1cc46:	001d      	movs	r5, r3
   1cc48:	4b11      	ldr	r3, [pc, #68]	; (1cc90 <_wcrtomb_r+0x4c>)
   1cc4a:	b084      	sub	sp, #16
   1cc4c:	681b      	ldr	r3, [r3, #0]
   1cc4e:	0004      	movs	r4, r0
   1cc50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1cc52:	2900      	cmp	r1, #0
   1cc54:	d00e      	beq.n	1cc74 <_wcrtomb_r+0x30>
   1cc56:	2b00      	cmp	r3, #0
   1cc58:	d016      	beq.n	1cc88 <_wcrtomb_r+0x44>
   1cc5a:	20e0      	movs	r0, #224	; 0xe0
   1cc5c:	581e      	ldr	r6, [r3, r0]
   1cc5e:	002b      	movs	r3, r5
   1cc60:	0020      	movs	r0, r4
   1cc62:	47b0      	blx	r6
   1cc64:	1c43      	adds	r3, r0, #1
   1cc66:	d103      	bne.n	1cc70 <_wcrtomb_r+0x2c>
   1cc68:	2300      	movs	r3, #0
   1cc6a:	602b      	str	r3, [r5, #0]
   1cc6c:	338a      	adds	r3, #138	; 0x8a
   1cc6e:	6023      	str	r3, [r4, #0]
   1cc70:	b004      	add	sp, #16
   1cc72:	bd70      	pop	{r4, r5, r6, pc}
   1cc74:	2b00      	cmp	r3, #0
   1cc76:	d009      	beq.n	1cc8c <_wcrtomb_r+0x48>
   1cc78:	22e0      	movs	r2, #224	; 0xe0
   1cc7a:	a901      	add	r1, sp, #4
   1cc7c:	589e      	ldr	r6, [r3, r2]
   1cc7e:	0020      	movs	r0, r4
   1cc80:	002b      	movs	r3, r5
   1cc82:	2200      	movs	r2, #0
   1cc84:	47b0      	blx	r6
   1cc86:	e7ed      	b.n	1cc64 <_wcrtomb_r+0x20>
   1cc88:	4b02      	ldr	r3, [pc, #8]	; (1cc94 <_wcrtomb_r+0x50>)
   1cc8a:	e7e6      	b.n	1cc5a <_wcrtomb_r+0x16>
   1cc8c:	4b01      	ldr	r3, [pc, #4]	; (1cc94 <_wcrtomb_r+0x50>)
   1cc8e:	e7f3      	b.n	1cc78 <_wcrtomb_r+0x34>
   1cc90:	200000d8 	.word	0x200000d8
   1cc94:	2000091c 	.word	0x2000091c

0001cc98 <__aeabi_dcmpun>:
   1cc98:	b570      	push	{r4, r5, r6, lr}
   1cc9a:	4e0e      	ldr	r6, [pc, #56]	; (1ccd4 <__aeabi_dcmpun+0x3c>)
   1cc9c:	030d      	lsls	r5, r1, #12
   1cc9e:	031c      	lsls	r4, r3, #12
   1cca0:	0049      	lsls	r1, r1, #1
   1cca2:	005b      	lsls	r3, r3, #1
   1cca4:	0b2d      	lsrs	r5, r5, #12
   1cca6:	0d49      	lsrs	r1, r1, #21
   1cca8:	0b24      	lsrs	r4, r4, #12
   1ccaa:	0d5b      	lsrs	r3, r3, #21
   1ccac:	42b1      	cmp	r1, r6
   1ccae:	d004      	beq.n	1ccba <__aeabi_dcmpun+0x22>
   1ccb0:	4908      	ldr	r1, [pc, #32]	; (1ccd4 <__aeabi_dcmpun+0x3c>)
   1ccb2:	2000      	movs	r0, #0
   1ccb4:	428b      	cmp	r3, r1
   1ccb6:	d008      	beq.n	1ccca <__aeabi_dcmpun+0x32>
   1ccb8:	bd70      	pop	{r4, r5, r6, pc}
   1ccba:	4305      	orrs	r5, r0
   1ccbc:	2001      	movs	r0, #1
   1ccbe:	2d00      	cmp	r5, #0
   1ccc0:	d1fa      	bne.n	1ccb8 <__aeabi_dcmpun+0x20>
   1ccc2:	4904      	ldr	r1, [pc, #16]	; (1ccd4 <__aeabi_dcmpun+0x3c>)
   1ccc4:	2000      	movs	r0, #0
   1ccc6:	428b      	cmp	r3, r1
   1ccc8:	d1f6      	bne.n	1ccb8 <__aeabi_dcmpun+0x20>
   1ccca:	4314      	orrs	r4, r2
   1cccc:	0020      	movs	r0, r4
   1ccce:	1e44      	subs	r4, r0, #1
   1ccd0:	41a0      	sbcs	r0, r4
   1ccd2:	e7f1      	b.n	1ccb8 <__aeabi_dcmpun+0x20>
   1ccd4:	000007ff 	.word	0x000007ff

0001ccd8 <__aeabi_i2d>:
   1ccd8:	b570      	push	{r4, r5, r6, lr}
   1ccda:	2800      	cmp	r0, #0
   1ccdc:	d030      	beq.n	1cd40 <__aeabi_i2d+0x68>
   1ccde:	17c3      	asrs	r3, r0, #31
   1cce0:	18c4      	adds	r4, r0, r3
   1cce2:	405c      	eors	r4, r3
   1cce4:	0fc5      	lsrs	r5, r0, #31
   1cce6:	0020      	movs	r0, r4
   1cce8:	f7fa fdc0 	bl	1786c <__clzsi2>
   1ccec:	4b17      	ldr	r3, [pc, #92]	; (1cd4c <__aeabi_i2d+0x74>)
   1ccee:	4a18      	ldr	r2, [pc, #96]	; (1cd50 <__aeabi_i2d+0x78>)
   1ccf0:	1a1b      	subs	r3, r3, r0
   1ccf2:	1ad2      	subs	r2, r2, r3
   1ccf4:	2a1f      	cmp	r2, #31
   1ccf6:	dd18      	ble.n	1cd2a <__aeabi_i2d+0x52>
   1ccf8:	4a16      	ldr	r2, [pc, #88]	; (1cd54 <__aeabi_i2d+0x7c>)
   1ccfa:	1ad2      	subs	r2, r2, r3
   1ccfc:	4094      	lsls	r4, r2
   1ccfe:	2200      	movs	r2, #0
   1cd00:	0324      	lsls	r4, r4, #12
   1cd02:	055b      	lsls	r3, r3, #21
   1cd04:	0b24      	lsrs	r4, r4, #12
   1cd06:	0d5b      	lsrs	r3, r3, #21
   1cd08:	2100      	movs	r1, #0
   1cd0a:	0010      	movs	r0, r2
   1cd0c:	0324      	lsls	r4, r4, #12
   1cd0e:	0d0a      	lsrs	r2, r1, #20
   1cd10:	0b24      	lsrs	r4, r4, #12
   1cd12:	0512      	lsls	r2, r2, #20
   1cd14:	4322      	orrs	r2, r4
   1cd16:	4c10      	ldr	r4, [pc, #64]	; (1cd58 <__aeabi_i2d+0x80>)
   1cd18:	051b      	lsls	r3, r3, #20
   1cd1a:	4022      	ands	r2, r4
   1cd1c:	4313      	orrs	r3, r2
   1cd1e:	005b      	lsls	r3, r3, #1
   1cd20:	07ed      	lsls	r5, r5, #31
   1cd22:	085b      	lsrs	r3, r3, #1
   1cd24:	432b      	orrs	r3, r5
   1cd26:	0019      	movs	r1, r3
   1cd28:	bd70      	pop	{r4, r5, r6, pc}
   1cd2a:	0021      	movs	r1, r4
   1cd2c:	4091      	lsls	r1, r2
   1cd2e:	000a      	movs	r2, r1
   1cd30:	210b      	movs	r1, #11
   1cd32:	1a08      	subs	r0, r1, r0
   1cd34:	40c4      	lsrs	r4, r0
   1cd36:	055b      	lsls	r3, r3, #21
   1cd38:	0324      	lsls	r4, r4, #12
   1cd3a:	0b24      	lsrs	r4, r4, #12
   1cd3c:	0d5b      	lsrs	r3, r3, #21
   1cd3e:	e7e3      	b.n	1cd08 <__aeabi_i2d+0x30>
   1cd40:	2500      	movs	r5, #0
   1cd42:	2300      	movs	r3, #0
   1cd44:	2400      	movs	r4, #0
   1cd46:	2200      	movs	r2, #0
   1cd48:	e7de      	b.n	1cd08 <__aeabi_i2d+0x30>
   1cd4a:	46c0      	nop			; (mov r8, r8)
   1cd4c:	0000041e 	.word	0x0000041e
   1cd50:	00000433 	.word	0x00000433
   1cd54:	00000413 	.word	0x00000413
   1cd58:	800fffff 	.word	0x800fffff

0001cd5c <__FUNCTION__.15695>:
   1cd5c:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   1cd6c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1cd7c:	00005d64 61766e69 2064696c 6c636f69     d]..invalid iocl
   1cd8c:	6d632074 00000064 00000d94 00000d64     t cmd.......d...
   1cd9c:	00000d5c 00000d74 00000d6c 00000d8c     \...t...l.......
   1cdac:	00000d7c 00000d84                       |.......

0001cdb4 <__FUNCTION__.13890>:
   1cdb4:	5f666968 646e6573 00000000              hif_send....

0001cdc0 <__FUNCTION__.13900>:
   1cdc0:	5f666968 00727369                       hif_isr.

0001cdc8 <__FUNCTION__.13910>:
   1cdc8:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

0001cdd8 <__FUNCTION__.13922>:
   1cdd8:	5f666968 65636572 00657669              hif_receive.

0001cde4 <__FUNCTION__.13938>:
   1cde4:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   1cdf4:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   1ce04:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   1ce14:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   1ce24:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   1ce34:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   1ce44:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   1ce54:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   1ce64:	25203d20 3e583230 0000000a 49464957      = %02X>....WIFI
   1ce74:	6c616320 6361626c 7369206b 746f6e20      callback is not
   1ce84:	67657220 65747369 00646572 6b636f53      registered.Sock
   1ce94:	63207465 626c6c61 206b6361 6e207369     et callback is n
   1cea4:	7220746f 73696765 65726574 00000064     ot registered...
   1ceb4:	2061744f 6c6c6163 6b636162 20736920     Ota callback is 
   1cec4:	20746f6e 69676572 72657473 00006465     not registered..
   1ced4:	70797243 63206f74 626c6c61 206b6361     Crypto callback 
   1cee4:	6e207369 7220746f 73696765 65726574     is not registere
   1cef4:	00000064 6d676953 61632061 61626c6c     d...Sigma callba
   1cf04:	69206b63 6f6e2073 65722074 74736967     ck is not regist
   1cf14:	64657265 00000000 204c5353 6c6c6163     ered....SSL call
   1cf24:	6b636162 20736920 20746f6e 69676572     back is not regi
   1cf34:	72657473 00006465 66696828 6e692029     stered..(hif) in
   1cf44:	696c6176 72672064 2070756f 00004449     valid group ID..
   1cf54:	66696828 6f682029 61207473 64207070     (hif) host app d
   1cf64:	276e6469 65732074 58522074 6e6f4420     idn't set RX Don
   1cf74:	253c2065 253c3e75 000a3e58 66696828     e <%u><%X>..(hif
   1cf84:	72572029 20676e6f 657a6953 00000000     ) Wrong Size....
   1cf94:	66696828 61462029 64656c69 206f7420     (hif) Failed to 
   1cfa4:	64616552 746e6920 75727265 72207470     Read interrupt r
   1cfb4:	00006765 46494828 61462029 64656c69     eg..(HIF) Failed
   1cfc4:	206f7420 646e6168 6920656c 7265746e      to handle inter
   1cfd4:	74707572 2c642520 6f626120 6e697472     rupt %d, abortin
   1cfe4:	75642067 6f742065 6f6f7420 6e616d20     g due to too man
   1cff4:	65722079 65697274 00000a73 46494828     y retries...(HIF
   1d004:	61462029 64656c69 206f7420 646e6168     ) Failed to hand
   1d014:	6920656c 7265746e 74707572 20642520     le interrupt %d 
   1d024:	20797274 69616761 2e2e2e6e 75252820     try again... (%u
   1d034:	00000a29 66696820 6365725f 65766965     )... hif_receive
   1d044:	6e49203a 696c6176 72612064 656d7567     : Invalid argume
   1d054:	0000746e 20505041 75716552 65747365     nt..APP Requeste
   1d064:	69532064 6920657a 616c2073 72656772     d Size is larger
   1d074:	61687420 6874206e 65722065 76696563      than the receiv
   1d084:	62206465 65666675 69732072 3c20657a     ed buffer size <
   1d094:	3c3e7525 3e756c25 0000000a 20505041     %u><%lu>....APP 
   1d0a4:	75716552 65747365 64412064 73657264     Requested Addres
   1d0b4:	65622073 646e6f79 65687420 63657220     s beyond the rec
   1d0c4:	65766965 75622064 72656666 64646120     eived buffer add
   1d0d4:	73736572 646e6120 6e656c20 00687467     ress and length.
   1d0e4:	20705247 6425203f 0000000a 50504128     GRp ? %d....(APP
   1d0f4:	4e492829 00294f46 776f6c53 20676e69     )(INFO).Slowing 
   1d104:	6e776f64 002e2e2e 46494828 69614629     down....(HIF)Fai
   1d114:	2064656c 77206f74 75656b61 68742070     led to wakeup th
   1d124:	68632065 00007069 20464948 7373656d     e chip..HIF mess
   1d134:	20656761 676e656c 28206874 20296425     age length (%d) 
   1d144:	65637865 20736465 2078616d 676e656c     exceeds max leng
   1d154:	28206874 0a296425 00000000              th (%d).....

0001d160 <__FUNCTION__.14167>:
   1d160:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

0001d16c <__FUNCTION__.14182>:
   1d16c:	5f6d326d 696c6176 65746164 6163735f     m2m_validate_sca
   1d17c:	706f5f6e 6e6f6974 00000073              n_options...

0001d188 <__FUNCTION__.14199>:
   1d188:	5f6d326d 69666977 696e695f 74735f74     m2m_wifi_init_st
   1d198:	00747261 41564e49 2044494c 4e494f50     art.INVALID POIN
   1d1a8:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   1d1b8:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   1d1c8:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   1d1d8:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   1d1e8:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   1d1f8:	2044494c 2059454b 49525453 5320474e     LID KEY STRING S
   1d208:	00455a49 41564e49 2044494c 2059454b     IZE.INVALID KEY 
   1d218:	455a4953 00000000 41564e49 2044494c     SIZE....INVALID 
   1d228:	20415057 2059454b 455a4953 00000000     WPA KEY SIZE....
   1d238:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   1d248:	49544143 4d204e4f 0045444f 666e6f43     CATION MODE.Conf
   1d258:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   1d268:	75252e75 2075252e 000a2022 20514552     u.%u.%u " ..REQ 
   1d278:	20746f4e 69666564 2064656e 000a6425     Not defined %d..
   1d288:	6d726946 65726177 72657620 3a202020     Firmware ver   :
   1d298:	2e752520 252e7525 76532075 7665726e      %u.%u.%u Svnrev
   1d2a8:	0a752520 00000000 6d726946 65726177      %u.....Firmware
   1d2b8:	69754220 2520646c 69542073 2520656d      Build %s Time %
   1d2c8:	00000a73 6d726946 65726177 6e694d20     s...Firmware Min
   1d2d8:	69726420 20726576 20726576 7525203a      driver ver : %u
   1d2e8:	2e75252e 000a7525 76697244 76207265     .%u.%u..Driver v
   1d2f8:	203a7265 252e7525 75252e75 00000a20     er: %u.%u.%u ...
   1d308:	343a3930 32343a35 00000000 20626546     09:45:42....Feb 
   1d318:	32203331 00393130 76697244 62207265     13 2019.Driver b
   1d328:	746c6975 20746120 25097325 00000a73     uilt at %s.%s...
   1d338:	6d73694d 68637461 72694620 7261776d     Mismatch Firmwar
   1d348:	65562065 6f697372 0000006e 41564e49     e Version...INVA
   1d358:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   1d368:	73746f6c 64252021 0000000a 41564e49     lots! %d....INVA
   1d378:	2044494c 6e616373 6f6c7320 69742074     LID scan slot ti
   1d388:	2021656d 000a6425 41564e49 2044494c     me! %d..INVALID 
   1d398:	6f206f4e 72702066 2065626f 75716572     No of probe requ
   1d3a8:	73747365 72657020 61637320 6c73206e     ests per scan sl
   1d3b8:	2520746f 00000a64 41564e49 2044494c     ot %d...INVALID 
   1d3c8:	49535352 72687420 6f687365 2520646c     RSSI threshold %
   1d3d8:	000a2064                                d ..

0001d3dc <__FUNCTION__.13729>:
   1d3dc:	70696863 6b61775f 00000065              chip_wake...

0001d3e8 <__FUNCTION__.13778>:
   1d3e8:	70696863 6965645f 0074696e 6c696166     chip_deinit.fail
   1d3f8:	74206465 6564206f 696e692d 6c616974     ed to de-initial
   1d408:	00657a69 20737542 6f727265 35282072     ize.Bus error (5
   1d418:	64252e29 786c2520 0000000a 6c696146     ).%d %lx....Fail
   1d428:	74206465 6177206f 7520656b 68742070     ed to wake up th
   1d438:	68632065 00007069 76697244 65567265     e chip..DriverVe
   1d448:	666e4972 30203a6f 38302578 000a786c     rInfo: 0x%08lx..

0001d458 <__FUNCTION__.13780>:
   1d458:	645f6d6e 695f7672 5f74696e 646c6f68     nm_drv_init_hold
   1d468:	00000000                                ....

0001d46c <__FUNCTION__.13789>:
   1d46c:	645f6d6e 695f7672 5f74696e 72617473     nm_drv_init_star
   1d47c:	00000074                                t...

0001d480 <__FUNCTION__.13798>:
   1d480:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...
   1d490:	696d6e5b 6f747320 203a5d70 70696863     [nmi stop]: chip
   1d4a0:	6965645f 2074696e 6c696166 00000000     _deinit fail....
   1d4b0:	696d6e5b 6f747320 203a5d70 20495053     [nmi stop]: SPI 
   1d4c0:	73616c66 69642068 6c626173 61662065     flash disable fa
   1d4d0:	00006c69 696d6e5b 6f747320 203a5d70     il..[nmi stop]: 
   1d4e0:	6c696166 696e6920 75622074 00000073     fail init bus...
   1d4f0:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   1d500:	6e69206c 62207469 00007375 70696843     l init bus..Chip
   1d510:	20444920 0a786c25 00000000 6c696166      ID %lx.....fail
   1d520:	74206465 6e65206f 656c6261 746e6920     ed to enable int
   1d530:	75727265 2e737470 0000002e 00001d44     errupts.....D...
   1d540:	00001d44 00001d74 00001cf6 00001d1a     D...t...........
   1d550:	00001d28 00001d5a 00001d5a 00001da2     (...Z...Z.......
   1d560:	00001cda 00001ddc 00001ddc 00001ddc     ................
   1d570:	00001ddc 00001d36 cac4c9c3              ....6.......

0001d57c <__FUNCTION__.12925>:
   1d57c:	5f697073 00646d63                       spi_cmd.

0001d584 <__FUNCTION__.12932>:
   1d584:	5f697073 61746164 7073725f 00000000     spi_data_rsp....

0001d594 <__FUNCTION__.12941>:
   1d594:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0001d5a0 <__FUNCTION__.12957>:
   1d5a0:	5f697073 61746164 6165725f 00000064     spi_data_read...

0001d5b0 <__FUNCTION__.12972>:
   1d5b0:	5f697073 61746164 6972775f 00006574     spi_data_write..

0001d5c0 <__FUNCTION__.12984>:
   1d5c0:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0001d5d0 <__FUNCTION__.12995>:
   1d5d0:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0001d5e0 <__FUNCTION__.13007>:
   1d5e0:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0001d5f0 <__FUNCTION__.13020>:
   1d5f0:	735f6d6e 725f6970 00646165              nm_spi_read.

0001d5fc <__FUNCTION__.13041>:
   1d5fc:	735f6d6e 695f6970 0074696e              nm_spi_init.

0001d608 <crc7_syndrome_table>:
   1d608:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1d618:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1d628:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1d638:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1d648:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1d658:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1d668:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1d678:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1d688:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1d698:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1d6a8:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   1d6b8:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   1d6c8:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   1d6d8:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   1d6e8:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   1d6f8:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   1d708:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1d718:	6e692064 6e726574 72206c61 20646165     d internal read 
   1d728:	746f7270 6c6f636f 74697720 52432068     protocol with CR
   1d738:	6e6f2043 6572202c 69797274 7720676e     C on, retrying w
   1d748:	20687469 20435243 2e66666f 00002e2e     ith CRC off.....
   1d758:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1d768:	6e692064 6e726574 72206c61 20646165     d internal read 
   1d778:	746f7270 6c6f636f 002e2e2e 696d6e5b     protocol....[nmi
   1d788:	69707320 46203a5d 656c6961 6e692064      spi]: Failed in
   1d798:	6e726574 77206c61 65746972 6f727020     ternal write pro
   1d7a8:	6f636f74 6572206c 2e2e2e67 00000000     tocol reg.......
   1d7b8:	696d6e5b 69707320 46203a5d 206c6961     [nmi spi]: Fail 
   1d7c8:	20646d63 64616572 69686320 64692070     cmd read chip id
   1d7d8:	002e2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1d7e8:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   1d7f8:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   1d808:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1d818:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   1d828:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   1d838:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   1d848:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1d858:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   1d868:	00000000 65736552 6e612074 65722064     ....Reset and re
   1d878:	20797274 25206425 2520786c 00000a64     try %d %lx %d...
   1d888:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1d898:	6d632064 77202c64 65746972 6f6c6220     d cmd, write blo
   1d8a8:	28206b63 78383025 2e2e2e29 0000000a     ck (%08x).......
   1d8b8:	696d6e5b 69707320 203a5d20 6c696146     [nmi spi ]: Fail
   1d8c8:	63206465 7220646d 6f707365 2c65736e     ed cmd response,
   1d8d8:	69727720 62206574 6b636f6c 30252820      write block (%0
   1d8e8:	2e297838 000a2e2e 696d6e5b 69707320     8x).....[nmi spi
   1d8f8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1d908:	6b636f6c 646d6320 69727720 202c6574     lock cmd write, 
   1d918:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   1d928:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1d938:	61642064 62206174 6b636f6c 69727720     d data block wri
   1d948:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   1d958:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1d968:	656c6961 61642064 62206174 6b636f6c     ailed data block
   1d978:	63726320 69727720 202c6574 20737562      crc write, bus 
   1d988:	6f727265 2e2e2e72 00000000 696d6e5b     error.......[nmi
   1d998:	69707320 46203a5d 656c6961 75622064      spi]: Failed bu
   1d9a8:	72652073 2e726f72 00002e2e 696d6e5b     s error.....[nmi
   1d9b8:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1d9c8:	72206174 6f707365 2065736e 64616572     ta response read
   1d9d8:	7825202c 20782520 000a7825 696d6e5b     , %x %x %x..[nmi
   1d9e8:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   1d9f8:	206b636f 61746164 69727720 2e2e6574     ock data write..
   1da08:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1da18:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   1da28:	73756220 72726520 2e2e726f 0000002e      bus error......
   1da38:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1da48:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   1da58:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   1da68:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1da78:	656c6961 61642064 72206174 6f707365     ailed data respo
   1da88:	2065736e 64616572 7562202c 72652073     nse read, bus er
   1da98:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   1daa8:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   1dab8:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   1dac8:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   1dad8:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1dae8:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   1daf8:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   1db08:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   1db18:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   1db28:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   1db38:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   1db48:	72202c64 20646165 20676572 38302528     d, read reg (%08
   1db58:	2e2e2978 00000a2e 696d6e5b 69707320     x)......[nmi spi
   1db68:	46203a5d 656c6961 6d632064 65722064     ]: Failed cmd re
   1db78:	6e6f7073 202c6573 64616572 67657220     sponse, read reg
   1db88:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   1db98:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   1dba8:	72206174 2e646165 00002e2e 65736552     ta read.....Rese
   1dbb8:	6e612074 65722064 20797274 25206425     t and retry %d %
   1dbc8:	000a786c 696d6e5b 69707320 46203a5d     lx..[nmi spi]: F
   1dbd8:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   1dbe8:	67657220 30252820 2e297838 000a2e2e      reg (%08x).....
   1dbf8:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1dc08:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   1dc18:	74697277 65722065 25282067 29783830     write reg (%08x)
   1dc28:	0a2e2e2e 00000000 65736552 6e612074     ........Reset an
   1dc38:	65722064 20797274 25206425 2520786c     d retry %d %lx %
   1dc48:	000a786c 00002cbc 00002f06 00002f06     lx...,.../.../..
   1dc58:	00002f06 00002f06 00002f06 00002f06     ./.../.../.../..
   1dc68:	00002f06 00002f06 00002f06 00002f06     ./.../.../.../..
   1dc78:	00002f06 00002f06 00002f06 00002f06     ./.../.../.../..
   1dc88:	00002f06 00002ca4 00002f06 00002f06     ./...,.../.../..
   1dc98:	00002f06 00002f06 00002f06 00002f06     ./.../.../.../..
   1dca8:	00002f06 00002f06 00002f06 00002f06     ./.../.../.../..
   1dcb8:	00002f06 00002f06 00002f06 00002f06     ./.../.../.../..
   1dcc8:	00002f06 00002cb4 00002f06 00002f06     ./...,.../.../..
   1dcd8:	00002f06 00002f06 00002f06 00002f06     ./.../.../.../..
   1dce8:	00002f06 00002f06 00002f06 00002f06     ./.../.../.../..
   1dcf8:	00002f06 00002f06 00002f06 00002f06     ./.../.../.../..
   1dd08:	00002f06 00002cac 00002cc4 00002c8c     ./...,...,...,..
   1dd18:	00002c9c 00002c94 0000ffff 0000ffff     .,...,..........
   1dd28:	00000004 00000005 00000006 00000007     ................
   1dd38:	00000020 0000ffff 00000022 00000023      ......."...#...
   1dd48:	0000ffff 0000ffff 0000ffff 0000ffff     ................
   1dd58:	00000008 00000009 0000000a 0000000b     ................
   1dd68:	0000ffff 0000ffff 0000ffff 0000ffff     ................
   1dd78:	0000349a 0000349a 00003476 0000349a     .4...4..v4...4..
   1dd88:	00003476 0000345c 0000345c 0000349a     v4..\4..\4...4..
   1dd98:	0000349a 0000349a 0000349a 0000349a     .4...4...4...4..
   1dda8:	0000349a 0000349a 0000349a 0000349a     .4...4...4...4..
   1ddb8:	0000349a 0000349a 0000349a 0000349a     .4...4...4...4..
   1ddc8:	0000349a 0000349a 0000349a 0000349a     .4...4...4...4..
   1ddd8:	0000349a 0000349a 00003476 0000349a     .4...4..v4...4..
   1dde8:	00003476 0000349a 0000349a 0000349a     v4...4...4...4..
   1ddf8:	0000349a 0000349a 0000349a 0000349a     .4...4...4...4..
   1de08:	0000349a 0000349a 0000349a 0000349a     .4...4...4...4..
   1de18:	0000349a 0000349a 0000349a 0000349a     .4...4...4...4..
   1de28:	0000349a 0000349a 0000349a 0000349a     .4...4...4...4..
   1de38:	0000349a 0000349a 0000349a 0000349a     .4...4...4...4..
   1de48:	0000349a 0000349a 0000349a 0000349a     .4...4...4...4..
   1de58:	0000349a 0000349a 0000349a 0000349a     .4...4...4...4..
   1de68:	0000349a 0000349a 0000349a 0000349a     .4...4...4...4..
   1de78:	00003476 00003476 0000347e 0000347e     v4..v4..~4..~4..
   1de88:	0000347e 0000347e 42000000 42000400     ~4..~4.....B...B
   1de98:	42000800 42000c00 42001000 43000400     ...B...B...B...C
   1dea8:	00005236 00005232 00005232 00005298     6R..2R..2R...R..
   1deb8:	00005298 0000524c 0000523c 00005252     .R..LR..<R..RR..
   1dec8:	00005286 0000543c 0000541c 0000541c     .R..<T...T...T..
   1ded8:	000054b6 0000542e 0000544a 00005420     .T...T..JT.. T..
   1dee8:	00005458 0000549a 000054f4 00005536     XT...T...T..6U..
   1def8:	00005536 00005536 000054e6 00005502     6U..6U...T...U..
   1df08:	000054d8 00005510 00005526 00005cde     .T...U..&U...\..
   1df18:	00005dd4 00005dde 00005de8 00005df2     .]...]...]...]..
   1df28:	00005e24 00005e2e 00005e38 00005e42     $^...^..8^..B^..
   1df38:	00005e4c 42002000 42002400 42002800     L^... .B.$.B.(.B
   1df48:	42002c00 43000800 00000002 00000100     .,.B...C........
   1df58:	00000002 00000200 00000002 00000400     ................
   1df68:	00000002 00000800 00000003 00000004     ................

0001df78 <AdvChannels923>:
   1df78:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   1df88:	3709f740 ff100100                       @..7....

0001df90 <DefaultChannels923>:
   1df90:	50015001                                .P.P

0001df94 <DefaultDrParamsAS>:
   1df94:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1dfa4:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1dfb4:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1dfc4:	f2f2003c 010807f1 f2f20008 000a00fe     <...............

0001dfd4 <SubBandDutyCycle923>:
   1dfd4:	00000064                                d...

0001dfd8 <SubBandParams923>:
   1dfd8:	35c36d80 37502800 00000000              .m.5.(P7....

0001dfe4 <pds_reg_as_item_list>:
   1dfe4:	20001470 00200004 20001490 25c00104     p.. .. .... ...%
   1dff4:	2000142a ea010204                       *.. ....

0001dffc <DefaultChannels915AU>:
   1dffc:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1e00c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1e01c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1e02c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1e03c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1e04c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1e05c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1e06c:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1e07c:	66016601 66016601 66016601 66016601     .f.f.f.f.f.f.f.f

0001e08c <DefaultDrParamsAU>:
   1e08c:	00330008 01070cdf 0033000b 01070bce     ..3.......3.....
   1e09c:	00330012 01070ac6 0073001c 010709c2     ..3.......s.....
   1e0ac:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1e0bc:	00f2003d 010908be 00000000 010a0000     =...............
   1e0cc:	00350007 01090c0c 00810005 01090b06     ..5.............
   1e0dc:	00f20007 01090a01 00f2000c 010909fe     ................
   1e0ec:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0001e0fc <pds_reg_au_item_list>:
   1e0fc:	20001543 00010008 200014a0 06900108     C.. ....... ....

0001e10c <AdvChannels433>:
   1e10c:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   1e11c:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   1e12c:	ff0c0101                                ....

0001e130 <AdvChannels868>:
   1e130:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   1e140:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   1e150:	ff100101                                ....

0001e154 <DefaultChannels433>:
   1e154:	50015001 00005001                       .P.P.P..

0001e15c <DefaultChannels868>:
   1e15c:	50015001 00005001                       .P.P.P..

0001e164 <DefaultDrparamsEU>:
   1e164:	00330008 01070cdf 0033000b 01070bd3     ..3.......3.....
   1e174:	00330017 01070acc 0073001c 010709c2     ..3.......s.....
   1e184:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1e194:	00f2003c 010807f1 00f20064 000a00ce     <.......d.......

0001e1a4 <SubBandDutyCycle868>:
   1e1a4:	006403e8 03e80064 0064000a              ..d.d.....d.

0001e1b0 <SubBandParams433>:
   1e1b0:	19cf0e40 19ea8580 00000000              @...........

0001e1bc <SubBandParams868>:
   1e1bc:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   1e1cc:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   1e1dc:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   1e1ec:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   1e1fc:	33db2580 00000000                       .%.3....

0001e204 <pds_reg_eu868_fid1_item_list>:
   1e204:	20001470 00200003                       p.. .. .

0001e20c <pds_reg_eu868_fid2_item_list>:
   1e20c:	20001490 00c0000b                       ... ....

0001e214 <AdvChannels865>:
   1e214:	338fce64 338fce64 ff1e0100 3394fe84     d..3d..3.......3
   1e224:	3394fe84 ff1e0100 339de1e8 339de1e8     ...3.......3...3
   1e234:	ff1e0100                                ....

0001e238 <DefaultChannels865>:
   1e238:	50015001 00005001                       .P.P.P..

0001e240 <DefaultDrParamsIN>:
   1e240:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1e250:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1e260:	00f20031 010708be 00f20053 010707bc     1.......S.......
   1e270:	00000000 010a0000 00f20008 000a00fe     ................

0001e280 <pds_reg_ind_item_list>:
   1e280:	20001470 00200006 20001490 25c00106     p.. .. .... ...%

0001e290 <AdvChannels923JP>:
   1e290:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   1e2a0:	3709f740 ff100100                       @..7....

0001e2a8 <DefaultChannels923JP>:
   1e2a8:	50015001                                .P.P

0001e2ac <DefaultDrParamsJP>:
   1e2ac:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1e2bc:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1e2cc:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1e2dc:	f2f2003c 010807f1 f2f20008 000a00fe     <...............

0001e2ec <SubBandDutyCycleJP923>:
   1e2ec:	00000064                                d...

0001e2f0 <SubBandParamsJP923>:
   1e2f0:	36d61600 37502800 00000000              ...6.(P7....

0001e2fc <pds_reg_jpn_fid1_item_list>:
   1e2fc:	20001470 00200007 20001490 25c00107     p.. .. .... ...%

0001e30c <AdvChannels920KR>:
   1e30c:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   1e31c:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   1e32c:	ff0e0100                                ....

0001e330 <DefaultChannels920KR>:
   1e330:	50015001 00005001                       .P.P.P..

0001e338 <DefaultDrParamsKR>:
   1e338:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1e348:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1e358:	00f20031 010708be 00f20053 010707bc     1.......S.......

0001e368 <pds_reg_kr_fid1_item_list>:
   1e368:	20001470 00200005 20001490 25c00105     p.. .. .... ...%

0001e378 <DefaultChannels915>:
   1e378:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1e388:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1e398:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1e3a8:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1e3b8:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1e3c8:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1e3d8:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1e3e8:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1e3f8:	44014401 44014401 44014401 44014401     .D.D.D.D.D.D.D.D

0001e408 <DefaultDrParamsNA>:
   1e408:	000b0012 01070ac6 00350005 01070906     ..........5.....
   1e418:	007d0007 01070801 00f2000c 010707fe     ..}.............
   1e428:	00f20016 010908fc 00000000 010a0000     ................
   1e438:	00000000 010a0000 00000000 010a0000     ................
   1e448:	00350010 01090cbf 00810007 01090b06     ..5.............
   1e458:	00f20007 01090a01 00f2000c 010909fe     ................
   1e468:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0001e478 <pds_reg_na_item_list>:
   1e478:	20001543 00010002 200014a0 06900102     C.. ....... ....
   1e488:	000088ac 000088ac 000088ac 000088ac     ................
   1e498:	00008912 00008978 0000892a 00008912     ....x...*.......

0001e4a8 <taskHandlers>:
   1e4a8:	0000c7a9 00013aa1 00013099 0000bd29     .....:...0..)...
   1e4b8:	0000df85                                ....

0001e4bc <tc_interrupt_vectors.13444>:
   1e4bc:	14131211 00000015 0000d144 0000d154     ........D...T...
   1e4cc:	0000d15c 0000d164 0000d16c 0000d174     \...d...l...t...
   1e4dc:	0000d17c 0000d184 0000d18c 0000d14c     |...........L...
   1e4ec:	0000d1a4 0000d19c 0000d1a4 0000d194     ................
   1e4fc:	0000d3d2 0000d3de 0000d40c 0000d418     ................
   1e50c:	0000d424 0000d48e 0000d45a              $.......Z...

0001e518 <bandTable>:
   1e518:	000000ff 6e550a0d 656c6261 206f7420     ......Unable to 
   1e528:	72617473 65632074 66697472 74616369     start certificat
   1e538:	206e6f69 656d6974 50202e72 6320736c     ion timer. Pls c
   1e548:	6b636568 00000000 6c500a0d 65736165     heck......Please
   1e558:	6c657320 20746365 20656e6f 7420666f      select one of t
   1e568:	62206568 20646e61 65766967 6562206e     he band given be
   1e578:	0d776f6c 00000000 36385545 00000038     low.....EU868...
   1e588:	202e6425 0a0d7325 00000000 656c6553     %d. %s......Sele
   1e598:	52207463 6f696765 206c616e 646e6142     ct Regional Band
   1e5a8:	00203a20 2a0d0a0a 2a2a2a2a 2a2a2a2a      : ....*********
   1e5b8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1e5c8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1e5d8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0d0a2a2a     **************..
   1e5e8:	00000000 6e490a0d 2d207469 63755320     ......Init - Suc
   1e5f8:	73736563 0d6c7566 00000000 43414d0a     cessful......MAC
   1e608:	72617020 74656d61 20737265 74696e69      parameters init
   1e618:	696c6169 6974617a 66206e6f 656c6961     ialization faile
   1e628:	000d0a64 2a2a2a0a 2a2a2a2a 2a2a2a2a     d....***********
   1e638:	2a2a2a2a 2a2a2a2a 696f4a2a 6150206e     *********Join Pa
   1e648:	656d6172 73726574 2a2a2a2a 2a2a2a2a     rameters********
   1e658:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000d0a     ************....
   1e668:	7665440a 20656369 72646441 00202d20     .Device Addr - .
   1e678:	6c257830 0d0a2078 00000000 7070410a     0x%lx .......App
   1e688:	6163696c 6e6f6974 73655320 6e6f6973     lication Session
   1e698:	79654b20 00202d20 74654e0a 6b726f77      Key - ..Network
   1e6a8:	73655320 6e6f6973 79654b20 00202d20      Session Key - .
   1e6b8:	696f4a0a 6170206e 656d6172 73726574     .Join parameters
   1e6c8:	696e6920 6c616974 74617a69 206e6f69      initialization 
   1e6d8:	6c696166 0d0a6465 00000000 7665440a     failed.......Dev
   1e6e8:	20656369 20495545 0000202d 7070410a     ice EUI - ...App
   1e6f8:	6163696c 6e6f6974 49554520 00202d20     lication EUI - .
   1e708:	7070410a 6163696c 6e6f6974 79654b20     .Application Key
   1e718:	00202d20 41544f0a 6f4a2041 70206e69      - ..OTAA Join p
   1e728:	6d617261 72657465 6e692073 61697469     arameters initia
   1e738:	617a696c 6e6f6974 69616620 0a64656c     lization failed.
   1e748:	0000000d 696f4a0a 6552206e 73657571     .....Join Reques
   1e758:	65532074 0d0a746e 00000000 6172460a     t Sent.......Fra
   1e768:	5320656d 3a746e65 00000000 202a2a2a     me Sent:....*** 
   1e778:	65636552 64657669 204c4420 61746144     Received DL Data
   1e788:	2a2a2a20 00000d0a 6172460a 5220656d      ***.....Frame R
   1e798:	69656365 20646576 70207461 2074726f     eceived at port 
   1e7a8:	0d0a6425 00000000 6172460a 4c20656d     %d.......Frame L
   1e7b8:	74676e65 202d2068 0d0a6425 00000000     ength - %d......
   1e7c8:	6464410a 73736572 30202d20 786c2578     .Address - 0x%lx
   1e7d8:	00000d0a 7961500a 64616f6c 0000203a     .....Payload: ..
   1e7e8:	00007825 2a2a0a0d 2a2a2a2a 2a2a2a2a     %x....**********
   1e7f8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0d2a2a2a     ***************.
   1e808:	00000000 65636552 64657669 4b434120     ....Received ACK
   1e818:	726f6620 6e6f4320 6d726966 64206465      for Confirmed d
   1e828:	0d617461 00000000 414d0a0d 4f4e2043     ata.......MAC NO
   1e838:	2d20214b 00642520 6e617254 73696d73     K! - %d.Transmis
   1e848:	6e6f6973 63755320 73736563 0000000d     sion Success....
   1e858:	2a2a0d0a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ..**************
   1e868:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1e878:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1e888:	0a2a2a2a 0000000d 65540a0d 4d207473     ***.......Test M
   1e898:	2065646f 69746341 65746176 00000d64     ode Activated...
   1e8a8:	696f4a0a 676e696e 63755320 73736563     .Joining Success
   1e8b8:	0a6c7566 0000000d 4f525245 203a2052     ful.....ERROR : 
   1e8c8:	62616e55 7420656c 7473206f 20747261     Unable to start 
   1e8d8:	74726543 63696669 6f697461 6954206e     Certification Ti
   1e8e8:	0d72656d 00000000 41544f0a 6f4a2041     mer......OTAA Jo
   1e8f8:	52206e69 65757165 53207473 0a746e65     in Request Sent.
   1e908:	0000000d 2a2a0d0a 2a2a2a2a 2a2a2a2a     ......**********
   1e918:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1e928:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1e938:	2a2a2a2a 2a2a2a2a 2a2a2a2a 000d0a2a     *************...
   1e948:	00007830 78323025 00000000 726f6c0a     0x..%02x.....lor
   1e958:	6e617761 6375735f 73736563 00000d0a     awan_success....
   1e968:	726f6c0a 6e617761 6174735f 3a206574     .lorawan_state :
   1e978:	61747320 425f6b63 0a797375 0000000d      stack_Busy.....
   1e988:	7665640a 5f656369 5f746f6e 6e696f6a     .device_not_join
   1e998:	745f6465 656e5f6f 726f7774 000d0a6b     ed_to_network...
   1e9a8:	766e690a 64696c61 7261705f 74656d61     .invalid_paramet
   1e9b8:	0d0a7265 00000000 79656b0a 6f6e5f73     er.......keys_no
   1e9c8:	6e695f74 61697469 657a696c 000d0a64     t_initialized...
   1e9d8:	6c69730a 5f746e65 656d6d69 74616964     .silent_immediat
   1e9e8:	5f796c65 69746361 0d0a6576 00000000     ely_active......
   1e9f8:	6172660a 6f63656d 65746e75 72655f72     .framecounter_er
   1ea08:	5f726f72 6f6a6572 6e5f6e69 65646565     ror_rejoin_neede
   1ea18:	000d0a64 766e690a 64696c61 6675625f     d....invalid_buf
   1ea28:	5f726566 676e656c 0d0a6874 00000000     fer_length......
   1ea38:	43414d0a 7561705f 0a646573 0000000d     .MAC_paused.....
   1ea48:	5f6f6e0a 65657266 6168635f 6c656e6e     .no_free_channel
   1ea58:	6f665f73 0a646e75 0000000d 7165720a     s_found......req
   1ea68:	74736575 766e695f 64696c61 00000d0a     uest_invalid....
   1ea78:	6572700a 6f6a5f76 725f6e69 65757165     .prev_join_reque
   1ea88:	695f7473 72705f6e 6572676f 0d0a7373     st_in_progress..
   1ea98:	00000000 7165720a 74736575 6961665f     .....request_fai
   1eaa8:	2064656c 0d0a6425 00000000 0000db68     led %d......h...
   1eab8:	0000daa8 0000dab0 0000dab8 0000dac0     ................
   1eac8:	0000dac8 0000dad0 0000dad8 0000da44     ............D...
   1ead8:	0000dae0 0000dae8 0000daf0 0000daf8     ................
   1eae8:	0000db00 0000db08 0000db10 0000db18     ................
   1eaf8:	0000db20 0000db28 0000db30 0000db38      ...(...0...8...
   1eb08:	0000db40 0000db68 0000db48 0000db50     @...h...H...P...
   1eb18:	0000db58 0000db60 0000dba2 0000dbaa     X...`...........
   1eb28:	0000dbb2 0000dbba 0000dbc2 0000dbd2     ................
   1eb38:	0000dbda 0000dbe2 0000db7e 0000dbea     ........~.......
   1eb48:	0000dbf2 0000dbfa 0000dc02 0000dc0a     ................
   1eb58:	0000dc12 0000dc1a 0000dc22 0000dc2a     ........"...*...
   1eb68:	0000dc32 0000dc3a 0000dc42 0000dc4a     2...:...B...J...
   1eb78:	0000dc72 0000dc52 0000dc5a 0000dc62     r...R...Z...b...
   1eb88:	0000dc6a 0000dbca 0000e360 0000e370     j.......`...p...
   1eb98:	0000e378 0000e380 0000e388 0000e390     x...............
   1eba8:	0000e398 0000e3a0 0000e3a8 0000e368     ............h...
   1ebb8:	0000e3c0 0000e3b8 0000e3c0 0000e3b0     ................

0001ebc8 <appTaskHandlers>:
   1ebc8:	0000d8e5 0000e80d 6c730a0d 5f706565     ..........sleep_
   1ebd8:	25206b6f 6d20646c 000a0d73              ok %ld ms...

0001ebe4 <bandStrings>:
   1ebe4:	0001f418 0001e580 0001f42c 0001f434     ........,...4...
   1ebf4:	0001f43c 0001f444 0001f44c 0001f454     <...D...L...T...
   1ec04:	0001f45c 0001f468 2e2e6425 00000000     \...h...%d......
   1ec14:	41520d0a 5f4f4944 445f4f4e 20415441     ..RADIO_NO_DATA 
   1ec24:	00000d0a 41520d0a 5f4f4944 41544144     ......RADIO_DATA
   1ec34:	5a49535f 0d0a2045 00000000 41520d0a     _SIZE ........RA
   1ec44:	5f4f4944 41564e49 5f44494c 20514552     DIO_INVALID_REQ 
   1ec54:	00000d0a 41520d0a 5f4f4944 59535542     ......RADIO_BUSY
   1ec64:	000d0a20 41520d0a 5f4f4944 5f54554f      .....RADIO_OUT_
   1ec74:	525f464f 45474e41 000d0a20 41520d0a     OF_RANGE .....RA
   1ec84:	5f4f4944 55534e55 524f5050 5f444554     DIO_UNSUPPORTED_
   1ec94:	52545441 000d0a20 41520d0a 5f4f4944     ATTR .....RADIO_
   1eca4:	4e414843 5f4c454e 59535542 000d0a20     CHANNEL_BUSY ...
   1ecb4:	574e0d0a 4f4e5f4b 4f4a5f54 44454e49     ..NWK_NOT_JOINED
   1ecc4:	000d0a20 4e490d0a 494c4156 41505f44      .....INVALID_PA
   1ecd4:	454d4152 20524554 00000d0a 454b0d0a     RAMETER ......KE
   1ece4:	4e5f5359 495f544f 4954494e 5a494c41     YS_NOT_INITIALIZ
   1ecf4:	0a204445 0000000d 49530d0a 544e454c     ED .......SILENT
   1ed04:	4d4d495f 41494445 594c4554 5443415f     _IMMEDIATELY_ACT
   1ed14:	0a455649 0000000d 43460d0a 5f52544e     IVE.......FCNTR_
   1ed24:	4f525245 45525f52 4e494f4a 45454e5f     ERROR_REJOIN_NEE
   1ed34:	20444544 00000d0a 4e490d0a 494c4156     DED ......INVALI
   1ed44:	55425f44 52454646 4e454c5f 20485447     D_BUFFER_LENGTH 
   1ed54:	00000d0a 414d0d0a 41505f43 44455355     ......MAC_PAUSED
   1ed64:	0d0a2020 00000000 4f4e0d0a 4148435f       ........NO_CHA
   1ed74:	4c454e4e 4f465f53 20444e55 00000d0a     NNELS_FOUND ....
   1ed84:	55420d0a 0d0a5953 00000000 4f4e0d0a     ..BUSY........NO
   1ed94:	4b43415f 000d0a20 4c410d0a 44414552     _ACK .....ALREAD
   1eda4:	4f4a2059 4e494e49 53492047 204e4920     Y JOINING IS IN 
   1edb4:	474f5250 53534552 000d0a20 45520d0a     PROGRESS .....RE
   1edc4:	52554f53 555f4543 4156414e 42414c49     SOURCE_UNAVAILAB
   1edd4:	0a20454c 0000000d 4e490d0a 494c4156     LE .......INVALI
   1ede4:	45525f44 53455551 0d0a2054 00000000     D_REQUEST ......
   1edf4:	43460d0a 5f52544e 4f525245 0d0a2052     ..FCNTR_ERROR ..
   1ee04:	00000000 494d0d0a 52455f43 20524f52     ......MIC_ERROR 
   1ee14:	00000d0a 4e490d0a 494c4156 544d5f44     ......INVALID_MT
   1ee24:	20455059 00000d0a 434d0d0a 5f545341     YPE ......MCAST_
   1ee34:	5f524448 41564e49 2044494c 00000d0a     HDR_INVALID ....
   1ee44:	4e4b4e55 204e574f 4f525245 000d0a52     UNKNOWN ERROR...
   1ee54:	2078540a 656d6954 0a74756f 0000000d     .Tx Timeout.....
   1ee64:	4e550d0a 574f4e4b 5245204e 0a524f52     ..UNKNOWN ERROR.
   1ee74:	0000000d 7665440a 72646441 7830203a     .....DevAddr: 0x
   1ee84:	0a786c25 0000000d 6464410a 73736572     %lx......Address
   1ee94:	6e6f6320 63696c66 65622074 65657774      conflict betwee
   1eea4:	6544206e 65636976 64644120 73736572     n Device Address
   1eeb4:	646e6120 6c754d20 61636974 67207473      and Multicast g
   1eec4:	70756f72 64646120 73736572 00000d0a     roup address....
   1eed4:	696f4a0a 676e696e 6e654420 0a646569     .Joining Denied.
   1eee4:	0000000d 44202e31 206f6d65 6c707061     ....1. Demo appl
   1eef4:	74616369 0d6e6f69 00000000 43202e32     ication.....2. C
   1ef04:	69747265 61636966 6e6f6974 70706120     ertification app
   1ef14:	6163696c 6e6f6974 0000000d 53200a0d     lication...... S
   1ef24:	63656c65 70412074 63696c70 6f697461     elect Applicatio
   1ef34:	203a206e 00000000 2e310a0d 6e655320     n : ......1. Sen
   1ef44:	6f4a2064 52206e69 65757165 000d7473     d Join Request..
   1ef54:	53202e32 206e6163 61205041 7320646e     2. Scan AP and s
   1ef64:	20646e65 61746144 0000000d 53202e33     end Data....3. S
   1ef74:	7065656c 0000000d 4d202e34 206e6961     leep....4. Main 
   1ef84:	756e654d 0000000d 6e450a0d 20726574     Menu......Enter 
   1ef94:	72756f79 6f686320 3a656369 00000020     your choice: ...
   1efa4:	6f727245 54532072 20455441 65746e45     Error STATE Ente
   1efb4:	0d646572 00000000 5f534c4d 5f4b4453     red.....MLS_SDK_
   1efc4:	5f305f31 00315f50 694d0d0a 636f7263     1_0_P_1...Microc
   1efd4:	20706968 61526f4c 204e4157 63617453     hip LoRaWAN Stac
   1efe4:	7325206b 00000a0d 7473614c 6e6f6320     k %s....Last con
   1eff4:	75676966 20646572 69676552 6c616e6f     figured Regional
   1f004:	6e616220 73252064 00000a0d 73657250      band %s....Pres
   1f014:	6e612073 656b2079 6f742079 61686320     s any key to cha
   1f024:	2065676e 646e6162 43200a0d 69746e6f     nge band.. Conti
   1f034:	6e69756e 6e692067 20732520 00206e69     nuing in %s in .
   1f044:	736e550a 6f707075 64657472 76654420     .Unsupported Dev
   1f054:	20656369 65707954 00000d0a 696f4a0a     ice Type.....Joi
   1f064:	6552206e 73657571 65532074 6620746e     n Request Sent f
   1f074:	2520726f 000d0a73 50203e0a 7265776f     or %s....> Power
   1f084:	20676e69 6e776f44 4e495720 30353143     ing Down WINC150
   1f094:	00000d30 2a2a2a0a 2a2a2a2a 2a2a2a2a     0....***********
   1f0a4:	2a2a2a2a 6c707041 74616369 206e6f69     ****Application 
   1f0b4:	666e6f43 72756769 6f697461 2a2a2a6e     Configuration***
   1f0c4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000d0a     ************....
   1f0d4:	7665440a 65707954 00203a20 53414c43     .DevType : .CLAS
   1f0e4:	0a412053 0000000d 53414c43 0a432053     S A.....CLASS C.
   1f0f4:	0000000d 7463410a 74617669 546e6f69     .....ActivationT
   1f104:	20657079 0000203a 4141544f 00000d0a     ype : ..OTAA....
   1f114:	6172540a 696d736e 6f697373 7954206e     .Transmission Ty
   1f124:	2d206570 00000020 4f434e55 5249464e     pe - ...UNCONFIR
   1f134:	0a44454d 0000000d 6f50460a 2d207472     MED......FPort -
   1f144:	0a642520 0000000d 2a2a2a0a 2a2a2a2a      %d......*******
   1f154:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1f164:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1f174:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1f184:	00000d0a 44500a0d 65525f53 726f7473     ......PDS_Restor
   1f194:	6f697461 6174536e 3a737574 63755320     ationStatus: Suc
   1f1a4:	73736563 0000000d 6e696f6a 74617453     cess....joinStat
   1f1b4:	203a7375 6e696f4a 000d6465 6e696f4a     us: Joined..Join
   1f1c4:	74617453 3a207375 6e654420 0d646569     Status : Denied.
   1f1d4:	00000000 646e6142 7325203a 00000a0d     ....Band: %s....
   1f1e4:	74736552 7461726f 206e6f69 6c696166     Restoration fail
   1f1f4:	000d6465 61656c50 65206573 7265746e     ed..Please enter
   1f204:	76206120 64696c61 6f686320 0d656369      a valid choice.
   1f214:	00000000 20746f4e 61762061 2064696c     ....Not a valid 
   1f224:	69676572 6c616e6f 6e616220 68632064     regional band ch
   1f234:	6563696f 0000000d 50203e0a 7265776f     oice.....> Power
   1f244:	20676e69 57207055 31434e49 0d303035     ing Up WINC1500.
   1f254:	00000000 74533e0a 69747261 6120676e     .....>Starting a
   1f264:	76697463 63732065 2e206e61 000d2e2e     ctive scan .....
   1f274:	69766544 6e206563 6a20746f 656e696f     Device not joine
   1f284:	6f742064 65687420 74656e20 6b726f77     d to the network
   1f294:	0000000d 6c730a0d 5f706565 5f746f6e     ......sleep_not_
   1f2a4:	000d6b6f 61766e49 2064696c 696f6863     ok..Invalid choi
   1f2b4:	65206563 7265746e 000d6465 7961500a     ce entered...Pay
   1f2c4:	64616f6c 6e656c20 3a687467 00642520     load length: %d.
   1f2d4:	2078540a 61746144 6e655320 000d2074     .Tx Data Sent ..
   1f2e4:	7070410a 73736553 4b6e6f69 3a207965     .AppSessionKey :
   1f2f4:	00000020 6b774e0a 73736553 4b6e6f69      ....NwkSessionK
   1f304:	3a207965 00000020 7665440a 20495545     ey : ....DevEUI 
   1f314:	0000203a 7070410a 20495545 0000203a     : ...AppEUI : ..
   1f324:	7070410a 2079654b 0000203a 2a2a2a0a     .AppKey : ...***
   1f334:	2a2a2a2a 2a2a2a2a 2a2a2a2a 746c754d     ************Mult
   1f344:	73616369 61502074 656d6172 73726574     icast Parameters
   1f354:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1f364:	2a2a2a2a 00000d0a 61634d0a 70417473     ****.....McastAp
   1f374:	73655370 6e6f6973 2079654b 0000203a     pSessionKey : ..
   1f384:	61634d0a 774e7473 7365536b 6e6f6973     .McastNwkSession
   1f394:	2079654b 0000203a 61634d0a 72477473     Key : ...McastGr
   1f3a4:	4170756f 20726464 7830203a 0a786c25     oupAddr : 0x%lx.
   1f3b4:	0000000d 61634d0a 72477473 4170756f     .....McastGroupA
   1f3c4:	53726464 75746174 203a2073 6c696146     ddrStatus : Fail
   1f3d4:	0d0a6465 00000000 6c754d0a 61636974     ed.......Multica
   1f3e4:	74537473 73757461 45203a20 6c62616e     stStatus : Enabl
   1f3f4:	0d0a6465 00000000 6c754d0a 61636974     ed.......Multica
   1f404:	74537473 73757461 46203a20 656c6961     stStatus : Faile
   1f414:	000d0a64 74636146 4479726f 75616665     d...FactoryDefau
   1f424:	6552746c 00746573 3139414e 00000035     ltReset.NA915...
   1f434:	31395541 00000035 32395341 00000033     AU915...AS923...
   1f444:	394e504a 00003332 3239524b 00000030     JPN923..KR920...
   1f454:	38444e49 00003536 61656c43 44502072     IND865..Clear PD
   1f464:	00000053 65736552 6f422074 00647261     S...Reset Board.
   1f474:	626d754e 6f207265 50412066 756f6620     Number of AP fou
   1f484:	2520646e 000a0d64 41206f4e 6f462050     nd %d...No AP Fo
   1f494:	00646e75 52524528 63532029 66206e61     und.(ERR) Scan f
   1f4a4:	206c6961 68746977 72726520 3c20726f     ail with error <
   1f4b4:	0a3e6425 00000000 64323025 53535220     %d>.....%02d RSS
   1f4c4:	64253a49 54554120 50595448 64253a45     I:%d AUTHTYPE:%d
   1f4d4:	41484320 4c454e4e 3230253a 53422064      CHANNEL:%02d BS
   1f4e4:	3a444953 58323025 3230253a 30253a58     SID:%02X:%02X:%0
   1f4f4:	253a5832 3a583230 58323025 3230253a     2X:%02X:%02X:%02
   1f504:	53532058 253a4449 00000a73 646e453e     X SSID:%s...>End
   1f514:	20666f20 6e616373 00000000 2064250a      of scan.....%d 
   1f524:	64205041 20617461 64616f6c 69206465     AP data loaded i
   1f534:	6874206e 61702065 616f6c79 00000064     n the payload...
   1f544:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   1f554:	2074696e 6c6c6163 72726520 2821726f     nit call error!(
   1f564:	0d296425 0000000a 7473614c 73657220     %d).....Last res
   1f574:	63207465 65737561 0000203a 74737953     et cause: ..Syst
   1f584:	52206d65 74657365 71655220 74736575     em Reset Request
   1f594:	0000000d 63746157 676f6468 73655220     ....Watchdog Res
   1f5a4:	000d7465 65747845 6c616e72 73655220     et..External Res
   1f5b4:	000d7465 776f7242 754f206e 33332074     et..Brown Out 33
   1f5c4:	74654420 6f746365 65522072 0d746573      Detector Reset.
   1f5d4:	00000000 776f7242 754f206e 32312074     ....Brown Out 12
   1f5e4:	74654420 6f746365 65522072 0d746573      Detector Reset.
   1f5f4:	00000000 65776f50 6e4f2d72 73655220     ....Power-On Res
   1f604:	000d7465                                et..

0001f608 <FskSyncWordBuff>:
   1f608:	01c194c1                                         ...

0001f60b <macEndDevCmdReplyLen>:
   1f60b:	02010201 01010203 0c0a0802                       .........

0001f614 <maxEIRPTable>:
   1f614:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$

0001f624 <pds_mac_fid1_item_list>:
   1f624:	20001d6e 00010000 20001d6c 06010100     n.. ....l.. ....
   1f634:	20001d00 0c040200 20001d6f 15010300     ... ....o.. ....
   1f644:	20001d70 1b040400 20001dc0 24040500     p.. ....... ...$
   1f654:	20001d9c 2d040600 20001db0 36100700     ... ...-... ...6
   1f664:	20001da0 4b100800 20001d8a 60040900     ... ...K... ...`
   1f674:	20001d59 69010b00 20001d08 6f010a00     Y.. ...i... ...o
   1f684:	20001d40 75020c00 20001d42 7c020d00     @.. ...uB.. ...|
   1f694:	20001d44 83020e00 20001d46 8a020f00     D.. ....F.. ....
   1f6a4:	20001d48 91021000 20001d4a 98021100     H.. ....J.. ....
   1f6b4:	20001d4c 9f011200 20001d4d a5011300     L.. ....M.. ....
   1f6c4:	20001d52 b1011500 20001d51 ab011400     R.. ....Q.. ....
   1f6d4:	20001cf8 b7041600                       ... ....

0001f6dc <pds_mac_fid2_item_list>:
   1f6dc:	20001cee 00050001 20001d66 0a010101     ... ....f.. ....
   1f6ec:	20001ca4 10010201 20001ca5 16040301     ... ....... ....
   1f6fc:	20001ca9 1f100401 20001cb9 34100501     ... ....... ...4
   1f70c:	20001cc9 49100601 20001cd9 5e080701     ... ...I... ...^
   1f71c:	20001ce1 6b080801 20001d4e 78020901     ... ...kN.. ...x
   1f72c:	20001cfc 7f040a01 20001cf4 88040b01     ... ....... ....
   1f73c:	20001d57 91010c01                       W.. ....

0001f744 <lorawanHandlers>:
   1f744:	00012f7d 00012e91 00013021 000000fd     }/......!0......

0001f754 <radioTaskHandlers>:
   1f754:	000145c1 000146c1 000141e5 00013d41     .E...F...A..A=..
   1f764:	000149e1 00015604 000155d4 000155e6     .I...V...U...U..
   1f774:	00015528 000155e6 000155ca 000155e6     (U...U...U...U..
   1f784:	00015528 000155d4 000155d4 000155ca     (U...U...U...U..
   1f794:	00015528 00015530 00015530 00015530     (U..0U..0U..0U..
   1f7a4:	000155ec 000155d4 000155d4 000155a8     .U...U...U...U..
   1f7b4:	0001568c 000155a8 000155ca 000155a8     .V...U...U...U..
   1f7c4:	0001568c 000155d4 000155d4 000155ca     .V...U...U...U..
   1f7d4:	0001568c 00015530 00015530 00015530     .V..0U..0U..0U..
   1f7e4:	00015696 00015984 000158d4 000158d4     .V...Y...X...X..
   1f7f4:	000158d2 00015976 00015976 0001596c     .X..vY..vY..lY..
   1f804:	000158d2 00015976 0001596c 00015976     .X..vY..lY..vY..
   1f814:	000158d2 0001597c 0001597c 0001597c     .X..|Y..|Y..|Y..
   1f824:	00015a0c 00016754 00016736 000166f0     .Z..Tg..6g...f..
   1f834:	0001660e 000166f0 00016728 000166f0     .f...f..(g...f..
   1f844:	0001660e 00016736 00016736 00016728     .f..6g..6g..(g..
   1f854:	0001660e 00016606 00016606 00016606     .f...f...f...f..
   1f864:	0001696c 00016db4 00016c74 00016c74     li...m..tl..tl..
   1f874:	00016c70 00016d8c 00016d8c 00016d7e     pl...m...m..~m..
   1f884:	00016c70 00016d8c 00016d7e 00016d8c     pl...m..~m...m..
   1f894:	00016c70 00016d94 00016d94 00016d94     pl...m...m...m..
   1f8a4:	00016f98                                .o..

0001f8a8 <_global_impure_ptr>:
   1f8a8:	200000e0 00018db6 00018e8a 00018e8a     ... ............
   1f8b8:	00018da2 00018e8a 00018e8a 00018e8a     ................
   1f8c8:	00018e8a 00018e8a 00018e8a 00018e5c     ............\...
   1f8d8:	0001896e 00018e8a 00018964 00018978     n.......d...x...
   1f8e8:	00018e8a 00018dac 00018b38 00018b38     ........8...8...
   1f8f8:	00018b38 00018b38 00018b38 00018b38     8...8...8...8...
   1f908:	00018b38 00018b38 00018b38 00018e8a     8...8...8.......
   1f918:	00018e8a 00018e8a 00018e8a 00018e8a     ................
   1f928:	00018e8a 00018e8a 00018e8a 00018e8a     ................
   1f938:	00018e8a 00018e72 00018dc6 00018e8a     ....r...........
   1f948:	00018dc6 00018e8a 00018e8a 00018e8a     ................
   1f958:	00018e8a 00018d2c 00018e8a 00018e8a     ....,...........
   1f968:	00018d36 00018e8a 00018e8a 00018e8a     6...............
   1f978:	00018e8a 00018e8a 00018d64 00018e8a     ........d.......
   1f988:	00018e8a 00018d92 00018e8a 00018e8a     ................
   1f998:	00018e8a 00018e8a 00018e8a 00018e8a     ................
   1f9a8:	00018e8a 00018e8a 00018e8a 00018e8a     ................
   1f9b8:	00018b78 00018bae 00018dc6 00018dc6     x...............
   1f9c8:	00018dc6 00018c56 00018bae 00018e8a     ....V...........
   1f9d8:	00018e8a 00018c60 00018e8a 00018c72     ....`.......r...
   1f9e8:	00018e86 00018ca0 00018cca 00018e8a     ................
   1f9f8:	00018cd4 00018e8a 00018e82 00018e8a     ................
   1fa08:	00018e8a 000189c6 00464e49 00666e69     ........INF.inf.
   1fa18:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
   1fa28:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   1fa38:	37363534 62613938 66656463 00000000     456789abcdef....
   1fa48:	6c756e28 0000296c                       (null)..

0001fa50 <blanks.7238>:
   1fa50:	20202020 20202020 20202020 20202020                     

0001fa60 <zeroes.7239>:
   1fa60:	30303030 30303030 30303030 30303030     0000000000000000
   1fa70:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   1fa80:	00000043 49534f50 00000058 00000000     C...POSIX.......

0001fa90 <__mprec_bigtens>:
   1fa90:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   1faa0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   1fab0:	7f73bf3c 75154fdd                       <.s..O.u

0001fab8 <__mprec_tens>:
   1fab8:	00000000 3ff00000 00000000 40240000     .......?......$@
   1fac8:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   1fad8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   1fae8:	00000000 412e8480 00000000 416312d0     .......A......cA
   1faf8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   1fb08:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   1fb18:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   1fb28:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   1fb38:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   1fb48:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   1fb58:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   1fb68:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   1fb78:	79d99db4 44ea7843                       ...yCx.D

0001fb80 <p05.6055>:
   1fb80:	00000005 00000019 0000007d              ........}...

0001fb8c <_ctype_>:
   1fb8c:	20202000 20202020 28282020 20282828     .         ((((( 
   1fb9c:	20202020 20202020 20202020 20202020                     
   1fbac:	10108820 10101010 10101010 10101010      ...............
   1fbbc:	04040410 04040404 10040404 10101010     ................
   1fbcc:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1fbdc:	01010101 01010101 01010101 10101010     ................
   1fbec:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1fbfc:	02020202 02020202 02020202 10101010     ................
   1fc0c:	00000020 00000000 00000000 00000000      ...............
	...

0001fc90 <_init>:
   1fc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fc92:	46c0      	nop			; (mov r8, r8)
   1fc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1fc96:	bc08      	pop	{r3}
   1fc98:	469e      	mov	lr, r3
   1fc9a:	4770      	bx	lr

0001fc9c <__init_array_start>:
   1fc9c:	00019fcd 	.word	0x00019fcd

0001fca0 <__frame_dummy_init_array_entry>:
   1fca0:	000000dd                                ....

0001fca4 <_fini>:
   1fca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fca6:	46c0      	nop			; (mov r8, r8)
   1fca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1fcaa:	bc08      	pop	{r3}
   1fcac:	469e      	mov	lr, r3
   1fcae:	4770      	bx	lr

0001fcb0 <__fini_array_start>:
   1fcb0:	000000b5 	.word	0x000000b5
